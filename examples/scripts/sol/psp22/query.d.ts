// Generated by dedot cli

import type {
  ContractCallOptions,
  ContractCallResult,
  GenericContractCallResult,
  GenericContractQuery,
  GenericContractQueryCall,
  MetadataType,
} from 'dedot/contracts';
import type { GenericSubstrateApi } from 'dedot/types';
import type { TokenNameOutput, TokenSymbolOutput } from './types.js';

export interface ContractQuery<ChainApi extends GenericSubstrateApi, Type extends MetadataType>
  extends GenericContractQuery<ChainApi, Type> {
  /**
   * @param {string} owner
   * @param {string} spender
   * @param {ContractCallOptions} options
   **/
  allowance: GenericContractQueryCall<
    ChainApi,
    (
      owner: string,
      spender: string,
      options?: ContractCallOptions,
    ) => Promise<GenericContractCallResult<bigint, ContractCallResult<ChainApi>>>,
    Type
  >;

  /**
   * @param {string} spender
   * @param {bigint} value
   * @param {ContractCallOptions} options
   **/
  approve: GenericContractQueryCall<
    ChainApi,
    (
      spender: string,
      value: bigint,
      options?: ContractCallOptions,
    ) => Promise<GenericContractCallResult<[], ContractCallResult<ChainApi>>>,
    Type
  >;

  /**
   * @param {string} owner
   * @param {ContractCallOptions} options
   **/
  balanceOf: GenericContractQueryCall<
    ChainApi,
    (
      owner: string,
      options?: ContractCallOptions,
    ) => Promise<GenericContractCallResult<bigint, ContractCallResult<ChainApi>>>,
    Type
  >;

  /**
   * @param {string} spender
   * @param {bigint} deltaValue
   * @param {ContractCallOptions} options
   **/
  decreaseAllowance: GenericContractQueryCall<
    ChainApi,
    (
      spender: string,
      deltaValue: bigint,
      options?: ContractCallOptions,
    ) => Promise<GenericContractCallResult<[], ContractCallResult<ChainApi>>>,
    Type
  >;

  /**
   * @param {string} spender
   * @param {bigint} deltaValue
   * @param {ContractCallOptions} options
   **/
  increaseAllowance: GenericContractQueryCall<
    ChainApi,
    (
      spender: string,
      deltaValue: bigint,
      options?: ContractCallOptions,
    ) => Promise<GenericContractCallResult<[], ContractCallResult<ChainApi>>>,
    Type
  >;

  /**
   * @param {ContractCallOptions} options
   **/
  tokenDecimals: GenericContractQueryCall<
    ChainApi,
    (options?: ContractCallOptions) => Promise<GenericContractCallResult<number, ContractCallResult<ChainApi>>>,
    Type
  >;

  /**
   * @param {ContractCallOptions} options
   **/
  tokenName: GenericContractQueryCall<
    ChainApi,
    (
      options?: ContractCallOptions,
    ) => Promise<GenericContractCallResult<TokenNameOutput, ContractCallResult<ChainApi>>>,
    Type
  >;

  /**
   * @param {ContractCallOptions} options
   **/
  tokenSymbol: GenericContractQueryCall<
    ChainApi,
    (
      options?: ContractCallOptions,
    ) => Promise<GenericContractCallResult<TokenSymbolOutput, ContractCallResult<ChainApi>>>,
    Type
  >;

  /**
   * @param {ContractCallOptions} options
   **/
  totalSupply: GenericContractQueryCall<
    ChainApi,
    (options?: ContractCallOptions) => Promise<GenericContractCallResult<bigint, ContractCallResult<ChainApi>>>,
    Type
  >;

  /**
   * @param {string} to
   * @param {bigint} value
   * @param {number[]} data
   * @param {ContractCallOptions} options
   **/
  transfer: GenericContractQueryCall<
    ChainApi,
    (
      to: string,
      value: bigint,
      data: number[],
      options?: ContractCallOptions,
    ) => Promise<GenericContractCallResult<[], ContractCallResult<ChainApi>>>,
    Type
  >;

  /**
   * @param {string} from
   * @param {string} to
   * @param {bigint} value
   * @param {number[]} data
   * @param {ContractCallOptions} options
   **/
  transferFrom: GenericContractQueryCall<
    ChainApi,
    (
      from: string,
      to: string,
      value: bigint,
      data: number[],
      options?: ContractCallOptions,
    ) => Promise<GenericContractCallResult<[], ContractCallResult<ChainApi>>>,
    Type
  >;
}
