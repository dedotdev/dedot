// Generated by dedot cli
import type { GenericSubstrateApi } from '@dedot/types';
import type {
  ContractCallOptions,
  ContractCallResult,
  GenericContractCallResult,
  SolGenericContractQuery,
  SolGenericContractQueryCall,
} from '../../../../packages/contracts/src/index.js';
import type { TokenNameOutput, TokenSymbolOutput } from './types.js';

export interface ContractQuery<ChainApi extends GenericSubstrateApi> extends SolGenericContractQuery<ChainApi> {
  /**
   * @param {string} owner
   * @param {string} spender
   * @param {ContractCallOptions} options
   **/
  allowance: SolGenericContractQueryCall<
    ChainApi,
    (
      owner: string,
      spender: string,
      options?: ContractCallOptions,
    ) => Promise<GenericContractCallResult<[number], ContractCallResult<ChainApi>>>
  >;

  /**
   * @param {string} spender
   * @param {number} value
   * @param {ContractCallOptions} options
   **/
  approve: SolGenericContractQueryCall<
    ChainApi,
    (
      spender: string,
      value: number,
      options?: ContractCallOptions,
    ) => Promise<GenericContractCallResult<[], ContractCallResult<ChainApi>>>
  >;

  /**
   * @param {string} owner
   * @param {ContractCallOptions} options
   **/
  balanceOf: SolGenericContractQueryCall<
    ChainApi,
    (
      owner: string,
      options?: ContractCallOptions,
    ) => Promise<GenericContractCallResult<[number], ContractCallResult<ChainApi>>>
  >;

  /**
   * @param {string} spender
   * @param {number} deltaValue
   * @param {ContractCallOptions} options
   **/
  decreaseAllowance: SolGenericContractQueryCall<
    ChainApi,
    (
      spender: string,
      deltaValue: number,
      options?: ContractCallOptions,
    ) => Promise<GenericContractCallResult<[], ContractCallResult<ChainApi>>>
  >;

  /**
   * @param {string} spender
   * @param {number} deltaValue
   * @param {ContractCallOptions} options
   **/
  increaseAllowance: SolGenericContractQueryCall<
    ChainApi,
    (
      spender: string,
      deltaValue: number,
      options?: ContractCallOptions,
    ) => Promise<GenericContractCallResult<[], ContractCallResult<ChainApi>>>
  >;

  /**
   * @param {ContractCallOptions} options
   **/
  tokenDecimals: SolGenericContractQueryCall<
    ChainApi,
    (options?: ContractCallOptions) => Promise<GenericContractCallResult<[number], ContractCallResult<ChainApi>>>
  >;

  /**
   * @param {ContractCallOptions} options
   **/
  tokenName: SolGenericContractQueryCall<
    ChainApi,
    (
      options?: ContractCallOptions,
    ) => Promise<GenericContractCallResult<[TokenNameOutput], ContractCallResult<ChainApi>>>
  >;

  /**
   * @param {ContractCallOptions} options
   **/
  tokenSymbol: SolGenericContractQueryCall<
    ChainApi,
    (
      options?: ContractCallOptions,
    ) => Promise<GenericContractCallResult<[TokenSymbolOutput], ContractCallResult<ChainApi>>>
  >;

  /**
   * @param {ContractCallOptions} options
   **/
  totalSupply: SolGenericContractQueryCall<
    ChainApi,
    (options?: ContractCallOptions) => Promise<GenericContractCallResult<[number], ContractCallResult<ChainApi>>>
  >;

  /**
   * @param {string} to
   * @param {number} value
   * @param {number[]} data
   * @param {ContractCallOptions} options
   **/
  transfer: SolGenericContractQueryCall<
    ChainApi,
    (
      to: string,
      value: number,
      data: number[],
      options?: ContractCallOptions,
    ) => Promise<GenericContractCallResult<[], ContractCallResult<ChainApi>>>
  >;

  /**
   * @param {string} from
   * @param {string} to
   * @param {number} value
   * @param {number[]} data
   * @param {ContractCallOptions} options
   **/
  transferFrom: SolGenericContractQueryCall<
    ChainApi,
    (
      from: string,
      to: string,
      value: number,
      data: number[],
      options?: ContractCallOptions,
    ) => Promise<GenericContractCallResult<[], ContractCallResult<ChainApi>>>
  >;
}
