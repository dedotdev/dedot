// Generated by dedot cli

import type {
  ContractCallOptions,
  ContractCallResult,
  GenericContractCallResult,
  SolGenericContractQuery,
  SolGenericContractQueryCall,
} from 'dedot/contracts';
import type { GenericSubstrateApi } from 'dedot/types';
import type { ThrowUnitErrorOutput } from './types.js';

export interface ContractQuery<ChainApi extends GenericSubstrateApi> extends SolGenericContractQuery<ChainApi> {
  /**
   * @param {ContractCallOptions} options
   **/
  flip: SolGenericContractQueryCall<
    ChainApi,
    (options?: ContractCallOptions) => Promise<GenericContractCallResult<[], ContractCallResult<ChainApi>>>
  >;

  /**
   * @param {ContractCallOptions} options
   **/
  get: SolGenericContractQueryCall<
    ChainApi,
    (options?: ContractCallOptions) => Promise<GenericContractCallResult<[boolean], ContractCallResult<ChainApi>>>
  >;

  /**
   * @param {ContractCallOptions} options
   **/
  throwErrorWithNamedParams: SolGenericContractQueryCall<
    ChainApi,
    (options?: ContractCallOptions) => Promise<GenericContractCallResult<[boolean], ContractCallResult<ChainApi>>>
  >;

  /**
   * @param {ContractCallOptions} options
   **/
  throwErrorWithParams: SolGenericContractQueryCall<
    ChainApi,
    (options?: ContractCallOptions) => Promise<GenericContractCallResult<[boolean], ContractCallResult<ChainApi>>>
  >;

  /**
   * @param {ContractCallOptions} options
   **/
  throwUnitError: SolGenericContractQueryCall<
    ChainApi,
    (
      options?: ContractCallOptions,
    ) => Promise<GenericContractCallResult<[ThrowUnitErrorOutput], ContractCallResult<ChainApi>>>
  >;
}
