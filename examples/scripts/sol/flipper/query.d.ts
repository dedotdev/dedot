// Generated by dedot cli

import type {
  ContractCallOptions,
  ContractCallResult,
  GenericContractCallResult,
  GenericContractQuery,
  GenericContractQueryCall,
  MetadataType,
} from 'dedot/contracts';
import type { GenericSubstrateApi } from 'dedot/types';
import type { FlipWithStructFlipInput, FlipWithStructOutput } from './types.js';

export interface ContractQuery<ChainApi extends GenericSubstrateApi, Type extends MetadataType>
  extends GenericContractQuery<ChainApi, Type> {
  /**
   * @param {ContractCallOptions} options
   **/
  flip: GenericContractQueryCall<
    ChainApi,
    (options?: ContractCallOptions) => Promise<GenericContractCallResult<[], ContractCallResult<ChainApi>>>,
    Type
  >;

  /**
   * @param {FlipWithStructFlipInput} flip
   * @param {ContractCallOptions} options
   **/
  flipWithStruct: GenericContractQueryCall<
    ChainApi,
    (
      flip: FlipWithStructFlipInput,
      options?: ContractCallOptions,
    ) => Promise<GenericContractCallResult<FlipWithStructOutput, ContractCallResult<ChainApi>>>,
    Type
  >;

  /**
   * @param {ContractCallOptions} options
   **/
  get: GenericContractQueryCall<
    ChainApi,
    (options?: ContractCallOptions) => Promise<GenericContractCallResult<boolean, ContractCallResult<ChainApi>>>,
    Type
  >;

  /**
   * @param {ContractCallOptions} options
   **/
  throwErrorWithNamedParams: GenericContractQueryCall<
    ChainApi,
    (options?: ContractCallOptions) => Promise<GenericContractCallResult<boolean, ContractCallResult<ChainApi>>>,
    Type
  >;

  /**
   * @param {ContractCallOptions} options
   **/
  throwErrorWithParams: GenericContractQueryCall<
    ChainApi,
    (options?: ContractCallOptions) => Promise<GenericContractCallResult<boolean, ContractCallResult<ChainApi>>>,
    Type
  >;

  /**
   * @param {ContractCallOptions} options
   **/
  throwUnitError: GenericContractQueryCall<
    ChainApi,
    (options?: ContractCallOptions) => Promise<GenericContractCallResult<boolean, ContractCallResult<ChainApi>>>,
    Type
  >;
}
