// Generated by dedot cli

import type { Bytes, BytesLike, Fixed, FixedArray, FixedBytes, H160, UFixed } from 'dedot/codecs';
import type {
  ContractCallOptions,
  ContractCallResult,
  GenericContractCallResult,
  GenericContractQuery,
  GenericContractQueryCall,
  MetadataType,
} from 'dedot/contracts';
import type { GenericSubstrateApi } from 'dedot/types';
import type {
  EchoAllTypesTInput,
  EchoAllTypesTOutput,
  ProcessEverythingMixedEverythingInput,
  ProcessIntegersMinMaxOutput,
  ProcessTuplesEchoUserOutput,
  ProcessTuplesMatrixOfPeopleInput,
  ProcessTuplesOrdersInput,
  ProcessTuplesSummaryOutput,
  ProcessTuplesUserInput,
} from './types.js';

export interface ContractQuery<ChainApi extends GenericSubstrateApi, Type extends MetadataType>
  extends GenericContractQuery<ChainApi, Type> {
  /**
   * @param {number} u8
   * @param {number[]} u16s
   * @param {FixedArray<bigint, 3>} u2563
   * @param {bigint} i128
   * @param {FixedArray<FixedArray<bigint, 2>, 2>} i64s2x2
   * @param {FixedArray<FixedArray<FixedArray<bigint, 2>, 3>, 2>} bigMatrix
   * @param {ContractCallOptions} options
   **/
  processIntegers: GenericContractQueryCall<
    ChainApi,
    (
      u8: number,
      u16s: number[],
      u2563: FixedArray<bigint, 3>,
      i128: bigint,
      i64s2x2: FixedArray<FixedArray<bigint, 2>, 2>,
      bigMatrix: FixedArray<FixedArray<FixedArray<bigint, 2>, 3>, 2>,
      options?: ContractCallOptions,
    ) => Promise<GenericContractCallResult<[bigint, ProcessIntegersMinMaxOutput], ContractCallResult<ChainApi>>>,
    Type
  >;

  /**
   * @param {BytesLike} raw
   * @param {FixedBytes<10>} b10
   * @param {Array<FixedBytes<32>>} b32s
   * @param {FixedArray<Array<BytesLike>, 2>} twoColsDyn
   * @param {FixedArray<FixedArray<FixedBytes<4>, 3>, 2>} grid
   * @param {ContractCallOptions} options
   **/
  processBytes: GenericContractQueryCall<
    ChainApi,
    (
      raw: BytesLike,
      b10: FixedBytes<10>,
      b32s: Array<FixedBytes<32>>,
      twoColsDyn: FixedArray<Array<BytesLike>, 2>,
      grid: FixedArray<FixedArray<FixedBytes<4>, 3>, 2>,
      options?: ContractCallOptions,
    ) => Promise<GenericContractCallResult<[FixedBytes<32>, Bytes], ContractCallResult<ChainApi>>>,
    Type
  >;

  /**
   * @param {string} title
   * @param {string[]} tags
   * @param {H160} primary
   * @param {FixedArray<H160, 2>} signers
   * @param {boolean[]} ok
   * @param {ContractCallOptions} options
   **/
  processStringsAndAddresses: GenericContractQueryCall<
    ChainApi,
    (
      title: string,
      tags: string[],
      primary: H160,
      signers: FixedArray<H160, 2>,
      ok: boolean[],
      options?: ContractCallOptions,
    ) => Promise<GenericContractCallResult<[bigint, boolean], ContractCallResult<ChainApi>>>,
    Type
  >;

  /**
   * @param {UFixed<128,18>} ufDefault
   * @param {Fixed<128,18>} fDefault
   * @param {UFixed<128,18>} uf128x18
   * @param {FixedArray<Fixed<64,10>, 2>} f64x10Pair
   * @param {FixedArray<FixedArray<FixedArray<UFixed<32,5>, 2>, 2>, 2>} uf32x5Cube
   * @param {ContractCallOptions} options
   **/
  processFixedPoint: GenericContractQueryCall<
    ChainApi,
    (
      ufDefault: UFixed<128, 18>,
      fDefault: Fixed<128, 18>,
      uf128x18: UFixed<128, 18>,
      f64x10Pair: FixedArray<Fixed<64, 10>, 2>,
      uf32x5Cube: FixedArray<FixedArray<FixedArray<UFixed<32, 5>, 2>, 2>, 2>,
      options?: ContractCallOptions,
    ) => Promise<GenericContractCallResult<[UFixed<128, 18>, Fixed<128, 18>], ContractCallResult<ChainApi>>>,
    Type
  >;

  /**
   * @param {ProcessTuplesUserInput} user
   * @param {ProcessTuplesOrdersInput} orders
   * @param {ProcessTuplesMatrixOfPeopleInput} matrixOfPeople
   * @param {ContractCallOptions} options
   **/
  processTuples: GenericContractQueryCall<
    ChainApi,
    (
      user: ProcessTuplesUserInput,
      orders: ProcessTuplesOrdersInput,
      matrixOfPeople: ProcessTuplesMatrixOfPeopleInput,
      options?: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<[ProcessTuplesSummaryOutput, ProcessTuplesEchoUserOutput], ContractCallResult<ChainApi>>
    >,
    Type
  >;

  /**
   * @param {ProcessEverythingMixedEverythingInput} everything
   * @param {ContractCallOptions} options
   **/
  processEverythingMixed: GenericContractQueryCall<
    ChainApi,
    (
      everything: ProcessEverythingMixedEverythingInput,
      options?: ContractCallOptions,
    ) => Promise<GenericContractCallResult<[FixedBytes<32>, bigint], ContractCallResult<ChainApi>>>,
    Type
  >;

  /**
   * @param {H160} addr
   * @param {boolean} ok
   * @param {string} s
   * @param {BytesLike} bb
   * @param {FixedBytes<3>} b3
   * @param {number} u24
   * @param {number} i40
   * @param {UFixed<128,18>} uf128x18
   * @param {Fixed<128,18>} f128x18
   * @param {bigint[]} arrDyn
   * @param {FixedArray<bigint, 4>} arrFix
   * @param {EchoAllTypesTInput} t
   * @param {ContractCallOptions} options
   **/
  echoAllTypes: GenericContractQueryCall<
    ChainApi,
    (
      addr: H160,
      ok: boolean,
      s: string,
      bb: BytesLike,
      b3: FixedBytes<3>,
      u24: number,
      i40: number,
      uf128x18: UFixed<128, 18>,
      f128x18: Fixed<128, 18>,
      arrDyn: bigint[],
      arrFix: FixedArray<bigint, 4>,
      t: EchoAllTypesTInput,
      options?: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        [
          H160,
          boolean,
          string,
          bigint,
          FixedBytes<3>,
          number,
          number,
          UFixed<128, 18>,
          Fixed<128, 18>,
          bigint,
          bigint,
          EchoAllTypesTOutput,
        ],
        ContractCallResult<ChainApi>
      >
    >,
    Type
  >;
}
