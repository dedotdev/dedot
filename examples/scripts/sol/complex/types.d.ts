// Generated by dedot cli

import type { Bytes, BytesLike, Fixed, FixedArray, FixedBytes, H160, UFixed } from 'dedot/codecs';

export type ProcessIntegersMinMaxOutput = { min: bigint; max: bigint };

export type ProcessTuplesUserInput = { wallet: H160; active: boolean; alias: string; score: bigint; meta: BytesLike };

export type ProcessTuplesOrdersInput = Array<{
  id: FixedBytes<32>;
  qty: bigint;
  price: UFixed<128, 18>;
  items: Array<{ sku: FixedBytes<32>; count: number; note: string }>;
}>;

export type ProcessTuplesMatrixOfPeopleInput = FixedArray<
  FixedArray<
    {
      name: string;
      age: number;
      fingerprint: FixedBytes<10>;
      prefs: { emails: string[]; twoFA: boolean; backupCodes: FixedArray<FixedBytes<32>, 3> };
    },
    2
  >,
  2
>;

export type ProcessTuplesSummaryOutput = { totalOrders: bigint; totalItems: bigint; distinctSkus: bigint };

export type ProcessTuplesEchoUserOutput = { wallet: H160; active: boolean; alias: string; score: bigint; meta: Bytes };

export type ProcessEverythingMixedEverythingInput = {
  addr: H160;
  ok: boolean;
  title: string;
  blob: BytesLike;
  b1: FixedBytes<1>;
  b7: FixedBytes<7>;
  b16: FixedBytes<16>;
  b32: FixedBytes<32>;
  u8: number;
  u32: number;
  u64: bigint;
  u128: bigint;
  u256: bigint;
  i8: number;
  i32: number;
  i64: bigint;
  i128: bigint;
  i256: bigint;
  uf: UFixed<128, 18>;
  f: Fixed<128, 18>;
  ufMn: UFixed<32, 5>;
  fMn: Fixed<64, 10>;
  names: string[];
  addrGrid: FixedArray<FixedArray<H160, 2>, 3>;
  byteRows: FixedArray<Array<BytesLike>, 2>;
  nums: bigint[];
  deep: { labels: FixedArray<string, 2>; hashes: Array<FixedBytes<32>>; pairs: Array<{ a: bigint; b: bigint }> };
};

export type EverythingLoggedMetaInput = { ok: boolean; level: number; tags: string[] };

export type EchoAllTypesTInput = { x: bigint; y: bigint; label: string };

export type EchoAllTypesTOutput = { x: bigint; y: bigint; label: string };
