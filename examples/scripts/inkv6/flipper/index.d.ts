// Generated by dedot cli

import type { SubstrateApi } from 'dedot/chaintypes';
import type { InkGenericContractApi, WithLazyStorage } from 'dedot/contracts';
import type { RpcVersion, VersionedGenericSubstrateApi } from 'dedot/types';
import { ConstructorQuery } from './constructor-query.js';
import { ConstructorTx } from './constructor-tx.js';
import { ContractEvents } from './events.js';
import { ContractQuery } from './query.js';
import { ContractTx } from './tx.js';
import type { Flipper, InkPrimitivesLangError } from './types.js';

export * from './types.js';

/**
 * @name: FlipperContractApi
 * @contractName: flipper
 * @contractVersion: 6.0.0
 * @authors: Parity Technologies <admin@parity.io>
 * @language: ink! 6.0.0-alpha.3
 **/
export interface FlipperContractApi<
  Rv extends RpcVersion = RpcVersion,
  ChainApi extends VersionedGenericSubstrateApi = SubstrateApi,
> extends InkGenericContractApi<Rv, ChainApi> {
  metadataType: 'ink';
  query: ContractQuery<ChainApi[Rv], 'ink'>;
  tx: ContractTx<ChainApi[Rv], 'ink'>;
  constructorQuery: ConstructorQuery<ChainApi[Rv], 'ink'>;
  constructorTx: ConstructorTx<ChainApi[Rv], FlipperContractApi, 'ink'>;
  events: ContractEvents<ChainApi[Rv], 'ink'>;
  storage: {
    root(): Promise<Flipper>;
    lazy(): WithLazyStorage<Flipper>;
  };

  types: {
    ChainApi: ChainApi[Rv];
    RootStorage: Flipper;
    LazyStorage: WithLazyStorage<Flipper>;
    LangError: InkPrimitivesLangError;
  };
}
