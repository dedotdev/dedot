// Generated by dedot cli

import type { H160, Result, U256 } from 'dedot/codecs';
import type {
  ContractCallOptions,
  ContractCallResult,
  GenericContractCallResult,
  GenericContractQuery,
  GenericContractQueryCall,
  MetadataType,
} from 'dedot/contracts';
import type { GenericSubstrateApi } from 'dedot/types';
import type { Erc20Error } from './types.js';

export interface ContractQuery<ChainApi extends GenericSubstrateApi, Type extends MetadataType>
  extends GenericContractQuery<ChainApi, Type> {
  /**
   * Returns the total token supply.
   *
   * @param {ContractCallOptions} options
   *
   * @selector 0xdb6375a8
   **/
  totalSupply: GenericContractQueryCall<
    ChainApi,
    (options?: ContractCallOptions) => Promise<GenericContractCallResult<U256, ContractCallResult<ChainApi>>>,
    Type
  >;

  /**
   * Returns the account balance for the specified `owner`.
   *
   * Returns `0` if the account is non-existent.
   *
   * @param {H160} owner
   * @param {ContractCallOptions} options
   *
   * @selector 0x0f755a56
   **/
  balanceOf: GenericContractQueryCall<
    ChainApi,
    (
      owner: H160,
      options?: ContractCallOptions,
    ) => Promise<GenericContractCallResult<U256, ContractCallResult<ChainApi>>>,
    Type
  >;

  /**
   * Returns the amount which `spender` is still allowed to withdraw from `owner`.
   *
   * Returns `0` if no allowance has been set.
   *
   * @param {H160} owner
   * @param {H160} spender
   * @param {ContractCallOptions} options
   *
   * @selector 0x6a00165e
   **/
  allowance: GenericContractQueryCall<
    ChainApi,
    (
      owner: H160,
      spender: H160,
      options?: ContractCallOptions,
    ) => Promise<GenericContractCallResult<U256, ContractCallResult<ChainApi>>>,
    Type
  >;

  /**
   * Transfers `value` amount of tokens from the caller's account to account `to`.
   *
   * On success a `Transfer` event is emitted.
   *
   * # Errors
   *
   * Returns `InsufficientBalance` error if there are not enough tokens on
   * the caller's account balance.
   *
   * @param {H160} to
   * @param {U256} value
   * @param {ContractCallOptions} options
   *
   * @selector 0x84a15da1
   **/
  transfer: GenericContractQueryCall<
    ChainApi,
    (
      to: H160,
      value: U256,
      options?: ContractCallOptions,
    ) => Promise<GenericContractCallResult<Result<[], Erc20Error>, ContractCallResult<ChainApi>>>,
    Type
  >;

  /**
   * Allows `spender` to withdraw from the caller's account multiple times, up to
   * the `value` amount.
   *
   * If this function is called again it overwrites the current allowance with
   * `value`.
   *
   * An `Approval` event is emitted.
   *
   * @param {H160} spender
   * @param {U256} value
   * @param {ContractCallOptions} options
   *
   * @selector 0x681266a0
   **/
  approve: GenericContractQueryCall<
    ChainApi,
    (
      spender: H160,
      value: U256,
      options?: ContractCallOptions,
    ) => Promise<GenericContractCallResult<Result<[], Erc20Error>, ContractCallResult<ChainApi>>>,
    Type
  >;

  /**
   * Transfers `value` tokens on the behalf of `from` to the account `to`.
   *
   * This can be used to allow a contract to transfer tokens on ones behalf and/or
   * to charge fees in sub-currencies, for example.
   *
   * On success a `Transfer` event is emitted.
   *
   * # Errors
   *
   * Returns `InsufficientAllowance` error if there are not enough tokens allowed
   * for the caller to withdraw from `from`.
   *
   * Returns `InsufficientBalance` error if there are not enough tokens on
   * the account balance of `from`.
   *
   * @param {H160} from
   * @param {H160} to
   * @param {U256} value
   * @param {ContractCallOptions} options
   *
   * @selector 0x0b396f18
   **/
  transferFrom: GenericContractQueryCall<
    ChainApi,
    (
      from: H160,
      to: H160,
      value: U256,
      options?: ContractCallOptions,
    ) => Promise<GenericContractCallResult<Result<[], Erc20Error>, ContractCallResult<ChainApi>>>,
    Type
  >;
}
