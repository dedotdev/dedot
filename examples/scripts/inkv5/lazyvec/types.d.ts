// Generated by dedot cli
import type { Bytes } from 'dedot/codecs';

export type InkStorageLazyVecStorageVec = {
  len: { get(): Promise<number> };
  elements: { get(arg: number): Promise<LazyvecProposal> };
};

export type LazyvecProposal = { data: Bytes; until: number; approvals: number; minApprovals: number };

export type InkStorageTraitsImplsResolverKey = {};

export type InkStorageTraitsImplsAutoKey = {};

export type InkStorageTraitsImplsManualKey = {};

export type InkStorageLazy = {};

export type InkStorageLazyMapping = {};

export type LazyvecLazyVector = { proposals: InkStorageLazyVecStorageVec };

export type InkPrimitivesLangError = 'CouldNotReadInput';

export type InkEnvNoChainExtension = null;

// Utility: Detect if a type has a `.get(...)` method
type HasGetter<T> = T extends { get: (...args: any[]) => any } ? true : false;

// Recursive type: Keep props if they (or children) have `.get(...)`, preserve original type
type DeepOnlyGetters<T> = {
  [K in keyof T as HasGetter<T[K]> extends true
    ? K
    : T[K] extends object
      ? keyof DeepOnlyGetters<T[K]> extends never
        ? never
        : K
      : never]: T[K] extends object
    ? HasGetter<T[K]> extends true
      ? T[K] // preserve full type if it has `.get(...)`
      : DeepOnlyGetters<T[K]> // recurse
    : never;
};

type UnpackedLazyvecLazyVector = DeepOnlyGetters<LazyvecLazyVector>;
const a: UnpackedLazyvecLazyVector = {};
await a.proposals.len.get();
