// Generated by dedot cli

import type { BytesLike } from 'dedot/codecs';
import type {
  ContractCallOptions,
  ContractCallResult,
  GenericContractCallResult,
  GenericContractQuery,
  GenericContractQueryCall,
} from 'dedot/contracts';
import type { GenericSubstrateApi } from 'dedot/types';
import type { LazyvecProposal } from './types.js';

export interface ContractQuery<ChainApi extends GenericSubstrateApi> extends GenericContractQuery<ChainApi> {
  /**
   * Vote to approve the current proposal.
   *
   * @param {ContractCallOptions} options
   *
   * @selector 0x681266a0
   **/
  approve: GenericContractQueryCall<
    ChainApi,
    (options?: ContractCallOptions) => Promise<GenericContractCallResult<[], ContractCallResult<ChainApi>>>
  >;

  /**
   * Create a new proposal.
   *
   * Returns `None` if the current proposal is not yet finished.
   *
   * @param {BytesLike} data
   * @param {number} duration
   * @param {number} minApprovals
   * @param {ContractCallOptions} options
   *
   * @selector 0xf9fb13d3
   **/
  createProposal: GenericContractQueryCall<
    ChainApi,
    (
      data: BytesLike,
      duration: number,
      minApprovals: number,
      options?: ContractCallOptions,
    ) => Promise<GenericContractCallResult<number | undefined, ContractCallResult<ChainApi>>>
  >;

  /**
   *
   * @param {number} at
   * @param {ContractCallOptions} options
   *
   * @selector 0x2f865bd9
   **/
  get: GenericContractQueryCall<
    ChainApi,
    (
      at: number,
      options?: ContractCallOptions,
    ) => Promise<GenericContractCallResult<LazyvecProposal | undefined, ContractCallResult<ChainApi>>>
  >;
}
