// Generated by dedot cli

import type { AccountId32, AccountId32Like, FixedBytes, Hash } from 'dedot/codecs';

export type InkStorageLazyMapping = {};

export type InkStorageTraitsImplsResolverKey = {};

export type InkStorageTraitsImplsAutoKey = {};

export type InkStorageTraitsImplsManualKey = {};

export type InkStorageLazy = {};

export type MotherspaceMotherSpace = {
  spaceCodes: { get(arg: number): Promise<Hash> };
  spaceCodesNonce: { get(): Promise<number> };
  membersToSpaces: { get(arg: AccountId32Like): Promise<Array<AccountId32>> };
  deployedSpaces: { get(arg: AccountId32Like): Promise<AccountId32> };
  indexToSpace: { get(arg: number): Promise<AccountId32> };
  spacesCount: { get(): Promise<number> };
  ownerId: { get(): Promise<AccountId32> };
  idsToPluginLaunchers: { get(arg: FixedBytes<4>): Promise<AccountId32> };
  pluginLaunchers: { get(arg: number): Promise<FixedBytes<4>> };
  pluginsNonce: { get(): Promise<number> };
};

export type InkPrimitivesLangError = 'CouldNotReadInput';

export type MotherspaceError =
  | { type: 'Custom'; value: string }
  | { type: 'UnAuthorized' }
  | { type: 'SpaceNotFound' }
  | { type: 'PluginNotFound' }
  | { type: 'PluginLaunchFailed' }
  | { type: 'PluginIdExisted' };

export type MotherspaceSpaceInfo = {
  name: string;
  desc?: string | undefined;
  logo?: MotherspaceImageSource | undefined;
};

export type MotherspaceImageSource = { type: 'IpfsCid'; value: string } | { type: 'Url'; value: string };

export type MotherspaceSpaceConfig = { registration: MotherspaceRegistrationType; pricing: MotherspacePricing };

export type MotherspaceRegistrationType = 'PayToJoin' | 'RequestToJoin' | 'InviteOnly';

export type MotherspacePricing =
  | { type: 'Free' }
  | { type: 'OneTimePaid'; value: bigint }
  | { type: 'Subscription'; value: [bigint, number] };

export type MotherspacePagination = {
  items: Array<AccountId32>;
  from: number;
  perPage: number;
  hasNextPage: boolean;
  total: number;
};

export type InkEnvNoChainExtension = null;
