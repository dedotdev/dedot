// Generated by dedot cli

import type { Bytes, BytesLike } from 'dedot/codecs';

export type InkPrimitivesLangError = 'CouldNotReadInput';

export type ArtzeroProjectError =
  | { type: 'Custom'; value: string }
  | { type: 'OnlyOwner' }
  | { type: 'OnlyAdmin' }
  | { type: 'InvalidCaller' }
  | { type: 'InvalidFee' }
  | { type: 'TokenOwnerNotMatch' }
  | { type: 'NotApproved' }
  | { type: 'CannotTransfer' }
  | { type: 'CannotMint' }
  | { type: 'NotPublicMint' }
  | { type: 'NotEnoughBalance' }
  | { type: 'MaxSupply' }
  | { type: 'AlreadyInit' }
  | { type: 'NotOwner' }
  | { type: 'NotTokenOwner' }
  | { type: 'ProjectNotExist' }
  | { type: 'ProjectOwnerAndAdmin' }
  | { type: 'InvalidStartTimeAndEndTime' }
  | { type: 'InvalidPhaseCount' }
  | { type: 'CollectionOwnerAndAdmin' }
  | { type: 'CollectionNotActive' }
  | { type: 'CollectionNotExist' }
  | { type: 'InvalidInput' }
  | { type: 'InvalidType' }
  | { type: 'ClaimedAll' }
  | { type: 'TokenLimitReached' }
  | { type: 'UpdatePhase' }
  | { type: 'PhaseNotExist' }
  | { type: 'PhaseExpired' }
  | { type: 'PhaseDeactivate' }
  | { type: 'WhitelistNotExist' }
  | { type: 'WithdrawFeeError' }
  | { type: 'WithdrawNFTError' }
  | { type: 'WithdrawPSP22Error' }
  | { type: 'NotListed' }
  | { type: 'BidAlreadyExist' }
  | { type: 'BidNotExist' }
  | { type: 'NotInMarket' }
  | { type: 'NotForSale' }
  | { type: 'NotInSaleList' }
  | { type: 'InvalidBidLength' }
  | { type: 'InvalidCollectionOwner' }
  | { type: 'InvalidTime' }
  | { type: 'RewardStarted' }
  | { type: 'RewardNotStarted' }
  | { type: 'RewardNotAdded' }
  | { type: 'ClaimMustBeFalse' }
  | { type: 'HoldAmountBidderNotExist' }
  | { type: 'OwnableError'; value: OpenbrushContractsErrorsOwnableOwnableError }
  | { type: 'AccessControlError'; value: OpenbrushContractsErrorsAccessControlAccessControlError }
  | { type: 'Psp22Error'; value: OpenbrushContractsErrorsPsp22Psp22Error }
  | { type: 'Psp34Error'; value: OpenbrushContractsErrorsPsp34Psp34Error }
  | { type: 'CheckedOperations' };

export type OpenbrushContractsErrorsOwnableOwnableError = 'CallerIsNotOwner' | 'NewOwnerIsZero';

export type OpenbrushContractsErrorsAccessControlAccessControlError = 'InvalidCaller' | 'MissingRole' | 'RoleRedundant';

export type OpenbrushContractsErrorsPsp22Psp22Error =
  | { type: 'Custom'; value: Bytes }
  | { type: 'InsufficientBalance' }
  | { type: 'InsufficientAllowance' }
  | { type: 'ZeroRecipientAddress' }
  | { type: 'ZeroSenderAddress' }
  | { type: 'SafeTransferCheckFailed'; value: Bytes };

export type OpenbrushContractsErrorsPsp34Psp34Error =
  | { type: 'Custom'; value: Bytes }
  | { type: 'SelfApprove' }
  | { type: 'NotApproved' }
  | { type: 'TokenExists' }
  | { type: 'TokenNotExists' }
  | { type: 'SafeTransferCheckFailed'; value: Bytes };

export type OpenbrushContractsTypesId =
  | { type: 'U8'; value: number }
  | { type: 'U16'; value: number }
  | { type: 'U32'; value: number }
  | { type: 'U64'; value: bigint }
  | { type: 'U128'; value: bigint }
  | { type: 'Bytes'; value: Bytes };

export type OpenbrushContractsTypesIdLike =
  | { type: 'U8'; value: number }
  | { type: 'U16'; value: number }
  | { type: 'U32'; value: number }
  | { type: 'U64'; value: bigint }
  | { type: 'U128'; value: bigint }
  | { type: 'Bytes'; value: BytesLike };
