// Generated by dedot cli

import type { AccountId32, AccountId32Like, Bytes, BytesLike, Result } from 'dedot/codecs';
import type {
  ContractCallOptions,
  ContractCallResult,
  GenericContractCallResult,
  GenericContractQuery,
  GenericContractQueryCall,
} from 'dedot/contracts';
import type { GenericSubstrateApi } from 'dedot/types';
import type {
  ArtzeroProjectError,
  OpenbrushContractsErrorsOwnableOwnableError,
  OpenbrushContractsErrorsPsp34Psp34Error,
  OpenbrushContractsTypesId,
  OpenbrushContractsTypesIdLike,
} from './types.js';

export interface ContractQuery<ChainApi extends GenericSubstrateApi> extends GenericContractQuery<ChainApi> {
  /**
   * This function let NFT Contract Owner to mint a new NFT without providing NFT Traits/Attributes
   *
   * @param {ContractCallOptions} options
   *
   * @selector 0xcfdd9aa2
   **/
  mint: GenericContractQueryCall<
    ChainApi,
    (
      options?: ContractCallOptions,
    ) => Promise<GenericContractCallResult<Result<[], ArtzeroProjectError>, ContractCallResult<ChainApi>>>
  >;

  /**
   * This function let NFT Contract Owner to mint a new NFT with NFT Traits/Attributes
   *
   * @param {Array<[string, string]>} metadata
   * @param {ContractCallOptions} options
   *
   * @selector 0xf90b8f61
   **/
  mintWithAttributes: GenericContractQueryCall<
    ChainApi,
    (
      metadata: Array<[string, string]>,
      options?: ContractCallOptions,
    ) => Promise<GenericContractCallResult<Result<[], ArtzeroProjectError>, ContractCallResult<ChainApi>>>
  >;

  /**
   * Transfers ownership of the contract to a `new_owner`.
   * Can only be called by the current owner.
   *
   * On success a `OwnershipTransferred` event is emitted.
   *
   * # Errors
   *
   * Panics with `CallerIsNotOwner` error if caller is not owner.
   *
   * Panics with `NewOwnerIsZero` error if new owner's address is zero.
   *
   * @param {AccountId32Like} newOwner
   * @param {ContractCallOptions} options
   *
   * @selector 0x11f43efd
   **/
  ownableTransferOwnership: GenericContractQueryCall<
    ChainApi,
    (
      newOwner: AccountId32Like,
      options?: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<Result<[], OpenbrushContractsErrorsOwnableOwnableError>, ContractCallResult<ChainApi>>
    >
  >;

  /**
   * Leaves the contract without owner. It will not be possible to call
   * owner's functions anymore. Can only be called by the current owner.
   *
   * NOTE: Renouncing ownership will leave the contract without an owner,
   * thereby removing any functionality that is only available to the owner.
   *
   * On success a `OwnershipTransferred` event is emitted.
   *
   * # Errors
   *
   * Panics with `CallerIsNotOwner` error if caller is not owner
   *
   * @param {ContractCallOptions} options
   *
   * @selector 0x5e228753
   **/
  ownableRenounceOwnership: GenericContractQueryCall<
    ChainApi,
    (
      options?: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<Result<[], OpenbrushContractsErrorsOwnableOwnableError>, ContractCallResult<ChainApi>>
    >
  >;

  /**
   * Returns the address of the current owner.
   *
   * @param {ContractCallOptions} options
   *
   * @selector 0x4fa43c8c
   **/
  ownableOwner: GenericContractQueryCall<
    ChainApi,
    (options?: ContractCallOptions) => Promise<GenericContractCallResult<AccountId32, ContractCallResult<ChainApi>>>
  >;

  /**
   * Returns the collection `Id` of the NFT token.
   *
   * This can represents the relationship between tokens/contracts/pallets.
   *
   * @param {ContractCallOptions} options
   *
   * @selector 0xffa27a5f
   **/
  psp34CollectionId: GenericContractQueryCall<
    ChainApi,
    (
      options?: ContractCallOptions,
    ) => Promise<GenericContractCallResult<OpenbrushContractsTypesId, ContractCallResult<ChainApi>>>
  >;

  /**
   * Transfer approved or owned token from caller.
   *
   * On success a `Transfer` event is emitted.
   *
   * # Errors
   *
   * Returns `TokenNotExists` error if `id` does not exist.
   *
   * Returns `NotApproved` error if `from` doesn't have allowance for transferring.
   *
   * Returns `SafeTransferCheckFailed` error if `to` doesn't accept transfer.
   *
   * @param {AccountId32Like} to
   * @param {OpenbrushContractsTypesIdLike} id
   * @param {BytesLike} data
   * @param {ContractCallOptions} options
   *
   * @selector 0x3128d61b
   **/
  psp34Transfer: GenericContractQueryCall<
    ChainApi,
    (
      to: AccountId32Like,
      id: OpenbrushContractsTypesIdLike,
      data: BytesLike,
      options?: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<Result<[], OpenbrushContractsErrorsPsp34Psp34Error>, ContractCallResult<ChainApi>>
    >
  >;

  /**
   * Approves `operator` to withdraw the `id` token from the caller's account.
   * If `id` is `None` approves or disapproves the operator for all tokens of the caller.
   *
   * On success a `Approval` event is emitted.
   *
   * # Errors
   *
   * Returns `SelfApprove` error if it is self approve.
   *
   * Returns `NotApproved` error if caller is not owner of `id`.
   *
   * @param {AccountId32Like} operator
   * @param {OpenbrushContractsTypesIdLike | undefined} id
   * @param {boolean} approved
   * @param {ContractCallOptions} options
   *
   * @selector 0x1932a8b0
   **/
  psp34Approve: GenericContractQueryCall<
    ChainApi,
    (
      operator: AccountId32Like,
      id: OpenbrushContractsTypesIdLike | undefined,
      approved: boolean,
      options?: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<Result<[], OpenbrushContractsErrorsPsp34Psp34Error>, ContractCallResult<ChainApi>>
    >
  >;

  /**
   * Returns the owner of the token if any.
   *
   * @param {OpenbrushContractsTypesIdLike} id
   * @param {ContractCallOptions} options
   *
   * @selector 0x1168624d
   **/
  psp34OwnerOf: GenericContractQueryCall<
    ChainApi,
    (
      id: OpenbrushContractsTypesIdLike,
      options?: ContractCallOptions,
    ) => Promise<GenericContractCallResult<AccountId32 | undefined, ContractCallResult<ChainApi>>>
  >;

  /**
   * Returns `true` if the operator is approved by the owner to withdraw `id` token.
   * If `id` is `None`, returns `true` if the operator is approved to withdraw all owner's tokens.
   *
   * @param {AccountId32Like} owner
   * @param {AccountId32Like} operator
   * @param {OpenbrushContractsTypesIdLike | undefined} id
   * @param {ContractCallOptions} options
   *
   * @selector 0x4790f55a
   **/
  psp34Allowance: GenericContractQueryCall<
    ChainApi,
    (
      owner: AccountId32Like,
      operator: AccountId32Like,
      id: OpenbrushContractsTypesIdLike | undefined,
      options?: ContractCallOptions,
    ) => Promise<GenericContractCallResult<boolean, ContractCallResult<ChainApi>>>
  >;

  /**
   * Returns current NFT total supply.
   *
   * @param {ContractCallOptions} options
   *
   * @selector 0x628413fe
   **/
  psp34TotalSupply: GenericContractQueryCall<
    ChainApi,
    (options?: ContractCallOptions) => Promise<GenericContractCallResult<bigint, ContractCallResult<ChainApi>>>
  >;

  /**
   * Returns the balance of the owner.
   *
   * This represents the amount of unique tokens the owner has.
   *
   * @param {AccountId32Like} owner
   * @param {ContractCallOptions} options
   *
   * @selector 0xcde7e55f
   **/
  psp34BalanceOf: GenericContractQueryCall<
    ChainApi,
    (
      owner: AccountId32Like,
      options?: ContractCallOptions,
    ) => Promise<GenericContractCallResult<number, ContractCallResult<ChainApi>>>
  >;

  /**
   * Returns the attribute of `id` for the given `key`.
   *
   * If `id` is a collection id of the token, it returns attributes for collection.
   *
   * @param {OpenbrushContractsTypesIdLike} id
   * @param {BytesLike} key
   * @param {ContractCallOptions} options
   *
   * @selector 0xf19d48d1
   **/
  psp34MetadataGetAttribute: GenericContractQueryCall<
    ChainApi,
    (
      id: OpenbrushContractsTypesIdLike,
      key: BytesLike,
      options?: ContractCallOptions,
    ) => Promise<GenericContractCallResult<Bytes | undefined, ContractCallResult<ChainApi>>>
  >;

  /**
   * Returns a token `Id` owned by `owner` at a given `index` of its token list.
   * Use along with `balance_of` to enumerate all of ``owner``'s tokens.
   *
   * The start index is zero.
   *
   * @param {AccountId32Like} owner
   * @param {bigint} index
   * @param {ContractCallOptions} options
   *
   * @selector 0x3bcfb511
   **/
  psp34EnumerableOwnersTokenByIndex: GenericContractQueryCall<
    ChainApi,
    (
      owner: AccountId32Like,
      index: bigint,
      options?: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<OpenbrushContractsTypesId, OpenbrushContractsErrorsPsp34Psp34Error>,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   * Returns a token `Id` at a given `index` of all the tokens stored by the contract.
   * Use along with `total_supply` to enumerate all tokens.
   *
   * The start index is zero.
   *
   * @param {bigint} index
   * @param {ContractCallOptions} options
   *
   * @selector 0xcd0340d0
   **/
  psp34EnumerableTokenByIndex: GenericContractQueryCall<
    ChainApi,
    (
      index: bigint,
      options?: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<OpenbrushContractsTypesId, OpenbrushContractsErrorsPsp34Psp34Error>,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   * This function lets NFT owner to lock their NFT. Once locked, the NFT traits (attributes) can not be changed
   *
   * @param {OpenbrushContractsTypesIdLike} tokenId
   * @param {ContractCallOptions} options
   *
   * @selector 0xa7245b9b
   **/
  psp34TraitsLock: GenericContractQueryCall<
    ChainApi,
    (
      tokenId: OpenbrushContractsTypesIdLike,
      options?: ContractCallOptions,
    ) => Promise<GenericContractCallResult<Result<[], ArtzeroProjectError>, ContractCallResult<ChainApi>>>
  >;

  /**
   * This function sets the baseURI for the NFT contract. Only Contract Owner can perform this function. baseURI is the location of the metadata files if the NFT collection use external source to keep their NFT artwork. ArtZero uses IPFS by default, the baseURI can have format like this: ipfs://<hash_ID>/
   *
   * @param {string} uri
   * @param {ContractCallOptions} options
   *
   * @selector 0x4de6850b
   **/
  psp34TraitsSetBaseUri: GenericContractQueryCall<
    ChainApi,
    (
      uri: string,
      options?: ContractCallOptions,
    ) => Promise<GenericContractCallResult<Result<[], ArtzeroProjectError>, ContractCallResult<ChainApi>>>
  >;

  /**
   * This function returns how many NFTs have been locked by its owners
   *
   * @param {ContractCallOptions} options
   *
   * @selector 0x8fe2ce73
   **/
  psp34TraitsGetLockedTokenCount: GenericContractQueryCall<
    ChainApi,
    (options?: ContractCallOptions) => Promise<GenericContractCallResult<bigint, ContractCallResult<ChainApi>>>
  >;

  /**
   * This function return the metadata location of an NFT. The format is baseURI/<token_id>.json
   *
   * @param {bigint} tokenId
   * @param {ContractCallOptions} options
   *
   * @selector 0x249dfd4f
   **/
  psp34TraitsTokenUri: GenericContractQueryCall<
    ChainApi,
    (
      tokenId: bigint,
      options?: ContractCallOptions,
    ) => Promise<GenericContractCallResult<string, ContractCallResult<ChainApi>>>
  >;

  /**
   * This function set the attributes to each NFT. Only Contract Owner can perform this function. The metadata input is an array of [(attribute, value)]. The attributes in ArtZero platform are the NFT traits.
   *
   * @param {OpenbrushContractsTypesIdLike} tokenId
   * @param {Array<[string, string]>} metadata
   * @param {ContractCallOptions} options
   *
   * @selector 0x5bf8416b
   **/
  psp34TraitsSetMultipleAttributes: GenericContractQueryCall<
    ChainApi,
    (
      tokenId: OpenbrushContractsTypesIdLike,
      metadata: Array<[string, string]>,
      options?: ContractCallOptions,
    ) => Promise<GenericContractCallResult<Result<[], ArtzeroProjectError>, ContractCallResult<ChainApi>>>
  >;

  /**
   * This function return the attribute name using attribute index. Beacause attributes of an NFT can be set to anything by Contract Owner, AztZero uses this function to get all attributes of an NFT
   *
   * @param {number} index
   * @param {ContractCallOptions} options
   *
   * @selector 0xfcfe34de
   **/
  psp34TraitsGetAttributeName: GenericContractQueryCall<
    ChainApi,
    (
      index: number,
      options?: ContractCallOptions,
    ) => Promise<GenericContractCallResult<string, ContractCallResult<ChainApi>>>
  >;

  /**
   * This function return the owner of the NFT Contract
   *
   * @param {ContractCallOptions} options
   *
   * @selector 0x8e1d8d71
   **/
  psp34TraitsGetOwner: GenericContractQueryCall<
    ChainApi,
    (options?: ContractCallOptions) => Promise<GenericContractCallResult<AccountId32, ContractCallResult<ChainApi>>>
  >;

  /**
   * This function returns all available attributes of each NFT
   *
   * @param {OpenbrushContractsTypesIdLike} tokenId
   * @param {Array<string>} attributes
   * @param {ContractCallOptions} options
   *
   * @selector 0x18209102
   **/
  psp34TraitsGetAttributes: GenericContractQueryCall<
    ChainApi,
    (
      tokenId: OpenbrushContractsTypesIdLike,
      attributes: Array<string>,
      options?: ContractCallOptions,
    ) => Promise<GenericContractCallResult<Array<string>, ContractCallResult<ChainApi>>>
  >;

  /**
   * This function check if an NFT is locked or not
   *
   * @param {OpenbrushContractsTypesIdLike} tokenId
   * @param {ContractCallOptions} options
   *
   * @selector 0x59271420
   **/
  psp34TraitsIsLockedNft: GenericContractQueryCall<
    ChainApi,
    (
      tokenId: OpenbrushContractsTypesIdLike,
      options?: ContractCallOptions,
    ) => Promise<GenericContractCallResult<boolean, ContractCallResult<ChainApi>>>
  >;

  /**
   * This function return how many unique attributes in the contract
   *
   * @param {ContractCallOptions} options
   *
   * @selector 0x61c50d69
   **/
  psp34TraitsGetAttributeCount: GenericContractQueryCall<
    ChainApi,
    (options?: ContractCallOptions) => Promise<GenericContractCallResult<number, ContractCallResult<ChainApi>>>
  >;

  /**
   * This function return the latest token ID, everytime new NFT is mint, last_token_id is increased by 1 in mint function. Note: This is not the same as the total supply return by the psp34 function as NFT can be burnt.
   *
   * @param {ContractCallOptions} options
   *
   * @selector 0x6f315836
   **/
  psp34TraitsGetLastTokenId: GenericContractQueryCall<
    ChainApi,
    (options?: ContractCallOptions) => Promise<GenericContractCallResult<bigint, ContractCallResult<ChainApi>>>
  >;

  /**
   * This function allow contract owner withdraw NFT to an account in case there is any NFT sent to contract by mistake
   *
   * @param {AccountId32Like} nftContractAddress
   * @param {OpenbrushContractsTypesIdLike} tokenId
   * @param {AccountId32Like} receiver
   * @param {ContractCallOptions} options
   *
   * @selector 0xed1e1dfa
   **/
  adminTraitTranferNft: GenericContractQueryCall<
    ChainApi,
    (
      nftContractAddress: AccountId32Like,
      tokenId: OpenbrushContractsTypesIdLike,
      receiver: AccountId32Like,
      options?: ContractCallOptions,
    ) => Promise<GenericContractCallResult<Result<[], ArtzeroProjectError>, ContractCallResult<ChainApi>>>
  >;

  /**
   * This function allows contract owner to withdraw contract balance to his account.
   *
   * @param {bigint} value
   * @param {AccountId32Like} receiver
   * @param {ContractCallOptions} options
   *
   * @selector 0x07573e99
   **/
  adminTraitWithdrawFee: GenericContractQueryCall<
    ChainApi,
    (
      value: bigint,
      receiver: AccountId32Like,
      options?: ContractCallOptions,
    ) => Promise<GenericContractCallResult<Result<[], ArtzeroProjectError>, ContractCallResult<ChainApi>>>
  >;

  /**
   * This function allow contract owner withdraw PSP22 to an account in case there is any token sent to contract by mistake
   *
   * @param {AccountId32Like} psp22ContractAddress
   * @param {bigint} amount
   * @param {AccountId32Like} receiver
   * @param {ContractCallOptions} options
   *
   * @selector 0xd9aad284
   **/
  adminTraitTranferPsp22: GenericContractQueryCall<
    ChainApi,
    (
      psp22ContractAddress: AccountId32Like,
      amount: bigint,
      receiver: AccountId32Like,
      options?: ContractCallOptions,
    ) => Promise<GenericContractCallResult<Result<[], ArtzeroProjectError>, ContractCallResult<ChainApi>>>
  >;

  /**
   *
   * @param {AccountId32Like} account
   * @param {OpenbrushContractsTypesIdLike} id
   * @param {ContractCallOptions} options
   *
   * @selector 0x63c9877a
   **/
  psp34BurnableBurn: GenericContractQueryCall<
    ChainApi,
    (
      account: AccountId32Like,
      id: OpenbrushContractsTypesIdLike,
      options?: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<Result<[], OpenbrushContractsErrorsPsp34Psp34Error>, ContractCallResult<ChainApi>>
    >
  >;
}
