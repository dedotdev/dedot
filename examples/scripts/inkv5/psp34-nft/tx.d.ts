// Generated by dedot cli

import type { AccountId32Like, BytesLike } from 'dedot/codecs';
import type {
  ContractSubmittableExtrinsic,
  ContractTxOptions,
  GenericContractTx,
  GenericContractTxCall,
} from 'dedot/contracts';
import type { GenericSubstrateApi } from 'dedot/types';
import type { OpenbrushContractsTypesIdLike } from './types.js';

export interface ContractTx<ChainApi extends GenericSubstrateApi> extends GenericContractTx<ChainApi> {
  /**
   * This function let NFT Contract Owner to mint a new NFT without providing NFT Traits/Attributes
   *
   * @param {ContractTxOptions} options
   *
   * @selector 0xcfdd9aa2
   **/
  mint: GenericContractTxCall<ChainApi, (options: ContractTxOptions) => ContractSubmittableExtrinsic<ChainApi>>;

  /**
   * This function let NFT Contract Owner to mint a new NFT with NFT Traits/Attributes
   *
   * @param {Array<[string, string]>} metadata
   * @param {ContractTxOptions} options
   *
   * @selector 0xf90b8f61
   **/
  mintWithAttributes: GenericContractTxCall<
    ChainApi,
    (metadata: Array<[string, string]>, options: ContractTxOptions) => ContractSubmittableExtrinsic<ChainApi>
  >;

  /**
   * Transfers ownership of the contract to a `new_owner`.
   * Can only be called by the current owner.
   *
   * On success a `OwnershipTransferred` event is emitted.
   *
   * # Errors
   *
   * Panics with `CallerIsNotOwner` error if caller is not owner.
   *
   * Panics with `NewOwnerIsZero` error if new owner's address is zero.
   *
   * @param {AccountId32Like} newOwner
   * @param {ContractTxOptions} options
   *
   * @selector 0x11f43efd
   **/
  ownableTransferOwnership: GenericContractTxCall<
    ChainApi,
    (newOwner: AccountId32Like, options: ContractTxOptions) => ContractSubmittableExtrinsic<ChainApi>
  >;

  /**
   * Leaves the contract without owner. It will not be possible to call
   * owner's functions anymore. Can only be called by the current owner.
   *
   * NOTE: Renouncing ownership will leave the contract without an owner,
   * thereby removing any functionality that is only available to the owner.
   *
   * On success a `OwnershipTransferred` event is emitted.
   *
   * # Errors
   *
   * Panics with `CallerIsNotOwner` error if caller is not owner
   *
   * @param {ContractTxOptions} options
   *
   * @selector 0x5e228753
   **/
  ownableRenounceOwnership: GenericContractTxCall<
    ChainApi,
    (options: ContractTxOptions) => ContractSubmittableExtrinsic<ChainApi>
  >;

  /**
   * Transfer approved or owned token from caller.
   *
   * On success a `Transfer` event is emitted.
   *
   * # Errors
   *
   * Returns `TokenNotExists` error if `id` does not exist.
   *
   * Returns `NotApproved` error if `from` doesn't have allowance for transferring.
   *
   * Returns `SafeTransferCheckFailed` error if `to` doesn't accept transfer.
   *
   * @param {AccountId32Like} to
   * @param {OpenbrushContractsTypesIdLike} id
   * @param {BytesLike} data
   * @param {ContractTxOptions} options
   *
   * @selector 0x3128d61b
   **/
  psp34Transfer: GenericContractTxCall<
    ChainApi,
    (
      to: AccountId32Like,
      id: OpenbrushContractsTypesIdLike,
      data: BytesLike,
      options: ContractTxOptions,
    ) => ContractSubmittableExtrinsic<ChainApi>
  >;

  /**
   * Approves `operator` to withdraw the `id` token from the caller's account.
   * If `id` is `None` approves or disapproves the operator for all tokens of the caller.
   *
   * On success a `Approval` event is emitted.
   *
   * # Errors
   *
   * Returns `SelfApprove` error if it is self approve.
   *
   * Returns `NotApproved` error if caller is not owner of `id`.
   *
   * @param {AccountId32Like} operator
   * @param {OpenbrushContractsTypesIdLike | undefined} id
   * @param {boolean} approved
   * @param {ContractTxOptions} options
   *
   * @selector 0x1932a8b0
   **/
  psp34Approve: GenericContractTxCall<
    ChainApi,
    (
      operator: AccountId32Like,
      id: OpenbrushContractsTypesIdLike | undefined,
      approved: boolean,
      options: ContractTxOptions,
    ) => ContractSubmittableExtrinsic<ChainApi>
  >;

  /**
   * This function lets NFT owner to lock their NFT. Once locked, the NFT traits (attributes) can not be changed
   *
   * @param {OpenbrushContractsTypesIdLike} tokenId
   * @param {ContractTxOptions} options
   *
   * @selector 0xa7245b9b
   **/
  psp34TraitsLock: GenericContractTxCall<
    ChainApi,
    (tokenId: OpenbrushContractsTypesIdLike, options: ContractTxOptions) => ContractSubmittableExtrinsic<ChainApi>
  >;

  /**
   * This function sets the baseURI for the NFT contract. Only Contract Owner can perform this function. baseURI is the location of the metadata files if the NFT collection use external source to keep their NFT artwork. ArtZero uses IPFS by default, the baseURI can have format like this: ipfs://<hash_ID>/
   *
   * @param {string} uri
   * @param {ContractTxOptions} options
   *
   * @selector 0x4de6850b
   **/
  psp34TraitsSetBaseUri: GenericContractTxCall<
    ChainApi,
    (uri: string, options: ContractTxOptions) => ContractSubmittableExtrinsic<ChainApi>
  >;

  /**
   * This function set the attributes to each NFT. Only Contract Owner can perform this function. The metadata input is an array of [(attribute, value)]. The attributes in ArtZero platform are the NFT traits.
   *
   * @param {OpenbrushContractsTypesIdLike} tokenId
   * @param {Array<[string, string]>} metadata
   * @param {ContractTxOptions} options
   *
   * @selector 0x5bf8416b
   **/
  psp34TraitsSetMultipleAttributes: GenericContractTxCall<
    ChainApi,
    (
      tokenId: OpenbrushContractsTypesIdLike,
      metadata: Array<[string, string]>,
      options: ContractTxOptions,
    ) => ContractSubmittableExtrinsic<ChainApi>
  >;

  /**
   * This function allow contract owner withdraw NFT to an account in case there is any NFT sent to contract by mistake
   *
   * @param {AccountId32Like} nftContractAddress
   * @param {OpenbrushContractsTypesIdLike} tokenId
   * @param {AccountId32Like} receiver
   * @param {ContractTxOptions} options
   *
   * @selector 0xed1e1dfa
   **/
  adminTraitTranferNft: GenericContractTxCall<
    ChainApi,
    (
      nftContractAddress: AccountId32Like,
      tokenId: OpenbrushContractsTypesIdLike,
      receiver: AccountId32Like,
      options: ContractTxOptions,
    ) => ContractSubmittableExtrinsic<ChainApi>
  >;

  /**
   * This function allows contract owner to withdraw contract balance to his account.
   *
   * @param {bigint} value
   * @param {AccountId32Like} receiver
   * @param {ContractTxOptions} options
   *
   * @selector 0x07573e99
   **/
  adminTraitWithdrawFee: GenericContractTxCall<
    ChainApi,
    (value: bigint, receiver: AccountId32Like, options: ContractTxOptions) => ContractSubmittableExtrinsic<ChainApi>
  >;

  /**
   * This function allow contract owner withdraw PSP22 to an account in case there is any token sent to contract by mistake
   *
   * @param {AccountId32Like} psp22ContractAddress
   * @param {bigint} amount
   * @param {AccountId32Like} receiver
   * @param {ContractTxOptions} options
   *
   * @selector 0xd9aad284
   **/
  adminTraitTranferPsp22: GenericContractTxCall<
    ChainApi,
    (
      psp22ContractAddress: AccountId32Like,
      amount: bigint,
      receiver: AccountId32Like,
      options: ContractTxOptions,
    ) => ContractSubmittableExtrinsic<ChainApi>
  >;

  /**
   *
   * @param {AccountId32Like} account
   * @param {OpenbrushContractsTypesIdLike} id
   * @param {ContractTxOptions} options
   *
   * @selector 0x63c9877a
   **/
  psp34BurnableBurn: GenericContractTxCall<
    ChainApi,
    (
      account: AccountId32Like,
      id: OpenbrushContractsTypesIdLike,
      options: ContractTxOptions,
    ) => ContractSubmittableExtrinsic<ChainApi>
  >;
}
