// Generated by dedot cli
import type { AccountId32Like } from 'dedot/codecs';

export type InkStorageLazyMapping = {};

export type InkStorageTraitsImplsResolverKey = {};

export type InkStorageTraitsImplsAutoKey = {};

export type InkStorageTraitsImplsManualKey = {};

export type Psp22Token = {
  data: Psp22DataPsp22Data;
  name?: string | undefined;
  symbol?: string | undefined;
  decimals: number;
};

export type Psp22DataPsp22Data = {
  totalSupply: bigint;
  balances: { get(arg: AccountId32Like): Promise<bigint> };
  allowances: { get(arg: [AccountId32Like, AccountId32Like]): Promise<bigint> };
};

export type InkPrimitivesLangError = 'CouldNotReadInput';

export type Psp22ErrorsPsp22Error =
  | { type: 'Custom'; value: string }
  | { type: 'InsufficientBalance' }
  | { type: 'InsufficientAllowance' }
  | { type: 'ZeroRecipientAddress' }
  | { type: 'ZeroSenderAddress' }
  | { type: 'SafeTransferCheckFailed'; value: string };

export type InkEnvNoChainExtension = null;

// Utility: Detect if a type has a `.get(...)` method
type HasGetter<T> = T extends { get: (...args: any[]) => any } ? true : false;

// Recursive type: Keep props if they (or children) have `.get(...)`, preserve original type
export type DeepOnlyGetters<T> = {
  [K in keyof T as HasGetter<T[K]> extends true
    ? K
    : T[K] extends object
      ? keyof DeepOnlyGetters<T[K]> extends never
        ? never
        : K
      : never]: T[K] extends object
    ? HasGetter<T[K]> extends true
      ? T[K] // preserve full type if it has `.get(...)`
      : DeepOnlyGetters<T[K]> // recurse
    : never;
};

// Result
export type FilteredPsp22Token = DeepOnlyGetters<Psp22Token>;

// const a: FilteredPsp22Token = {};
