{
  "magicNumber": 1635018093,
  "metadataVersioned": {
    "tag": "V15",
    "value": {
      "types": [
        {
          "id": 0,
          "path": ["sp_core", "crypto", "AccountId32"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 1,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 32,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 2,
          "path": [],
          "params": [],
          "type": {
            "tag": "Primitive",
            "value": {
              "kind": "u8"
            }
          },
          "docs": []
        },
        {
          "id": 3,
          "path": ["frame_system", "AccountInfo"],
          "params": [
            {
              "name": "Nonce",
              "typeId": 4
            },
            {
              "name": "AccountData",
              "typeId": 5
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "nonce",
                  "typeId": 4,
                  "typeName": "Nonce",
                  "docs": []
                },
                {
                  "name": "consumers",
                  "typeId": 4,
                  "typeName": "RefCount",
                  "docs": []
                },
                {
                  "name": "providers",
                  "typeId": 4,
                  "typeName": "RefCount",
                  "docs": []
                },
                {
                  "name": "sufficients",
                  "typeId": 4,
                  "typeName": "RefCount",
                  "docs": []
                },
                {
                  "name": "data",
                  "typeId": 5,
                  "typeName": "AccountData",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 4,
          "path": [],
          "params": [],
          "type": {
            "tag": "Primitive",
            "value": {
              "kind": "u32"
            }
          },
          "docs": []
        },
        {
          "id": 5,
          "path": ["pallet_balances", "types", "AccountData"],
          "params": [
            {
              "name": "Balance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "free",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "reserved",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "frozen",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "flags",
                  "typeId": 7,
                  "typeName": "ExtraFlags",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 6,
          "path": [],
          "params": [],
          "type": {
            "tag": "Primitive",
            "value": {
              "kind": "u128"
            }
          },
          "docs": []
        },
        {
          "id": 7,
          "path": ["pallet_balances", "types", "ExtraFlags"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 6,
                  "typeName": "u128",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 8,
          "path": ["frame_support", "dispatch", "PerDispatchClass"],
          "params": [
            {
              "name": "T",
              "typeId": 9
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "normal",
                  "typeId": 9,
                  "typeName": "T",
                  "docs": []
                },
                {
                  "name": "operational",
                  "typeId": 9,
                  "typeName": "T",
                  "docs": []
                },
                {
                  "name": "mandatory",
                  "typeId": 9,
                  "typeName": "T",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 9,
          "path": ["sp_weights", "weight_v2", "Weight"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "ref_time",
                  "typeId": 10,
                  "typeName": "u64",
                  "docs": []
                },
                {
                  "name": "proof_size",
                  "typeId": 10,
                  "typeName": "u64",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 10,
          "path": [],
          "params": [],
          "type": {
            "tag": "Compact",
            "value": {
              "typeParam": 11
            }
          },
          "docs": []
        },
        {
          "id": 11,
          "path": [],
          "params": [],
          "type": {
            "tag": "Primitive",
            "value": {
              "kind": "u64"
            }
          },
          "docs": []
        },
        {
          "id": 12,
          "path": ["primitive_types", "H256"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 13,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 14,
          "path": ["sp_runtime", "generic", "digest", "Digest"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "logs",
                  "typeId": 15,
                  "typeName": "Vec<DigestItem>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 15,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 16
            }
          },
          "docs": []
        },
        {
          "id": 16,
          "path": ["sp_runtime", "generic", "digest", "DigestItem"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "PreRuntime",
                  "fields": [
                    {
                      "typeId": 17,
                      "typeName": "ConsensusEngineId",
                      "docs": []
                    },
                    {
                      "typeId": 13,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "Consensus",
                  "fields": [
                    {
                      "typeId": 17,
                      "typeName": "ConsensusEngineId",
                      "docs": []
                    },
                    {
                      "typeId": 13,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "Seal",
                  "fields": [
                    {
                      "typeId": 17,
                      "typeName": "ConsensusEngineId",
                      "docs": []
                    },
                    {
                      "typeId": 13,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "Other",
                  "fields": [
                    {
                      "typeId": 13,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "RuntimeEnvironmentUpdated",
                  "fields": [],
                  "index": 8,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 17,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 4,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 18,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 19
            }
          },
          "docs": []
        },
        {
          "id": 19,
          "path": ["frame_system", "EventRecord"],
          "params": [
            {
              "name": "E",
              "typeId": 20
            },
            {
              "name": "T",
              "typeId": 12
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "phase",
                  "typeId": 454,
                  "typeName": "Phase",
                  "docs": []
                },
                {
                  "name": "event",
                  "typeId": 20,
                  "typeName": "E",
                  "docs": []
                },
                {
                  "name": "topics",
                  "typeId": 455,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 20,
          "path": ["polkadot_runtime", "RuntimeEvent"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "System",
                  "fields": [
                    {
                      "typeId": 21,
                      "typeName": "frame_system::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Scheduler",
                  "fields": [
                    {
                      "typeId": 30,
                      "typeName": "pallet_scheduler::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Preimage",
                  "fields": [
                    {
                      "typeId": 35,
                      "typeName": "pallet_preimage::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 10,
                  "docs": []
                },
                {
                  "name": "Indices",
                  "fields": [
                    {
                      "typeId": 36,
                      "typeName": "pallet_indices::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "Balances",
                  "fields": [
                    {
                      "typeId": 37,
                      "typeName": "pallet_balances::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "TransactionPayment",
                  "fields": [
                    {
                      "typeId": 39,
                      "typeName": "pallet_transaction_payment::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 32,
                  "docs": []
                },
                {
                  "name": "Staking",
                  "fields": [
                    {
                      "typeId": 40,
                      "typeName": "pallet_staking::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "Offences",
                  "fields": [
                    {
                      "typeId": 46,
                      "typeName": "pallet_offences::Event",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "Session",
                  "fields": [
                    {
                      "typeId": 48,
                      "typeName": "pallet_session::Event",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": []
                },
                {
                  "name": "Grandpa",
                  "fields": [
                    {
                      "typeId": 49,
                      "typeName": "pallet_grandpa::Event",
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": []
                },
                {
                  "name": "ImOnline",
                  "fields": [
                    {
                      "typeId": 54,
                      "typeName": "pallet_im_online::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 12,
                  "docs": []
                },
                {
                  "name": "Treasury",
                  "fields": [
                    {
                      "typeId": 63,
                      "typeName": "pallet_treasury::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 19,
                  "docs": []
                },
                {
                  "name": "ConvictionVoting",
                  "fields": [
                    {
                      "typeId": 64,
                      "typeName": "pallet_conviction_voting::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 20,
                  "docs": []
                },
                {
                  "name": "Referenda",
                  "fields": [
                    {
                      "typeId": 65,
                      "typeName": "pallet_referenda::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 21,
                  "docs": []
                },
                {
                  "name": "Whitelist",
                  "fields": [
                    {
                      "typeId": 417,
                      "typeName": "pallet_whitelist::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 23,
                  "docs": []
                },
                {
                  "name": "Claims",
                  "fields": [
                    {
                      "typeId": 422,
                      "typeName": "claims::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 24,
                  "docs": []
                },
                {
                  "name": "Vesting",
                  "fields": [
                    {
                      "typeId": 423,
                      "typeName": "pallet_vesting::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 25,
                  "docs": []
                },
                {
                  "name": "Utility",
                  "fields": [
                    {
                      "typeId": 424,
                      "typeName": "pallet_utility::Event",
                      "docs": []
                    }
                  ],
                  "index": 26,
                  "docs": []
                },
                {
                  "name": "Identity",
                  "fields": [
                    {
                      "typeId": 425,
                      "typeName": "pallet_identity::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 28,
                  "docs": []
                },
                {
                  "name": "Proxy",
                  "fields": [
                    {
                      "typeId": 426,
                      "typeName": "pallet_proxy::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 29,
                  "docs": []
                },
                {
                  "name": "Multisig",
                  "fields": [
                    {
                      "typeId": 427,
                      "typeName": "pallet_multisig::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 30,
                  "docs": []
                },
                {
                  "name": "Bounties",
                  "fields": [
                    {
                      "typeId": 428,
                      "typeName": "pallet_bounties::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 34,
                  "docs": []
                },
                {
                  "name": "ChildBounties",
                  "fields": [
                    {
                      "typeId": 429,
                      "typeName": "pallet_child_bounties::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 38,
                  "docs": []
                },
                {
                  "name": "ElectionProviderMultiPhase",
                  "fields": [
                    {
                      "typeId": 430,
                      "typeName": "pallet_election_provider_multi_phase::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 36,
                  "docs": []
                },
                {
                  "name": "VoterList",
                  "fields": [
                    {
                      "typeId": 434,
                      "typeName": "pallet_bags_list::Event<Runtime, pallet_bags_list::Instance1>",
                      "docs": []
                    }
                  ],
                  "index": 37,
                  "docs": []
                },
                {
                  "name": "NominationPools",
                  "fields": [
                    {
                      "typeId": 435,
                      "typeName": "pallet_nomination_pools::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 39,
                  "docs": []
                },
                {
                  "name": "FastUnstake",
                  "fields": [
                    {
                      "typeId": 436,
                      "typeName": "pallet_fast_unstake::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 40,
                  "docs": []
                },
                {
                  "name": "ParaInclusion",
                  "fields": [
                    {
                      "typeId": 437,
                      "typeName": "parachains_inclusion::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 53,
                  "docs": []
                },
                {
                  "name": "Paras",
                  "fields": [
                    {
                      "typeId": 441,
                      "typeName": "parachains_paras::Event",
                      "docs": []
                    }
                  ],
                  "index": 56,
                  "docs": []
                },
                {
                  "name": "Hrmp",
                  "fields": [
                    {
                      "typeId": 442,
                      "typeName": "parachains_hrmp::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 60,
                  "docs": []
                },
                {
                  "name": "ParasDisputes",
                  "fields": [
                    {
                      "typeId": 443,
                      "typeName": "parachains_disputes::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 62,
                  "docs": []
                },
                {
                  "name": "Registrar",
                  "fields": [
                    {
                      "typeId": 446,
                      "typeName": "paras_registrar::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 70,
                  "docs": []
                },
                {
                  "name": "Slots",
                  "fields": [
                    {
                      "typeId": 447,
                      "typeName": "slots::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 71,
                  "docs": []
                },
                {
                  "name": "Auctions",
                  "fields": [
                    {
                      "typeId": 448,
                      "typeName": "auctions::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 72,
                  "docs": []
                },
                {
                  "name": "Crowdloan",
                  "fields": [
                    {
                      "typeId": 449,
                      "typeName": "crowdloan::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 73,
                  "docs": []
                },
                {
                  "name": "XcmPallet",
                  "fields": [
                    {
                      "typeId": 450,
                      "typeName": "pallet_xcm::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 99,
                  "docs": []
                },
                {
                  "name": "MessageQueue",
                  "fields": [
                    {
                      "typeId": 452,
                      "typeName": "pallet_message_queue::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 100,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 21,
          "path": ["frame_system", "pallet", "Event"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "ExtrinsicSuccess",
                  "fields": [
                    {
                      "name": "dispatch_info",
                      "typeId": 22,
                      "typeName": "DispatchInfo",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["An extrinsic completed successfully."]
                },
                {
                  "name": "ExtrinsicFailed",
                  "fields": [
                    {
                      "name": "dispatch_error",
                      "typeId": 25,
                      "typeName": "DispatchError",
                      "docs": []
                    },
                    {
                      "name": "dispatch_info",
                      "typeId": 22,
                      "typeName": "DispatchInfo",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": ["An extrinsic failed."]
                },
                {
                  "name": "CodeUpdated",
                  "fields": [],
                  "index": 2,
                  "docs": ["`:code` was updated."]
                },
                {
                  "name": "NewAccount",
                  "fields": [
                    {
                      "name": "account",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": ["A new account was created."]
                },
                {
                  "name": "KilledAccount",
                  "fields": [
                    {
                      "name": "account",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": ["An account was reaped."]
                },
                {
                  "name": "Remarked",
                  "fields": [
                    {
                      "name": "sender",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "hash",
                      "typeId": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": ["On on-chain remark happened."]
                }
              ]
            }
          },
          "docs": ["Event for the System pallet."]
        },
        {
          "id": 22,
          "path": ["frame_support", "dispatch", "DispatchInfo"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "weight",
                  "typeId": 9,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "class",
                  "typeId": 23,
                  "typeName": "DispatchClass",
                  "docs": []
                },
                {
                  "name": "pays_fee",
                  "typeId": 24,
                  "typeName": "Pays",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 23,
          "path": ["frame_support", "dispatch", "DispatchClass"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Normal",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Operational",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Mandatory",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 24,
          "path": ["frame_support", "dispatch", "Pays"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Yes",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "No",
                  "fields": [],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 25,
          "path": ["sp_runtime", "DispatchError"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Other",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "CannotLookup",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "BadOrigin",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Module",
                  "fields": [
                    {
                      "typeId": 26,
                      "typeName": "ModuleError",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "ConsumerRemaining",
                  "fields": [],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "NoProviders",
                  "fields": [],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "TooManyConsumers",
                  "fields": [],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "Token",
                  "fields": [
                    {
                      "typeId": 27,
                      "typeName": "TokenError",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "Arithmetic",
                  "fields": [
                    {
                      "typeId": 28,
                      "typeName": "ArithmeticError",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "Transactional",
                  "fields": [
                    {
                      "typeId": 29,
                      "typeName": "TransactionalError",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": []
                },
                {
                  "name": "Exhausted",
                  "fields": [],
                  "index": 10,
                  "docs": []
                },
                {
                  "name": "Corruption",
                  "fields": [],
                  "index": 11,
                  "docs": []
                },
                {
                  "name": "Unavailable",
                  "fields": [],
                  "index": 12,
                  "docs": []
                },
                {
                  "name": "RootNotAllowed",
                  "fields": [],
                  "index": 13,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 26,
          "path": ["sp_runtime", "ModuleError"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "index",
                  "typeId": 2,
                  "typeName": "u8",
                  "docs": []
                },
                {
                  "name": "error",
                  "typeId": 17,
                  "typeName": "[u8; MAX_MODULE_ERROR_ENCODED_SIZE]",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 27,
          "path": ["sp_runtime", "TokenError"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "FundsUnavailable",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "OnlyProvider",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "BelowMinimum",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "CannotCreate",
                  "fields": [],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "UnknownAsset",
                  "fields": [],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "Frozen",
                  "fields": [],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "Unsupported",
                  "fields": [],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "CannotCreateHold",
                  "fields": [],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "NotExpendable",
                  "fields": [],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "Blocked",
                  "fields": [],
                  "index": 9,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 28,
          "path": ["sp_arithmetic", "ArithmeticError"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Underflow",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Overflow",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "DivisionByZero",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 29,
          "path": ["sp_runtime", "TransactionalError"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "LimitReached",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "NoLayer",
                  "fields": [],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 30,
          "path": ["pallet_scheduler", "pallet", "Event"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Scheduled",
                  "fields": [
                    {
                      "name": "when",
                      "typeId": 4,
                      "typeName": "BlockNumberFor<T>",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["Scheduled some task."]
                },
                {
                  "name": "Canceled",
                  "fields": [
                    {
                      "name": "when",
                      "typeId": 4,
                      "typeName": "BlockNumberFor<T>",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": ["Canceled some task."]
                },
                {
                  "name": "Dispatched",
                  "fields": [
                    {
                      "name": "task",
                      "typeId": 31,
                      "typeName": "TaskAddress<BlockNumberFor<T>>",
                      "docs": []
                    },
                    {
                      "name": "id",
                      "typeId": 32,
                      "typeName": "Option<TaskName>",
                      "docs": []
                    },
                    {
                      "name": "result",
                      "typeId": 33,
                      "typeName": "DispatchResult",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": ["Dispatched some task."]
                },
                {
                  "name": "CallUnavailable",
                  "fields": [
                    {
                      "name": "task",
                      "typeId": 31,
                      "typeName": "TaskAddress<BlockNumberFor<T>>",
                      "docs": []
                    },
                    {
                      "name": "id",
                      "typeId": 32,
                      "typeName": "Option<TaskName>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": ["The call for the provided hash was not found so the task has been aborted."]
                },
                {
                  "name": "PeriodicFailed",
                  "fields": [
                    {
                      "name": "task",
                      "typeId": 31,
                      "typeName": "TaskAddress<BlockNumberFor<T>>",
                      "docs": []
                    },
                    {
                      "name": "id",
                      "typeId": 32,
                      "typeName": "Option<TaskName>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": ["The given task was unable to be renewed since the agenda is full at that block."]
                },
                {
                  "name": "PermanentlyOverweight",
                  "fields": [
                    {
                      "name": "task",
                      "typeId": 31,
                      "typeName": "TaskAddress<BlockNumberFor<T>>",
                      "docs": []
                    },
                    {
                      "name": "id",
                      "typeId": 32,
                      "typeName": "Option<TaskName>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": ["The given task can never be executed since it is overweight."]
                }
              ]
            }
          },
          "docs": ["Events type."]
        },
        {
          "id": 31,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [4, 4]
            }
          },
          "docs": []
        },
        {
          "id": 32,
          "path": ["Option"],
          "params": [
            {
              "name": "T",
              "typeId": 1
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 1,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 33,
          "path": ["Result"],
          "params": [
            {
              "name": "T",
              "typeId": 34
            },
            {
              "name": "E",
              "typeId": 25
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Ok",
                  "fields": [
                    {
                      "typeId": 34,
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Err",
                  "fields": [
                    {
                      "typeId": 25,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 34,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": []
            }
          },
          "docs": []
        },
        {
          "id": 35,
          "path": ["pallet_preimage", "pallet", "Event"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Noted",
                  "fields": [
                    {
                      "name": "hash",
                      "typeId": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["A preimage has been noted."]
                },
                {
                  "name": "Requested",
                  "fields": [
                    {
                      "name": "hash",
                      "typeId": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": ["A preimage has been requested."]
                },
                {
                  "name": "Cleared",
                  "fields": [
                    {
                      "name": "hash",
                      "typeId": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": ["A preimage has ben cleared."]
                }
              ]
            }
          },
          "docs": ["The `Event` enum of this pallet"]
        },
        {
          "id": 36,
          "path": ["pallet_indices", "pallet", "Event"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "IndexAssigned",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "T::AccountIndex",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["A account index was assigned."]
                },
                {
                  "name": "IndexFreed",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "T::AccountIndex",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": ["A account index has been freed up (unassigned)."]
                },
                {
                  "name": "IndexFrozen",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "T::AccountIndex",
                      "docs": []
                    },
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": ["A account index has been frozen to its current account ID."]
                }
              ]
            }
          },
          "docs": ["The `Event` enum of this pallet"]
        },
        {
          "id": 37,
          "path": ["pallet_balances", "pallet", "Event"],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Endowed",
                  "fields": [
                    {
                      "name": "account",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "free_balance",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["An account was created with some free balance."]
                },
                {
                  "name": "DustLost",
                  "fields": [
                    {
                      "name": "account",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "An account was removed whose balance was non-zero but below ExistentialDeposit,",
                    "resulting in an outright loss."
                  ]
                },
                {
                  "name": "Transfer",
                  "fields": [
                    {
                      "name": "from",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "to",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": ["Transfer succeeded."]
                },
                {
                  "name": "BalanceSet",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "free",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": ["A balance was set by root."]
                },
                {
                  "name": "Reserved",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": ["Some balance was reserved (moved from free to reserved)."]
                },
                {
                  "name": "Unreserved",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": ["Some balance was unreserved (moved from reserved to free)."]
                },
                {
                  "name": "ReserveRepatriated",
                  "fields": [
                    {
                      "name": "from",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "to",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    },
                    {
                      "name": "destination_status",
                      "typeId": 38,
                      "typeName": "Status",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "Some balance was moved from the reserve of the first account to the second account.",
                    "Final argument indicates the destination balance type."
                  ]
                },
                {
                  "name": "Deposit",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": ["Some amount was deposited (e.g. for transaction fees)."]
                },
                {
                  "name": "Withdraw",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": ["Some amount was withdrawn from the account (e.g. for transaction fees)."]
                },
                {
                  "name": "Slashed",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": ["Some amount was removed from the account (e.g. for misbehavior)."]
                },
                {
                  "name": "Minted",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 10,
                  "docs": ["Some amount was minted into an account."]
                },
                {
                  "name": "Burned",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": ["Some amount was burned from an account."]
                },
                {
                  "name": "Suspended",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 12,
                  "docs": ["Some amount was suspended from an account (it can be restored later)."]
                },
                {
                  "name": "Restored",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 13,
                  "docs": ["Some amount was restored into an account."]
                },
                {
                  "name": "Upgraded",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 14,
                  "docs": ["An account was upgraded."]
                },
                {
                  "name": "Issued",
                  "fields": [
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 15,
                  "docs": ["Total issuance was increased by `amount`, creating a credit to be balanced."]
                },
                {
                  "name": "Rescinded",
                  "fields": [
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 16,
                  "docs": ["Total issuance was decreased by `amount`, creating a debt to be balanced."]
                },
                {
                  "name": "Locked",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 17,
                  "docs": ["Some balance was locked."]
                },
                {
                  "name": "Unlocked",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 18,
                  "docs": ["Some balance was unlocked."]
                },
                {
                  "name": "Frozen",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 19,
                  "docs": ["Some balance was frozen."]
                },
                {
                  "name": "Thawed",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 20,
                  "docs": ["Some balance was thawed."]
                }
              ]
            }
          },
          "docs": ["The `Event` enum of this pallet"]
        },
        {
          "id": 38,
          "path": ["frame_support", "traits", "tokens", "misc", "BalanceStatus"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Free",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Reserved",
                  "fields": [],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 39,
          "path": ["pallet_transaction_payment", "pallet", "Event"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "TransactionFeePaid",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "actual_fee",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "tip",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,",
                    "has been paid by `who`."
                  ]
                }
              ]
            }
          },
          "docs": ["The `Event` enum of this pallet"]
        },
        {
          "id": 40,
          "path": ["pallet_staking", "pallet", "pallet", "Event"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "EraPaid",
                  "fields": [
                    {
                      "name": "era_index",
                      "typeId": 4,
                      "typeName": "EraIndex",
                      "docs": []
                    },
                    {
                      "name": "validator_payout",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "remainder",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "The era payout has been set; the first balance is the validator-payout; the second is",
                    "the remainder from the maximum amount of reward."
                  ]
                },
                {
                  "name": "Rewarded",
                  "fields": [
                    {
                      "name": "stash",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": ["The nominator has been rewarded by this amount."]
                },
                {
                  "name": "Slashed",
                  "fields": [
                    {
                      "name": "staker",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": ["A staker (validator or nominator) has been slashed by the given amount."]
                },
                {
                  "name": "SlashReported",
                  "fields": [
                    {
                      "name": "validator",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "fraction",
                      "typeId": 41,
                      "typeName": "Perbill",
                      "docs": []
                    },
                    {
                      "name": "slash_era",
                      "typeId": 4,
                      "typeName": "EraIndex",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "A slash for the given validator, for the given percentage of their stake, at the given",
                    "era as been reported."
                  ]
                },
                {
                  "name": "OldSlashingReportDiscarded",
                  "fields": [
                    {
                      "name": "session_index",
                      "typeId": 4,
                      "typeName": "SessionIndex",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "An old slashing report from a prior era was discarded because it could",
                    "not be processed."
                  ]
                },
                {
                  "name": "StakersElected",
                  "fields": [],
                  "index": 5,
                  "docs": ["A new set of stakers was elected."]
                },
                {
                  "name": "Bonded",
                  "fields": [
                    {
                      "name": "stash",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "An account has bonded this amount. \\[stash, amount\\]",
                    "",
                    "NOTE: This event is only emitted when funds are bonded via a dispatchable. Notably,",
                    "it will not be emitted for staking rewards when they are added to stake."
                  ]
                },
                {
                  "name": "Unbonded",
                  "fields": [
                    {
                      "name": "stash",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": ["An account has unbonded this amount."]
                },
                {
                  "name": "Withdrawn",
                  "fields": [
                    {
                      "name": "stash",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "An account has called `withdraw_unbonded` and removed unbonding chunks worth `Balance`",
                    "from the unlocking queue."
                  ]
                },
                {
                  "name": "Kicked",
                  "fields": [
                    {
                      "name": "nominator",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "stash",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": ["A nominator has been kicked from a validator."]
                },
                {
                  "name": "StakingElectionFailed",
                  "fields": [],
                  "index": 10,
                  "docs": ["The election failed. No new era is planned."]
                },
                {
                  "name": "Chilled",
                  "fields": [
                    {
                      "name": "stash",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": ["An account has stopped participating as either a validator or nominator."]
                },
                {
                  "name": "PayoutStarted",
                  "fields": [
                    {
                      "name": "era_index",
                      "typeId": 4,
                      "typeName": "EraIndex",
                      "docs": []
                    },
                    {
                      "name": "validator_stash",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 12,
                  "docs": ["The stakers' rewards are getting paid."]
                },
                {
                  "name": "ValidatorPrefsSet",
                  "fields": [
                    {
                      "name": "stash",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "prefs",
                      "typeId": 42,
                      "typeName": "ValidatorPrefs",
                      "docs": []
                    }
                  ],
                  "index": 13,
                  "docs": ["A validator has set their preferences."]
                },
                {
                  "name": "SnapshotVotersSizeExceeded",
                  "fields": [
                    {
                      "name": "size",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 14,
                  "docs": ["Voters size limit reached."]
                },
                {
                  "name": "SnapshotTargetsSizeExceeded",
                  "fields": [
                    {
                      "name": "size",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 15,
                  "docs": ["Targets size limit reached."]
                },
                {
                  "name": "ForceEra",
                  "fields": [
                    {
                      "name": "mode",
                      "typeId": 45,
                      "typeName": "Forcing",
                      "docs": []
                    }
                  ],
                  "index": 16,
                  "docs": ["A new force era mode was set."]
                }
              ]
            }
          },
          "docs": ["The `Event` enum of this pallet"]
        },
        {
          "id": 41,
          "path": ["sp_arithmetic", "per_things", "Perbill"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 42,
          "path": ["pallet_staking", "ValidatorPrefs"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "commission",
                  "typeId": 43,
                  "typeName": "Perbill",
                  "docs": []
                },
                {
                  "name": "blocked",
                  "typeId": 44,
                  "typeName": "bool",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 43,
          "path": [],
          "params": [],
          "type": {
            "tag": "Compact",
            "value": {
              "typeParam": 41
            }
          },
          "docs": []
        },
        {
          "id": 44,
          "path": [],
          "params": [],
          "type": {
            "tag": "Primitive",
            "value": {
              "kind": "bool"
            }
          },
          "docs": []
        },
        {
          "id": 45,
          "path": ["pallet_staking", "Forcing"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "NotForcing",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "ForceNew",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "ForceNone",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "ForceAlways",
                  "fields": [],
                  "index": 3,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 46,
          "path": ["pallet_offences", "pallet", "Event"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Offence",
                  "fields": [
                    {
                      "name": "kind",
                      "typeId": 47,
                      "typeName": "Kind",
                      "docs": []
                    },
                    {
                      "name": "timeslot",
                      "typeId": 13,
                      "typeName": "OpaqueTimeSlot",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "There is an offence reported of the given `kind` happened at the `session_index` and",
                    "(kind-specific) time slot. This event is not deposited for duplicate slashes.",
                    "\\[kind, timeslot\\]."
                  ]
                }
              ]
            }
          },
          "docs": ["Events type."]
        },
        {
          "id": 47,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 16,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 48,
          "path": ["pallet_session", "pallet", "Event"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "NewSession",
                  "fields": [
                    {
                      "name": "session_index",
                      "typeId": 4,
                      "typeName": "SessionIndex",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "New session has happened. Note that the argument is the session index, not the",
                    "block number as the type might suggest."
                  ]
                }
              ]
            }
          },
          "docs": ["The `Event` enum of this pallet"]
        },
        {
          "id": 49,
          "path": ["pallet_grandpa", "pallet", "Event"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "NewAuthorities",
                  "fields": [
                    {
                      "name": "authority_set",
                      "typeId": 50,
                      "typeName": "AuthorityList",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["New authority set has been applied."]
                },
                {
                  "name": "Paused",
                  "fields": [],
                  "index": 1,
                  "docs": ["Current authority set has been paused."]
                },
                {
                  "name": "Resumed",
                  "fields": [],
                  "index": 2,
                  "docs": ["Current authority set has been resumed."]
                }
              ]
            }
          },
          "docs": ["The `Event` enum of this pallet"]
        },
        {
          "id": 50,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 51
            }
          },
          "docs": []
        },
        {
          "id": 51,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [52, 11]
            }
          },
          "docs": []
        },
        {
          "id": 52,
          "path": ["sp_consensus_grandpa", "app", "Public"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 53,
                  "typeName": "ed25519::Public",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 53,
          "path": ["sp_core", "ed25519", "Public"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 54,
          "path": ["pallet_im_online", "pallet", "Event"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "HeartbeatReceived",
                  "fields": [
                    {
                      "name": "authority_id",
                      "typeId": 55,
                      "typeName": "T::AuthorityId",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["A new heartbeat was received from `AuthorityId`."]
                },
                {
                  "name": "AllGood",
                  "fields": [],
                  "index": 1,
                  "docs": ["At the end of the session, no offence was committed."]
                },
                {
                  "name": "SomeOffline",
                  "fields": [
                    {
                      "name": "offline",
                      "typeId": 57,
                      "typeName": "Vec<IdentificationTuple<T>>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": ["At the end of the session, at least one validator was found to be offline."]
                }
              ]
            }
          },
          "docs": ["The `Event` enum of this pallet"]
        },
        {
          "id": 55,
          "path": ["pallet_im_online", "sr25519", "app_sr25519", "Public"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 56,
                  "typeName": "sr25519::Public",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 56,
          "path": ["sp_core", "sr25519", "Public"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 57,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 58
            }
          },
          "docs": []
        },
        {
          "id": 58,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [0, 59]
            }
          },
          "docs": []
        },
        {
          "id": 59,
          "path": ["pallet_staking", "Exposure"],
          "params": [
            {
              "name": "AccountId",
              "typeId": 0
            },
            {
              "name": "Balance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "total",
                  "typeId": 60,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "own",
                  "typeId": 60,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "others",
                  "typeId": 61,
                  "typeName": "Vec<IndividualExposure<AccountId, Balance>>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 60,
          "path": [],
          "params": [],
          "type": {
            "tag": "Compact",
            "value": {
              "typeParam": 6
            }
          },
          "docs": []
        },
        {
          "id": 61,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 62
            }
          },
          "docs": []
        },
        {
          "id": 62,
          "path": ["pallet_staking", "IndividualExposure"],
          "params": [
            {
              "name": "AccountId",
              "typeId": 0
            },
            {
              "name": "Balance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "who",
                  "typeId": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "value",
                  "typeId": 60,
                  "typeName": "Balance",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 63,
          "path": ["pallet_treasury", "pallet", "Event"],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Proposed",
                  "fields": [
                    {
                      "name": "proposal_index",
                      "typeId": 4,
                      "typeName": "ProposalIndex",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["New proposal."]
                },
                {
                  "name": "Spending",
                  "fields": [
                    {
                      "name": "budget_remaining",
                      "typeId": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": ["We have ended a spend period and will now allocate funds."]
                },
                {
                  "name": "Awarded",
                  "fields": [
                    {
                      "name": "proposal_index",
                      "typeId": 4,
                      "typeName": "ProposalIndex",
                      "docs": []
                    },
                    {
                      "name": "award",
                      "typeId": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    },
                    {
                      "name": "account",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": ["Some funds have been allocated."]
                },
                {
                  "name": "Rejected",
                  "fields": [
                    {
                      "name": "proposal_index",
                      "typeId": 4,
                      "typeName": "ProposalIndex",
                      "docs": []
                    },
                    {
                      "name": "slashed",
                      "typeId": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": ["A proposal was rejected; funds were slashed."]
                },
                {
                  "name": "Burnt",
                  "fields": [
                    {
                      "name": "burnt_funds",
                      "typeId": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": ["Some of our funds have been burnt."]
                },
                {
                  "name": "Rollover",
                  "fields": [
                    {
                      "name": "rollover_balance",
                      "typeId": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": ["Spending has finished; this is the amount that rolls over until next spend."]
                },
                {
                  "name": "Deposit",
                  "fields": [
                    {
                      "name": "value",
                      "typeId": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": ["Some funds have been deposited."]
                },
                {
                  "name": "SpendApproved",
                  "fields": [
                    {
                      "name": "proposal_index",
                      "typeId": 4,
                      "typeName": "ProposalIndex",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": ["A new spend proposal has been approved."]
                },
                {
                  "name": "UpdatedInactive",
                  "fields": [
                    {
                      "name": "reactivated",
                      "typeId": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    },
                    {
                      "name": "deactivated",
                      "typeId": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": ["The inactive funds of the pallet have been updated."]
                }
              ]
            }
          },
          "docs": ["The `Event` enum of this pallet"]
        },
        {
          "id": 64,
          "path": ["pallet_conviction_voting", "pallet", "Event"],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Delegated",
                  "fields": [
                    {
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["An account has delegated their vote to another account. \\[who, target\\]"]
                },
                {
                  "name": "Undelegated",
                  "fields": [
                    {
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": ["An \\[account\\] has cancelled a previous delegation operation."]
                }
              ]
            }
          },
          "docs": ["The `Event` enum of this pallet"]
        },
        {
          "id": 65,
          "path": ["pallet_referenda", "pallet", "Event"],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Submitted",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": ["Index of the referendum."]
                    },
                    {
                      "name": "track",
                      "typeId": 66,
                      "typeName": "TrackIdOf<T, I>",
                      "docs": ["The track (and by extension proposal dispatch origin) of this referendum."]
                    },
                    {
                      "name": "proposal",
                      "typeId": 67,
                      "typeName": "BoundedCallOf<T, I>",
                      "docs": ["The proposal for the referendum."]
                    }
                  ],
                  "index": 0,
                  "docs": ["A referendum has been submitted."]
                },
                {
                  "name": "DecisionDepositPlaced",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": ["Index of the referendum."]
                    },
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": ["The account who placed the deposit."]
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": ["The amount placed by the account."]
                    }
                  ],
                  "index": 1,
                  "docs": ["The decision deposit has been placed."]
                },
                {
                  "name": "DecisionDepositRefunded",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": ["Index of the referendum."]
                    },
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": ["The account who placed the deposit."]
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": ["The amount placed by the account."]
                    }
                  ],
                  "index": 2,
                  "docs": ["The decision deposit has been refunded."]
                },
                {
                  "name": "DepositSlashed",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": ["The account who placed the deposit."]
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": ["The amount placed by the account."]
                    }
                  ],
                  "index": 3,
                  "docs": ["A deposit has been slashaed."]
                },
                {
                  "name": "DecisionStarted",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": ["Index of the referendum."]
                    },
                    {
                      "name": "track",
                      "typeId": 66,
                      "typeName": "TrackIdOf<T, I>",
                      "docs": ["The track (and by extension proposal dispatch origin) of this referendum."]
                    },
                    {
                      "name": "proposal",
                      "typeId": 67,
                      "typeName": "BoundedCallOf<T, I>",
                      "docs": ["The proposal for the referendum."]
                    },
                    {
                      "name": "tally",
                      "typeId": 416,
                      "typeName": "T::Tally",
                      "docs": ["The current tally of votes in this referendum."]
                    }
                  ],
                  "index": 4,
                  "docs": ["A referendum has moved into the deciding phase."]
                },
                {
                  "name": "ConfirmStarted",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": ["Index of the referendum."]
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "ConfirmAborted",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": ["Index of the referendum."]
                    }
                  ],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "Confirmed",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": ["Index of the referendum."]
                    },
                    {
                      "name": "tally",
                      "typeId": 416,
                      "typeName": "T::Tally",
                      "docs": ["The final tally of votes in this referendum."]
                    }
                  ],
                  "index": 7,
                  "docs": ["A referendum has ended its confirmation phase and is ready for approval."]
                },
                {
                  "name": "Approved",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": ["Index of the referendum."]
                    }
                  ],
                  "index": 8,
                  "docs": ["A referendum has been approved and its proposal has been scheduled."]
                },
                {
                  "name": "Rejected",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": ["Index of the referendum."]
                    },
                    {
                      "name": "tally",
                      "typeId": 416,
                      "typeName": "T::Tally",
                      "docs": ["The final tally of votes in this referendum."]
                    }
                  ],
                  "index": 9,
                  "docs": ["A proposal has been rejected by referendum."]
                },
                {
                  "name": "TimedOut",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": ["Index of the referendum."]
                    },
                    {
                      "name": "tally",
                      "typeId": 416,
                      "typeName": "T::Tally",
                      "docs": ["The final tally of votes in this referendum."]
                    }
                  ],
                  "index": 10,
                  "docs": ["A referendum has been timed out without being decided."]
                },
                {
                  "name": "Cancelled",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": ["Index of the referendum."]
                    },
                    {
                      "name": "tally",
                      "typeId": 416,
                      "typeName": "T::Tally",
                      "docs": ["The final tally of votes in this referendum."]
                    }
                  ],
                  "index": 11,
                  "docs": ["A referendum has been cancelled."]
                },
                {
                  "name": "Killed",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": ["Index of the referendum."]
                    },
                    {
                      "name": "tally",
                      "typeId": 416,
                      "typeName": "T::Tally",
                      "docs": ["The final tally of votes in this referendum."]
                    }
                  ],
                  "index": 12,
                  "docs": ["A referendum has been killed."]
                },
                {
                  "name": "SubmissionDepositRefunded",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": ["Index of the referendum."]
                    },
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": ["The account who placed the deposit."]
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": ["The amount placed by the account."]
                    }
                  ],
                  "index": 13,
                  "docs": ["The submission deposit has been refunded."]
                },
                {
                  "name": "MetadataSet",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": ["Index of the referendum."]
                    },
                    {
                      "name": "hash",
                      "typeId": 12,
                      "typeName": "PreimageHash",
                      "docs": ["Preimage hash."]
                    }
                  ],
                  "index": 14,
                  "docs": ["Metadata for a referendum has been set."]
                },
                {
                  "name": "MetadataCleared",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": ["Index of the referendum."]
                    },
                    {
                      "name": "hash",
                      "typeId": 12,
                      "typeName": "PreimageHash",
                      "docs": ["Preimage hash."]
                    }
                  ],
                  "index": 15,
                  "docs": ["Metadata for a referendum has been cleared."]
                }
              ]
            }
          },
          "docs": ["The `Event` enum of this pallet"]
        },
        {
          "id": 66,
          "path": [],
          "params": [],
          "type": {
            "tag": "Primitive",
            "value": {
              "kind": "u16"
            }
          },
          "docs": []
        },
        {
          "id": 67,
          "path": ["frame_support", "traits", "preimages", "Bounded"],
          "params": [
            {
              "name": "T",
              "typeId": 68
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Legacy",
                  "fields": [
                    {
                      "name": "hash",
                      "typeId": 12,
                      "typeName": "Hash",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Inline",
                  "fields": [
                    {
                      "typeId": 415,
                      "typeName": "BoundedInline",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Lookup",
                  "fields": [
                    {
                      "name": "hash",
                      "typeId": 12,
                      "typeName": "Hash",
                      "docs": []
                    },
                    {
                      "name": "len",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 68,
          "path": ["polkadot_runtime", "RuntimeCall"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "System",
                  "fields": [
                    {
                      "typeId": 69,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<System, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Scheduler",
                  "fields": [
                    {
                      "typeId": 73,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Scheduler, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Preimage",
                  "fields": [
                    {
                      "typeId": 75,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Preimage, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 10,
                  "docs": []
                },
                {
                  "name": "Babe",
                  "fields": [
                    {
                      "typeId": 76,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Babe, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Timestamp",
                  "fields": [
                    {
                      "typeId": 86,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Timestamp, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "Indices",
                  "fields": [
                    {
                      "typeId": 87,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Indices, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "Balances",
                  "fields": [
                    {
                      "typeId": 91,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Balances, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "Staking",
                  "fields": [
                    {
                      "typeId": 93,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Staking, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "Session",
                  "fields": [
                    {
                      "typeId": 102,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Session, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": []
                },
                {
                  "name": "Grandpa",
                  "fields": [
                    {
                      "typeId": 107,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Grandpa, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": []
                },
                {
                  "name": "ImOnline",
                  "fields": [
                    {
                      "typeId": 119,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ImOnline, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 12,
                  "docs": []
                },
                {
                  "name": "Treasury",
                  "fields": [
                    {
                      "typeId": 123,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Treasury, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 19,
                  "docs": []
                },
                {
                  "name": "ConvictionVoting",
                  "fields": [
                    {
                      "typeId": 124,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ConvictionVoting, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 20,
                  "docs": []
                },
                {
                  "name": "Referenda",
                  "fields": [
                    {
                      "typeId": 129,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Referenda, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 21,
                  "docs": []
                },
                {
                  "name": "Whitelist",
                  "fields": [
                    {
                      "typeId": 146,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Whitelist, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 23,
                  "docs": []
                },
                {
                  "name": "Claims",
                  "fields": [
                    {
                      "typeId": 147,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Claims, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 24,
                  "docs": []
                },
                {
                  "name": "Vesting",
                  "fields": [
                    {
                      "typeId": 156,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Vesting, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 25,
                  "docs": []
                },
                {
                  "name": "Utility",
                  "fields": [
                    {
                      "typeId": 158,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Utility, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 26,
                  "docs": []
                },
                {
                  "name": "Identity",
                  "fields": [
                    {
                      "typeId": 160,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Identity, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 28,
                  "docs": []
                },
                {
                  "name": "Proxy",
                  "fields": [
                    {
                      "typeId": 201,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Proxy, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 29,
                  "docs": []
                },
                {
                  "name": "Multisig",
                  "fields": [
                    {
                      "typeId": 204,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Multisig, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 30,
                  "docs": []
                },
                {
                  "name": "Bounties",
                  "fields": [
                    {
                      "typeId": 207,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Bounties, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 34,
                  "docs": []
                },
                {
                  "name": "ChildBounties",
                  "fields": [
                    {
                      "typeId": 208,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ChildBounties, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 38,
                  "docs": []
                },
                {
                  "name": "ElectionProviderMultiPhase",
                  "fields": [
                    {
                      "typeId": 209,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ElectionProviderMultiPhase, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 36,
                  "docs": []
                },
                {
                  "name": "VoterList",
                  "fields": [
                    {
                      "typeId": 271,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<VoterList, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 37,
                  "docs": []
                },
                {
                  "name": "NominationPools",
                  "fields": [
                    {
                      "typeId": 272,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<NominationPools, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 39,
                  "docs": []
                },
                {
                  "name": "FastUnstake",
                  "fields": [
                    {
                      "typeId": 283,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<FastUnstake, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 40,
                  "docs": []
                },
                {
                  "name": "Configuration",
                  "fields": [
                    {
                      "typeId": 284,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Configuration, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 51,
                  "docs": []
                },
                {
                  "name": "ParasShared",
                  "fields": [
                    {
                      "typeId": 291,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParasShared, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 52,
                  "docs": []
                },
                {
                  "name": "ParaInclusion",
                  "fields": [
                    {
                      "typeId": 292,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParaInclusion, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 53,
                  "docs": []
                },
                {
                  "name": "ParaInherent",
                  "fields": [
                    {
                      "typeId": 293,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParaInherent, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 54,
                  "docs": []
                },
                {
                  "name": "Paras",
                  "fields": [
                    {
                      "typeId": 327,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Paras, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 56,
                  "docs": []
                },
                {
                  "name": "Initializer",
                  "fields": [
                    {
                      "typeId": 329,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Initializer, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 57,
                  "docs": []
                },
                {
                  "name": "Hrmp",
                  "fields": [
                    {
                      "typeId": 330,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Hrmp, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 60,
                  "docs": []
                },
                {
                  "name": "ParasDisputes",
                  "fields": [
                    {
                      "typeId": 332,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParasDisputes, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 62,
                  "docs": []
                },
                {
                  "name": "ParasSlashing",
                  "fields": [
                    {
                      "typeId": 333,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParasSlashing, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 63,
                  "docs": []
                },
                {
                  "name": "Registrar",
                  "fields": [
                    {
                      "typeId": 337,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Registrar, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 70,
                  "docs": []
                },
                {
                  "name": "Slots",
                  "fields": [
                    {
                      "typeId": 338,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Slots, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 71,
                  "docs": []
                },
                {
                  "name": "Auctions",
                  "fields": [
                    {
                      "typeId": 339,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Auctions, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 72,
                  "docs": []
                },
                {
                  "name": "Crowdloan",
                  "fields": [
                    {
                      "typeId": 341,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Crowdloan, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 73,
                  "docs": []
                },
                {
                  "name": "XcmPallet",
                  "fields": [
                    {
                      "typeId": 349,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<XcmPallet, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 99,
                  "docs": []
                },
                {
                  "name": "MessageQueue",
                  "fields": [
                    {
                      "typeId": 412,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<MessageQueue, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 100,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 69,
          "path": ["frame_system", "pallet", "Call"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "remark",
                  "fields": [
                    {
                      "name": "remark",
                      "typeId": 13,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["See [`Pallet::remark`]."]
                },
                {
                  "name": "set_heap_pages",
                  "fields": [
                    {
                      "name": "pages",
                      "typeId": 11,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": ["See [`Pallet::set_heap_pages`]."]
                },
                {
                  "name": "set_code",
                  "fields": [
                    {
                      "name": "code",
                      "typeId": 13,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": ["See [`Pallet::set_code`]."]
                },
                {
                  "name": "set_code_without_checks",
                  "fields": [
                    {
                      "name": "code",
                      "typeId": 13,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": ["See [`Pallet::set_code_without_checks`]."]
                },
                {
                  "name": "set_storage",
                  "fields": [
                    {
                      "name": "items",
                      "typeId": 70,
                      "typeName": "Vec<KeyValue>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": ["See [`Pallet::set_storage`]."]
                },
                {
                  "name": "kill_storage",
                  "fields": [
                    {
                      "name": "keys",
                      "typeId": 72,
                      "typeName": "Vec<Key>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": ["See [`Pallet::kill_storage`]."]
                },
                {
                  "name": "kill_prefix",
                  "fields": [
                    {
                      "name": "prefix",
                      "typeId": 13,
                      "typeName": "Key",
                      "docs": []
                    },
                    {
                      "name": "subkeys",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": ["See [`Pallet::kill_prefix`]."]
                },
                {
                  "name": "remark_with_event",
                  "fields": [
                    {
                      "name": "remark",
                      "typeId": 13,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": ["See [`Pallet::remark_with_event`]."]
                }
              ]
            }
          },
          "docs": ["Contains a variant per dispatchable extrinsic that this pallet has."]
        },
        {
          "id": 70,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 71
            }
          },
          "docs": []
        },
        {
          "id": 71,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [13, 13]
            }
          },
          "docs": []
        },
        {
          "id": 72,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 13
            }
          },
          "docs": []
        },
        {
          "id": 73,
          "path": ["pallet_scheduler", "pallet", "Call"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "schedule",
                  "fields": [
                    {
                      "name": "when",
                      "typeId": 4,
                      "typeName": "BlockNumberFor<T>",
                      "docs": []
                    },
                    {
                      "name": "maybe_periodic",
                      "typeId": 74,
                      "typeName": "Option<schedule::Period<BlockNumberFor<T>>>",
                      "docs": []
                    },
                    {
                      "name": "priority",
                      "typeId": 2,
                      "typeName": "schedule::Priority",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "typeId": 68,
                      "typeName": "Box<<T as Config>::RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["See [`Pallet::schedule`]."]
                },
                {
                  "name": "cancel",
                  "fields": [
                    {
                      "name": "when",
                      "typeId": 4,
                      "typeName": "BlockNumberFor<T>",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": ["See [`Pallet::cancel`]."]
                },
                {
                  "name": "schedule_named",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 1,
                      "typeName": "TaskName",
                      "docs": []
                    },
                    {
                      "name": "when",
                      "typeId": 4,
                      "typeName": "BlockNumberFor<T>",
                      "docs": []
                    },
                    {
                      "name": "maybe_periodic",
                      "typeId": 74,
                      "typeName": "Option<schedule::Period<BlockNumberFor<T>>>",
                      "docs": []
                    },
                    {
                      "name": "priority",
                      "typeId": 2,
                      "typeName": "schedule::Priority",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "typeId": 68,
                      "typeName": "Box<<T as Config>::RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": ["See [`Pallet::schedule_named`]."]
                },
                {
                  "name": "cancel_named",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 1,
                      "typeName": "TaskName",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": ["See [`Pallet::cancel_named`]."]
                },
                {
                  "name": "schedule_after",
                  "fields": [
                    {
                      "name": "after",
                      "typeId": 4,
                      "typeName": "BlockNumberFor<T>",
                      "docs": []
                    },
                    {
                      "name": "maybe_periodic",
                      "typeId": 74,
                      "typeName": "Option<schedule::Period<BlockNumberFor<T>>>",
                      "docs": []
                    },
                    {
                      "name": "priority",
                      "typeId": 2,
                      "typeName": "schedule::Priority",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "typeId": 68,
                      "typeName": "Box<<T as Config>::RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": ["See [`Pallet::schedule_after`]."]
                },
                {
                  "name": "schedule_named_after",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 1,
                      "typeName": "TaskName",
                      "docs": []
                    },
                    {
                      "name": "after",
                      "typeId": 4,
                      "typeName": "BlockNumberFor<T>",
                      "docs": []
                    },
                    {
                      "name": "maybe_periodic",
                      "typeId": 74,
                      "typeName": "Option<schedule::Period<BlockNumberFor<T>>>",
                      "docs": []
                    },
                    {
                      "name": "priority",
                      "typeId": 2,
                      "typeName": "schedule::Priority",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "typeId": 68,
                      "typeName": "Box<<T as Config>::RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": ["See [`Pallet::schedule_named_after`]."]
                }
              ]
            }
          },
          "docs": ["Contains a variant per dispatchable extrinsic that this pallet has."]
        },
        {
          "id": 74,
          "path": ["Option"],
          "params": [
            {
              "name": "T",
              "typeId": 31
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 31,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 75,
          "path": ["pallet_preimage", "pallet", "Call"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "note_preimage",
                  "fields": [
                    {
                      "name": "bytes",
                      "typeId": 13,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["See [`Pallet::note_preimage`]."]
                },
                {
                  "name": "unnote_preimage",
                  "fields": [
                    {
                      "name": "hash",
                      "typeId": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": ["See [`Pallet::unnote_preimage`]."]
                },
                {
                  "name": "request_preimage",
                  "fields": [
                    {
                      "name": "hash",
                      "typeId": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": ["See [`Pallet::request_preimage`]."]
                },
                {
                  "name": "unrequest_preimage",
                  "fields": [
                    {
                      "name": "hash",
                      "typeId": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": ["See [`Pallet::unrequest_preimage`]."]
                }
              ]
            }
          },
          "docs": ["Contains a variant per dispatchable extrinsic that this pallet has."]
        },
        {
          "id": 76,
          "path": ["pallet_babe", "pallet", "Call"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "report_equivocation",
                  "fields": [
                    {
                      "name": "equivocation_proof",
                      "typeId": 77,
                      "typeName": "Box<EquivocationProof<HeaderFor<T>>>",
                      "docs": []
                    },
                    {
                      "name": "key_owner_proof",
                      "typeId": 82,
                      "typeName": "T::KeyOwnerProof",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["See [`Pallet::report_equivocation`]."]
                },
                {
                  "name": "report_equivocation_unsigned",
                  "fields": [
                    {
                      "name": "equivocation_proof",
                      "typeId": 77,
                      "typeName": "Box<EquivocationProof<HeaderFor<T>>>",
                      "docs": []
                    },
                    {
                      "name": "key_owner_proof",
                      "typeId": 82,
                      "typeName": "T::KeyOwnerProof",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": ["See [`Pallet::report_equivocation_unsigned`]."]
                },
                {
                  "name": "plan_config_change",
                  "fields": [
                    {
                      "name": "config",
                      "typeId": 83,
                      "typeName": "NextConfigDescriptor",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": ["See [`Pallet::plan_config_change`]."]
                }
              ]
            }
          },
          "docs": ["Contains a variant per dispatchable extrinsic that this pallet has."]
        },
        {
          "id": 77,
          "path": ["sp_consensus_slots", "EquivocationProof"],
          "params": [
            {
              "name": "Header",
              "typeId": 78
            },
            {
              "name": "Id",
              "typeId": 80
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "offender",
                  "typeId": 80,
                  "typeName": "Id",
                  "docs": []
                },
                {
                  "name": "slot",
                  "typeId": 81,
                  "typeName": "Slot",
                  "docs": []
                },
                {
                  "name": "first_header",
                  "typeId": 78,
                  "typeName": "Header",
                  "docs": []
                },
                {
                  "name": "second_header",
                  "typeId": 78,
                  "typeName": "Header",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 78,
          "path": ["sp_runtime", "generic", "header", "Header"],
          "params": [
            {
              "name": "Number",
              "typeId": 4
            },
            {
              "name": "Hash"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "parent_hash",
                  "typeId": 12,
                  "typeName": "Hash::Output",
                  "docs": []
                },
                {
                  "name": "number",
                  "typeId": 79,
                  "typeName": "Number",
                  "docs": []
                },
                {
                  "name": "state_root",
                  "typeId": 12,
                  "typeName": "Hash::Output",
                  "docs": []
                },
                {
                  "name": "extrinsics_root",
                  "typeId": 12,
                  "typeName": "Hash::Output",
                  "docs": []
                },
                {
                  "name": "digest",
                  "typeId": 14,
                  "typeName": "Digest",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 79,
          "path": [],
          "params": [],
          "type": {
            "tag": "Compact",
            "value": {
              "typeParam": 4
            }
          },
          "docs": []
        },
        {
          "id": 80,
          "path": ["sp_consensus_babe", "app", "Public"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 56,
                  "typeName": "sr25519::Public",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 81,
          "path": ["sp_consensus_slots", "Slot"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 11,
                  "typeName": "u64",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 82,
          "path": ["sp_session", "MembershipProof"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "session",
                  "typeId": 4,
                  "typeName": "SessionIndex",
                  "docs": []
                },
                {
                  "name": "trie_nodes",
                  "typeId": 72,
                  "typeName": "Vec<Vec<u8>>",
                  "docs": []
                },
                {
                  "name": "validator_count",
                  "typeId": 4,
                  "typeName": "ValidatorCount",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 83,
          "path": ["sp_consensus_babe", "digests", "NextConfigDescriptor"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "V1",
                  "fields": [
                    {
                      "name": "c",
                      "typeId": 84,
                      "typeName": "(u64, u64)",
                      "docs": []
                    },
                    {
                      "name": "allowed_slots",
                      "typeId": 85,
                      "typeName": "AllowedSlots",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 84,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [11, 11]
            }
          },
          "docs": []
        },
        {
          "id": 85,
          "path": ["sp_consensus_babe", "AllowedSlots"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "PrimarySlots",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "PrimaryAndSecondaryPlainSlots",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "PrimaryAndSecondaryVRFSlots",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 86,
          "path": ["pallet_timestamp", "pallet", "Call"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "set",
                  "fields": [
                    {
                      "name": "now",
                      "typeId": 10,
                      "typeName": "T::Moment",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["See [`Pallet::set`]."]
                }
              ]
            }
          },
          "docs": ["Contains a variant per dispatchable extrinsic that this pallet has."]
        },
        {
          "id": 87,
          "path": ["pallet_indices", "pallet", "Call"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "claim",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "T::AccountIndex",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["See [`Pallet::claim`]."]
                },
                {
                  "name": "transfer",
                  "fields": [
                    {
                      "name": "new",
                      "typeId": 88,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "T::AccountIndex",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": ["See [`Pallet::transfer`]."]
                },
                {
                  "name": "free",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "T::AccountIndex",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": ["See [`Pallet::free`]."]
                },
                {
                  "name": "force_transfer",
                  "fields": [
                    {
                      "name": "new",
                      "typeId": 88,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "T::AccountIndex",
                      "docs": []
                    },
                    {
                      "name": "freeze",
                      "typeId": 44,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": ["See [`Pallet::force_transfer`]."]
                },
                {
                  "name": "freeze",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "T::AccountIndex",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": ["See [`Pallet::freeze`]."]
                }
              ]
            }
          },
          "docs": ["Contains a variant per dispatchable extrinsic that this pallet has."]
        },
        {
          "id": 88,
          "path": ["sp_runtime", "multiaddress", "MultiAddress"],
          "params": [
            {
              "name": "AccountId",
              "typeId": 0
            },
            {
              "name": "AccountIndex",
              "typeId": 34
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Id",
                  "fields": [
                    {
                      "typeId": 0,
                      "typeName": "AccountId",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Index",
                  "fields": [
                    {
                      "typeId": 89,
                      "typeName": "AccountIndex",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Raw",
                  "fields": [
                    {
                      "typeId": 13,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Address32",
                  "fields": [
                    {
                      "typeId": 1,
                      "typeName": "[u8; 32]",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "Address20",
                  "fields": [
                    {
                      "typeId": 90,
                      "typeName": "[u8; 20]",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 89,
          "path": [],
          "params": [],
          "type": {
            "tag": "Compact",
            "value": {
              "typeParam": 34
            }
          },
          "docs": []
        },
        {
          "id": 90,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 20,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 91,
          "path": ["pallet_balances", "pallet", "Call"],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "transfer_allow_death",
                  "fields": [
                    {
                      "name": "dest",
                      "typeId": 88,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "typeId": 60,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["See [`Pallet::transfer_allow_death`]."]
                },
                {
                  "name": "set_balance_deprecated",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 88,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "new_free",
                      "typeId": 60,
                      "typeName": "T::Balance",
                      "docs": []
                    },
                    {
                      "name": "old_reserved",
                      "typeId": 60,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": ["See [`Pallet::set_balance_deprecated`]."]
                },
                {
                  "name": "force_transfer",
                  "fields": [
                    {
                      "name": "source",
                      "typeId": 88,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "typeId": 88,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "typeId": 60,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": ["See [`Pallet::force_transfer`]."]
                },
                {
                  "name": "transfer_keep_alive",
                  "fields": [
                    {
                      "name": "dest",
                      "typeId": 88,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "typeId": 60,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": ["See [`Pallet::transfer_keep_alive`]."]
                },
                {
                  "name": "transfer_all",
                  "fields": [
                    {
                      "name": "dest",
                      "typeId": 88,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "keep_alive",
                      "typeId": 44,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": ["See [`Pallet::transfer_all`]."]
                },
                {
                  "name": "force_unreserve",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 88,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": ["See [`Pallet::force_unreserve`]."]
                },
                {
                  "name": "upgrade_accounts",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 92,
                      "typeName": "Vec<T::AccountId>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": ["See [`Pallet::upgrade_accounts`]."]
                },
                {
                  "name": "transfer",
                  "fields": [
                    {
                      "name": "dest",
                      "typeId": 88,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "typeId": 60,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": ["See [`Pallet::transfer`]."]
                },
                {
                  "name": "force_set_balance",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 88,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "new_free",
                      "typeId": 60,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": ["See [`Pallet::force_set_balance`]."]
                }
              ]
            }
          },
          "docs": ["Contains a variant per dispatchable extrinsic that this pallet has."]
        },
        {
          "id": 92,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 0
            }
          },
          "docs": []
        },
        {
          "id": 93,
          "path": ["pallet_staking", "pallet", "pallet", "Call"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "bond",
                  "fields": [
                    {
                      "name": "value",
                      "typeId": 60,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "payee",
                      "typeId": 94,
                      "typeName": "RewardDestination<T::AccountId>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["See [`Pallet::bond`]."]
                },
                {
                  "name": "bond_extra",
                  "fields": [
                    {
                      "name": "max_additional",
                      "typeId": 60,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": ["See [`Pallet::bond_extra`]."]
                },
                {
                  "name": "unbond",
                  "fields": [
                    {
                      "name": "value",
                      "typeId": 60,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": ["See [`Pallet::unbond`]."]
                },
                {
                  "name": "withdraw_unbonded",
                  "fields": [
                    {
                      "name": "num_slashing_spans",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": ["See [`Pallet::withdraw_unbonded`]."]
                },
                {
                  "name": "validate",
                  "fields": [
                    {
                      "name": "prefs",
                      "typeId": 42,
                      "typeName": "ValidatorPrefs",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": ["See [`Pallet::validate`]."]
                },
                {
                  "name": "nominate",
                  "fields": [
                    {
                      "name": "targets",
                      "typeId": 95,
                      "typeName": "Vec<AccountIdLookupOf<T>>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": ["See [`Pallet::nominate`]."]
                },
                {
                  "name": "chill",
                  "fields": [],
                  "index": 6,
                  "docs": ["See [`Pallet::chill`]."]
                },
                {
                  "name": "set_payee",
                  "fields": [
                    {
                      "name": "payee",
                      "typeId": 94,
                      "typeName": "RewardDestination<T::AccountId>",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": ["See [`Pallet::set_payee`]."]
                },
                {
                  "name": "set_controller",
                  "fields": [],
                  "index": 8,
                  "docs": ["See [`Pallet::set_controller`]."]
                },
                {
                  "name": "set_validator_count",
                  "fields": [
                    {
                      "name": "new",
                      "typeId": 79,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": ["See [`Pallet::set_validator_count`]."]
                },
                {
                  "name": "increase_validator_count",
                  "fields": [
                    {
                      "name": "additional",
                      "typeId": 79,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 10,
                  "docs": ["See [`Pallet::increase_validator_count`]."]
                },
                {
                  "name": "scale_validator_count",
                  "fields": [
                    {
                      "name": "factor",
                      "typeId": 96,
                      "typeName": "Percent",
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": ["See [`Pallet::scale_validator_count`]."]
                },
                {
                  "name": "force_no_eras",
                  "fields": [],
                  "index": 12,
                  "docs": ["See [`Pallet::force_no_eras`]."]
                },
                {
                  "name": "force_new_era",
                  "fields": [],
                  "index": 13,
                  "docs": ["See [`Pallet::force_new_era`]."]
                },
                {
                  "name": "set_invulnerables",
                  "fields": [
                    {
                      "name": "invulnerables",
                      "typeId": 92,
                      "typeName": "Vec<T::AccountId>",
                      "docs": []
                    }
                  ],
                  "index": 14,
                  "docs": ["See [`Pallet::set_invulnerables`]."]
                },
                {
                  "name": "force_unstake",
                  "fields": [
                    {
                      "name": "stash",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "num_slashing_spans",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 15,
                  "docs": ["See [`Pallet::force_unstake`]."]
                },
                {
                  "name": "force_new_era_always",
                  "fields": [],
                  "index": 16,
                  "docs": ["See [`Pallet::force_new_era_always`]."]
                },
                {
                  "name": "cancel_deferred_slash",
                  "fields": [
                    {
                      "name": "era",
                      "typeId": 4,
                      "typeName": "EraIndex",
                      "docs": []
                    },
                    {
                      "name": "slash_indices",
                      "typeId": 97,
                      "typeName": "Vec<u32>",
                      "docs": []
                    }
                  ],
                  "index": 17,
                  "docs": ["See [`Pallet::cancel_deferred_slash`]."]
                },
                {
                  "name": "payout_stakers",
                  "fields": [
                    {
                      "name": "validator_stash",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "era",
                      "typeId": 4,
                      "typeName": "EraIndex",
                      "docs": []
                    }
                  ],
                  "index": 18,
                  "docs": ["See [`Pallet::payout_stakers`]."]
                },
                {
                  "name": "rebond",
                  "fields": [
                    {
                      "name": "value",
                      "typeId": 60,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 19,
                  "docs": ["See [`Pallet::rebond`]."]
                },
                {
                  "name": "reap_stash",
                  "fields": [
                    {
                      "name": "stash",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "num_slashing_spans",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 20,
                  "docs": ["See [`Pallet::reap_stash`]."]
                },
                {
                  "name": "kick",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 95,
                      "typeName": "Vec<AccountIdLookupOf<T>>",
                      "docs": []
                    }
                  ],
                  "index": 21,
                  "docs": ["See [`Pallet::kick`]."]
                },
                {
                  "name": "set_staking_configs",
                  "fields": [
                    {
                      "name": "min_nominator_bond",
                      "typeId": 98,
                      "typeName": "ConfigOp<BalanceOf<T>>",
                      "docs": []
                    },
                    {
                      "name": "min_validator_bond",
                      "typeId": 98,
                      "typeName": "ConfigOp<BalanceOf<T>>",
                      "docs": []
                    },
                    {
                      "name": "max_nominator_count",
                      "typeId": 99,
                      "typeName": "ConfigOp<u32>",
                      "docs": []
                    },
                    {
                      "name": "max_validator_count",
                      "typeId": 99,
                      "typeName": "ConfigOp<u32>",
                      "docs": []
                    },
                    {
                      "name": "chill_threshold",
                      "typeId": 100,
                      "typeName": "ConfigOp<Percent>",
                      "docs": []
                    },
                    {
                      "name": "min_commission",
                      "typeId": 101,
                      "typeName": "ConfigOp<Perbill>",
                      "docs": []
                    }
                  ],
                  "index": 22,
                  "docs": ["See [`Pallet::set_staking_configs`]."]
                },
                {
                  "name": "chill_other",
                  "fields": [
                    {
                      "name": "controller",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 23,
                  "docs": ["See [`Pallet::chill_other`]."]
                },
                {
                  "name": "force_apply_min_commission",
                  "fields": [
                    {
                      "name": "validator_stash",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 24,
                  "docs": ["See [`Pallet::force_apply_min_commission`]."]
                },
                {
                  "name": "set_min_commission",
                  "fields": [
                    {
                      "name": "new",
                      "typeId": 41,
                      "typeName": "Perbill",
                      "docs": []
                    }
                  ],
                  "index": 25,
                  "docs": ["See [`Pallet::set_min_commission`]."]
                }
              ]
            }
          },
          "docs": ["Contains a variant per dispatchable extrinsic that this pallet has."]
        },
        {
          "id": 94,
          "path": ["pallet_staking", "RewardDestination"],
          "params": [
            {
              "name": "AccountId",
              "typeId": 0
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Staked",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Stash",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Controller",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Account",
                  "fields": [
                    {
                      "typeId": 0,
                      "typeName": "AccountId",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "None",
                  "fields": [],
                  "index": 4,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 95,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 88
            }
          },
          "docs": []
        },
        {
          "id": 96,
          "path": ["sp_arithmetic", "per_things", "Percent"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 2,
                  "typeName": "u8",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 97,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 4
            }
          },
          "docs": []
        },
        {
          "id": 98,
          "path": ["pallet_staking", "pallet", "pallet", "ConfigOp"],
          "params": [
            {
              "name": "T",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Noop",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Set",
                  "fields": [
                    {
                      "typeId": 6,
                      "typeName": "T",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Remove",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 99,
          "path": ["pallet_staking", "pallet", "pallet", "ConfigOp"],
          "params": [
            {
              "name": "T",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Noop",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Set",
                  "fields": [
                    {
                      "typeId": 4,
                      "typeName": "T",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Remove",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 100,
          "path": ["pallet_staking", "pallet", "pallet", "ConfigOp"],
          "params": [
            {
              "name": "T",
              "typeId": 96
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Noop",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Set",
                  "fields": [
                    {
                      "typeId": 96,
                      "typeName": "T",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Remove",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 101,
          "path": ["pallet_staking", "pallet", "pallet", "ConfigOp"],
          "params": [
            {
              "name": "T",
              "typeId": 41
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Noop",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Set",
                  "fields": [
                    {
                      "typeId": 41,
                      "typeName": "T",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Remove",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 102,
          "path": ["pallet_session", "pallet", "Call"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "set_keys",
                  "fields": [
                    {
                      "name": "keys",
                      "typeId": 103,
                      "typeName": "T::Keys",
                      "docs": []
                    },
                    {
                      "name": "proof",
                      "typeId": 13,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["See [`Pallet::set_keys`]."]
                },
                {
                  "name": "purge_keys",
                  "fields": [],
                  "index": 1,
                  "docs": ["See [`Pallet::purge_keys`]."]
                }
              ]
            }
          },
          "docs": ["Contains a variant per dispatchable extrinsic that this pallet has."]
        },
        {
          "id": 103,
          "path": ["polkadot_runtime", "SessionKeys"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "grandpa",
                  "typeId": 52,
                  "typeName": "<Grandpa as $crate::BoundToRuntimeAppPublic>::Public",
                  "docs": []
                },
                {
                  "name": "babe",
                  "typeId": 80,
                  "typeName": "<Babe as $crate::BoundToRuntimeAppPublic>::Public",
                  "docs": []
                },
                {
                  "name": "im_online",
                  "typeId": 55,
                  "typeName": "<ImOnline as $crate::BoundToRuntimeAppPublic>::Public",
                  "docs": []
                },
                {
                  "name": "para_validator",
                  "typeId": 104,
                  "typeName": "<Initializer as $crate::BoundToRuntimeAppPublic>::Public",
                  "docs": []
                },
                {
                  "name": "para_assignment",
                  "typeId": 105,
                  "typeName": "<ParaSessionInfo as $crate::BoundToRuntimeAppPublic>::Public",
                  "docs": []
                },
                {
                  "name": "authority_discovery",
                  "typeId": 106,
                  "typeName": "<AuthorityDiscovery as $crate::BoundToRuntimeAppPublic>::Public",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 104,
          "path": ["polkadot_primitives", "v5", "validator_app", "Public"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 56,
                  "typeName": "sr25519::Public",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 105,
          "path": ["polkadot_primitives", "v5", "assignment_app", "Public"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 56,
                  "typeName": "sr25519::Public",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 106,
          "path": ["sp_authority_discovery", "app", "Public"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 56,
                  "typeName": "sr25519::Public",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 107,
          "path": ["pallet_grandpa", "pallet", "Call"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "report_equivocation",
                  "fields": [
                    {
                      "name": "equivocation_proof",
                      "typeId": 108,
                      "typeName": "Box<EquivocationProof<T::Hash, BlockNumberFor<T>>>",
                      "docs": []
                    },
                    {
                      "name": "key_owner_proof",
                      "typeId": 82,
                      "typeName": "T::KeyOwnerProof",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["See [`Pallet::report_equivocation`]."]
                },
                {
                  "name": "report_equivocation_unsigned",
                  "fields": [
                    {
                      "name": "equivocation_proof",
                      "typeId": 108,
                      "typeName": "Box<EquivocationProof<T::Hash, BlockNumberFor<T>>>",
                      "docs": []
                    },
                    {
                      "name": "key_owner_proof",
                      "typeId": 82,
                      "typeName": "T::KeyOwnerProof",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": ["See [`Pallet::report_equivocation_unsigned`]."]
                },
                {
                  "name": "note_stalled",
                  "fields": [
                    {
                      "name": "delay",
                      "typeId": 4,
                      "typeName": "BlockNumberFor<T>",
                      "docs": []
                    },
                    {
                      "name": "best_finalized_block_number",
                      "typeId": 4,
                      "typeName": "BlockNumberFor<T>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": ["See [`Pallet::note_stalled`]."]
                }
              ]
            }
          },
          "docs": ["Contains a variant per dispatchable extrinsic that this pallet has."]
        },
        {
          "id": 108,
          "path": ["sp_consensus_grandpa", "EquivocationProof"],
          "params": [
            {
              "name": "H",
              "typeId": 12
            },
            {
              "name": "N",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "set_id",
                  "typeId": 11,
                  "typeName": "SetId",
                  "docs": []
                },
                {
                  "name": "equivocation",
                  "typeId": 109,
                  "typeName": "Equivocation<H, N>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 109,
          "path": ["sp_consensus_grandpa", "Equivocation"],
          "params": [
            {
              "name": "H",
              "typeId": 12
            },
            {
              "name": "N",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Prevote",
                  "fields": [
                    {
                      "typeId": 110,
                      "typeName": "grandpa::Equivocation<AuthorityId, grandpa::Prevote<H, N>,\nAuthoritySignature>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Precommit",
                  "fields": [
                    {
                      "typeId": 116,
                      "typeName": "grandpa::Equivocation<AuthorityId, grandpa::Precommit<H, N>,\nAuthoritySignature>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 110,
          "path": ["finality_grandpa", "Equivocation"],
          "params": [
            {
              "name": "Id",
              "typeId": 52
            },
            {
              "name": "V",
              "typeId": 111
            },
            {
              "name": "S",
              "typeId": 112
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "round_number",
                  "typeId": 11,
                  "typeName": "u64",
                  "docs": []
                },
                {
                  "name": "identity",
                  "typeId": 52,
                  "typeName": "Id",
                  "docs": []
                },
                {
                  "name": "first",
                  "typeId": 115,
                  "typeName": "(V, S)",
                  "docs": []
                },
                {
                  "name": "second",
                  "typeId": 115,
                  "typeName": "(V, S)",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 111,
          "path": ["finality_grandpa", "Prevote"],
          "params": [
            {
              "name": "H",
              "typeId": 12
            },
            {
              "name": "N",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "target_hash",
                  "typeId": 12,
                  "typeName": "H",
                  "docs": []
                },
                {
                  "name": "target_number",
                  "typeId": 4,
                  "typeName": "N",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 112,
          "path": ["sp_consensus_grandpa", "app", "Signature"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 113,
                  "typeName": "ed25519::Signature",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 113,
          "path": ["sp_core", "ed25519", "Signature"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 114,
                  "typeName": "[u8; 64]",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 114,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 64,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 115,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [111, 112]
            }
          },
          "docs": []
        },
        {
          "id": 116,
          "path": ["finality_grandpa", "Equivocation"],
          "params": [
            {
              "name": "Id",
              "typeId": 52
            },
            {
              "name": "V",
              "typeId": 117
            },
            {
              "name": "S",
              "typeId": 112
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "round_number",
                  "typeId": 11,
                  "typeName": "u64",
                  "docs": []
                },
                {
                  "name": "identity",
                  "typeId": 52,
                  "typeName": "Id",
                  "docs": []
                },
                {
                  "name": "first",
                  "typeId": 118,
                  "typeName": "(V, S)",
                  "docs": []
                },
                {
                  "name": "second",
                  "typeId": 118,
                  "typeName": "(V, S)",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 117,
          "path": ["finality_grandpa", "Precommit"],
          "params": [
            {
              "name": "H",
              "typeId": 12
            },
            {
              "name": "N",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "target_hash",
                  "typeId": 12,
                  "typeName": "H",
                  "docs": []
                },
                {
                  "name": "target_number",
                  "typeId": 4,
                  "typeName": "N",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 118,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [117, 112]
            }
          },
          "docs": []
        },
        {
          "id": 119,
          "path": ["pallet_im_online", "pallet", "Call"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "heartbeat",
                  "fields": [
                    {
                      "name": "heartbeat",
                      "typeId": 120,
                      "typeName": "Heartbeat<BlockNumberFor<T>>",
                      "docs": []
                    },
                    {
                      "name": "signature",
                      "typeId": 121,
                      "typeName": "<T::AuthorityId as RuntimeAppPublic>::Signature",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["See [`Pallet::heartbeat`]."]
                }
              ]
            }
          },
          "docs": ["Contains a variant per dispatchable extrinsic that this pallet has."]
        },
        {
          "id": 120,
          "path": ["pallet_im_online", "Heartbeat"],
          "params": [
            {
              "name": "BlockNumber",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "block_number",
                  "typeId": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                },
                {
                  "name": "session_index",
                  "typeId": 4,
                  "typeName": "SessionIndex",
                  "docs": []
                },
                {
                  "name": "authority_index",
                  "typeId": 4,
                  "typeName": "AuthIndex",
                  "docs": []
                },
                {
                  "name": "validators_len",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 121,
          "path": ["pallet_im_online", "sr25519", "app_sr25519", "Signature"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 122,
                  "typeName": "sr25519::Signature",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 122,
          "path": ["sp_core", "sr25519", "Signature"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 114,
                  "typeName": "[u8; 64]",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 123,
          "path": ["pallet_treasury", "pallet", "Call"],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "propose_spend",
                  "fields": [
                    {
                      "name": "value",
                      "typeId": 60,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "typeId": 88,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["See [`Pallet::propose_spend`]."]
                },
                {
                  "name": "reject_proposal",
                  "fields": [
                    {
                      "name": "proposal_id",
                      "typeId": 79,
                      "typeName": "ProposalIndex",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": ["See [`Pallet::reject_proposal`]."]
                },
                {
                  "name": "approve_proposal",
                  "fields": [
                    {
                      "name": "proposal_id",
                      "typeId": 79,
                      "typeName": "ProposalIndex",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": ["See [`Pallet::approve_proposal`]."]
                },
                {
                  "name": "spend",
                  "fields": [
                    {
                      "name": "amount",
                      "typeId": 60,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "typeId": 88,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": ["See [`Pallet::spend`]."]
                },
                {
                  "name": "remove_approval",
                  "fields": [
                    {
                      "name": "proposal_id",
                      "typeId": 79,
                      "typeName": "ProposalIndex",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": ["See [`Pallet::remove_approval`]."]
                }
              ]
            }
          },
          "docs": ["Contains a variant per dispatchable extrinsic that this pallet has."]
        },
        {
          "id": 124,
          "path": ["pallet_conviction_voting", "pallet", "Call"],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "vote",
                  "fields": [
                    {
                      "name": "poll_index",
                      "typeId": 79,
                      "typeName": "PollIndexOf<T, I>",
                      "docs": []
                    },
                    {
                      "name": "vote",
                      "typeId": 125,
                      "typeName": "AccountVote<BalanceOf<T, I>>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["See [`Pallet::vote`]."]
                },
                {
                  "name": "delegate",
                  "fields": [
                    {
                      "name": "class",
                      "typeId": 66,
                      "typeName": "ClassOf<T, I>",
                      "docs": []
                    },
                    {
                      "name": "to",
                      "typeId": 88,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "conviction",
                      "typeId": 127,
                      "typeName": "Conviction",
                      "docs": []
                    },
                    {
                      "name": "balance",
                      "typeId": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": ["See [`Pallet::delegate`]."]
                },
                {
                  "name": "undelegate",
                  "fields": [
                    {
                      "name": "class",
                      "typeId": 66,
                      "typeName": "ClassOf<T, I>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": ["See [`Pallet::undelegate`]."]
                },
                {
                  "name": "unlock",
                  "fields": [
                    {
                      "name": "class",
                      "typeId": 66,
                      "typeName": "ClassOf<T, I>",
                      "docs": []
                    },
                    {
                      "name": "target",
                      "typeId": 88,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": ["See [`Pallet::unlock`]."]
                },
                {
                  "name": "remove_vote",
                  "fields": [
                    {
                      "name": "class",
                      "typeId": 128,
                      "typeName": "Option<ClassOf<T, I>>",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "PollIndexOf<T, I>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": ["See [`Pallet::remove_vote`]."]
                },
                {
                  "name": "remove_other_vote",
                  "fields": [
                    {
                      "name": "target",
                      "typeId": 88,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "class",
                      "typeId": 66,
                      "typeName": "ClassOf<T, I>",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "PollIndexOf<T, I>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": ["See [`Pallet::remove_other_vote`]."]
                }
              ]
            }
          },
          "docs": ["Contains a variant per dispatchable extrinsic that this pallet has."]
        },
        {
          "id": 125,
          "path": ["pallet_conviction_voting", "vote", "AccountVote"],
          "params": [
            {
              "name": "Balance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Standard",
                  "fields": [
                    {
                      "name": "vote",
                      "typeId": 126,
                      "typeName": "Vote",
                      "docs": []
                    },
                    {
                      "name": "balance",
                      "typeId": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Split",
                  "fields": [
                    {
                      "name": "aye",
                      "typeId": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "nay",
                      "typeId": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "SplitAbstain",
                  "fields": [
                    {
                      "name": "aye",
                      "typeId": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "nay",
                      "typeId": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "abstain",
                      "typeId": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 126,
          "path": ["pallet_conviction_voting", "vote", "Vote"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 127,
          "path": ["pallet_conviction_voting", "conviction", "Conviction"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Locked1x",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Locked2x",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Locked3x",
                  "fields": [],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "Locked4x",
                  "fields": [],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "Locked5x",
                  "fields": [],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "Locked6x",
                  "fields": [],
                  "index": 6,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 128,
          "path": ["Option"],
          "params": [
            {
              "name": "T",
              "typeId": 66
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 66,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 129,
          "path": ["pallet_referenda", "pallet", "Call"],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "submit",
                  "fields": [
                    {
                      "name": "proposal_origin",
                      "typeId": 130,
                      "typeName": "Box<PalletsOriginOf<T>>",
                      "docs": []
                    },
                    {
                      "name": "proposal",
                      "typeId": 67,
                      "typeName": "BoundedCallOf<T, I>",
                      "docs": []
                    },
                    {
                      "name": "enactment_moment",
                      "typeId": 144,
                      "typeName": "DispatchTime<BlockNumberFor<T>>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["See [`Pallet::submit`]."]
                },
                {
                  "name": "place_decision_deposit",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": ["See [`Pallet::place_decision_deposit`]."]
                },
                {
                  "name": "refund_decision_deposit",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": ["See [`Pallet::refund_decision_deposit`]."]
                },
                {
                  "name": "cancel",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": ["See [`Pallet::cancel`]."]
                },
                {
                  "name": "kill",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": ["See [`Pallet::kill`]."]
                },
                {
                  "name": "nudge_referendum",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": ["See [`Pallet::nudge_referendum`]."]
                },
                {
                  "name": "one_fewer_deciding",
                  "fields": [
                    {
                      "name": "track",
                      "typeId": 66,
                      "typeName": "TrackIdOf<T, I>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": ["See [`Pallet::one_fewer_deciding`]."]
                },
                {
                  "name": "refund_submission_deposit",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": ["See [`Pallet::refund_submission_deposit`]."]
                },
                {
                  "name": "set_metadata",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    },
                    {
                      "name": "maybe_hash",
                      "typeId": 145,
                      "typeName": "Option<PreimageHash>",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": ["See [`Pallet::set_metadata`]."]
                }
              ]
            }
          },
          "docs": ["Contains a variant per dispatchable extrinsic that this pallet has."]
        },
        {
          "id": 130,
          "path": ["polkadot_runtime", "OriginCaller"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "system",
                  "fields": [
                    {
                      "typeId": 131,
                      "typeName": "frame_system::Origin<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Origins",
                  "fields": [
                    {
                      "typeId": 132,
                      "typeName": "pallet_custom_origins::Origin",
                      "docs": []
                    }
                  ],
                  "index": 22,
                  "docs": []
                },
                {
                  "name": "ParachainsOrigin",
                  "fields": [
                    {
                      "typeId": 133,
                      "typeName": "parachains_origin::Origin",
                      "docs": []
                    }
                  ],
                  "index": 50,
                  "docs": []
                },
                {
                  "name": "XcmPallet",
                  "fields": [
                    {
                      "typeId": 135,
                      "typeName": "pallet_xcm::Origin",
                      "docs": []
                    }
                  ],
                  "index": 99,
                  "docs": []
                },
                {
                  "name": "Void",
                  "fields": [
                    {
                      "typeId": 143,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::\n__private::Void",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 131,
          "path": ["frame_support", "dispatch", "RawOrigin"],
          "params": [
            {
              "name": "AccountId",
              "typeId": 0
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Root",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Signed",
                  "fields": [
                    {
                      "typeId": 0,
                      "typeName": "AccountId",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "None",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 132,
          "path": ["polkadot_runtime", "governance", "origins", "pallet_custom_origins", "Origin"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "StakingAdmin",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Treasurer",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "FellowshipAdmin",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "GeneralAdmin",
                  "fields": [],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "AuctionAdmin",
                  "fields": [],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "LeaseAdmin",
                  "fields": [],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "ReferendumCanceller",
                  "fields": [],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "ReferendumKiller",
                  "fields": [],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "SmallTipper",
                  "fields": [],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "BigTipper",
                  "fields": [],
                  "index": 9,
                  "docs": []
                },
                {
                  "name": "SmallSpender",
                  "fields": [],
                  "index": 10,
                  "docs": []
                },
                {
                  "name": "MediumSpender",
                  "fields": [],
                  "index": 11,
                  "docs": []
                },
                {
                  "name": "BigSpender",
                  "fields": [],
                  "index": 12,
                  "docs": []
                },
                {
                  "name": "WhitelistedCaller",
                  "fields": [],
                  "index": 13,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 133,
          "path": ["polkadot_runtime_parachains", "origin", "pallet", "Origin"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Parachain",
                  "fields": [
                    {
                      "typeId": 134,
                      "typeName": "ParaId",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 134,
          "path": ["polkadot_parachain_primitives", "primitives", "Id"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 135,
          "path": ["pallet_xcm", "pallet", "Origin"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Xcm",
                  "fields": [
                    {
                      "typeId": 136,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Response",
                  "fields": [
                    {
                      "typeId": 136,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 136,
          "path": ["staging_xcm", "v3", "multilocation", "MultiLocation"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "parents",
                  "typeId": 2,
                  "typeName": "u8",
                  "docs": []
                },
                {
                  "name": "interior",
                  "typeId": 137,
                  "typeName": "Junctions",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 137,
          "path": ["xcm", "v3", "junctions", "Junctions"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Here",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "X1",
                  "fields": [
                    {
                      "typeId": 138,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "X2",
                  "fields": [
                    {
                      "typeId": 138,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 138,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "X3",
                  "fields": [
                    {
                      "typeId": 138,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 138,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 138,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "X4",
                  "fields": [
                    {
                      "typeId": 138,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 138,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 138,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 138,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "X5",
                  "fields": [
                    {
                      "typeId": 138,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 138,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 138,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 138,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 138,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "X6",
                  "fields": [
                    {
                      "typeId": 138,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 138,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 138,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 138,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 138,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 138,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "X7",
                  "fields": [
                    {
                      "typeId": 138,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 138,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 138,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 138,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 138,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 138,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 138,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "X8",
                  "fields": [
                    {
                      "typeId": 138,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 138,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 138,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 138,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 138,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 138,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 138,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 138,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 138,
          "path": ["xcm", "v3", "junction", "Junction"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Parachain",
                  "fields": [
                    {
                      "typeId": 79,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "AccountId32",
                  "fields": [
                    {
                      "name": "network",
                      "typeId": 139,
                      "typeName": "Option<NetworkId>",
                      "docs": []
                    },
                    {
                      "name": "id",
                      "typeId": 1,
                      "typeName": "[u8; 32]",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "AccountIndex64",
                  "fields": [
                    {
                      "name": "network",
                      "typeId": 139,
                      "typeName": "Option<NetworkId>",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "typeId": 10,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "AccountKey20",
                  "fields": [
                    {
                      "name": "network",
                      "typeId": 139,
                      "typeName": "Option<NetworkId>",
                      "docs": []
                    },
                    {
                      "name": "key",
                      "typeId": 90,
                      "typeName": "[u8; 20]",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "PalletInstance",
                  "fields": [
                    {
                      "typeId": 2,
                      "typeName": "u8",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "GeneralIndex",
                  "fields": [
                    {
                      "typeId": 60,
                      "typeName": "u128",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "GeneralKey",
                  "fields": [
                    {
                      "name": "length",
                      "typeId": 2,
                      "typeName": "u8",
                      "docs": []
                    },
                    {
                      "name": "data",
                      "typeId": 1,
                      "typeName": "[u8; 32]",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "OnlyChild",
                  "fields": [],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "Plurality",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 141,
                      "typeName": "BodyId",
                      "docs": []
                    },
                    {
                      "name": "part",
                      "typeId": 142,
                      "typeName": "BodyPart",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "GlobalConsensus",
                  "fields": [
                    {
                      "typeId": 140,
                      "typeName": "NetworkId",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 139,
          "path": ["Option"],
          "params": [
            {
              "name": "T",
              "typeId": 140
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 140,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 140,
          "path": ["xcm", "v3", "junction", "NetworkId"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "ByGenesis",
                  "fields": [
                    {
                      "typeId": 1,
                      "typeName": "[u8; 32]",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "ByFork",
                  "fields": [
                    {
                      "name": "block_number",
                      "typeId": 11,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "block_hash",
                      "typeId": 1,
                      "typeName": "[u8; 32]",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Polkadot",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Kusama",
                  "fields": [],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "Westend",
                  "fields": [],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "Rococo",
                  "fields": [],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "Wococo",
                  "fields": [],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "Ethereum",
                  "fields": [
                    {
                      "name": "chain_id",
                      "typeId": 10,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "BitcoinCore",
                  "fields": [],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "BitcoinCash",
                  "fields": [],
                  "index": 9,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 141,
          "path": ["xcm", "v3", "junction", "BodyId"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Unit",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Moniker",
                  "fields": [
                    {
                      "typeId": 17,
                      "typeName": "[u8; 4]",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Index",
                  "fields": [
                    {
                      "typeId": 79,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Executive",
                  "fields": [],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "Technical",
                  "fields": [],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "Legislative",
                  "fields": [],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "Judicial",
                  "fields": [],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "Defense",
                  "fields": [],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "Administration",
                  "fields": [],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "Treasury",
                  "fields": [],
                  "index": 9,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 142,
          "path": ["xcm", "v3", "junction", "BodyPart"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Voice",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Members",
                  "fields": [
                    {
                      "name": "count",
                      "typeId": 79,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Fraction",
                  "fields": [
                    {
                      "name": "nom",
                      "typeId": 79,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "denom",
                      "typeId": 79,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "AtLeastProportion",
                  "fields": [
                    {
                      "name": "nom",
                      "typeId": 79,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "denom",
                      "typeId": 79,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "MoreThanProportion",
                  "fields": [
                    {
                      "name": "nom",
                      "typeId": 79,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "denom",
                      "typeId": 79,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 143,
          "path": ["sp_core", "Void"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": []
            }
          },
          "docs": []
        },
        {
          "id": 144,
          "path": ["frame_support", "traits", "schedule", "DispatchTime"],
          "params": [
            {
              "name": "BlockNumber",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "At",
                  "fields": [
                    {
                      "typeId": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "After",
                  "fields": [
                    {
                      "typeId": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 145,
          "path": ["Option"],
          "params": [
            {
              "name": "T",
              "typeId": 12
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 12,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 146,
          "path": ["pallet_whitelist", "pallet", "Call"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "whitelist_call",
                  "fields": [
                    {
                      "name": "call_hash",
                      "typeId": 12,
                      "typeName": "PreimageHash",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["See [`Pallet::whitelist_call`]."]
                },
                {
                  "name": "remove_whitelisted_call",
                  "fields": [
                    {
                      "name": "call_hash",
                      "typeId": 12,
                      "typeName": "PreimageHash",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": ["See [`Pallet::remove_whitelisted_call`]."]
                },
                {
                  "name": "dispatch_whitelisted_call",
                  "fields": [
                    {
                      "name": "call_hash",
                      "typeId": 12,
                      "typeName": "PreimageHash",
                      "docs": []
                    },
                    {
                      "name": "call_encoded_len",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "call_weight_witness",
                      "typeId": 9,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": ["See [`Pallet::dispatch_whitelisted_call`]."]
                },
                {
                  "name": "dispatch_whitelisted_call_with_preimage",
                  "fields": [
                    {
                      "name": "call",
                      "typeId": 68,
                      "typeName": "Box<<T as Config>::RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": ["See [`Pallet::dispatch_whitelisted_call_with_preimage`]."]
                }
              ]
            }
          },
          "docs": ["Contains a variant per dispatchable extrinsic that this pallet has."]
        },
        {
          "id": 147,
          "path": ["polkadot_runtime_common", "claims", "pallet", "Call"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "claim",
                  "fields": [
                    {
                      "name": "dest",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "ethereum_signature",
                      "typeId": 148,
                      "typeName": "EcdsaSignature",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["See [`Pallet::claim`]."]
                },
                {
                  "name": "mint_claim",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 150,
                      "typeName": "EthereumAddress",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "vesting_schedule",
                      "typeId": 151,
                      "typeName": "Option<(BalanceOf<T>, BalanceOf<T>, BlockNumberFor<T>)>",
                      "docs": []
                    },
                    {
                      "name": "statement",
                      "typeId": 153,
                      "typeName": "Option<StatementKind>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": ["See [`Pallet::mint_claim`]."]
                },
                {
                  "name": "claim_attest",
                  "fields": [
                    {
                      "name": "dest",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "ethereum_signature",
                      "typeId": 148,
                      "typeName": "EcdsaSignature",
                      "docs": []
                    },
                    {
                      "name": "statement",
                      "typeId": 13,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": ["See [`Pallet::claim_attest`]."]
                },
                {
                  "name": "attest",
                  "fields": [
                    {
                      "name": "statement",
                      "typeId": 13,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": ["See [`Pallet::attest`]."]
                },
                {
                  "name": "move_claim",
                  "fields": [
                    {
                      "name": "old",
                      "typeId": 150,
                      "typeName": "EthereumAddress",
                      "docs": []
                    },
                    {
                      "name": "new",
                      "typeId": 150,
                      "typeName": "EthereumAddress",
                      "docs": []
                    },
                    {
                      "name": "maybe_preclaim",
                      "typeId": 155,
                      "typeName": "Option<T::AccountId>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": ["See [`Pallet::move_claim`]."]
                }
              ]
            }
          },
          "docs": ["Contains a variant per dispatchable extrinsic that this pallet has."]
        },
        {
          "id": 148,
          "path": ["polkadot_runtime_common", "claims", "EcdsaSignature"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 149,
                  "typeName": "[u8; 65]",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 149,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 65,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 150,
          "path": ["polkadot_runtime_common", "claims", "EthereumAddress"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 90,
                  "typeName": "[u8; 20]",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 151,
          "path": ["Option"],
          "params": [
            {
              "name": "T",
              "typeId": 152
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 152,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 152,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [6, 6, 4]
            }
          },
          "docs": []
        },
        {
          "id": 153,
          "path": ["Option"],
          "params": [
            {
              "name": "T",
              "typeId": 154
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 154,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 154,
          "path": ["polkadot_runtime_common", "claims", "StatementKind"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Regular",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Saft",
                  "fields": [],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 155,
          "path": ["Option"],
          "params": [
            {
              "name": "T",
              "typeId": 0
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 0,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 156,
          "path": ["pallet_vesting", "pallet", "Call"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "vest",
                  "fields": [],
                  "index": 0,
                  "docs": ["See [`Pallet::vest`]."]
                },
                {
                  "name": "vest_other",
                  "fields": [
                    {
                      "name": "target",
                      "typeId": 88,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": ["See [`Pallet::vest_other`]."]
                },
                {
                  "name": "vested_transfer",
                  "fields": [
                    {
                      "name": "target",
                      "typeId": 88,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "schedule",
                      "typeId": 157,
                      "typeName": "VestingInfo<BalanceOf<T>, BlockNumberFor<T>>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": ["See [`Pallet::vested_transfer`]."]
                },
                {
                  "name": "force_vested_transfer",
                  "fields": [
                    {
                      "name": "source",
                      "typeId": 88,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "target",
                      "typeId": 88,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "schedule",
                      "typeId": 157,
                      "typeName": "VestingInfo<BalanceOf<T>, BlockNumberFor<T>>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": ["See [`Pallet::force_vested_transfer`]."]
                },
                {
                  "name": "merge_schedules",
                  "fields": [
                    {
                      "name": "schedule1_index",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "schedule2_index",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": ["See [`Pallet::merge_schedules`]."]
                }
              ]
            }
          },
          "docs": ["Contains a variant per dispatchable extrinsic that this pallet has."]
        },
        {
          "id": 157,
          "path": ["pallet_vesting", "vesting_info", "VestingInfo"],
          "params": [
            {
              "name": "Balance",
              "typeId": 6
            },
            {
              "name": "BlockNumber",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "locked",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "per_block",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "starting_block",
                  "typeId": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 158,
          "path": ["pallet_utility", "pallet", "Call"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "batch",
                  "fields": [
                    {
                      "name": "calls",
                      "typeId": 159,
                      "typeName": "Vec<<T as Config>::RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["See [`Pallet::batch`]."]
                },
                {
                  "name": "as_derivative",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 66,
                      "typeName": "u16",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "typeId": 68,
                      "typeName": "Box<<T as Config>::RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": ["See [`Pallet::as_derivative`]."]
                },
                {
                  "name": "batch_all",
                  "fields": [
                    {
                      "name": "calls",
                      "typeId": 159,
                      "typeName": "Vec<<T as Config>::RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": ["See [`Pallet::batch_all`]."]
                },
                {
                  "name": "dispatch_as",
                  "fields": [
                    {
                      "name": "as_origin",
                      "typeId": 130,
                      "typeName": "Box<T::PalletsOrigin>",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "typeId": 68,
                      "typeName": "Box<<T as Config>::RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": ["See [`Pallet::dispatch_as`]."]
                },
                {
                  "name": "force_batch",
                  "fields": [
                    {
                      "name": "calls",
                      "typeId": 159,
                      "typeName": "Vec<<T as Config>::RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": ["See [`Pallet::force_batch`]."]
                },
                {
                  "name": "with_weight",
                  "fields": [
                    {
                      "name": "call",
                      "typeId": 68,
                      "typeName": "Box<<T as Config>::RuntimeCall>",
                      "docs": []
                    },
                    {
                      "name": "weight",
                      "typeId": 9,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": ["See [`Pallet::with_weight`]."]
                }
              ]
            }
          },
          "docs": ["Contains a variant per dispatchable extrinsic that this pallet has."]
        },
        {
          "id": 159,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 68
            }
          },
          "docs": []
        },
        {
          "id": 160,
          "path": ["pallet_identity", "pallet", "Call"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "add_registrar",
                  "fields": [
                    {
                      "name": "account",
                      "typeId": 88,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["See [`Pallet::add_registrar`]."]
                },
                {
                  "name": "set_identity",
                  "fields": [
                    {
                      "name": "info",
                      "typeId": 161,
                      "typeName": "Box<IdentityInfo<T::MaxAdditionalFields>>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": ["See [`Pallet::set_identity`]."]
                },
                {
                  "name": "set_subs",
                  "fields": [
                    {
                      "name": "subs",
                      "typeId": 196,
                      "typeName": "Vec<(T::AccountId, Data)>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": ["See [`Pallet::set_subs`]."]
                },
                {
                  "name": "clear_identity",
                  "fields": [],
                  "index": 3,
                  "docs": ["See [`Pallet::clear_identity`]."]
                },
                {
                  "name": "request_judgement",
                  "fields": [
                    {
                      "name": "reg_index",
                      "typeId": 79,
                      "typeName": "RegistrarIndex",
                      "docs": []
                    },
                    {
                      "name": "max_fee",
                      "typeId": 60,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": ["See [`Pallet::request_judgement`]."]
                },
                {
                  "name": "cancel_request",
                  "fields": [
                    {
                      "name": "reg_index",
                      "typeId": 4,
                      "typeName": "RegistrarIndex",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": ["See [`Pallet::cancel_request`]."]
                },
                {
                  "name": "set_fee",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 79,
                      "typeName": "RegistrarIndex",
                      "docs": []
                    },
                    {
                      "name": "fee",
                      "typeId": 60,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": ["See [`Pallet::set_fee`]."]
                },
                {
                  "name": "set_account_id",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 79,
                      "typeName": "RegistrarIndex",
                      "docs": []
                    },
                    {
                      "name": "new",
                      "typeId": 88,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": ["See [`Pallet::set_account_id`]."]
                },
                {
                  "name": "set_fields",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 79,
                      "typeName": "RegistrarIndex",
                      "docs": []
                    },
                    {
                      "name": "fields",
                      "typeId": 198,
                      "typeName": "IdentityFields",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": ["See [`Pallet::set_fields`]."]
                },
                {
                  "name": "provide_judgement",
                  "fields": [
                    {
                      "name": "reg_index",
                      "typeId": 79,
                      "typeName": "RegistrarIndex",
                      "docs": []
                    },
                    {
                      "name": "target",
                      "typeId": 88,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "judgement",
                      "typeId": 200,
                      "typeName": "Judgement<BalanceOf<T>>",
                      "docs": []
                    },
                    {
                      "name": "identity",
                      "typeId": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": ["See [`Pallet::provide_judgement`]."]
                },
                {
                  "name": "kill_identity",
                  "fields": [
                    {
                      "name": "target",
                      "typeId": 88,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 10,
                  "docs": ["See [`Pallet::kill_identity`]."]
                },
                {
                  "name": "add_sub",
                  "fields": [
                    {
                      "name": "sub",
                      "typeId": 88,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "data",
                      "typeId": 164,
                      "typeName": "Data",
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": ["See [`Pallet::add_sub`]."]
                },
                {
                  "name": "rename_sub",
                  "fields": [
                    {
                      "name": "sub",
                      "typeId": 88,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "data",
                      "typeId": 164,
                      "typeName": "Data",
                      "docs": []
                    }
                  ],
                  "index": 12,
                  "docs": ["See [`Pallet::rename_sub`]."]
                },
                {
                  "name": "remove_sub",
                  "fields": [
                    {
                      "name": "sub",
                      "typeId": 88,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 13,
                  "docs": ["See [`Pallet::remove_sub`]."]
                },
                {
                  "name": "quit_sub",
                  "fields": [],
                  "index": 14,
                  "docs": ["See [`Pallet::quit_sub`]."]
                }
              ]
            }
          },
          "docs": ["Identity pallet declaration."]
        },
        {
          "id": 161,
          "path": ["pallet_identity", "types", "IdentityInfo"],
          "params": [
            {
              "name": "FieldLimit"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "additional",
                  "typeId": 162,
                  "typeName": "BoundedVec<(Data, Data), FieldLimit>",
                  "docs": []
                },
                {
                  "name": "display",
                  "typeId": 164,
                  "typeName": "Data",
                  "docs": []
                },
                {
                  "name": "legal",
                  "typeId": 164,
                  "typeName": "Data",
                  "docs": []
                },
                {
                  "name": "web",
                  "typeId": 164,
                  "typeName": "Data",
                  "docs": []
                },
                {
                  "name": "riot",
                  "typeId": 164,
                  "typeName": "Data",
                  "docs": []
                },
                {
                  "name": "email",
                  "typeId": 164,
                  "typeName": "Data",
                  "docs": []
                },
                {
                  "name": "pgp_fingerprint",
                  "typeId": 195,
                  "typeName": "Option<[u8; 20]>",
                  "docs": []
                },
                {
                  "name": "image",
                  "typeId": 164,
                  "typeName": "Data",
                  "docs": []
                },
                {
                  "name": "twitter",
                  "typeId": 164,
                  "typeName": "Data",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 162,
          "path": ["bounded_collections", "bounded_vec", "BoundedVec"],
          "params": [
            {
              "name": "T",
              "typeId": 163
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 194,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 163,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [164, 164]
            }
          },
          "docs": []
        },
        {
          "id": 164,
          "path": ["pallet_identity", "types", "Data"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Raw0",
                  "fields": [
                    {
                      "typeId": 165,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Raw1",
                  "fields": [
                    {
                      "typeId": 166,
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Raw2",
                  "fields": [
                    {
                      "typeId": 167,
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "Raw3",
                  "fields": [
                    {
                      "typeId": 168,
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "Raw4",
                  "fields": [
                    {
                      "typeId": 17,
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "Raw5",
                  "fields": [
                    {
                      "typeId": 169,
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "Raw6",
                  "fields": [
                    {
                      "typeId": 170,
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "Raw7",
                  "fields": [
                    {
                      "typeId": 171,
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "Raw8",
                  "fields": [
                    {
                      "typeId": 172,
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": []
                },
                {
                  "name": "Raw9",
                  "fields": [
                    {
                      "typeId": 173,
                      "docs": []
                    }
                  ],
                  "index": 10,
                  "docs": []
                },
                {
                  "name": "Raw10",
                  "fields": [
                    {
                      "typeId": 174,
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": []
                },
                {
                  "name": "Raw11",
                  "fields": [
                    {
                      "typeId": 175,
                      "docs": []
                    }
                  ],
                  "index": 12,
                  "docs": []
                },
                {
                  "name": "Raw12",
                  "fields": [
                    {
                      "typeId": 176,
                      "docs": []
                    }
                  ],
                  "index": 13,
                  "docs": []
                },
                {
                  "name": "Raw13",
                  "fields": [
                    {
                      "typeId": 177,
                      "docs": []
                    }
                  ],
                  "index": 14,
                  "docs": []
                },
                {
                  "name": "Raw14",
                  "fields": [
                    {
                      "typeId": 178,
                      "docs": []
                    }
                  ],
                  "index": 15,
                  "docs": []
                },
                {
                  "name": "Raw15",
                  "fields": [
                    {
                      "typeId": 179,
                      "docs": []
                    }
                  ],
                  "index": 16,
                  "docs": []
                },
                {
                  "name": "Raw16",
                  "fields": [
                    {
                      "typeId": 47,
                      "docs": []
                    }
                  ],
                  "index": 17,
                  "docs": []
                },
                {
                  "name": "Raw17",
                  "fields": [
                    {
                      "typeId": 180,
                      "docs": []
                    }
                  ],
                  "index": 18,
                  "docs": []
                },
                {
                  "name": "Raw18",
                  "fields": [
                    {
                      "typeId": 181,
                      "docs": []
                    }
                  ],
                  "index": 19,
                  "docs": []
                },
                {
                  "name": "Raw19",
                  "fields": [
                    {
                      "typeId": 182,
                      "docs": []
                    }
                  ],
                  "index": 20,
                  "docs": []
                },
                {
                  "name": "Raw20",
                  "fields": [
                    {
                      "typeId": 90,
                      "docs": []
                    }
                  ],
                  "index": 21,
                  "docs": []
                },
                {
                  "name": "Raw21",
                  "fields": [
                    {
                      "typeId": 183,
                      "docs": []
                    }
                  ],
                  "index": 22,
                  "docs": []
                },
                {
                  "name": "Raw22",
                  "fields": [
                    {
                      "typeId": 184,
                      "docs": []
                    }
                  ],
                  "index": 23,
                  "docs": []
                },
                {
                  "name": "Raw23",
                  "fields": [
                    {
                      "typeId": 185,
                      "docs": []
                    }
                  ],
                  "index": 24,
                  "docs": []
                },
                {
                  "name": "Raw24",
                  "fields": [
                    {
                      "typeId": 186,
                      "docs": []
                    }
                  ],
                  "index": 25,
                  "docs": []
                },
                {
                  "name": "Raw25",
                  "fields": [
                    {
                      "typeId": 187,
                      "docs": []
                    }
                  ],
                  "index": 26,
                  "docs": []
                },
                {
                  "name": "Raw26",
                  "fields": [
                    {
                      "typeId": 188,
                      "docs": []
                    }
                  ],
                  "index": 27,
                  "docs": []
                },
                {
                  "name": "Raw27",
                  "fields": [
                    {
                      "typeId": 189,
                      "docs": []
                    }
                  ],
                  "index": 28,
                  "docs": []
                },
                {
                  "name": "Raw28",
                  "fields": [
                    {
                      "typeId": 190,
                      "docs": []
                    }
                  ],
                  "index": 29,
                  "docs": []
                },
                {
                  "name": "Raw29",
                  "fields": [
                    {
                      "typeId": 191,
                      "docs": []
                    }
                  ],
                  "index": 30,
                  "docs": []
                },
                {
                  "name": "Raw30",
                  "fields": [
                    {
                      "typeId": 192,
                      "docs": []
                    }
                  ],
                  "index": 31,
                  "docs": []
                },
                {
                  "name": "Raw31",
                  "fields": [
                    {
                      "typeId": 193,
                      "docs": []
                    }
                  ],
                  "index": 32,
                  "docs": []
                },
                {
                  "name": "Raw32",
                  "fields": [
                    {
                      "typeId": 1,
                      "docs": []
                    }
                  ],
                  "index": 33,
                  "docs": []
                },
                {
                  "name": "BlakeTwo256",
                  "fields": [
                    {
                      "typeId": 1,
                      "docs": []
                    }
                  ],
                  "index": 34,
                  "docs": []
                },
                {
                  "name": "Sha256",
                  "fields": [
                    {
                      "typeId": 1,
                      "docs": []
                    }
                  ],
                  "index": 35,
                  "docs": []
                },
                {
                  "name": "Keccak256",
                  "fields": [
                    {
                      "typeId": 1,
                      "docs": []
                    }
                  ],
                  "index": 36,
                  "docs": []
                },
                {
                  "name": "ShaThree256",
                  "fields": [
                    {
                      "typeId": 1,
                      "docs": []
                    }
                  ],
                  "index": 37,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 165,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 0,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 166,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 1,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 167,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 2,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 168,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 3,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 169,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 5,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 170,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 6,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 171,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 7,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 172,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 8,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 173,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 9,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 174,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 10,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 175,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 11,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 176,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 12,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 177,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 13,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 178,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 14,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 179,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 15,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 180,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 17,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 181,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 18,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 182,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 19,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 183,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 21,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 184,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 22,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 185,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 23,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 186,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 24,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 187,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 25,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 188,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 26,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 189,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 27,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 190,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 28,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 191,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 29,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 192,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 30,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 193,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 31,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 194,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 163
            }
          },
          "docs": []
        },
        {
          "id": 195,
          "path": ["Option"],
          "params": [
            {
              "name": "T",
              "typeId": 90
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 90,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 196,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 197
            }
          },
          "docs": []
        },
        {
          "id": 197,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [0, 164]
            }
          },
          "docs": []
        },
        {
          "id": 198,
          "path": ["pallet_identity", "types", "BitFlags"],
          "params": [
            {
              "name": "T",
              "typeId": 199
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 11,
                  "typeName": "IdentityField",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 199,
          "path": ["pallet_identity", "types", "IdentityField"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Display",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Legal",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Web",
                  "fields": [],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "Riot",
                  "fields": [],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "Email",
                  "fields": [],
                  "index": 16,
                  "docs": []
                },
                {
                  "name": "PgpFingerprint",
                  "fields": [],
                  "index": 32,
                  "docs": []
                },
                {
                  "name": "Image",
                  "fields": [],
                  "index": 64,
                  "docs": []
                },
                {
                  "name": "Twitter",
                  "fields": [],
                  "index": 128,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 200,
          "path": ["pallet_identity", "types", "Judgement"],
          "params": [
            {
              "name": "Balance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Unknown",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "FeePaid",
                  "fields": [
                    {
                      "typeId": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Reasonable",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "KnownGood",
                  "fields": [],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "OutOfDate",
                  "fields": [],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "LowQuality",
                  "fields": [],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "Erroneous",
                  "fields": [],
                  "index": 6,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 201,
          "path": ["pallet_proxy", "pallet", "Call"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "proxy",
                  "fields": [
                    {
                      "name": "real",
                      "typeId": 88,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "force_proxy_type",
                      "typeId": 202,
                      "typeName": "Option<T::ProxyType>",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "typeId": 68,
                      "typeName": "Box<<T as Config>::RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["See [`Pallet::proxy`]."]
                },
                {
                  "name": "add_proxy",
                  "fields": [
                    {
                      "name": "delegate",
                      "typeId": 88,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "proxy_type",
                      "typeId": 203,
                      "typeName": "T::ProxyType",
                      "docs": []
                    },
                    {
                      "name": "delay",
                      "typeId": 4,
                      "typeName": "BlockNumberFor<T>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": ["See [`Pallet::add_proxy`]."]
                },
                {
                  "name": "remove_proxy",
                  "fields": [
                    {
                      "name": "delegate",
                      "typeId": 88,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "proxy_type",
                      "typeId": 203,
                      "typeName": "T::ProxyType",
                      "docs": []
                    },
                    {
                      "name": "delay",
                      "typeId": 4,
                      "typeName": "BlockNumberFor<T>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": ["See [`Pallet::remove_proxy`]."]
                },
                {
                  "name": "remove_proxies",
                  "fields": [],
                  "index": 3,
                  "docs": ["See [`Pallet::remove_proxies`]."]
                },
                {
                  "name": "create_pure",
                  "fields": [
                    {
                      "name": "proxy_type",
                      "typeId": 203,
                      "typeName": "T::ProxyType",
                      "docs": []
                    },
                    {
                      "name": "delay",
                      "typeId": 4,
                      "typeName": "BlockNumberFor<T>",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "typeId": 66,
                      "typeName": "u16",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": ["See [`Pallet::create_pure`]."]
                },
                {
                  "name": "kill_pure",
                  "fields": [
                    {
                      "name": "spawner",
                      "typeId": 88,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "proxy_type",
                      "typeId": 203,
                      "typeName": "T::ProxyType",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "typeId": 66,
                      "typeName": "u16",
                      "docs": []
                    },
                    {
                      "name": "height",
                      "typeId": 79,
                      "typeName": "BlockNumberFor<T>",
                      "docs": []
                    },
                    {
                      "name": "ext_index",
                      "typeId": 79,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": ["See [`Pallet::kill_pure`]."]
                },
                {
                  "name": "announce",
                  "fields": [
                    {
                      "name": "real",
                      "typeId": 88,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "call_hash",
                      "typeId": 12,
                      "typeName": "CallHashOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": ["See [`Pallet::announce`]."]
                },
                {
                  "name": "remove_announcement",
                  "fields": [
                    {
                      "name": "real",
                      "typeId": 88,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "call_hash",
                      "typeId": 12,
                      "typeName": "CallHashOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": ["See [`Pallet::remove_announcement`]."]
                },
                {
                  "name": "reject_announcement",
                  "fields": [
                    {
                      "name": "delegate",
                      "typeId": 88,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "call_hash",
                      "typeId": 12,
                      "typeName": "CallHashOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": ["See [`Pallet::reject_announcement`]."]
                },
                {
                  "name": "proxy_announced",
                  "fields": [
                    {
                      "name": "delegate",
                      "typeId": 88,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "real",
                      "typeId": 88,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "force_proxy_type",
                      "typeId": 202,
                      "typeName": "Option<T::ProxyType>",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "typeId": 68,
                      "typeName": "Box<<T as Config>::RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": ["See [`Pallet::proxy_announced`]."]
                }
              ]
            }
          },
          "docs": ["Contains a variant per dispatchable extrinsic that this pallet has."]
        },
        {
          "id": 202,
          "path": ["Option"],
          "params": [
            {
              "name": "T",
              "typeId": 203
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 203,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 203,
          "path": ["polkadot_runtime", "ProxyType"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Any",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "NonTransfer",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Governance",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Staking",
                  "fields": [],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "IdentityJudgement",
                  "fields": [],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "CancelProxy",
                  "fields": [],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "Auction",
                  "fields": [],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "NominationPools",
                  "fields": [],
                  "index": 8,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 204,
          "path": ["pallet_multisig", "pallet", "Call"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "as_multi_threshold_1",
                  "fields": [
                    {
                      "name": "other_signatories",
                      "typeId": 92,
                      "typeName": "Vec<T::AccountId>",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "typeId": 68,
                      "typeName": "Box<<T as Config>::RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["See [`Pallet::as_multi_threshold_1`]."]
                },
                {
                  "name": "as_multi",
                  "fields": [
                    {
                      "name": "threshold",
                      "typeId": 66,
                      "typeName": "u16",
                      "docs": []
                    },
                    {
                      "name": "other_signatories",
                      "typeId": 92,
                      "typeName": "Vec<T::AccountId>",
                      "docs": []
                    },
                    {
                      "name": "maybe_timepoint",
                      "typeId": 205,
                      "typeName": "Option<Timepoint<BlockNumberFor<T>>>",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "typeId": 68,
                      "typeName": "Box<<T as Config>::RuntimeCall>",
                      "docs": []
                    },
                    {
                      "name": "max_weight",
                      "typeId": 9,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": ["See [`Pallet::as_multi`]."]
                },
                {
                  "name": "approve_as_multi",
                  "fields": [
                    {
                      "name": "threshold",
                      "typeId": 66,
                      "typeName": "u16",
                      "docs": []
                    },
                    {
                      "name": "other_signatories",
                      "typeId": 92,
                      "typeName": "Vec<T::AccountId>",
                      "docs": []
                    },
                    {
                      "name": "maybe_timepoint",
                      "typeId": 205,
                      "typeName": "Option<Timepoint<BlockNumberFor<T>>>",
                      "docs": []
                    },
                    {
                      "name": "call_hash",
                      "typeId": 1,
                      "typeName": "[u8; 32]",
                      "docs": []
                    },
                    {
                      "name": "max_weight",
                      "typeId": 9,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": ["See [`Pallet::approve_as_multi`]."]
                },
                {
                  "name": "cancel_as_multi",
                  "fields": [
                    {
                      "name": "threshold",
                      "typeId": 66,
                      "typeName": "u16",
                      "docs": []
                    },
                    {
                      "name": "other_signatories",
                      "typeId": 92,
                      "typeName": "Vec<T::AccountId>",
                      "docs": []
                    },
                    {
                      "name": "timepoint",
                      "typeId": 206,
                      "typeName": "Timepoint<BlockNumberFor<T>>",
                      "docs": []
                    },
                    {
                      "name": "call_hash",
                      "typeId": 1,
                      "typeName": "[u8; 32]",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": ["See [`Pallet::cancel_as_multi`]."]
                }
              ]
            }
          },
          "docs": ["Contains a variant per dispatchable extrinsic that this pallet has."]
        },
        {
          "id": 205,
          "path": ["Option"],
          "params": [
            {
              "name": "T",
              "typeId": 206
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 206,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 206,
          "path": ["pallet_multisig", "Timepoint"],
          "params": [
            {
              "name": "BlockNumber",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "height",
                  "typeId": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                },
                {
                  "name": "index",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 207,
          "path": ["pallet_bounties", "pallet", "Call"],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "propose_bounty",
                  "fields": [
                    {
                      "name": "value",
                      "typeId": 60,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    },
                    {
                      "name": "description",
                      "typeId": 13,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["See [`Pallet::propose_bounty`]."]
                },
                {
                  "name": "approve_bounty",
                  "fields": [
                    {
                      "name": "bounty_id",
                      "typeId": 79,
                      "typeName": "BountyIndex",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": ["See [`Pallet::approve_bounty`]."]
                },
                {
                  "name": "propose_curator",
                  "fields": [
                    {
                      "name": "bounty_id",
                      "typeId": 79,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": "curator",
                      "typeId": 88,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "fee",
                      "typeId": 60,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": ["See [`Pallet::propose_curator`]."]
                },
                {
                  "name": "unassign_curator",
                  "fields": [
                    {
                      "name": "bounty_id",
                      "typeId": 79,
                      "typeName": "BountyIndex",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": ["See [`Pallet::unassign_curator`]."]
                },
                {
                  "name": "accept_curator",
                  "fields": [
                    {
                      "name": "bounty_id",
                      "typeId": 79,
                      "typeName": "BountyIndex",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": ["See [`Pallet::accept_curator`]."]
                },
                {
                  "name": "award_bounty",
                  "fields": [
                    {
                      "name": "bounty_id",
                      "typeId": 79,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "typeId": 88,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": ["See [`Pallet::award_bounty`]."]
                },
                {
                  "name": "claim_bounty",
                  "fields": [
                    {
                      "name": "bounty_id",
                      "typeId": 79,
                      "typeName": "BountyIndex",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": ["See [`Pallet::claim_bounty`]."]
                },
                {
                  "name": "close_bounty",
                  "fields": [
                    {
                      "name": "bounty_id",
                      "typeId": 79,
                      "typeName": "BountyIndex",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": ["See [`Pallet::close_bounty`]."]
                },
                {
                  "name": "extend_bounty_expiry",
                  "fields": [
                    {
                      "name": "bounty_id",
                      "typeId": 79,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": "remark",
                      "typeId": 13,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": ["See [`Pallet::extend_bounty_expiry`]."]
                }
              ]
            }
          },
          "docs": ["Contains a variant per dispatchable extrinsic that this pallet has."]
        },
        {
          "id": 208,
          "path": ["pallet_child_bounties", "pallet", "Call"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "add_child_bounty",
                  "fields": [
                    {
                      "name": "parent_bounty_id",
                      "typeId": 79,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "typeId": 60,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "description",
                      "typeId": 13,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["See [`Pallet::add_child_bounty`]."]
                },
                {
                  "name": "propose_curator",
                  "fields": [
                    {
                      "name": "parent_bounty_id",
                      "typeId": 79,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": "child_bounty_id",
                      "typeId": 79,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": "curator",
                      "typeId": 88,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "fee",
                      "typeId": 60,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": ["See [`Pallet::propose_curator`]."]
                },
                {
                  "name": "accept_curator",
                  "fields": [
                    {
                      "name": "parent_bounty_id",
                      "typeId": 79,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": "child_bounty_id",
                      "typeId": 79,
                      "typeName": "BountyIndex",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": ["See [`Pallet::accept_curator`]."]
                },
                {
                  "name": "unassign_curator",
                  "fields": [
                    {
                      "name": "parent_bounty_id",
                      "typeId": 79,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": "child_bounty_id",
                      "typeId": 79,
                      "typeName": "BountyIndex",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": ["See [`Pallet::unassign_curator`]."]
                },
                {
                  "name": "award_child_bounty",
                  "fields": [
                    {
                      "name": "parent_bounty_id",
                      "typeId": 79,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": "child_bounty_id",
                      "typeId": 79,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "typeId": 88,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": ["See [`Pallet::award_child_bounty`]."]
                },
                {
                  "name": "claim_child_bounty",
                  "fields": [
                    {
                      "name": "parent_bounty_id",
                      "typeId": 79,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": "child_bounty_id",
                      "typeId": 79,
                      "typeName": "BountyIndex",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": ["See [`Pallet::claim_child_bounty`]."]
                },
                {
                  "name": "close_child_bounty",
                  "fields": [
                    {
                      "name": "parent_bounty_id",
                      "typeId": 79,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": "child_bounty_id",
                      "typeId": 79,
                      "typeName": "BountyIndex",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": ["See [`Pallet::close_child_bounty`]."]
                }
              ]
            }
          },
          "docs": ["Contains a variant per dispatchable extrinsic that this pallet has."]
        },
        {
          "id": 209,
          "path": ["pallet_election_provider_multi_phase", "pallet", "Call"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "submit_unsigned",
                  "fields": [
                    {
                      "name": "raw_solution",
                      "typeId": 210,
                      "typeName": "Box<RawSolution<SolutionOf<T::MinerConfig>>>",
                      "docs": []
                    },
                    {
                      "name": "witness",
                      "typeId": 263,
                      "typeName": "SolutionOrSnapshotSize",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["See [`Pallet::submit_unsigned`]."]
                },
                {
                  "name": "set_minimum_untrusted_score",
                  "fields": [
                    {
                      "name": "maybe_next_score",
                      "typeId": 264,
                      "typeName": "Option<ElectionScore>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": ["See [`Pallet::set_minimum_untrusted_score`]."]
                },
                {
                  "name": "set_emergency_election_result",
                  "fields": [
                    {
                      "name": "supports",
                      "typeId": 265,
                      "typeName": "Supports<T::AccountId>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": ["See [`Pallet::set_emergency_election_result`]."]
                },
                {
                  "name": "submit",
                  "fields": [
                    {
                      "name": "raw_solution",
                      "typeId": 210,
                      "typeName": "Box<RawSolution<SolutionOf<T::MinerConfig>>>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": ["See [`Pallet::submit`]."]
                },
                {
                  "name": "governance_fallback",
                  "fields": [
                    {
                      "name": "maybe_max_voters",
                      "typeId": 270,
                      "typeName": "Option<u32>",
                      "docs": []
                    },
                    {
                      "name": "maybe_max_targets",
                      "typeId": 270,
                      "typeName": "Option<u32>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": ["See [`Pallet::governance_fallback`]."]
                }
              ]
            }
          },
          "docs": ["Contains a variant per dispatchable extrinsic that this pallet has."]
        },
        {
          "id": 210,
          "path": ["pallet_election_provider_multi_phase", "RawSolution"],
          "params": [
            {
              "name": "S",
              "typeId": 211
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "solution",
                  "typeId": 211,
                  "typeName": "S",
                  "docs": []
                },
                {
                  "name": "score",
                  "typeId": 262,
                  "typeName": "ElectionScore",
                  "docs": []
                },
                {
                  "name": "round",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 211,
          "path": ["polkadot_runtime", "NposCompactSolution16"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "votes1",
                  "typeId": 212,
                  "docs": []
                },
                {
                  "name": "votes2",
                  "typeId": 215,
                  "docs": []
                },
                {
                  "name": "votes3",
                  "typeId": 220,
                  "docs": []
                },
                {
                  "name": "votes4",
                  "typeId": 223,
                  "docs": []
                },
                {
                  "name": "votes5",
                  "typeId": 226,
                  "docs": []
                },
                {
                  "name": "votes6",
                  "typeId": 229,
                  "docs": []
                },
                {
                  "name": "votes7",
                  "typeId": 232,
                  "docs": []
                },
                {
                  "name": "votes8",
                  "typeId": 235,
                  "docs": []
                },
                {
                  "name": "votes9",
                  "typeId": 238,
                  "docs": []
                },
                {
                  "name": "votes10",
                  "typeId": 241,
                  "docs": []
                },
                {
                  "name": "votes11",
                  "typeId": 244,
                  "docs": []
                },
                {
                  "name": "votes12",
                  "typeId": 247,
                  "docs": []
                },
                {
                  "name": "votes13",
                  "typeId": 250,
                  "docs": []
                },
                {
                  "name": "votes14",
                  "typeId": 253,
                  "docs": []
                },
                {
                  "name": "votes15",
                  "typeId": 256,
                  "docs": []
                },
                {
                  "name": "votes16",
                  "typeId": 259,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 212,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 213
            }
          },
          "docs": []
        },
        {
          "id": 213,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [79, 214]
            }
          },
          "docs": []
        },
        {
          "id": 214,
          "path": [],
          "params": [],
          "type": {
            "tag": "Compact",
            "value": {
              "typeParam": 66
            }
          },
          "docs": []
        },
        {
          "id": 215,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 216
            }
          },
          "docs": []
        },
        {
          "id": 216,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [79, 217, 214]
            }
          },
          "docs": []
        },
        {
          "id": 217,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [214, 218]
            }
          },
          "docs": []
        },
        {
          "id": 218,
          "path": [],
          "params": [],
          "type": {
            "tag": "Compact",
            "value": {
              "typeParam": 219
            }
          },
          "docs": []
        },
        {
          "id": 219,
          "path": ["sp_arithmetic", "per_things", "PerU16"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 66,
                  "typeName": "u16",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 220,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 221
            }
          },
          "docs": []
        },
        {
          "id": 221,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [79, 222, 214]
            }
          },
          "docs": []
        },
        {
          "id": 222,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 2,
              "typeParam": 217
            }
          },
          "docs": []
        },
        {
          "id": 223,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 224
            }
          },
          "docs": []
        },
        {
          "id": 224,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [79, 225, 214]
            }
          },
          "docs": []
        },
        {
          "id": 225,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 3,
              "typeParam": 217
            }
          },
          "docs": []
        },
        {
          "id": 226,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 227
            }
          },
          "docs": []
        },
        {
          "id": 227,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [79, 228, 214]
            }
          },
          "docs": []
        },
        {
          "id": 228,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 4,
              "typeParam": 217
            }
          },
          "docs": []
        },
        {
          "id": 229,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 230
            }
          },
          "docs": []
        },
        {
          "id": 230,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [79, 231, 214]
            }
          },
          "docs": []
        },
        {
          "id": 231,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 5,
              "typeParam": 217
            }
          },
          "docs": []
        },
        {
          "id": 232,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 233
            }
          },
          "docs": []
        },
        {
          "id": 233,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [79, 234, 214]
            }
          },
          "docs": []
        },
        {
          "id": 234,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 6,
              "typeParam": 217
            }
          },
          "docs": []
        },
        {
          "id": 235,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 236
            }
          },
          "docs": []
        },
        {
          "id": 236,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [79, 237, 214]
            }
          },
          "docs": []
        },
        {
          "id": 237,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 7,
              "typeParam": 217
            }
          },
          "docs": []
        },
        {
          "id": 238,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 239
            }
          },
          "docs": []
        },
        {
          "id": 239,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [79, 240, 214]
            }
          },
          "docs": []
        },
        {
          "id": 240,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 8,
              "typeParam": 217
            }
          },
          "docs": []
        },
        {
          "id": 241,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 242
            }
          },
          "docs": []
        },
        {
          "id": 242,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [79, 243, 214]
            }
          },
          "docs": []
        },
        {
          "id": 243,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 9,
              "typeParam": 217
            }
          },
          "docs": []
        },
        {
          "id": 244,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 245
            }
          },
          "docs": []
        },
        {
          "id": 245,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [79, 246, 214]
            }
          },
          "docs": []
        },
        {
          "id": 246,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 10,
              "typeParam": 217
            }
          },
          "docs": []
        },
        {
          "id": 247,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 248
            }
          },
          "docs": []
        },
        {
          "id": 248,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [79, 249, 214]
            }
          },
          "docs": []
        },
        {
          "id": 249,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 11,
              "typeParam": 217
            }
          },
          "docs": []
        },
        {
          "id": 250,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 251
            }
          },
          "docs": []
        },
        {
          "id": 251,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [79, 252, 214]
            }
          },
          "docs": []
        },
        {
          "id": 252,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 12,
              "typeParam": 217
            }
          },
          "docs": []
        },
        {
          "id": 253,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 254
            }
          },
          "docs": []
        },
        {
          "id": 254,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [79, 255, 214]
            }
          },
          "docs": []
        },
        {
          "id": 255,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 13,
              "typeParam": 217
            }
          },
          "docs": []
        },
        {
          "id": 256,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 257
            }
          },
          "docs": []
        },
        {
          "id": 257,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [79, 258, 214]
            }
          },
          "docs": []
        },
        {
          "id": 258,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 14,
              "typeParam": 217
            }
          },
          "docs": []
        },
        {
          "id": 259,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 260
            }
          },
          "docs": []
        },
        {
          "id": 260,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [79, 261, 214]
            }
          },
          "docs": []
        },
        {
          "id": 261,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 15,
              "typeParam": 217
            }
          },
          "docs": []
        },
        {
          "id": 262,
          "path": ["sp_npos_elections", "ElectionScore"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "minimal_stake",
                  "typeId": 6,
                  "typeName": "ExtendedBalance",
                  "docs": []
                },
                {
                  "name": "sum_stake",
                  "typeId": 6,
                  "typeName": "ExtendedBalance",
                  "docs": []
                },
                {
                  "name": "sum_stake_squared",
                  "typeId": 6,
                  "typeName": "ExtendedBalance",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 263,
          "path": ["pallet_election_provider_multi_phase", "SolutionOrSnapshotSize"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "voters",
                  "typeId": 79,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "targets",
                  "typeId": 79,
                  "typeName": "u32",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 264,
          "path": ["Option"],
          "params": [
            {
              "name": "T",
              "typeId": 262
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 262,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 265,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 266
            }
          },
          "docs": []
        },
        {
          "id": 266,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [0, 267]
            }
          },
          "docs": []
        },
        {
          "id": 267,
          "path": ["sp_npos_elections", "Support"],
          "params": [
            {
              "name": "AccountId",
              "typeId": 0
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "total",
                  "typeId": 6,
                  "typeName": "ExtendedBalance",
                  "docs": []
                },
                {
                  "name": "voters",
                  "typeId": 268,
                  "typeName": "Vec<(AccountId, ExtendedBalance)>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 268,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 269
            }
          },
          "docs": []
        },
        {
          "id": 269,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [0, 6]
            }
          },
          "docs": []
        },
        {
          "id": 270,
          "path": ["Option"],
          "params": [
            {
              "name": "T",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 4,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 271,
          "path": ["pallet_bags_list", "pallet", "Call"],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "rebag",
                  "fields": [
                    {
                      "name": "dislocated",
                      "typeId": 88,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["See [`Pallet::rebag`]."]
                },
                {
                  "name": "put_in_front_of",
                  "fields": [
                    {
                      "name": "lighter",
                      "typeId": 88,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": ["See [`Pallet::put_in_front_of`]."]
                },
                {
                  "name": "put_in_front_of_other",
                  "fields": [
                    {
                      "name": "heavier",
                      "typeId": 88,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "lighter",
                      "typeId": 88,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": ["See [`Pallet::put_in_front_of_other`]."]
                }
              ]
            }
          },
          "docs": ["Contains a variant per dispatchable extrinsic that this pallet has."]
        },
        {
          "id": 272,
          "path": ["pallet_nomination_pools", "pallet", "Call"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "join",
                  "fields": [
                    {
                      "name": "amount",
                      "typeId": 60,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "pool_id",
                      "typeId": 4,
                      "typeName": "PoolId",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["See [`Pallet::join`]."]
                },
                {
                  "name": "bond_extra",
                  "fields": [
                    {
                      "name": "extra",
                      "typeId": 273,
                      "typeName": "BondExtra<BalanceOf<T>>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": ["See [`Pallet::bond_extra`]."]
                },
                {
                  "name": "claim_payout",
                  "fields": [],
                  "index": 2,
                  "docs": ["See [`Pallet::claim_payout`]."]
                },
                {
                  "name": "unbond",
                  "fields": [
                    {
                      "name": "member_account",
                      "typeId": 88,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "unbonding_points",
                      "typeId": 60,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": ["See [`Pallet::unbond`]."]
                },
                {
                  "name": "pool_withdraw_unbonded",
                  "fields": [
                    {
                      "name": "pool_id",
                      "typeId": 4,
                      "typeName": "PoolId",
                      "docs": []
                    },
                    {
                      "name": "num_slashing_spans",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": ["See [`Pallet::pool_withdraw_unbonded`]."]
                },
                {
                  "name": "withdraw_unbonded",
                  "fields": [
                    {
                      "name": "member_account",
                      "typeId": 88,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "num_slashing_spans",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": ["See [`Pallet::withdraw_unbonded`]."]
                },
                {
                  "name": "create",
                  "fields": [
                    {
                      "name": "amount",
                      "typeId": 60,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "root",
                      "typeId": 88,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "nominator",
                      "typeId": 88,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "bouncer",
                      "typeId": 88,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": ["See [`Pallet::create`]."]
                },
                {
                  "name": "create_with_pool_id",
                  "fields": [
                    {
                      "name": "amount",
                      "typeId": 60,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "root",
                      "typeId": 88,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "nominator",
                      "typeId": 88,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "bouncer",
                      "typeId": 88,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "pool_id",
                      "typeId": 4,
                      "typeName": "PoolId",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": ["See [`Pallet::create_with_pool_id`]."]
                },
                {
                  "name": "nominate",
                  "fields": [
                    {
                      "name": "pool_id",
                      "typeId": 4,
                      "typeName": "PoolId",
                      "docs": []
                    },
                    {
                      "name": "validators",
                      "typeId": 92,
                      "typeName": "Vec<T::AccountId>",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": ["See [`Pallet::nominate`]."]
                },
                {
                  "name": "set_state",
                  "fields": [
                    {
                      "name": "pool_id",
                      "typeId": 4,
                      "typeName": "PoolId",
                      "docs": []
                    },
                    {
                      "name": "state",
                      "typeId": 274,
                      "typeName": "PoolState",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": ["See [`Pallet::set_state`]."]
                },
                {
                  "name": "set_metadata",
                  "fields": [
                    {
                      "name": "pool_id",
                      "typeId": 4,
                      "typeName": "PoolId",
                      "docs": []
                    },
                    {
                      "name": "metadata",
                      "typeId": 13,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 10,
                  "docs": ["See [`Pallet::set_metadata`]."]
                },
                {
                  "name": "set_configs",
                  "fields": [
                    {
                      "name": "min_join_bond",
                      "typeId": 275,
                      "typeName": "ConfigOp<BalanceOf<T>>",
                      "docs": []
                    },
                    {
                      "name": "min_create_bond",
                      "typeId": 275,
                      "typeName": "ConfigOp<BalanceOf<T>>",
                      "docs": []
                    },
                    {
                      "name": "max_pools",
                      "typeId": 276,
                      "typeName": "ConfigOp<u32>",
                      "docs": []
                    },
                    {
                      "name": "max_members",
                      "typeId": 276,
                      "typeName": "ConfigOp<u32>",
                      "docs": []
                    },
                    {
                      "name": "max_members_per_pool",
                      "typeId": 276,
                      "typeName": "ConfigOp<u32>",
                      "docs": []
                    },
                    {
                      "name": "global_max_commission",
                      "typeId": 277,
                      "typeName": "ConfigOp<Perbill>",
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": ["See [`Pallet::set_configs`]."]
                },
                {
                  "name": "update_roles",
                  "fields": [
                    {
                      "name": "pool_id",
                      "typeId": 4,
                      "typeName": "PoolId",
                      "docs": []
                    },
                    {
                      "name": "new_root",
                      "typeId": 278,
                      "typeName": "ConfigOp<T::AccountId>",
                      "docs": []
                    },
                    {
                      "name": "new_nominator",
                      "typeId": 278,
                      "typeName": "ConfigOp<T::AccountId>",
                      "docs": []
                    },
                    {
                      "name": "new_bouncer",
                      "typeId": 278,
                      "typeName": "ConfigOp<T::AccountId>",
                      "docs": []
                    }
                  ],
                  "index": 12,
                  "docs": ["See [`Pallet::update_roles`]."]
                },
                {
                  "name": "chill",
                  "fields": [
                    {
                      "name": "pool_id",
                      "typeId": 4,
                      "typeName": "PoolId",
                      "docs": []
                    }
                  ],
                  "index": 13,
                  "docs": ["See [`Pallet::chill`]."]
                },
                {
                  "name": "bond_extra_other",
                  "fields": [
                    {
                      "name": "member",
                      "typeId": 88,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "extra",
                      "typeId": 273,
                      "typeName": "BondExtra<BalanceOf<T>>",
                      "docs": []
                    }
                  ],
                  "index": 14,
                  "docs": ["See [`Pallet::bond_extra_other`]."]
                },
                {
                  "name": "set_claim_permission",
                  "fields": [
                    {
                      "name": "permission",
                      "typeId": 279,
                      "typeName": "ClaimPermission",
                      "docs": []
                    }
                  ],
                  "index": 15,
                  "docs": ["See [`Pallet::set_claim_permission`]."]
                },
                {
                  "name": "claim_payout_other",
                  "fields": [
                    {
                      "name": "other",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 16,
                  "docs": ["See [`Pallet::claim_payout_other`]."]
                },
                {
                  "name": "set_commission",
                  "fields": [
                    {
                      "name": "pool_id",
                      "typeId": 4,
                      "typeName": "PoolId",
                      "docs": []
                    },
                    {
                      "name": "new_commission",
                      "typeId": 280,
                      "typeName": "Option<(Perbill, T::AccountId)>",
                      "docs": []
                    }
                  ],
                  "index": 17,
                  "docs": ["See [`Pallet::set_commission`]."]
                },
                {
                  "name": "set_commission_max",
                  "fields": [
                    {
                      "name": "pool_id",
                      "typeId": 4,
                      "typeName": "PoolId",
                      "docs": []
                    },
                    {
                      "name": "max_commission",
                      "typeId": 41,
                      "typeName": "Perbill",
                      "docs": []
                    }
                  ],
                  "index": 18,
                  "docs": ["See [`Pallet::set_commission_max`]."]
                },
                {
                  "name": "set_commission_change_rate",
                  "fields": [
                    {
                      "name": "pool_id",
                      "typeId": 4,
                      "typeName": "PoolId",
                      "docs": []
                    },
                    {
                      "name": "change_rate",
                      "typeId": 282,
                      "typeName": "CommissionChangeRate<BlockNumberFor<T>>",
                      "docs": []
                    }
                  ],
                  "index": 19,
                  "docs": ["See [`Pallet::set_commission_change_rate`]."]
                },
                {
                  "name": "claim_commission",
                  "fields": [
                    {
                      "name": "pool_id",
                      "typeId": 4,
                      "typeName": "PoolId",
                      "docs": []
                    }
                  ],
                  "index": 20,
                  "docs": ["See [`Pallet::claim_commission`]."]
                }
              ]
            }
          },
          "docs": ["Contains a variant per dispatchable extrinsic that this pallet has."]
        },
        {
          "id": 273,
          "path": ["pallet_nomination_pools", "BondExtra"],
          "params": [
            {
              "name": "Balance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "FreeBalance",
                  "fields": [
                    {
                      "typeId": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Rewards",
                  "fields": [],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 274,
          "path": ["pallet_nomination_pools", "PoolState"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Open",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Blocked",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Destroying",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 275,
          "path": ["pallet_nomination_pools", "ConfigOp"],
          "params": [
            {
              "name": "T",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Noop",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Set",
                  "fields": [
                    {
                      "typeId": 6,
                      "typeName": "T",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Remove",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 276,
          "path": ["pallet_nomination_pools", "ConfigOp"],
          "params": [
            {
              "name": "T",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Noop",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Set",
                  "fields": [
                    {
                      "typeId": 4,
                      "typeName": "T",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Remove",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 277,
          "path": ["pallet_nomination_pools", "ConfigOp"],
          "params": [
            {
              "name": "T",
              "typeId": 41
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Noop",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Set",
                  "fields": [
                    {
                      "typeId": 41,
                      "typeName": "T",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Remove",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 278,
          "path": ["pallet_nomination_pools", "ConfigOp"],
          "params": [
            {
              "name": "T",
              "typeId": 0
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Noop",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Set",
                  "fields": [
                    {
                      "typeId": 0,
                      "typeName": "T",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Remove",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 279,
          "path": ["pallet_nomination_pools", "ClaimPermission"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Permissioned",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "PermissionlessCompound",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "PermissionlessWithdraw",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "PermissionlessAll",
                  "fields": [],
                  "index": 3,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 280,
          "path": ["Option"],
          "params": [
            {
              "name": "T",
              "typeId": 281
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 281,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 281,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [41, 0]
            }
          },
          "docs": []
        },
        {
          "id": 282,
          "path": ["pallet_nomination_pools", "CommissionChangeRate"],
          "params": [
            {
              "name": "BlockNumber",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "max_increase",
                  "typeId": 41,
                  "typeName": "Perbill",
                  "docs": []
                },
                {
                  "name": "min_delay",
                  "typeId": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 283,
          "path": ["pallet_fast_unstake", "pallet", "Call"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "register_fast_unstake",
                  "fields": [],
                  "index": 0,
                  "docs": ["See [`Pallet::register_fast_unstake`]."]
                },
                {
                  "name": "deregister",
                  "fields": [],
                  "index": 1,
                  "docs": ["See [`Pallet::deregister`]."]
                },
                {
                  "name": "control",
                  "fields": [
                    {
                      "name": "eras_to_check",
                      "typeId": 4,
                      "typeName": "EraIndex",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": ["See [`Pallet::control`]."]
                }
              ]
            }
          },
          "docs": ["Contains a variant per dispatchable extrinsic that this pallet has."]
        },
        {
          "id": 284,
          "path": ["polkadot_runtime_parachains", "configuration", "pallet", "Call"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "set_validation_upgrade_cooldown",
                  "fields": [
                    {
                      "name": "new",
                      "typeId": 4,
                      "typeName": "BlockNumberFor<T>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["See [`Pallet::set_validation_upgrade_cooldown`]."]
                },
                {
                  "name": "set_validation_upgrade_delay",
                  "fields": [
                    {
                      "name": "new",
                      "typeId": 4,
                      "typeName": "BlockNumberFor<T>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": ["See [`Pallet::set_validation_upgrade_delay`]."]
                },
                {
                  "name": "set_code_retention_period",
                  "fields": [
                    {
                      "name": "new",
                      "typeId": 4,
                      "typeName": "BlockNumberFor<T>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": ["See [`Pallet::set_code_retention_period`]."]
                },
                {
                  "name": "set_max_code_size",
                  "fields": [
                    {
                      "name": "new",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": ["See [`Pallet::set_max_code_size`]."]
                },
                {
                  "name": "set_max_pov_size",
                  "fields": [
                    {
                      "name": "new",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": ["See [`Pallet::set_max_pov_size`]."]
                },
                {
                  "name": "set_max_head_data_size",
                  "fields": [
                    {
                      "name": "new",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": ["See [`Pallet::set_max_head_data_size`]."]
                },
                {
                  "name": "set_on_demand_cores",
                  "fields": [
                    {
                      "name": "new",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": ["See [`Pallet::set_on_demand_cores`]."]
                },
                {
                  "name": "set_on_demand_retries",
                  "fields": [
                    {
                      "name": "new",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": ["See [`Pallet::set_on_demand_retries`]."]
                },
                {
                  "name": "set_group_rotation_frequency",
                  "fields": [
                    {
                      "name": "new",
                      "typeId": 4,
                      "typeName": "BlockNumberFor<T>",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": ["See [`Pallet::set_group_rotation_frequency`]."]
                },
                {
                  "name": "set_paras_availability_period",
                  "fields": [
                    {
                      "name": "new",
                      "typeId": 4,
                      "typeName": "BlockNumberFor<T>",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": ["See [`Pallet::set_paras_availability_period`]."]
                },
                {
                  "name": "set_scheduling_lookahead",
                  "fields": [
                    {
                      "name": "new",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": ["See [`Pallet::set_scheduling_lookahead`]."]
                },
                {
                  "name": "set_max_validators_per_core",
                  "fields": [
                    {
                      "name": "new",
                      "typeId": 270,
                      "typeName": "Option<u32>",
                      "docs": []
                    }
                  ],
                  "index": 12,
                  "docs": ["See [`Pallet::set_max_validators_per_core`]."]
                },
                {
                  "name": "set_max_validators",
                  "fields": [
                    {
                      "name": "new",
                      "typeId": 270,
                      "typeName": "Option<u32>",
                      "docs": []
                    }
                  ],
                  "index": 13,
                  "docs": ["See [`Pallet::set_max_validators`]."]
                },
                {
                  "name": "set_dispute_period",
                  "fields": [
                    {
                      "name": "new",
                      "typeId": 4,
                      "typeName": "SessionIndex",
                      "docs": []
                    }
                  ],
                  "index": 14,
                  "docs": ["See [`Pallet::set_dispute_period`]."]
                },
                {
                  "name": "set_dispute_post_conclusion_acceptance_period",
                  "fields": [
                    {
                      "name": "new",
                      "typeId": 4,
                      "typeName": "BlockNumberFor<T>",
                      "docs": []
                    }
                  ],
                  "index": 15,
                  "docs": ["See [`Pallet::set_dispute_post_conclusion_acceptance_period`]."]
                },
                {
                  "name": "set_no_show_slots",
                  "fields": [
                    {
                      "name": "new",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 18,
                  "docs": ["See [`Pallet::set_no_show_slots`]."]
                },
                {
                  "name": "set_n_delay_tranches",
                  "fields": [
                    {
                      "name": "new",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 19,
                  "docs": ["See [`Pallet::set_n_delay_tranches`]."]
                },
                {
                  "name": "set_zeroth_delay_tranche_width",
                  "fields": [
                    {
                      "name": "new",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 20,
                  "docs": ["See [`Pallet::set_zeroth_delay_tranche_width`]."]
                },
                {
                  "name": "set_needed_approvals",
                  "fields": [
                    {
                      "name": "new",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 21,
                  "docs": ["See [`Pallet::set_needed_approvals`]."]
                },
                {
                  "name": "set_relay_vrf_modulo_samples",
                  "fields": [
                    {
                      "name": "new",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 22,
                  "docs": ["See [`Pallet::set_relay_vrf_modulo_samples`]."]
                },
                {
                  "name": "set_max_upward_queue_count",
                  "fields": [
                    {
                      "name": "new",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 23,
                  "docs": ["See [`Pallet::set_max_upward_queue_count`]."]
                },
                {
                  "name": "set_max_upward_queue_size",
                  "fields": [
                    {
                      "name": "new",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 24,
                  "docs": ["See [`Pallet::set_max_upward_queue_size`]."]
                },
                {
                  "name": "set_max_downward_message_size",
                  "fields": [
                    {
                      "name": "new",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 25,
                  "docs": ["See [`Pallet::set_max_downward_message_size`]."]
                },
                {
                  "name": "set_max_upward_message_size",
                  "fields": [
                    {
                      "name": "new",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 27,
                  "docs": ["See [`Pallet::set_max_upward_message_size`]."]
                },
                {
                  "name": "set_max_upward_message_num_per_candidate",
                  "fields": [
                    {
                      "name": "new",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 28,
                  "docs": ["See [`Pallet::set_max_upward_message_num_per_candidate`]."]
                },
                {
                  "name": "set_hrmp_open_request_ttl",
                  "fields": [
                    {
                      "name": "new",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 29,
                  "docs": ["See [`Pallet::set_hrmp_open_request_ttl`]."]
                },
                {
                  "name": "set_hrmp_sender_deposit",
                  "fields": [
                    {
                      "name": "new",
                      "typeId": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ],
                  "index": 30,
                  "docs": ["See [`Pallet::set_hrmp_sender_deposit`]."]
                },
                {
                  "name": "set_hrmp_recipient_deposit",
                  "fields": [
                    {
                      "name": "new",
                      "typeId": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ],
                  "index": 31,
                  "docs": ["See [`Pallet::set_hrmp_recipient_deposit`]."]
                },
                {
                  "name": "set_hrmp_channel_max_capacity",
                  "fields": [
                    {
                      "name": "new",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 32,
                  "docs": ["See [`Pallet::set_hrmp_channel_max_capacity`]."]
                },
                {
                  "name": "set_hrmp_channel_max_total_size",
                  "fields": [
                    {
                      "name": "new",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 33,
                  "docs": ["See [`Pallet::set_hrmp_channel_max_total_size`]."]
                },
                {
                  "name": "set_hrmp_max_parachain_inbound_channels",
                  "fields": [
                    {
                      "name": "new",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 34,
                  "docs": ["See [`Pallet::set_hrmp_max_parachain_inbound_channels`]."]
                },
                {
                  "name": "set_hrmp_channel_max_message_size",
                  "fields": [
                    {
                      "name": "new",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 36,
                  "docs": ["See [`Pallet::set_hrmp_channel_max_message_size`]."]
                },
                {
                  "name": "set_hrmp_max_parachain_outbound_channels",
                  "fields": [
                    {
                      "name": "new",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 37,
                  "docs": ["See [`Pallet::set_hrmp_max_parachain_outbound_channels`]."]
                },
                {
                  "name": "set_hrmp_max_message_num_per_candidate",
                  "fields": [
                    {
                      "name": "new",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 39,
                  "docs": ["See [`Pallet::set_hrmp_max_message_num_per_candidate`]."]
                },
                {
                  "name": "set_pvf_voting_ttl",
                  "fields": [
                    {
                      "name": "new",
                      "typeId": 4,
                      "typeName": "SessionIndex",
                      "docs": []
                    }
                  ],
                  "index": 42,
                  "docs": ["See [`Pallet::set_pvf_voting_ttl`]."]
                },
                {
                  "name": "set_minimum_validation_upgrade_delay",
                  "fields": [
                    {
                      "name": "new",
                      "typeId": 4,
                      "typeName": "BlockNumberFor<T>",
                      "docs": []
                    }
                  ],
                  "index": 43,
                  "docs": ["See [`Pallet::set_minimum_validation_upgrade_delay`]."]
                },
                {
                  "name": "set_bypass_consistency_check",
                  "fields": [
                    {
                      "name": "new",
                      "typeId": 44,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 44,
                  "docs": ["See [`Pallet::set_bypass_consistency_check`]."]
                },
                {
                  "name": "set_async_backing_params",
                  "fields": [
                    {
                      "name": "new",
                      "typeId": 285,
                      "typeName": "AsyncBackingParams",
                      "docs": []
                    }
                  ],
                  "index": 45,
                  "docs": ["See [`Pallet::set_async_backing_params`]."]
                },
                {
                  "name": "set_executor_params",
                  "fields": [
                    {
                      "name": "new",
                      "typeId": 286,
                      "typeName": "ExecutorParams",
                      "docs": []
                    }
                  ],
                  "index": 46,
                  "docs": ["See [`Pallet::set_executor_params`]."]
                },
                {
                  "name": "set_on_demand_base_fee",
                  "fields": [
                    {
                      "name": "new",
                      "typeId": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ],
                  "index": 47,
                  "docs": ["See [`Pallet::set_on_demand_base_fee`]."]
                },
                {
                  "name": "set_on_demand_fee_variability",
                  "fields": [
                    {
                      "name": "new",
                      "typeId": 41,
                      "typeName": "Perbill",
                      "docs": []
                    }
                  ],
                  "index": 48,
                  "docs": ["See [`Pallet::set_on_demand_fee_variability`]."]
                },
                {
                  "name": "set_on_demand_queue_max_size",
                  "fields": [
                    {
                      "name": "new",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 49,
                  "docs": ["See [`Pallet::set_on_demand_queue_max_size`]."]
                },
                {
                  "name": "set_on_demand_target_queue_utilization",
                  "fields": [
                    {
                      "name": "new",
                      "typeId": 41,
                      "typeName": "Perbill",
                      "docs": []
                    }
                  ],
                  "index": 50,
                  "docs": ["See [`Pallet::set_on_demand_target_queue_utilization`]."]
                },
                {
                  "name": "set_on_demand_ttl",
                  "fields": [
                    {
                      "name": "new",
                      "typeId": 4,
                      "typeName": "BlockNumberFor<T>",
                      "docs": []
                    }
                  ],
                  "index": 51,
                  "docs": ["See [`Pallet::set_on_demand_ttl`]."]
                },
                {
                  "name": "set_minimum_backing_votes",
                  "fields": [
                    {
                      "name": "new",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 52,
                  "docs": ["See [`Pallet::set_minimum_backing_votes`]."]
                }
              ]
            }
          },
          "docs": ["Contains a variant per dispatchable extrinsic that this pallet has."]
        },
        {
          "id": 285,
          "path": ["polkadot_primitives", "vstaging", "AsyncBackingParams"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "max_candidate_depth",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "allowed_ancestry_len",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 286,
          "path": ["polkadot_primitives", "v5", "executor_params", "ExecutorParams"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 287,
                  "typeName": "Vec<ExecutorParam>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 287,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 288
            }
          },
          "docs": []
        },
        {
          "id": 288,
          "path": ["polkadot_primitives", "v5", "executor_params", "ExecutorParam"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "MaxMemoryPages",
                  "fields": [
                    {
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "StackLogicalMax",
                  "fields": [
                    {
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "StackNativeMax",
                  "fields": [
                    {
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "PrecheckingMaxMemory",
                  "fields": [
                    {
                      "typeId": 11,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "PvfPrepTimeout",
                  "fields": [
                    {
                      "typeId": 289,
                      "typeName": "PvfPrepTimeoutKind",
                      "docs": []
                    },
                    {
                      "typeId": 11,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "PvfExecTimeout",
                  "fields": [
                    {
                      "typeId": 290,
                      "typeName": "PvfExecTimeoutKind",
                      "docs": []
                    },
                    {
                      "typeId": 11,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "WasmExtBulkMemory",
                  "fields": [],
                  "index": 7,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 289,
          "path": ["polkadot_primitives", "v5", "PvfPrepTimeoutKind"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Precheck",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Lenient",
                  "fields": [],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 290,
          "path": ["polkadot_primitives", "v5", "PvfExecTimeoutKind"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Backing",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Approval",
                  "fields": [],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 291,
          "path": ["polkadot_runtime_parachains", "shared", "pallet", "Call"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": []
            }
          },
          "docs": ["Contains a variant per dispatchable extrinsic that this pallet has."]
        },
        {
          "id": 292,
          "path": ["polkadot_runtime_parachains", "inclusion", "pallet", "Call"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": []
            }
          },
          "docs": ["Contains a variant per dispatchable extrinsic that this pallet has."]
        },
        {
          "id": 293,
          "path": ["polkadot_runtime_parachains", "paras_inherent", "pallet", "Call"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "enter",
                  "fields": [
                    {
                      "name": "data",
                      "typeId": 294,
                      "typeName": "ParachainsInherentData<HeaderFor<T>>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["See [`Pallet::enter`]."]
                }
              ]
            }
          },
          "docs": ["Contains a variant per dispatchable extrinsic that this pallet has."]
        },
        {
          "id": 294,
          "path": ["polkadot_primitives", "v5", "InherentData"],
          "params": [
            {
              "name": "HDR",
              "typeId": 78
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "bitfields",
                  "typeId": 295,
                  "typeName": "UncheckedSignedAvailabilityBitfields",
                  "docs": []
                },
                {
                  "name": "backed_candidates",
                  "typeId": 302,
                  "typeName": "Vec<BackedCandidate<HDR::Hash>>",
                  "docs": []
                },
                {
                  "name": "disputes",
                  "typeId": 319,
                  "typeName": "MultiDisputeStatementSet",
                  "docs": []
                },
                {
                  "name": "parent_header",
                  "typeId": 78,
                  "typeName": "HDR",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 295,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 296
            }
          },
          "docs": []
        },
        {
          "id": 296,
          "path": ["polkadot_primitives", "v5", "signed", "UncheckedSigned"],
          "params": [
            {
              "name": "Payload",
              "typeId": 297
            },
            {
              "name": "RealPayload",
              "typeId": 297
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "payload",
                  "typeId": 297,
                  "typeName": "Payload",
                  "docs": []
                },
                {
                  "name": "validator_index",
                  "typeId": 300,
                  "typeName": "ValidatorIndex",
                  "docs": []
                },
                {
                  "name": "signature",
                  "typeId": 301,
                  "typeName": "ValidatorSignature",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 297,
          "path": ["polkadot_primitives", "v5", "AvailabilityBitfield"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 298,
                  "typeName": "BitVec<u8, bitvec::order::Lsb0>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 298,
          "path": [],
          "params": [],
          "type": {
            "tag": "BitSequence",
            "value": {
              "bitOrderType": 2,
              "bitStoreType": 299
            }
          },
          "docs": []
        },
        {
          "id": 299,
          "path": ["bitvec", "order", "Lsb0"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": []
            }
          },
          "docs": []
        },
        {
          "id": 300,
          "path": ["polkadot_primitives", "v5", "ValidatorIndex"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 301,
          "path": ["polkadot_primitives", "v5", "validator_app", "Signature"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 122,
                  "typeName": "sr25519::Signature",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 302,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 303
            }
          },
          "docs": []
        },
        {
          "id": 303,
          "path": ["polkadot_primitives", "v5", "BackedCandidate"],
          "params": [
            {
              "name": "H",
              "typeId": 12
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "candidate",
                  "typeId": 304,
                  "typeName": "CommittedCandidateReceipt<H>",
                  "docs": []
                },
                {
                  "name": "validity_votes",
                  "typeId": 317,
                  "typeName": "Vec<ValidityAttestation>",
                  "docs": []
                },
                {
                  "name": "validator_indices",
                  "typeId": 298,
                  "typeName": "BitVec<u8, bitvec::order::Lsb0>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 304,
          "path": ["polkadot_primitives", "v5", "CommittedCandidateReceipt"],
          "params": [
            {
              "name": "H",
              "typeId": 12
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "descriptor",
                  "typeId": 305,
                  "typeName": "CandidateDescriptor<H>",
                  "docs": []
                },
                {
                  "name": "commitments",
                  "typeId": 309,
                  "typeName": "CandidateCommitments",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 305,
          "path": ["polkadot_primitives", "v5", "CandidateDescriptor"],
          "params": [
            {
              "name": "H",
              "typeId": 12
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "para_id",
                  "typeId": 134,
                  "typeName": "Id",
                  "docs": []
                },
                {
                  "name": "relay_parent",
                  "typeId": 12,
                  "typeName": "H",
                  "docs": []
                },
                {
                  "name": "collator",
                  "typeId": 306,
                  "typeName": "CollatorId",
                  "docs": []
                },
                {
                  "name": "persisted_validation_data_hash",
                  "typeId": 12,
                  "typeName": "Hash",
                  "docs": []
                },
                {
                  "name": "pov_hash",
                  "typeId": 12,
                  "typeName": "Hash",
                  "docs": []
                },
                {
                  "name": "erasure_root",
                  "typeId": 12,
                  "typeName": "Hash",
                  "docs": []
                },
                {
                  "name": "signature",
                  "typeId": 307,
                  "typeName": "CollatorSignature",
                  "docs": []
                },
                {
                  "name": "para_head",
                  "typeId": 12,
                  "typeName": "Hash",
                  "docs": []
                },
                {
                  "name": "validation_code_hash",
                  "typeId": 308,
                  "typeName": "ValidationCodeHash",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 306,
          "path": ["polkadot_primitives", "v5", "collator_app", "Public"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 56,
                  "typeName": "sr25519::Public",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 307,
          "path": ["polkadot_primitives", "v5", "collator_app", "Signature"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 122,
                  "typeName": "sr25519::Signature",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 308,
          "path": ["polkadot_parachain_primitives", "primitives", "ValidationCodeHash"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 12,
                  "typeName": "Hash",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 309,
          "path": ["polkadot_primitives", "v5", "CandidateCommitments"],
          "params": [
            {
              "name": "N",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "upward_messages",
                  "typeId": 310,
                  "typeName": "UpwardMessages",
                  "docs": []
                },
                {
                  "name": "horizontal_messages",
                  "typeId": 311,
                  "typeName": "HorizontalMessages",
                  "docs": []
                },
                {
                  "name": "new_validation_code",
                  "typeId": 314,
                  "typeName": "Option<ValidationCode>",
                  "docs": []
                },
                {
                  "name": "head_data",
                  "typeId": 316,
                  "typeName": "HeadData",
                  "docs": []
                },
                {
                  "name": "processed_downward_messages",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "hrmp_watermark",
                  "typeId": 4,
                  "typeName": "N",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 310,
          "path": ["bounded_collections", "bounded_vec", "BoundedVec"],
          "params": [
            {
              "name": "T",
              "typeId": 13
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 72,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 311,
          "path": ["bounded_collections", "bounded_vec", "BoundedVec"],
          "params": [
            {
              "name": "T",
              "typeId": 312
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 313,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 312,
          "path": ["polkadot_core_primitives", "OutboundHrmpMessage"],
          "params": [
            {
              "name": "Id",
              "typeId": 134
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "recipient",
                  "typeId": 134,
                  "typeName": "Id",
                  "docs": []
                },
                {
                  "name": "data",
                  "typeId": 13,
                  "typeName": "sp_std::vec::Vec<u8>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 313,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 312
            }
          },
          "docs": []
        },
        {
          "id": 314,
          "path": ["Option"],
          "params": [
            {
              "name": "T",
              "typeId": 315
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 315,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 315,
          "path": ["polkadot_parachain_primitives", "primitives", "ValidationCode"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 13,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 316,
          "path": ["polkadot_parachain_primitives", "primitives", "HeadData"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 13,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 317,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 318
            }
          },
          "docs": []
        },
        {
          "id": 318,
          "path": ["polkadot_primitives", "v5", "ValidityAttestation"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Implicit",
                  "fields": [
                    {
                      "typeId": 301,
                      "typeName": "ValidatorSignature",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Explicit",
                  "fields": [
                    {
                      "typeId": 301,
                      "typeName": "ValidatorSignature",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 319,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 320
            }
          },
          "docs": []
        },
        {
          "id": 320,
          "path": ["polkadot_primitives", "v5", "DisputeStatementSet"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "candidate_hash",
                  "typeId": 321,
                  "typeName": "CandidateHash",
                  "docs": []
                },
                {
                  "name": "session",
                  "typeId": 4,
                  "typeName": "SessionIndex",
                  "docs": []
                },
                {
                  "name": "statements",
                  "typeId": 322,
                  "typeName": "Vec<(DisputeStatement, ValidatorIndex, ValidatorSignature)>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 321,
          "path": ["polkadot_core_primitives", "CandidateHash"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 12,
                  "typeName": "Hash",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 322,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 323
            }
          },
          "docs": []
        },
        {
          "id": 323,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [324, 300, 301]
            }
          },
          "docs": []
        },
        {
          "id": 324,
          "path": ["polkadot_primitives", "v5", "DisputeStatement"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Valid",
                  "fields": [
                    {
                      "typeId": 325,
                      "typeName": "ValidDisputeStatementKind",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Invalid",
                  "fields": [
                    {
                      "typeId": 326,
                      "typeName": "InvalidDisputeStatementKind",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 325,
          "path": ["polkadot_primitives", "v5", "ValidDisputeStatementKind"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Explicit",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "BackingSeconded",
                  "fields": [
                    {
                      "typeId": 12,
                      "typeName": "Hash",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "BackingValid",
                  "fields": [
                    {
                      "typeId": 12,
                      "typeName": "Hash",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "ApprovalChecking",
                  "fields": [],
                  "index": 3,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 326,
          "path": ["polkadot_primitives", "v5", "InvalidDisputeStatementKind"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Explicit",
                  "fields": [],
                  "index": 0,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 327,
          "path": ["polkadot_runtime_parachains", "paras", "pallet", "Call"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "force_set_current_code",
                  "fields": [
                    {
                      "name": "para",
                      "typeId": 134,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "new_code",
                      "typeId": 315,
                      "typeName": "ValidationCode",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["See [`Pallet::force_set_current_code`]."]
                },
                {
                  "name": "force_set_current_head",
                  "fields": [
                    {
                      "name": "para",
                      "typeId": 134,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "new_head",
                      "typeId": 316,
                      "typeName": "HeadData",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": ["See [`Pallet::force_set_current_head`]."]
                },
                {
                  "name": "force_schedule_code_upgrade",
                  "fields": [
                    {
                      "name": "para",
                      "typeId": 134,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "new_code",
                      "typeId": 315,
                      "typeName": "ValidationCode",
                      "docs": []
                    },
                    {
                      "name": "relay_parent_number",
                      "typeId": 4,
                      "typeName": "BlockNumberFor<T>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": ["See [`Pallet::force_schedule_code_upgrade`]."]
                },
                {
                  "name": "force_note_new_head",
                  "fields": [
                    {
                      "name": "para",
                      "typeId": 134,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "new_head",
                      "typeId": 316,
                      "typeName": "HeadData",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": ["See [`Pallet::force_note_new_head`]."]
                },
                {
                  "name": "force_queue_action",
                  "fields": [
                    {
                      "name": "para",
                      "typeId": 134,
                      "typeName": "ParaId",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": ["See [`Pallet::force_queue_action`]."]
                },
                {
                  "name": "add_trusted_validation_code",
                  "fields": [
                    {
                      "name": "validation_code",
                      "typeId": 315,
                      "typeName": "ValidationCode",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": ["See [`Pallet::add_trusted_validation_code`]."]
                },
                {
                  "name": "poke_unused_validation_code",
                  "fields": [
                    {
                      "name": "validation_code_hash",
                      "typeId": 308,
                      "typeName": "ValidationCodeHash",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": ["See [`Pallet::poke_unused_validation_code`]."]
                },
                {
                  "name": "include_pvf_check_statement",
                  "fields": [
                    {
                      "name": "stmt",
                      "typeId": 328,
                      "typeName": "PvfCheckStatement",
                      "docs": []
                    },
                    {
                      "name": "signature",
                      "typeId": 301,
                      "typeName": "ValidatorSignature",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": ["See [`Pallet::include_pvf_check_statement`]."]
                },
                {
                  "name": "force_set_most_recent_context",
                  "fields": [
                    {
                      "name": "para",
                      "typeId": 134,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "context",
                      "typeId": 4,
                      "typeName": "BlockNumberFor<T>",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": ["See [`Pallet::force_set_most_recent_context`]."]
                }
              ]
            }
          },
          "docs": ["Contains a variant per dispatchable extrinsic that this pallet has."]
        },
        {
          "id": 328,
          "path": ["polkadot_primitives", "v5", "PvfCheckStatement"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "accept",
                  "typeId": 44,
                  "typeName": "bool",
                  "docs": []
                },
                {
                  "name": "subject",
                  "typeId": 308,
                  "typeName": "ValidationCodeHash",
                  "docs": []
                },
                {
                  "name": "session_index",
                  "typeId": 4,
                  "typeName": "SessionIndex",
                  "docs": []
                },
                {
                  "name": "validator_index",
                  "typeId": 300,
                  "typeName": "ValidatorIndex",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 329,
          "path": ["polkadot_runtime_parachains", "initializer", "pallet", "Call"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "force_approve",
                  "fields": [
                    {
                      "name": "up_to",
                      "typeId": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["See [`Pallet::force_approve`]."]
                }
              ]
            }
          },
          "docs": ["Contains a variant per dispatchable extrinsic that this pallet has."]
        },
        {
          "id": 330,
          "path": ["polkadot_runtime_parachains", "hrmp", "pallet", "Call"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "hrmp_init_open_channel",
                  "fields": [
                    {
                      "name": "recipient",
                      "typeId": 134,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "proposed_max_capacity",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "proposed_max_message_size",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["See [`Pallet::hrmp_init_open_channel`]."]
                },
                {
                  "name": "hrmp_accept_open_channel",
                  "fields": [
                    {
                      "name": "sender",
                      "typeId": 134,
                      "typeName": "ParaId",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": ["See [`Pallet::hrmp_accept_open_channel`]."]
                },
                {
                  "name": "hrmp_close_channel",
                  "fields": [
                    {
                      "name": "channel_id",
                      "typeId": 331,
                      "typeName": "HrmpChannelId",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": ["See [`Pallet::hrmp_close_channel`]."]
                },
                {
                  "name": "force_clean_hrmp",
                  "fields": [
                    {
                      "name": "para",
                      "typeId": 134,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "inbound",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "outbound",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": ["See [`Pallet::force_clean_hrmp`]."]
                },
                {
                  "name": "force_process_hrmp_open",
                  "fields": [
                    {
                      "name": "channels",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": ["See [`Pallet::force_process_hrmp_open`]."]
                },
                {
                  "name": "force_process_hrmp_close",
                  "fields": [
                    {
                      "name": "channels",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": ["See [`Pallet::force_process_hrmp_close`]."]
                },
                {
                  "name": "hrmp_cancel_open_request",
                  "fields": [
                    {
                      "name": "channel_id",
                      "typeId": 331,
                      "typeName": "HrmpChannelId",
                      "docs": []
                    },
                    {
                      "name": "open_requests",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": ["See [`Pallet::hrmp_cancel_open_request`]."]
                },
                {
                  "name": "force_open_hrmp_channel",
                  "fields": [
                    {
                      "name": "sender",
                      "typeId": 134,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "recipient",
                      "typeId": 134,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "max_capacity",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "max_message_size",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": ["See [`Pallet::force_open_hrmp_channel`]."]
                }
              ]
            }
          },
          "docs": ["Contains a variant per dispatchable extrinsic that this pallet has."]
        },
        {
          "id": 331,
          "path": ["polkadot_parachain_primitives", "primitives", "HrmpChannelId"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "sender",
                  "typeId": 134,
                  "typeName": "Id",
                  "docs": []
                },
                {
                  "name": "recipient",
                  "typeId": 134,
                  "typeName": "Id",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 332,
          "path": ["polkadot_runtime_parachains", "disputes", "pallet", "Call"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "force_unfreeze",
                  "fields": [],
                  "index": 0,
                  "docs": ["See [`Pallet::force_unfreeze`]."]
                }
              ]
            }
          },
          "docs": ["Contains a variant per dispatchable extrinsic that this pallet has."]
        },
        {
          "id": 333,
          "path": ["polkadot_runtime_parachains", "disputes", "slashing", "pallet", "Call"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "report_dispute_lost_unsigned",
                  "fields": [
                    {
                      "name": "dispute_proof",
                      "typeId": 334,
                      "typeName": "Box<DisputeProof>",
                      "docs": []
                    },
                    {
                      "name": "key_owner_proof",
                      "typeId": 82,
                      "typeName": "T::KeyOwnerProof",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["See [`Pallet::report_dispute_lost_unsigned`]."]
                }
              ]
            }
          },
          "docs": ["Contains a variant per dispatchable extrinsic that this pallet has."]
        },
        {
          "id": 334,
          "path": ["polkadot_primitives", "v5", "slashing", "DisputeProof"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "time_slot",
                  "typeId": 335,
                  "typeName": "DisputesTimeSlot",
                  "docs": []
                },
                {
                  "name": "kind",
                  "typeId": 336,
                  "typeName": "SlashingOffenceKind",
                  "docs": []
                },
                {
                  "name": "validator_index",
                  "typeId": 300,
                  "typeName": "ValidatorIndex",
                  "docs": []
                },
                {
                  "name": "validator_id",
                  "typeId": 104,
                  "typeName": "ValidatorId",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 335,
          "path": ["polkadot_primitives", "v5", "slashing", "DisputesTimeSlot"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "session_index",
                  "typeId": 4,
                  "typeName": "SessionIndex",
                  "docs": []
                },
                {
                  "name": "candidate_hash",
                  "typeId": 321,
                  "typeName": "CandidateHash",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 336,
          "path": ["polkadot_primitives", "v5", "slashing", "SlashingOffenceKind"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "ForInvalid",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "AgainstValid",
                  "fields": [],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 337,
          "path": ["polkadot_runtime_common", "paras_registrar", "pallet", "Call"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "register",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 134,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "genesis_head",
                      "typeId": 316,
                      "typeName": "HeadData",
                      "docs": []
                    },
                    {
                      "name": "validation_code",
                      "typeId": 315,
                      "typeName": "ValidationCode",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["See [`Pallet::register`]."]
                },
                {
                  "name": "force_register",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "deposit",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "id",
                      "typeId": 134,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "genesis_head",
                      "typeId": 316,
                      "typeName": "HeadData",
                      "docs": []
                    },
                    {
                      "name": "validation_code",
                      "typeId": 315,
                      "typeName": "ValidationCode",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": ["See [`Pallet::force_register`]."]
                },
                {
                  "name": "deregister",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 134,
                      "typeName": "ParaId",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": ["See [`Pallet::deregister`]."]
                },
                {
                  "name": "swap",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 134,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "other",
                      "typeId": 134,
                      "typeName": "ParaId",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": ["See [`Pallet::swap`]."]
                },
                {
                  "name": "remove_lock",
                  "fields": [
                    {
                      "name": "para",
                      "typeId": 134,
                      "typeName": "ParaId",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": ["See [`Pallet::remove_lock`]."]
                },
                {
                  "name": "reserve",
                  "fields": [],
                  "index": 5,
                  "docs": ["See [`Pallet::reserve`]."]
                },
                {
                  "name": "add_lock",
                  "fields": [
                    {
                      "name": "para",
                      "typeId": 134,
                      "typeName": "ParaId",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": ["See [`Pallet::add_lock`]."]
                },
                {
                  "name": "schedule_code_upgrade",
                  "fields": [
                    {
                      "name": "para",
                      "typeId": 134,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "new_code",
                      "typeId": 315,
                      "typeName": "ValidationCode",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": ["See [`Pallet::schedule_code_upgrade`]."]
                },
                {
                  "name": "set_current_head",
                  "fields": [
                    {
                      "name": "para",
                      "typeId": 134,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "new_head",
                      "typeId": 316,
                      "typeName": "HeadData",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": ["See [`Pallet::set_current_head`]."]
                }
              ]
            }
          },
          "docs": ["Contains a variant per dispatchable extrinsic that this pallet has."]
        },
        {
          "id": 338,
          "path": ["polkadot_runtime_common", "slots", "pallet", "Call"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "force_lease",
                  "fields": [
                    {
                      "name": "para",
                      "typeId": 134,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "leaser",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "period_begin",
                      "typeId": 4,
                      "typeName": "LeasePeriodOf<T>",
                      "docs": []
                    },
                    {
                      "name": "period_count",
                      "typeId": 4,
                      "typeName": "LeasePeriodOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["See [`Pallet::force_lease`]."]
                },
                {
                  "name": "clear_all_leases",
                  "fields": [
                    {
                      "name": "para",
                      "typeId": 134,
                      "typeName": "ParaId",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": ["See [`Pallet::clear_all_leases`]."]
                },
                {
                  "name": "trigger_onboard",
                  "fields": [
                    {
                      "name": "para",
                      "typeId": 134,
                      "typeName": "ParaId",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": ["See [`Pallet::trigger_onboard`]."]
                }
              ]
            }
          },
          "docs": ["Contains a variant per dispatchable extrinsic that this pallet has."]
        },
        {
          "id": 339,
          "path": ["polkadot_runtime_common", "auctions", "pallet", "Call"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "new_auction",
                  "fields": [
                    {
                      "name": "duration",
                      "typeId": 79,
                      "typeName": "BlockNumberFor<T>",
                      "docs": []
                    },
                    {
                      "name": "lease_period_index",
                      "typeId": 79,
                      "typeName": "LeasePeriodOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["See [`Pallet::new_auction`]."]
                },
                {
                  "name": "bid",
                  "fields": [
                    {
                      "name": "para",
                      "typeId": 340,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "auction_index",
                      "typeId": 79,
                      "typeName": "AuctionIndex",
                      "docs": []
                    },
                    {
                      "name": "first_slot",
                      "typeId": 79,
                      "typeName": "LeasePeriodOf<T>",
                      "docs": []
                    },
                    {
                      "name": "last_slot",
                      "typeId": 79,
                      "typeName": "LeasePeriodOf<T>",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 60,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": ["See [`Pallet::bid`]."]
                },
                {
                  "name": "cancel_auction",
                  "fields": [],
                  "index": 2,
                  "docs": ["See [`Pallet::cancel_auction`]."]
                }
              ]
            }
          },
          "docs": ["Contains a variant per dispatchable extrinsic that this pallet has."]
        },
        {
          "id": 340,
          "path": [],
          "params": [],
          "type": {
            "tag": "Compact",
            "value": {
              "typeParam": 134
            }
          },
          "docs": []
        },
        {
          "id": 341,
          "path": ["polkadot_runtime_common", "crowdloan", "pallet", "Call"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "create",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 340,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "cap",
                      "typeId": 60,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "first_period",
                      "typeId": 79,
                      "typeName": "LeasePeriodOf<T>",
                      "docs": []
                    },
                    {
                      "name": "last_period",
                      "typeId": 79,
                      "typeName": "LeasePeriodOf<T>",
                      "docs": []
                    },
                    {
                      "name": "end",
                      "typeId": 79,
                      "typeName": "BlockNumberFor<T>",
                      "docs": []
                    },
                    {
                      "name": "verifier",
                      "typeId": 342,
                      "typeName": "Option<MultiSigner>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["See [`Pallet::create`]."]
                },
                {
                  "name": "contribute",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 340,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "typeId": 60,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "signature",
                      "typeId": 346,
                      "typeName": "Option<MultiSignature>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": ["See [`Pallet::contribute`]."]
                },
                {
                  "name": "withdraw",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "typeId": 340,
                      "typeName": "ParaId",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": ["See [`Pallet::withdraw`]."]
                },
                {
                  "name": "refund",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 340,
                      "typeName": "ParaId",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": ["See [`Pallet::refund`]."]
                },
                {
                  "name": "dissolve",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 340,
                      "typeName": "ParaId",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": ["See [`Pallet::dissolve`]."]
                },
                {
                  "name": "edit",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 340,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "cap",
                      "typeId": 60,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "first_period",
                      "typeId": 79,
                      "typeName": "LeasePeriodOf<T>",
                      "docs": []
                    },
                    {
                      "name": "last_period",
                      "typeId": 79,
                      "typeName": "LeasePeriodOf<T>",
                      "docs": []
                    },
                    {
                      "name": "end",
                      "typeId": 79,
                      "typeName": "BlockNumberFor<T>",
                      "docs": []
                    },
                    {
                      "name": "verifier",
                      "typeId": 342,
                      "typeName": "Option<MultiSigner>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": ["See [`Pallet::edit`]."]
                },
                {
                  "name": "add_memo",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 134,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "memo",
                      "typeId": 13,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": ["See [`Pallet::add_memo`]."]
                },
                {
                  "name": "poke",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 134,
                      "typeName": "ParaId",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": ["See [`Pallet::poke`]."]
                },
                {
                  "name": "contribute_all",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 340,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "signature",
                      "typeId": 346,
                      "typeName": "Option<MultiSignature>",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": ["See [`Pallet::contribute_all`]."]
                }
              ]
            }
          },
          "docs": ["Contains a variant per dispatchable extrinsic that this pallet has."]
        },
        {
          "id": 342,
          "path": ["Option"],
          "params": [
            {
              "name": "T",
              "typeId": 343
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 343,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 343,
          "path": ["sp_runtime", "MultiSigner"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Ed25519",
                  "fields": [
                    {
                      "typeId": 53,
                      "typeName": "ed25519::Public",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Sr25519",
                  "fields": [
                    {
                      "typeId": 56,
                      "typeName": "sr25519::Public",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Ecdsa",
                  "fields": [
                    {
                      "typeId": 344,
                      "typeName": "ecdsa::Public",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 344,
          "path": ["sp_core", "ecdsa", "Public"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 345,
                  "typeName": "[u8; 33]",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 345,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 33,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 346,
          "path": ["Option"],
          "params": [
            {
              "name": "T",
              "typeId": 347
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 347,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 347,
          "path": ["sp_runtime", "MultiSignature"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Ed25519",
                  "fields": [
                    {
                      "typeId": 113,
                      "typeName": "ed25519::Signature",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Sr25519",
                  "fields": [
                    {
                      "typeId": 122,
                      "typeName": "sr25519::Signature",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Ecdsa",
                  "fields": [
                    {
                      "typeId": 348,
                      "typeName": "ecdsa::Signature",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 348,
          "path": ["sp_core", "ecdsa", "Signature"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 149,
                  "typeName": "[u8; 65]",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 349,
          "path": ["pallet_xcm", "pallet", "Call"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "send",
                  "fields": [
                    {
                      "name": "dest",
                      "typeId": 350,
                      "typeName": "Box<VersionedMultiLocation>",
                      "docs": []
                    },
                    {
                      "name": "message",
                      "typeId": 358,
                      "typeName": "Box<VersionedXcm<()>>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["See [`Pallet::send`]."]
                },
                {
                  "name": "teleport_assets",
                  "fields": [
                    {
                      "name": "dest",
                      "typeId": 350,
                      "typeName": "Box<VersionedMultiLocation>",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "typeId": 350,
                      "typeName": "Box<VersionedMultiLocation>",
                      "docs": []
                    },
                    {
                      "name": "assets",
                      "typeId": 403,
                      "typeName": "Box<VersionedMultiAssets>",
                      "docs": []
                    },
                    {
                      "name": "fee_asset_item",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": ["See [`Pallet::teleport_assets`]."]
                },
                {
                  "name": "reserve_transfer_assets",
                  "fields": [
                    {
                      "name": "dest",
                      "typeId": 350,
                      "typeName": "Box<VersionedMultiLocation>",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "typeId": 350,
                      "typeName": "Box<VersionedMultiLocation>",
                      "docs": []
                    },
                    {
                      "name": "assets",
                      "typeId": 403,
                      "typeName": "Box<VersionedMultiAssets>",
                      "docs": []
                    },
                    {
                      "name": "fee_asset_item",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": ["See [`Pallet::reserve_transfer_assets`]."]
                },
                {
                  "name": "execute",
                  "fields": [
                    {
                      "name": "message",
                      "typeId": 404,
                      "typeName": "Box<VersionedXcm<<T as SysConfig>::RuntimeCall>>",
                      "docs": []
                    },
                    {
                      "name": "max_weight",
                      "typeId": 9,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": ["See [`Pallet::execute`]."]
                },
                {
                  "name": "force_xcm_version",
                  "fields": [
                    {
                      "name": "location",
                      "typeId": 136,
                      "typeName": "Box<MultiLocation>",
                      "docs": []
                    },
                    {
                      "name": "version",
                      "typeId": 4,
                      "typeName": "XcmVersion",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": ["See [`Pallet::force_xcm_version`]."]
                },
                {
                  "name": "force_default_xcm_version",
                  "fields": [
                    {
                      "name": "maybe_xcm_version",
                      "typeId": 270,
                      "typeName": "Option<XcmVersion>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": ["See [`Pallet::force_default_xcm_version`]."]
                },
                {
                  "name": "force_subscribe_version_notify",
                  "fields": [
                    {
                      "name": "location",
                      "typeId": 350,
                      "typeName": "Box<VersionedMultiLocation>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": ["See [`Pallet::force_subscribe_version_notify`]."]
                },
                {
                  "name": "force_unsubscribe_version_notify",
                  "fields": [
                    {
                      "name": "location",
                      "typeId": 350,
                      "typeName": "Box<VersionedMultiLocation>",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": ["See [`Pallet::force_unsubscribe_version_notify`]."]
                },
                {
                  "name": "limited_reserve_transfer_assets",
                  "fields": [
                    {
                      "name": "dest",
                      "typeId": 350,
                      "typeName": "Box<VersionedMultiLocation>",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "typeId": 350,
                      "typeName": "Box<VersionedMultiLocation>",
                      "docs": []
                    },
                    {
                      "name": "assets",
                      "typeId": 403,
                      "typeName": "Box<VersionedMultiAssets>",
                      "docs": []
                    },
                    {
                      "name": "fee_asset_item",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "weight_limit",
                      "typeId": 402,
                      "typeName": "WeightLimit",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": ["See [`Pallet::limited_reserve_transfer_assets`]."]
                },
                {
                  "name": "limited_teleport_assets",
                  "fields": [
                    {
                      "name": "dest",
                      "typeId": 350,
                      "typeName": "Box<VersionedMultiLocation>",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "typeId": 350,
                      "typeName": "Box<VersionedMultiLocation>",
                      "docs": []
                    },
                    {
                      "name": "assets",
                      "typeId": 403,
                      "typeName": "Box<VersionedMultiAssets>",
                      "docs": []
                    },
                    {
                      "name": "fee_asset_item",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "weight_limit",
                      "typeId": 402,
                      "typeName": "WeightLimit",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": ["See [`Pallet::limited_teleport_assets`]."]
                },
                {
                  "name": "force_suspension",
                  "fields": [
                    {
                      "name": "suspended",
                      "typeId": 44,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 10,
                  "docs": ["See [`Pallet::force_suspension`]."]
                }
              ]
            }
          },
          "docs": ["Contains a variant per dispatchable extrinsic that this pallet has."]
        },
        {
          "id": 350,
          "path": ["xcm", "VersionedMultiLocation"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "V2",
                  "fields": [
                    {
                      "typeId": 351,
                      "typeName": "v2::MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "V3",
                  "fields": [
                    {
                      "typeId": 136,
                      "typeName": "v3::MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 351,
          "path": ["xcm", "v2", "multilocation", "MultiLocation"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "parents",
                  "typeId": 2,
                  "typeName": "u8",
                  "docs": []
                },
                {
                  "name": "interior",
                  "typeId": 352,
                  "typeName": "Junctions",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 352,
          "path": ["xcm", "v2", "multilocation", "Junctions"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Here",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "X1",
                  "fields": [
                    {
                      "typeId": 353,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "X2",
                  "fields": [
                    {
                      "typeId": 353,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 353,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "X3",
                  "fields": [
                    {
                      "typeId": 353,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 353,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 353,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "X4",
                  "fields": [
                    {
                      "typeId": 353,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 353,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 353,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 353,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "X5",
                  "fields": [
                    {
                      "typeId": 353,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 353,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 353,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 353,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 353,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "X6",
                  "fields": [
                    {
                      "typeId": 353,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 353,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 353,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 353,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 353,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 353,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "X7",
                  "fields": [
                    {
                      "typeId": 353,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 353,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 353,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 353,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 353,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 353,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 353,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "X8",
                  "fields": [
                    {
                      "typeId": 353,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 353,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 353,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 353,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 353,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 353,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 353,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 353,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 353,
          "path": ["xcm", "v2", "junction", "Junction"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Parachain",
                  "fields": [
                    {
                      "typeId": 79,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "AccountId32",
                  "fields": [
                    {
                      "name": "network",
                      "typeId": 354,
                      "typeName": "NetworkId",
                      "docs": []
                    },
                    {
                      "name": "id",
                      "typeId": 1,
                      "typeName": "[u8; 32]",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "AccountIndex64",
                  "fields": [
                    {
                      "name": "network",
                      "typeId": 354,
                      "typeName": "NetworkId",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "typeId": 10,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "AccountKey20",
                  "fields": [
                    {
                      "name": "network",
                      "typeId": 354,
                      "typeName": "NetworkId",
                      "docs": []
                    },
                    {
                      "name": "key",
                      "typeId": 90,
                      "typeName": "[u8; 20]",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "PalletInstance",
                  "fields": [
                    {
                      "typeId": 2,
                      "typeName": "u8",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "GeneralIndex",
                  "fields": [
                    {
                      "typeId": 60,
                      "typeName": "u128",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "GeneralKey",
                  "fields": [
                    {
                      "typeId": 355,
                      "typeName": "WeakBoundedVec<u8, ConstU32<32>>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "OnlyChild",
                  "fields": [],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "Plurality",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 356,
                      "typeName": "BodyId",
                      "docs": []
                    },
                    {
                      "name": "part",
                      "typeId": 357,
                      "typeName": "BodyPart",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 354,
          "path": ["xcm", "v2", "NetworkId"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Any",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Named",
                  "fields": [
                    {
                      "typeId": 355,
                      "typeName": "WeakBoundedVec<u8, ConstU32<32>>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Polkadot",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Kusama",
                  "fields": [],
                  "index": 3,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 355,
          "path": ["bounded_collections", "weak_bounded_vec", "WeakBoundedVec"],
          "params": [
            {
              "name": "T",
              "typeId": 2
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 13,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 356,
          "path": ["xcm", "v2", "BodyId"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Unit",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Named",
                  "fields": [
                    {
                      "typeId": 355,
                      "typeName": "WeakBoundedVec<u8, ConstU32<32>>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Index",
                  "fields": [
                    {
                      "typeId": 79,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Executive",
                  "fields": [],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "Technical",
                  "fields": [],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "Legislative",
                  "fields": [],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "Judicial",
                  "fields": [],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "Defense",
                  "fields": [],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "Administration",
                  "fields": [],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "Treasury",
                  "fields": [],
                  "index": 9,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 357,
          "path": ["xcm", "v2", "BodyPart"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Voice",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Members",
                  "fields": [
                    {
                      "name": "count",
                      "typeId": 79,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Fraction",
                  "fields": [
                    {
                      "name": "nom",
                      "typeId": 79,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "denom",
                      "typeId": 79,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "AtLeastProportion",
                  "fields": [
                    {
                      "name": "nom",
                      "typeId": 79,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "denom",
                      "typeId": 79,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "MoreThanProportion",
                  "fields": [
                    {
                      "name": "nom",
                      "typeId": 79,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "denom",
                      "typeId": 79,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 358,
          "path": ["xcm", "VersionedXcm"],
          "params": [
            {
              "name": "RuntimeCall"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "V2",
                  "fields": [
                    {
                      "typeId": 359,
                      "typeName": "v2::Xcm<RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "V3",
                  "fields": [
                    {
                      "typeId": 378,
                      "typeName": "v3::Xcm<RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 359,
          "path": ["xcm", "v2", "Xcm"],
          "params": [
            {
              "name": "RuntimeCall"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 360,
                  "typeName": "Vec<Instruction<RuntimeCall>>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 360,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 361
            }
          },
          "docs": []
        },
        {
          "id": 361,
          "path": ["xcm", "v2", "Instruction"],
          "params": [
            {
              "name": "RuntimeCall"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "WithdrawAsset",
                  "fields": [
                    {
                      "typeId": 362,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "ReserveAssetDeposited",
                  "fields": [
                    {
                      "typeId": 362,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "ReceiveTeleportedAsset",
                  "fields": [
                    {
                      "typeId": 362,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "QueryResponse",
                  "fields": [
                    {
                      "name": "query_id",
                      "typeId": 10,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "name": "response",
                      "typeId": 368,
                      "typeName": "Response",
                      "docs": []
                    },
                    {
                      "name": "max_weight",
                      "typeId": 10,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "TransferAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "typeId": 362,
                      "typeName": "MultiAssets",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "typeId": 351,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "TransferReserveAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "typeId": 362,
                      "typeName": "MultiAssets",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "typeId": 351,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "xcm",
                      "typeId": 359,
                      "typeName": "Xcm<()>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "Transact",
                  "fields": [
                    {
                      "name": "origin_type",
                      "typeId": 372,
                      "typeName": "OriginKind",
                      "docs": []
                    },
                    {
                      "name": "require_weight_at_most",
                      "typeId": 10,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "typeId": 373,
                      "typeName": "DoubleEncoded<RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "HrmpNewChannelOpenRequest",
                  "fields": [
                    {
                      "name": "sender",
                      "typeId": 79,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "max_message_size",
                      "typeId": 79,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "max_capacity",
                      "typeId": 79,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "HrmpChannelAccepted",
                  "fields": [
                    {
                      "name": "recipient",
                      "typeId": 79,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "HrmpChannelClosing",
                  "fields": [
                    {
                      "name": "initiator",
                      "typeId": 79,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "sender",
                      "typeId": 79,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "recipient",
                      "typeId": 79,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": []
                },
                {
                  "name": "ClearOrigin",
                  "fields": [],
                  "index": 10,
                  "docs": []
                },
                {
                  "name": "DescendOrigin",
                  "fields": [
                    {
                      "typeId": 352,
                      "typeName": "InteriorMultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": []
                },
                {
                  "name": "ReportError",
                  "fields": [
                    {
                      "name": "query_id",
                      "typeId": 10,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "typeId": 351,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "max_response_weight",
                      "typeId": 10,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 12,
                  "docs": []
                },
                {
                  "name": "DepositAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "typeId": 374,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "max_assets",
                      "typeId": 79,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "typeId": 351,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 13,
                  "docs": []
                },
                {
                  "name": "DepositReserveAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "typeId": 374,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "max_assets",
                      "typeId": 79,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "typeId": 351,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "xcm",
                      "typeId": 359,
                      "typeName": "Xcm<()>",
                      "docs": []
                    }
                  ],
                  "index": 14,
                  "docs": []
                },
                {
                  "name": "ExchangeAsset",
                  "fields": [
                    {
                      "name": "give",
                      "typeId": 374,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "receive",
                      "typeId": 362,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 15,
                  "docs": []
                },
                {
                  "name": "InitiateReserveWithdraw",
                  "fields": [
                    {
                      "name": "assets",
                      "typeId": 374,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "reserve",
                      "typeId": 351,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "xcm",
                      "typeId": 359,
                      "typeName": "Xcm<()>",
                      "docs": []
                    }
                  ],
                  "index": 16,
                  "docs": []
                },
                {
                  "name": "InitiateTeleport",
                  "fields": [
                    {
                      "name": "assets",
                      "typeId": 374,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "typeId": 351,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "xcm",
                      "typeId": 359,
                      "typeName": "Xcm<()>",
                      "docs": []
                    }
                  ],
                  "index": 17,
                  "docs": []
                },
                {
                  "name": "QueryHolding",
                  "fields": [
                    {
                      "name": "query_id",
                      "typeId": 10,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "typeId": 351,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "assets",
                      "typeId": 374,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "max_response_weight",
                      "typeId": 10,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 18,
                  "docs": []
                },
                {
                  "name": "BuyExecution",
                  "fields": [
                    {
                      "name": "fees",
                      "typeId": 364,
                      "typeName": "MultiAsset",
                      "docs": []
                    },
                    {
                      "name": "weight_limit",
                      "typeId": 377,
                      "typeName": "WeightLimit",
                      "docs": []
                    }
                  ],
                  "index": 19,
                  "docs": []
                },
                {
                  "name": "RefundSurplus",
                  "fields": [],
                  "index": 20,
                  "docs": []
                },
                {
                  "name": "SetErrorHandler",
                  "fields": [
                    {
                      "typeId": 359,
                      "typeName": "Xcm<RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 21,
                  "docs": []
                },
                {
                  "name": "SetAppendix",
                  "fields": [
                    {
                      "typeId": 359,
                      "typeName": "Xcm<RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 22,
                  "docs": []
                },
                {
                  "name": "ClearError",
                  "fields": [],
                  "index": 23,
                  "docs": []
                },
                {
                  "name": "ClaimAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "typeId": 362,
                      "typeName": "MultiAssets",
                      "docs": []
                    },
                    {
                      "name": "ticket",
                      "typeId": 351,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 24,
                  "docs": []
                },
                {
                  "name": "Trap",
                  "fields": [
                    {
                      "typeId": 10,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 25,
                  "docs": []
                },
                {
                  "name": "SubscribeVersion",
                  "fields": [
                    {
                      "name": "query_id",
                      "typeId": 10,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "name": "max_response_weight",
                      "typeId": 10,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 26,
                  "docs": []
                },
                {
                  "name": "UnsubscribeVersion",
                  "fields": [],
                  "index": 27,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 362,
          "path": ["xcm", "v2", "multiasset", "MultiAssets"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 363,
                  "typeName": "Vec<MultiAsset>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 363,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 364
            }
          },
          "docs": []
        },
        {
          "id": 364,
          "path": ["xcm", "v2", "multiasset", "MultiAsset"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "id",
                  "typeId": 365,
                  "typeName": "AssetId",
                  "docs": []
                },
                {
                  "name": "fun",
                  "typeId": 366,
                  "typeName": "Fungibility",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 365,
          "path": ["xcm", "v2", "multiasset", "AssetId"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Concrete",
                  "fields": [
                    {
                      "typeId": 351,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Abstract",
                  "fields": [
                    {
                      "typeId": 13,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 366,
          "path": ["xcm", "v2", "multiasset", "Fungibility"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Fungible",
                  "fields": [
                    {
                      "typeId": 60,
                      "typeName": "u128",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "NonFungible",
                  "fields": [
                    {
                      "typeId": 367,
                      "typeName": "AssetInstance",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 367,
          "path": ["xcm", "v2", "multiasset", "AssetInstance"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Undefined",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Index",
                  "fields": [
                    {
                      "typeId": 60,
                      "typeName": "u128",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Array4",
                  "fields": [
                    {
                      "typeId": 17,
                      "typeName": "[u8; 4]",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Array8",
                  "fields": [
                    {
                      "typeId": 172,
                      "typeName": "[u8; 8]",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "Array16",
                  "fields": [
                    {
                      "typeId": 47,
                      "typeName": "[u8; 16]",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "Array32",
                  "fields": [
                    {
                      "typeId": 1,
                      "typeName": "[u8; 32]",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "Blob",
                  "fields": [
                    {
                      "typeId": 13,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 368,
          "path": ["xcm", "v2", "Response"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Null",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Assets",
                  "fields": [
                    {
                      "typeId": 362,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "ExecutionResult",
                  "fields": [
                    {
                      "typeId": 369,
                      "typeName": "Option<(u32, Error)>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Version",
                  "fields": [
                    {
                      "typeId": 4,
                      "typeName": "super::Version",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 369,
          "path": ["Option"],
          "params": [
            {
              "name": "T",
              "typeId": 370
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 370,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 370,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [4, 371]
            }
          },
          "docs": []
        },
        {
          "id": 371,
          "path": ["xcm", "v2", "traits", "Error"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Overflow",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Unimplemented",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "UntrustedReserveLocation",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "UntrustedTeleportLocation",
                  "fields": [],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "MultiLocationFull",
                  "fields": [],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "MultiLocationNotInvertible",
                  "fields": [],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "BadOrigin",
                  "fields": [],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "InvalidLocation",
                  "fields": [],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "AssetNotFound",
                  "fields": [],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "FailedToTransactAsset",
                  "fields": [],
                  "index": 9,
                  "docs": []
                },
                {
                  "name": "NotWithdrawable",
                  "fields": [],
                  "index": 10,
                  "docs": []
                },
                {
                  "name": "LocationCannotHold",
                  "fields": [],
                  "index": 11,
                  "docs": []
                },
                {
                  "name": "ExceedsMaxMessageSize",
                  "fields": [],
                  "index": 12,
                  "docs": []
                },
                {
                  "name": "DestinationUnsupported",
                  "fields": [],
                  "index": 13,
                  "docs": []
                },
                {
                  "name": "Transport",
                  "fields": [],
                  "index": 14,
                  "docs": []
                },
                {
                  "name": "Unroutable",
                  "fields": [],
                  "index": 15,
                  "docs": []
                },
                {
                  "name": "UnknownClaim",
                  "fields": [],
                  "index": 16,
                  "docs": []
                },
                {
                  "name": "FailedToDecode",
                  "fields": [],
                  "index": 17,
                  "docs": []
                },
                {
                  "name": "MaxWeightInvalid",
                  "fields": [],
                  "index": 18,
                  "docs": []
                },
                {
                  "name": "NotHoldingFees",
                  "fields": [],
                  "index": 19,
                  "docs": []
                },
                {
                  "name": "TooExpensive",
                  "fields": [],
                  "index": 20,
                  "docs": []
                },
                {
                  "name": "Trap",
                  "fields": [
                    {
                      "typeId": 11,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 21,
                  "docs": []
                },
                {
                  "name": "UnhandledXcmVersion",
                  "fields": [],
                  "index": 22,
                  "docs": []
                },
                {
                  "name": "WeightLimitReached",
                  "fields": [
                    {
                      "typeId": 11,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ],
                  "index": 23,
                  "docs": []
                },
                {
                  "name": "Barrier",
                  "fields": [],
                  "index": 24,
                  "docs": []
                },
                {
                  "name": "WeightNotComputable",
                  "fields": [],
                  "index": 25,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 372,
          "path": ["xcm", "v2", "OriginKind"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Native",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "SovereignAccount",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Superuser",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Xcm",
                  "fields": [],
                  "index": 3,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 373,
          "path": ["xcm", "double_encoded", "DoubleEncoded"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "encoded",
                  "typeId": 13,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 374,
          "path": ["xcm", "v2", "multiasset", "MultiAssetFilter"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Definite",
                  "fields": [
                    {
                      "typeId": 362,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Wild",
                  "fields": [
                    {
                      "typeId": 375,
                      "typeName": "WildMultiAsset",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 375,
          "path": ["xcm", "v2", "multiasset", "WildMultiAsset"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "All",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "AllOf",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 365,
                      "typeName": "AssetId",
                      "docs": []
                    },
                    {
                      "name": "fun",
                      "typeId": 376,
                      "typeName": "WildFungibility",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 376,
          "path": ["xcm", "v2", "multiasset", "WildFungibility"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Fungible",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "NonFungible",
                  "fields": [],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 377,
          "path": ["xcm", "v2", "WeightLimit"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Unlimited",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Limited",
                  "fields": [
                    {
                      "typeId": 10,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 378,
          "path": ["xcm", "v3", "Xcm"],
          "params": [
            {
              "name": "Call"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 379,
                  "typeName": "Vec<Instruction<Call>>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 379,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 380
            }
          },
          "docs": []
        },
        {
          "id": 380,
          "path": ["xcm", "v3", "Instruction"],
          "params": [
            {
              "name": "Call"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "WithdrawAsset",
                  "fields": [
                    {
                      "typeId": 381,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "ReserveAssetDeposited",
                  "fields": [
                    {
                      "typeId": 381,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "ReceiveTeleportedAsset",
                  "fields": [
                    {
                      "typeId": 381,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "QueryResponse",
                  "fields": [
                    {
                      "name": "query_id",
                      "typeId": 10,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "name": "response",
                      "typeId": 387,
                      "typeName": "Response",
                      "docs": []
                    },
                    {
                      "name": "max_weight",
                      "typeId": 9,
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "name": "querier",
                      "typeId": 397,
                      "typeName": "Option<MultiLocation>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "TransferAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "typeId": 381,
                      "typeName": "MultiAssets",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "typeId": 136,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "TransferReserveAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "typeId": 381,
                      "typeName": "MultiAssets",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "typeId": 136,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "xcm",
                      "typeId": 378,
                      "typeName": "Xcm<()>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "Transact",
                  "fields": [
                    {
                      "name": "origin_kind",
                      "typeId": 372,
                      "typeName": "OriginKind",
                      "docs": []
                    },
                    {
                      "name": "require_weight_at_most",
                      "typeId": 9,
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "typeId": 373,
                      "typeName": "DoubleEncoded<Call>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "HrmpNewChannelOpenRequest",
                  "fields": [
                    {
                      "name": "sender",
                      "typeId": 79,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "max_message_size",
                      "typeId": 79,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "max_capacity",
                      "typeId": 79,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "HrmpChannelAccepted",
                  "fields": [
                    {
                      "name": "recipient",
                      "typeId": 79,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "HrmpChannelClosing",
                  "fields": [
                    {
                      "name": "initiator",
                      "typeId": 79,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "sender",
                      "typeId": 79,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "recipient",
                      "typeId": 79,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": []
                },
                {
                  "name": "ClearOrigin",
                  "fields": [],
                  "index": 10,
                  "docs": []
                },
                {
                  "name": "DescendOrigin",
                  "fields": [
                    {
                      "typeId": 137,
                      "typeName": "InteriorMultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": []
                },
                {
                  "name": "ReportError",
                  "fields": [
                    {
                      "typeId": 398,
                      "typeName": "QueryResponseInfo",
                      "docs": []
                    }
                  ],
                  "index": 12,
                  "docs": []
                },
                {
                  "name": "DepositAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "typeId": 399,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "typeId": 136,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 13,
                  "docs": []
                },
                {
                  "name": "DepositReserveAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "typeId": 399,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "typeId": 136,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "xcm",
                      "typeId": 378,
                      "typeName": "Xcm<()>",
                      "docs": []
                    }
                  ],
                  "index": 14,
                  "docs": []
                },
                {
                  "name": "ExchangeAsset",
                  "fields": [
                    {
                      "name": "give",
                      "typeId": 399,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "want",
                      "typeId": 381,
                      "typeName": "MultiAssets",
                      "docs": []
                    },
                    {
                      "name": "maximal",
                      "typeId": 44,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 15,
                  "docs": []
                },
                {
                  "name": "InitiateReserveWithdraw",
                  "fields": [
                    {
                      "name": "assets",
                      "typeId": 399,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "reserve",
                      "typeId": 136,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "xcm",
                      "typeId": 378,
                      "typeName": "Xcm<()>",
                      "docs": []
                    }
                  ],
                  "index": 16,
                  "docs": []
                },
                {
                  "name": "InitiateTeleport",
                  "fields": [
                    {
                      "name": "assets",
                      "typeId": 399,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "typeId": 136,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "xcm",
                      "typeId": 378,
                      "typeName": "Xcm<()>",
                      "docs": []
                    }
                  ],
                  "index": 17,
                  "docs": []
                },
                {
                  "name": "ReportHolding",
                  "fields": [
                    {
                      "name": "response_info",
                      "typeId": 398,
                      "typeName": "QueryResponseInfo",
                      "docs": []
                    },
                    {
                      "name": "assets",
                      "typeId": 399,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    }
                  ],
                  "index": 18,
                  "docs": []
                },
                {
                  "name": "BuyExecution",
                  "fields": [
                    {
                      "name": "fees",
                      "typeId": 383,
                      "typeName": "MultiAsset",
                      "docs": []
                    },
                    {
                      "name": "weight_limit",
                      "typeId": 402,
                      "typeName": "WeightLimit",
                      "docs": []
                    }
                  ],
                  "index": 19,
                  "docs": []
                },
                {
                  "name": "RefundSurplus",
                  "fields": [],
                  "index": 20,
                  "docs": []
                },
                {
                  "name": "SetErrorHandler",
                  "fields": [
                    {
                      "typeId": 378,
                      "typeName": "Xcm<Call>",
                      "docs": []
                    }
                  ],
                  "index": 21,
                  "docs": []
                },
                {
                  "name": "SetAppendix",
                  "fields": [
                    {
                      "typeId": 378,
                      "typeName": "Xcm<Call>",
                      "docs": []
                    }
                  ],
                  "index": 22,
                  "docs": []
                },
                {
                  "name": "ClearError",
                  "fields": [],
                  "index": 23,
                  "docs": []
                },
                {
                  "name": "ClaimAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "typeId": 381,
                      "typeName": "MultiAssets",
                      "docs": []
                    },
                    {
                      "name": "ticket",
                      "typeId": 136,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 24,
                  "docs": []
                },
                {
                  "name": "Trap",
                  "fields": [
                    {
                      "typeId": 10,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 25,
                  "docs": []
                },
                {
                  "name": "SubscribeVersion",
                  "fields": [
                    {
                      "name": "query_id",
                      "typeId": 10,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "name": "max_response_weight",
                      "typeId": 9,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ],
                  "index": 26,
                  "docs": []
                },
                {
                  "name": "UnsubscribeVersion",
                  "fields": [],
                  "index": 27,
                  "docs": []
                },
                {
                  "name": "BurnAsset",
                  "fields": [
                    {
                      "typeId": 381,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 28,
                  "docs": []
                },
                {
                  "name": "ExpectAsset",
                  "fields": [
                    {
                      "typeId": 381,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 29,
                  "docs": []
                },
                {
                  "name": "ExpectOrigin",
                  "fields": [
                    {
                      "typeId": 397,
                      "typeName": "Option<MultiLocation>",
                      "docs": []
                    }
                  ],
                  "index": 30,
                  "docs": []
                },
                {
                  "name": "ExpectError",
                  "fields": [
                    {
                      "typeId": 388,
                      "typeName": "Option<(u32, Error)>",
                      "docs": []
                    }
                  ],
                  "index": 31,
                  "docs": []
                },
                {
                  "name": "ExpectTransactStatus",
                  "fields": [
                    {
                      "typeId": 395,
                      "typeName": "MaybeErrorCode",
                      "docs": []
                    }
                  ],
                  "index": 32,
                  "docs": []
                },
                {
                  "name": "QueryPallet",
                  "fields": [
                    {
                      "name": "module_name",
                      "typeId": 13,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "response_info",
                      "typeId": 398,
                      "typeName": "QueryResponseInfo",
                      "docs": []
                    }
                  ],
                  "index": 33,
                  "docs": []
                },
                {
                  "name": "ExpectPallet",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 79,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "name",
                      "typeId": 13,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "module_name",
                      "typeId": 13,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "crate_major",
                      "typeId": 79,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "min_crate_minor",
                      "typeId": 79,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 34,
                  "docs": []
                },
                {
                  "name": "ReportTransactStatus",
                  "fields": [
                    {
                      "typeId": 398,
                      "typeName": "QueryResponseInfo",
                      "docs": []
                    }
                  ],
                  "index": 35,
                  "docs": []
                },
                {
                  "name": "ClearTransactStatus",
                  "fields": [],
                  "index": 36,
                  "docs": []
                },
                {
                  "name": "UniversalOrigin",
                  "fields": [
                    {
                      "typeId": 138,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 37,
                  "docs": []
                },
                {
                  "name": "ExportMessage",
                  "fields": [
                    {
                      "name": "network",
                      "typeId": 140,
                      "typeName": "NetworkId",
                      "docs": []
                    },
                    {
                      "name": "destination",
                      "typeId": 137,
                      "typeName": "InteriorMultiLocation",
                      "docs": []
                    },
                    {
                      "name": "xcm",
                      "typeId": 378,
                      "typeName": "Xcm<()>",
                      "docs": []
                    }
                  ],
                  "index": 38,
                  "docs": []
                },
                {
                  "name": "LockAsset",
                  "fields": [
                    {
                      "name": "asset",
                      "typeId": 383,
                      "typeName": "MultiAsset",
                      "docs": []
                    },
                    {
                      "name": "unlocker",
                      "typeId": 136,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 39,
                  "docs": []
                },
                {
                  "name": "UnlockAsset",
                  "fields": [
                    {
                      "name": "asset",
                      "typeId": 383,
                      "typeName": "MultiAsset",
                      "docs": []
                    },
                    {
                      "name": "target",
                      "typeId": 136,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 40,
                  "docs": []
                },
                {
                  "name": "NoteUnlockable",
                  "fields": [
                    {
                      "name": "asset",
                      "typeId": 383,
                      "typeName": "MultiAsset",
                      "docs": []
                    },
                    {
                      "name": "owner",
                      "typeId": 136,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 41,
                  "docs": []
                },
                {
                  "name": "RequestUnlock",
                  "fields": [
                    {
                      "name": "asset",
                      "typeId": 383,
                      "typeName": "MultiAsset",
                      "docs": []
                    },
                    {
                      "name": "locker",
                      "typeId": 136,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 42,
                  "docs": []
                },
                {
                  "name": "SetFeesMode",
                  "fields": [
                    {
                      "name": "jit_withdraw",
                      "typeId": 44,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 43,
                  "docs": []
                },
                {
                  "name": "SetTopic",
                  "fields": [
                    {
                      "typeId": 1,
                      "typeName": "[u8; 32]",
                      "docs": []
                    }
                  ],
                  "index": 44,
                  "docs": []
                },
                {
                  "name": "ClearTopic",
                  "fields": [],
                  "index": 45,
                  "docs": []
                },
                {
                  "name": "AliasOrigin",
                  "fields": [
                    {
                      "typeId": 136,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 46,
                  "docs": []
                },
                {
                  "name": "UnpaidExecution",
                  "fields": [
                    {
                      "name": "weight_limit",
                      "typeId": 402,
                      "typeName": "WeightLimit",
                      "docs": []
                    },
                    {
                      "name": "check_origin",
                      "typeId": 397,
                      "typeName": "Option<MultiLocation>",
                      "docs": []
                    }
                  ],
                  "index": 47,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 381,
          "path": ["xcm", "v3", "multiasset", "MultiAssets"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 382,
                  "typeName": "Vec<MultiAsset>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 382,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 383
            }
          },
          "docs": []
        },
        {
          "id": 383,
          "path": ["xcm", "v3", "multiasset", "MultiAsset"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "id",
                  "typeId": 384,
                  "typeName": "AssetId",
                  "docs": []
                },
                {
                  "name": "fun",
                  "typeId": 385,
                  "typeName": "Fungibility",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 384,
          "path": ["xcm", "v3", "multiasset", "AssetId"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Concrete",
                  "fields": [
                    {
                      "typeId": 136,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Abstract",
                  "fields": [
                    {
                      "typeId": 1,
                      "typeName": "[u8; 32]",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 385,
          "path": ["xcm", "v3", "multiasset", "Fungibility"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Fungible",
                  "fields": [
                    {
                      "typeId": 60,
                      "typeName": "u128",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "NonFungible",
                  "fields": [
                    {
                      "typeId": 386,
                      "typeName": "AssetInstance",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 386,
          "path": ["xcm", "v3", "multiasset", "AssetInstance"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Undefined",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Index",
                  "fields": [
                    {
                      "typeId": 60,
                      "typeName": "u128",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Array4",
                  "fields": [
                    {
                      "typeId": 17,
                      "typeName": "[u8; 4]",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Array8",
                  "fields": [
                    {
                      "typeId": 172,
                      "typeName": "[u8; 8]",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "Array16",
                  "fields": [
                    {
                      "typeId": 47,
                      "typeName": "[u8; 16]",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "Array32",
                  "fields": [
                    {
                      "typeId": 1,
                      "typeName": "[u8; 32]",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 387,
          "path": ["xcm", "v3", "Response"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Null",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Assets",
                  "fields": [
                    {
                      "typeId": 381,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "ExecutionResult",
                  "fields": [
                    {
                      "typeId": 388,
                      "typeName": "Option<(u32, Error)>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Version",
                  "fields": [
                    {
                      "typeId": 4,
                      "typeName": "super::Version",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "PalletsInfo",
                  "fields": [
                    {
                      "typeId": 391,
                      "typeName": "BoundedVec<PalletInfo, MaxPalletsInfo>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "DispatchResult",
                  "fields": [
                    {
                      "typeId": 395,
                      "typeName": "MaybeErrorCode",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 388,
          "path": ["Option"],
          "params": [
            {
              "name": "T",
              "typeId": 389
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 389,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 389,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [4, 390]
            }
          },
          "docs": []
        },
        {
          "id": 390,
          "path": ["xcm", "v3", "traits", "Error"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Overflow",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Unimplemented",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "UntrustedReserveLocation",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "UntrustedTeleportLocation",
                  "fields": [],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "LocationFull",
                  "fields": [],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "LocationNotInvertible",
                  "fields": [],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "BadOrigin",
                  "fields": [],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "InvalidLocation",
                  "fields": [],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "AssetNotFound",
                  "fields": [],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "FailedToTransactAsset",
                  "fields": [],
                  "index": 9,
                  "docs": []
                },
                {
                  "name": "NotWithdrawable",
                  "fields": [],
                  "index": 10,
                  "docs": []
                },
                {
                  "name": "LocationCannotHold",
                  "fields": [],
                  "index": 11,
                  "docs": []
                },
                {
                  "name": "ExceedsMaxMessageSize",
                  "fields": [],
                  "index": 12,
                  "docs": []
                },
                {
                  "name": "DestinationUnsupported",
                  "fields": [],
                  "index": 13,
                  "docs": []
                },
                {
                  "name": "Transport",
                  "fields": [],
                  "index": 14,
                  "docs": []
                },
                {
                  "name": "Unroutable",
                  "fields": [],
                  "index": 15,
                  "docs": []
                },
                {
                  "name": "UnknownClaim",
                  "fields": [],
                  "index": 16,
                  "docs": []
                },
                {
                  "name": "FailedToDecode",
                  "fields": [],
                  "index": 17,
                  "docs": []
                },
                {
                  "name": "MaxWeightInvalid",
                  "fields": [],
                  "index": 18,
                  "docs": []
                },
                {
                  "name": "NotHoldingFees",
                  "fields": [],
                  "index": 19,
                  "docs": []
                },
                {
                  "name": "TooExpensive",
                  "fields": [],
                  "index": 20,
                  "docs": []
                },
                {
                  "name": "Trap",
                  "fields": [
                    {
                      "typeId": 11,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 21,
                  "docs": []
                },
                {
                  "name": "ExpectationFalse",
                  "fields": [],
                  "index": 22,
                  "docs": []
                },
                {
                  "name": "PalletNotFound",
                  "fields": [],
                  "index": 23,
                  "docs": []
                },
                {
                  "name": "NameMismatch",
                  "fields": [],
                  "index": 24,
                  "docs": []
                },
                {
                  "name": "VersionIncompatible",
                  "fields": [],
                  "index": 25,
                  "docs": []
                },
                {
                  "name": "HoldingWouldOverflow",
                  "fields": [],
                  "index": 26,
                  "docs": []
                },
                {
                  "name": "ExportError",
                  "fields": [],
                  "index": 27,
                  "docs": []
                },
                {
                  "name": "ReanchorFailed",
                  "fields": [],
                  "index": 28,
                  "docs": []
                },
                {
                  "name": "NoDeal",
                  "fields": [],
                  "index": 29,
                  "docs": []
                },
                {
                  "name": "FeesNotMet",
                  "fields": [],
                  "index": 30,
                  "docs": []
                },
                {
                  "name": "LockError",
                  "fields": [],
                  "index": 31,
                  "docs": []
                },
                {
                  "name": "NoPermission",
                  "fields": [],
                  "index": 32,
                  "docs": []
                },
                {
                  "name": "Unanchored",
                  "fields": [],
                  "index": 33,
                  "docs": []
                },
                {
                  "name": "NotDepositable",
                  "fields": [],
                  "index": 34,
                  "docs": []
                },
                {
                  "name": "UnhandledXcmVersion",
                  "fields": [],
                  "index": 35,
                  "docs": []
                },
                {
                  "name": "WeightLimitReached",
                  "fields": [
                    {
                      "typeId": 9,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ],
                  "index": 36,
                  "docs": []
                },
                {
                  "name": "Barrier",
                  "fields": [],
                  "index": 37,
                  "docs": []
                },
                {
                  "name": "WeightNotComputable",
                  "fields": [],
                  "index": 38,
                  "docs": []
                },
                {
                  "name": "ExceedsStackLimit",
                  "fields": [],
                  "index": 39,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 391,
          "path": ["bounded_collections", "bounded_vec", "BoundedVec"],
          "params": [
            {
              "name": "T",
              "typeId": 392
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 394,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 392,
          "path": ["xcm", "v3", "PalletInfo"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "index",
                  "typeId": 79,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "name",
                  "typeId": 393,
                  "typeName": "BoundedVec<u8, MaxPalletNameLen>",
                  "docs": []
                },
                {
                  "name": "module_name",
                  "typeId": 393,
                  "typeName": "BoundedVec<u8, MaxPalletNameLen>",
                  "docs": []
                },
                {
                  "name": "major",
                  "typeId": 79,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "minor",
                  "typeId": 79,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "patch",
                  "typeId": 79,
                  "typeName": "u32",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 393,
          "path": ["bounded_collections", "bounded_vec", "BoundedVec"],
          "params": [
            {
              "name": "T",
              "typeId": 2
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 13,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 394,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 392
            }
          },
          "docs": []
        },
        {
          "id": 395,
          "path": ["xcm", "v3", "MaybeErrorCode"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Success",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Error",
                  "fields": [
                    {
                      "typeId": 396,
                      "typeName": "BoundedVec<u8, MaxDispatchErrorLen>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "TruncatedError",
                  "fields": [
                    {
                      "typeId": 396,
                      "typeName": "BoundedVec<u8, MaxDispatchErrorLen>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 396,
          "path": ["bounded_collections", "bounded_vec", "BoundedVec"],
          "params": [
            {
              "name": "T",
              "typeId": 2
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 13,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 397,
          "path": ["Option"],
          "params": [
            {
              "name": "T",
              "typeId": 136
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 136,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 398,
          "path": ["xcm", "v3", "QueryResponseInfo"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "destination",
                  "typeId": 136,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "name": "query_id",
                  "typeId": 10,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "name": "max_weight",
                  "typeId": 9,
                  "typeName": "Weight",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 399,
          "path": ["xcm", "v3", "multiasset", "MultiAssetFilter"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Definite",
                  "fields": [
                    {
                      "typeId": 381,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Wild",
                  "fields": [
                    {
                      "typeId": 400,
                      "typeName": "WildMultiAsset",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 400,
          "path": ["xcm", "v3", "multiasset", "WildMultiAsset"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "All",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "AllOf",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 384,
                      "typeName": "AssetId",
                      "docs": []
                    },
                    {
                      "name": "fun",
                      "typeId": 401,
                      "typeName": "WildFungibility",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "AllCounted",
                  "fields": [
                    {
                      "typeId": 79,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "AllOfCounted",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 384,
                      "typeName": "AssetId",
                      "docs": []
                    },
                    {
                      "name": "fun",
                      "typeId": 401,
                      "typeName": "WildFungibility",
                      "docs": []
                    },
                    {
                      "name": "count",
                      "typeId": 79,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 401,
          "path": ["xcm", "v3", "multiasset", "WildFungibility"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Fungible",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "NonFungible",
                  "fields": [],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 402,
          "path": ["xcm", "v3", "WeightLimit"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Unlimited",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Limited",
                  "fields": [
                    {
                      "typeId": 9,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 403,
          "path": ["xcm", "VersionedMultiAssets"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "V2",
                  "fields": [
                    {
                      "typeId": 362,
                      "typeName": "v2::MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "V3",
                  "fields": [
                    {
                      "typeId": 381,
                      "typeName": "v3::MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 404,
          "path": ["xcm", "VersionedXcm"],
          "params": [
            {
              "name": "RuntimeCall"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "V2",
                  "fields": [
                    {
                      "typeId": 405,
                      "typeName": "v2::Xcm<RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "V3",
                  "fields": [
                    {
                      "typeId": 409,
                      "typeName": "v3::Xcm<RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 405,
          "path": ["xcm", "v2", "Xcm"],
          "params": [
            {
              "name": "RuntimeCall"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 406,
                  "typeName": "Vec<Instruction<RuntimeCall>>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 406,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 407
            }
          },
          "docs": []
        },
        {
          "id": 407,
          "path": ["xcm", "v2", "Instruction"],
          "params": [
            {
              "name": "RuntimeCall"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "WithdrawAsset",
                  "fields": [
                    {
                      "typeId": 362,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "ReserveAssetDeposited",
                  "fields": [
                    {
                      "typeId": 362,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "ReceiveTeleportedAsset",
                  "fields": [
                    {
                      "typeId": 362,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "QueryResponse",
                  "fields": [
                    {
                      "name": "query_id",
                      "typeId": 10,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "name": "response",
                      "typeId": 368,
                      "typeName": "Response",
                      "docs": []
                    },
                    {
                      "name": "max_weight",
                      "typeId": 10,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "TransferAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "typeId": 362,
                      "typeName": "MultiAssets",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "typeId": 351,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "TransferReserveAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "typeId": 362,
                      "typeName": "MultiAssets",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "typeId": 351,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "xcm",
                      "typeId": 359,
                      "typeName": "Xcm<()>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "Transact",
                  "fields": [
                    {
                      "name": "origin_type",
                      "typeId": 372,
                      "typeName": "OriginKind",
                      "docs": []
                    },
                    {
                      "name": "require_weight_at_most",
                      "typeId": 10,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "typeId": 408,
                      "typeName": "DoubleEncoded<RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "HrmpNewChannelOpenRequest",
                  "fields": [
                    {
                      "name": "sender",
                      "typeId": 79,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "max_message_size",
                      "typeId": 79,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "max_capacity",
                      "typeId": 79,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "HrmpChannelAccepted",
                  "fields": [
                    {
                      "name": "recipient",
                      "typeId": 79,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "HrmpChannelClosing",
                  "fields": [
                    {
                      "name": "initiator",
                      "typeId": 79,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "sender",
                      "typeId": 79,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "recipient",
                      "typeId": 79,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": []
                },
                {
                  "name": "ClearOrigin",
                  "fields": [],
                  "index": 10,
                  "docs": []
                },
                {
                  "name": "DescendOrigin",
                  "fields": [
                    {
                      "typeId": 352,
                      "typeName": "InteriorMultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": []
                },
                {
                  "name": "ReportError",
                  "fields": [
                    {
                      "name": "query_id",
                      "typeId": 10,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "typeId": 351,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "max_response_weight",
                      "typeId": 10,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 12,
                  "docs": []
                },
                {
                  "name": "DepositAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "typeId": 374,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "max_assets",
                      "typeId": 79,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "typeId": 351,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 13,
                  "docs": []
                },
                {
                  "name": "DepositReserveAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "typeId": 374,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "max_assets",
                      "typeId": 79,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "typeId": 351,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "xcm",
                      "typeId": 359,
                      "typeName": "Xcm<()>",
                      "docs": []
                    }
                  ],
                  "index": 14,
                  "docs": []
                },
                {
                  "name": "ExchangeAsset",
                  "fields": [
                    {
                      "name": "give",
                      "typeId": 374,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "receive",
                      "typeId": 362,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 15,
                  "docs": []
                },
                {
                  "name": "InitiateReserveWithdraw",
                  "fields": [
                    {
                      "name": "assets",
                      "typeId": 374,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "reserve",
                      "typeId": 351,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "xcm",
                      "typeId": 359,
                      "typeName": "Xcm<()>",
                      "docs": []
                    }
                  ],
                  "index": 16,
                  "docs": []
                },
                {
                  "name": "InitiateTeleport",
                  "fields": [
                    {
                      "name": "assets",
                      "typeId": 374,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "typeId": 351,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "xcm",
                      "typeId": 359,
                      "typeName": "Xcm<()>",
                      "docs": []
                    }
                  ],
                  "index": 17,
                  "docs": []
                },
                {
                  "name": "QueryHolding",
                  "fields": [
                    {
                      "name": "query_id",
                      "typeId": 10,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "typeId": 351,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "assets",
                      "typeId": 374,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "max_response_weight",
                      "typeId": 10,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 18,
                  "docs": []
                },
                {
                  "name": "BuyExecution",
                  "fields": [
                    {
                      "name": "fees",
                      "typeId": 364,
                      "typeName": "MultiAsset",
                      "docs": []
                    },
                    {
                      "name": "weight_limit",
                      "typeId": 377,
                      "typeName": "WeightLimit",
                      "docs": []
                    }
                  ],
                  "index": 19,
                  "docs": []
                },
                {
                  "name": "RefundSurplus",
                  "fields": [],
                  "index": 20,
                  "docs": []
                },
                {
                  "name": "SetErrorHandler",
                  "fields": [
                    {
                      "typeId": 405,
                      "typeName": "Xcm<RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 21,
                  "docs": []
                },
                {
                  "name": "SetAppendix",
                  "fields": [
                    {
                      "typeId": 405,
                      "typeName": "Xcm<RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 22,
                  "docs": []
                },
                {
                  "name": "ClearError",
                  "fields": [],
                  "index": 23,
                  "docs": []
                },
                {
                  "name": "ClaimAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "typeId": 362,
                      "typeName": "MultiAssets",
                      "docs": []
                    },
                    {
                      "name": "ticket",
                      "typeId": 351,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 24,
                  "docs": []
                },
                {
                  "name": "Trap",
                  "fields": [
                    {
                      "typeId": 10,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 25,
                  "docs": []
                },
                {
                  "name": "SubscribeVersion",
                  "fields": [
                    {
                      "name": "query_id",
                      "typeId": 10,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "name": "max_response_weight",
                      "typeId": 10,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 26,
                  "docs": []
                },
                {
                  "name": "UnsubscribeVersion",
                  "fields": [],
                  "index": 27,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 408,
          "path": ["xcm", "double_encoded", "DoubleEncoded"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "encoded",
                  "typeId": 13,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 409,
          "path": ["xcm", "v3", "Xcm"],
          "params": [
            {
              "name": "Call"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 410,
                  "typeName": "Vec<Instruction<Call>>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 410,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 411
            }
          },
          "docs": []
        },
        {
          "id": 411,
          "path": ["xcm", "v3", "Instruction"],
          "params": [
            {
              "name": "Call"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "WithdrawAsset",
                  "fields": [
                    {
                      "typeId": 381,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "ReserveAssetDeposited",
                  "fields": [
                    {
                      "typeId": 381,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "ReceiveTeleportedAsset",
                  "fields": [
                    {
                      "typeId": 381,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "QueryResponse",
                  "fields": [
                    {
                      "name": "query_id",
                      "typeId": 10,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "name": "response",
                      "typeId": 387,
                      "typeName": "Response",
                      "docs": []
                    },
                    {
                      "name": "max_weight",
                      "typeId": 9,
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "name": "querier",
                      "typeId": 397,
                      "typeName": "Option<MultiLocation>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "TransferAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "typeId": 381,
                      "typeName": "MultiAssets",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "typeId": 136,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "TransferReserveAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "typeId": 381,
                      "typeName": "MultiAssets",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "typeId": 136,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "xcm",
                      "typeId": 378,
                      "typeName": "Xcm<()>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "Transact",
                  "fields": [
                    {
                      "name": "origin_kind",
                      "typeId": 372,
                      "typeName": "OriginKind",
                      "docs": []
                    },
                    {
                      "name": "require_weight_at_most",
                      "typeId": 9,
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "typeId": 408,
                      "typeName": "DoubleEncoded<Call>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "HrmpNewChannelOpenRequest",
                  "fields": [
                    {
                      "name": "sender",
                      "typeId": 79,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "max_message_size",
                      "typeId": 79,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "max_capacity",
                      "typeId": 79,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "HrmpChannelAccepted",
                  "fields": [
                    {
                      "name": "recipient",
                      "typeId": 79,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "HrmpChannelClosing",
                  "fields": [
                    {
                      "name": "initiator",
                      "typeId": 79,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "sender",
                      "typeId": 79,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "recipient",
                      "typeId": 79,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": []
                },
                {
                  "name": "ClearOrigin",
                  "fields": [],
                  "index": 10,
                  "docs": []
                },
                {
                  "name": "DescendOrigin",
                  "fields": [
                    {
                      "typeId": 137,
                      "typeName": "InteriorMultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": []
                },
                {
                  "name": "ReportError",
                  "fields": [
                    {
                      "typeId": 398,
                      "typeName": "QueryResponseInfo",
                      "docs": []
                    }
                  ],
                  "index": 12,
                  "docs": []
                },
                {
                  "name": "DepositAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "typeId": 399,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "typeId": 136,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 13,
                  "docs": []
                },
                {
                  "name": "DepositReserveAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "typeId": 399,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "typeId": 136,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "xcm",
                      "typeId": 378,
                      "typeName": "Xcm<()>",
                      "docs": []
                    }
                  ],
                  "index": 14,
                  "docs": []
                },
                {
                  "name": "ExchangeAsset",
                  "fields": [
                    {
                      "name": "give",
                      "typeId": 399,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "want",
                      "typeId": 381,
                      "typeName": "MultiAssets",
                      "docs": []
                    },
                    {
                      "name": "maximal",
                      "typeId": 44,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 15,
                  "docs": []
                },
                {
                  "name": "InitiateReserveWithdraw",
                  "fields": [
                    {
                      "name": "assets",
                      "typeId": 399,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "reserve",
                      "typeId": 136,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "xcm",
                      "typeId": 378,
                      "typeName": "Xcm<()>",
                      "docs": []
                    }
                  ],
                  "index": 16,
                  "docs": []
                },
                {
                  "name": "InitiateTeleport",
                  "fields": [
                    {
                      "name": "assets",
                      "typeId": 399,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "typeId": 136,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "xcm",
                      "typeId": 378,
                      "typeName": "Xcm<()>",
                      "docs": []
                    }
                  ],
                  "index": 17,
                  "docs": []
                },
                {
                  "name": "ReportHolding",
                  "fields": [
                    {
                      "name": "response_info",
                      "typeId": 398,
                      "typeName": "QueryResponseInfo",
                      "docs": []
                    },
                    {
                      "name": "assets",
                      "typeId": 399,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    }
                  ],
                  "index": 18,
                  "docs": []
                },
                {
                  "name": "BuyExecution",
                  "fields": [
                    {
                      "name": "fees",
                      "typeId": 383,
                      "typeName": "MultiAsset",
                      "docs": []
                    },
                    {
                      "name": "weight_limit",
                      "typeId": 402,
                      "typeName": "WeightLimit",
                      "docs": []
                    }
                  ],
                  "index": 19,
                  "docs": []
                },
                {
                  "name": "RefundSurplus",
                  "fields": [],
                  "index": 20,
                  "docs": []
                },
                {
                  "name": "SetErrorHandler",
                  "fields": [
                    {
                      "typeId": 409,
                      "typeName": "Xcm<Call>",
                      "docs": []
                    }
                  ],
                  "index": 21,
                  "docs": []
                },
                {
                  "name": "SetAppendix",
                  "fields": [
                    {
                      "typeId": 409,
                      "typeName": "Xcm<Call>",
                      "docs": []
                    }
                  ],
                  "index": 22,
                  "docs": []
                },
                {
                  "name": "ClearError",
                  "fields": [],
                  "index": 23,
                  "docs": []
                },
                {
                  "name": "ClaimAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "typeId": 381,
                      "typeName": "MultiAssets",
                      "docs": []
                    },
                    {
                      "name": "ticket",
                      "typeId": 136,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 24,
                  "docs": []
                },
                {
                  "name": "Trap",
                  "fields": [
                    {
                      "typeId": 10,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 25,
                  "docs": []
                },
                {
                  "name": "SubscribeVersion",
                  "fields": [
                    {
                      "name": "query_id",
                      "typeId": 10,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "name": "max_response_weight",
                      "typeId": 9,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ],
                  "index": 26,
                  "docs": []
                },
                {
                  "name": "UnsubscribeVersion",
                  "fields": [],
                  "index": 27,
                  "docs": []
                },
                {
                  "name": "BurnAsset",
                  "fields": [
                    {
                      "typeId": 381,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 28,
                  "docs": []
                },
                {
                  "name": "ExpectAsset",
                  "fields": [
                    {
                      "typeId": 381,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 29,
                  "docs": []
                },
                {
                  "name": "ExpectOrigin",
                  "fields": [
                    {
                      "typeId": 397,
                      "typeName": "Option<MultiLocation>",
                      "docs": []
                    }
                  ],
                  "index": 30,
                  "docs": []
                },
                {
                  "name": "ExpectError",
                  "fields": [
                    {
                      "typeId": 388,
                      "typeName": "Option<(u32, Error)>",
                      "docs": []
                    }
                  ],
                  "index": 31,
                  "docs": []
                },
                {
                  "name": "ExpectTransactStatus",
                  "fields": [
                    {
                      "typeId": 395,
                      "typeName": "MaybeErrorCode",
                      "docs": []
                    }
                  ],
                  "index": 32,
                  "docs": []
                },
                {
                  "name": "QueryPallet",
                  "fields": [
                    {
                      "name": "module_name",
                      "typeId": 13,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "response_info",
                      "typeId": 398,
                      "typeName": "QueryResponseInfo",
                      "docs": []
                    }
                  ],
                  "index": 33,
                  "docs": []
                },
                {
                  "name": "ExpectPallet",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 79,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "name",
                      "typeId": 13,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "module_name",
                      "typeId": 13,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "crate_major",
                      "typeId": 79,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "min_crate_minor",
                      "typeId": 79,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 34,
                  "docs": []
                },
                {
                  "name": "ReportTransactStatus",
                  "fields": [
                    {
                      "typeId": 398,
                      "typeName": "QueryResponseInfo",
                      "docs": []
                    }
                  ],
                  "index": 35,
                  "docs": []
                },
                {
                  "name": "ClearTransactStatus",
                  "fields": [],
                  "index": 36,
                  "docs": []
                },
                {
                  "name": "UniversalOrigin",
                  "fields": [
                    {
                      "typeId": 138,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 37,
                  "docs": []
                },
                {
                  "name": "ExportMessage",
                  "fields": [
                    {
                      "name": "network",
                      "typeId": 140,
                      "typeName": "NetworkId",
                      "docs": []
                    },
                    {
                      "name": "destination",
                      "typeId": 137,
                      "typeName": "InteriorMultiLocation",
                      "docs": []
                    },
                    {
                      "name": "xcm",
                      "typeId": 378,
                      "typeName": "Xcm<()>",
                      "docs": []
                    }
                  ],
                  "index": 38,
                  "docs": []
                },
                {
                  "name": "LockAsset",
                  "fields": [
                    {
                      "name": "asset",
                      "typeId": 383,
                      "typeName": "MultiAsset",
                      "docs": []
                    },
                    {
                      "name": "unlocker",
                      "typeId": 136,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 39,
                  "docs": []
                },
                {
                  "name": "UnlockAsset",
                  "fields": [
                    {
                      "name": "asset",
                      "typeId": 383,
                      "typeName": "MultiAsset",
                      "docs": []
                    },
                    {
                      "name": "target",
                      "typeId": 136,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 40,
                  "docs": []
                },
                {
                  "name": "NoteUnlockable",
                  "fields": [
                    {
                      "name": "asset",
                      "typeId": 383,
                      "typeName": "MultiAsset",
                      "docs": []
                    },
                    {
                      "name": "owner",
                      "typeId": 136,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 41,
                  "docs": []
                },
                {
                  "name": "RequestUnlock",
                  "fields": [
                    {
                      "name": "asset",
                      "typeId": 383,
                      "typeName": "MultiAsset",
                      "docs": []
                    },
                    {
                      "name": "locker",
                      "typeId": 136,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 42,
                  "docs": []
                },
                {
                  "name": "SetFeesMode",
                  "fields": [
                    {
                      "name": "jit_withdraw",
                      "typeId": 44,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 43,
                  "docs": []
                },
                {
                  "name": "SetTopic",
                  "fields": [
                    {
                      "typeId": 1,
                      "typeName": "[u8; 32]",
                      "docs": []
                    }
                  ],
                  "index": 44,
                  "docs": []
                },
                {
                  "name": "ClearTopic",
                  "fields": [],
                  "index": 45,
                  "docs": []
                },
                {
                  "name": "AliasOrigin",
                  "fields": [
                    {
                      "typeId": 136,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 46,
                  "docs": []
                },
                {
                  "name": "UnpaidExecution",
                  "fields": [
                    {
                      "name": "weight_limit",
                      "typeId": 402,
                      "typeName": "WeightLimit",
                      "docs": []
                    },
                    {
                      "name": "check_origin",
                      "typeId": 397,
                      "typeName": "Option<MultiLocation>",
                      "docs": []
                    }
                  ],
                  "index": 47,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 412,
          "path": ["pallet_message_queue", "pallet", "Call"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "reap_page",
                  "fields": [
                    {
                      "name": "message_origin",
                      "typeId": 413,
                      "typeName": "MessageOriginOf<T>",
                      "docs": []
                    },
                    {
                      "name": "page_index",
                      "typeId": 4,
                      "typeName": "PageIndex",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["See [`Pallet::reap_page`]."]
                },
                {
                  "name": "execute_overweight",
                  "fields": [
                    {
                      "name": "message_origin",
                      "typeId": 413,
                      "typeName": "MessageOriginOf<T>",
                      "docs": []
                    },
                    {
                      "name": "page",
                      "typeId": 4,
                      "typeName": "PageIndex",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "T::Size",
                      "docs": []
                    },
                    {
                      "name": "weight_limit",
                      "typeId": 9,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": ["See [`Pallet::execute_overweight`]."]
                }
              ]
            }
          },
          "docs": ["Contains a variant per dispatchable extrinsic that this pallet has."]
        },
        {
          "id": 413,
          "path": ["polkadot_runtime_parachains", "inclusion", "AggregateMessageOrigin"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Ump",
                  "fields": [
                    {
                      "typeId": 414,
                      "typeName": "UmpQueueId",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 414,
          "path": ["polkadot_runtime_parachains", "inclusion", "UmpQueueId"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Para",
                  "fields": [
                    {
                      "typeId": 134,
                      "typeName": "ParaId",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 415,
          "path": ["bounded_collections", "bounded_vec", "BoundedVec"],
          "params": [
            {
              "name": "T",
              "typeId": 2
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 13,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 416,
          "path": ["pallet_conviction_voting", "types", "Tally"],
          "params": [
            {
              "name": "Votes",
              "typeId": 6
            },
            {
              "name": "Total"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "ayes",
                  "typeId": 6,
                  "typeName": "Votes",
                  "docs": []
                },
                {
                  "name": "nays",
                  "typeId": 6,
                  "typeName": "Votes",
                  "docs": []
                },
                {
                  "name": "support",
                  "typeId": 6,
                  "typeName": "Votes",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 417,
          "path": ["pallet_whitelist", "pallet", "Event"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "CallWhitelisted",
                  "fields": [
                    {
                      "name": "call_hash",
                      "typeId": 12,
                      "typeName": "PreimageHash",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "WhitelistedCallRemoved",
                  "fields": [
                    {
                      "name": "call_hash",
                      "typeId": 12,
                      "typeName": "PreimageHash",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "WhitelistedCallDispatched",
                  "fields": [
                    {
                      "name": "call_hash",
                      "typeId": 12,
                      "typeName": "PreimageHash",
                      "docs": []
                    },
                    {
                      "name": "result",
                      "typeId": 418,
                      "typeName": "DispatchResultWithPostInfo",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": ["The `Event` enum of this pallet"]
        },
        {
          "id": 418,
          "path": ["Result"],
          "params": [
            {
              "name": "T",
              "typeId": 419
            },
            {
              "name": "E",
              "typeId": 421
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Ok",
                  "fields": [
                    {
                      "typeId": 419,
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Err",
                  "fields": [
                    {
                      "typeId": 421,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 419,
          "path": ["frame_support", "dispatch", "PostDispatchInfo"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "actual_weight",
                  "typeId": 420,
                  "typeName": "Option<Weight>",
                  "docs": []
                },
                {
                  "name": "pays_fee",
                  "typeId": 24,
                  "typeName": "Pays",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 420,
          "path": ["Option"],
          "params": [
            {
              "name": "T",
              "typeId": 9
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 9,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 421,
          "path": ["sp_runtime", "DispatchErrorWithPostInfo"],
          "params": [
            {
              "name": "Info",
              "typeId": 419
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "post_info",
                  "typeId": 419,
                  "typeName": "Info",
                  "docs": []
                },
                {
                  "name": "error",
                  "typeId": 25,
                  "typeName": "DispatchError",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 422,
          "path": ["polkadot_runtime_common", "claims", "pallet", "Event"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Claimed",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "ethereum_address",
                      "typeId": 150,
                      "typeName": "EthereumAddress",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["Someone claimed some DOTs."]
                }
              ]
            }
          },
          "docs": ["The `Event` enum of this pallet"]
        },
        {
          "id": 423,
          "path": ["pallet_vesting", "pallet", "Event"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "VestingUpdated",
                  "fields": [
                    {
                      "name": "account",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "unvested",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "The amount vested has been updated. This could indicate a change in funds available.",
                    "The balance given is the amount which is left unvested (and thus locked)."
                  ]
                },
                {
                  "name": "VestingCompleted",
                  "fields": [
                    {
                      "name": "account",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": ["An \\[account\\] has become fully vested."]
                }
              ]
            }
          },
          "docs": ["The `Event` enum of this pallet"]
        },
        {
          "id": 424,
          "path": ["pallet_utility", "pallet", "Event"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "BatchInterrupted",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "error",
                      "typeId": 25,
                      "typeName": "DispatchError",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Batch of dispatches did not complete fully. Index of first failing dispatch given, as",
                    "well as the error."
                  ]
                },
                {
                  "name": "BatchCompleted",
                  "fields": [],
                  "index": 1,
                  "docs": ["Batch of dispatches completed fully with no error."]
                },
                {
                  "name": "BatchCompletedWithErrors",
                  "fields": [],
                  "index": 2,
                  "docs": ["Batch of dispatches completed but has errors."]
                },
                {
                  "name": "ItemCompleted",
                  "fields": [],
                  "index": 3,
                  "docs": ["A single item within a Batch of dispatches has completed with no error."]
                },
                {
                  "name": "ItemFailed",
                  "fields": [
                    {
                      "name": "error",
                      "typeId": 25,
                      "typeName": "DispatchError",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": ["A single item within a Batch of dispatches has completed with error."]
                },
                {
                  "name": "DispatchedAs",
                  "fields": [
                    {
                      "name": "result",
                      "typeId": 33,
                      "typeName": "DispatchResult",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": ["A call was dispatched."]
                }
              ]
            }
          },
          "docs": ["The `Event` enum of this pallet"]
        },
        {
          "id": 425,
          "path": ["pallet_identity", "pallet", "Event"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "IdentitySet",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["A name was set or reset (which will remove all judgements)."]
                },
                {
                  "name": "IdentityCleared",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "deposit",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": ["A name was cleared, and the given balance returned."]
                },
                {
                  "name": "IdentityKilled",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "deposit",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": ["A name was removed and the given balance slashed."]
                },
                {
                  "name": "JudgementRequested",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "registrar_index",
                      "typeId": 4,
                      "typeName": "RegistrarIndex",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": ["A judgement was asked from a registrar."]
                },
                {
                  "name": "JudgementUnrequested",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "registrar_index",
                      "typeId": 4,
                      "typeName": "RegistrarIndex",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": ["A judgement request was retracted."]
                },
                {
                  "name": "JudgementGiven",
                  "fields": [
                    {
                      "name": "target",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "registrar_index",
                      "typeId": 4,
                      "typeName": "RegistrarIndex",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": ["A judgement was given by a registrar."]
                },
                {
                  "name": "RegistrarAdded",
                  "fields": [
                    {
                      "name": "registrar_index",
                      "typeId": 4,
                      "typeName": "RegistrarIndex",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": ["A registrar was added."]
                },
                {
                  "name": "SubIdentityAdded",
                  "fields": [
                    {
                      "name": "sub",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "main",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "deposit",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": ["A sub-identity was added to an identity and the deposit paid."]
                },
                {
                  "name": "SubIdentityRemoved",
                  "fields": [
                    {
                      "name": "sub",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "main",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "deposit",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": ["A sub-identity was removed from an identity and the deposit freed."]
                },
                {
                  "name": "SubIdentityRevoked",
                  "fields": [
                    {
                      "name": "sub",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "main",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "deposit",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": [
                    "A sub-identity was cleared, and the given deposit repatriated from the",
                    "main identity account to the sub-identity account."
                  ]
                }
              ]
            }
          },
          "docs": ["The `Event` enum of this pallet"]
        },
        {
          "id": 426,
          "path": ["pallet_proxy", "pallet", "Event"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "ProxyExecuted",
                  "fields": [
                    {
                      "name": "result",
                      "typeId": 33,
                      "typeName": "DispatchResult",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["A proxy was executed correctly, with the given."]
                },
                {
                  "name": "PureCreated",
                  "fields": [
                    {
                      "name": "pure",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "proxy_type",
                      "typeId": 203,
                      "typeName": "T::ProxyType",
                      "docs": []
                    },
                    {
                      "name": "disambiguation_index",
                      "typeId": 66,
                      "typeName": "u16",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "A pure account has been created by new proxy with given",
                    "disambiguation index and proxy type."
                  ]
                },
                {
                  "name": "Announced",
                  "fields": [
                    {
                      "name": "real",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "proxy",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "call_hash",
                      "typeId": 12,
                      "typeName": "CallHashOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": ["An announcement was placed to make a call in the future."]
                },
                {
                  "name": "ProxyAdded",
                  "fields": [
                    {
                      "name": "delegator",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "delegatee",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "proxy_type",
                      "typeId": 203,
                      "typeName": "T::ProxyType",
                      "docs": []
                    },
                    {
                      "name": "delay",
                      "typeId": 4,
                      "typeName": "BlockNumberFor<T>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": ["A proxy was added."]
                },
                {
                  "name": "ProxyRemoved",
                  "fields": [
                    {
                      "name": "delegator",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "delegatee",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "proxy_type",
                      "typeId": 203,
                      "typeName": "T::ProxyType",
                      "docs": []
                    },
                    {
                      "name": "delay",
                      "typeId": 4,
                      "typeName": "BlockNumberFor<T>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": ["A proxy was removed."]
                }
              ]
            }
          },
          "docs": ["The `Event` enum of this pallet"]
        },
        {
          "id": 427,
          "path": ["pallet_multisig", "pallet", "Event"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "NewMultisig",
                  "fields": [
                    {
                      "name": "approving",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "multisig",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "call_hash",
                      "typeId": 1,
                      "typeName": "CallHash",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["A new multisig operation has begun."]
                },
                {
                  "name": "MultisigApproval",
                  "fields": [
                    {
                      "name": "approving",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "timepoint",
                      "typeId": 206,
                      "typeName": "Timepoint<BlockNumberFor<T>>",
                      "docs": []
                    },
                    {
                      "name": "multisig",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "call_hash",
                      "typeId": 1,
                      "typeName": "CallHash",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": ["A multisig operation has been approved by someone."]
                },
                {
                  "name": "MultisigExecuted",
                  "fields": [
                    {
                      "name": "approving",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "timepoint",
                      "typeId": 206,
                      "typeName": "Timepoint<BlockNumberFor<T>>",
                      "docs": []
                    },
                    {
                      "name": "multisig",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "call_hash",
                      "typeId": 1,
                      "typeName": "CallHash",
                      "docs": []
                    },
                    {
                      "name": "result",
                      "typeId": 33,
                      "typeName": "DispatchResult",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": ["A multisig operation has been executed."]
                },
                {
                  "name": "MultisigCancelled",
                  "fields": [
                    {
                      "name": "cancelling",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "timepoint",
                      "typeId": 206,
                      "typeName": "Timepoint<BlockNumberFor<T>>",
                      "docs": []
                    },
                    {
                      "name": "multisig",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "call_hash",
                      "typeId": 1,
                      "typeName": "CallHash",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": ["A multisig operation has been cancelled."]
                }
              ]
            }
          },
          "docs": ["The `Event` enum of this pallet"]
        },
        {
          "id": 428,
          "path": ["pallet_bounties", "pallet", "Event"],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "BountyProposed",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "BountyIndex",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["New bounty proposal."]
                },
                {
                  "name": "BountyRejected",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": "bond",
                      "typeId": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": ["A bounty proposal was rejected; funds were slashed."]
                },
                {
                  "name": "BountyBecameActive",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "BountyIndex",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": ["A bounty proposal is funded and became active."]
                },
                {
                  "name": "BountyAwarded",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": ["A bounty is awarded to a beneficiary."]
                },
                {
                  "name": "BountyClaimed",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": "payout",
                      "typeId": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": ["A bounty is claimed by beneficiary."]
                },
                {
                  "name": "BountyCanceled",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "BountyIndex",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": ["A bounty is cancelled."]
                },
                {
                  "name": "BountyExtended",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "BountyIndex",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": ["A bounty expiry is extended."]
                }
              ]
            }
          },
          "docs": ["The `Event` enum of this pallet"]
        },
        {
          "id": 429,
          "path": ["pallet_child_bounties", "pallet", "Event"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Added",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": "child_index",
                      "typeId": 4,
                      "typeName": "BountyIndex",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["A child-bounty is added."]
                },
                {
                  "name": "Awarded",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": "child_index",
                      "typeId": 4,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": ["A child-bounty is awarded to a beneficiary."]
                },
                {
                  "name": "Claimed",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": "child_index",
                      "typeId": 4,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": "payout",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": ["A child-bounty is claimed by beneficiary."]
                },
                {
                  "name": "Canceled",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": "child_index",
                      "typeId": 4,
                      "typeName": "BountyIndex",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": ["A child-bounty is cancelled."]
                }
              ]
            }
          },
          "docs": ["The `Event` enum of this pallet"]
        },
        {
          "id": 430,
          "path": ["pallet_election_provider_multi_phase", "pallet", "Event"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "SolutionStored",
                  "fields": [
                    {
                      "name": "compute",
                      "typeId": 431,
                      "typeName": "ElectionCompute",
                      "docs": []
                    },
                    {
                      "name": "origin",
                      "typeId": 155,
                      "typeName": "Option<T::AccountId>",
                      "docs": []
                    },
                    {
                      "name": "prev_ejected",
                      "typeId": 44,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "A solution was stored with the given compute.",
                    "",
                    "The `origin` indicates the origin of the solution. If `origin` is `Some(AccountId)`,",
                    "the stored solution was submited in the signed phase by a miner with the `AccountId`.",
                    "Otherwise, the solution was stored either during the unsigned phase or by",
                    "`T::ForceOrigin`. The `bool` is `true` when a previous solution was ejected to make",
                    "room for this one."
                  ]
                },
                {
                  "name": "ElectionFinalized",
                  "fields": [
                    {
                      "name": "compute",
                      "typeId": 431,
                      "typeName": "ElectionCompute",
                      "docs": []
                    },
                    {
                      "name": "score",
                      "typeId": 262,
                      "typeName": "ElectionScore",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": ["The election has been finalized, with the given computation and score."]
                },
                {
                  "name": "ElectionFailed",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "An election failed.",
                    "",
                    "Not much can be said about which computes failed in the process."
                  ]
                },
                {
                  "name": "Rewarded",
                  "fields": [
                    {
                      "name": "account",
                      "typeId": 0,
                      "typeName": "<T as frame_system::Config>::AccountId",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": ["An account has been rewarded for their signed submission being finalized."]
                },
                {
                  "name": "Slashed",
                  "fields": [
                    {
                      "name": "account",
                      "typeId": 0,
                      "typeName": "<T as frame_system::Config>::AccountId",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": ["An account has been slashed for submitting an invalid signed submission."]
                },
                {
                  "name": "PhaseTransitioned",
                  "fields": [
                    {
                      "name": "from",
                      "typeId": 432,
                      "typeName": "Phase<BlockNumberFor<T>>",
                      "docs": []
                    },
                    {
                      "name": "to",
                      "typeId": 432,
                      "typeName": "Phase<BlockNumberFor<T>>",
                      "docs": []
                    },
                    {
                      "name": "round",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": ["There was a phase transition in a given round."]
                }
              ]
            }
          },
          "docs": ["The `Event` enum of this pallet"]
        },
        {
          "id": 431,
          "path": ["pallet_election_provider_multi_phase", "ElectionCompute"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "OnChain",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Signed",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Unsigned",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Fallback",
                  "fields": [],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "Emergency",
                  "fields": [],
                  "index": 4,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 432,
          "path": ["pallet_election_provider_multi_phase", "Phase"],
          "params": [
            {
              "name": "Bn",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Off",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Signed",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Unsigned",
                  "fields": [
                    {
                      "typeId": 433,
                      "typeName": "(bool, Bn)",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Emergency",
                  "fields": [],
                  "index": 3,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 433,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [44, 4]
            }
          },
          "docs": []
        },
        {
          "id": 434,
          "path": ["pallet_bags_list", "pallet", "Event"],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Rebagged",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "from",
                      "typeId": 11,
                      "typeName": "T::Score",
                      "docs": []
                    },
                    {
                      "name": "to",
                      "typeId": 11,
                      "typeName": "T::Score",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["Moved an account from one bag to another."]
                },
                {
                  "name": "ScoreUpdated",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "new_score",
                      "typeId": 11,
                      "typeName": "T::Score",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": ["Updated the score of some account to the given amount."]
                }
              ]
            }
          },
          "docs": ["The `Event` enum of this pallet"]
        },
        {
          "id": 435,
          "path": ["pallet_nomination_pools", "pallet", "Event"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Created",
                  "fields": [
                    {
                      "name": "depositor",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "pool_id",
                      "typeId": 4,
                      "typeName": "PoolId",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["A pool has been created."]
                },
                {
                  "name": "Bonded",
                  "fields": [
                    {
                      "name": "member",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "pool_id",
                      "typeId": 4,
                      "typeName": "PoolId",
                      "docs": []
                    },
                    {
                      "name": "bonded",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "joined",
                      "typeId": 44,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": ["A member has became bonded in a pool."]
                },
                {
                  "name": "PaidOut",
                  "fields": [
                    {
                      "name": "member",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "pool_id",
                      "typeId": 4,
                      "typeName": "PoolId",
                      "docs": []
                    },
                    {
                      "name": "payout",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": ["A payout has been made to a member."]
                },
                {
                  "name": "Unbonded",
                  "fields": [
                    {
                      "name": "member",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "pool_id",
                      "typeId": 4,
                      "typeName": "PoolId",
                      "docs": []
                    },
                    {
                      "name": "balance",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "points",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "era",
                      "typeId": 4,
                      "typeName": "EraIndex",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "A member has unbonded from their pool.",
                    "",
                    "- `balance` is the corresponding balance of the number of points that has been",
                    "  requested to be unbonded (the argument of the `unbond` transaction) from the bonded",
                    "  pool.",
                    "- `points` is the number of points that are issued as a result of `balance` being",
                    "dissolved into the corresponding unbonding pool.",
                    "- `era` is the era in which the balance will be unbonded.",
                    "In the absence of slashing, these values will match. In the presence of slashing, the",
                    "number of points that are issued in the unbonding pool will be less than the amount",
                    "requested to be unbonded."
                  ]
                },
                {
                  "name": "Withdrawn",
                  "fields": [
                    {
                      "name": "member",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "pool_id",
                      "typeId": 4,
                      "typeName": "PoolId",
                      "docs": []
                    },
                    {
                      "name": "balance",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "points",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "A member has withdrawn from their pool.",
                    "",
                    "The given number of `points` have been dissolved in return of `balance`.",
                    "",
                    "Similar to `Unbonded` event, in the absence of slashing, the ratio of point to balance",
                    "will be 1."
                  ]
                },
                {
                  "name": "Destroyed",
                  "fields": [
                    {
                      "name": "pool_id",
                      "typeId": 4,
                      "typeName": "PoolId",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": ["A pool has been destroyed."]
                },
                {
                  "name": "StateChanged",
                  "fields": [
                    {
                      "name": "pool_id",
                      "typeId": 4,
                      "typeName": "PoolId",
                      "docs": []
                    },
                    {
                      "name": "new_state",
                      "typeId": 274,
                      "typeName": "PoolState",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": ["The state of a pool has changed"]
                },
                {
                  "name": "MemberRemoved",
                  "fields": [
                    {
                      "name": "pool_id",
                      "typeId": 4,
                      "typeName": "PoolId",
                      "docs": []
                    },
                    {
                      "name": "member",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "A member has been removed from a pool.",
                    "",
                    "The removal can be voluntary (withdrawn all unbonded funds) or involuntary (kicked)."
                  ]
                },
                {
                  "name": "RolesUpdated",
                  "fields": [
                    {
                      "name": "root",
                      "typeId": 155,
                      "typeName": "Option<T::AccountId>",
                      "docs": []
                    },
                    {
                      "name": "bouncer",
                      "typeId": 155,
                      "typeName": "Option<T::AccountId>",
                      "docs": []
                    },
                    {
                      "name": "nominator",
                      "typeId": 155,
                      "typeName": "Option<T::AccountId>",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "The roles of a pool have been updated to the given new roles. Note that the depositor",
                    "can never change."
                  ]
                },
                {
                  "name": "PoolSlashed",
                  "fields": [
                    {
                      "name": "pool_id",
                      "typeId": 4,
                      "typeName": "PoolId",
                      "docs": []
                    },
                    {
                      "name": "balance",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": ["The active balance of pool `pool_id` has been slashed to `balance`."]
                },
                {
                  "name": "UnbondingPoolSlashed",
                  "fields": [
                    {
                      "name": "pool_id",
                      "typeId": 4,
                      "typeName": "PoolId",
                      "docs": []
                    },
                    {
                      "name": "era",
                      "typeId": 4,
                      "typeName": "EraIndex",
                      "docs": []
                    },
                    {
                      "name": "balance",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 10,
                  "docs": ["The unbond pool at `era` of pool `pool_id` has been slashed to `balance`."]
                },
                {
                  "name": "PoolCommissionUpdated",
                  "fields": [
                    {
                      "name": "pool_id",
                      "typeId": 4,
                      "typeName": "PoolId",
                      "docs": []
                    },
                    {
                      "name": "current",
                      "typeId": 280,
                      "typeName": "Option<(Perbill, T::AccountId)>",
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": ["A pool's commission setting has been changed."]
                },
                {
                  "name": "PoolMaxCommissionUpdated",
                  "fields": [
                    {
                      "name": "pool_id",
                      "typeId": 4,
                      "typeName": "PoolId",
                      "docs": []
                    },
                    {
                      "name": "max_commission",
                      "typeId": 41,
                      "typeName": "Perbill",
                      "docs": []
                    }
                  ],
                  "index": 12,
                  "docs": ["A pool's maximum commission setting has been changed."]
                },
                {
                  "name": "PoolCommissionChangeRateUpdated",
                  "fields": [
                    {
                      "name": "pool_id",
                      "typeId": 4,
                      "typeName": "PoolId",
                      "docs": []
                    },
                    {
                      "name": "change_rate",
                      "typeId": 282,
                      "typeName": "CommissionChangeRate<BlockNumberFor<T>>",
                      "docs": []
                    }
                  ],
                  "index": 13,
                  "docs": ["A pool's commission `change_rate` has been changed."]
                },
                {
                  "name": "PoolCommissionClaimed",
                  "fields": [
                    {
                      "name": "pool_id",
                      "typeId": 4,
                      "typeName": "PoolId",
                      "docs": []
                    },
                    {
                      "name": "commission",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 14,
                  "docs": ["Pool commission has been claimed."]
                }
              ]
            }
          },
          "docs": ["Events of this pallet."]
        },
        {
          "id": 436,
          "path": ["pallet_fast_unstake", "pallet", "Event"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Unstaked",
                  "fields": [
                    {
                      "name": "stash",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "result",
                      "typeId": 33,
                      "typeName": "DispatchResult",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["A staker was unstaked."]
                },
                {
                  "name": "Slashed",
                  "fields": [
                    {
                      "name": "stash",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": ["A staker was slashed for requesting fast-unstake whilst being exposed."]
                },
                {
                  "name": "BatchChecked",
                  "fields": [
                    {
                      "name": "eras",
                      "typeId": 97,
                      "typeName": "Vec<EraIndex>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": ["A batch was partially checked for the given eras, but the process did not finish."]
                },
                {
                  "name": "BatchFinished",
                  "fields": [
                    {
                      "name": "size",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "A batch of a given size was terminated.",
                    "",
                    "This is always follows by a number of `Unstaked` or `Slashed` events, marking the end",
                    "of the batch. A new batch will be created upon next block."
                  ]
                },
                {
                  "name": "InternalError",
                  "fields": [],
                  "index": 4,
                  "docs": ["An internal error happened. Operations will be paused now."]
                }
              ]
            }
          },
          "docs": ["The `Event` enum of this pallet"]
        },
        {
          "id": 437,
          "path": ["polkadot_runtime_parachains", "inclusion", "pallet", "Event"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "CandidateBacked",
                  "fields": [
                    {
                      "typeId": 438,
                      "typeName": "CandidateReceipt<T::Hash>",
                      "docs": []
                    },
                    {
                      "typeId": 316,
                      "typeName": "HeadData",
                      "docs": []
                    },
                    {
                      "typeId": 439,
                      "typeName": "CoreIndex",
                      "docs": []
                    },
                    {
                      "typeId": 440,
                      "typeName": "GroupIndex",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["A candidate was backed. `[candidate, head_data]`"]
                },
                {
                  "name": "CandidateIncluded",
                  "fields": [
                    {
                      "typeId": 438,
                      "typeName": "CandidateReceipt<T::Hash>",
                      "docs": []
                    },
                    {
                      "typeId": 316,
                      "typeName": "HeadData",
                      "docs": []
                    },
                    {
                      "typeId": 439,
                      "typeName": "CoreIndex",
                      "docs": []
                    },
                    {
                      "typeId": 440,
                      "typeName": "GroupIndex",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": ["A candidate was included. `[candidate, head_data]`"]
                },
                {
                  "name": "CandidateTimedOut",
                  "fields": [
                    {
                      "typeId": 438,
                      "typeName": "CandidateReceipt<T::Hash>",
                      "docs": []
                    },
                    {
                      "typeId": 316,
                      "typeName": "HeadData",
                      "docs": []
                    },
                    {
                      "typeId": 439,
                      "typeName": "CoreIndex",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": ["A candidate timed out. `[candidate, head_data]`"]
                },
                {
                  "name": "UpwardMessagesReceived",
                  "fields": [
                    {
                      "name": "from",
                      "typeId": 134,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "count",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": ["Some upward messages have been received and will be processed."]
                }
              ]
            }
          },
          "docs": ["The `Event` enum of this pallet"]
        },
        {
          "id": 438,
          "path": ["polkadot_primitives", "v5", "CandidateReceipt"],
          "params": [
            {
              "name": "H",
              "typeId": 12
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "descriptor",
                  "typeId": 305,
                  "typeName": "CandidateDescriptor<H>",
                  "docs": []
                },
                {
                  "name": "commitments_hash",
                  "typeId": 12,
                  "typeName": "Hash",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 439,
          "path": ["polkadot_primitives", "v5", "CoreIndex"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 440,
          "path": ["polkadot_primitives", "v5", "GroupIndex"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 441,
          "path": ["polkadot_runtime_parachains", "paras", "pallet", "Event"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "CurrentCodeUpdated",
                  "fields": [
                    {
                      "typeId": 134,
                      "typeName": "ParaId",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["Current code has been updated for a Para. `para_id`"]
                },
                {
                  "name": "CurrentHeadUpdated",
                  "fields": [
                    {
                      "typeId": 134,
                      "typeName": "ParaId",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": ["Current head has been updated for a Para. `para_id`"]
                },
                {
                  "name": "CodeUpgradeScheduled",
                  "fields": [
                    {
                      "typeId": 134,
                      "typeName": "ParaId",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": ["A code upgrade has been scheduled for a Para. `para_id`"]
                },
                {
                  "name": "NewHeadNoted",
                  "fields": [
                    {
                      "typeId": 134,
                      "typeName": "ParaId",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": ["A new head has been noted for a Para. `para_id`"]
                },
                {
                  "name": "ActionQueued",
                  "fields": [
                    {
                      "typeId": 134,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "typeId": 4,
                      "typeName": "SessionIndex",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": ["A para has been queued to execute pending actions. `para_id`"]
                },
                {
                  "name": "PvfCheckStarted",
                  "fields": [
                    {
                      "typeId": 308,
                      "typeName": "ValidationCodeHash",
                      "docs": []
                    },
                    {
                      "typeId": 134,
                      "typeName": "ParaId",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "The given para either initiated or subscribed to a PVF check for the given validation",
                    "code. `code_hash` `para_id`"
                  ]
                },
                {
                  "name": "PvfCheckAccepted",
                  "fields": [
                    {
                      "typeId": 308,
                      "typeName": "ValidationCodeHash",
                      "docs": []
                    },
                    {
                      "typeId": 134,
                      "typeName": "ParaId",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "The given validation code was accepted by the PVF pre-checking vote.",
                    "`code_hash` `para_id`"
                  ]
                },
                {
                  "name": "PvfCheckRejected",
                  "fields": [
                    {
                      "typeId": 308,
                      "typeName": "ValidationCodeHash",
                      "docs": []
                    },
                    {
                      "typeId": 134,
                      "typeName": "ParaId",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "The given validation code was rejected by the PVF pre-checking vote.",
                    "`code_hash` `para_id`"
                  ]
                }
              ]
            }
          },
          "docs": ["The `Event` enum of this pallet"]
        },
        {
          "id": 442,
          "path": ["polkadot_runtime_parachains", "hrmp", "pallet", "Event"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "OpenChannelRequested",
                  "fields": [
                    {
                      "typeId": 134,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "typeId": 134,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Open HRMP channel requested.",
                    "`[sender, recipient, proposed_max_capacity, proposed_max_message_size]`"
                  ]
                },
                {
                  "name": "OpenChannelCanceled",
                  "fields": [
                    {
                      "typeId": 134,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "typeId": 331,
                      "typeName": "HrmpChannelId",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "An HRMP channel request sent by the receiver was canceled by either party.",
                    "`[by_parachain, channel_id]`"
                  ]
                },
                {
                  "name": "OpenChannelAccepted",
                  "fields": [
                    {
                      "typeId": 134,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "typeId": 134,
                      "typeName": "ParaId",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": ["Open HRMP channel accepted. `[sender, recipient]`"]
                },
                {
                  "name": "ChannelClosed",
                  "fields": [
                    {
                      "typeId": 134,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "typeId": 331,
                      "typeName": "HrmpChannelId",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": ["HRMP channel closed. `[by_parachain, channel_id]`"]
                },
                {
                  "name": "HrmpChannelForceOpened",
                  "fields": [
                    {
                      "typeId": 134,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "typeId": 134,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "An HRMP channel was opened via Root origin.",
                    "`[sender, recipient, proposed_max_capacity, proposed_max_message_size]`"
                  ]
                }
              ]
            }
          },
          "docs": ["The `Event` enum of this pallet"]
        },
        {
          "id": 443,
          "path": ["polkadot_runtime_parachains", "disputes", "pallet", "Event"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "DisputeInitiated",
                  "fields": [
                    {
                      "typeId": 321,
                      "typeName": "CandidateHash",
                      "docs": []
                    },
                    {
                      "typeId": 444,
                      "typeName": "DisputeLocation",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["A dispute has been initiated. \\[candidate hash, dispute location\\]"]
                },
                {
                  "name": "DisputeConcluded",
                  "fields": [
                    {
                      "typeId": 321,
                      "typeName": "CandidateHash",
                      "docs": []
                    },
                    {
                      "typeId": 445,
                      "typeName": "DisputeResult",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "A dispute has concluded for or against a candidate.",
                    "`\\[para id, candidate hash, dispute result\\]`"
                  ]
                },
                {
                  "name": "Revert",
                  "fields": [
                    {
                      "typeId": 4,
                      "typeName": "BlockNumberFor<T>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "A dispute has concluded with supermajority against a candidate.",
                    "Block authors should no longer build on top of this head and should",
                    "instead revert the block at the given height. This should be the",
                    "number of the child of the last known valid block in the chain."
                  ]
                }
              ]
            }
          },
          "docs": ["The `Event` enum of this pallet"]
        },
        {
          "id": 444,
          "path": ["polkadot_runtime_parachains", "disputes", "DisputeLocation"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Local",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Remote",
                  "fields": [],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 445,
          "path": ["polkadot_runtime_parachains", "disputes", "DisputeResult"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Valid",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Invalid",
                  "fields": [],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 446,
          "path": ["polkadot_runtime_common", "paras_registrar", "pallet", "Event"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Registered",
                  "fields": [
                    {
                      "name": "para_id",
                      "typeId": 134,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "manager",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Deregistered",
                  "fields": [
                    {
                      "name": "para_id",
                      "typeId": 134,
                      "typeName": "ParaId",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Reserved",
                  "fields": [
                    {
                      "name": "para_id",
                      "typeId": 134,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Swapped",
                  "fields": [
                    {
                      "name": "para_id",
                      "typeId": 134,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "other_id",
                      "typeId": 134,
                      "typeName": "ParaId",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                }
              ]
            }
          },
          "docs": ["The `Event` enum of this pallet"]
        },
        {
          "id": 447,
          "path": ["polkadot_runtime_common", "slots", "pallet", "Event"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "NewLeasePeriod",
                  "fields": [
                    {
                      "name": "lease_period",
                      "typeId": 4,
                      "typeName": "LeasePeriodOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["A new `[lease_period]` is beginning."]
                },
                {
                  "name": "Leased",
                  "fields": [
                    {
                      "name": "para_id",
                      "typeId": 134,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "leaser",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "period_begin",
                      "typeId": 4,
                      "typeName": "LeasePeriodOf<T>",
                      "docs": []
                    },
                    {
                      "name": "period_count",
                      "typeId": 4,
                      "typeName": "LeasePeriodOf<T>",
                      "docs": []
                    },
                    {
                      "name": "extra_reserved",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "total_amount",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "A para has won the right to a continuous set of lease periods as a parachain.",
                    "First balance is any extra amount reserved on top of the para's existing deposit.",
                    "Second balance is the total amount reserved."
                  ]
                }
              ]
            }
          },
          "docs": ["The `Event` enum of this pallet"]
        },
        {
          "id": 448,
          "path": ["polkadot_runtime_common", "auctions", "pallet", "Event"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "AuctionStarted",
                  "fields": [
                    {
                      "name": "auction_index",
                      "typeId": 4,
                      "typeName": "AuctionIndex",
                      "docs": []
                    },
                    {
                      "name": "lease_period",
                      "typeId": 4,
                      "typeName": "LeasePeriodOf<T>",
                      "docs": []
                    },
                    {
                      "name": "ending",
                      "typeId": 4,
                      "typeName": "BlockNumberFor<T>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "An auction started. Provides its index and the block number where it will begin to",
                    "close and the first lease period of the quadruplet that is auctioned."
                  ]
                },
                {
                  "name": "AuctionClosed",
                  "fields": [
                    {
                      "name": "auction_index",
                      "typeId": 4,
                      "typeName": "AuctionIndex",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": ["An auction ended. All funds become unreserved."]
                },
                {
                  "name": "Reserved",
                  "fields": [
                    {
                      "name": "bidder",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "extra_reserved",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "total_amount",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Funds were reserved for a winning bid. First balance is the extra amount reserved.",
                    "Second is the total."
                  ]
                },
                {
                  "name": "Unreserved",
                  "fields": [
                    {
                      "name": "bidder",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": ["Funds were unreserved since bidder is no longer active. `[bidder, amount]`"]
                },
                {
                  "name": "ReserveConfiscated",
                  "fields": [
                    {
                      "name": "para_id",
                      "typeId": 134,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "leaser",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Someone attempted to lease the same slot twice for a parachain. The amount is held in",
                    "reserve but no parachain slot has been leased."
                  ]
                },
                {
                  "name": "BidAccepted",
                  "fields": [
                    {
                      "name": "bidder",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "para_id",
                      "typeId": 134,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "first_slot",
                      "typeId": 4,
                      "typeName": "LeasePeriodOf<T>",
                      "docs": []
                    },
                    {
                      "name": "last_slot",
                      "typeId": 4,
                      "typeName": "LeasePeriodOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": ["A new bid has been accepted as the current winner."]
                },
                {
                  "name": "WinningOffset",
                  "fields": [
                    {
                      "name": "auction_index",
                      "typeId": 4,
                      "typeName": "AuctionIndex",
                      "docs": []
                    },
                    {
                      "name": "block_number",
                      "typeId": 4,
                      "typeName": "BlockNumberFor<T>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "The winning offset was chosen for an auction. This will map into the `Winning` storage",
                    "map."
                  ]
                }
              ]
            }
          },
          "docs": ["The `Event` enum of this pallet"]
        },
        {
          "id": 449,
          "path": ["polkadot_runtime_common", "crowdloan", "pallet", "Event"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Created",
                  "fields": [
                    {
                      "name": "para_id",
                      "typeId": 134,
                      "typeName": "ParaId",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["Create a new crowdloaning campaign."]
                },
                {
                  "name": "Contributed",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "fund_index",
                      "typeId": 134,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": ["Contributed to a crowd sale."]
                },
                {
                  "name": "Withdrew",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "fund_index",
                      "typeId": 134,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": ["Withdrew full balance of a contributor."]
                },
                {
                  "name": "PartiallyRefunded",
                  "fields": [
                    {
                      "name": "para_id",
                      "typeId": 134,
                      "typeName": "ParaId",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "The loans in a fund have been partially dissolved, i.e. there are some left",
                    "over child keys that still need to be killed."
                  ]
                },
                {
                  "name": "AllRefunded",
                  "fields": [
                    {
                      "name": "para_id",
                      "typeId": 134,
                      "typeName": "ParaId",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": ["All loans in a fund have been refunded."]
                },
                {
                  "name": "Dissolved",
                  "fields": [
                    {
                      "name": "para_id",
                      "typeId": 134,
                      "typeName": "ParaId",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": ["Fund is dissolved."]
                },
                {
                  "name": "HandleBidResult",
                  "fields": [
                    {
                      "name": "para_id",
                      "typeId": 134,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "result",
                      "typeId": 33,
                      "typeName": "DispatchResult",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": ["The result of trying to submit a new bid to the Slots pallet."]
                },
                {
                  "name": "Edited",
                  "fields": [
                    {
                      "name": "para_id",
                      "typeId": 134,
                      "typeName": "ParaId",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": ["The configuration to a crowdloan has been edited."]
                },
                {
                  "name": "MemoUpdated",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "para_id",
                      "typeId": 134,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "memo",
                      "typeId": 13,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": ["A memo has been updated."]
                },
                {
                  "name": "AddedToNewRaise",
                  "fields": [
                    {
                      "name": "para_id",
                      "typeId": 134,
                      "typeName": "ParaId",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": ["A parachain has been moved to `NewRaise`"]
                }
              ]
            }
          },
          "docs": ["The `Event` enum of this pallet"]
        },
        {
          "id": 450,
          "path": ["pallet_xcm", "pallet", "Event"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Attempted",
                  "fields": [
                    {
                      "name": "outcome",
                      "typeId": 451,
                      "typeName": "xcm::latest::Outcome",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["Execution of an XCM message was attempted."]
                },
                {
                  "name": "Sent",
                  "fields": [
                    {
                      "name": "origin",
                      "typeId": 136,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "destination",
                      "typeId": 136,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "message",
                      "typeId": 378,
                      "typeName": "Xcm<()>",
                      "docs": []
                    },
                    {
                      "name": "message_id",
                      "typeId": 1,
                      "typeName": "XcmHash",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": ["A XCM message was sent."]
                },
                {
                  "name": "UnexpectedResponse",
                  "fields": [
                    {
                      "name": "origin",
                      "typeId": 136,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "query_id",
                      "typeId": 11,
                      "typeName": "QueryId",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Query response received which does not match a registered query. This may be because a",
                    "matching query was never registered, it may be because it is a duplicate response, or",
                    "because the query timed out."
                  ]
                },
                {
                  "name": "ResponseReady",
                  "fields": [
                    {
                      "name": "query_id",
                      "typeId": 11,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "name": "response",
                      "typeId": 387,
                      "typeName": "Response",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Query response has been received and is ready for taking with `take_response`. There is",
                    "no registered notification call."
                  ]
                },
                {
                  "name": "Notified",
                  "fields": [
                    {
                      "name": "query_id",
                      "typeId": 11,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "name": "pallet_index",
                      "typeId": 2,
                      "typeName": "u8",
                      "docs": []
                    },
                    {
                      "name": "call_index",
                      "typeId": 2,
                      "typeName": "u8",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Query response has been received and query is removed. The registered notification has",
                    "been dispatched and executed successfully."
                  ]
                },
                {
                  "name": "NotifyOverweight",
                  "fields": [
                    {
                      "name": "query_id",
                      "typeId": 11,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "name": "pallet_index",
                      "typeId": 2,
                      "typeName": "u8",
                      "docs": []
                    },
                    {
                      "name": "call_index",
                      "typeId": 2,
                      "typeName": "u8",
                      "docs": []
                    },
                    {
                      "name": "actual_weight",
                      "typeId": 9,
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "name": "max_budgeted_weight",
                      "typeId": 9,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Query response has been received and query is removed. The registered notification",
                    "could not be dispatched because the dispatch weight is greater than the maximum weight",
                    "originally budgeted by this runtime for the query result."
                  ]
                },
                {
                  "name": "NotifyDispatchError",
                  "fields": [
                    {
                      "name": "query_id",
                      "typeId": 11,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "name": "pallet_index",
                      "typeId": 2,
                      "typeName": "u8",
                      "docs": []
                    },
                    {
                      "name": "call_index",
                      "typeId": 2,
                      "typeName": "u8",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "Query response has been received and query is removed. There was a general error with",
                    "dispatching the notification call."
                  ]
                },
                {
                  "name": "NotifyDecodeFailed",
                  "fields": [
                    {
                      "name": "query_id",
                      "typeId": 11,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "name": "pallet_index",
                      "typeId": 2,
                      "typeName": "u8",
                      "docs": []
                    },
                    {
                      "name": "call_index",
                      "typeId": 2,
                      "typeName": "u8",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "Query response has been received and query is removed. The dispatch was unable to be",
                    "decoded into a `Call`; this might be due to dispatch function having a signature which",
                    "is not `(origin, QueryId, Response)`."
                  ]
                },
                {
                  "name": "InvalidResponder",
                  "fields": [
                    {
                      "name": "origin",
                      "typeId": 136,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "query_id",
                      "typeId": 11,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "name": "expected_location",
                      "typeId": 397,
                      "typeName": "Option<MultiLocation>",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "Expected query response has been received but the origin location of the response does",
                    "not match that expected. The query remains registered for a later, valid, response to",
                    "be received and acted upon."
                  ]
                },
                {
                  "name": "InvalidResponderVersion",
                  "fields": [
                    {
                      "name": "origin",
                      "typeId": 136,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "query_id",
                      "typeId": 11,
                      "typeName": "QueryId",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": [
                    "Expected query response has been received but the expected origin location placed in",
                    "storage by this runtime previously cannot be decoded. The query remains registered.",
                    "",
                    "This is unexpected (since a location placed in storage in a previously executing",
                    "runtime should be readable prior to query timeout) and dangerous since the possibly",
                    "valid response will be dropped. Manual governance intervention is probably going to be",
                    "needed."
                  ]
                },
                {
                  "name": "ResponseTaken",
                  "fields": [
                    {
                      "name": "query_id",
                      "typeId": 11,
                      "typeName": "QueryId",
                      "docs": []
                    }
                  ],
                  "index": 10,
                  "docs": ["Received query response has been read and removed."]
                },
                {
                  "name": "AssetsTrapped",
                  "fields": [
                    {
                      "name": "hash",
                      "typeId": 12,
                      "typeName": "H256",
                      "docs": []
                    },
                    {
                      "name": "origin",
                      "typeId": 136,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "assets",
                      "typeId": 403,
                      "typeName": "VersionedMultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": ["Some assets have been placed in an asset trap."]
                },
                {
                  "name": "VersionChangeNotified",
                  "fields": [
                    {
                      "name": "destination",
                      "typeId": 136,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "result",
                      "typeId": 4,
                      "typeName": "XcmVersion",
                      "docs": []
                    },
                    {
                      "name": "cost",
                      "typeId": 381,
                      "typeName": "MultiAssets",
                      "docs": []
                    },
                    {
                      "name": "message_id",
                      "typeId": 1,
                      "typeName": "XcmHash",
                      "docs": []
                    }
                  ],
                  "index": 12,
                  "docs": [
                    "An XCM version change notification message has been attempted to be sent.",
                    "",
                    "The cost of sending it (borne by the chain) is included."
                  ]
                },
                {
                  "name": "SupportedVersionChanged",
                  "fields": [
                    {
                      "name": "location",
                      "typeId": 136,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "version",
                      "typeId": 4,
                      "typeName": "XcmVersion",
                      "docs": []
                    }
                  ],
                  "index": 13,
                  "docs": [
                    "The supported version of a location has been changed. This might be through an",
                    "automatic notification or a manual intervention."
                  ]
                },
                {
                  "name": "NotifyTargetSendFail",
                  "fields": [
                    {
                      "name": "location",
                      "typeId": 136,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "query_id",
                      "typeId": 11,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "name": "error",
                      "typeId": 390,
                      "typeName": "XcmError",
                      "docs": []
                    }
                  ],
                  "index": 14,
                  "docs": [
                    "A given location which had a version change subscription was dropped owing to an error",
                    "sending the notification to it."
                  ]
                },
                {
                  "name": "NotifyTargetMigrationFail",
                  "fields": [
                    {
                      "name": "location",
                      "typeId": 350,
                      "typeName": "VersionedMultiLocation",
                      "docs": []
                    },
                    {
                      "name": "query_id",
                      "typeId": 11,
                      "typeName": "QueryId",
                      "docs": []
                    }
                  ],
                  "index": 15,
                  "docs": [
                    "A given location which had a version change subscription was dropped owing to an error",
                    "migrating the location to our new XCM format."
                  ]
                },
                {
                  "name": "InvalidQuerierVersion",
                  "fields": [
                    {
                      "name": "origin",
                      "typeId": 136,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "query_id",
                      "typeId": 11,
                      "typeName": "QueryId",
                      "docs": []
                    }
                  ],
                  "index": 16,
                  "docs": [
                    "Expected query response has been received but the expected querier location placed in",
                    "storage by this runtime previously cannot be decoded. The query remains registered.",
                    "",
                    "This is unexpected (since a location placed in storage in a previously executing",
                    "runtime should be readable prior to query timeout) and dangerous since the possibly",
                    "valid response will be dropped. Manual governance intervention is probably going to be",
                    "needed."
                  ]
                },
                {
                  "name": "InvalidQuerier",
                  "fields": [
                    {
                      "name": "origin",
                      "typeId": 136,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "query_id",
                      "typeId": 11,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "name": "expected_querier",
                      "typeId": 136,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "maybe_actual_querier",
                      "typeId": 397,
                      "typeName": "Option<MultiLocation>",
                      "docs": []
                    }
                  ],
                  "index": 17,
                  "docs": [
                    "Expected query response has been received but the querier location of the response does",
                    "not match the expected. The query remains registered for a later, valid, response to",
                    "be received and acted upon."
                  ]
                },
                {
                  "name": "VersionNotifyStarted",
                  "fields": [
                    {
                      "name": "destination",
                      "typeId": 136,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "cost",
                      "typeId": 381,
                      "typeName": "MultiAssets",
                      "docs": []
                    },
                    {
                      "name": "message_id",
                      "typeId": 1,
                      "typeName": "XcmHash",
                      "docs": []
                    }
                  ],
                  "index": 18,
                  "docs": [
                    "A remote has requested XCM version change notification from us and we have honored it.",
                    "A version information message is sent to them and its cost is included."
                  ]
                },
                {
                  "name": "VersionNotifyRequested",
                  "fields": [
                    {
                      "name": "destination",
                      "typeId": 136,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "cost",
                      "typeId": 381,
                      "typeName": "MultiAssets",
                      "docs": []
                    },
                    {
                      "name": "message_id",
                      "typeId": 1,
                      "typeName": "XcmHash",
                      "docs": []
                    }
                  ],
                  "index": 19,
                  "docs": ["We have requested that a remote chain send us XCM version change notifications."]
                },
                {
                  "name": "VersionNotifyUnrequested",
                  "fields": [
                    {
                      "name": "destination",
                      "typeId": 136,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "cost",
                      "typeId": 381,
                      "typeName": "MultiAssets",
                      "docs": []
                    },
                    {
                      "name": "message_id",
                      "typeId": 1,
                      "typeName": "XcmHash",
                      "docs": []
                    }
                  ],
                  "index": 20,
                  "docs": [
                    "We have requested that a remote chain stops sending us XCM version change",
                    "notifications."
                  ]
                },
                {
                  "name": "FeesPaid",
                  "fields": [
                    {
                      "name": "paying",
                      "typeId": 136,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "fees",
                      "typeId": 381,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 21,
                  "docs": ["Fees were paid from a location for an operation (often for using `SendXcm`)."]
                },
                {
                  "name": "AssetsClaimed",
                  "fields": [
                    {
                      "name": "hash",
                      "typeId": 12,
                      "typeName": "H256",
                      "docs": []
                    },
                    {
                      "name": "origin",
                      "typeId": 136,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "assets",
                      "typeId": 403,
                      "typeName": "VersionedMultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 22,
                  "docs": ["Some assets have been claimed from an asset trap"]
                }
              ]
            }
          },
          "docs": ["The `Event` enum of this pallet"]
        },
        {
          "id": 451,
          "path": ["xcm", "v3", "traits", "Outcome"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Complete",
                  "fields": [
                    {
                      "typeId": 9,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Incomplete",
                  "fields": [
                    {
                      "typeId": 9,
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "typeId": 390,
                      "typeName": "Error",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Error",
                  "fields": [
                    {
                      "typeId": 390,
                      "typeName": "Error",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 452,
          "path": ["pallet_message_queue", "pallet", "Event"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "ProcessingFailed",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 1,
                      "typeName": "[u8; 32]",
                      "docs": []
                    },
                    {
                      "name": "origin",
                      "typeId": 413,
                      "typeName": "MessageOriginOf<T>",
                      "docs": []
                    },
                    {
                      "name": "error",
                      "typeId": 453,
                      "typeName": "ProcessMessageError",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["Message discarded due to an error in the `MessageProcessor` (usually a format error)."]
                },
                {
                  "name": "Processed",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 1,
                      "typeName": "[u8; 32]",
                      "docs": []
                    },
                    {
                      "name": "origin",
                      "typeId": 413,
                      "typeName": "MessageOriginOf<T>",
                      "docs": []
                    },
                    {
                      "name": "weight_used",
                      "typeId": 9,
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "name": "success",
                      "typeId": 44,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": ["Message is processed."]
                },
                {
                  "name": "OverweightEnqueued",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 1,
                      "typeName": "[u8; 32]",
                      "docs": []
                    },
                    {
                      "name": "origin",
                      "typeId": 413,
                      "typeName": "MessageOriginOf<T>",
                      "docs": []
                    },
                    {
                      "name": "page_index",
                      "typeId": 4,
                      "typeName": "PageIndex",
                      "docs": []
                    },
                    {
                      "name": "message_index",
                      "typeId": 4,
                      "typeName": "T::Size",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": ["Message placed in overweight queue."]
                },
                {
                  "name": "PageReaped",
                  "fields": [
                    {
                      "name": "origin",
                      "typeId": 413,
                      "typeName": "MessageOriginOf<T>",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "PageIndex",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": ["This page was reaped."]
                }
              ]
            }
          },
          "docs": ["The `Event` enum of this pallet"]
        },
        {
          "id": 453,
          "path": ["frame_support", "traits", "messages", "ProcessMessageError"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "BadFormat",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Corrupt",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Unsupported",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Overweight",
                  "fields": [
                    {
                      "typeId": 9,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "Yield",
                  "fields": [],
                  "index": 4,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 454,
          "path": ["frame_system", "Phase"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "ApplyExtrinsic",
                  "fields": [
                    {
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Finalization",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Initialization",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 455,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 12
            }
          },
          "docs": []
        },
        {
          "id": 456,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 31
            }
          },
          "docs": []
        },
        {
          "id": 457,
          "path": ["frame_system", "LastRuntimeUpgradeInfo"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "spec_version",
                  "typeId": 79,
                  "typeName": "codec::Compact<u32>",
                  "docs": []
                },
                {
                  "name": "spec_name",
                  "typeId": 458,
                  "typeName": "sp_runtime::RuntimeString",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 458,
          "path": [],
          "params": [],
          "type": {
            "tag": "Primitive",
            "value": {
              "kind": "str"
            }
          },
          "docs": []
        },
        {
          "id": 459,
          "path": ["frame_system", "limits", "BlockWeights"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "base_block",
                  "typeId": 9,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "max_block",
                  "typeId": 9,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "per_class",
                  "typeId": 460,
                  "typeName": "PerDispatchClass<WeightsPerClass>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 460,
          "path": ["frame_support", "dispatch", "PerDispatchClass"],
          "params": [
            {
              "name": "T",
              "typeId": 461
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "normal",
                  "typeId": 461,
                  "typeName": "T",
                  "docs": []
                },
                {
                  "name": "operational",
                  "typeId": 461,
                  "typeName": "T",
                  "docs": []
                },
                {
                  "name": "mandatory",
                  "typeId": 461,
                  "typeName": "T",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 461,
          "path": ["frame_system", "limits", "WeightsPerClass"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "base_extrinsic",
                  "typeId": 9,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "max_extrinsic",
                  "typeId": 420,
                  "typeName": "Option<Weight>",
                  "docs": []
                },
                {
                  "name": "max_total",
                  "typeId": 420,
                  "typeName": "Option<Weight>",
                  "docs": []
                },
                {
                  "name": "reserved",
                  "typeId": 420,
                  "typeName": "Option<Weight>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 462,
          "path": ["frame_system", "limits", "BlockLength"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "max",
                  "typeId": 463,
                  "typeName": "PerDispatchClass<u32>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 463,
          "path": ["frame_support", "dispatch", "PerDispatchClass"],
          "params": [
            {
              "name": "T",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "normal",
                  "typeId": 4,
                  "typeName": "T",
                  "docs": []
                },
                {
                  "name": "operational",
                  "typeId": 4,
                  "typeName": "T",
                  "docs": []
                },
                {
                  "name": "mandatory",
                  "typeId": 4,
                  "typeName": "T",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 464,
          "path": ["sp_weights", "RuntimeDbWeight"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "read",
                  "typeId": 11,
                  "typeName": "u64",
                  "docs": []
                },
                {
                  "name": "write",
                  "typeId": 11,
                  "typeName": "u64",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 465,
          "path": ["sp_version", "RuntimeVersion"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "spec_name",
                  "typeId": 458,
                  "typeName": "RuntimeString",
                  "docs": []
                },
                {
                  "name": "impl_name",
                  "typeId": 458,
                  "typeName": "RuntimeString",
                  "docs": []
                },
                {
                  "name": "authoring_version",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "spec_version",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "impl_version",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "apis",
                  "typeId": 466,
                  "typeName": "ApisVec",
                  "docs": []
                },
                {
                  "name": "transaction_version",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "state_version",
                  "typeId": 2,
                  "typeName": "u8",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 466,
          "path": ["Cow"],
          "params": [
            {
              "name": "T",
              "typeId": 467
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 467,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 467,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 468
            }
          },
          "docs": []
        },
        {
          "id": 468,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [172, 4]
            }
          },
          "docs": []
        },
        {
          "id": 469,
          "path": ["frame_system", "pallet", "Error"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "InvalidSpecName",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "The name of specification does not match between the current runtime",
                    "and the new runtime."
                  ]
                },
                {
                  "name": "SpecVersionNeedsToIncrease",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "The specification version is not allowed to decrease between the current runtime",
                    "and the new runtime."
                  ]
                },
                {
                  "name": "FailedToExtractRuntimeVersion",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Failed to extract the runtime version from the new runtime.",
                    "",
                    "Either calling `Core_version` or decoding `RuntimeVersion` failed."
                  ]
                },
                {
                  "name": "NonDefaultComposite",
                  "fields": [],
                  "index": 3,
                  "docs": ["Suicide called when the account has non-default composite data."]
                },
                {
                  "name": "NonZeroRefCount",
                  "fields": [],
                  "index": 4,
                  "docs": ["There is a non-zero reference count preventing the account from being purged."]
                },
                {
                  "name": "CallFiltered",
                  "fields": [],
                  "index": 5,
                  "docs": ["The origin filter prevent the call to be dispatched."]
                }
              ]
            }
          },
          "docs": ["Error for the System pallet"]
        },
        {
          "id": 470,
          "path": ["bounded_collections", "bounded_vec", "BoundedVec"],
          "params": [
            {
              "name": "T",
              "typeId": 471
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 473,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 471,
          "path": ["Option"],
          "params": [
            {
              "name": "T",
              "typeId": 472
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 472,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 472,
          "path": ["pallet_scheduler", "Scheduled"],
          "params": [
            {
              "name": "Name",
              "typeId": 1
            },
            {
              "name": "Call",
              "typeId": 67
            },
            {
              "name": "BlockNumber",
              "typeId": 4
            },
            {
              "name": "PalletsOrigin",
              "typeId": 130
            },
            {
              "name": "AccountId",
              "typeId": 0
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "maybe_id",
                  "typeId": 32,
                  "typeName": "Option<Name>",
                  "docs": []
                },
                {
                  "name": "priority",
                  "typeId": 2,
                  "typeName": "schedule::Priority",
                  "docs": []
                },
                {
                  "name": "call",
                  "typeId": 67,
                  "typeName": "Call",
                  "docs": []
                },
                {
                  "name": "maybe_periodic",
                  "typeId": 74,
                  "typeName": "Option<schedule::Period<BlockNumber>>",
                  "docs": []
                },
                {
                  "name": "origin",
                  "typeId": 130,
                  "typeName": "PalletsOrigin",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 473,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 471
            }
          },
          "docs": []
        },
        {
          "id": 474,
          "path": ["pallet_scheduler", "pallet", "Error"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "FailedToSchedule",
                  "fields": [],
                  "index": 0,
                  "docs": ["Failed to schedule a call"]
                },
                {
                  "name": "NotFound",
                  "fields": [],
                  "index": 1,
                  "docs": ["Cannot find the scheduled call."]
                },
                {
                  "name": "TargetBlockNumberInPast",
                  "fields": [],
                  "index": 2,
                  "docs": ["Given target block number is in the past."]
                },
                {
                  "name": "RescheduleNoChange",
                  "fields": [],
                  "index": 3,
                  "docs": ["Reschedule failed because it does not change scheduled time."]
                },
                {
                  "name": "Named",
                  "fields": [],
                  "index": 4,
                  "docs": ["Attempt to use a non-named function on a named task."]
                }
              ]
            }
          },
          "docs": ["The `Error` enum of this pallet."]
        },
        {
          "id": 475,
          "path": ["pallet_preimage", "RequestStatus"],
          "params": [
            {
              "name": "AccountId",
              "typeId": 0
            },
            {
              "name": "Balance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Unrequested",
                  "fields": [
                    {
                      "name": "deposit",
                      "typeId": 269,
                      "typeName": "(AccountId, Balance)",
                      "docs": []
                    },
                    {
                      "name": "len",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Requested",
                  "fields": [
                    {
                      "name": "deposit",
                      "typeId": 476,
                      "typeName": "Option<(AccountId, Balance)>",
                      "docs": []
                    },
                    {
                      "name": "count",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "len",
                      "typeId": 270,
                      "typeName": "Option<u32>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 476,
          "path": ["Option"],
          "params": [
            {
              "name": "T",
              "typeId": 269
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 269,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 477,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [12, 4]
            }
          },
          "docs": []
        },
        {
          "id": 478,
          "path": ["bounded_collections", "bounded_vec", "BoundedVec"],
          "params": [
            {
              "name": "T",
              "typeId": 2
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 13,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 479,
          "path": ["pallet_preimage", "pallet", "Error"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "TooBig",
                  "fields": [],
                  "index": 0,
                  "docs": ["Preimage is too large to store on-chain."]
                },
                {
                  "name": "AlreadyNoted",
                  "fields": [],
                  "index": 1,
                  "docs": ["Preimage has already been noted on-chain."]
                },
                {
                  "name": "NotAuthorized",
                  "fields": [],
                  "index": 2,
                  "docs": ["The user is not authorized to perform this action."]
                },
                {
                  "name": "NotNoted",
                  "fields": [],
                  "index": 3,
                  "docs": ["The preimage cannot be removed since it has not yet been noted."]
                },
                {
                  "name": "Requested",
                  "fields": [],
                  "index": 4,
                  "docs": ["A preimage may not be removed when there are outstanding requests."]
                },
                {
                  "name": "NotRequested",
                  "fields": [],
                  "index": 5,
                  "docs": ["The preimage request cannot be removed since no outstanding requests exist."]
                }
              ]
            }
          },
          "docs": ["The `Error` enum of this pallet."]
        },
        {
          "id": 480,
          "path": ["bounded_collections", "weak_bounded_vec", "WeakBoundedVec"],
          "params": [
            {
              "name": "T",
              "typeId": 481
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 482,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 481,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [80, 11]
            }
          },
          "docs": []
        },
        {
          "id": 482,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 481
            }
          },
          "docs": []
        },
        {
          "id": 483,
          "path": ["bounded_collections", "bounded_vec", "BoundedVec"],
          "params": [
            {
              "name": "T",
              "typeId": 1
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 484,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 484,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 1
            }
          },
          "docs": []
        },
        {
          "id": 485,
          "path": ["Option"],
          "params": [
            {
              "name": "T",
              "typeId": 486
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 486,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 486,
          "path": ["sp_consensus_babe", "digests", "PreDigest"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Primary",
                  "fields": [
                    {
                      "typeId": 487,
                      "typeName": "PrimaryPreDigest",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "SecondaryPlain",
                  "fields": [
                    {
                      "typeId": 489,
                      "typeName": "SecondaryPlainPreDigest",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "SecondaryVRF",
                  "fields": [
                    {
                      "typeId": 490,
                      "typeName": "SecondaryVRFPreDigest",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 487,
          "path": ["sp_consensus_babe", "digests", "PrimaryPreDigest"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "authority_index",
                  "typeId": 4,
                  "typeName": "super::AuthorityIndex",
                  "docs": []
                },
                {
                  "name": "slot",
                  "typeId": 81,
                  "typeName": "Slot",
                  "docs": []
                },
                {
                  "name": "vrf_signature",
                  "typeId": 488,
                  "typeName": "VrfSignature",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 488,
          "path": ["sp_core", "sr25519", "vrf", "VrfSignature"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "output",
                  "typeId": 1,
                  "typeName": "VrfOutput",
                  "docs": []
                },
                {
                  "name": "proof",
                  "typeId": 114,
                  "typeName": "VrfProof",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 489,
          "path": ["sp_consensus_babe", "digests", "SecondaryPlainPreDigest"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "authority_index",
                  "typeId": 4,
                  "typeName": "super::AuthorityIndex",
                  "docs": []
                },
                {
                  "name": "slot",
                  "typeId": 81,
                  "typeName": "Slot",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 490,
          "path": ["sp_consensus_babe", "digests", "SecondaryVRFPreDigest"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "authority_index",
                  "typeId": 4,
                  "typeName": "super::AuthorityIndex",
                  "docs": []
                },
                {
                  "name": "slot",
                  "typeId": 81,
                  "typeName": "Slot",
                  "docs": []
                },
                {
                  "name": "vrf_signature",
                  "typeId": 488,
                  "typeName": "VrfSignature",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 491,
          "path": ["sp_consensus_babe", "BabeEpochConfiguration"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "c",
                  "typeId": 84,
                  "typeName": "(u64, u64)",
                  "docs": []
                },
                {
                  "name": "allowed_slots",
                  "typeId": 85,
                  "typeName": "AllowedSlots",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 492,
          "path": ["bounded_collections", "bounded_vec", "BoundedVec"],
          "params": [
            {
              "name": "T",
              "typeId": 493
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 494,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 493,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [11, 4]
            }
          },
          "docs": []
        },
        {
          "id": 494,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 493
            }
          },
          "docs": []
        },
        {
          "id": 495,
          "path": ["pallet_babe", "pallet", "Error"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "InvalidEquivocationProof",
                  "fields": [],
                  "index": 0,
                  "docs": ["An equivocation proof provided as part of an equivocation report is invalid."]
                },
                {
                  "name": "InvalidKeyOwnershipProof",
                  "fields": [],
                  "index": 1,
                  "docs": ["A key ownership proof provided as part of an equivocation report is invalid."]
                },
                {
                  "name": "DuplicateOffenceReport",
                  "fields": [],
                  "index": 2,
                  "docs": ["A given equivocation report is valid but already previously reported."]
                },
                {
                  "name": "InvalidConfiguration",
                  "fields": [],
                  "index": 3,
                  "docs": ["Submitted configuration is invalid."]
                }
              ]
            }
          },
          "docs": ["The `Error` enum of this pallet."]
        },
        {
          "id": 496,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [0, 6, 44]
            }
          },
          "docs": []
        },
        {
          "id": 497,
          "path": ["pallet_indices", "pallet", "Error"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "NotAssigned",
                  "fields": [],
                  "index": 0,
                  "docs": ["The index was not already assigned."]
                },
                {
                  "name": "NotOwner",
                  "fields": [],
                  "index": 1,
                  "docs": ["The index is assigned to another account."]
                },
                {
                  "name": "InUse",
                  "fields": [],
                  "index": 2,
                  "docs": ["The index was not available."]
                },
                {
                  "name": "NotTransfer",
                  "fields": [],
                  "index": 3,
                  "docs": ["The source and destination accounts are identical."]
                },
                {
                  "name": "Permanent",
                  "fields": [],
                  "index": 4,
                  "docs": ["The index is permanent and may not be freed/changed."]
                }
              ]
            }
          },
          "docs": ["The `Error` enum of this pallet."]
        },
        {
          "id": 498,
          "path": ["bounded_collections", "weak_bounded_vec", "WeakBoundedVec"],
          "params": [
            {
              "name": "T",
              "typeId": 499
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 501,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 499,
          "path": ["pallet_balances", "types", "BalanceLock"],
          "params": [
            {
              "name": "Balance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "id",
                  "typeId": 172,
                  "typeName": "LockIdentifier",
                  "docs": []
                },
                {
                  "name": "amount",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "reasons",
                  "typeId": 500,
                  "typeName": "Reasons",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 500,
          "path": ["pallet_balances", "types", "Reasons"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Fee",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Misc",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "All",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 501,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 499
            }
          },
          "docs": []
        },
        {
          "id": 502,
          "path": ["bounded_collections", "bounded_vec", "BoundedVec"],
          "params": [
            {
              "name": "T",
              "typeId": 503
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 504,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 503,
          "path": ["pallet_balances", "types", "ReserveData"],
          "params": [
            {
              "name": "ReserveIdentifier",
              "typeId": 172
            },
            {
              "name": "Balance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "id",
                  "typeId": 172,
                  "typeName": "ReserveIdentifier",
                  "docs": []
                },
                {
                  "name": "amount",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 504,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 503
            }
          },
          "docs": []
        },
        {
          "id": 505,
          "path": ["bounded_collections", "bounded_vec", "BoundedVec"],
          "params": [
            {
              "name": "T",
              "typeId": 506
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 508,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 506,
          "path": ["pallet_balances", "types", "IdAmount"],
          "params": [
            {
              "name": "Id",
              "typeId": 507
            },
            {
              "name": "Balance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "id",
                  "typeId": 507,
                  "typeName": "Id",
                  "docs": []
                },
                {
                  "name": "amount",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 507,
          "path": ["polkadot_runtime", "RuntimeHoldReason"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": []
            }
          },
          "docs": []
        },
        {
          "id": 508,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 506
            }
          },
          "docs": []
        },
        {
          "id": 509,
          "path": ["bounded_collections", "bounded_vec", "BoundedVec"],
          "params": [
            {
              "name": "T",
              "typeId": 510
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 511,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 510,
          "path": ["pallet_balances", "types", "IdAmount"],
          "params": [
            {
              "name": "Id",
              "typeId": 34
            },
            {
              "name": "Balance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "id",
                  "typeId": 34,
                  "typeName": "Id",
                  "docs": []
                },
                {
                  "name": "amount",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 511,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 510
            }
          },
          "docs": []
        },
        {
          "id": 512,
          "path": ["pallet_balances", "pallet", "Error"],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "VestingBalance",
                  "fields": [],
                  "index": 0,
                  "docs": ["Vesting balance too high to send value."]
                },
                {
                  "name": "LiquidityRestrictions",
                  "fields": [],
                  "index": 1,
                  "docs": ["Account liquidity restrictions prevent withdrawal."]
                },
                {
                  "name": "InsufficientBalance",
                  "fields": [],
                  "index": 2,
                  "docs": ["Balance too low to send value."]
                },
                {
                  "name": "ExistentialDeposit",
                  "fields": [],
                  "index": 3,
                  "docs": ["Value too low to create account due to existential deposit."]
                },
                {
                  "name": "Expendability",
                  "fields": [],
                  "index": 4,
                  "docs": ["Transfer/payment would kill account."]
                },
                {
                  "name": "ExistingVestingSchedule",
                  "fields": [],
                  "index": 5,
                  "docs": ["A vesting schedule already exists for this account."]
                },
                {
                  "name": "DeadAccount",
                  "fields": [],
                  "index": 6,
                  "docs": ["Beneficiary account must pre-exist."]
                },
                {
                  "name": "TooManyReserves",
                  "fields": [],
                  "index": 7,
                  "docs": ["Number of named reserves exceed `MaxReserves`."]
                },
                {
                  "name": "TooManyHolds",
                  "fields": [],
                  "index": 8,
                  "docs": ["Number of holds exceed `MaxHolds`."]
                },
                {
                  "name": "TooManyFreezes",
                  "fields": [],
                  "index": 9,
                  "docs": ["Number of freezes exceed `MaxFreezes`."]
                }
              ]
            }
          },
          "docs": ["The `Error` enum of this pallet."]
        },
        {
          "id": 513,
          "path": ["sp_arithmetic", "fixed_point", "FixedU128"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 6,
                  "typeName": "u128",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 514,
          "path": ["pallet_transaction_payment", "Releases"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "V1Ancient",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "V2",
                  "fields": [],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 515,
          "path": ["pallet_staking", "StakingLedger"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "stash",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "total",
                  "typeId": 60,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "active",
                  "typeId": 60,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "unlocking",
                  "typeId": 516,
                  "typeName": "BoundedVec<UnlockChunk<BalanceOf<T>>, T::MaxUnlockingChunks>",
                  "docs": []
                },
                {
                  "name": "claimed_rewards",
                  "typeId": 519,
                  "typeName": "BoundedVec<EraIndex, T::HistoryDepth>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 516,
          "path": ["bounded_collections", "bounded_vec", "BoundedVec"],
          "params": [
            {
              "name": "T",
              "typeId": 517
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 518,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 517,
          "path": ["pallet_staking", "UnlockChunk"],
          "params": [
            {
              "name": "Balance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "value",
                  "typeId": 60,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "era",
                  "typeId": 79,
                  "typeName": "EraIndex",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 518,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 517
            }
          },
          "docs": []
        },
        {
          "id": 519,
          "path": ["bounded_collections", "bounded_vec", "BoundedVec"],
          "params": [
            {
              "name": "T",
              "typeId": 4
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 97,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 520,
          "path": ["pallet_staking", "Nominations"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "targets",
                  "typeId": 521,
                  "typeName": "BoundedVec<T::AccountId, MaxNominationsOf<T>>",
                  "docs": []
                },
                {
                  "name": "submitted_in",
                  "typeId": 4,
                  "typeName": "EraIndex",
                  "docs": []
                },
                {
                  "name": "suppressed",
                  "typeId": 44,
                  "typeName": "bool",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 521,
          "path": ["bounded_collections", "bounded_vec", "BoundedVec"],
          "params": [
            {
              "name": "T",
              "typeId": 0
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 92,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 522,
          "path": ["pallet_staking", "ActiveEraInfo"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "index",
                  "typeId": 4,
                  "typeName": "EraIndex",
                  "docs": []
                },
                {
                  "name": "start",
                  "typeId": 523,
                  "typeName": "Option<u64>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 523,
          "path": ["Option"],
          "params": [
            {
              "name": "T",
              "typeId": 11
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 11,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 524,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [4, 0]
            }
          },
          "docs": []
        },
        {
          "id": 525,
          "path": ["pallet_staking", "EraRewardPoints"],
          "params": [
            {
              "name": "AccountId",
              "typeId": 0
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "total",
                  "typeId": 4,
                  "typeName": "RewardPoint",
                  "docs": []
                },
                {
                  "name": "individual",
                  "typeId": 526,
                  "typeName": "BTreeMap<AccountId, RewardPoint>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 526,
          "path": ["BTreeMap"],
          "params": [
            {
              "name": "K",
              "typeId": 0
            },
            {
              "name": "V",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 527,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 527,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 528
            }
          },
          "docs": []
        },
        {
          "id": 528,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [0, 4]
            }
          },
          "docs": []
        },
        {
          "id": 529,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 530
            }
          },
          "docs": []
        },
        {
          "id": 530,
          "path": ["pallet_staking", "UnappliedSlash"],
          "params": [
            {
              "name": "AccountId",
              "typeId": 0
            },
            {
              "name": "Balance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "validator",
                  "typeId": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "own",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "others",
                  "typeId": 268,
                  "typeName": "Vec<(AccountId, Balance)>",
                  "docs": []
                },
                {
                  "name": "reporters",
                  "typeId": 92,
                  "typeName": "Vec<AccountId>",
                  "docs": []
                },
                {
                  "name": "payout",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 531,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [41, 6]
            }
          },
          "docs": []
        },
        {
          "id": 532,
          "path": ["pallet_staking", "slashing", "SlashingSpans"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "span_index",
                  "typeId": 4,
                  "typeName": "SpanIndex",
                  "docs": []
                },
                {
                  "name": "last_start",
                  "typeId": 4,
                  "typeName": "EraIndex",
                  "docs": []
                },
                {
                  "name": "last_nonzero_slash",
                  "typeId": 4,
                  "typeName": "EraIndex",
                  "docs": []
                },
                {
                  "name": "prior",
                  "typeId": 97,
                  "typeName": "Vec<EraIndex>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 533,
          "path": ["pallet_staking", "slashing", "SpanRecord"],
          "params": [
            {
              "name": "Balance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "slashed",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "paid_out",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 534,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 535
            }
          },
          "docs": []
        },
        {
          "id": 535,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [4, 44]
            }
          },
          "docs": []
        },
        {
          "id": 536,
          "path": ["pallet_staking", "pallet", "pallet", "Error"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "NotController",
                  "fields": [],
                  "index": 0,
                  "docs": ["Not a controller account."]
                },
                {
                  "name": "NotStash",
                  "fields": [],
                  "index": 1,
                  "docs": ["Not a stash account."]
                },
                {
                  "name": "AlreadyBonded",
                  "fields": [],
                  "index": 2,
                  "docs": ["Stash is already bonded."]
                },
                {
                  "name": "AlreadyPaired",
                  "fields": [],
                  "index": 3,
                  "docs": ["Controller is already paired."]
                },
                {
                  "name": "EmptyTargets",
                  "fields": [],
                  "index": 4,
                  "docs": ["Targets cannot be empty."]
                },
                {
                  "name": "DuplicateIndex",
                  "fields": [],
                  "index": 5,
                  "docs": ["Duplicate index."]
                },
                {
                  "name": "InvalidSlashIndex",
                  "fields": [],
                  "index": 6,
                  "docs": ["Slash record index out of bounds."]
                },
                {
                  "name": "InsufficientBond",
                  "fields": [],
                  "index": 7,
                  "docs": [
                    "Cannot have a validator or nominator role, with value less than the minimum defined by",
                    "governance (see `MinValidatorBond` and `MinNominatorBond`). If unbonding is the",
                    "intention, `chill` first to remove one's role as validator/nominator."
                  ]
                },
                {
                  "name": "NoMoreChunks",
                  "fields": [],
                  "index": 8,
                  "docs": ["Can not schedule more unlock chunks."]
                },
                {
                  "name": "NoUnlockChunk",
                  "fields": [],
                  "index": 9,
                  "docs": ["Can not rebond without unlocking chunks."]
                },
                {
                  "name": "FundedTarget",
                  "fields": [],
                  "index": 10,
                  "docs": ["Attempting to target a stash that still has funds."]
                },
                {
                  "name": "InvalidEraToReward",
                  "fields": [],
                  "index": 11,
                  "docs": ["Invalid era to reward."]
                },
                {
                  "name": "InvalidNumberOfNominations",
                  "fields": [],
                  "index": 12,
                  "docs": ["Invalid number of nominations."]
                },
                {
                  "name": "NotSortedAndUnique",
                  "fields": [],
                  "index": 13,
                  "docs": ["Items are not sorted and unique."]
                },
                {
                  "name": "AlreadyClaimed",
                  "fields": [],
                  "index": 14,
                  "docs": ["Rewards for this era have already been claimed for this validator."]
                },
                {
                  "name": "IncorrectHistoryDepth",
                  "fields": [],
                  "index": 15,
                  "docs": ["Incorrect previous history depth input provided."]
                },
                {
                  "name": "IncorrectSlashingSpans",
                  "fields": [],
                  "index": 16,
                  "docs": ["Incorrect number of slashing spans provided."]
                },
                {
                  "name": "BadState",
                  "fields": [],
                  "index": 17,
                  "docs": ["Internal state has become somehow corrupted and the operation cannot continue."]
                },
                {
                  "name": "TooManyTargets",
                  "fields": [],
                  "index": 18,
                  "docs": ["Too many nomination targets supplied."]
                },
                {
                  "name": "BadTarget",
                  "fields": [],
                  "index": 19,
                  "docs": ["A nomination target was supplied that was blocked or otherwise not a validator."]
                },
                {
                  "name": "CannotChillOther",
                  "fields": [],
                  "index": 20,
                  "docs": ["The user has enough bond and thus cannot be chilled forcefully by an external person."]
                },
                {
                  "name": "TooManyNominators",
                  "fields": [],
                  "index": 21,
                  "docs": [
                    "There are too many nominators in the system. Governance needs to adjust the staking",
                    "settings to keep things safe for the runtime."
                  ]
                },
                {
                  "name": "TooManyValidators",
                  "fields": [],
                  "index": 22,
                  "docs": [
                    "There are too many validator candidates in the system. Governance needs to adjust the",
                    "staking settings to keep things safe for the runtime."
                  ]
                },
                {
                  "name": "CommissionTooLow",
                  "fields": [],
                  "index": 23,
                  "docs": ["Commission is too low. Must be at least `MinCommission`."]
                },
                {
                  "name": "BoundNotMet",
                  "fields": [],
                  "index": 24,
                  "docs": ["Some bound is not met."]
                }
              ]
            }
          },
          "docs": ["The `Error` enum of this pallet."]
        },
        {
          "id": 537,
          "path": ["sp_staking", "offence", "OffenceDetails"],
          "params": [
            {
              "name": "Reporter",
              "typeId": 0
            },
            {
              "name": "Offender",
              "typeId": 58
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "offender",
                  "typeId": 58,
                  "typeName": "Offender",
                  "docs": []
                },
                {
                  "name": "reporters",
                  "typeId": 92,
                  "typeName": "Vec<Reporter>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 538,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [47, 13]
            }
          },
          "docs": []
        },
        {
          "id": 539,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 540
            }
          },
          "docs": []
        },
        {
          "id": 540,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [0, 103]
            }
          },
          "docs": []
        },
        {
          "id": 541,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [542, 13]
            }
          },
          "docs": []
        },
        {
          "id": 542,
          "path": ["sp_core", "crypto", "KeyTypeId"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 17,
                  "typeName": "[u8; 4]",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 543,
          "path": ["pallet_session", "pallet", "Error"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "InvalidProof",
                  "fields": [],
                  "index": 0,
                  "docs": ["Invalid ownership proof."]
                },
                {
                  "name": "NoAssociatedValidatorId",
                  "fields": [],
                  "index": 1,
                  "docs": ["No associated validator ID for account."]
                },
                {
                  "name": "DuplicatedKey",
                  "fields": [],
                  "index": 2,
                  "docs": ["Registered duplicate key."]
                },
                {
                  "name": "NoKeys",
                  "fields": [],
                  "index": 3,
                  "docs": ["No keys are associated with this account."]
                },
                {
                  "name": "NoAccount",
                  "fields": [],
                  "index": 4,
                  "docs": ["Key setting account is not live, so it's impossible to associate keys."]
                }
              ]
            }
          },
          "docs": ["Error for the session pallet."]
        },
        {
          "id": 544,
          "path": ["pallet_grandpa", "StoredState"],
          "params": [
            {
              "name": "N",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Live",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "PendingPause",
                  "fields": [
                    {
                      "name": "scheduled_at",
                      "typeId": 4,
                      "typeName": "N",
                      "docs": []
                    },
                    {
                      "name": "delay",
                      "typeId": 4,
                      "typeName": "N",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Paused",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "PendingResume",
                  "fields": [
                    {
                      "name": "scheduled_at",
                      "typeId": 4,
                      "typeName": "N",
                      "docs": []
                    },
                    {
                      "name": "delay",
                      "typeId": 4,
                      "typeName": "N",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 545,
          "path": ["pallet_grandpa", "StoredPendingChange"],
          "params": [
            {
              "name": "N",
              "typeId": 4
            },
            {
              "name": "Limit"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "scheduled_at",
                  "typeId": 4,
                  "typeName": "N",
                  "docs": []
                },
                {
                  "name": "delay",
                  "typeId": 4,
                  "typeName": "N",
                  "docs": []
                },
                {
                  "name": "next_authorities",
                  "typeId": 546,
                  "typeName": "BoundedAuthorityList<Limit>",
                  "docs": []
                },
                {
                  "name": "forced",
                  "typeId": 270,
                  "typeName": "Option<N>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 546,
          "path": ["bounded_collections", "weak_bounded_vec", "WeakBoundedVec"],
          "params": [
            {
              "name": "T",
              "typeId": 51
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 50,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 547,
          "path": ["pallet_grandpa", "pallet", "Error"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "PauseFailed",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Attempt to signal GRANDPA pause when the authority set isn't live",
                    "(either paused or already pending pause)."
                  ]
                },
                {
                  "name": "ResumeFailed",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Attempt to signal GRANDPA resume when the authority set isn't paused",
                    "(either live or already pending resume)."
                  ]
                },
                {
                  "name": "ChangePending",
                  "fields": [],
                  "index": 2,
                  "docs": ["Attempt to signal GRANDPA change with one already pending."]
                },
                {
                  "name": "TooSoon",
                  "fields": [],
                  "index": 3,
                  "docs": ["Cannot signal forced change so soon after last."]
                },
                {
                  "name": "InvalidKeyOwnershipProof",
                  "fields": [],
                  "index": 4,
                  "docs": ["A key ownership proof provided as part of an equivocation report is invalid."]
                },
                {
                  "name": "InvalidEquivocationProof",
                  "fields": [],
                  "index": 5,
                  "docs": ["An equivocation proof provided as part of an equivocation report is invalid."]
                },
                {
                  "name": "DuplicateOffenceReport",
                  "fields": [],
                  "index": 6,
                  "docs": ["A given equivocation report is valid but already previously reported."]
                }
              ]
            }
          },
          "docs": ["The `Error` enum of this pallet."]
        },
        {
          "id": 548,
          "path": ["bounded_collections", "weak_bounded_vec", "WeakBoundedVec"],
          "params": [
            {
              "name": "T",
              "typeId": 55
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 549,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 549,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 55
            }
          },
          "docs": []
        },
        {
          "id": 550,
          "path": ["pallet_im_online", "pallet", "Error"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "InvalidKey",
                  "fields": [],
                  "index": 0,
                  "docs": ["Non existent public key."]
                },
                {
                  "name": "DuplicatedHeartbeat",
                  "fields": [],
                  "index": 1,
                  "docs": ["Duplicated heartbeat."]
                }
              ]
            }
          },
          "docs": ["The `Error` enum of this pallet."]
        },
        {
          "id": 551,
          "path": ["pallet_treasury", "Proposal"],
          "params": [
            {
              "name": "AccountId",
              "typeId": 0
            },
            {
              "name": "Balance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "proposer",
                  "typeId": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "value",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "typeId": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "bond",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 552,
          "path": ["bounded_collections", "bounded_vec", "BoundedVec"],
          "params": [
            {
              "name": "T",
              "typeId": 4
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 97,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 553,
          "path": ["sp_arithmetic", "per_things", "Permill"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 554,
          "path": ["Option"],
          "params": [
            {
              "name": "T",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 6,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 555,
          "path": ["frame_support", "PalletId"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 172,
                  "typeName": "[u8; 8]",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 556,
          "path": ["pallet_treasury", "pallet", "Error"],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "InsufficientProposersBalance",
                  "fields": [],
                  "index": 0,
                  "docs": ["Proposer's balance is too low."]
                },
                {
                  "name": "InvalidIndex",
                  "fields": [],
                  "index": 1,
                  "docs": ["No proposal or bounty at that index."]
                },
                {
                  "name": "TooManyApprovals",
                  "fields": [],
                  "index": 2,
                  "docs": ["Too many approvals in the queue."]
                },
                {
                  "name": "InsufficientPermission",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "The spend origin is valid but the amount it is allowed to spend is lower than the",
                    "amount to be spent."
                  ]
                },
                {
                  "name": "ProposalNotApproved",
                  "fields": [],
                  "index": 4,
                  "docs": ["Proposal has not been approved."]
                }
              ]
            }
          },
          "docs": ["Error for the treasury pallet."]
        },
        {
          "id": 557,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [0, 66]
            }
          },
          "docs": []
        },
        {
          "id": 558,
          "path": ["pallet_conviction_voting", "vote", "Voting"],
          "params": [
            {
              "name": "Balance",
              "typeId": 6
            },
            {
              "name": "AccountId",
              "typeId": 0
            },
            {
              "name": "BlockNumber",
              "typeId": 4
            },
            {
              "name": "PollIndex",
              "typeId": 4
            },
            {
              "name": "MaxVotes"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Casting",
                  "fields": [
                    {
                      "typeId": 559,
                      "typeName": "Casting<Balance, BlockNumber, PollIndex, MaxVotes>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Delegating",
                  "fields": [
                    {
                      "typeId": 565,
                      "typeName": "Delegating<Balance, AccountId, BlockNumber>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 559,
          "path": ["pallet_conviction_voting", "vote", "Casting"],
          "params": [
            {
              "name": "Balance",
              "typeId": 6
            },
            {
              "name": "BlockNumber",
              "typeId": 4
            },
            {
              "name": "PollIndex",
              "typeId": 4
            },
            {
              "name": "MaxVotes"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "votes",
                  "typeId": 560,
                  "typeName": "BoundedVec<(PollIndex, AccountVote<Balance>), MaxVotes>",
                  "docs": []
                },
                {
                  "name": "delegations",
                  "typeId": 563,
                  "typeName": "Delegations<Balance>",
                  "docs": []
                },
                {
                  "name": "prior",
                  "typeId": 564,
                  "typeName": "PriorLock<BlockNumber, Balance>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 560,
          "path": ["bounded_collections", "bounded_vec", "BoundedVec"],
          "params": [
            {
              "name": "T",
              "typeId": 561
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 562,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 561,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [4, 125]
            }
          },
          "docs": []
        },
        {
          "id": 562,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 561
            }
          },
          "docs": []
        },
        {
          "id": 563,
          "path": ["pallet_conviction_voting", "types", "Delegations"],
          "params": [
            {
              "name": "Balance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "votes",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "capital",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 564,
          "path": ["pallet_conviction_voting", "vote", "PriorLock"],
          "params": [
            {
              "name": "BlockNumber",
              "typeId": 4
            },
            {
              "name": "Balance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                },
                {
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 565,
          "path": ["pallet_conviction_voting", "vote", "Delegating"],
          "params": [
            {
              "name": "Balance",
              "typeId": 6
            },
            {
              "name": "AccountId",
              "typeId": 0
            },
            {
              "name": "BlockNumber",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "balance",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "target",
                  "typeId": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "conviction",
                  "typeId": 127,
                  "typeName": "Conviction",
                  "docs": []
                },
                {
                  "name": "delegations",
                  "typeId": 563,
                  "typeName": "Delegations<Balance>",
                  "docs": []
                },
                {
                  "name": "prior",
                  "typeId": 564,
                  "typeName": "PriorLock<BlockNumber, Balance>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 566,
          "path": ["bounded_collections", "bounded_vec", "BoundedVec"],
          "params": [
            {
              "name": "T",
              "typeId": 567
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 568,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 567,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [66, 6]
            }
          },
          "docs": []
        },
        {
          "id": 568,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 567
            }
          },
          "docs": []
        },
        {
          "id": 569,
          "path": ["pallet_conviction_voting", "pallet", "Error"],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "NotOngoing",
                  "fields": [],
                  "index": 0,
                  "docs": ["Poll is not ongoing."]
                },
                {
                  "name": "NotVoter",
                  "fields": [],
                  "index": 1,
                  "docs": ["The given account did not vote on the poll."]
                },
                {
                  "name": "NoPermission",
                  "fields": [],
                  "index": 2,
                  "docs": ["The actor has no permission to conduct the action."]
                },
                {
                  "name": "NoPermissionYet",
                  "fields": [],
                  "index": 3,
                  "docs": ["The actor has no permission to conduct the action right now but will do in the future."]
                },
                {
                  "name": "AlreadyDelegating",
                  "fields": [],
                  "index": 4,
                  "docs": ["The account is already delegating."]
                },
                {
                  "name": "AlreadyVoting",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "The account currently has votes attached to it and the operation cannot succeed until",
                    "these are removed, either through `unvote` or `reap_vote`."
                  ]
                },
                {
                  "name": "InsufficientFunds",
                  "fields": [],
                  "index": 6,
                  "docs": ["Too high a balance was provided that the account cannot afford."]
                },
                {
                  "name": "NotDelegating",
                  "fields": [],
                  "index": 7,
                  "docs": ["The account is not currently delegating."]
                },
                {
                  "name": "Nonsense",
                  "fields": [],
                  "index": 8,
                  "docs": ["Delegation to oneself makes no sense."]
                },
                {
                  "name": "MaxVotesReached",
                  "fields": [],
                  "index": 9,
                  "docs": ["Maximum number of votes reached."]
                },
                {
                  "name": "ClassNeeded",
                  "fields": [],
                  "index": 10,
                  "docs": ["The class must be supplied since it is not easily determinable from the state."]
                },
                {
                  "name": "BadClass",
                  "fields": [],
                  "index": 11,
                  "docs": ["The class ID supplied is invalid."]
                }
              ]
            }
          },
          "docs": ["The `Error` enum of this pallet."]
        },
        {
          "id": 570,
          "path": ["pallet_referenda", "types", "ReferendumInfo"],
          "params": [
            {
              "name": "TrackId",
              "typeId": 66
            },
            {
              "name": "RuntimeOrigin",
              "typeId": 130
            },
            {
              "name": "Moment",
              "typeId": 4
            },
            {
              "name": "Call",
              "typeId": 67
            },
            {
              "name": "Balance",
              "typeId": 6
            },
            {
              "name": "Tally",
              "typeId": 416
            },
            {
              "name": "AccountId",
              "typeId": 0
            },
            {
              "name": "ScheduleAddress",
              "typeId": 31
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Ongoing",
                  "fields": [
                    {
                      "typeId": 571,
                      "typeName": "ReferendumStatus<TrackId, RuntimeOrigin, Moment, Call, Balance, Tally,\nAccountId, ScheduleAddress,>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Approved",
                  "fields": [
                    {
                      "typeId": 4,
                      "typeName": "Moment",
                      "docs": []
                    },
                    {
                      "typeId": 573,
                      "typeName": "Option<Deposit<AccountId, Balance>>",
                      "docs": []
                    },
                    {
                      "typeId": 573,
                      "typeName": "Option<Deposit<AccountId, Balance>>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Rejected",
                  "fields": [
                    {
                      "typeId": 4,
                      "typeName": "Moment",
                      "docs": []
                    },
                    {
                      "typeId": 573,
                      "typeName": "Option<Deposit<AccountId, Balance>>",
                      "docs": []
                    },
                    {
                      "typeId": 573,
                      "typeName": "Option<Deposit<AccountId, Balance>>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Cancelled",
                  "fields": [
                    {
                      "typeId": 4,
                      "typeName": "Moment",
                      "docs": []
                    },
                    {
                      "typeId": 573,
                      "typeName": "Option<Deposit<AccountId, Balance>>",
                      "docs": []
                    },
                    {
                      "typeId": 573,
                      "typeName": "Option<Deposit<AccountId, Balance>>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "TimedOut",
                  "fields": [
                    {
                      "typeId": 4,
                      "typeName": "Moment",
                      "docs": []
                    },
                    {
                      "typeId": 573,
                      "typeName": "Option<Deposit<AccountId, Balance>>",
                      "docs": []
                    },
                    {
                      "typeId": 573,
                      "typeName": "Option<Deposit<AccountId, Balance>>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "Killed",
                  "fields": [
                    {
                      "typeId": 4,
                      "typeName": "Moment",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 571,
          "path": ["pallet_referenda", "types", "ReferendumStatus"],
          "params": [
            {
              "name": "TrackId",
              "typeId": 66
            },
            {
              "name": "RuntimeOrigin",
              "typeId": 130
            },
            {
              "name": "Moment",
              "typeId": 4
            },
            {
              "name": "Call",
              "typeId": 67
            },
            {
              "name": "Balance",
              "typeId": 6
            },
            {
              "name": "Tally",
              "typeId": 416
            },
            {
              "name": "AccountId",
              "typeId": 0
            },
            {
              "name": "ScheduleAddress",
              "typeId": 31
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "track",
                  "typeId": 66,
                  "typeName": "TrackId",
                  "docs": []
                },
                {
                  "name": "origin",
                  "typeId": 130,
                  "typeName": "RuntimeOrigin",
                  "docs": []
                },
                {
                  "name": "proposal",
                  "typeId": 67,
                  "typeName": "Call",
                  "docs": []
                },
                {
                  "name": "enactment",
                  "typeId": 144,
                  "typeName": "DispatchTime<Moment>",
                  "docs": []
                },
                {
                  "name": "submitted",
                  "typeId": 4,
                  "typeName": "Moment",
                  "docs": []
                },
                {
                  "name": "submission_deposit",
                  "typeId": 572,
                  "typeName": "Deposit<AccountId, Balance>",
                  "docs": []
                },
                {
                  "name": "decision_deposit",
                  "typeId": 573,
                  "typeName": "Option<Deposit<AccountId, Balance>>",
                  "docs": []
                },
                {
                  "name": "deciding",
                  "typeId": 574,
                  "typeName": "Option<DecidingStatus<Moment>>",
                  "docs": []
                },
                {
                  "name": "tally",
                  "typeId": 416,
                  "typeName": "Tally",
                  "docs": []
                },
                {
                  "name": "in_queue",
                  "typeId": 44,
                  "typeName": "bool",
                  "docs": []
                },
                {
                  "name": "alarm",
                  "typeId": 576,
                  "typeName": "Option<(Moment, ScheduleAddress)>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 572,
          "path": ["pallet_referenda", "types", "Deposit"],
          "params": [
            {
              "name": "AccountId",
              "typeId": 0
            },
            {
              "name": "Balance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "who",
                  "typeId": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 573,
          "path": ["Option"],
          "params": [
            {
              "name": "T",
              "typeId": 572
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 572,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 574,
          "path": ["Option"],
          "params": [
            {
              "name": "T",
              "typeId": 575
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 575,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 575,
          "path": ["pallet_referenda", "types", "DecidingStatus"],
          "params": [
            {
              "name": "BlockNumber",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "since",
                  "typeId": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                },
                {
                  "name": "confirming",
                  "typeId": 270,
                  "typeName": "Option<BlockNumber>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 576,
          "path": ["Option"],
          "params": [
            {
              "name": "T",
              "typeId": 577
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 577,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 577,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [4, 31]
            }
          },
          "docs": []
        },
        {
          "id": 578,
          "path": ["bounded_collections", "bounded_vec", "BoundedVec"],
          "params": [
            {
              "name": "T",
              "typeId": 579
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 580,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 579,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [4, 6]
            }
          },
          "docs": []
        },
        {
          "id": 580,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 579
            }
          },
          "docs": []
        },
        {
          "id": 581,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 582
            }
          },
          "docs": []
        },
        {
          "id": 582,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [66, 583]
            }
          },
          "docs": []
        },
        {
          "id": 583,
          "path": ["pallet_referenda", "types", "TrackInfo"],
          "params": [
            {
              "name": "Balance",
              "typeId": 6
            },
            {
              "name": "Moment",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "name",
                  "typeId": 458,
                  "typeName": "&'static str",
                  "docs": []
                },
                {
                  "name": "max_deciding",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "decision_deposit",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "prepare_period",
                  "typeId": 4,
                  "typeName": "Moment",
                  "docs": []
                },
                {
                  "name": "decision_period",
                  "typeId": 4,
                  "typeName": "Moment",
                  "docs": []
                },
                {
                  "name": "confirm_period",
                  "typeId": 4,
                  "typeName": "Moment",
                  "docs": []
                },
                {
                  "name": "min_enactment_period",
                  "typeId": 4,
                  "typeName": "Moment",
                  "docs": []
                },
                {
                  "name": "min_approval",
                  "typeId": 584,
                  "typeName": "Curve",
                  "docs": []
                },
                {
                  "name": "min_support",
                  "typeId": 584,
                  "typeName": "Curve",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 584,
          "path": ["pallet_referenda", "types", "Curve"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "LinearDecreasing",
                  "fields": [
                    {
                      "name": "length",
                      "typeId": 41,
                      "typeName": "Perbill",
                      "docs": []
                    },
                    {
                      "name": "floor",
                      "typeId": 41,
                      "typeName": "Perbill",
                      "docs": []
                    },
                    {
                      "name": "ceil",
                      "typeId": 41,
                      "typeName": "Perbill",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "SteppedDecreasing",
                  "fields": [
                    {
                      "name": "begin",
                      "typeId": 41,
                      "typeName": "Perbill",
                      "docs": []
                    },
                    {
                      "name": "end",
                      "typeId": 41,
                      "typeName": "Perbill",
                      "docs": []
                    },
                    {
                      "name": "step",
                      "typeId": 41,
                      "typeName": "Perbill",
                      "docs": []
                    },
                    {
                      "name": "period",
                      "typeId": 41,
                      "typeName": "Perbill",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Reciprocal",
                  "fields": [
                    {
                      "name": "factor",
                      "typeId": 585,
                      "typeName": "FixedI64",
                      "docs": []
                    },
                    {
                      "name": "x_offset",
                      "typeId": 585,
                      "typeName": "FixedI64",
                      "docs": []
                    },
                    {
                      "name": "y_offset",
                      "typeId": 585,
                      "typeName": "FixedI64",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 585,
          "path": ["sp_arithmetic", "fixed_point", "FixedI64"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 586,
                  "typeName": "i64",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 586,
          "path": [],
          "params": [],
          "type": {
            "tag": "Primitive",
            "value": {
              "kind": "i64"
            }
          },
          "docs": []
        },
        {
          "id": 587,
          "path": ["pallet_referenda", "pallet", "Error"],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "NotOngoing",
                  "fields": [],
                  "index": 0,
                  "docs": ["Referendum is not ongoing."]
                },
                {
                  "name": "HasDeposit",
                  "fields": [],
                  "index": 1,
                  "docs": ["Referendum's decision deposit is already paid."]
                },
                {
                  "name": "BadTrack",
                  "fields": [],
                  "index": 2,
                  "docs": ["The track identifier given was invalid."]
                },
                {
                  "name": "Full",
                  "fields": [],
                  "index": 3,
                  "docs": ["There are already a full complement of referenda in progress for this track."]
                },
                {
                  "name": "QueueEmpty",
                  "fields": [],
                  "index": 4,
                  "docs": ["The queue of the track is empty."]
                },
                {
                  "name": "BadReferendum",
                  "fields": [],
                  "index": 5,
                  "docs": ["The referendum index provided is invalid in this context."]
                },
                {
                  "name": "NothingToDo",
                  "fields": [],
                  "index": 6,
                  "docs": ["There was nothing to do in the advancement."]
                },
                {
                  "name": "NoTrack",
                  "fields": [],
                  "index": 7,
                  "docs": ["No track exists for the proposal origin."]
                },
                {
                  "name": "Unfinished",
                  "fields": [],
                  "index": 8,
                  "docs": ["Any deposit cannot be refunded until after the decision is over."]
                },
                {
                  "name": "NoPermission",
                  "fields": [],
                  "index": 9,
                  "docs": ["The deposit refunder is not the depositor."]
                },
                {
                  "name": "NoDeposit",
                  "fields": [],
                  "index": 10,
                  "docs": ["The deposit cannot be refunded since none was made."]
                },
                {
                  "name": "BadStatus",
                  "fields": [],
                  "index": 11,
                  "docs": ["The referendum status is invalid for this operation."]
                },
                {
                  "name": "PreimageNotExist",
                  "fields": [],
                  "index": 12,
                  "docs": ["The preimage does not exist."]
                }
              ]
            }
          },
          "docs": ["The `Error` enum of this pallet."]
        },
        {
          "id": 588,
          "path": ["pallet_whitelist", "pallet", "Error"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "UnavailablePreImage",
                  "fields": [],
                  "index": 0,
                  "docs": ["The preimage of the call hash could not be loaded."]
                },
                {
                  "name": "UndecodableCall",
                  "fields": [],
                  "index": 1,
                  "docs": ["The call could not be decoded."]
                },
                {
                  "name": "InvalidCallWeightWitness",
                  "fields": [],
                  "index": 2,
                  "docs": ["The weight of the decoded call was higher than the witness."]
                },
                {
                  "name": "CallIsNotWhitelisted",
                  "fields": [],
                  "index": 3,
                  "docs": ["The call was not whitelisted."]
                },
                {
                  "name": "CallAlreadyWhitelisted",
                  "fields": [],
                  "index": 4,
                  "docs": ["The call was already whitelisted; No-Op."]
                }
              ]
            }
          },
          "docs": ["The `Error` enum of this pallet."]
        },
        {
          "id": 589,
          "path": ["polkadot_runtime_common", "claims", "pallet", "Error"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "InvalidEthereumSignature",
                  "fields": [],
                  "index": 0,
                  "docs": ["Invalid Ethereum signature."]
                },
                {
                  "name": "SignerHasNoClaim",
                  "fields": [],
                  "index": 1,
                  "docs": ["Ethereum address has no claim."]
                },
                {
                  "name": "SenderHasNoClaim",
                  "fields": [],
                  "index": 2,
                  "docs": ["Account ID sending transaction has no claim."]
                },
                {
                  "name": "PotUnderflow",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "There's not enough in the pot to pay out some unvested amount. Generally implies a",
                    "logic error."
                  ]
                },
                {
                  "name": "InvalidStatement",
                  "fields": [],
                  "index": 4,
                  "docs": ["A needed statement was not included."]
                },
                {
                  "name": "VestedBalanceExists",
                  "fields": [],
                  "index": 5,
                  "docs": ["The account already has a vested balance."]
                }
              ]
            }
          },
          "docs": ["The `Error` enum of this pallet."]
        },
        {
          "id": 590,
          "path": ["bounded_collections", "bounded_vec", "BoundedVec"],
          "params": [
            {
              "name": "T",
              "typeId": 157
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 591,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 591,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 157
            }
          },
          "docs": []
        },
        {
          "id": 592,
          "path": ["pallet_vesting", "Releases"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "V0",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "V1",
                  "fields": [],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 593,
          "path": ["pallet_vesting", "pallet", "Error"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "NotVesting",
                  "fields": [],
                  "index": 0,
                  "docs": ["The account given is not vesting."]
                },
                {
                  "name": "AtMaxVestingSchedules",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "The account already has `MaxVestingSchedules` count of schedules and thus",
                    "cannot add another one. Consider merging existing schedules in order to add another."
                  ]
                },
                {
                  "name": "AmountLow",
                  "fields": [],
                  "index": 2,
                  "docs": ["Amount being transferred is too low to create a vesting schedule."]
                },
                {
                  "name": "ScheduleIndexOutOfBounds",
                  "fields": [],
                  "index": 3,
                  "docs": ["An index was out of bounds of the vesting schedules."]
                },
                {
                  "name": "InvalidScheduleParams",
                  "fields": [],
                  "index": 4,
                  "docs": ["Failed to create a new schedule because some parameter was invalid."]
                }
              ]
            }
          },
          "docs": ["Error for the vesting pallet."]
        },
        {
          "id": 594,
          "path": ["pallet_utility", "pallet", "Error"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "TooManyCalls",
                  "fields": [],
                  "index": 0,
                  "docs": ["Too many calls batched."]
                }
              ]
            }
          },
          "docs": ["The `Error` enum of this pallet."]
        },
        {
          "id": 595,
          "path": ["pallet_identity", "types", "Registration"],
          "params": [
            {
              "name": "Balance",
              "typeId": 6
            },
            {
              "name": "MaxJudgements"
            },
            {
              "name": "MaxAdditionalFields"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "judgements",
                  "typeId": 596,
                  "typeName": "BoundedVec<(RegistrarIndex, Judgement<Balance>), MaxJudgements>",
                  "docs": []
                },
                {
                  "name": "deposit",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "info",
                  "typeId": 161,
                  "typeName": "IdentityInfo<MaxAdditionalFields>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 596,
          "path": ["bounded_collections", "bounded_vec", "BoundedVec"],
          "params": [
            {
              "name": "T",
              "typeId": 597
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 598,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 597,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [4, 200]
            }
          },
          "docs": []
        },
        {
          "id": 598,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 597
            }
          },
          "docs": []
        },
        {
          "id": 599,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [6, 600]
            }
          },
          "docs": []
        },
        {
          "id": 600,
          "path": ["bounded_collections", "bounded_vec", "BoundedVec"],
          "params": [
            {
              "name": "T",
              "typeId": 0
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 92,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 601,
          "path": ["bounded_collections", "bounded_vec", "BoundedVec"],
          "params": [
            {
              "name": "T",
              "typeId": 602
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 604,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 602,
          "path": ["Option"],
          "params": [
            {
              "name": "T",
              "typeId": 603
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 603,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 603,
          "path": ["pallet_identity", "types", "RegistrarInfo"],
          "params": [
            {
              "name": "Balance",
              "typeId": 6
            },
            {
              "name": "AccountId",
              "typeId": 0
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "account",
                  "typeId": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "fee",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "fields",
                  "typeId": 198,
                  "typeName": "IdentityFields",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 604,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 602
            }
          },
          "docs": []
        },
        {
          "id": 605,
          "path": ["pallet_identity", "pallet", "Error"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "TooManySubAccounts",
                  "fields": [],
                  "index": 0,
                  "docs": ["Too many subs-accounts."]
                },
                {
                  "name": "NotFound",
                  "fields": [],
                  "index": 1,
                  "docs": ["Account isn't found."]
                },
                {
                  "name": "NotNamed",
                  "fields": [],
                  "index": 2,
                  "docs": ["Account isn't named."]
                },
                {
                  "name": "EmptyIndex",
                  "fields": [],
                  "index": 3,
                  "docs": ["Empty index."]
                },
                {
                  "name": "FeeChanged",
                  "fields": [],
                  "index": 4,
                  "docs": ["Fee is changed."]
                },
                {
                  "name": "NoIdentity",
                  "fields": [],
                  "index": 5,
                  "docs": ["No identity found."]
                },
                {
                  "name": "StickyJudgement",
                  "fields": [],
                  "index": 6,
                  "docs": ["Sticky judgement."]
                },
                {
                  "name": "JudgementGiven",
                  "fields": [],
                  "index": 7,
                  "docs": ["Judgement given."]
                },
                {
                  "name": "InvalidJudgement",
                  "fields": [],
                  "index": 8,
                  "docs": ["Invalid judgement."]
                },
                {
                  "name": "InvalidIndex",
                  "fields": [],
                  "index": 9,
                  "docs": ["The index is invalid."]
                },
                {
                  "name": "InvalidTarget",
                  "fields": [],
                  "index": 10,
                  "docs": ["The target is invalid."]
                },
                {
                  "name": "TooManyFields",
                  "fields": [],
                  "index": 11,
                  "docs": ["Too many additional fields."]
                },
                {
                  "name": "TooManyRegistrars",
                  "fields": [],
                  "index": 12,
                  "docs": ["Maximum amount of registrars reached. Cannot add any more."]
                },
                {
                  "name": "AlreadyClaimed",
                  "fields": [],
                  "index": 13,
                  "docs": ["Account ID is already named."]
                },
                {
                  "name": "NotSub",
                  "fields": [],
                  "index": 14,
                  "docs": ["Sender is not a sub-account."]
                },
                {
                  "name": "NotOwned",
                  "fields": [],
                  "index": 15,
                  "docs": ["Sub-account isn't owned by sender."]
                },
                {
                  "name": "JudgementForDifferentIdentity",
                  "fields": [],
                  "index": 16,
                  "docs": ["The provided judgement was for a different identity."]
                },
                {
                  "name": "JudgementPaymentFailed",
                  "fields": [],
                  "index": 17,
                  "docs": ["Error that occurs when there is an issue paying for judgement."]
                }
              ]
            }
          },
          "docs": ["The `Error` enum of this pallet."]
        },
        {
          "id": 606,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [607, 6]
            }
          },
          "docs": []
        },
        {
          "id": 607,
          "path": ["bounded_collections", "bounded_vec", "BoundedVec"],
          "params": [
            {
              "name": "T",
              "typeId": 608
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 609,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 608,
          "path": ["pallet_proxy", "ProxyDefinition"],
          "params": [
            {
              "name": "AccountId",
              "typeId": 0
            },
            {
              "name": "ProxyType",
              "typeId": 203
            },
            {
              "name": "BlockNumber",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "delegate",
                  "typeId": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "proxy_type",
                  "typeId": 203,
                  "typeName": "ProxyType",
                  "docs": []
                },
                {
                  "name": "delay",
                  "typeId": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 609,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 608
            }
          },
          "docs": []
        },
        {
          "id": 610,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [611, 6]
            }
          },
          "docs": []
        },
        {
          "id": 611,
          "path": ["bounded_collections", "bounded_vec", "BoundedVec"],
          "params": [
            {
              "name": "T",
              "typeId": 612
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 613,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 612,
          "path": ["pallet_proxy", "Announcement"],
          "params": [
            {
              "name": "AccountId",
              "typeId": 0
            },
            {
              "name": "Hash",
              "typeId": 12
            },
            {
              "name": "BlockNumber",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "real",
                  "typeId": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "call_hash",
                  "typeId": 12,
                  "typeName": "Hash",
                  "docs": []
                },
                {
                  "name": "height",
                  "typeId": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 613,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 612
            }
          },
          "docs": []
        },
        {
          "id": 614,
          "path": ["pallet_proxy", "pallet", "Error"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "TooMany",
                  "fields": [],
                  "index": 0,
                  "docs": ["There are too many proxies registered or too many announcements pending."]
                },
                {
                  "name": "NotFound",
                  "fields": [],
                  "index": 1,
                  "docs": ["Proxy registration not found."]
                },
                {
                  "name": "NotProxy",
                  "fields": [],
                  "index": 2,
                  "docs": ["Sender is not a proxy of the account to be proxied."]
                },
                {
                  "name": "Unproxyable",
                  "fields": [],
                  "index": 3,
                  "docs": ["A call which is incompatible with the proxy type's filter was attempted."]
                },
                {
                  "name": "Duplicate",
                  "fields": [],
                  "index": 4,
                  "docs": ["Account is already a proxy."]
                },
                {
                  "name": "NoPermission",
                  "fields": [],
                  "index": 5,
                  "docs": ["Call may not be made by proxy because it may escalate its privileges."]
                },
                {
                  "name": "Unannounced",
                  "fields": [],
                  "index": 6,
                  "docs": ["Announcement, if made at all, was made too recently."]
                },
                {
                  "name": "NoSelfProxy",
                  "fields": [],
                  "index": 7,
                  "docs": ["Cannot add self as proxy."]
                }
              ]
            }
          },
          "docs": ["The `Error` enum of this pallet."]
        },
        {
          "id": 615,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [0, 1]
            }
          },
          "docs": []
        },
        {
          "id": 616,
          "path": ["pallet_multisig", "Multisig"],
          "params": [
            {
              "name": "BlockNumber",
              "typeId": 4
            },
            {
              "name": "Balance",
              "typeId": 6
            },
            {
              "name": "AccountId",
              "typeId": 0
            },
            {
              "name": "MaxApprovals"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "when",
                  "typeId": 206,
                  "typeName": "Timepoint<BlockNumber>",
                  "docs": []
                },
                {
                  "name": "deposit",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "depositor",
                  "typeId": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "approvals",
                  "typeId": 617,
                  "typeName": "BoundedVec<AccountId, MaxApprovals>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 617,
          "path": ["bounded_collections", "bounded_vec", "BoundedVec"],
          "params": [
            {
              "name": "T",
              "typeId": 0
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 92,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 618,
          "path": ["pallet_multisig", "pallet", "Error"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "MinimumThreshold",
                  "fields": [],
                  "index": 0,
                  "docs": ["Threshold must be 2 or greater."]
                },
                {
                  "name": "AlreadyApproved",
                  "fields": [],
                  "index": 1,
                  "docs": ["Call is already approved by this signatory."]
                },
                {
                  "name": "NoApprovalsNeeded",
                  "fields": [],
                  "index": 2,
                  "docs": ["Call doesn't need any (more) approvals."]
                },
                {
                  "name": "TooFewSignatories",
                  "fields": [],
                  "index": 3,
                  "docs": ["There are too few signatories in the list."]
                },
                {
                  "name": "TooManySignatories",
                  "fields": [],
                  "index": 4,
                  "docs": ["There are too many signatories in the list."]
                },
                {
                  "name": "SignatoriesOutOfOrder",
                  "fields": [],
                  "index": 5,
                  "docs": ["The signatories were provided out of order; they should be ordered."]
                },
                {
                  "name": "SenderInSignatories",
                  "fields": [],
                  "index": 6,
                  "docs": ["The sender was contained in the other signatories; it shouldn't be."]
                },
                {
                  "name": "NotFound",
                  "fields": [],
                  "index": 7,
                  "docs": ["Multisig operation not found when attempting to cancel."]
                },
                {
                  "name": "NotOwner",
                  "fields": [],
                  "index": 8,
                  "docs": ["Only the account that originally created the multisig is able to cancel it."]
                },
                {
                  "name": "NoTimepoint",
                  "fields": [],
                  "index": 9,
                  "docs": ["No timepoint was given, yet the multisig operation is already underway."]
                },
                {
                  "name": "WrongTimepoint",
                  "fields": [],
                  "index": 10,
                  "docs": ["A different timepoint was given to the multisig operation that is underway."]
                },
                {
                  "name": "UnexpectedTimepoint",
                  "fields": [],
                  "index": 11,
                  "docs": ["A timepoint was given, yet no multisig operation is underway."]
                },
                {
                  "name": "MaxWeightTooLow",
                  "fields": [],
                  "index": 12,
                  "docs": ["The maximum weight information provided was too low."]
                },
                {
                  "name": "AlreadyStored",
                  "fields": [],
                  "index": 13,
                  "docs": ["The data to be stored is already stored."]
                }
              ]
            }
          },
          "docs": ["The `Error` enum of this pallet."]
        },
        {
          "id": 619,
          "path": ["pallet_bounties", "Bounty"],
          "params": [
            {
              "name": "AccountId",
              "typeId": 0
            },
            {
              "name": "Balance",
              "typeId": 6
            },
            {
              "name": "BlockNumber",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "proposer",
                  "typeId": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "value",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "fee",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "curator_deposit",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "bond",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "status",
                  "typeId": 620,
                  "typeName": "BountyStatus<AccountId, BlockNumber>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 620,
          "path": ["pallet_bounties", "BountyStatus"],
          "params": [
            {
              "name": "AccountId",
              "typeId": 0
            },
            {
              "name": "BlockNumber",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Proposed",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Approved",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Funded",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "CuratorProposed",
                  "fields": [
                    {
                      "name": "curator",
                      "typeId": 0,
                      "typeName": "AccountId",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "Active",
                  "fields": [
                    {
                      "name": "curator",
                      "typeId": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "update_due",
                      "typeId": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "PendingPayout",
                  "fields": [
                    {
                      "name": "curator",
                      "typeId": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "typeId": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "unlock_at",
                      "typeId": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 621,
          "path": ["bounded_collections", "bounded_vec", "BoundedVec"],
          "params": [
            {
              "name": "T",
              "typeId": 2
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 13,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 622,
          "path": ["pallet_bounties", "pallet", "Error"],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "InsufficientProposersBalance",
                  "fields": [],
                  "index": 0,
                  "docs": ["Proposer's balance is too low."]
                },
                {
                  "name": "InvalidIndex",
                  "fields": [],
                  "index": 1,
                  "docs": ["No proposal or bounty at that index."]
                },
                {
                  "name": "ReasonTooBig",
                  "fields": [],
                  "index": 2,
                  "docs": ["The reason given is just too big."]
                },
                {
                  "name": "UnexpectedStatus",
                  "fields": [],
                  "index": 3,
                  "docs": ["The bounty status is unexpected."]
                },
                {
                  "name": "RequireCurator",
                  "fields": [],
                  "index": 4,
                  "docs": ["Require bounty curator."]
                },
                {
                  "name": "InvalidValue",
                  "fields": [],
                  "index": 5,
                  "docs": ["Invalid bounty value."]
                },
                {
                  "name": "InvalidFee",
                  "fields": [],
                  "index": 6,
                  "docs": ["Invalid bounty fee."]
                },
                {
                  "name": "PendingPayout",
                  "fields": [],
                  "index": 7,
                  "docs": [
                    "A bounty payout is pending.",
                    "To cancel the bounty, you must unassign and slash the curator."
                  ]
                },
                {
                  "name": "Premature",
                  "fields": [],
                  "index": 8,
                  "docs": ["The bounties cannot be claimed/closed because it's still in the countdown period."]
                },
                {
                  "name": "HasActiveChildBounty",
                  "fields": [],
                  "index": 9,
                  "docs": ["The bounty cannot be closed because it has active child bounties."]
                },
                {
                  "name": "TooManyQueued",
                  "fields": [],
                  "index": 10,
                  "docs": ["Too many approvals are already queued."]
                }
              ]
            }
          },
          "docs": ["The `Error` enum of this pallet."]
        },
        {
          "id": 623,
          "path": ["pallet_child_bounties", "ChildBounty"],
          "params": [
            {
              "name": "AccountId",
              "typeId": 0
            },
            {
              "name": "Balance",
              "typeId": 6
            },
            {
              "name": "BlockNumber",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "parent_bounty",
                  "typeId": 4,
                  "typeName": "BountyIndex",
                  "docs": []
                },
                {
                  "name": "value",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "fee",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "curator_deposit",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "status",
                  "typeId": 624,
                  "typeName": "ChildBountyStatus<AccountId, BlockNumber>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 624,
          "path": ["pallet_child_bounties", "ChildBountyStatus"],
          "params": [
            {
              "name": "AccountId",
              "typeId": 0
            },
            {
              "name": "BlockNumber",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Added",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "CuratorProposed",
                  "fields": [
                    {
                      "name": "curator",
                      "typeId": 0,
                      "typeName": "AccountId",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Active",
                  "fields": [
                    {
                      "name": "curator",
                      "typeId": 0,
                      "typeName": "AccountId",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "PendingPayout",
                  "fields": [
                    {
                      "name": "curator",
                      "typeId": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "typeId": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "unlock_at",
                      "typeId": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 625,
          "path": ["pallet_child_bounties", "pallet", "Error"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "ParentBountyNotActive",
                  "fields": [],
                  "index": 0,
                  "docs": ["The parent bounty is not in active state."]
                },
                {
                  "name": "InsufficientBountyBalance",
                  "fields": [],
                  "index": 1,
                  "docs": ["The bounty balance is not enough to add new child-bounty."]
                },
                {
                  "name": "TooManyChildBounties",
                  "fields": [],
                  "index": 2,
                  "docs": ["Number of child bounties exceeds limit `MaxActiveChildBountyCount`."]
                }
              ]
            }
          },
          "docs": ["The `Error` enum of this pallet."]
        },
        {
          "id": 626,
          "path": ["pallet_election_provider_multi_phase", "ReadySolution"],
          "params": [
            {
              "name": "AccountId"
            },
            {
              "name": "MaxWinners"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "supports",
                  "typeId": 627,
                  "typeName": "BoundedSupports<AccountId, MaxWinners>",
                  "docs": []
                },
                {
                  "name": "score",
                  "typeId": 262,
                  "typeName": "ElectionScore",
                  "docs": []
                },
                {
                  "name": "compute",
                  "typeId": 431,
                  "typeName": "ElectionCompute",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 627,
          "path": ["bounded_collections", "bounded_vec", "BoundedVec"],
          "params": [
            {
              "name": "T",
              "typeId": 266
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 265,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 628,
          "path": ["pallet_election_provider_multi_phase", "RoundSnapshot"],
          "params": [
            {
              "name": "AccountId",
              "typeId": 0
            },
            {
              "name": "DataProvider",
              "typeId": 629
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "voters",
                  "typeId": 630,
                  "typeName": "Vec<DataProvider>",
                  "docs": []
                },
                {
                  "name": "targets",
                  "typeId": 92,
                  "typeName": "Vec<AccountId>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 629,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [0, 11, 521]
            }
          },
          "docs": []
        },
        {
          "id": 630,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 629
            }
          },
          "docs": []
        },
        {
          "id": 631,
          "path": ["bounded_collections", "bounded_vec", "BoundedVec"],
          "params": [
            {
              "name": "T",
              "typeId": 632
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 633,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 632,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [262, 4, 4]
            }
          },
          "docs": []
        },
        {
          "id": 633,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 632
            }
          },
          "docs": []
        },
        {
          "id": 634,
          "path": ["pallet_election_provider_multi_phase", "signed", "SignedSubmission"],
          "params": [
            {
              "name": "AccountId",
              "typeId": 0
            },
            {
              "name": "Balance",
              "typeId": 6
            },
            {
              "name": "Solution",
              "typeId": 211
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "who",
                  "typeId": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "deposit",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "raw_solution",
                  "typeId": 210,
                  "typeName": "RawSolution<Solution>",
                  "docs": []
                },
                {
                  "name": "call_fee",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 635,
          "path": ["pallet_election_provider_multi_phase", "pallet", "Error"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "PreDispatchEarlySubmission",
                  "fields": [],
                  "index": 0,
                  "docs": ["Submission was too early."]
                },
                {
                  "name": "PreDispatchWrongWinnerCount",
                  "fields": [],
                  "index": 1,
                  "docs": ["Wrong number of winners presented."]
                },
                {
                  "name": "PreDispatchWeakSubmission",
                  "fields": [],
                  "index": 2,
                  "docs": ["Submission was too weak, score-wise."]
                },
                {
                  "name": "SignedQueueFull",
                  "fields": [],
                  "index": 3,
                  "docs": ["The queue was full, and the solution was not better than any of the existing ones."]
                },
                {
                  "name": "SignedCannotPayDeposit",
                  "fields": [],
                  "index": 4,
                  "docs": ["The origin failed to pay the deposit."]
                },
                {
                  "name": "SignedInvalidWitness",
                  "fields": [],
                  "index": 5,
                  "docs": ["Witness data to dispatchable is invalid."]
                },
                {
                  "name": "SignedTooMuchWeight",
                  "fields": [],
                  "index": 6,
                  "docs": ["The signed submission consumes too much weight"]
                },
                {
                  "name": "OcwCallWrongEra",
                  "fields": [],
                  "index": 7,
                  "docs": ["OCW submitted solution for wrong round"]
                },
                {
                  "name": "MissingSnapshotMetadata",
                  "fields": [],
                  "index": 8,
                  "docs": ["Snapshot metadata should exist but didn't."]
                },
                {
                  "name": "InvalidSubmissionIndex",
                  "fields": [],
                  "index": 9,
                  "docs": ["`Self::insert_submission` returned an invalid index."]
                },
                {
                  "name": "CallNotAllowed",
                  "fields": [],
                  "index": 10,
                  "docs": ["The call is not allowed at this point."]
                },
                {
                  "name": "FallbackFailed",
                  "fields": [],
                  "index": 11,
                  "docs": ["The fallback failed"]
                },
                {
                  "name": "BoundNotMet",
                  "fields": [],
                  "index": 12,
                  "docs": ["Some bound not met"]
                },
                {
                  "name": "TooManyWinners",
                  "fields": [],
                  "index": 13,
                  "docs": ["Submitted solution has too many winners"]
                }
              ]
            }
          },
          "docs": ["Error of the pallet that can be returned in response to dispatches."]
        },
        {
          "id": 636,
          "path": ["pallet_bags_list", "list", "Node"],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "id",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "prev",
                  "typeId": 155,
                  "typeName": "Option<T::AccountId>",
                  "docs": []
                },
                {
                  "name": "next",
                  "typeId": 155,
                  "typeName": "Option<T::AccountId>",
                  "docs": []
                },
                {
                  "name": "bag_upper",
                  "typeId": 11,
                  "typeName": "T::Score",
                  "docs": []
                },
                {
                  "name": "score",
                  "typeId": 11,
                  "typeName": "T::Score",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 637,
          "path": ["pallet_bags_list", "list", "Bag"],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "head",
                  "typeId": 155,
                  "typeName": "Option<T::AccountId>",
                  "docs": []
                },
                {
                  "name": "tail",
                  "typeId": 155,
                  "typeName": "Option<T::AccountId>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 638,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 11
            }
          },
          "docs": []
        },
        {
          "id": 639,
          "path": ["pallet_bags_list", "pallet", "Error"],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "List",
                  "fields": [
                    {
                      "typeId": 640,
                      "typeName": "ListError",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": ["A error in the list interface implementation."]
                }
              ]
            }
          },
          "docs": ["The `Error` enum of this pallet."]
        },
        {
          "id": 640,
          "path": ["pallet_bags_list", "list", "ListError"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Duplicate",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "NotHeavier",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "NotInSameBag",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "NodeNotFound",
                  "fields": [],
                  "index": 3,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 641,
          "path": ["pallet_nomination_pools", "PoolMember"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "pool_id",
                  "typeId": 4,
                  "typeName": "PoolId",
                  "docs": []
                },
                {
                  "name": "points",
                  "typeId": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "last_recorded_reward_counter",
                  "typeId": 513,
                  "typeName": "T::RewardCounter",
                  "docs": []
                },
                {
                  "name": "unbonding_eras",
                  "typeId": 642,
                  "typeName": "BoundedBTreeMap<EraIndex, BalanceOf<T>, T::MaxUnbonding>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 642,
          "path": ["bounded_collections", "bounded_btree_map", "BoundedBTreeMap"],
          "params": [
            {
              "name": "K",
              "typeId": 4
            },
            {
              "name": "V",
              "typeId": 6
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 643,
                  "typeName": "BTreeMap<K, V>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 643,
          "path": ["BTreeMap"],
          "params": [
            {
              "name": "K",
              "typeId": 4
            },
            {
              "name": "V",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 580,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 644,
          "path": ["pallet_nomination_pools", "BondedPoolInner"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "commission",
                  "typeId": 645,
                  "typeName": "Commission<T>",
                  "docs": []
                },
                {
                  "name": "member_counter",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "points",
                  "typeId": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "roles",
                  "typeId": 648,
                  "typeName": "PoolRoles<T::AccountId>",
                  "docs": []
                },
                {
                  "name": "state",
                  "typeId": 274,
                  "typeName": "PoolState",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 645,
          "path": ["pallet_nomination_pools", "Commission"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "current",
                  "typeId": 280,
                  "typeName": "Option<(Perbill, T::AccountId)>",
                  "docs": []
                },
                {
                  "name": "max",
                  "typeId": 646,
                  "typeName": "Option<Perbill>",
                  "docs": []
                },
                {
                  "name": "change_rate",
                  "typeId": 647,
                  "typeName": "Option<CommissionChangeRate<BlockNumberFor<T>>>",
                  "docs": []
                },
                {
                  "name": "throttle_from",
                  "typeId": 270,
                  "typeName": "Option<BlockNumberFor<T>>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 646,
          "path": ["Option"],
          "params": [
            {
              "name": "T",
              "typeId": 41
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 41,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 647,
          "path": ["Option"],
          "params": [
            {
              "name": "T",
              "typeId": 282
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 282,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 648,
          "path": ["pallet_nomination_pools", "PoolRoles"],
          "params": [
            {
              "name": "AccountId",
              "typeId": 0
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "depositor",
                  "typeId": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "root",
                  "typeId": 155,
                  "typeName": "Option<AccountId>",
                  "docs": []
                },
                {
                  "name": "nominator",
                  "typeId": 155,
                  "typeName": "Option<AccountId>",
                  "docs": []
                },
                {
                  "name": "bouncer",
                  "typeId": 155,
                  "typeName": "Option<AccountId>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 649,
          "path": ["pallet_nomination_pools", "RewardPool"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "last_recorded_reward_counter",
                  "typeId": 513,
                  "typeName": "T::RewardCounter",
                  "docs": []
                },
                {
                  "name": "last_recorded_total_payouts",
                  "typeId": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "total_rewards_claimed",
                  "typeId": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "total_commission_pending",
                  "typeId": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "total_commission_claimed",
                  "typeId": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 650,
          "path": ["pallet_nomination_pools", "SubPools"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "no_era",
                  "typeId": 651,
                  "typeName": "UnbondPool<T>",
                  "docs": []
                },
                {
                  "name": "with_era",
                  "typeId": 652,
                  "typeName": "BoundedBTreeMap<EraIndex, UnbondPool<T>, TotalUnbondingPools<T>>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 651,
          "path": ["pallet_nomination_pools", "UnbondPool"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "points",
                  "typeId": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "balance",
                  "typeId": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 652,
          "path": ["bounded_collections", "bounded_btree_map", "BoundedBTreeMap"],
          "params": [
            {
              "name": "K",
              "typeId": 4
            },
            {
              "name": "V",
              "typeId": 651
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 653,
                  "typeName": "BTreeMap<K, V>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 653,
          "path": ["BTreeMap"],
          "params": [
            {
              "name": "K",
              "typeId": 4
            },
            {
              "name": "V",
              "typeId": 651
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 654,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 654,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 655
            }
          },
          "docs": []
        },
        {
          "id": 655,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [4, 651]
            }
          },
          "docs": []
        },
        {
          "id": 656,
          "path": ["bounded_collections", "bounded_vec", "BoundedVec"],
          "params": [
            {
              "name": "T",
              "typeId": 2
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 13,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 657,
          "path": ["pallet_nomination_pools", "pallet", "Error"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "PoolNotFound",
                  "fields": [],
                  "index": 0,
                  "docs": ["A (bonded) pool id does not exist."]
                },
                {
                  "name": "PoolMemberNotFound",
                  "fields": [],
                  "index": 1,
                  "docs": ["An account is not a member."]
                },
                {
                  "name": "RewardPoolNotFound",
                  "fields": [],
                  "index": 2,
                  "docs": ["A reward pool does not exist. In all cases this is a system logic error."]
                },
                {
                  "name": "SubPoolsNotFound",
                  "fields": [],
                  "index": 3,
                  "docs": ["A sub pool does not exist."]
                },
                {
                  "name": "AccountBelongsToOtherPool",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "An account is already delegating in another pool. An account may only belong to one",
                    "pool at a time."
                  ]
                },
                {
                  "name": "FullyUnbonding",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "The member is fully unbonded (and thus cannot access the bonded and reward pool",
                    "anymore to, for example, collect rewards)."
                  ]
                },
                {
                  "name": "MaxUnbondingLimit",
                  "fields": [],
                  "index": 6,
                  "docs": ["The member cannot unbond further chunks due to reaching the limit."]
                },
                {
                  "name": "CannotWithdrawAny",
                  "fields": [],
                  "index": 7,
                  "docs": ["None of the funds can be withdrawn yet because the bonding duration has not passed."]
                },
                {
                  "name": "MinimumBondNotMet",
                  "fields": [],
                  "index": 8,
                  "docs": [
                    "The amount does not meet the minimum bond to either join or create a pool.",
                    "",
                    "The depositor can never unbond to a value less than",
                    "`Pallet::depositor_min_bond`. The caller does not have nominating",
                    "permissions for the pool. Members can never unbond to a value below `MinJoinBond`."
                  ]
                },
                {
                  "name": "OverflowRisk",
                  "fields": [],
                  "index": 9,
                  "docs": ["The transaction could not be executed due to overflow risk for the pool."]
                },
                {
                  "name": "NotDestroying",
                  "fields": [],
                  "index": 10,
                  "docs": [
                    "A pool must be in [`PoolState::Destroying`] in order for the depositor to unbond or for",
                    "other members to be permissionlessly unbonded."
                  ]
                },
                {
                  "name": "NotNominator",
                  "fields": [],
                  "index": 11,
                  "docs": ["The caller does not have nominating permissions for the pool."]
                },
                {
                  "name": "NotKickerOrDestroying",
                  "fields": [],
                  "index": 12,
                  "docs": ["Either a) the caller cannot make a valid kick or b) the pool is not destroying."]
                },
                {
                  "name": "NotOpen",
                  "fields": [],
                  "index": 13,
                  "docs": ["The pool is not open to join"]
                },
                {
                  "name": "MaxPools",
                  "fields": [],
                  "index": 14,
                  "docs": ["The system is maxed out on pools."]
                },
                {
                  "name": "MaxPoolMembers",
                  "fields": [],
                  "index": 15,
                  "docs": ["Too many members in the pool or system."]
                },
                {
                  "name": "CanNotChangeState",
                  "fields": [],
                  "index": 16,
                  "docs": ["The pools state cannot be changed."]
                },
                {
                  "name": "DoesNotHavePermission",
                  "fields": [],
                  "index": 17,
                  "docs": ["The caller does not have adequate permissions."]
                },
                {
                  "name": "MetadataExceedsMaxLen",
                  "fields": [],
                  "index": 18,
                  "docs": ["Metadata exceeds [`Config::MaxMetadataLen`]"]
                },
                {
                  "name": "Defensive",
                  "fields": [
                    {
                      "typeId": 658,
                      "typeName": "DefensiveError",
                      "docs": []
                    }
                  ],
                  "index": 19,
                  "docs": [
                    "Some error occurred that should never happen. This should be reported to the",
                    "maintainers."
                  ]
                },
                {
                  "name": "PartialUnbondNotAllowedPermissionlessly",
                  "fields": [],
                  "index": 20,
                  "docs": ["Partial unbonding now allowed permissionlessly."]
                },
                {
                  "name": "MaxCommissionRestricted",
                  "fields": [],
                  "index": 21,
                  "docs": ["The pool's max commission cannot be set higher than the existing value."]
                },
                {
                  "name": "CommissionExceedsMaximum",
                  "fields": [],
                  "index": 22,
                  "docs": ["The supplied commission exceeds the max allowed commission."]
                },
                {
                  "name": "CommissionExceedsGlobalMaximum",
                  "fields": [],
                  "index": 23,
                  "docs": ["The supplied commission exceeds global maximum commission."]
                },
                {
                  "name": "CommissionChangeThrottled",
                  "fields": [],
                  "index": 24,
                  "docs": ["Not enough blocks have surpassed since the last commission update."]
                },
                {
                  "name": "CommissionChangeRateNotAllowed",
                  "fields": [],
                  "index": 25,
                  "docs": ["The submitted changes to commission change rate are not allowed."]
                },
                {
                  "name": "NoPendingCommission",
                  "fields": [],
                  "index": 26,
                  "docs": ["There is no pending commission to claim."]
                },
                {
                  "name": "NoCommissionCurrentSet",
                  "fields": [],
                  "index": 27,
                  "docs": ["No commission current has been set."]
                },
                {
                  "name": "PoolIdInUse",
                  "fields": [],
                  "index": 28,
                  "docs": ["Pool id currently in use."]
                },
                {
                  "name": "InvalidPoolId",
                  "fields": [],
                  "index": 29,
                  "docs": ["Pool id provided is not correct/usable."]
                },
                {
                  "name": "BondExtraRestricted",
                  "fields": [],
                  "index": 30,
                  "docs": ["Bonding extra is restricted to the exact pending reward amount."]
                }
              ]
            }
          },
          "docs": ["The `Error` enum of this pallet."]
        },
        {
          "id": 658,
          "path": ["pallet_nomination_pools", "pallet", "DefensiveError"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "NotEnoughSpaceInUnbondPool",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "PoolNotFound",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "RewardPoolNotFound",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "SubPoolsNotFound",
                  "fields": [],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "BondedStashKilledPrematurely",
                  "fields": [],
                  "index": 4,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 659,
          "path": ["pallet_fast_unstake", "types", "UnstakeRequest"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "stashes",
                  "typeId": 660,
                  "typeName": "BoundedVec<(T::AccountId, BalanceOf<T>), T::BatchSize>",
                  "docs": []
                },
                {
                  "name": "checked",
                  "typeId": 661,
                  "typeName": "BoundedVec<EraIndex, MaxChecking<T>>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 660,
          "path": ["bounded_collections", "bounded_vec", "BoundedVec"],
          "params": [
            {
              "name": "T",
              "typeId": 269
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 268,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 661,
          "path": ["bounded_collections", "bounded_vec", "BoundedVec"],
          "params": [
            {
              "name": "T",
              "typeId": 4
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 97,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 662,
          "path": ["pallet_fast_unstake", "pallet", "Error"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "NotController",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "The provided Controller account was not found.",
                    "",
                    "This means that the given account is not bonded."
                  ]
                },
                {
                  "name": "AlreadyQueued",
                  "fields": [],
                  "index": 1,
                  "docs": ["The bonded account has already been queued."]
                },
                {
                  "name": "NotFullyBonded",
                  "fields": [],
                  "index": 2,
                  "docs": ["The bonded account has active unlocking chunks."]
                },
                {
                  "name": "NotQueued",
                  "fields": [],
                  "index": 3,
                  "docs": ["The provided un-staker is not in the `Queue`."]
                },
                {
                  "name": "AlreadyHead",
                  "fields": [],
                  "index": 4,
                  "docs": ["The provided un-staker is already in Head, and cannot deregister."]
                },
                {
                  "name": "CallNotAllowed",
                  "fields": [],
                  "index": 5,
                  "docs": ["The call is not allowed at this point because the pallet is not active."]
                }
              ]
            }
          },
          "docs": ["The `Error` enum of this pallet."]
        },
        {
          "id": 663,
          "path": ["polkadot_runtime_parachains", "configuration", "HostConfiguration"],
          "params": [
            {
              "name": "BlockNumber",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "max_code_size",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_head_data_size",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_upward_queue_count",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_upward_queue_size",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_upward_message_size",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_upward_message_num_per_candidate",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "hrmp_max_message_num_per_candidate",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "validation_upgrade_cooldown",
                  "typeId": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                },
                {
                  "name": "validation_upgrade_delay",
                  "typeId": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                },
                {
                  "name": "async_backing_params",
                  "typeId": 285,
                  "typeName": "AsyncBackingParams",
                  "docs": []
                },
                {
                  "name": "max_pov_size",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_downward_message_size",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "hrmp_max_parachain_outbound_channels",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "hrmp_sender_deposit",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "hrmp_recipient_deposit",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "hrmp_channel_max_capacity",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "hrmp_channel_max_total_size",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "hrmp_max_parachain_inbound_channels",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "hrmp_channel_max_message_size",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "executor_params",
                  "typeId": 286,
                  "typeName": "ExecutorParams",
                  "docs": []
                },
                {
                  "name": "code_retention_period",
                  "typeId": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                },
                {
                  "name": "on_demand_cores",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "on_demand_retries",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "on_demand_queue_max_size",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "on_demand_target_queue_utilization",
                  "typeId": 41,
                  "typeName": "Perbill",
                  "docs": []
                },
                {
                  "name": "on_demand_fee_variability",
                  "typeId": 41,
                  "typeName": "Perbill",
                  "docs": []
                },
                {
                  "name": "on_demand_base_fee",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "on_demand_ttl",
                  "typeId": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                },
                {
                  "name": "group_rotation_frequency",
                  "typeId": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                },
                {
                  "name": "paras_availability_period",
                  "typeId": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                },
                {
                  "name": "scheduling_lookahead",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_validators_per_core",
                  "typeId": 270,
                  "typeName": "Option<u32>",
                  "docs": []
                },
                {
                  "name": "max_validators",
                  "typeId": 270,
                  "typeName": "Option<u32>",
                  "docs": []
                },
                {
                  "name": "dispute_period",
                  "typeId": 4,
                  "typeName": "SessionIndex",
                  "docs": []
                },
                {
                  "name": "dispute_post_conclusion_acceptance_period",
                  "typeId": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                },
                {
                  "name": "no_show_slots",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "n_delay_tranches",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "zeroth_delay_tranche_width",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "needed_approvals",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "relay_vrf_modulo_samples",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "pvf_voting_ttl",
                  "typeId": 4,
                  "typeName": "SessionIndex",
                  "docs": []
                },
                {
                  "name": "minimum_validation_upgrade_delay",
                  "typeId": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                },
                {
                  "name": "minimum_backing_votes",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 664,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 665
            }
          },
          "docs": []
        },
        {
          "id": 665,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [4, 663]
            }
          },
          "docs": []
        },
        {
          "id": 666,
          "path": ["polkadot_runtime_parachains", "configuration", "pallet", "Error"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "InvalidNewValue",
                  "fields": [],
                  "index": 0,
                  "docs": ["The new value for a configuration parameter is invalid."]
                }
              ]
            }
          },
          "docs": ["The `Error` enum of this pallet."]
        },
        {
          "id": 667,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 300
            }
          },
          "docs": []
        },
        {
          "id": 668,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 104
            }
          },
          "docs": []
        },
        {
          "id": 669,
          "path": ["polkadot_runtime_parachains", "shared", "AllowedRelayParentsTracker"],
          "params": [
            {
              "name": "Hash",
              "typeId": 12
            },
            {
              "name": "BlockNumber",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "buffer",
                  "typeId": 670,
                  "typeName": "VecDeque<(Hash, Hash)>",
                  "docs": []
                },
                {
                  "name": "latest_number",
                  "typeId": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 670,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 671
            }
          },
          "docs": []
        },
        {
          "id": 671,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [12, 12]
            }
          },
          "docs": []
        },
        {
          "id": 672,
          "path": ["polkadot_runtime_parachains", "inclusion", "AvailabilityBitfieldRecord"],
          "params": [
            {
              "name": "N",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "bitfield",
                  "typeId": 297,
                  "typeName": "AvailabilityBitfield",
                  "docs": []
                },
                {
                  "name": "submitted_at",
                  "typeId": 4,
                  "typeName": "N",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 673,
          "path": ["polkadot_runtime_parachains", "inclusion", "CandidatePendingAvailability"],
          "params": [
            {
              "name": "H",
              "typeId": 12
            },
            {
              "name": "N",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "core",
                  "typeId": 439,
                  "typeName": "CoreIndex",
                  "docs": []
                },
                {
                  "name": "hash",
                  "typeId": 321,
                  "typeName": "CandidateHash",
                  "docs": []
                },
                {
                  "name": "descriptor",
                  "typeId": 305,
                  "typeName": "CandidateDescriptor<H>",
                  "docs": []
                },
                {
                  "name": "availability_votes",
                  "typeId": 298,
                  "typeName": "BitVec<u8, BitOrderLsb0>",
                  "docs": []
                },
                {
                  "name": "backers",
                  "typeId": 298,
                  "typeName": "BitVec<u8, BitOrderLsb0>",
                  "docs": []
                },
                {
                  "name": "relay_parent_number",
                  "typeId": 4,
                  "typeName": "N",
                  "docs": []
                },
                {
                  "name": "backed_in_number",
                  "typeId": 4,
                  "typeName": "N",
                  "docs": []
                },
                {
                  "name": "backing_group",
                  "typeId": 440,
                  "typeName": "GroupIndex",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 674,
          "path": ["polkadot_runtime_parachains", "inclusion", "pallet", "Error"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "UnsortedOrDuplicateValidatorIndices",
                  "fields": [],
                  "index": 0,
                  "docs": ["Validator indices are out of order or contains duplicates."]
                },
                {
                  "name": "UnsortedOrDuplicateDisputeStatementSet",
                  "fields": [],
                  "index": 1,
                  "docs": ["Dispute statement sets are out of order or contain duplicates."]
                },
                {
                  "name": "UnsortedOrDuplicateBackedCandidates",
                  "fields": [],
                  "index": 2,
                  "docs": ["Backed candidates are out of order (core index) or contain duplicates."]
                },
                {
                  "name": "UnexpectedRelayParent",
                  "fields": [],
                  "index": 3,
                  "docs": ["A different relay parent was provided compared to the on-chain stored one."]
                },
                {
                  "name": "WrongBitfieldSize",
                  "fields": [],
                  "index": 4,
                  "docs": ["Availability bitfield has unexpected size."]
                },
                {
                  "name": "BitfieldAllZeros",
                  "fields": [],
                  "index": 5,
                  "docs": ["Bitfield consists of zeros only."]
                },
                {
                  "name": "BitfieldDuplicateOrUnordered",
                  "fields": [],
                  "index": 6,
                  "docs": ["Multiple bitfields submitted by same validator or validators out of order by index."]
                },
                {
                  "name": "ValidatorIndexOutOfBounds",
                  "fields": [],
                  "index": 7,
                  "docs": ["Validator index out of bounds."]
                },
                {
                  "name": "InvalidBitfieldSignature",
                  "fields": [],
                  "index": 8,
                  "docs": ["Invalid signature"]
                },
                {
                  "name": "UnscheduledCandidate",
                  "fields": [],
                  "index": 9,
                  "docs": ["Candidate submitted but para not scheduled."]
                },
                {
                  "name": "CandidateScheduledBeforeParaFree",
                  "fields": [],
                  "index": 10,
                  "docs": ["Candidate scheduled despite pending candidate already existing for the para."]
                },
                {
                  "name": "ScheduledOutOfOrder",
                  "fields": [],
                  "index": 11,
                  "docs": ["Scheduled cores out of order."]
                },
                {
                  "name": "HeadDataTooLarge",
                  "fields": [],
                  "index": 12,
                  "docs": ["Head data exceeds the configured maximum."]
                },
                {
                  "name": "PrematureCodeUpgrade",
                  "fields": [],
                  "index": 13,
                  "docs": ["Code upgrade prematurely."]
                },
                {
                  "name": "NewCodeTooLarge",
                  "fields": [],
                  "index": 14,
                  "docs": ["Output code is too large"]
                },
                {
                  "name": "DisallowedRelayParent",
                  "fields": [],
                  "index": 15,
                  "docs": [
                    "The candidate's relay-parent was not allowed. Either it was",
                    "not recent enough or it didn't advance based on the last parachain block."
                  ]
                },
                {
                  "name": "InvalidAssignment",
                  "fields": [],
                  "index": 16,
                  "docs": [
                    "Failed to compute group index for the core: either it's out of bounds",
                    "or the relay parent doesn't belong to the current session."
                  ]
                },
                {
                  "name": "InvalidGroupIndex",
                  "fields": [],
                  "index": 17,
                  "docs": ["Invalid group index in core assignment."]
                },
                {
                  "name": "InsufficientBacking",
                  "fields": [],
                  "index": 18,
                  "docs": ["Insufficient (non-majority) backing."]
                },
                {
                  "name": "InvalidBacking",
                  "fields": [],
                  "index": 19,
                  "docs": ["Invalid (bad signature, unknown validator, etc.) backing."]
                },
                {
                  "name": "NotCollatorSigned",
                  "fields": [],
                  "index": 20,
                  "docs": ["Collator did not sign PoV."]
                },
                {
                  "name": "ValidationDataHashMismatch",
                  "fields": [],
                  "index": 21,
                  "docs": ["The validation data hash does not match expected."]
                },
                {
                  "name": "IncorrectDownwardMessageHandling",
                  "fields": [],
                  "index": 22,
                  "docs": ["The downward message queue is not processed correctly."]
                },
                {
                  "name": "InvalidUpwardMessages",
                  "fields": [],
                  "index": 23,
                  "docs": ["At least one upward message sent does not pass the acceptance criteria."]
                },
                {
                  "name": "HrmpWatermarkMishandling",
                  "fields": [],
                  "index": 24,
                  "docs": ["The candidate didn't follow the rules of HRMP watermark advancement."]
                },
                {
                  "name": "InvalidOutboundHrmp",
                  "fields": [],
                  "index": 25,
                  "docs": ["The HRMP messages sent by the candidate is not valid."]
                },
                {
                  "name": "InvalidValidationCodeHash",
                  "fields": [],
                  "index": 26,
                  "docs": ["The validation code hash of the candidate is not valid."]
                },
                {
                  "name": "ParaHeadMismatch",
                  "fields": [],
                  "index": 27,
                  "docs": [
                    "The `para_head` hash in the candidate descriptor doesn't match the hash of the actual",
                    "para head in the commitments."
                  ]
                },
                {
                  "name": "BitfieldReferencesFreedCore",
                  "fields": [],
                  "index": 28,
                  "docs": [
                    "A bitfield that references a freed core,",
                    "either intentionally or as part of a concluded",
                    "invalid dispute."
                  ]
                }
              ]
            }
          },
          "docs": ["The `Error` enum of this pallet."]
        },
        {
          "id": 675,
          "path": ["polkadot_primitives", "v5", "ScrapedOnChainVotes"],
          "params": [
            {
              "name": "H",
              "typeId": 12
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "session",
                  "typeId": 4,
                  "typeName": "SessionIndex",
                  "docs": []
                },
                {
                  "name": "backing_validators_per_candidate",
                  "typeId": 676,
                  "typeName": "Vec<(CandidateReceipt<H>, Vec<(ValidatorIndex, ValidityAttestation)>)\n>",
                  "docs": []
                },
                {
                  "name": "disputes",
                  "typeId": 319,
                  "typeName": "MultiDisputeStatementSet",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 676,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 677
            }
          },
          "docs": []
        },
        {
          "id": 677,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [438, 678]
            }
          },
          "docs": []
        },
        {
          "id": 678,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 679
            }
          },
          "docs": []
        },
        {
          "id": 679,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [300, 318]
            }
          },
          "docs": []
        },
        {
          "id": 680,
          "path": ["polkadot_runtime_parachains", "paras_inherent", "pallet", "Error"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "TooManyInclusionInherents",
                  "fields": [],
                  "index": 0,
                  "docs": ["Inclusion inherent called more than once per block."]
                },
                {
                  "name": "InvalidParentHeader",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "The hash of the submitted parent header doesn't correspond to the saved block hash of",
                    "the parent."
                  ]
                },
                {
                  "name": "CandidateConcludedInvalid",
                  "fields": [],
                  "index": 2,
                  "docs": ["Disputed candidate that was concluded invalid."]
                },
                {
                  "name": "InherentOverweight",
                  "fields": [],
                  "index": 3,
                  "docs": ["The data given to the inherent will result in an overweight block."]
                },
                {
                  "name": "DisputeStatementsUnsortedOrDuplicates",
                  "fields": [],
                  "index": 4,
                  "docs": ["The ordering of dispute statements was invalid."]
                },
                {
                  "name": "DisputeInvalid",
                  "fields": [],
                  "index": 5,
                  "docs": ["A dispute statement was invalid."]
                }
              ]
            }
          },
          "docs": ["The `Error` enum of this pallet."]
        },
        {
          "id": 681,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 667
            }
          },
          "docs": []
        },
        {
          "id": 682,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 683
            }
          },
          "docs": []
        },
        {
          "id": 683,
          "path": ["polkadot_primitives", "v5", "CoreOccupied"],
          "params": [
            {
              "name": "N",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Free",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Paras",
                  "fields": [
                    {
                      "typeId": 684,
                      "typeName": "ParasEntry<N>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 684,
          "path": ["polkadot_primitives", "v5", "ParasEntry"],
          "params": [
            {
              "name": "N",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "assignment",
                  "typeId": 685,
                  "typeName": "Assignment",
                  "docs": []
                },
                {
                  "name": "availability_timeouts",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "ttl",
                  "typeId": 4,
                  "typeName": "N",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 685,
          "path": ["polkadot_primitives", "v5", "Assignment"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "para_id",
                  "typeId": 134,
                  "typeName": "Id",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 686,
          "path": ["BTreeMap"],
          "params": [
            {
              "name": "K",
              "typeId": 439
            },
            {
              "name": "V",
              "typeId": 687
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 689,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 687,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 688
            }
          },
          "docs": []
        },
        {
          "id": 688,
          "path": ["Option"],
          "params": [
            {
              "name": "T",
              "typeId": 684
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 684,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 689,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 690
            }
          },
          "docs": []
        },
        {
          "id": 690,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [439, 687]
            }
          },
          "docs": []
        },
        {
          "id": 691,
          "path": ["polkadot_runtime_parachains", "paras", "PvfCheckActiveVoteState"],
          "params": [
            {
              "name": "BlockNumber",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "votes_accept",
                  "typeId": 298,
                  "typeName": "BitVec<u8, BitOrderLsb0>",
                  "docs": []
                },
                {
                  "name": "votes_reject",
                  "typeId": 298,
                  "typeName": "BitVec<u8, BitOrderLsb0>",
                  "docs": []
                },
                {
                  "name": "age",
                  "typeId": 4,
                  "typeName": "SessionIndex",
                  "docs": []
                },
                {
                  "name": "created_at",
                  "typeId": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                },
                {
                  "name": "causes",
                  "typeId": 692,
                  "typeName": "Vec<PvfCheckCause<BlockNumber>>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 692,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 693
            }
          },
          "docs": []
        },
        {
          "id": 693,
          "path": ["polkadot_runtime_parachains", "paras", "PvfCheckCause"],
          "params": [
            {
              "name": "BlockNumber",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Onboarding",
                  "fields": [
                    {
                      "typeId": 134,
                      "typeName": "ParaId",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Upgrade",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 134,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "included_at",
                      "typeId": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 694,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 308
            }
          },
          "docs": []
        },
        {
          "id": 695,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 134
            }
          },
          "docs": []
        },
        {
          "id": 696,
          "path": ["polkadot_runtime_parachains", "paras", "ParaLifecycle"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Onboarding",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Parathread",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Parachain",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "UpgradingParathread",
                  "fields": [],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "DowngradingParachain",
                  "fields": [],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "OffboardingParathread",
                  "fields": [],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "OffboardingParachain",
                  "fields": [],
                  "index": 6,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 697,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [134, 4]
            }
          },
          "docs": []
        },
        {
          "id": 698,
          "path": ["polkadot_runtime_parachains", "paras", "ParaPastCodeMeta"],
          "params": [
            {
              "name": "N",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "upgrade_times",
                  "typeId": 699,
                  "typeName": "Vec<ReplacementTimes<N>>",
                  "docs": []
                },
                {
                  "name": "last_pruned",
                  "typeId": 270,
                  "typeName": "Option<N>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 699,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 700
            }
          },
          "docs": []
        },
        {
          "id": 700,
          "path": ["polkadot_runtime_parachains", "paras", "ReplacementTimes"],
          "params": [
            {
              "name": "N",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "expected_at",
                  "typeId": 4,
                  "typeName": "N",
                  "docs": []
                },
                {
                  "name": "activated_at",
                  "typeId": 4,
                  "typeName": "N",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 701,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 697
            }
          },
          "docs": []
        },
        {
          "id": 702,
          "path": ["polkadot_primitives", "v5", "UpgradeGoAhead"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Abort",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "GoAhead",
                  "fields": [],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 703,
          "path": ["polkadot_primitives", "v5", "UpgradeRestriction"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Present",
                  "fields": [],
                  "index": 0,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 704,
          "path": ["polkadot_runtime_parachains", "paras", "ParaGenesisArgs"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "genesis_head",
                  "typeId": 316,
                  "typeName": "HeadData",
                  "docs": []
                },
                {
                  "name": "validation_code",
                  "typeId": 315,
                  "typeName": "ValidationCode",
                  "docs": []
                },
                {
                  "name": "para_kind",
                  "typeId": 44,
                  "typeName": "ParaKind",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 705,
          "path": ["polkadot_runtime_parachains", "paras", "pallet", "Error"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "NotRegistered",
                  "fields": [],
                  "index": 0,
                  "docs": ["Para is not registered in our system."]
                },
                {
                  "name": "CannotOnboard",
                  "fields": [],
                  "index": 1,
                  "docs": ["Para cannot be onboarded because it is already tracked by our system."]
                },
                {
                  "name": "CannotOffboard",
                  "fields": [],
                  "index": 2,
                  "docs": ["Para cannot be offboarded at this time."]
                },
                {
                  "name": "CannotUpgrade",
                  "fields": [],
                  "index": 3,
                  "docs": ["Para cannot be upgraded to a lease holding parachain."]
                },
                {
                  "name": "CannotDowngrade",
                  "fields": [],
                  "index": 4,
                  "docs": ["Para cannot be downgraded to an on-demand parachain."]
                },
                {
                  "name": "PvfCheckStatementStale",
                  "fields": [],
                  "index": 5,
                  "docs": ["The statement for PVF pre-checking is stale."]
                },
                {
                  "name": "PvfCheckStatementFuture",
                  "fields": [],
                  "index": 6,
                  "docs": ["The statement for PVF pre-checking is for a future session."]
                },
                {
                  "name": "PvfCheckValidatorIndexOutOfBounds",
                  "fields": [],
                  "index": 7,
                  "docs": ["Claimed validator index is out of bounds."]
                },
                {
                  "name": "PvfCheckInvalidSignature",
                  "fields": [],
                  "index": 8,
                  "docs": ["The signature for the PVF pre-checking is invalid."]
                },
                {
                  "name": "PvfCheckDoubleVote",
                  "fields": [],
                  "index": 9,
                  "docs": ["The given validator already has cast a vote."]
                },
                {
                  "name": "PvfCheckSubjectInvalid",
                  "fields": [],
                  "index": 10,
                  "docs": ["The given PVF does not exist at the moment of process a vote."]
                },
                {
                  "name": "CannotUpgradeCode",
                  "fields": [],
                  "index": 11,
                  "docs": ["Parachain cannot currently schedule a code upgrade."]
                }
              ]
            }
          },
          "docs": ["The `Error` enum of this pallet."]
        },
        {
          "id": 706,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 707
            }
          },
          "docs": []
        },
        {
          "id": 707,
          "path": ["polkadot_runtime_parachains", "initializer", "BufferedSessionChange"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "validators",
                  "typeId": 668,
                  "typeName": "Vec<ValidatorId>",
                  "docs": []
                },
                {
                  "name": "queued",
                  "typeId": 668,
                  "typeName": "Vec<ValidatorId>",
                  "docs": []
                },
                {
                  "name": "session_index",
                  "typeId": 4,
                  "typeName": "SessionIndex",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 708,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 709
            }
          },
          "docs": []
        },
        {
          "id": 709,
          "path": ["polkadot_core_primitives", "InboundDownwardMessage"],
          "params": [
            {
              "name": "BlockNumber",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "sent_at",
                  "typeId": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                },
                {
                  "name": "msg",
                  "typeId": 13,
                  "typeName": "DownwardMessage",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 710,
          "path": ["polkadot_runtime_parachains", "hrmp", "HrmpOpenChannelRequest"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "confirmed",
                  "typeId": 44,
                  "typeName": "bool",
                  "docs": []
                },
                {
                  "name": "_age",
                  "typeId": 4,
                  "typeName": "SessionIndex",
                  "docs": []
                },
                {
                  "name": "sender_deposit",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "max_message_size",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_capacity",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_total_size",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 711,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 331
            }
          },
          "docs": []
        },
        {
          "id": 712,
          "path": ["polkadot_runtime_parachains", "hrmp", "HrmpChannel"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "max_capacity",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_total_size",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_message_size",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "msg_count",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "total_size",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "mqc_head",
                  "typeId": 145,
                  "typeName": "Option<Hash>",
                  "docs": []
                },
                {
                  "name": "sender_deposit",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "recipient_deposit",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 713,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 714
            }
          },
          "docs": []
        },
        {
          "id": 714,
          "path": ["polkadot_core_primitives", "InboundHrmpMessage"],
          "params": [
            {
              "name": "BlockNumber",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "sent_at",
                  "typeId": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                },
                {
                  "name": "data",
                  "typeId": 13,
                  "typeName": "sp_std::vec::Vec<u8>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 715,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 716
            }
          },
          "docs": []
        },
        {
          "id": 716,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [4, 695]
            }
          },
          "docs": []
        },
        {
          "id": 717,
          "path": ["polkadot_runtime_parachains", "hrmp", "pallet", "Error"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "OpenHrmpChannelToSelf",
                  "fields": [],
                  "index": 0,
                  "docs": ["The sender tried to open a channel to themselves."]
                },
                {
                  "name": "OpenHrmpChannelInvalidRecipient",
                  "fields": [],
                  "index": 1,
                  "docs": ["The recipient is not a valid para."]
                },
                {
                  "name": "OpenHrmpChannelZeroCapacity",
                  "fields": [],
                  "index": 2,
                  "docs": ["The requested capacity is zero."]
                },
                {
                  "name": "OpenHrmpChannelCapacityExceedsLimit",
                  "fields": [],
                  "index": 3,
                  "docs": ["The requested capacity exceeds the global limit."]
                },
                {
                  "name": "OpenHrmpChannelZeroMessageSize",
                  "fields": [],
                  "index": 4,
                  "docs": ["The requested maximum message size is 0."]
                },
                {
                  "name": "OpenHrmpChannelMessageSizeExceedsLimit",
                  "fields": [],
                  "index": 5,
                  "docs": ["The open request requested the message size that exceeds the global limit."]
                },
                {
                  "name": "OpenHrmpChannelAlreadyExists",
                  "fields": [],
                  "index": 6,
                  "docs": ["The channel already exists"]
                },
                {
                  "name": "OpenHrmpChannelAlreadyRequested",
                  "fields": [],
                  "index": 7,
                  "docs": ["There is already a request to open the same channel."]
                },
                {
                  "name": "OpenHrmpChannelLimitExceeded",
                  "fields": [],
                  "index": 8,
                  "docs": ["The sender already has the maximum number of allowed outbound channels."]
                },
                {
                  "name": "AcceptHrmpChannelDoesntExist",
                  "fields": [],
                  "index": 9,
                  "docs": ["The channel from the sender to the origin doesn't exist."]
                },
                {
                  "name": "AcceptHrmpChannelAlreadyConfirmed",
                  "fields": [],
                  "index": 10,
                  "docs": ["The channel is already confirmed."]
                },
                {
                  "name": "AcceptHrmpChannelLimitExceeded",
                  "fields": [],
                  "index": 11,
                  "docs": ["The recipient already has the maximum number of allowed inbound channels."]
                },
                {
                  "name": "CloseHrmpChannelUnauthorized",
                  "fields": [],
                  "index": 12,
                  "docs": ["The origin tries to close a channel where it is neither the sender nor the recipient."]
                },
                {
                  "name": "CloseHrmpChannelDoesntExist",
                  "fields": [],
                  "index": 13,
                  "docs": ["The channel to be closed doesn't exist."]
                },
                {
                  "name": "CloseHrmpChannelAlreadyUnderway",
                  "fields": [],
                  "index": 14,
                  "docs": ["The channel close request is already requested."]
                },
                {
                  "name": "CancelHrmpOpenChannelUnauthorized",
                  "fields": [],
                  "index": 15,
                  "docs": ["Canceling is requested by neither the sender nor recipient of the open channel request."]
                },
                {
                  "name": "OpenHrmpChannelDoesntExist",
                  "fields": [],
                  "index": 16,
                  "docs": ["The open request doesn't exist."]
                },
                {
                  "name": "OpenHrmpChannelAlreadyConfirmed",
                  "fields": [],
                  "index": 17,
                  "docs": ["Cannot cancel an HRMP open channel request because it is already confirmed."]
                },
                {
                  "name": "WrongWitness",
                  "fields": [],
                  "index": 18,
                  "docs": ["The provided witness data is wrong."]
                }
              ]
            }
          },
          "docs": ["The `Error` enum of this pallet."]
        },
        {
          "id": 718,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 105
            }
          },
          "docs": []
        },
        {
          "id": 719,
          "path": ["polkadot_primitives", "v5", "SessionInfo"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "active_validator_indices",
                  "typeId": 667,
                  "typeName": "Vec<ValidatorIndex>",
                  "docs": []
                },
                {
                  "name": "random_seed",
                  "typeId": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                },
                {
                  "name": "dispute_period",
                  "typeId": 4,
                  "typeName": "SessionIndex",
                  "docs": []
                },
                {
                  "name": "validators",
                  "typeId": 720,
                  "typeName": "IndexedVec<ValidatorIndex, ValidatorId>",
                  "docs": []
                },
                {
                  "name": "discovery_keys",
                  "typeId": 721,
                  "typeName": "Vec<AuthorityDiscoveryId>",
                  "docs": []
                },
                {
                  "name": "assignment_keys",
                  "typeId": 718,
                  "typeName": "Vec<AssignmentId>",
                  "docs": []
                },
                {
                  "name": "validator_groups",
                  "typeId": 722,
                  "typeName": "IndexedVec<GroupIndex, Vec<ValidatorIndex>>",
                  "docs": []
                },
                {
                  "name": "n_cores",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "zeroth_delay_tranche_width",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "relay_vrf_modulo_samples",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "n_delay_tranches",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "no_show_slots",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "needed_approvals",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 720,
          "path": ["polkadot_primitives", "v5", "IndexedVec"],
          "params": [
            {
              "name": "K",
              "typeId": 300
            },
            {
              "name": "V",
              "typeId": 104
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 668,
                  "typeName": "Vec<V>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 721,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 106
            }
          },
          "docs": []
        },
        {
          "id": 722,
          "path": ["polkadot_primitives", "v5", "IndexedVec"],
          "params": [
            {
              "name": "K",
              "typeId": 440
            },
            {
              "name": "V",
              "typeId": 667
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 681,
                  "typeName": "Vec<V>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 723,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [4, 321]
            }
          },
          "docs": []
        },
        {
          "id": 724,
          "path": ["polkadot_primitives", "v5", "DisputeState"],
          "params": [
            {
              "name": "N",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "validators_for",
                  "typeId": 298,
                  "typeName": "BitVec<u8, bitvec::order::Lsb0>",
                  "docs": []
                },
                {
                  "name": "validators_against",
                  "typeId": 298,
                  "typeName": "BitVec<u8, bitvec::order::Lsb0>",
                  "docs": []
                },
                {
                  "name": "start",
                  "typeId": 4,
                  "typeName": "N",
                  "docs": []
                },
                {
                  "name": "concluded_at",
                  "typeId": 270,
                  "typeName": "Option<N>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 725,
          "path": ["BTreeSet"],
          "params": [
            {
              "name": "T",
              "typeId": 300
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 667,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 726,
          "path": ["polkadot_runtime_parachains", "disputes", "pallet", "Error"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "DuplicateDisputeStatementSets",
                  "fields": [],
                  "index": 0,
                  "docs": ["Duplicate dispute statement sets provided."]
                },
                {
                  "name": "AncientDisputeStatement",
                  "fields": [],
                  "index": 1,
                  "docs": ["Ancient dispute statement provided."]
                },
                {
                  "name": "ValidatorIndexOutOfBounds",
                  "fields": [],
                  "index": 2,
                  "docs": ["Validator index on statement is out of bounds for session."]
                },
                {
                  "name": "InvalidSignature",
                  "fields": [],
                  "index": 3,
                  "docs": ["Invalid signature on statement."]
                },
                {
                  "name": "DuplicateStatement",
                  "fields": [],
                  "index": 4,
                  "docs": ["Validator vote submitted more than once to dispute."]
                },
                {
                  "name": "SingleSidedDispute",
                  "fields": [],
                  "index": 5,
                  "docs": ["A dispute where there are only votes on one side."]
                },
                {
                  "name": "MaliciousBacker",
                  "fields": [],
                  "index": 6,
                  "docs": ["A dispute vote from a malicious backer."]
                },
                {
                  "name": "MissingBackingVotes",
                  "fields": [],
                  "index": 7,
                  "docs": ["No backing votes were provides along dispute statements."]
                },
                {
                  "name": "UnconfirmedDispute",
                  "fields": [],
                  "index": 8,
                  "docs": ["Unconfirmed dispute statement sets provided."]
                }
              ]
            }
          },
          "docs": ["The `Error` enum of this pallet."]
        },
        {
          "id": 727,
          "path": ["polkadot_primitives", "v5", "slashing", "PendingSlashes"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "keys",
                  "typeId": 728,
                  "typeName": "BTreeMap<ValidatorIndex, ValidatorId>",
                  "docs": []
                },
                {
                  "name": "kind",
                  "typeId": 336,
                  "typeName": "SlashingOffenceKind",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 728,
          "path": ["BTreeMap"],
          "params": [
            {
              "name": "K",
              "typeId": 300
            },
            {
              "name": "V",
              "typeId": 104
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 729,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 729,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 730
            }
          },
          "docs": []
        },
        {
          "id": 730,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [300, 104]
            }
          },
          "docs": []
        },
        {
          "id": 731,
          "path": ["polkadot_runtime_parachains", "disputes", "slashing", "pallet", "Error"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "InvalidKeyOwnershipProof",
                  "fields": [],
                  "index": 0,
                  "docs": ["The key ownership proof is invalid."]
                },
                {
                  "name": "InvalidSessionIndex",
                  "fields": [],
                  "index": 1,
                  "docs": ["The session index is too old or invalid."]
                },
                {
                  "name": "InvalidCandidateHash",
                  "fields": [],
                  "index": 2,
                  "docs": ["The candidate hash is invalid."]
                },
                {
                  "name": "InvalidValidatorIndex",
                  "fields": [],
                  "index": 3,
                  "docs": ["There is no pending slash for the given validator index and time", "slot."]
                },
                {
                  "name": "ValidatorIndexIdMismatch",
                  "fields": [],
                  "index": 4,
                  "docs": ["The validator index does not match the validator id."]
                },
                {
                  "name": "DuplicateSlashingReport",
                  "fields": [],
                  "index": 5,
                  "docs": ["The given slashing report is valid but already previously reported."]
                }
              ]
            }
          },
          "docs": ["The `Error` enum of this pallet."]
        },
        {
          "id": 732,
          "path": ["polkadot_runtime_common", "paras_registrar", "ParaInfo"],
          "params": [
            {
              "name": "Account",
              "typeId": 0
            },
            {
              "name": "Balance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "manager",
                  "typeId": 0,
                  "typeName": "Account",
                  "docs": []
                },
                {
                  "name": "deposit",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "locked",
                  "typeId": 733,
                  "typeName": "Option<bool>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 733,
          "path": ["Option"],
          "params": [
            {
              "name": "T",
              "typeId": 44
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 44,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 734,
          "path": ["polkadot_runtime_common", "paras_registrar", "pallet", "Error"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "NotRegistered",
                  "fields": [],
                  "index": 0,
                  "docs": ["The ID is not registered."]
                },
                {
                  "name": "AlreadyRegistered",
                  "fields": [],
                  "index": 1,
                  "docs": ["The ID is already registered."]
                },
                {
                  "name": "NotOwner",
                  "fields": [],
                  "index": 2,
                  "docs": ["The caller is not the owner of this Id."]
                },
                {
                  "name": "CodeTooLarge",
                  "fields": [],
                  "index": 3,
                  "docs": ["Invalid para code size."]
                },
                {
                  "name": "HeadDataTooLarge",
                  "fields": [],
                  "index": 4,
                  "docs": ["Invalid para head data size."]
                },
                {
                  "name": "NotParachain",
                  "fields": [],
                  "index": 5,
                  "docs": ["Para is not a Parachain."]
                },
                {
                  "name": "NotParathread",
                  "fields": [],
                  "index": 6,
                  "docs": ["Para is not a Parathread (on-demand parachain)."]
                },
                {
                  "name": "CannotDeregister",
                  "fields": [],
                  "index": 7,
                  "docs": ["Cannot deregister para"]
                },
                {
                  "name": "CannotDowngrade",
                  "fields": [],
                  "index": 8,
                  "docs": ["Cannot schedule downgrade of lease holding parachain to on-demand parachain"]
                },
                {
                  "name": "CannotUpgrade",
                  "fields": [],
                  "index": 9,
                  "docs": ["Cannot schedule upgrade of on-demand parachain to lease holding parachain"]
                },
                {
                  "name": "ParaLocked",
                  "fields": [],
                  "index": 10,
                  "docs": [
                    "Para is locked from manipulation by the manager. Must use parachain or relay chain",
                    "governance."
                  ]
                },
                {
                  "name": "NotReserved",
                  "fields": [],
                  "index": 11,
                  "docs": ["The ID given for registration has not been reserved."]
                },
                {
                  "name": "EmptyCode",
                  "fields": [],
                  "index": 12,
                  "docs": ["Registering parachain with empty code is not allowed."]
                },
                {
                  "name": "CannotSwap",
                  "fields": [],
                  "index": 13,
                  "docs": [
                    "Cannot perform a parachain slot / lifecycle swap. Check that the state of both paras",
                    "are correct for the swap to work."
                  ]
                }
              ]
            }
          },
          "docs": ["The `Error` enum of this pallet."]
        },
        {
          "id": 735,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 476
            }
          },
          "docs": []
        },
        {
          "id": 736,
          "path": ["polkadot_runtime_common", "slots", "pallet", "Error"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "ParaNotOnboarding",
                  "fields": [],
                  "index": 0,
                  "docs": ["The parachain ID is not onboarding."]
                },
                {
                  "name": "LeaseError",
                  "fields": [],
                  "index": 1,
                  "docs": ["There was an error with the lease."]
                }
              ]
            }
          },
          "docs": ["The `Error` enum of this pallet."]
        },
        {
          "id": 737,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [0, 134]
            }
          },
          "docs": []
        },
        {
          "id": 738,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 36,
              "typeParam": 739
            }
          },
          "docs": []
        },
        {
          "id": 739,
          "path": ["Option"],
          "params": [
            {
              "name": "T",
              "typeId": 740
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 740,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 740,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [0, 134, 6]
            }
          },
          "docs": []
        },
        {
          "id": 741,
          "path": ["polkadot_runtime_common", "auctions", "pallet", "Error"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "AuctionInProgress",
                  "fields": [],
                  "index": 0,
                  "docs": ["This auction is already in progress."]
                },
                {
                  "name": "LeasePeriodInPast",
                  "fields": [],
                  "index": 1,
                  "docs": ["The lease period is in the past."]
                },
                {
                  "name": "ParaNotRegistered",
                  "fields": [],
                  "index": 2,
                  "docs": ["Para is not registered"]
                },
                {
                  "name": "NotCurrentAuction",
                  "fields": [],
                  "index": 3,
                  "docs": ["Not a current auction."]
                },
                {
                  "name": "NotAuction",
                  "fields": [],
                  "index": 4,
                  "docs": ["Not an auction."]
                },
                {
                  "name": "AuctionEnded",
                  "fields": [],
                  "index": 5,
                  "docs": ["Auction has already ended."]
                },
                {
                  "name": "AlreadyLeasedOut",
                  "fields": [],
                  "index": 6,
                  "docs": ["The para is already leased out for part of this range."]
                }
              ]
            }
          },
          "docs": ["The `Error` enum of this pallet."]
        },
        {
          "id": 742,
          "path": ["polkadot_runtime_common", "crowdloan", "FundInfo"],
          "params": [
            {
              "name": "AccountId",
              "typeId": 0
            },
            {
              "name": "Balance",
              "typeId": 6
            },
            {
              "name": "BlockNumber",
              "typeId": 4
            },
            {
              "name": "LeasePeriod",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "depositor",
                  "typeId": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "verifier",
                  "typeId": 342,
                  "typeName": "Option<MultiSigner>",
                  "docs": []
                },
                {
                  "name": "deposit",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "raised",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "end",
                  "typeId": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                },
                {
                  "name": "cap",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "last_contribution",
                  "typeId": 743,
                  "typeName": "LastContribution<BlockNumber>",
                  "docs": []
                },
                {
                  "name": "first_period",
                  "typeId": 4,
                  "typeName": "LeasePeriod",
                  "docs": []
                },
                {
                  "name": "last_period",
                  "typeId": 4,
                  "typeName": "LeasePeriod",
                  "docs": []
                },
                {
                  "name": "fund_index",
                  "typeId": 4,
                  "typeName": "FundIndex",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 743,
          "path": ["polkadot_runtime_common", "crowdloan", "LastContribution"],
          "params": [
            {
              "name": "BlockNumber",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Never",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "PreEnding",
                  "fields": [
                    {
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Ending",
                  "fields": [
                    {
                      "typeId": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 744,
          "path": ["polkadot_runtime_common", "crowdloan", "pallet", "Error"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "FirstPeriodInPast",
                  "fields": [],
                  "index": 0,
                  "docs": ["The current lease period is more than the first lease period."]
                },
                {
                  "name": "FirstPeriodTooFarInFuture",
                  "fields": [],
                  "index": 1,
                  "docs": ["The first lease period needs to at least be less than 3 `max_value`."]
                },
                {
                  "name": "LastPeriodBeforeFirstPeriod",
                  "fields": [],
                  "index": 2,
                  "docs": ["Last lease period must be greater than first lease period."]
                },
                {
                  "name": "LastPeriodTooFarInFuture",
                  "fields": [],
                  "index": 3,
                  "docs": ["The last lease period cannot be more than 3 periods after the first period."]
                },
                {
                  "name": "CannotEndInPast",
                  "fields": [],
                  "index": 4,
                  "docs": ["The campaign ends before the current block number. The end must be in the future."]
                },
                {
                  "name": "EndTooFarInFuture",
                  "fields": [],
                  "index": 5,
                  "docs": ["The end date for this crowdloan is not sensible."]
                },
                {
                  "name": "Overflow",
                  "fields": [],
                  "index": 6,
                  "docs": ["There was an overflow."]
                },
                {
                  "name": "ContributionTooSmall",
                  "fields": [],
                  "index": 7,
                  "docs": ["The contribution was below the minimum, `MinContribution`."]
                },
                {
                  "name": "InvalidParaId",
                  "fields": [],
                  "index": 8,
                  "docs": ["Invalid fund index."]
                },
                {
                  "name": "CapExceeded",
                  "fields": [],
                  "index": 9,
                  "docs": ["Contributions exceed maximum amount."]
                },
                {
                  "name": "ContributionPeriodOver",
                  "fields": [],
                  "index": 10,
                  "docs": ["The contribution period has already ended."]
                },
                {
                  "name": "InvalidOrigin",
                  "fields": [],
                  "index": 11,
                  "docs": ["The origin of this call is invalid."]
                },
                {
                  "name": "NotParachain",
                  "fields": [],
                  "index": 12,
                  "docs": ["This crowdloan does not correspond to a parachain."]
                },
                {
                  "name": "LeaseActive",
                  "fields": [],
                  "index": 13,
                  "docs": ["This parachain lease is still active and retirement cannot yet begin."]
                },
                {
                  "name": "BidOrLeaseActive",
                  "fields": [],
                  "index": 14,
                  "docs": ["This parachain's bid or lease is still active and withdraw cannot yet begin."]
                },
                {
                  "name": "FundNotEnded",
                  "fields": [],
                  "index": 15,
                  "docs": ["The crowdloan has not yet ended."]
                },
                {
                  "name": "NoContributions",
                  "fields": [],
                  "index": 16,
                  "docs": ["There are no contributions stored in this crowdloan."]
                },
                {
                  "name": "NotReadyToDissolve",
                  "fields": [],
                  "index": 17,
                  "docs": [
                    "The crowdloan is not ready to dissolve. Potentially still has a slot or in retirement",
                    "period."
                  ]
                },
                {
                  "name": "InvalidSignature",
                  "fields": [],
                  "index": 18,
                  "docs": ["Invalid signature."]
                },
                {
                  "name": "MemoTooLarge",
                  "fields": [],
                  "index": 19,
                  "docs": ["The provided memo is too large."]
                },
                {
                  "name": "AlreadyInNewRaise",
                  "fields": [],
                  "index": 20,
                  "docs": ["The fund is already in `NewRaise`"]
                },
                {
                  "name": "VrfDelayInProgress",
                  "fields": [],
                  "index": 21,
                  "docs": ["No contributions allowed during the VRF delay"]
                },
                {
                  "name": "NoLeasePeriod",
                  "fields": [],
                  "index": 22,
                  "docs": ["A lease period has not started yet, due to an offset in the starting block."]
                }
              ]
            }
          },
          "docs": ["The `Error` enum of this pallet."]
        },
        {
          "id": 745,
          "path": ["pallet_xcm", "pallet", "QueryStatus"],
          "params": [
            {
              "name": "BlockNumber",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Pending",
                  "fields": [
                    {
                      "name": "responder",
                      "typeId": 350,
                      "typeName": "VersionedMultiLocation",
                      "docs": []
                    },
                    {
                      "name": "maybe_match_querier",
                      "typeId": 746,
                      "typeName": "Option<VersionedMultiLocation>",
                      "docs": []
                    },
                    {
                      "name": "maybe_notify",
                      "typeId": 747,
                      "typeName": "Option<(u8, u8)>",
                      "docs": []
                    },
                    {
                      "name": "timeout",
                      "typeId": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "VersionNotifier",
                  "fields": [
                    {
                      "name": "origin",
                      "typeId": 350,
                      "typeName": "VersionedMultiLocation",
                      "docs": []
                    },
                    {
                      "name": "is_active",
                      "typeId": 44,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Ready",
                  "fields": [
                    {
                      "name": "response",
                      "typeId": 749,
                      "typeName": "VersionedResponse",
                      "docs": []
                    },
                    {
                      "name": "at",
                      "typeId": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 746,
          "path": ["Option"],
          "params": [
            {
              "name": "T",
              "typeId": 350
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 350,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 747,
          "path": ["Option"],
          "params": [
            {
              "name": "T",
              "typeId": 748
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 748,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 748,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [2, 2]
            }
          },
          "docs": []
        },
        {
          "id": 749,
          "path": ["xcm", "VersionedResponse"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "V2",
                  "fields": [
                    {
                      "typeId": 368,
                      "typeName": "v2::Response",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "V3",
                  "fields": [
                    {
                      "typeId": 387,
                      "typeName": "v3::Response",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 750,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [4, 350]
            }
          },
          "docs": []
        },
        {
          "id": 751,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [11, 9, 4]
            }
          },
          "docs": []
        },
        {
          "id": 752,
          "path": ["bounded_collections", "bounded_vec", "BoundedVec"],
          "params": [
            {
              "name": "T",
              "typeId": 753
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 754,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 753,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [350, 4]
            }
          },
          "docs": []
        },
        {
          "id": 754,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 753
            }
          },
          "docs": []
        },
        {
          "id": 755,
          "path": ["pallet_xcm", "pallet", "VersionMigrationStage"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "MigrateSupportedVersion",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "MigrateVersionNotifiers",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "NotifyCurrentTargets",
                  "fields": [
                    {
                      "typeId": 756,
                      "typeName": "Option<Vec<u8>>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "MigrateAndNotifyOldTargets",
                  "fields": [],
                  "index": 3,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 756,
          "path": ["Option"],
          "params": [
            {
              "name": "T",
              "typeId": 13
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 13,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 757,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [4, 0, 758]
            }
          },
          "docs": []
        },
        {
          "id": 758,
          "path": ["xcm", "VersionedAssetId"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "V3",
                  "fields": [
                    {
                      "typeId": 384,
                      "typeName": "v3::AssetId",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 759,
          "path": ["pallet_xcm", "pallet", "RemoteLockedFungibleRecord"],
          "params": [
            {
              "name": "ConsumerIdentifier",
              "typeId": 34
            },
            {
              "name": "MaxConsumers"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "amount",
                  "typeId": 6,
                  "typeName": "u128",
                  "docs": []
                },
                {
                  "name": "owner",
                  "typeId": 350,
                  "typeName": "VersionedMultiLocation",
                  "docs": []
                },
                {
                  "name": "locker",
                  "typeId": 350,
                  "typeName": "VersionedMultiLocation",
                  "docs": []
                },
                {
                  "name": "consumers",
                  "typeId": 760,
                  "typeName": "BoundedVec<(ConsumerIdentifier, u128), MaxConsumers>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 760,
          "path": ["bounded_collections", "bounded_vec", "BoundedVec"],
          "params": [
            {
              "name": "T",
              "typeId": 761
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 762,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 761,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [34, 6]
            }
          },
          "docs": []
        },
        {
          "id": 762,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 761
            }
          },
          "docs": []
        },
        {
          "id": 763,
          "path": ["bounded_collections", "bounded_vec", "BoundedVec"],
          "params": [
            {
              "name": "T",
              "typeId": 764
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 765,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 764,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [6, 350]
            }
          },
          "docs": []
        },
        {
          "id": 765,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 764
            }
          },
          "docs": []
        },
        {
          "id": 766,
          "path": ["pallet_xcm", "pallet", "Error"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Unreachable",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "The desired destination was unreachable, generally because there is a no way of routing",
                    "to it."
                  ]
                },
                {
                  "name": "SendFailure",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "There was some other issue (i.e. not to do with routing) in sending the message.",
                    "Perhaps a lack of space for buffering the message."
                  ]
                },
                {
                  "name": "Filtered",
                  "fields": [],
                  "index": 2,
                  "docs": ["The message execution fails the filter."]
                },
                {
                  "name": "UnweighableMessage",
                  "fields": [],
                  "index": 3,
                  "docs": ["The message's weight could not be determined."]
                },
                {
                  "name": "DestinationNotInvertible",
                  "fields": [],
                  "index": 4,
                  "docs": ["The destination `MultiLocation` provided cannot be inverted."]
                },
                {
                  "name": "Empty",
                  "fields": [],
                  "index": 5,
                  "docs": ["The assets to be sent are empty."]
                },
                {
                  "name": "CannotReanchor",
                  "fields": [],
                  "index": 6,
                  "docs": ["Could not re-anchor the assets to declare the fees for the destination chain."]
                },
                {
                  "name": "TooManyAssets",
                  "fields": [],
                  "index": 7,
                  "docs": ["Too many assets have been attempted for transfer."]
                },
                {
                  "name": "InvalidOrigin",
                  "fields": [],
                  "index": 8,
                  "docs": ["Origin is invalid for sending."]
                },
                {
                  "name": "BadVersion",
                  "fields": [],
                  "index": 9,
                  "docs": ["The version of the `Versioned` value used is not able to be interpreted."]
                },
                {
                  "name": "BadLocation",
                  "fields": [],
                  "index": 10,
                  "docs": [
                    "The given location could not be used (e.g. because it cannot be expressed in the",
                    "desired version of XCM)."
                  ]
                },
                {
                  "name": "NoSubscription",
                  "fields": [],
                  "index": 11,
                  "docs": ["The referenced subscription could not be found."]
                },
                {
                  "name": "AlreadySubscribed",
                  "fields": [],
                  "index": 12,
                  "docs": ["The location is invalid since it already has a subscription from us."]
                },
                {
                  "name": "InvalidAsset",
                  "fields": [],
                  "index": 13,
                  "docs": ["Invalid asset for the operation."]
                },
                {
                  "name": "LowBalance",
                  "fields": [],
                  "index": 14,
                  "docs": ["The owner does not own (all) of the asset that they wish to do the operation on."]
                },
                {
                  "name": "TooManyLocks",
                  "fields": [],
                  "index": 15,
                  "docs": ["The asset owner has too many locks on the asset."]
                },
                {
                  "name": "AccountNotSovereign",
                  "fields": [],
                  "index": 16,
                  "docs": ["The given account is not an identifiable sovereign account for any location."]
                },
                {
                  "name": "FeesNotMet",
                  "fields": [],
                  "index": 17,
                  "docs": ["The operation required fees to be paid which the initiator could not meet."]
                },
                {
                  "name": "LockNotFound",
                  "fields": [],
                  "index": 18,
                  "docs": ["A remote lock with the corresponding data could not be found."]
                },
                {
                  "name": "InUse",
                  "fields": [],
                  "index": 19,
                  "docs": ["The unlock operation cannot succeed because there are still consumers of the lock."]
                }
              ]
            }
          },
          "docs": ["The `Error` enum of this pallet."]
        },
        {
          "id": 767,
          "path": ["pallet_message_queue", "BookState"],
          "params": [
            {
              "name": "MessageOrigin",
              "typeId": 413
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "begin",
                  "typeId": 4,
                  "typeName": "PageIndex",
                  "docs": []
                },
                {
                  "name": "end",
                  "typeId": 4,
                  "typeName": "PageIndex",
                  "docs": []
                },
                {
                  "name": "count",
                  "typeId": 4,
                  "typeName": "PageIndex",
                  "docs": []
                },
                {
                  "name": "ready_neighbours",
                  "typeId": 768,
                  "typeName": "Option<Neighbours<MessageOrigin>>",
                  "docs": []
                },
                {
                  "name": "message_count",
                  "typeId": 11,
                  "typeName": "u64",
                  "docs": []
                },
                {
                  "name": "size",
                  "typeId": 11,
                  "typeName": "u64",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 768,
          "path": ["Option"],
          "params": [
            {
              "name": "T",
              "typeId": 769
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 769,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 769,
          "path": ["pallet_message_queue", "Neighbours"],
          "params": [
            {
              "name": "MessageOrigin",
              "typeId": 413
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "prev",
                  "typeId": 413,
                  "typeName": "MessageOrigin",
                  "docs": []
                },
                {
                  "name": "next",
                  "typeId": 413,
                  "typeName": "MessageOrigin",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 770,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [413, 4]
            }
          },
          "docs": []
        },
        {
          "id": 771,
          "path": ["pallet_message_queue", "Page"],
          "params": [
            {
              "name": "Size",
              "typeId": 4
            },
            {
              "name": "HeapSize"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "remaining",
                  "typeId": 4,
                  "typeName": "Size",
                  "docs": []
                },
                {
                  "name": "remaining_size",
                  "typeId": 4,
                  "typeName": "Size",
                  "docs": []
                },
                {
                  "name": "first_index",
                  "typeId": 4,
                  "typeName": "Size",
                  "docs": []
                },
                {
                  "name": "first",
                  "typeId": 4,
                  "typeName": "Size",
                  "docs": []
                },
                {
                  "name": "last",
                  "typeId": 4,
                  "typeName": "Size",
                  "docs": []
                },
                {
                  "name": "heap",
                  "typeId": 772,
                  "typeName": "BoundedVec<u8, IntoU32<HeapSize, Size>>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 772,
          "path": ["bounded_collections", "bounded_vec", "BoundedVec"],
          "params": [
            {
              "name": "T",
              "typeId": 2
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 13,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 773,
          "path": ["pallet_message_queue", "pallet", "Error"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "NotReapable",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Page is not reapable because it has items remaining to be processed and is not old",
                    "enough."
                  ]
                },
                {
                  "name": "NoPage",
                  "fields": [],
                  "index": 1,
                  "docs": ["Page to be reaped does not exist."]
                },
                {
                  "name": "NoMessage",
                  "fields": [],
                  "index": 2,
                  "docs": ["The referenced message could not be found."]
                },
                {
                  "name": "AlreadyProcessed",
                  "fields": [],
                  "index": 3,
                  "docs": ["The message was already processed and cannot be processed again."]
                },
                {
                  "name": "Queued",
                  "fields": [],
                  "index": 4,
                  "docs": ["The message is queued for future execution."]
                },
                {
                  "name": "InsufficientWeight",
                  "fields": [],
                  "index": 5,
                  "docs": ["There is temporarily not enough weight to continue servicing messages."]
                },
                {
                  "name": "TemporarilyUnprocessable",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "This message is temporarily unprocessable.",
                    "",
                    "Such errors are expected, but not guaranteed, to resolve themselves eventually through",
                    "retrying."
                  ]
                },
                {
                  "name": "QueuePaused",
                  "fields": [],
                  "index": 7,
                  "docs": [
                    "The queue is paused and no message can be executed from it.",
                    "",
                    "This can change at any time and may resolve in the future by re-trying."
                  ]
                }
              ]
            }
          },
          "docs": ["The `Error` enum of this pallet."]
        },
        {
          "id": 774,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [775, 776, 777, 778, 779, 781, 782, 783, 784]
            }
          },
          "docs": []
        },
        {
          "id": 775,
          "path": ["frame_system", "extensions", "check_non_zero_sender", "CheckNonZeroSender"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": []
            }
          },
          "docs": []
        },
        {
          "id": 776,
          "path": ["frame_system", "extensions", "check_spec_version", "CheckSpecVersion"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": []
            }
          },
          "docs": []
        },
        {
          "id": 777,
          "path": ["frame_system", "extensions", "check_tx_version", "CheckTxVersion"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": []
            }
          },
          "docs": []
        },
        {
          "id": 778,
          "path": ["frame_system", "extensions", "check_genesis", "CheckGenesis"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": []
            }
          },
          "docs": []
        },
        {
          "id": 779,
          "path": ["frame_system", "extensions", "check_mortality", "CheckMortality"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 780,
                  "typeName": "Era",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 780,
          "path": ["sp_runtime", "generic", "era", "Era"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Immortal",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Mortal1",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Mortal2",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Mortal3",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "Mortal4",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "Mortal5",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "Mortal6",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "Mortal7",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "Mortal8",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "Mortal9",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": []
                },
                {
                  "name": "Mortal10",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 10,
                  "docs": []
                },
                {
                  "name": "Mortal11",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": []
                },
                {
                  "name": "Mortal12",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 12,
                  "docs": []
                },
                {
                  "name": "Mortal13",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 13,
                  "docs": []
                },
                {
                  "name": "Mortal14",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 14,
                  "docs": []
                },
                {
                  "name": "Mortal15",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 15,
                  "docs": []
                },
                {
                  "name": "Mortal16",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 16,
                  "docs": []
                },
                {
                  "name": "Mortal17",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 17,
                  "docs": []
                },
                {
                  "name": "Mortal18",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 18,
                  "docs": []
                },
                {
                  "name": "Mortal19",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 19,
                  "docs": []
                },
                {
                  "name": "Mortal20",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 20,
                  "docs": []
                },
                {
                  "name": "Mortal21",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 21,
                  "docs": []
                },
                {
                  "name": "Mortal22",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 22,
                  "docs": []
                },
                {
                  "name": "Mortal23",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 23,
                  "docs": []
                },
                {
                  "name": "Mortal24",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 24,
                  "docs": []
                },
                {
                  "name": "Mortal25",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 25,
                  "docs": []
                },
                {
                  "name": "Mortal26",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 26,
                  "docs": []
                },
                {
                  "name": "Mortal27",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 27,
                  "docs": []
                },
                {
                  "name": "Mortal28",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 28,
                  "docs": []
                },
                {
                  "name": "Mortal29",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 29,
                  "docs": []
                },
                {
                  "name": "Mortal30",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 30,
                  "docs": []
                },
                {
                  "name": "Mortal31",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 31,
                  "docs": []
                },
                {
                  "name": "Mortal32",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 32,
                  "docs": []
                },
                {
                  "name": "Mortal33",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 33,
                  "docs": []
                },
                {
                  "name": "Mortal34",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 34,
                  "docs": []
                },
                {
                  "name": "Mortal35",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 35,
                  "docs": []
                },
                {
                  "name": "Mortal36",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 36,
                  "docs": []
                },
                {
                  "name": "Mortal37",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 37,
                  "docs": []
                },
                {
                  "name": "Mortal38",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 38,
                  "docs": []
                },
                {
                  "name": "Mortal39",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 39,
                  "docs": []
                },
                {
                  "name": "Mortal40",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 40,
                  "docs": []
                },
                {
                  "name": "Mortal41",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 41,
                  "docs": []
                },
                {
                  "name": "Mortal42",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 42,
                  "docs": []
                },
                {
                  "name": "Mortal43",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 43,
                  "docs": []
                },
                {
                  "name": "Mortal44",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 44,
                  "docs": []
                },
                {
                  "name": "Mortal45",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 45,
                  "docs": []
                },
                {
                  "name": "Mortal46",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 46,
                  "docs": []
                },
                {
                  "name": "Mortal47",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 47,
                  "docs": []
                },
                {
                  "name": "Mortal48",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 48,
                  "docs": []
                },
                {
                  "name": "Mortal49",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 49,
                  "docs": []
                },
                {
                  "name": "Mortal50",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 50,
                  "docs": []
                },
                {
                  "name": "Mortal51",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 51,
                  "docs": []
                },
                {
                  "name": "Mortal52",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 52,
                  "docs": []
                },
                {
                  "name": "Mortal53",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 53,
                  "docs": []
                },
                {
                  "name": "Mortal54",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 54,
                  "docs": []
                },
                {
                  "name": "Mortal55",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 55,
                  "docs": []
                },
                {
                  "name": "Mortal56",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 56,
                  "docs": []
                },
                {
                  "name": "Mortal57",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 57,
                  "docs": []
                },
                {
                  "name": "Mortal58",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 58,
                  "docs": []
                },
                {
                  "name": "Mortal59",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 59,
                  "docs": []
                },
                {
                  "name": "Mortal60",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 60,
                  "docs": []
                },
                {
                  "name": "Mortal61",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 61,
                  "docs": []
                },
                {
                  "name": "Mortal62",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 62,
                  "docs": []
                },
                {
                  "name": "Mortal63",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 63,
                  "docs": []
                },
                {
                  "name": "Mortal64",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 64,
                  "docs": []
                },
                {
                  "name": "Mortal65",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 65,
                  "docs": []
                },
                {
                  "name": "Mortal66",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 66,
                  "docs": []
                },
                {
                  "name": "Mortal67",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 67,
                  "docs": []
                },
                {
                  "name": "Mortal68",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 68,
                  "docs": []
                },
                {
                  "name": "Mortal69",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 69,
                  "docs": []
                },
                {
                  "name": "Mortal70",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 70,
                  "docs": []
                },
                {
                  "name": "Mortal71",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 71,
                  "docs": []
                },
                {
                  "name": "Mortal72",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 72,
                  "docs": []
                },
                {
                  "name": "Mortal73",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 73,
                  "docs": []
                },
                {
                  "name": "Mortal74",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 74,
                  "docs": []
                },
                {
                  "name": "Mortal75",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 75,
                  "docs": []
                },
                {
                  "name": "Mortal76",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 76,
                  "docs": []
                },
                {
                  "name": "Mortal77",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 77,
                  "docs": []
                },
                {
                  "name": "Mortal78",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 78,
                  "docs": []
                },
                {
                  "name": "Mortal79",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 79,
                  "docs": []
                },
                {
                  "name": "Mortal80",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 80,
                  "docs": []
                },
                {
                  "name": "Mortal81",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 81,
                  "docs": []
                },
                {
                  "name": "Mortal82",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 82,
                  "docs": []
                },
                {
                  "name": "Mortal83",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 83,
                  "docs": []
                },
                {
                  "name": "Mortal84",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 84,
                  "docs": []
                },
                {
                  "name": "Mortal85",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 85,
                  "docs": []
                },
                {
                  "name": "Mortal86",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 86,
                  "docs": []
                },
                {
                  "name": "Mortal87",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 87,
                  "docs": []
                },
                {
                  "name": "Mortal88",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 88,
                  "docs": []
                },
                {
                  "name": "Mortal89",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 89,
                  "docs": []
                },
                {
                  "name": "Mortal90",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 90,
                  "docs": []
                },
                {
                  "name": "Mortal91",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 91,
                  "docs": []
                },
                {
                  "name": "Mortal92",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 92,
                  "docs": []
                },
                {
                  "name": "Mortal93",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 93,
                  "docs": []
                },
                {
                  "name": "Mortal94",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 94,
                  "docs": []
                },
                {
                  "name": "Mortal95",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 95,
                  "docs": []
                },
                {
                  "name": "Mortal96",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 96,
                  "docs": []
                },
                {
                  "name": "Mortal97",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 97,
                  "docs": []
                },
                {
                  "name": "Mortal98",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 98,
                  "docs": []
                },
                {
                  "name": "Mortal99",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 99,
                  "docs": []
                },
                {
                  "name": "Mortal100",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 100,
                  "docs": []
                },
                {
                  "name": "Mortal101",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 101,
                  "docs": []
                },
                {
                  "name": "Mortal102",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 102,
                  "docs": []
                },
                {
                  "name": "Mortal103",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 103,
                  "docs": []
                },
                {
                  "name": "Mortal104",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 104,
                  "docs": []
                },
                {
                  "name": "Mortal105",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 105,
                  "docs": []
                },
                {
                  "name": "Mortal106",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 106,
                  "docs": []
                },
                {
                  "name": "Mortal107",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 107,
                  "docs": []
                },
                {
                  "name": "Mortal108",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 108,
                  "docs": []
                },
                {
                  "name": "Mortal109",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 109,
                  "docs": []
                },
                {
                  "name": "Mortal110",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 110,
                  "docs": []
                },
                {
                  "name": "Mortal111",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 111,
                  "docs": []
                },
                {
                  "name": "Mortal112",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 112,
                  "docs": []
                },
                {
                  "name": "Mortal113",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 113,
                  "docs": []
                },
                {
                  "name": "Mortal114",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 114,
                  "docs": []
                },
                {
                  "name": "Mortal115",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 115,
                  "docs": []
                },
                {
                  "name": "Mortal116",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 116,
                  "docs": []
                },
                {
                  "name": "Mortal117",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 117,
                  "docs": []
                },
                {
                  "name": "Mortal118",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 118,
                  "docs": []
                },
                {
                  "name": "Mortal119",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 119,
                  "docs": []
                },
                {
                  "name": "Mortal120",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 120,
                  "docs": []
                },
                {
                  "name": "Mortal121",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 121,
                  "docs": []
                },
                {
                  "name": "Mortal122",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 122,
                  "docs": []
                },
                {
                  "name": "Mortal123",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 123,
                  "docs": []
                },
                {
                  "name": "Mortal124",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 124,
                  "docs": []
                },
                {
                  "name": "Mortal125",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 125,
                  "docs": []
                },
                {
                  "name": "Mortal126",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 126,
                  "docs": []
                },
                {
                  "name": "Mortal127",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 127,
                  "docs": []
                },
                {
                  "name": "Mortal128",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 128,
                  "docs": []
                },
                {
                  "name": "Mortal129",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 129,
                  "docs": []
                },
                {
                  "name": "Mortal130",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 130,
                  "docs": []
                },
                {
                  "name": "Mortal131",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 131,
                  "docs": []
                },
                {
                  "name": "Mortal132",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 132,
                  "docs": []
                },
                {
                  "name": "Mortal133",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 133,
                  "docs": []
                },
                {
                  "name": "Mortal134",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 134,
                  "docs": []
                },
                {
                  "name": "Mortal135",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 135,
                  "docs": []
                },
                {
                  "name": "Mortal136",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 136,
                  "docs": []
                },
                {
                  "name": "Mortal137",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 137,
                  "docs": []
                },
                {
                  "name": "Mortal138",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 138,
                  "docs": []
                },
                {
                  "name": "Mortal139",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 139,
                  "docs": []
                },
                {
                  "name": "Mortal140",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 140,
                  "docs": []
                },
                {
                  "name": "Mortal141",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 141,
                  "docs": []
                },
                {
                  "name": "Mortal142",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 142,
                  "docs": []
                },
                {
                  "name": "Mortal143",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 143,
                  "docs": []
                },
                {
                  "name": "Mortal144",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 144,
                  "docs": []
                },
                {
                  "name": "Mortal145",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 145,
                  "docs": []
                },
                {
                  "name": "Mortal146",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 146,
                  "docs": []
                },
                {
                  "name": "Mortal147",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 147,
                  "docs": []
                },
                {
                  "name": "Mortal148",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 148,
                  "docs": []
                },
                {
                  "name": "Mortal149",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 149,
                  "docs": []
                },
                {
                  "name": "Mortal150",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 150,
                  "docs": []
                },
                {
                  "name": "Mortal151",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 151,
                  "docs": []
                },
                {
                  "name": "Mortal152",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 152,
                  "docs": []
                },
                {
                  "name": "Mortal153",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 153,
                  "docs": []
                },
                {
                  "name": "Mortal154",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 154,
                  "docs": []
                },
                {
                  "name": "Mortal155",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 155,
                  "docs": []
                },
                {
                  "name": "Mortal156",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 156,
                  "docs": []
                },
                {
                  "name": "Mortal157",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 157,
                  "docs": []
                },
                {
                  "name": "Mortal158",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 158,
                  "docs": []
                },
                {
                  "name": "Mortal159",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 159,
                  "docs": []
                },
                {
                  "name": "Mortal160",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 160,
                  "docs": []
                },
                {
                  "name": "Mortal161",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 161,
                  "docs": []
                },
                {
                  "name": "Mortal162",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 162,
                  "docs": []
                },
                {
                  "name": "Mortal163",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 163,
                  "docs": []
                },
                {
                  "name": "Mortal164",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 164,
                  "docs": []
                },
                {
                  "name": "Mortal165",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 165,
                  "docs": []
                },
                {
                  "name": "Mortal166",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 166,
                  "docs": []
                },
                {
                  "name": "Mortal167",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 167,
                  "docs": []
                },
                {
                  "name": "Mortal168",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 168,
                  "docs": []
                },
                {
                  "name": "Mortal169",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 169,
                  "docs": []
                },
                {
                  "name": "Mortal170",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 170,
                  "docs": []
                },
                {
                  "name": "Mortal171",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 171,
                  "docs": []
                },
                {
                  "name": "Mortal172",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 172,
                  "docs": []
                },
                {
                  "name": "Mortal173",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 173,
                  "docs": []
                },
                {
                  "name": "Mortal174",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 174,
                  "docs": []
                },
                {
                  "name": "Mortal175",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 175,
                  "docs": []
                },
                {
                  "name": "Mortal176",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 176,
                  "docs": []
                },
                {
                  "name": "Mortal177",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 177,
                  "docs": []
                },
                {
                  "name": "Mortal178",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 178,
                  "docs": []
                },
                {
                  "name": "Mortal179",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 179,
                  "docs": []
                },
                {
                  "name": "Mortal180",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 180,
                  "docs": []
                },
                {
                  "name": "Mortal181",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 181,
                  "docs": []
                },
                {
                  "name": "Mortal182",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 182,
                  "docs": []
                },
                {
                  "name": "Mortal183",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 183,
                  "docs": []
                },
                {
                  "name": "Mortal184",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 184,
                  "docs": []
                },
                {
                  "name": "Mortal185",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 185,
                  "docs": []
                },
                {
                  "name": "Mortal186",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 186,
                  "docs": []
                },
                {
                  "name": "Mortal187",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 187,
                  "docs": []
                },
                {
                  "name": "Mortal188",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 188,
                  "docs": []
                },
                {
                  "name": "Mortal189",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 189,
                  "docs": []
                },
                {
                  "name": "Mortal190",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 190,
                  "docs": []
                },
                {
                  "name": "Mortal191",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 191,
                  "docs": []
                },
                {
                  "name": "Mortal192",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 192,
                  "docs": []
                },
                {
                  "name": "Mortal193",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 193,
                  "docs": []
                },
                {
                  "name": "Mortal194",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 194,
                  "docs": []
                },
                {
                  "name": "Mortal195",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 195,
                  "docs": []
                },
                {
                  "name": "Mortal196",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 196,
                  "docs": []
                },
                {
                  "name": "Mortal197",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 197,
                  "docs": []
                },
                {
                  "name": "Mortal198",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 198,
                  "docs": []
                },
                {
                  "name": "Mortal199",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 199,
                  "docs": []
                },
                {
                  "name": "Mortal200",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 200,
                  "docs": []
                },
                {
                  "name": "Mortal201",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 201,
                  "docs": []
                },
                {
                  "name": "Mortal202",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 202,
                  "docs": []
                },
                {
                  "name": "Mortal203",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 203,
                  "docs": []
                },
                {
                  "name": "Mortal204",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 204,
                  "docs": []
                },
                {
                  "name": "Mortal205",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 205,
                  "docs": []
                },
                {
                  "name": "Mortal206",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 206,
                  "docs": []
                },
                {
                  "name": "Mortal207",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 207,
                  "docs": []
                },
                {
                  "name": "Mortal208",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 208,
                  "docs": []
                },
                {
                  "name": "Mortal209",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 209,
                  "docs": []
                },
                {
                  "name": "Mortal210",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 210,
                  "docs": []
                },
                {
                  "name": "Mortal211",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 211,
                  "docs": []
                },
                {
                  "name": "Mortal212",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 212,
                  "docs": []
                },
                {
                  "name": "Mortal213",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 213,
                  "docs": []
                },
                {
                  "name": "Mortal214",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 214,
                  "docs": []
                },
                {
                  "name": "Mortal215",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 215,
                  "docs": []
                },
                {
                  "name": "Mortal216",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 216,
                  "docs": []
                },
                {
                  "name": "Mortal217",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 217,
                  "docs": []
                },
                {
                  "name": "Mortal218",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 218,
                  "docs": []
                },
                {
                  "name": "Mortal219",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 219,
                  "docs": []
                },
                {
                  "name": "Mortal220",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 220,
                  "docs": []
                },
                {
                  "name": "Mortal221",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 221,
                  "docs": []
                },
                {
                  "name": "Mortal222",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 222,
                  "docs": []
                },
                {
                  "name": "Mortal223",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 223,
                  "docs": []
                },
                {
                  "name": "Mortal224",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 224,
                  "docs": []
                },
                {
                  "name": "Mortal225",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 225,
                  "docs": []
                },
                {
                  "name": "Mortal226",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 226,
                  "docs": []
                },
                {
                  "name": "Mortal227",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 227,
                  "docs": []
                },
                {
                  "name": "Mortal228",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 228,
                  "docs": []
                },
                {
                  "name": "Mortal229",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 229,
                  "docs": []
                },
                {
                  "name": "Mortal230",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 230,
                  "docs": []
                },
                {
                  "name": "Mortal231",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 231,
                  "docs": []
                },
                {
                  "name": "Mortal232",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 232,
                  "docs": []
                },
                {
                  "name": "Mortal233",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 233,
                  "docs": []
                },
                {
                  "name": "Mortal234",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 234,
                  "docs": []
                },
                {
                  "name": "Mortal235",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 235,
                  "docs": []
                },
                {
                  "name": "Mortal236",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 236,
                  "docs": []
                },
                {
                  "name": "Mortal237",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 237,
                  "docs": []
                },
                {
                  "name": "Mortal238",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 238,
                  "docs": []
                },
                {
                  "name": "Mortal239",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 239,
                  "docs": []
                },
                {
                  "name": "Mortal240",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 240,
                  "docs": []
                },
                {
                  "name": "Mortal241",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 241,
                  "docs": []
                },
                {
                  "name": "Mortal242",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 242,
                  "docs": []
                },
                {
                  "name": "Mortal243",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 243,
                  "docs": []
                },
                {
                  "name": "Mortal244",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 244,
                  "docs": []
                },
                {
                  "name": "Mortal245",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 245,
                  "docs": []
                },
                {
                  "name": "Mortal246",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 246,
                  "docs": []
                },
                {
                  "name": "Mortal247",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 247,
                  "docs": []
                },
                {
                  "name": "Mortal248",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 248,
                  "docs": []
                },
                {
                  "name": "Mortal249",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 249,
                  "docs": []
                },
                {
                  "name": "Mortal250",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 250,
                  "docs": []
                },
                {
                  "name": "Mortal251",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 251,
                  "docs": []
                },
                {
                  "name": "Mortal252",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 252,
                  "docs": []
                },
                {
                  "name": "Mortal253",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 253,
                  "docs": []
                },
                {
                  "name": "Mortal254",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 254,
                  "docs": []
                },
                {
                  "name": "Mortal255",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 255,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 781,
          "path": ["frame_system", "extensions", "check_nonce", "CheckNonce"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 79,
                  "typeName": "T::Nonce",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 782,
          "path": ["frame_system", "extensions", "check_weight", "CheckWeight"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": []
            }
          },
          "docs": []
        },
        {
          "id": 783,
          "path": ["pallet_transaction_payment", "ChargeTransactionPayment"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 60,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 784,
          "path": ["polkadot_runtime_common", "claims", "PrevalidateAttests"],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": []
            }
          },
          "docs": []
        },
        {
          "id": 785,
          "path": ["polkadot_runtime", "Runtime"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": []
            }
          },
          "docs": []
        },
        {
          "id": 786,
          "path": ["sp_runtime", "generic", "block", "Block"],
          "params": [
            {
              "name": "Header",
              "typeId": 78
            },
            {
              "name": "Extrinsic",
              "typeId": 787
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "header",
                  "typeId": 78,
                  "typeName": "Header",
                  "docs": []
                },
                {
                  "name": "extrinsics",
                  "typeId": 788,
                  "typeName": "Vec<Extrinsic>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 787,
          "path": ["sp_runtime", "generic", "unchecked_extrinsic", "UncheckedExtrinsic"],
          "params": [
            {
              "name": "Address",
              "typeId": 88
            },
            {
              "name": "Call",
              "typeId": 68
            },
            {
              "name": "Signature",
              "typeId": 347
            },
            {
              "name": "Extra",
              "typeId": 774
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 13,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 788,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 787
            }
          },
          "docs": []
        },
        {
          "id": 789,
          "path": ["sp_core", "OpaqueMetadata"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 13,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 790,
          "path": ["Option"],
          "params": [
            {
              "name": "T",
              "typeId": 789
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 789,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 791,
          "path": ["Result"],
          "params": [
            {
              "name": "T",
              "typeId": 33
            },
            {
              "name": "E",
              "typeId": 792
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Ok",
                  "fields": [
                    {
                      "typeId": 33,
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Err",
                  "fields": [
                    {
                      "typeId": 792,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 792,
          "path": ["sp_runtime", "transaction_validity", "TransactionValidityError"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Invalid",
                  "fields": [
                    {
                      "typeId": 793,
                      "typeName": "InvalidTransaction",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Unknown",
                  "fields": [
                    {
                      "typeId": 794,
                      "typeName": "UnknownTransaction",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 793,
          "path": ["sp_runtime", "transaction_validity", "InvalidTransaction"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Call",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Payment",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Future",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Stale",
                  "fields": [],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "BadProof",
                  "fields": [],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "AncientBirthBlock",
                  "fields": [],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "ExhaustsResources",
                  "fields": [],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "Custom",
                  "fields": [
                    {
                      "typeId": 2,
                      "typeName": "u8",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "BadMandatory",
                  "fields": [],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "MandatoryValidation",
                  "fields": [],
                  "index": 9,
                  "docs": []
                },
                {
                  "name": "BadSigner",
                  "fields": [],
                  "index": 10,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 794,
          "path": ["sp_runtime", "transaction_validity", "UnknownTransaction"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "CannotLookup",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "NoUnsignedValidator",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Custom",
                  "fields": [
                    {
                      "typeId": 2,
                      "typeName": "u8",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 795,
          "path": ["sp_inherents", "InherentData"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "data",
                  "typeId": 796,
                  "typeName": "BTreeMap<InherentIdentifier, Vec<u8>>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 796,
          "path": ["BTreeMap"],
          "params": [
            {
              "name": "K",
              "typeId": 172
            },
            {
              "name": "V",
              "typeId": 13
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 797,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 797,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 798
            }
          },
          "docs": []
        },
        {
          "id": 798,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [172, 13]
            }
          },
          "docs": []
        },
        {
          "id": 799,
          "path": ["sp_inherents", "CheckInherentsResult"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "okay",
                  "typeId": 44,
                  "typeName": "bool",
                  "docs": []
                },
                {
                  "name": "fatal_error",
                  "typeId": 44,
                  "typeName": "bool",
                  "docs": []
                },
                {
                  "name": "errors",
                  "typeId": 795,
                  "typeName": "InherentData",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 800,
          "path": ["sp_runtime", "transaction_validity", "TransactionSource"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "InBlock",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Local",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "External",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 801,
          "path": ["Result"],
          "params": [
            {
              "name": "T",
              "typeId": 802
            },
            {
              "name": "E",
              "typeId": 792
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Ok",
                  "fields": [
                    {
                      "typeId": 802,
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Err",
                  "fields": [
                    {
                      "typeId": 792,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 802,
          "path": ["sp_runtime", "transaction_validity", "ValidTransaction"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "priority",
                  "typeId": 11,
                  "typeName": "TransactionPriority",
                  "docs": []
                },
                {
                  "name": "requires",
                  "typeId": 72,
                  "typeName": "Vec<TransactionTag>",
                  "docs": []
                },
                {
                  "name": "provides",
                  "typeId": 72,
                  "typeName": "Vec<TransactionTag>",
                  "docs": []
                },
                {
                  "name": "longevity",
                  "typeId": 11,
                  "typeName": "TransactionLongevity",
                  "docs": []
                },
                {
                  "name": "propagate",
                  "typeId": 44,
                  "typeName": "bool",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 803,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [681, 804]
            }
          },
          "docs": []
        },
        {
          "id": 804,
          "path": ["polkadot_primitives", "v5", "GroupRotationInfo"],
          "params": [
            {
              "name": "N",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "session_start_block",
                  "typeId": 4,
                  "typeName": "N",
                  "docs": []
                },
                {
                  "name": "group_rotation_frequency",
                  "typeId": 4,
                  "typeName": "N",
                  "docs": []
                },
                {
                  "name": "now",
                  "typeId": 4,
                  "typeName": "N",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 805,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 806
            }
          },
          "docs": []
        },
        {
          "id": 806,
          "path": ["polkadot_primitives", "v5", "CoreState"],
          "params": [
            {
              "name": "H",
              "typeId": 12
            },
            {
              "name": "N",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Occupied",
                  "fields": [
                    {
                      "typeId": 807,
                      "typeName": "OccupiedCore<H, N>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Scheduled",
                  "fields": [
                    {
                      "typeId": 809,
                      "typeName": "ScheduledCore",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Free",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 807,
          "path": ["polkadot_primitives", "v5", "OccupiedCore"],
          "params": [
            {
              "name": "H",
              "typeId": 12
            },
            {
              "name": "N",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "next_up_on_available",
                  "typeId": 808,
                  "typeName": "Option<ScheduledCore>",
                  "docs": []
                },
                {
                  "name": "occupied_since",
                  "typeId": 4,
                  "typeName": "N",
                  "docs": []
                },
                {
                  "name": "time_out_at",
                  "typeId": 4,
                  "typeName": "N",
                  "docs": []
                },
                {
                  "name": "next_up_on_time_out",
                  "typeId": 808,
                  "typeName": "Option<ScheduledCore>",
                  "docs": []
                },
                {
                  "name": "availability",
                  "typeId": 298,
                  "typeName": "BitVec<u8, bitvec::order::Lsb0>",
                  "docs": []
                },
                {
                  "name": "group_responsible",
                  "typeId": 440,
                  "typeName": "GroupIndex",
                  "docs": []
                },
                {
                  "name": "candidate_hash",
                  "typeId": 321,
                  "typeName": "CandidateHash",
                  "docs": []
                },
                {
                  "name": "candidate_descriptor",
                  "typeId": 305,
                  "typeName": "CandidateDescriptor<H>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 808,
          "path": ["Option"],
          "params": [
            {
              "name": "T",
              "typeId": 809
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 809,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 809,
          "path": ["polkadot_primitives", "v5", "ScheduledCore"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "para_id",
                  "typeId": 134,
                  "typeName": "Id",
                  "docs": []
                },
                {
                  "name": "collator",
                  "typeId": 810,
                  "typeName": "Option<CollatorId>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 810,
          "path": ["Option"],
          "params": [
            {
              "name": "T",
              "typeId": 306
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 306,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 811,
          "path": ["polkadot_primitives", "v5", "OccupiedCoreAssumption"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Included",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "TimedOut",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Free",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 812,
          "path": ["Option"],
          "params": [
            {
              "name": "T",
              "typeId": 813
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 813,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 813,
          "path": ["polkadot_primitives", "v5", "PersistedValidationData"],
          "params": [
            {
              "name": "H",
              "typeId": 12
            },
            {
              "name": "N",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "parent_head",
                  "typeId": 316,
                  "typeName": "HeadData",
                  "docs": []
                },
                {
                  "name": "relay_parent_number",
                  "typeId": 4,
                  "typeName": "N",
                  "docs": []
                },
                {
                  "name": "relay_parent_storage_root",
                  "typeId": 12,
                  "typeName": "H",
                  "docs": []
                },
                {
                  "name": "max_pov_size",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 814,
          "path": ["Option"],
          "params": [
            {
              "name": "T",
              "typeId": 815
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 815,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 815,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [813, 308]
            }
          },
          "docs": []
        },
        {
          "id": 816,
          "path": ["Option"],
          "params": [
            {
              "name": "T",
              "typeId": 304
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 304,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 817,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 818
            }
          },
          "docs": []
        },
        {
          "id": 818,
          "path": ["polkadot_primitives", "v5", "CandidateEvent"],
          "params": [
            {
              "name": "H",
              "typeId": 12
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "CandidateBacked",
                  "fields": [
                    {
                      "typeId": 438,
                      "typeName": "CandidateReceipt<H>",
                      "docs": []
                    },
                    {
                      "typeId": 316,
                      "typeName": "HeadData",
                      "docs": []
                    },
                    {
                      "typeId": 439,
                      "typeName": "CoreIndex",
                      "docs": []
                    },
                    {
                      "typeId": 440,
                      "typeName": "GroupIndex",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "CandidateIncluded",
                  "fields": [
                    {
                      "typeId": 438,
                      "typeName": "CandidateReceipt<H>",
                      "docs": []
                    },
                    {
                      "typeId": 316,
                      "typeName": "HeadData",
                      "docs": []
                    },
                    {
                      "typeId": 439,
                      "typeName": "CoreIndex",
                      "docs": []
                    },
                    {
                      "typeId": 440,
                      "typeName": "GroupIndex",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "CandidateTimedOut",
                  "fields": [
                    {
                      "typeId": 438,
                      "typeName": "CandidateReceipt<H>",
                      "docs": []
                    },
                    {
                      "typeId": 316,
                      "typeName": "HeadData",
                      "docs": []
                    },
                    {
                      "typeId": 439,
                      "typeName": "CoreIndex",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 819,
          "path": ["BTreeMap"],
          "params": [
            {
              "name": "K",
              "typeId": 134
            },
            {
              "name": "V",
              "typeId": 713
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 820,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 820,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 821
            }
          },
          "docs": []
        },
        {
          "id": 821,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [134, 713]
            }
          },
          "docs": []
        },
        {
          "id": 822,
          "path": ["Option"],
          "params": [
            {
              "name": "T",
              "typeId": 675
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 675,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 823,
          "path": ["Option"],
          "params": [
            {
              "name": "T",
              "typeId": 719
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 719,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 824,
          "path": ["Option"],
          "params": [
            {
              "name": "T",
              "typeId": 308
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 308,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 825,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 826
            }
          },
          "docs": []
        },
        {
          "id": 826,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [4, 321, 724]
            }
          },
          "docs": []
        },
        {
          "id": 827,
          "path": ["Option"],
          "params": [
            {
              "name": "T",
              "typeId": 286
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 286,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 828,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 829
            }
          },
          "docs": []
        },
        {
          "id": 829,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [4, 321, 727]
            }
          },
          "docs": []
        },
        {
          "id": 830,
          "path": ["Option"],
          "params": [
            {
              "name": "T",
              "typeId": 831
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 831,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 831,
          "path": ["polkadot_primitives", "v5", "slashing", "OpaqueKeyOwnershipProof"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 13,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 832,
          "path": ["Option"],
          "params": [
            {
              "name": "T",
              "typeId": 34
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 34,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 833,
          "path": ["Option"],
          "params": [
            {
              "name": "T",
              "typeId": 834
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 834,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 834,
          "path": ["polkadot_primitives", "vstaging", "BackingState"],
          "params": [
            {
              "name": "H",
              "typeId": 12
            },
            {
              "name": "N",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "constraints",
                  "typeId": 835,
                  "typeName": "Constraints<N>",
                  "docs": []
                },
                {
                  "name": "pending_availability",
                  "typeId": 843,
                  "typeName": "Vec<CandidatePendingAvailability<H, N>>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 835,
          "path": ["polkadot_primitives", "vstaging", "Constraints"],
          "params": [
            {
              "name": "N",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "min_relay_parent_number",
                  "typeId": 4,
                  "typeName": "N",
                  "docs": []
                },
                {
                  "name": "max_pov_size",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_code_size",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "ump_remaining",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "ump_remaining_bytes",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_ump_num_per_candidate",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "dmp_remaining_messages",
                  "typeId": 97,
                  "typeName": "Vec<N>",
                  "docs": []
                },
                {
                  "name": "hrmp_inbound",
                  "typeId": 836,
                  "typeName": "InboundHrmpLimitations<N>",
                  "docs": []
                },
                {
                  "name": "hrmp_channels_out",
                  "typeId": 837,
                  "typeName": "Vec<(ParaId, OutboundHrmpChannelLimitations)>",
                  "docs": []
                },
                {
                  "name": "max_hrmp_num_per_candidate",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "required_parent",
                  "typeId": 316,
                  "typeName": "HeadData",
                  "docs": []
                },
                {
                  "name": "validation_code_hash",
                  "typeId": 308,
                  "typeName": "ValidationCodeHash",
                  "docs": []
                },
                {
                  "name": "upgrade_restriction",
                  "typeId": 840,
                  "typeName": "Option<UpgradeRestriction>",
                  "docs": []
                },
                {
                  "name": "future_validation_code",
                  "typeId": 841,
                  "typeName": "Option<(N, ValidationCodeHash)>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 836,
          "path": ["polkadot_primitives", "vstaging", "InboundHrmpLimitations"],
          "params": [
            {
              "name": "N",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "valid_watermarks",
                  "typeId": 97,
                  "typeName": "Vec<N>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 837,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 838
            }
          },
          "docs": []
        },
        {
          "id": 838,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [134, 839]
            }
          },
          "docs": []
        },
        {
          "id": 839,
          "path": ["polkadot_primitives", "vstaging", "OutboundHrmpChannelLimitations"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "bytes_remaining",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "messages_remaining",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 840,
          "path": ["Option"],
          "params": [
            {
              "name": "T",
              "typeId": 703
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 703,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 841,
          "path": ["Option"],
          "params": [
            {
              "name": "T",
              "typeId": 842
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 842,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 842,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [4, 308]
            }
          },
          "docs": []
        },
        {
          "id": 843,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 844
            }
          },
          "docs": []
        },
        {
          "id": 844,
          "path": ["polkadot_primitives", "vstaging", "CandidatePendingAvailability"],
          "params": [
            {
              "name": "H",
              "typeId": 12
            },
            {
              "name": "N",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "candidate_hash",
                  "typeId": 321,
                  "typeName": "CandidateHash",
                  "docs": []
                },
                {
                  "name": "descriptor",
                  "typeId": 305,
                  "typeName": "CandidateDescriptor<H>",
                  "docs": []
                },
                {
                  "name": "commitments",
                  "typeId": 309,
                  "typeName": "CandidateCommitments",
                  "docs": []
                },
                {
                  "name": "relay_parent_number",
                  "typeId": 4,
                  "typeName": "N",
                  "docs": []
                },
                {
                  "name": "max_pov_size",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 845,
          "path": ["Option"],
          "params": [
            {
              "name": "T",
              "typeId": 846
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 846,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 846,
          "path": ["sp_consensus_beefy", "ValidatorSet"],
          "params": [
            {
              "name": "AuthorityId",
              "typeId": 847
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "validators",
                  "typeId": 848,
                  "typeName": "Vec<AuthorityId>",
                  "docs": []
                },
                {
                  "name": "id",
                  "typeId": 11,
                  "typeName": "ValidatorSetId",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 847,
          "path": ["sp_consensus_beefy", "ecdsa_crypto", "Public"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 344,
                  "typeName": "ecdsa::Public",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 848,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 847
            }
          },
          "docs": []
        },
        {
          "id": 849,
          "path": ["sp_consensus_beefy", "EquivocationProof"],
          "params": [
            {
              "name": "Number",
              "typeId": 4
            },
            {
              "name": "Id",
              "typeId": 847
            },
            {
              "name": "Signature",
              "typeId": 850
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "first",
                  "typeId": 851,
                  "typeName": "VoteMessage<Number, Id, Signature>",
                  "docs": []
                },
                {
                  "name": "second",
                  "typeId": 851,
                  "typeName": "VoteMessage<Number, Id, Signature>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 850,
          "path": ["sp_consensus_beefy", "ecdsa_crypto", "Signature"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 348,
                  "typeName": "ecdsa::Signature",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 851,
          "path": ["sp_consensus_beefy", "VoteMessage"],
          "params": [
            {
              "name": "Number",
              "typeId": 4
            },
            {
              "name": "Id",
              "typeId": 847
            },
            {
              "name": "Signature",
              "typeId": 850
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "commitment",
                  "typeId": 852,
                  "typeName": "Commitment<Number>",
                  "docs": []
                },
                {
                  "name": "id",
                  "typeId": 847,
                  "typeName": "Id",
                  "docs": []
                },
                {
                  "name": "signature",
                  "typeId": 850,
                  "typeName": "Signature",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 852,
          "path": ["sp_consensus_beefy", "commitment", "Commitment"],
          "params": [
            {
              "name": "TBlockNumber",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "payload",
                  "typeId": 853,
                  "typeName": "Payload",
                  "docs": []
                },
                {
                  "name": "block_number",
                  "typeId": 4,
                  "typeName": "TBlockNumber",
                  "docs": []
                },
                {
                  "name": "validator_set_id",
                  "typeId": 11,
                  "typeName": "ValidatorSetId",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 853,
          "path": ["sp_consensus_beefy", "payload", "Payload"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 854,
                  "typeName": "Vec<(BeefyPayloadId, Vec<u8>)>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 854,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 855
            }
          },
          "docs": []
        },
        {
          "id": 855,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [167, 13]
            }
          },
          "docs": []
        },
        {
          "id": 856,
          "path": ["sp_consensus_beefy", "OpaqueKeyOwnershipProof"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 13,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 857,
          "path": ["Option"],
          "params": [
            {
              "name": "T",
              "typeId": 856
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 856,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 858,
          "path": ["Result"],
          "params": [
            {
              "name": "T",
              "typeId": 12
            },
            {
              "name": "E",
              "typeId": 859
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Ok",
                  "fields": [
                    {
                      "typeId": 12,
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Err",
                  "fields": [
                    {
                      "typeId": 859,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 859,
          "path": ["sp_mmr_primitives", "Error"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "InvalidNumericOp",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Push",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "GetRoot",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Commit",
                  "fields": [],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "GenerateProof",
                  "fields": [],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "Verify",
                  "fields": [],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "LeafNotFound",
                  "fields": [],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "PalletNotIncluded",
                  "fields": [],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "InvalidLeafIndex",
                  "fields": [],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "InvalidBestKnownBlock",
                  "fields": [],
                  "index": 9,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 860,
          "path": ["Result"],
          "params": [
            {
              "name": "T",
              "typeId": 11
            },
            {
              "name": "E",
              "typeId": 859
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Ok",
                  "fields": [
                    {
                      "typeId": 11,
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Err",
                  "fields": [
                    {
                      "typeId": 859,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 861,
          "path": ["Result"],
          "params": [
            {
              "name": "T",
              "typeId": 862
            },
            {
              "name": "E",
              "typeId": 859
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Ok",
                  "fields": [
                    {
                      "typeId": 862,
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Err",
                  "fields": [
                    {
                      "typeId": 859,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 862,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [863, 865]
            }
          },
          "docs": []
        },
        {
          "id": 863,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 864
            }
          },
          "docs": []
        },
        {
          "id": 864,
          "path": ["sp_mmr_primitives", "EncodableOpaqueLeaf"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 13,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 865,
          "path": ["sp_mmr_primitives", "Proof"],
          "params": [
            {
              "name": "Hash",
              "typeId": 12
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "leaf_indices",
                  "typeId": 638,
                  "typeName": "Vec<LeafIndex>",
                  "docs": []
                },
                {
                  "name": "leaf_count",
                  "typeId": 11,
                  "typeName": "NodeIndex",
                  "docs": []
                },
                {
                  "name": "items",
                  "typeId": 455,
                  "typeName": "Vec<Hash>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 866,
          "path": ["Result"],
          "params": [
            {
              "name": "T",
              "typeId": 34
            },
            {
              "name": "E",
              "typeId": 859
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Ok",
                  "fields": [
                    {
                      "typeId": 34,
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Err",
                  "fields": [
                    {
                      "typeId": 859,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 867,
          "path": ["sp_consensus_grandpa", "OpaqueKeyOwnershipProof"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 13,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 868,
          "path": ["Option"],
          "params": [
            {
              "name": "T",
              "typeId": 867
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 867,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 869,
          "path": ["sp_consensus_babe", "BabeConfiguration"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "slot_duration",
                  "typeId": 11,
                  "typeName": "u64",
                  "docs": []
                },
                {
                  "name": "epoch_length",
                  "typeId": 11,
                  "typeName": "u64",
                  "docs": []
                },
                {
                  "name": "c",
                  "typeId": 84,
                  "typeName": "(u64, u64)",
                  "docs": []
                },
                {
                  "name": "authorities",
                  "typeId": 482,
                  "typeName": "Vec<(AuthorityId, BabeAuthorityWeight)>",
                  "docs": []
                },
                {
                  "name": "randomness",
                  "typeId": 1,
                  "typeName": "Randomness",
                  "docs": []
                },
                {
                  "name": "allowed_slots",
                  "typeId": 85,
                  "typeName": "AllowedSlots",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 870,
          "path": ["sp_consensus_babe", "Epoch"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "epoch_index",
                  "typeId": 11,
                  "typeName": "u64",
                  "docs": []
                },
                {
                  "name": "start_slot",
                  "typeId": 81,
                  "typeName": "Slot",
                  "docs": []
                },
                {
                  "name": "duration",
                  "typeId": 11,
                  "typeName": "u64",
                  "docs": []
                },
                {
                  "name": "authorities",
                  "typeId": 482,
                  "typeName": "Vec<(AuthorityId, BabeAuthorityWeight)>",
                  "docs": []
                },
                {
                  "name": "randomness",
                  "typeId": 1,
                  "typeName": "Randomness",
                  "docs": []
                },
                {
                  "name": "config",
                  "typeId": 491,
                  "typeName": "BabeEpochConfiguration",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 871,
          "path": ["Option"],
          "params": [
            {
              "name": "T",
              "typeId": 872
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 872,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 872,
          "path": ["sp_consensus_babe", "OpaqueKeyOwnershipProof"],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 13,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 873,
          "path": ["Option"],
          "params": [
            {
              "name": "T",
              "typeId": 874
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 874,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 874,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 875
            }
          },
          "docs": []
        },
        {
          "id": 875,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [13, 542]
            }
          },
          "docs": []
        },
        {
          "id": 876,
          "path": ["pallet_transaction_payment", "types", "RuntimeDispatchInfo"],
          "params": [
            {
              "name": "Balance",
              "typeId": 6
            },
            {
              "name": "Weight",
              "typeId": 9
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "weight",
                  "typeId": 9,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "class",
                  "typeId": 23,
                  "typeName": "DispatchClass",
                  "docs": []
                },
                {
                  "name": "partial_fee",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 877,
          "path": ["pallet_transaction_payment", "types", "FeeDetails"],
          "params": [
            {
              "name": "Balance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "inclusion_fee",
                  "typeId": 878,
                  "typeName": "Option<InclusionFee<Balance>>",
                  "docs": []
                },
                {
                  "name": "tip",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 878,
          "path": ["Option"],
          "params": [
            {
              "name": "T",
              "typeId": 879
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 879,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 879,
          "path": ["pallet_transaction_payment", "types", "InclusionFee"],
          "params": [
            {
              "name": "Balance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "base_fee",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "len_fee",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "adjusted_weight_fee",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 880,
          "path": ["polkadot_runtime", "RuntimeError"],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "System",
                  "fields": [
                    {
                      "typeId": 469,
                      "typeName": "frame_system::Error<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Scheduler",
                  "fields": [
                    {
                      "typeId": 474,
                      "typeName": "pallet_scheduler::Error<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Preimage",
                  "fields": [
                    {
                      "typeId": 479,
                      "typeName": "pallet_preimage::Error<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 10,
                  "docs": []
                },
                {
                  "name": "Babe",
                  "fields": [
                    {
                      "typeId": 495,
                      "typeName": "pallet_babe::Error<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Indices",
                  "fields": [
                    {
                      "typeId": 497,
                      "typeName": "pallet_indices::Error<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "Balances",
                  "fields": [
                    {
                      "typeId": 512,
                      "typeName": "pallet_balances::Error<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "Staking",
                  "fields": [
                    {
                      "typeId": 536,
                      "typeName": "pallet_staking::Error<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "Session",
                  "fields": [
                    {
                      "typeId": 543,
                      "typeName": "pallet_session::Error<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": []
                },
                {
                  "name": "Grandpa",
                  "fields": [
                    {
                      "typeId": 547,
                      "typeName": "pallet_grandpa::Error<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": []
                },
                {
                  "name": "ImOnline",
                  "fields": [
                    {
                      "typeId": 550,
                      "typeName": "pallet_im_online::Error<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 12,
                  "docs": []
                },
                {
                  "name": "Treasury",
                  "fields": [
                    {
                      "typeId": 556,
                      "typeName": "pallet_treasury::Error<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 19,
                  "docs": []
                },
                {
                  "name": "ConvictionVoting",
                  "fields": [
                    {
                      "typeId": 569,
                      "typeName": "pallet_conviction_voting::Error<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 20,
                  "docs": []
                },
                {
                  "name": "Referenda",
                  "fields": [
                    {
                      "typeId": 587,
                      "typeName": "pallet_referenda::Error<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 21,
                  "docs": []
                },
                {
                  "name": "Whitelist",
                  "fields": [
                    {
                      "typeId": 588,
                      "typeName": "pallet_whitelist::Error<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 23,
                  "docs": []
                },
                {
                  "name": "Claims",
                  "fields": [
                    {
                      "typeId": 589,
                      "typeName": "claims::Error<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 24,
                  "docs": []
                },
                {
                  "name": "Vesting",
                  "fields": [
                    {
                      "typeId": 593,
                      "typeName": "pallet_vesting::Error<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 25,
                  "docs": []
                },
                {
                  "name": "Utility",
                  "fields": [
                    {
                      "typeId": 594,
                      "typeName": "pallet_utility::Error<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 26,
                  "docs": []
                },
                {
                  "name": "Identity",
                  "fields": [
                    {
                      "typeId": 605,
                      "typeName": "pallet_identity::Error<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 28,
                  "docs": []
                },
                {
                  "name": "Proxy",
                  "fields": [
                    {
                      "typeId": 614,
                      "typeName": "pallet_proxy::Error<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 29,
                  "docs": []
                },
                {
                  "name": "Multisig",
                  "fields": [
                    {
                      "typeId": 618,
                      "typeName": "pallet_multisig::Error<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 30,
                  "docs": []
                },
                {
                  "name": "Bounties",
                  "fields": [
                    {
                      "typeId": 622,
                      "typeName": "pallet_bounties::Error<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 34,
                  "docs": []
                },
                {
                  "name": "ChildBounties",
                  "fields": [
                    {
                      "typeId": 625,
                      "typeName": "pallet_child_bounties::Error<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 38,
                  "docs": []
                },
                {
                  "name": "ElectionProviderMultiPhase",
                  "fields": [
                    {
                      "typeId": 635,
                      "typeName": "pallet_election_provider_multi_phase::Error<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 36,
                  "docs": []
                },
                {
                  "name": "VoterList",
                  "fields": [
                    {
                      "typeId": 639,
                      "typeName": "pallet_bags_list::Error<Runtime, pallet_bags_list::Instance1>",
                      "docs": []
                    }
                  ],
                  "index": 37,
                  "docs": []
                },
                {
                  "name": "NominationPools",
                  "fields": [
                    {
                      "typeId": 657,
                      "typeName": "pallet_nomination_pools::Error<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 39,
                  "docs": []
                },
                {
                  "name": "FastUnstake",
                  "fields": [
                    {
                      "typeId": 662,
                      "typeName": "pallet_fast_unstake::Error<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 40,
                  "docs": []
                },
                {
                  "name": "Configuration",
                  "fields": [
                    {
                      "typeId": 666,
                      "typeName": "parachains_configuration::Error<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 51,
                  "docs": []
                },
                {
                  "name": "ParaInclusion",
                  "fields": [
                    {
                      "typeId": 674,
                      "typeName": "parachains_inclusion::Error<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 53,
                  "docs": []
                },
                {
                  "name": "ParaInherent",
                  "fields": [
                    {
                      "typeId": 680,
                      "typeName": "parachains_paras_inherent::Error<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 54,
                  "docs": []
                },
                {
                  "name": "Paras",
                  "fields": [
                    {
                      "typeId": 705,
                      "typeName": "parachains_paras::Error<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 56,
                  "docs": []
                },
                {
                  "name": "Hrmp",
                  "fields": [
                    {
                      "typeId": 717,
                      "typeName": "parachains_hrmp::Error<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 60,
                  "docs": []
                },
                {
                  "name": "ParasDisputes",
                  "fields": [
                    {
                      "typeId": 726,
                      "typeName": "parachains_disputes::Error<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 62,
                  "docs": []
                },
                {
                  "name": "ParasSlashing",
                  "fields": [
                    {
                      "typeId": 731,
                      "typeName": "parachains_slashing::Error<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 63,
                  "docs": []
                },
                {
                  "name": "Registrar",
                  "fields": [
                    {
                      "typeId": 734,
                      "typeName": "paras_registrar::Error<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 70,
                  "docs": []
                },
                {
                  "name": "Slots",
                  "fields": [
                    {
                      "typeId": 736,
                      "typeName": "slots::Error<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 71,
                  "docs": []
                },
                {
                  "name": "Auctions",
                  "fields": [
                    {
                      "typeId": 741,
                      "typeName": "auctions::Error<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 72,
                  "docs": []
                },
                {
                  "name": "Crowdloan",
                  "fields": [
                    {
                      "typeId": 744,
                      "typeName": "crowdloan::Error<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 73,
                  "docs": []
                },
                {
                  "name": "XcmPallet",
                  "fields": [
                    {
                      "typeId": 766,
                      "typeName": "pallet_xcm::Error<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 99,
                  "docs": []
                },
                {
                  "name": "MessageQueue",
                  "fields": [
                    {
                      "typeId": 773,
                      "typeName": "pallet_message_queue::Error<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 100,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      ],
      "pallets": [
        {
          "name": "System",
          "storage": {
            "prefix": "System",
            "entries": [
              {
                "name": "Account",
                "modifier": "Default",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["blake2_128Concat"],
                    "keyTypeId": 0,
                    "valueTypeId": 3
                  }
                },
                "default": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080",
                "docs": [" The full account information for a particular account ID."]
              },
              {
                "name": "ExtrinsicCount",
                "modifier": "Optional",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00",
                "docs": [" Total extrinsics count for the current block."]
              },
              {
                "name": "BlockWeight",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 8
                  }
                },
                "default": "0x000000000000",
                "docs": [" The current weight for the block."]
              },
              {
                "name": "AllExtrinsicsLen",
                "modifier": "Optional",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00",
                "docs": [" Total length (in bytes) for all extrinsics put together, for the current block."]
              },
              {
                "name": "BlockHash",
                "modifier": "Default",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 4,
                    "valueTypeId": 12
                  }
                },
                "default": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [" Map of block numbers to block hashes."]
              },
              {
                "name": "ExtrinsicData",
                "modifier": "Default",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 4,
                    "valueTypeId": 13
                  }
                },
                "default": "0x00",
                "docs": [" Extrinsics data for the current block (maps an extrinsic's index to its data)."]
              },
              {
                "name": "Number",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": [" The current block number being processed. Set by `execute_block`."]
              },
              {
                "name": "ParentHash",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 12
                  }
                },
                "default": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [" Hash of the previous block."]
              },
              {
                "name": "Digest",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 14
                  }
                },
                "default": "0x00",
                "docs": [" Digest of the current block, also part of the block header."]
              },
              {
                "name": "Events",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 18
                  }
                },
                "default": "0x00",
                "docs": [
                  " Events deposited for the current block.",
                  "",
                  " NOTE: The item is unbound and should therefore never be read on chain.",
                  " It could otherwise inflate the PoV size of a block.",
                  "",
                  " Events have a large in-memory size. Box the events to not go out-of-memory",
                  " just in case someone still reads them from within the runtime."
                ]
              },
              {
                "name": "EventCount",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": [" The number of events in the `Events<T>` list."]
              },
              {
                "name": "EventTopics",
                "modifier": "Default",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["blake2_128Concat"],
                    "keyTypeId": 12,
                    "valueTypeId": 456
                  }
                },
                "default": "0x00",
                "docs": [
                  " Mapping between a topic (represented by T::Hash) and a vector of indexes",
                  " of events in the `<Events<T>>` list.",
                  "",
                  " All topic vectors have deterministic storage locations depending on the topic. This",
                  " allows light-clients to leverage the changes trie storage tracking mechanism and",
                  " in case of changes fetch the list of events of interest.",
                  "",
                  " The value has the type `(BlockNumberFor<T>, EventIndex)` because if we used only just",
                  " the `EventIndex` then in case if the topic has the same contents on the next block",
                  " no notification will be triggered thus the event might be lost."
                ]
              },
              {
                "name": "LastRuntimeUpgrade",
                "modifier": "Optional",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 457
                  }
                },
                "default": "0x00",
                "docs": [" Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."]
              },
              {
                "name": "UpgradedToU32RefCount",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 44
                  }
                },
                "default": "0x00",
                "docs": [" True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."]
              },
              {
                "name": "UpgradedToTripleRefCount",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 44
                  }
                },
                "default": "0x00",
                "docs": [
                  " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False",
                  " (default) if not."
                ]
              },
              {
                "name": "ExecutionPhase",
                "modifier": "Optional",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 454
                  }
                },
                "default": "0x00",
                "docs": [" The execution phase of the block."]
              }
            ]
          },
          "calls": 69,
          "event": 21,
          "constants": [
            {
              "name": "BlockWeights",
              "typeId": 459,
              "value": "0x07b0bde93603000b00204aa9d10113ffffffffffffffff222d0d1e00010bb8845c8f580113a3703d0ad7a370bd010b0098f73e5d0113ffffffffffffffbf010000222d0d1e00010bb80caff9cc0113a3703d0ad7a370fd010b00204aa9d10113ffffffffffffffff01070088526a74130000000000000040222d0d1e00000000",
              "docs": [" Block & extrinsics weights: base values and limits."]
            },
            {
              "name": "BlockLength",
              "typeId": 462,
              "value": "0x00003c000000500000005000",
              "docs": [" The maximum length of a block (in bytes)."]
            },
            {
              "name": "BlockHashCount",
              "typeId": 4,
              "value": "0x00100000",
              "docs": [" Maximum number of block number to block hash mappings to keep (oldest pruned first)."]
            },
            {
              "name": "DbWeight",
              "typeId": 464,
              "value": "0x38ca38010000000098aaf90400000000",
              "docs": [" The weight of runtime database operations the runtime can invoke."]
            },
            {
              "name": "Version",
              "typeId": 465,
              "value": "0x20706f6c6b61646f743c7061726974792d706f6c6b61646f740000000041420f000000000044df6acb689907609b0400000037e397fc7c91f5e40200000040fe3ad401f8959a0600000017a6bc0d0062aeb30100000018ef58a3b67ba77001000000d2bc9897eed08f1503000000f78b278be53f454c02000000af2c0297a23e6d3d0500000049eaaf1b548a0cb00300000091d5df18b0d2cf5802000000ed99c5acb25eedf503000000cbca25e39f14238702000000687ad44ad37f03c201000000ab3c0572291feb8b01000000bc9d89904f5b923f0100000037c8bb1350a9a2a804000000f3ff14d5ab527059030000001800000000",
              "docs": [" Get the chain's current version."]
            },
            {
              "name": "SS58Prefix",
              "typeId": 66,
              "value": "0x0000",
              "docs": [
                " The designated SS58 prefix of this chain.",
                "",
                " This replaces the \"ss58Format\" property declared in the chain spec. Reason is",
                " that the runtime should know about the prefix in order to make use of it as",
                " an identifier of the chain."
              ]
            }
          ],
          "error": 469,
          "index": 0,
          "docs": []
        },
        {
          "name": "Scheduler",
          "storage": {
            "prefix": "Scheduler",
            "entries": [
              {
                "name": "IncompleteSince",
                "modifier": "Optional",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00",
                "docs": []
              },
              {
                "name": "Agenda",
                "modifier": "Default",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 4,
                    "valueTypeId": 470
                  }
                },
                "default": "0x00",
                "docs": [" Items to be executed, indexed by the block number that they should be executed on."]
              },
              {
                "name": "Lookup",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 1,
                    "valueTypeId": 31
                  }
                },
                "default": "0x00",
                "docs": [
                  " Lookup from a name to the block number and index of the task.",
                  "",
                  " For v3 -> v4 the previously unbounded identities are Blake2-256 hashed to form the v4",
                  " identities."
                ]
              }
            ]
          },
          "calls": 73,
          "event": 30,
          "constants": [
            {
              "name": "MaximumWeight",
              "typeId": 9,
              "value": "0x0b00806e87740113cccccccccccccccc",
              "docs": [" The maximum weight that may be scheduled per block for any dispatchables."]
            },
            {
              "name": "MaxScheduledPerBlock",
              "typeId": 4,
              "value": "0x32000000",
              "docs": [
                " The maximum number of scheduled calls in the queue for a single block.",
                "",
                " NOTE:",
                " + Dependent pallets' benchmarks might require a higher limit for the setting. Set a",
                " higher limit under `runtime-benchmarks` feature."
              ]
            }
          ],
          "error": 474,
          "index": 1,
          "docs": []
        },
        {
          "name": "Preimage",
          "storage": {
            "prefix": "Preimage",
            "entries": [
              {
                "name": "StatusFor",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["identity"],
                    "keyTypeId": 12,
                    "valueTypeId": 475
                  }
                },
                "default": "0x00",
                "docs": [" The request status of a given hash."]
              },
              {
                "name": "PreimageFor",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["identity"],
                    "keyTypeId": 477,
                    "valueTypeId": 478
                  }
                },
                "default": "0x00",
                "docs": []
              }
            ]
          },
          "calls": 75,
          "event": 35,
          "constants": [],
          "error": 479,
          "index": 10,
          "docs": []
        },
        {
          "name": "Babe",
          "storage": {
            "prefix": "Babe",
            "entries": [
              {
                "name": "EpochIndex",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 11
                  }
                },
                "default": "0x0000000000000000",
                "docs": [" Current epoch index."]
              },
              {
                "name": "Authorities",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 480
                  }
                },
                "default": "0x00",
                "docs": [" Current epoch authorities."]
              },
              {
                "name": "GenesisSlot",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 81
                  }
                },
                "default": "0x0000000000000000",
                "docs": [
                  " The slot at which the first epoch actually started. This is 0",
                  " until the first block of the chain."
                ]
              },
              {
                "name": "CurrentSlot",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 81
                  }
                },
                "default": "0x0000000000000000",
                "docs": [" Current slot number."]
              },
              {
                "name": "Randomness",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 1
                  }
                },
                "default": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " The epoch randomness for the *current* epoch.",
                  "",
                  " # Security",
                  "",
                  " This MUST NOT be used for gambling, as it can be influenced by a",
                  " malicious validator in the short term. It MAY be used in many",
                  " cryptographic protocols, however, so long as one remembers that this",
                  " (like everything else on-chain) it is public. For example, it can be",
                  " used where a number is needed that cannot have been chosen by an",
                  " adversary, for purposes such as public-coin zero-knowledge proofs."
                ]
              },
              {
                "name": "PendingEpochConfigChange",
                "modifier": "Optional",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 83
                  }
                },
                "default": "0x00",
                "docs": [" Pending epoch configuration change that will be applied when the next epoch is enacted."]
              },
              {
                "name": "NextRandomness",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 1
                  }
                },
                "default": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [" Next epoch randomness."]
              },
              {
                "name": "NextAuthorities",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 480
                  }
                },
                "default": "0x00",
                "docs": [" Next epoch authorities."]
              },
              {
                "name": "SegmentIndex",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  " Randomness under construction.",
                  "",
                  " We make a trade-off between storage accesses and list length.",
                  " We store the under-construction randomness in segments of up to",
                  " `UNDER_CONSTRUCTION_SEGMENT_LENGTH`.",
                  "",
                  " Once a segment reaches this length, we begin the next one.",
                  " We reset all segments and return to `0` at the beginning of every",
                  " epoch."
                ]
              },
              {
                "name": "UnderConstruction",
                "modifier": "Default",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 4,
                    "valueTypeId": 483
                  }
                },
                "default": "0x00",
                "docs": [" TWOX-NOTE: `SegmentIndex` is an increasing integer, so this is okay."]
              },
              {
                "name": "Initialized",
                "modifier": "Optional",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 485
                  }
                },
                "default": "0x00",
                "docs": [
                  " Temporary value (cleared at block finalization) which is `Some`",
                  " if per-block initialization has already been called for current block."
                ]
              },
              {
                "name": "AuthorVrfRandomness",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 32
                  }
                },
                "default": "0x00",
                "docs": [
                  " This field should always be populated during block processing unless",
                  " secondary plain slots are enabled (which don't contain a VRF output).",
                  "",
                  " It is set in `on_finalize`, before it will contain the value from the last block."
                ]
              },
              {
                "name": "EpochStart",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 31
                  }
                },
                "default": "0x0000000000000000",
                "docs": [
                  " The block numbers when the last and current epoch have started, respectively `N-1` and",
                  " `N`.",
                  " NOTE: We track this is in order to annotate the block number when a given pool of",
                  " entropy was fixed (i.e. it was known to chain observers). Since epochs are defined in",
                  " slots, which may be skipped, the block numbers may not line up with the slot numbers."
                ]
              },
              {
                "name": "Lateness",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  " How late the current block is compared to its parent.",
                  "",
                  " This entry is populated as part of block execution and is cleaned up",
                  " on block finalization. Querying this storage entry outside of block",
                  " execution context should always yield zero."
                ]
              },
              {
                "name": "EpochConfig",
                "modifier": "Optional",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 491
                  }
                },
                "default": "0x00",
                "docs": [
                  " The configuration for the current epoch. Should never be `None` as it is initialized in",
                  " genesis."
                ]
              },
              {
                "name": "NextEpochConfig",
                "modifier": "Optional",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 491
                  }
                },
                "default": "0x00",
                "docs": [
                  " The configuration for the next epoch, `None` if the config will not change",
                  " (you can fallback to `EpochConfig` instead in that case)."
                ]
              },
              {
                "name": "SkippedEpochs",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 492
                  }
                },
                "default": "0x00",
                "docs": [
                  " A list of the last 100 skipped epochs and the corresponding session index",
                  " when the epoch was skipped.",
                  "",
                  " This is only used for validating equivocation proofs. An equivocation proof",
                  " must contains a key-ownership proof for a given session, therefore we need a",
                  " way to tie together sessions and epoch indices, i.e. we need to validate that",
                  " a validator was the owner of a given key on a given session, and what the",
                  " active epoch index was during that session."
                ]
              }
            ]
          },
          "calls": 76,
          "constants": [
            {
              "name": "EpochDuration",
              "typeId": 11,
              "value": "0x6009000000000000",
              "docs": [
                " The amount of time, in slots, that each epoch should last.",
                " NOTE: Currently it is not possible to change the epoch duration after",
                " the chain has started. Attempting to do so will brick block production."
              ]
            },
            {
              "name": "ExpectedBlockTime",
              "typeId": 11,
              "value": "0x7017000000000000",
              "docs": [
                " The expected average block time at which BABE should be creating",
                " blocks. Since BABE is probabilistic it is not trivial to figure out",
                " what the expected average block time should be based on the slot",
                " duration and the security parameter `c` (where `1 - c` represents",
                " the probability of a slot being empty)."
              ]
            },
            {
              "name": "MaxAuthorities",
              "typeId": 4,
              "value": "0xa0860100",
              "docs": [" Max number of authorities allowed"]
            },
            {
              "name": "MaxNominators",
              "typeId": 4,
              "value": "0x00020000",
              "docs": [" The maximum number of nominators for each validator."]
            }
          ],
          "error": 495,
          "index": 2,
          "docs": []
        },
        {
          "name": "Timestamp",
          "storage": {
            "prefix": "Timestamp",
            "entries": [
              {
                "name": "Now",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 11
                  }
                },
                "default": "0x0000000000000000",
                "docs": [" Current time for the current block."]
              },
              {
                "name": "DidUpdate",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 44
                  }
                },
                "default": "0x00",
                "docs": [" Did the timestamp get updated in this block?"]
              }
            ]
          },
          "calls": 86,
          "constants": [
            {
              "name": "MinimumPeriod",
              "typeId": 11,
              "value": "0xb80b000000000000",
              "docs": [
                " The minimum period between blocks. Beware that this is different to the *expected*",
                " period that the block production apparatus provides. Your chosen consensus system will",
                " generally work with this to determine a sensible block time. e.g. For Aura, it will be",
                " double this period on default settings."
              ]
            }
          ],
          "index": 3,
          "docs": []
        },
        {
          "name": "Indices",
          "storage": {
            "prefix": "Indices",
            "entries": [
              {
                "name": "Accounts",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["blake2_128Concat"],
                    "keyTypeId": 4,
                    "valueTypeId": 496
                  }
                },
                "default": "0x00",
                "docs": [" The lookup from index to account."]
              }
            ]
          },
          "calls": 87,
          "event": 36,
          "constants": [
            {
              "name": "Deposit",
              "typeId": 6,
              "value": "0x00e87648170000000000000000000000",
              "docs": [" The deposit needed for reserving an index."]
            }
          ],
          "error": 497,
          "index": 4,
          "docs": []
        },
        {
          "name": "Balances",
          "storage": {
            "prefix": "Balances",
            "entries": [
              {
                "name": "TotalIssuance",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 6
                  }
                },
                "default": "0x00000000000000000000000000000000",
                "docs": [" The total units issued in the system."]
              },
              {
                "name": "InactiveIssuance",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 6
                  }
                },
                "default": "0x00000000000000000000000000000000",
                "docs": [" The total units of outstanding deactivated balance in the system."]
              },
              {
                "name": "Account",
                "modifier": "Default",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["blake2_128Concat"],
                    "keyTypeId": 0,
                    "valueTypeId": 5
                  }
                },
                "default": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080",
                "docs": [
                  " The Balances pallet example of storing the balance of an account.",
                  "",
                  " # Example",
                  "",
                  " ```nocompile",
                  "  impl pallet_balances::Config for Runtime {",
                  "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>",
                  "  }",
                  " ```",
                  "",
                  " You can also store the balance of an account in the `System` pallet.",
                  "",
                  " # Example",
                  "",
                  " ```nocompile",
                  "  impl pallet_balances::Config for Runtime {",
                  "   type AccountStore = System",
                  "  }",
                  " ```",
                  "",
                  " But this comes with tradeoffs, storing account balances in the system pallet stores",
                  " `frame_system` data alongside the account data contrary to storing account balances in the",
                  " `Balances` pallet, which uses a `StorageMap` to store balances data only.",
                  " NOTE: This is only used in the case that this pallet is used to store balances."
                ]
              },
              {
                "name": "Locks",
                "modifier": "Default",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["blake2_128Concat"],
                    "keyTypeId": 0,
                    "valueTypeId": 498
                  }
                },
                "default": "0x00",
                "docs": [
                  " Any liquidity locks on some account balances.",
                  " NOTE: Should only be accessed when setting, changing and freeing a lock."
                ]
              },
              {
                "name": "Reserves",
                "modifier": "Default",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["blake2_128Concat"],
                    "keyTypeId": 0,
                    "valueTypeId": 502
                  }
                },
                "default": "0x00",
                "docs": [" Named reserves on some account balances."]
              },
              {
                "name": "Holds",
                "modifier": "Default",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["blake2_128Concat"],
                    "keyTypeId": 0,
                    "valueTypeId": 505
                  }
                },
                "default": "0x00",
                "docs": [" Holds on account balances."]
              },
              {
                "name": "Freezes",
                "modifier": "Default",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["blake2_128Concat"],
                    "keyTypeId": 0,
                    "valueTypeId": 509
                  }
                },
                "default": "0x00",
                "docs": [" Freeze locks on account balances."]
              }
            ]
          },
          "calls": 91,
          "event": 37,
          "constants": [
            {
              "name": "ExistentialDeposit",
              "typeId": 6,
              "value": "0x00e40b54020000000000000000000000",
              "docs": [
                " The minimum amount required to keep an account open. MUST BE GREATER THAN ZERO!",
                "",
                " If you *really* need it to be zero, you can enable the feature `insecure_zero_ed` for",
                " this pallet. However, you do so at your own risk: this will open up a major DoS vector.",
                " In case you have multiple sources of provider references, you may also get unexpected",
                " behaviour if you set this to zero.",
                "",
                " Bottom line: Do yourself a favour and make it at least one!"
              ]
            },
            {
              "name": "MaxLocks",
              "typeId": 4,
              "value": "0x32000000",
              "docs": [
                " The maximum number of locks that should exist on an account.",
                " Not strictly enforced, but used for weight estimation."
              ]
            },
            {
              "name": "MaxReserves",
              "typeId": 4,
              "value": "0x32000000",
              "docs": [" The maximum number of named reserves that can exist on an account."]
            },
            {
              "name": "MaxHolds",
              "typeId": 4,
              "value": "0x00000000",
              "docs": [" The maximum number of holds that can exist on an account at any time."]
            },
            {
              "name": "MaxFreezes",
              "typeId": 4,
              "value": "0x00000000",
              "docs": [" The maximum number of individual freeze locks that can exist on an account at any time."]
            }
          ],
          "error": 512,
          "index": 5,
          "docs": []
        },
        {
          "name": "TransactionPayment",
          "storage": {
            "prefix": "TransactionPayment",
            "entries": [
              {
                "name": "NextFeeMultiplier",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 513
                  }
                },
                "default": "0x000064a7b3b6e00d0000000000000000",
                "docs": []
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 514
                  }
                },
                "default": "0x00",
                "docs": []
              }
            ]
          },
          "event": 39,
          "constants": [
            {
              "name": "OperationalFeeMultiplier",
              "typeId": 2,
              "value": "0x05",
              "docs": [
                " A fee mulitplier for `Operational` extrinsics to compute \"virtual tip\" to boost their",
                " `priority`",
                "",
                " This value is multipled by the `final_fee` to obtain a \"virtual tip\" that is later",
                " added to a tip component in regular `priority` calculations.",
                " It means that a `Normal` transaction can front-run a similarly-sized `Operational`",
                " extrinsic (with no tip), by including a tip value greater than the virtual tip.",
                "",
                " ```rust,ignore",
                " // For `Normal`",
                " let priority = priority_calc(tip);",
                "",
                " // For `Operational`",
                " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;",
                " let priority = priority_calc(tip + virtual_tip);",
                " ```",
                "",
                " Note that since we use `final_fee` the multiplier applies also to the regular `tip`",
                " sent with the transaction. So, not only does the transaction get a priority bump based",
                " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`",
                " transactions."
              ]
            }
          ],
          "index": 32,
          "docs": []
        },
        {
          "name": "Authorship",
          "storage": {
            "prefix": "Authorship",
            "entries": [
              {
                "name": "Author",
                "modifier": "Optional",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 0
                  }
                },
                "default": "0x00",
                "docs": [" Author of current block."]
              }
            ]
          },
          "constants": [],
          "index": 6,
          "docs": []
        },
        {
          "name": "Staking",
          "storage": {
            "prefix": "Staking",
            "entries": [
              {
                "name": "ValidatorCount",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": [" The ideal number of active validators."]
              },
              {
                "name": "MinimumValidatorCount",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": [" Minimum number of staking participants before emergency conditions are imposed."]
              },
              {
                "name": "Invulnerables",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 92
                  }
                },
                "default": "0x00",
                "docs": [
                  " Any validators that may never be slashed or forcibly kicked. It's a Vec since they're",
                  " easy to initialize and the performance hit is minimal (we expect no more than four",
                  " invulnerables) and restricted to testnets."
                ]
              },
              {
                "name": "Bonded",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 0,
                    "valueTypeId": 0
                  }
                },
                "default": "0x00",
                "docs": [
                  " Map from all locked \"stash\" accounts to the controller account.",
                  "",
                  " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
                ]
              },
              {
                "name": "MinNominatorBond",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 6
                  }
                },
                "default": "0x00000000000000000000000000000000",
                "docs": [" The minimum active bond to become and maintain the role of a nominator."]
              },
              {
                "name": "MinValidatorBond",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 6
                  }
                },
                "default": "0x00000000000000000000000000000000",
                "docs": [" The minimum active bond to become and maintain the role of a validator."]
              },
              {
                "name": "MinimumActiveStake",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 6
                  }
                },
                "default": "0x00000000000000000000000000000000",
                "docs": [" The minimum active nominator stake of the last successful election."]
              },
              {
                "name": "MinCommission",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 41
                  }
                },
                "default": "0x00000000",
                "docs": [
                  " The minimum amount of commission that validators can set.",
                  "",
                  " If set to `0`, no limit exists."
                ]
              },
              {
                "name": "Ledger",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["blake2_128Concat"],
                    "keyTypeId": 0,
                    "valueTypeId": 515
                  }
                },
                "default": "0x00",
                "docs": [" Map from all (unlocked) \"controller\" accounts to the info regarding the staking."]
              },
              {
                "name": "Payee",
                "modifier": "Default",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 0,
                    "valueTypeId": 94
                  }
                },
                "default": "0x00",
                "docs": [
                  " Where the reward payment should be made. Keyed by stash.",
                  "",
                  " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
                ]
              },
              {
                "name": "Validators",
                "modifier": "Default",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 0,
                    "valueTypeId": 42
                  }
                },
                "default": "0x0000",
                "docs": [
                  " The map from (wannabe) validator stash key to the preferences of that validator.",
                  "",
                  " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
                ]
              },
              {
                "name": "CounterForValidators",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": ["Counter for the related counted storage map"]
              },
              {
                "name": "MaxValidatorsCount",
                "modifier": "Optional",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00",
                "docs": [
                  " The maximum validator count before we stop allowing new validators to join.",
                  "",
                  " When this value is not set, no limits are enforced."
                ]
              },
              {
                "name": "Nominators",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 0,
                    "valueTypeId": 520
                  }
                },
                "default": "0x00",
                "docs": [
                  " The map from nominator stash key to their nomination preferences, namely the validators that",
                  " they wish to support.",
                  "",
                  " Note that the keys of this storage map might become non-decodable in case the",
                  " account's [`NominationsQuota::MaxNominations`] configuration is decreased.",
                  " In this rare case, these nominators",
                  " are still existent in storage, their key is correct and retrievable (i.e. `contains_key`",
                  " indicates that they exist), but their value cannot be decoded. Therefore, the non-decodable",
                  " nominators will effectively not-exist, until they re-submit their preferences such that it",
                  " is within the bounds of the newly set `Config::MaxNominations`.",
                  "",
                  " This implies that `::iter_keys().count()` and `::iter().count()` might return different",
                  " values for this map. Moreover, the main `::count()` is aligned with the former, namely the",
                  " number of keys that exist.",
                  "",
                  " Lastly, if any of the nominators become non-decodable, they can be chilled immediately via",
                  " [`Call::chill_other`] dispatchable by anyone.",
                  "",
                  " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
                ]
              },
              {
                "name": "CounterForNominators",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": ["Counter for the related counted storage map"]
              },
              {
                "name": "MaxNominatorsCount",
                "modifier": "Optional",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00",
                "docs": [
                  " The maximum nominator count before we stop allowing new validators to join.",
                  "",
                  " When this value is not set, no limits are enforced."
                ]
              },
              {
                "name": "CurrentEra",
                "modifier": "Optional",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00",
                "docs": [
                  " The current era index.",
                  "",
                  " This is the latest planned era, depending on how the Session pallet queues the validator",
                  " set, it might be active or not."
                ]
              },
              {
                "name": "ActiveEra",
                "modifier": "Optional",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 522
                  }
                },
                "default": "0x00",
                "docs": [
                  " The active era information, it holds index and start.",
                  "",
                  " The active era is the era being currently rewarded. Validator set of this era must be",
                  " equal to [`SessionInterface::validators`]."
                ]
              },
              {
                "name": "ErasStartSessionIndex",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 4,
                    "valueTypeId": 4
                  }
                },
                "default": "0x00",
                "docs": [
                  " The session index at which the era start for the last `HISTORY_DEPTH` eras.",
                  "",
                  " Note: This tracks the starting session (i.e. session index when era start being active)",
                  " for the eras in `[CurrentEra - HISTORY_DEPTH, CurrentEra]`."
                ]
              },
              {
                "name": "ErasStakers",
                "modifier": "Default",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat", "twox64Concat"],
                    "keyTypeId": 524,
                    "valueTypeId": 59
                  }
                },
                "default": "0x000000",
                "docs": [
                  " Exposure of validator at era.",
                  "",
                  " This is keyed first by the era index to allow bulk deletion and then the stash account.",
                  "",
                  " Is it removed after `HISTORY_DEPTH` eras.",
                  " If stakers hasn't been set or has been removed then empty exposure is returned."
                ]
              },
              {
                "name": "ErasStakersClipped",
                "modifier": "Default",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat", "twox64Concat"],
                    "keyTypeId": 524,
                    "valueTypeId": 59
                  }
                },
                "default": "0x000000",
                "docs": [
                  " Clipped Exposure of validator at era.",
                  "",
                  " This is similar to [`ErasStakers`] but number of nominators exposed is reduced to the",
                  " `T::MaxNominatorRewardedPerValidator` biggest stakers.",
                  " (Note: the field `total` and `own` of the exposure remains unchanged).",
                  " This is used to limit the i/o cost for the nominator payout.",
                  "",
                  " This is keyed fist by the era index to allow bulk deletion and then the stash account.",
                  "",
                  " Is it removed after `HISTORY_DEPTH` eras.",
                  " If stakers hasn't been set or has been removed then empty exposure is returned."
                ]
              },
              {
                "name": "ErasValidatorPrefs",
                "modifier": "Default",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat", "twox64Concat"],
                    "keyTypeId": 524,
                    "valueTypeId": 42
                  }
                },
                "default": "0x0000",
                "docs": [
                  " Similar to `ErasStakers`, this holds the preferences of validators.",
                  "",
                  " This is keyed first by the era index to allow bulk deletion and then the stash account.",
                  "",
                  " Is it removed after `HISTORY_DEPTH` eras."
                ]
              },
              {
                "name": "ErasValidatorReward",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 4,
                    "valueTypeId": 6
                  }
                },
                "default": "0x00",
                "docs": [
                  " The total validator era payout for the last `HISTORY_DEPTH` eras.",
                  "",
                  " Eras that haven't finished yet or has been removed doesn't have reward."
                ]
              },
              {
                "name": "ErasRewardPoints",
                "modifier": "Default",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 4,
                    "valueTypeId": 525
                  }
                },
                "default": "0x0000000000",
                "docs": [
                  " Rewards for the last `HISTORY_DEPTH` eras.",
                  " If reward hasn't been set or has been removed then 0 reward is returned."
                ]
              },
              {
                "name": "ErasTotalStake",
                "modifier": "Default",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 4,
                    "valueTypeId": 6
                  }
                },
                "default": "0x00000000000000000000000000000000",
                "docs": [
                  " The total amount staked for the last `HISTORY_DEPTH` eras.",
                  " If total hasn't been set or has been removed then 0 stake is returned."
                ]
              },
              {
                "name": "ForceEra",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 45
                  }
                },
                "default": "0x00",
                "docs": [" Mode of era forcing."]
              },
              {
                "name": "SlashRewardFraction",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 41
                  }
                },
                "default": "0x00000000",
                "docs": [
                  " The percentage of the slash that is distributed to reporters.",
                  "",
                  " The rest of the slashed value is handled by the `Slash`."
                ]
              },
              {
                "name": "CanceledSlashPayout",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 6
                  }
                },
                "default": "0x00000000000000000000000000000000",
                "docs": [
                  " The amount of currency given to reporters of a slash event which was",
                  " canceled by extraordinary circumstances (e.g. governance)."
                ]
              },
              {
                "name": "UnappliedSlashes",
                "modifier": "Default",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 4,
                    "valueTypeId": 529
                  }
                },
                "default": "0x00",
                "docs": [" All unapplied slashes that are queued for later."]
              },
              {
                "name": "BondedEras",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 456
                  }
                },
                "default": "0x00",
                "docs": [
                  " A mapping from still-bonded eras to the first session index of that era.",
                  "",
                  " Must contains information for eras for the range:",
                  " `[active_era - bounding_duration; active_era]`"
                ]
              },
              {
                "name": "ValidatorSlashInEra",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat", "twox64Concat"],
                    "keyTypeId": 524,
                    "valueTypeId": 531
                  }
                },
                "default": "0x00",
                "docs": [
                  " All slashing events on validators, mapped by era to the highest slash proportion",
                  " and slash value of the era."
                ]
              },
              {
                "name": "NominatorSlashInEra",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat", "twox64Concat"],
                    "keyTypeId": 524,
                    "valueTypeId": 6
                  }
                },
                "default": "0x00",
                "docs": [" All slashing events on nominators, mapped by era to the highest slash value of the era."]
              },
              {
                "name": "SlashingSpans",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 0,
                    "valueTypeId": 532
                  }
                },
                "default": "0x00",
                "docs": [" Slashing spans for stash accounts."]
              },
              {
                "name": "SpanSlash",
                "modifier": "Default",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 528,
                    "valueTypeId": 533
                  }
                },
                "default": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Records information about the maximum slash of a stash within a slashing span,",
                  " as well as how much reward has been paid out."
                ]
              },
              {
                "name": "CurrentPlannedSession",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  " The last planned session scheduled by the session pallet.",
                  "",
                  " This is basically in sync with the call to [`pallet_session::SessionManager::new_session`]."
                ]
              },
              {
                "name": "OffendingValidators",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 534
                  }
                },
                "default": "0x00",
                "docs": [
                  " Indices of validators that have offended in the active era and whether they are currently",
                  " disabled.",
                  "",
                  " This value should be a superset of disabled validators since not all offences lead to the",
                  " validator being disabled (if there was no slash). This is needed to track the percentage of",
                  " validators that have offended in the current era, ensuring a new era is forced if",
                  " `OffendingValidatorsThreshold` is reached. The vec is always kept sorted so that we can find",
                  " whether a given validator has previously offended using binary search. It gets cleared when",
                  " the era ends."
                ]
              },
              {
                "name": "ChillThreshold",
                "modifier": "Optional",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 96
                  }
                },
                "default": "0x00",
                "docs": [
                  " The threshold for when users can start calling `chill_other` for other validators /",
                  " nominators. The threshold is compared to the actual number of validators / nominators",
                  " (`CountFor*`) in the system compared to the configured max (`Max*Count`)."
                ]
              }
            ]
          },
          "calls": 93,
          "event": 40,
          "constants": [
            {
              "name": "HistoryDepth",
              "typeId": 4,
              "value": "0x54000000",
              "docs": [
                " Number of eras to keep in history.",
                "",
                " Following information is kept for eras in `[current_era -",
                " HistoryDepth, current_era]`: `ErasStakers`, `ErasStakersClipped`,",
                " `ErasValidatorPrefs`, `ErasValidatorReward`, `ErasRewardPoints`,",
                " `ErasTotalStake`, `ErasStartSessionIndex`,",
                " `StakingLedger.claimed_rewards`.",
                "",
                " Must be more than the number of eras delayed by session.",
                " I.e. active era must always be in history. I.e. `active_era >",
                " current_era - history_depth` must be guaranteed.",
                "",
                " If migrating an existing pallet from storage value to config value,",
                " this should be set to same value or greater as in storage.",
                "",
                " Note: `HistoryDepth` is used as the upper bound for the `BoundedVec`",
                " item `StakingLedger.claimed_rewards`. Setting this value lower than",
                " the existing value can lead to inconsistencies in the",
                " `StakingLedger` and will need to be handled properly in a migration.",
                " The test `reducing_history_depth_abrupt` shows this effect."
              ]
            },
            {
              "name": "SessionsPerEra",
              "typeId": 4,
              "value": "0x06000000",
              "docs": [" Number of sessions per era."]
            },
            {
              "name": "BondingDuration",
              "typeId": 4,
              "value": "0x1c000000",
              "docs": [" Number of eras that staked funds must remain bonded for."]
            },
            {
              "name": "SlashDeferDuration",
              "typeId": 4,
              "value": "0x1b000000",
              "docs": [
                " Number of eras that slashes are deferred by, after computation.",
                "",
                " This should be less than the bonding duration. Set to 0 if slashes",
                " should be applied immediately, without opportunity for intervention."
              ]
            },
            {
              "name": "MaxNominatorRewardedPerValidator",
              "typeId": 4,
              "value": "0x00020000",
              "docs": [
                " The maximum number of nominators rewarded for each validator.",
                "",
                " For each validator only the `$MaxNominatorRewardedPerValidator` biggest stakers can",
                " claim their reward. This used to limit the i/o cost for the nominator payout."
              ]
            },
            {
              "name": "MaxUnlockingChunks",
              "typeId": 4,
              "value": "0x20000000",
              "docs": [
                " The maximum number of `unlocking` chunks a [`StakingLedger`] can",
                " have. Effectively determines how many unique eras a staker may be",
                " unbonding in.",
                "",
                " Note: `MaxUnlockingChunks` is used as the upper bound for the",
                " `BoundedVec` item `StakingLedger.unlocking`. Setting this value",
                " lower than the existing value can lead to inconsistencies in the",
                " `StakingLedger` and will need to be handled properly in a runtime",
                " migration. The test `reducing_max_unlocking_chunks_abrupt` shows",
                " this effect."
              ]
            }
          ],
          "error": 536,
          "index": 7,
          "docs": []
        },
        {
          "name": "Offences",
          "storage": {
            "prefix": "Offences",
            "entries": [
              {
                "name": "Reports",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 12,
                    "valueTypeId": 537
                  }
                },
                "default": "0x00",
                "docs": [" The primary structure that holds all offence records keyed by report identifiers."]
              },
              {
                "name": "ConcurrentReportsIndex",
                "modifier": "Default",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat", "twox64Concat"],
                    "keyTypeId": 538,
                    "valueTypeId": 455
                  }
                },
                "default": "0x00",
                "docs": [" A vector of reports of the same kind that happened at the same time slot."]
              }
            ]
          },
          "event": 46,
          "constants": [],
          "index": 8,
          "docs": []
        },
        {
          "name": "Historical",
          "constants": [],
          "index": 33,
          "docs": []
        },
        {
          "name": "Session",
          "storage": {
            "prefix": "Session",
            "entries": [
              {
                "name": "Validators",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 92
                  }
                },
                "default": "0x00",
                "docs": [" The current set of validators."]
              },
              {
                "name": "CurrentIndex",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": [" Current index of the session."]
              },
              {
                "name": "QueuedChanged",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 44
                  }
                },
                "default": "0x00",
                "docs": [
                  " True if the underlying economic identities or weighting behind the validators",
                  " has changed in the queued validator set."
                ]
              },
              {
                "name": "QueuedKeys",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 539
                  }
                },
                "default": "0x00",
                "docs": [
                  " The queued keys for the next session. When the next session begins, these keys",
                  " will be used to determine the validator's session keys."
                ]
              },
              {
                "name": "DisabledValidators",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 97
                  }
                },
                "default": "0x00",
                "docs": [
                  " Indices of disabled validators.",
                  "",
                  " The vec is always kept sorted so that we can find whether a given validator is",
                  " disabled using binary search. It gets cleared when `on_session_ending` returns",
                  " a new set of identities."
                ]
              },
              {
                "name": "NextKeys",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 0,
                    "valueTypeId": 103
                  }
                },
                "default": "0x00",
                "docs": [" The next session keys for a validator."]
              },
              {
                "name": "KeyOwner",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 541,
                    "valueTypeId": 0
                  }
                },
                "default": "0x00",
                "docs": [" The owner of a key. The key is the `KeyTypeId` + the encoded key."]
              }
            ]
          },
          "calls": 102,
          "event": 48,
          "constants": [],
          "error": 543,
          "index": 9,
          "docs": []
        },
        {
          "name": "Grandpa",
          "storage": {
            "prefix": "Grandpa",
            "entries": [
              {
                "name": "State",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 544
                  }
                },
                "default": "0x00",
                "docs": [" State of the current authority set."]
              },
              {
                "name": "PendingChange",
                "modifier": "Optional",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 545
                  }
                },
                "default": "0x00",
                "docs": [" Pending change: (signaled at, scheduled change)."]
              },
              {
                "name": "NextForced",
                "modifier": "Optional",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00",
                "docs": [" next block number where we can force a change."]
              },
              {
                "name": "Stalled",
                "modifier": "Optional",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 31
                  }
                },
                "default": "0x00",
                "docs": [" `true` if we are currently stalled."]
              },
              {
                "name": "CurrentSetId",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 11
                  }
                },
                "default": "0x0000000000000000",
                "docs": [
                  " The number of changes (both in terms of keys and underlying economic responsibilities)",
                  " in the \"set\" of Grandpa validators from genesis."
                ]
              },
              {
                "name": "SetIdSession",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 11,
                    "valueTypeId": 4
                  }
                },
                "default": "0x00",
                "docs": [
                  " A mapping from grandpa set ID to the index of the *most recent* session for which its",
                  " members were responsible.",
                  "",
                  " This is only used for validating equivocation proofs. An equivocation proof must",
                  " contains a key-ownership proof for a given session, therefore we need a way to tie",
                  " together sessions and GRANDPA set ids, i.e. we need to validate that a validator",
                  " was the owner of a given key on a given session, and what the active set ID was",
                  " during that session.",
                  "",
                  " TWOX-NOTE: `SetId` is not under user control."
                ]
              }
            ]
          },
          "calls": 107,
          "event": 49,
          "constants": [
            {
              "name": "MaxAuthorities",
              "typeId": 4,
              "value": "0xa0860100",
              "docs": [" Max Authorities in use"]
            },
            {
              "name": "MaxNominators",
              "typeId": 4,
              "value": "0x00020000",
              "docs": [" The maximum number of nominators for each validator."]
            },
            {
              "name": "MaxSetIdSessionEntries",
              "typeId": 11,
              "value": "0xa800000000000000",
              "docs": [
                " The maximum number of entries to keep in the set id to session index mapping.",
                "",
                " Since the `SetIdSession` map is only used for validating equivocations this",
                " value should relate to the bonding duration of whatever staking system is",
                " being used (if any). If equivocation handling is not enabled then this value",
                " can be zero."
              ]
            }
          ],
          "error": 547,
          "index": 11,
          "docs": []
        },
        {
          "name": "ImOnline",
          "storage": {
            "prefix": "ImOnline",
            "entries": [
              {
                "name": "HeartbeatAfter",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  " The block number after which it's ok to send heartbeats in the current",
                  " session.",
                  "",
                  " At the beginning of each session we set this to a value that should fall",
                  " roughly in the middle of the session duration. The idea is to first wait for",
                  " the validators to produce a block in the current session, so that the",
                  " heartbeat later on will not be necessary.",
                  "",
                  " This value will only be used as a fallback if we fail to get a proper session",
                  " progress estimate from `NextSessionRotation`, as those estimates should be",
                  " more accurate then the value we calculate for `HeartbeatAfter`."
                ]
              },
              {
                "name": "Keys",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 548
                  }
                },
                "default": "0x00",
                "docs": [" The current set of keys that may issue a heartbeat."]
              },
              {
                "name": "ReceivedHeartbeats",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat", "twox64Concat"],
                    "keyTypeId": 31,
                    "valueTypeId": 44
                  }
                },
                "default": "0x00",
                "docs": [" For each session index, we keep a mapping of `SessionIndex` and `AuthIndex`."]
              },
              {
                "name": "AuthoredBlocks",
                "modifier": "Default",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat", "twox64Concat"],
                    "keyTypeId": 524,
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  " For each session index, we keep a mapping of `ValidatorId<T>` to the",
                  " number of blocks authored by the given authority."
                ]
              }
            ]
          },
          "calls": 119,
          "event": 54,
          "constants": [
            {
              "name": "UnsignedPriority",
              "typeId": 11,
              "value": "0xffffffffffffffff",
              "docs": [
                " A configuration for base priority of unsigned transactions.",
                "",
                " This is exposed so that it can be tuned for particular runtime, when",
                " multiple pallets send unsigned transactions."
              ]
            }
          ],
          "error": 550,
          "index": 12,
          "docs": []
        },
        {
          "name": "AuthorityDiscovery",
          "constants": [],
          "index": 13,
          "docs": []
        },
        {
          "name": "Treasury",
          "storage": {
            "prefix": "Treasury",
            "entries": [
              {
                "name": "ProposalCount",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": [" Number of proposals that have been made."]
              },
              {
                "name": "Proposals",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 4,
                    "valueTypeId": 551
                  }
                },
                "default": "0x00",
                "docs": [" Proposals that have been made."]
              },
              {
                "name": "Deactivated",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 6
                  }
                },
                "default": "0x00000000000000000000000000000000",
                "docs": [" The amount which has been reported as inactive to Currency."]
              },
              {
                "name": "Approvals",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 552
                  }
                },
                "default": "0x00",
                "docs": [" Proposal indices that have been approved but not yet awarded."]
              }
            ]
          },
          "calls": 123,
          "event": 63,
          "constants": [
            {
              "name": "ProposalBond",
              "typeId": 553,
              "value": "0x50c30000",
              "docs": [
                " Fraction of a proposal's value that should be bonded in order to place the proposal.",
                " An accepted proposal gets these back. A rejected proposal does not."
              ]
            },
            {
              "name": "ProposalBondMinimum",
              "typeId": 6,
              "value": "0x0010a5d4e80000000000000000000000",
              "docs": [" Minimum amount of funds that should be placed in a deposit for making a proposal."]
            },
            {
              "name": "ProposalBondMaximum",
              "typeId": 554,
              "value": "0x01005039278c0400000000000000000000",
              "docs": [" Maximum amount of funds that should be placed in a deposit for making a proposal."]
            },
            {
              "name": "SpendPeriod",
              "typeId": 4,
              "value": "0x00460500",
              "docs": [" Period between successive spends."]
            },
            {
              "name": "Burn",
              "typeId": 553,
              "value": "0x10270000",
              "docs": [" Percentage of spare funds (if any) that are burnt per spend period."]
            },
            {
              "name": "PalletId",
              "typeId": 555,
              "value": "0x70792f7472737279",
              "docs": [" The treasury's pallet id, used for deriving its sovereign account ID."]
            },
            {
              "name": "MaxApprovals",
              "typeId": 4,
              "value": "0x64000000",
              "docs": [
                " The maximum number of approvals that can wait in the spending queue.",
                "",
                " NOTE: This parameter is also used within the Bounties Pallet extension if enabled."
              ]
            }
          ],
          "error": 556,
          "index": 19,
          "docs": []
        },
        {
          "name": "ConvictionVoting",
          "storage": {
            "prefix": "ConvictionVoting",
            "entries": [
              {
                "name": "VotingFor",
                "modifier": "Default",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat", "twox64Concat"],
                    "keyTypeId": 557,
                    "valueTypeId": 558
                  }
                },
                "default": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " All voting for a particular voter in a particular voting class. We store the balance for the",
                  " number of votes that we have recorded."
                ]
              },
              {
                "name": "ClassLocksFor",
                "modifier": "Default",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 0,
                    "valueTypeId": 566
                  }
                },
                "default": "0x00",
                "docs": [
                  " The voting classes which have a non-zero lock requirement and the lock amounts which they",
                  " require. The actual amount locked on behalf of this pallet should always be the maximum of",
                  " this list."
                ]
              }
            ]
          },
          "calls": 124,
          "event": 64,
          "constants": [
            {
              "name": "MaxVotes",
              "typeId": 4,
              "value": "0x00020000",
              "docs": [
                " The maximum number of concurrent votes an account may have.",
                "",
                " Also used to compute weight, an overly large value can lead to extrinsics with large",
                " weight estimation: see `delegate` for instance."
              ]
            },
            {
              "name": "VoteLockingPeriod",
              "typeId": 4,
              "value": "0xc0890100",
              "docs": [
                " The minimum period of vote locking.",
                "",
                " It should be no shorter than enactment period to ensure that in the case of an approval,",
                " those successful voters are locked into the consequences that their votes entail."
              ]
            }
          ],
          "error": 569,
          "index": 20,
          "docs": []
        },
        {
          "name": "Referenda",
          "storage": {
            "prefix": "Referenda",
            "entries": [
              {
                "name": "ReferendumCount",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": [" The next free referendum index, aka the number of referenda started so far."]
              },
              {
                "name": "ReferendumInfoFor",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["blake2_128Concat"],
                    "keyTypeId": 4,
                    "valueTypeId": 570
                  }
                },
                "default": "0x00",
                "docs": [" Information concerning any given referendum."]
              },
              {
                "name": "TrackQueue",
                "modifier": "Default",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 66,
                    "valueTypeId": 578
                  }
                },
                "default": "0x00",
                "docs": [
                  " The sorted list of referenda ready to be decided but not yet being decided, ordered by",
                  " conviction-weighted approvals.",
                  "",
                  " This should be empty if `DecidingCount` is less than `TrackInfo::max_deciding`."
                ]
              },
              {
                "name": "DecidingCount",
                "modifier": "Default",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 66,
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": [" The number of referenda being decided currently."]
              },
              {
                "name": "MetadataOf",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["blake2_128Concat"],
                    "keyTypeId": 4,
                    "valueTypeId": 12
                  }
                },
                "default": "0x00",
                "docs": [
                  " The metadata is a general information concerning the referendum.",
                  " The `PreimageHash` refers to the preimage of the `Preimages` provider which can be a JSON",
                  " dump or IPFS hash of a JSON file.",
                  "",
                  " Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)",
                  " large preimages."
                ]
              }
            ]
          },
          "calls": 129,
          "event": 65,
          "constants": [
            {
              "name": "SubmissionDeposit",
              "typeId": 6,
              "value": "0x00e40b54020000000000000000000000",
              "docs": [" The minimum amount to be used as a deposit for a public referendum proposal."]
            },
            {
              "name": "MaxQueued",
              "typeId": 4,
              "value": "0x64000000",
              "docs": [" Maximum size of the referendum queue for a single track."]
            },
            {
              "name": "UndecidingTimeout",
              "typeId": 4,
              "value": "0x80130300",
              "docs": [
                " The number of blocks after submission that a referendum must begin being decided by.",
                " Once this passes, then anyone may cancel the referendum."
              ]
            },
            {
              "name": "AlarmInterval",
              "typeId": 4,
              "value": "0x01000000",
              "docs": [
                " Quantization level for the referendum wakeup scheduler. A higher number will result in",
                " fewer storage reads/writes needed for smaller voters, but also result in delays to the",
                " automatic referendum status changes. Explicit servicing instructions are unaffected."
              ]
            },
            {
              "name": "Tracks",
              "typeId": 581,
              "value": "0x3c000010726f6f74010000000080c6a47e8d03000000000000000000b00400000027060040380000403800000290d73e0d000000005743de13000000005443de13000000000000ca9a3b000000000065cd1d01004877686974656c69737465645f63616c6c65726400000000407a10f35a000000000000000000002c01000000270600640000006400000002ec972510000000007b573c170000000042392f1200000000020e00840000000000d6e61f010000000039627902000000000a00347374616b696e675f61646d696e0a00000000203d88792d00000000000000000000b004000000270600080700006400000000c94330240065cd1d00ca9a3b025d6f780000000000e82eed00000000008c6889ffffffffff0b00247472656173757265720a00000000a0724e180900000000000000000000b00400000027060008070000403800000290d73e0d000000005743de13000000005443de13000000000000ca9a3b000000000065cd1d0c002c6c656173655f61646d696e0a00000000203d88792d00000000000000000000b004000000270600080700006400000000c94330240065cd1d00ca9a3b025d6f780000000000e82eed00000000008c6889ffffffffff0d004066656c6c6f77736869705f61646d696e0a00000000203d88792d00000000000000000000b004000000270600080700006400000000c94330240065cd1d00ca9a3b025d6f780000000000e82eed00000000008c6889ffffffffff0e003467656e6572616c5f61646d696e0a00000000203d88792d00000000000000000000b00400000027060008070000640000000290d73e0d000000005743de13000000005443de13000000000259a2f40200000000a3296b05000000002e6b4afdffffffff0f003461756374696f6e5f61646d696e0a00000000203d88792d00000000000000000000b00400000027060008070000640000000290d73e0d000000005743de13000000005443de13000000000259a2f40200000000a3296b05000000002e6b4afdffffffff1400507265666572656e64756d5f63616e63656c6c6572e803000000407a10f35a00000000000000000000b0040000c0890100080700006400000000c94330240065cd1d00ca9a3b025d6f780000000000e82eed00000000008c6889ffffffffff1500447265666572656e64756d5f6b696c6c6572e803000000406352bfc601000000000000000000b004000000270600080700006400000000c94330240065cd1d00ca9a3b025d6f780000000000e82eed00000000008c6889ffffffffff1e0030736d616c6c5f746970706572c800000000e40b540200000000000000000000000a000000c0890100640000000a00000000499149150065cd1d00ca9a3b02f9ba1800000000002a4d3100000000006b59e7ffffffffff1f00286269675f7469707065726400000000e8764817000000000000000000000064000000c0890100580200006400000000499149150065cd1d00ca9a3b02694f3f000000000035967d0000000000e534c1ffffffffff200034736d616c6c5f7370656e646572320000000010a5d4e800000000000000000000006009000000270600201c00004038000000c94330240065cd1d00ca9a3b025d6f780000000000e82eed00000000008c6889ffffffffff2100386d656469756d5f7370656e6465723200000000204aa9d1010000000000000000000060090000002706004038000040380000005b01f6300065cd1d00ca9a3b021161db0000000000bfd1aa010000000020972affffffffff22002c6269675f7370656e6465723200000000409452a30300000000000000000000600900000027060080700000403800000000ca9a3b0065cd1d00ca9a3b02413cb00100000000755d34030000000045d165feffffffff",
              "docs": [" Information concerning the different referendum tracks."]
            }
          ],
          "error": 587,
          "index": 21,
          "docs": []
        },
        {
          "name": "Whitelist",
          "storage": {
            "prefix": "Whitelist",
            "entries": [
              {
                "name": "WhitelistedCall",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 12,
                    "valueTypeId": 34
                  }
                },
                "default": "0x00",
                "docs": []
              }
            ]
          },
          "calls": 146,
          "event": 417,
          "constants": [],
          "error": 588,
          "index": 23,
          "docs": []
        },
        {
          "name": "Claims",
          "storage": {
            "prefix": "Claims",
            "entries": [
              {
                "name": "Claims",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["identity"],
                    "keyTypeId": 150,
                    "valueTypeId": 6
                  }
                },
                "default": "0x00",
                "docs": []
              },
              {
                "name": "Total",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 6
                  }
                },
                "default": "0x00000000000000000000000000000000",
                "docs": []
              },
              {
                "name": "Vesting",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["identity"],
                    "keyTypeId": 150,
                    "valueTypeId": 152
                  }
                },
                "default": "0x00",
                "docs": [
                  " Vesting schedule for a claim.",
                  " First balance is the total amount that should be held for vesting.",
                  " Second balance is how much should be unlocked per block.",
                  " The block number is when the vesting should start."
                ]
              },
              {
                "name": "Signing",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["identity"],
                    "keyTypeId": 150,
                    "valueTypeId": 154
                  }
                },
                "default": "0x00",
                "docs": [" The statement kind that must be signed, if any."]
              },
              {
                "name": "Preclaims",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["identity"],
                    "keyTypeId": 0,
                    "valueTypeId": 150
                  }
                },
                "default": "0x00",
                "docs": [" Pre-claimed Ethereum accounts, by the Account ID that they are claimed to."]
              }
            ]
          },
          "calls": 147,
          "event": 422,
          "constants": [
            {
              "name": "Prefix",
              "typeId": 13,
              "value": "0x8450617920444f547320746f2074686520506f6c6b61646f74206163636f756e743a",
              "docs": []
            }
          ],
          "error": 589,
          "index": 24,
          "docs": []
        },
        {
          "name": "Vesting",
          "storage": {
            "prefix": "Vesting",
            "entries": [
              {
                "name": "Vesting",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["blake2_128Concat"],
                    "keyTypeId": 0,
                    "valueTypeId": 590
                  }
                },
                "default": "0x00",
                "docs": [" Information regarding the vesting of a given account."]
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 592
                  }
                },
                "default": "0x00",
                "docs": [
                  " Storage version of the pallet.",
                  "",
                  " New networks start with latest version, as determined by the genesis build."
                ]
              }
            ]
          },
          "calls": 156,
          "event": 423,
          "constants": [
            {
              "name": "MinVestedTransfer",
              "typeId": 6,
              "value": "0x00e40b54020000000000000000000000",
              "docs": [" The minimum amount transferred to call `vested_transfer`."]
            },
            {
              "name": "MaxVestingSchedules",
              "typeId": 4,
              "value": "0x1c000000",
              "docs": []
            }
          ],
          "error": 593,
          "index": 25,
          "docs": []
        },
        {
          "name": "Utility",
          "calls": 158,
          "event": 424,
          "constants": [
            {
              "name": "batched_calls_limit",
              "typeId": 4,
              "value": "0xaa2a0000",
              "docs": [" The limit on the number of batched calls."]
            }
          ],
          "error": 594,
          "index": 26,
          "docs": []
        },
        {
          "name": "Identity",
          "storage": {
            "prefix": "Identity",
            "entries": [
              {
                "name": "IdentityOf",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 0,
                    "valueTypeId": 595
                  }
                },
                "default": "0x00",
                "docs": [
                  " Information that is pertinent to identify the entity behind an account.",
                  "",
                  " TWOX-NOTE: OK ― `AccountId` is a secure hash."
                ]
              },
              {
                "name": "SuperOf",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["blake2_128Concat"],
                    "keyTypeId": 0,
                    "valueTypeId": 197
                  }
                },
                "default": "0x00",
                "docs": [
                  " The super-identity of an alternative \"sub\" identity together with its name, within that",
                  " context. If the account is not some other account's sub-identity, then just `None`."
                ]
              },
              {
                "name": "SubsOf",
                "modifier": "Default",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 0,
                    "valueTypeId": 599
                  }
                },
                "default": "0x0000000000000000000000000000000000",
                "docs": [
                  " Alternative \"sub\" identities of this account.",
                  "",
                  " The first item is the deposit, the second is a vector of the accounts.",
                  "",
                  " TWOX-NOTE: OK ― `AccountId` is a secure hash."
                ]
              },
              {
                "name": "Registrars",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 601
                  }
                },
                "default": "0x00",
                "docs": [
                  " The set of registrars. Not expected to get very big as can only be added through a",
                  " special origin (likely a council motion).",
                  "",
                  " The index into this can be cast to `RegistrarIndex` to get a valid value."
                ]
              }
            ]
          },
          "calls": 160,
          "event": 425,
          "constants": [
            {
              "name": "BasicDeposit",
              "typeId": 6,
              "value": "0x007db52a2f0000000000000000000000",
              "docs": [" The amount held on deposit for a registered identity"]
            },
            {
              "name": "FieldDeposit",
              "typeId": 6,
              "value": "0x00cd5627000000000000000000000000",
              "docs": [" The amount held on deposit per additional field for a registered identity."]
            },
            {
              "name": "SubAccountDeposit",
              "typeId": 6,
              "value": "0x80f884b02e0000000000000000000000",
              "docs": [
                " The amount held on deposit for a registered subaccount. This should account for the fact",
                " that one storage item's value will increase by the size of an account ID, and there will",
                " be another trie item whose value is the size of an account ID plus 32 bytes."
              ]
            },
            {
              "name": "MaxSubAccounts",
              "typeId": 4,
              "value": "0x64000000",
              "docs": [" The maximum number of sub-accounts allowed per identified account."]
            },
            {
              "name": "MaxAdditionalFields",
              "typeId": 4,
              "value": "0x64000000",
              "docs": [
                " Maximum number of additional fields that may be stored in an ID. Needed to bound the I/O",
                " required to access an identity, but can be pretty high."
              ]
            },
            {
              "name": "MaxRegistrars",
              "typeId": 4,
              "value": "0x14000000",
              "docs": [
                " Maxmimum number of registrars allowed in the system. Needed to bound the complexity",
                " of, e.g., updating judgements."
              ]
            }
          ],
          "error": 605,
          "index": 28,
          "docs": []
        },
        {
          "name": "Proxy",
          "storage": {
            "prefix": "Proxy",
            "entries": [
              {
                "name": "Proxies",
                "modifier": "Default",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 0,
                    "valueTypeId": 606
                  }
                },
                "default": "0x0000000000000000000000000000000000",
                "docs": [
                  " The set of account proxies. Maps the account which has delegated to the accounts",
                  " which are being delegated to, together with the amount held on deposit."
                ]
              },
              {
                "name": "Announcements",
                "modifier": "Default",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 0,
                    "valueTypeId": 610
                  }
                },
                "default": "0x0000000000000000000000000000000000",
                "docs": [" The announcements made by the proxy (key)."]
              }
            ]
          },
          "calls": 201,
          "event": 426,
          "constants": [
            {
              "name": "ProxyDepositBase",
              "typeId": 6,
              "value": "0x0084b2952e0000000000000000000000",
              "docs": [
                " The base amount of currency needed to reserve for creating a proxy.",
                "",
                " This is held for an additional storage item whose value size is",
                " `sizeof(Balance)` bytes and whose key size is `sizeof(AccountId)` bytes."
              ]
            },
            {
              "name": "ProxyDepositFactor",
              "typeId": 6,
              "value": "0x8066ab13000000000000000000000000",
              "docs": [
                " The amount of currency needed per proxy added.",
                "",
                " This is held for adding 32 bytes plus an instance of `ProxyType` more into a",
                " pre-existing storage value. Thus, when configuring `ProxyDepositFactor` one should take",
                " into account `32 + proxy_type.encode().len()` bytes of data."
              ]
            },
            {
              "name": "MaxProxies",
              "typeId": 4,
              "value": "0x20000000",
              "docs": [" The maximum amount of proxies allowed for a single account."]
            },
            {
              "name": "MaxPending",
              "typeId": 4,
              "value": "0x20000000",
              "docs": [" The maximum amount of time-delayed announcements that are allowed to be pending."]
            },
            {
              "name": "AnnouncementDepositBase",
              "typeId": 6,
              "value": "0x0084b2952e0000000000000000000000",
              "docs": [
                " The base amount of currency needed to reserve for creating an announcement.",
                "",
                " This is held when a new storage item holding a `Balance` is created (typically 16",
                " bytes)."
              ]
            },
            {
              "name": "AnnouncementDepositFactor",
              "typeId": 6,
              "value": "0x00cd5627000000000000000000000000",
              "docs": [
                " The amount of currency needed per announcement made.",
                "",
                " This is held for adding an `AccountId`, `Hash` and `BlockNumber` (typically 68 bytes)",
                " into a pre-existing storage value."
              ]
            }
          ],
          "error": 614,
          "index": 29,
          "docs": []
        },
        {
          "name": "Multisig",
          "storage": {
            "prefix": "Multisig",
            "entries": [
              {
                "name": "Multisigs",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat", "blake2_128Concat"],
                    "keyTypeId": 615,
                    "valueTypeId": 616
                  }
                },
                "default": "0x00",
                "docs": [" The set of open multisig operations."]
              }
            ]
          },
          "calls": 204,
          "event": 427,
          "constants": [
            {
              "name": "DepositBase",
              "typeId": 6,
              "value": "0x008c61c52e0000000000000000000000",
              "docs": [
                " The base amount of currency needed to reserve for creating a multisig execution or to",
                " store a dispatch call for later.",
                "",
                " This is held for an additional storage item whose value size is",
                " `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is",
                " `32 + sizeof(AccountId)` bytes."
              ]
            },
            {
              "name": "DepositFactor",
              "typeId": 6,
              "value": "0x00d01213000000000000000000000000",
              "docs": [
                " The amount of currency needed per unit threshold when creating a multisig execution.",
                "",
                " This is held for adding 32 bytes more into a pre-existing storage value."
              ]
            },
            {
              "name": "MaxSignatories",
              "typeId": 4,
              "value": "0x64000000",
              "docs": [" The maximum amount of signatories allowed in the multisig."]
            }
          ],
          "error": 618,
          "index": 30,
          "docs": []
        },
        {
          "name": "Bounties",
          "storage": {
            "prefix": "Bounties",
            "entries": [
              {
                "name": "BountyCount",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": [" Number of bounty proposals that have been made."]
              },
              {
                "name": "Bounties",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 4,
                    "valueTypeId": 619
                  }
                },
                "default": "0x00",
                "docs": [" Bounties that have been made."]
              },
              {
                "name": "BountyDescriptions",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 4,
                    "valueTypeId": 621
                  }
                },
                "default": "0x00",
                "docs": [" The description of each bounty."]
              },
              {
                "name": "BountyApprovals",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 552
                  }
                },
                "default": "0x00",
                "docs": [" Bounty indices that have been approved but not yet funded."]
              }
            ]
          },
          "calls": 207,
          "event": 428,
          "constants": [
            {
              "name": "BountyDepositBase",
              "typeId": 6,
              "value": "0x00e40b54020000000000000000000000",
              "docs": [" The amount held on deposit for placing a bounty proposal."]
            },
            {
              "name": "BountyDepositPayoutDelay",
              "typeId": 4,
              "value": "0x00c20100",
              "docs": [" The delay period for which a bounty beneficiary need to wait before claim the payout."]
            },
            {
              "name": "BountyUpdatePeriod",
              "typeId": 4,
              "value": "0x80c61300",
              "docs": [" Bounty duration in blocks."]
            },
            {
              "name": "CuratorDepositMultiplier",
              "typeId": 553,
              "value": "0x20a10700",
              "docs": [
                " The curator deposit is calculated as a percentage of the curator fee.",
                "",
                " This deposit has optional upper and lower bounds with `CuratorDepositMax` and",
                " `CuratorDepositMin`."
              ]
            },
            {
              "name": "CuratorDepositMax",
              "typeId": 554,
              "value": "0x0100204aa9d10100000000000000000000",
              "docs": [" Maximum amount of funds that should be placed in a deposit for making a proposal."]
            },
            {
              "name": "CuratorDepositMin",
              "typeId": 554,
              "value": "0x0100e87648170000000000000000000000",
              "docs": [" Minimum amount of funds that should be placed in a deposit for making a proposal."]
            },
            {
              "name": "BountyValueMinimum",
              "typeId": 6,
              "value": "0x00e87648170000000000000000000000",
              "docs": [" Minimum value for a bounty."]
            },
            {
              "name": "DataDepositPerByte",
              "typeId": 6,
              "value": "0x00e1f505000000000000000000000000",
              "docs": [" The amount held on deposit per byte within the tip report reason or bounty description."]
            },
            {
              "name": "MaximumReasonLength",
              "typeId": 4,
              "value": "0x00400000",
              "docs": [
                " Maximum acceptable reason length.",
                "",
                " Benchmarks depend on this value, be sure to update weights file when changing this value"
              ]
            }
          ],
          "error": 622,
          "index": 34,
          "docs": []
        },
        {
          "name": "ChildBounties",
          "storage": {
            "prefix": "ChildBounties",
            "entries": [
              {
                "name": "ChildBountyCount",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": [" Number of total child bounties."]
              },
              {
                "name": "ParentChildBounties",
                "modifier": "Default",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 4,
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  " Number of child bounties per parent bounty.",
                  " Map of parent bounty index to number of child bounties."
                ]
              },
              {
                "name": "ChildBounties",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat", "twox64Concat"],
                    "keyTypeId": 31,
                    "valueTypeId": 623
                  }
                },
                "default": "0x00",
                "docs": [" Child bounties that have been added."]
              },
              {
                "name": "ChildBountyDescriptions",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 4,
                    "valueTypeId": 621
                  }
                },
                "default": "0x00",
                "docs": [" The description of each child-bounty."]
              },
              {
                "name": "ChildrenCuratorFees",
                "modifier": "Default",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 4,
                    "valueTypeId": 6
                  }
                },
                "default": "0x00000000000000000000000000000000",
                "docs": [" The cumulative child-bounty curator fee for each parent bounty."]
              }
            ]
          },
          "calls": 208,
          "event": 429,
          "constants": [
            {
              "name": "MaxActiveChildBountyCount",
              "typeId": 4,
              "value": "0x64000000",
              "docs": [" Maximum number of child bounties that can be added to a parent bounty."]
            },
            {
              "name": "ChildBountyValueMinimum",
              "typeId": 6,
              "value": "0x00e40b54020000000000000000000000",
              "docs": [" Minimum value for a child-bounty."]
            }
          ],
          "error": 625,
          "index": 38,
          "docs": []
        },
        {
          "name": "ElectionProviderMultiPhase",
          "storage": {
            "prefix": "ElectionProviderMultiPhase",
            "entries": [
              {
                "name": "Round",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x01000000",
                "docs": [
                  " Internal counter for the number of rounds.",
                  "",
                  " This is useful for de-duplication of transactions submitted to the pool, and general",
                  " diagnostics of the pallet.",
                  "",
                  " This is merely incremented once per every time that an upstream `elect` is called."
                ]
              },
              {
                "name": "CurrentPhase",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 432
                  }
                },
                "default": "0x00",
                "docs": [" Current phase."]
              },
              {
                "name": "QueuedSolution",
                "modifier": "Optional",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 626
                  }
                },
                "default": "0x00",
                "docs": [
                  " Current best solution, signed or unsigned, queued to be returned upon `elect`.",
                  "",
                  " Always sorted by score."
                ]
              },
              {
                "name": "Snapshot",
                "modifier": "Optional",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 628
                  }
                },
                "default": "0x00",
                "docs": [
                  " Snapshot data of the round.",
                  "",
                  " This is created at the beginning of the signed phase and cleared upon calling `elect`."
                ]
              },
              {
                "name": "DesiredTargets",
                "modifier": "Optional",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00",
                "docs": [
                  " Desired number of targets to elect for this round.",
                  "",
                  " Only exists when [`Snapshot`] is present."
                ]
              },
              {
                "name": "SnapshotMetadata",
                "modifier": "Optional",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 263
                  }
                },
                "default": "0x00",
                "docs": [" The metadata of the [`RoundSnapshot`]", "", " Only exists when [`Snapshot`] is present."]
              },
              {
                "name": "SignedSubmissionNextIndex",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  " The next index to be assigned to an incoming signed submission.",
                  "",
                  " Every accepted submission is assigned a unique index; that index is bound to that particular",
                  " submission for the duration of the election. On election finalization, the next index is",
                  " reset to 0.",
                  "",
                  " We can't just use `SignedSubmissionIndices.len()`, because that's a bounded set; past its",
                  " capacity, it will simply saturate. We can't just iterate over `SignedSubmissionsMap`,",
                  " because iteration is slow. Instead, we store the value here."
                ]
              },
              {
                "name": "SignedSubmissionIndices",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 631
                  }
                },
                "default": "0x00",
                "docs": [
                  " A sorted, bounded vector of `(score, block_number, index)`, where each `index` points to a",
                  " value in `SignedSubmissions`.",
                  "",
                  " We never need to process more than a single signed submission at a time. Signed submissions",
                  " can be quite large, so we're willing to pay the cost of multiple database accesses to access",
                  " them one at a time instead of reading and decoding all of them at once."
                ]
              },
              {
                "name": "SignedSubmissionsMap",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 4,
                    "valueTypeId": 634
                  }
                },
                "default": "0x00",
                "docs": [
                  " Unchecked, signed solutions.",
                  "",
                  " Together with `SubmissionIndices`, this stores a bounded set of `SignedSubmissions` while",
                  " allowing us to keep only a single one in memory at a time.",
                  "",
                  " Twox note: the key of the map is an auto-incrementing index which users cannot inspect or",
                  " affect; we shouldn't need a cryptographically secure hasher."
                ]
              },
              {
                "name": "MinimumUntrustedScore",
                "modifier": "Optional",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 262
                  }
                },
                "default": "0x00",
                "docs": [
                  " The minimum score that each 'untrusted' solution must attain in order to be considered",
                  " feasible.",
                  "",
                  " Can be set via `set_minimum_untrusted_score`."
                ]
              }
            ]
          },
          "calls": 209,
          "event": 430,
          "constants": [
            {
              "name": "UnsignedPhase",
              "typeId": 4,
              "value": "0x58020000",
              "docs": [" Duration of the unsigned phase."]
            },
            {
              "name": "SignedPhase",
              "typeId": 4,
              "value": "0x58020000",
              "docs": [" Duration of the signed phase."]
            },
            {
              "name": "BetterSignedThreshold",
              "typeId": 41,
              "value": "0x00000000",
              "docs": [
                " The minimum amount of improvement to the solution score that defines a solution as",
                " \"better\" in the Signed phase."
              ]
            },
            {
              "name": "BetterUnsignedThreshold",
              "typeId": 41,
              "value": "0x20a10700",
              "docs": [
                " The minimum amount of improvement to the solution score that defines a solution as",
                " \"better\" in the Unsigned phase."
              ]
            },
            {
              "name": "OffchainRepeat",
              "typeId": 4,
              "value": "0x12000000",
              "docs": [
                " The repeat threshold of the offchain worker.",
                "",
                " For example, if it is 5, that means that at least 5 blocks will elapse between attempts",
                " to submit the worker's solution."
              ]
            },
            {
              "name": "MinerTxPriority",
              "typeId": 11,
              "value": "0x65666666666666e6",
              "docs": [" The priority of the unsigned transaction submitted in the unsigned-phase"]
            },
            {
              "name": "SignedMaxSubmissions",
              "typeId": 4,
              "value": "0x10000000",
              "docs": [
                " Maximum number of signed submissions that can be queued.",
                "",
                " It is best to avoid adjusting this during an election, as it impacts downstream data",
                " structures. In particular, `SignedSubmissionIndices<T>` is bounded on this value. If you",
                " update this value during an election, you _must_ ensure that",
                " `SignedSubmissionIndices.len()` is less than or equal to the new value. Otherwise,",
                " attempts to submit new solutions may cause a runtime panic."
              ]
            },
            {
              "name": "SignedMaxWeight",
              "typeId": 9,
              "value": "0x0b08c77258550113a3703d0ad7a370bd",
              "docs": [
                " Maximum weight of a signed solution.",
                "",
                " If [`Config::MinerConfig`] is being implemented to submit signed solutions (outside of",
                " this pallet), then [`MinerConfig::solution_weight`] is used to compare against",
                " this value."
              ]
            },
            {
              "name": "SignedMaxRefunds",
              "typeId": 4,
              "value": "0x04000000",
              "docs": [" The maximum amount of unchecked solutions to refund the call fee for."]
            },
            {
              "name": "SignedRewardBase",
              "typeId": 6,
              "value": "0x00e40b54020000000000000000000000",
              "docs": [" Base reward for a signed solution"]
            },
            {
              "name": "SignedDepositBase",
              "typeId": 6,
              "value": "0x00a0db215d0000000000000000000000",
              "docs": [" Base deposit for a signed solution."]
            },
            {
              "name": "SignedDepositByte",
              "typeId": 6,
              "value": "0x787d0100000000000000000000000000",
              "docs": [" Per-byte deposit for a signed solution."]
            },
            {
              "name": "SignedDepositWeight",
              "typeId": 6,
              "value": "0x00000000000000000000000000000000",
              "docs": [" Per-weight deposit for a signed solution."]
            },
            {
              "name": "MaxWinners",
              "typeId": 4,
              "value": "0xb0040000",
              "docs": [
                " The maximum number of winners that can be elected by this `ElectionProvider`",
                " implementation.",
                "",
                " Note: This must always be greater or equal to `T::DataProvider::desired_targets()`."
              ]
            },
            {
              "name": "MinerMaxLength",
              "typeId": 4,
              "value": "0x00003600",
              "docs": []
            },
            {
              "name": "MinerMaxWeight",
              "typeId": 9,
              "value": "0x0b08c77258550113a3703d0ad7a370bd",
              "docs": []
            },
            {
              "name": "MinerMaxVotesPerVoter",
              "typeId": 4,
              "value": "0x10000000",
              "docs": []
            },
            {
              "name": "MinerMaxWinners",
              "typeId": 4,
              "value": "0xb0040000",
              "docs": []
            }
          ],
          "error": 635,
          "index": 36,
          "docs": []
        },
        {
          "name": "VoterList",
          "storage": {
            "prefix": "VoterList",
            "entries": [
              {
                "name": "ListNodes",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 0,
                    "valueTypeId": 636
                  }
                },
                "default": "0x00",
                "docs": [
                  " A single node, within some bag.",
                  "",
                  " Nodes store links forward and back within their respective bags."
                ]
              },
              {
                "name": "CounterForListNodes",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": ["Counter for the related counted storage map"]
              },
              {
                "name": "ListBags",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 11,
                    "valueTypeId": 637
                  }
                },
                "default": "0x00",
                "docs": [
                  " A bag stored in storage.",
                  "",
                  " Stores a `Bag` struct, which stores head and tail pointers to itself."
                ]
              }
            ]
          },
          "calls": 271,
          "event": 434,
          "constants": [
            {
              "name": "BagThresholds",
              "typeId": 638,
              "value": "0x210300e40b5402000000f39e809702000000a8b197e20200000094492e3603000000279c3a930300000003bccefa0300000042c01b6e040000001b4775ee04000000385e557d0500000046dc601c0600000089386ccd06000000b6ee809207000000fe7ee36d08000000e81b1a6209000000b019f4710a000000103592a00b000000cfc96ff10c00000041146d680e000000e79bda0910000000cee885da1100000028a9c7df13000000bb70931f160000008e4089a018000000810a096a1b000000366a48841e0000005bd36af821000000807c9cd025000000c95530182a000000bd63c1db2e00000071e0572934000000689092103a000000edc4d4a240000000699379f3470000008fd80c18500000004baf8a28590000006a16a63f630000000995177b6e00000078c5f4fb7a00000062c811e78800000051bf6d6598000000048eaba4a9000000544698d7bc00000091cac036d2000000175f1801ea000000bd15b27c0401000043358ff721010000b8fc84c84201000099673c506701000007e44efa8f010000b341833ebd010000027f2ea2ef0100009883bcb927020000164d652a66020000b49513acab0200002d8e820bf9020000a1e6982c4f030000a616080daf030000cc9d37c719040000a0d584959004000042e7e0d514050000028cd70da80500000f750aef4b060000ea8d2e5c02070000c3cb996ecd070000b1e5717caf080000aa2b8e1fab090000b5c1203dc30a000026d03d0efb0b000070c75929560d0000ebadda8cd80e0000f797dbaa86100000cff04476651200001f2660717a14000009a611becb1600001dfbe82f60190000943a3c603f1c00008afe89c4711f0000ced963c70023000003a92ae4f6260000fe72eec55f2b000036c9cc6948300000dae33245bf350000062a7470d43b00007c9732d69942000084a32468234a0000571ad45987520000e7f10262de5b00000db8760344660000ae0401ded67100007d9eb308b97e00001e044a76108d00003a1df064079d0000e04fafdaccae00005679f02f95c2000095c3aaa99ad80000967c05251ef10000177a66d6670c010028cb1f1ec82a0100fa282f75984c0100d57dc8743c7201007dc4b3fb229c0100365cde74c7ca01009eb8e142b3fe01000c31ae547f3802005fe101e8d57802006373da7e74c0020051d1a60d2e100300c7e9a468ed68030061c091f7b7cb0300bf27a1b7b03904007b1499941bb404008523ed22613c050069a5d4c512d40500ec8c934def7c0600f5aa901be83807008cbe5ddb260a080002978ce113f30800fae314435df60900ddf12dbafe160b002ebadc6f4a580c000c5518c4f2bd0d00f0bb5431154c0f00498e866b46071100b2c153de9ff41200278a2fb2ce191500b2399f84247d1700e199e704aa251a00ba13f5ab331b1d00264785cc7866200088bf803f2d1124001c9823f81d262800ccc422d450b12c00f088820528c03100367c6d7e896137006e9329d30aa63d008cbc6c1322a044000070f32a5c644c00b43b84699909550080b4abe450a95e00a0cda979db5f69004cc27f4cc74c7500d0ac0eba34938200483e0ccf3d5a910068c68e7469cda100281e6fa52b1db40098a92326747fc800f09a74634d30df0080cdfc4b8d72f8009014602d9a901401f0b413d945dd330120973596c1b4560150dcfbaead7d7d01e01198b947aaa80130c7ee16bbb9d801206e488697390e02a0fa4b1d72c74902c0117170b5128c02808a1643a6ded502c0f823b1a204280380af5970a2768303c06f2d87ff41e90340937fac8f925a040091097117b6d804400fdf5b212065050049c149446e0106008ebca6e56caf0600595686851c71078068aa34a4b7480880a1e29e52b9380900bdabe880e4430a002a72b4204c6d0b80f1c013335cb80c00a03ccbdce3280e80b8629a9e20c30f00de5693d2ca8b11005d7f4c93238813001a87df3504be1500a7ce4b84ef3318000110fbea24f11a00802ae5d1b5fd1d0022a134609d62210044216bf0da2925000261f1828f5e29006620cf851e0d2e008410195252433300a0c18fca8410390026ad1493cc853f00d0cd24662fb646009ce19a1cdab64e0058ccc20c5f9f5700200a7578fb89610030bbbbd6e4936c0060cba7dc9edd7800b83bc0425b8b8600b886236164c59500f8f15fdc93b8a600206a91c0d696b900d8efe28fc097ce0068299bf52ef9e5ffffffffffffffff",
              "docs": [
                " The list of thresholds separating the various bags.",
                "",
                " Ids are separated into unsorted bags according to their score. This specifies the",
                " thresholds separating the bags. An id's bag is the largest bag for which the id's score",
                " is less than or equal to its upper threshold.",
                "",
                " When ids are iterated, higher bags are iterated completely before lower bags. This means",
                " that iteration is _semi-sorted_: ids of higher score tend to come before ids of lower",
                " score, but peer ids within a particular bag are sorted in insertion order.",
                "",
                " # Expressing the constant",
                "",
                " This constant must be sorted in strictly increasing order. Duplicate items are not",
                " permitted.",
                "",
                " There is an implied upper limit of `Score::MAX`; that value does not need to be",
                " specified within the bag. For any two threshold lists, if one ends with",
                " `Score::MAX`, the other one does not, and they are otherwise equal, the two",
                " lists will behave identically.",
                "",
                " # Calculation",
                "",
                " It is recommended to generate the set of thresholds in a geometric series, such that",
                " there exists some constant ratio such that `threshold[k + 1] == (threshold[k] *",
                " constant_ratio).max(threshold[k] + 1)` for all `k`.",
                "",
                " The helpers in the `/utils/frame/generate-bags` module can simplify this calculation.",
                "",
                " # Examples",
                "",
                " - If `BagThresholds::get().is_empty()`, then all ids are put into the same bag, and",
                "   iteration is strictly in insertion order.",
                " - If `BagThresholds::get().len() == 64`, and the thresholds are determined according to",
                "   the procedure given above, then the constant ratio is equal to 2.",
                " - If `BagThresholds::get().len() == 200`, and the thresholds are determined according to",
                "   the procedure given above, then the constant ratio is approximately equal to 1.248.",
                " - If the threshold list begins `[1, 2, 3, ...]`, then an id with score 0 or 1 will fall",
                "   into bag 0, an id with score 2 will fall into bag 1, etc.",
                "",
                " # Migration",
                "",
                " In the event that this list ever changes, a copy of the old bags list must be retained.",
                " With that `List::migrate` can be called, which will perform the appropriate migration."
              ]
            }
          ],
          "error": 639,
          "index": 37,
          "docs": []
        },
        {
          "name": "NominationPools",
          "storage": {
            "prefix": "NominationPools",
            "entries": [
              {
                "name": "MinJoinBond",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 6
                  }
                },
                "default": "0x00000000000000000000000000000000",
                "docs": [" Minimum amount to bond to join a pool."]
              },
              {
                "name": "MinCreateBond",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 6
                  }
                },
                "default": "0x00000000000000000000000000000000",
                "docs": [
                  " Minimum bond required to create a pool.",
                  "",
                  " This is the amount that the depositor must put as their initial stake in the pool, as an",
                  " indication of \"skin in the game\".",
                  "",
                  " This is the value that will always exist in the staking ledger of the pool bonded account",
                  " while all other accounts leave."
                ]
              },
              {
                "name": "MaxPools",
                "modifier": "Optional",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00",
                "docs": [
                  " Maximum number of nomination pools that can exist. If `None`, then an unbounded number of",
                  " pools can exist."
                ]
              },
              {
                "name": "MaxPoolMembers",
                "modifier": "Optional",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00",
                "docs": [
                  " Maximum number of members that can exist in the system. If `None`, then the count",
                  " members are not bound on a system wide basis."
                ]
              },
              {
                "name": "MaxPoolMembersPerPool",
                "modifier": "Optional",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00",
                "docs": [
                  " Maximum number of members that may belong to pool. If `None`, then the count of",
                  " members is not bound on a per pool basis."
                ]
              },
              {
                "name": "GlobalMaxCommission",
                "modifier": "Optional",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 41
                  }
                },
                "default": "0x00",
                "docs": [
                  " The maximum commission that can be charged by a pool. Used on commission payouts to bound",
                  " pool commissions that are > `GlobalMaxCommission`, necessary if a future",
                  " `GlobalMaxCommission` is lower than some current pool commissions."
                ]
              },
              {
                "name": "PoolMembers",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 0,
                    "valueTypeId": 641
                  }
                },
                "default": "0x00",
                "docs": [" Active members.", "", " TWOX-NOTE: SAFE since `AccountId` is a secure hash."]
              },
              {
                "name": "CounterForPoolMembers",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": ["Counter for the related counted storage map"]
              },
              {
                "name": "BondedPools",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 4,
                    "valueTypeId": 644
                  }
                },
                "default": "0x00",
                "docs": [" Storage for bonded pools."]
              },
              {
                "name": "CounterForBondedPools",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": ["Counter for the related counted storage map"]
              },
              {
                "name": "RewardPools",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 4,
                    "valueTypeId": 649
                  }
                },
                "default": "0x00",
                "docs": [
                  " Reward pools. This is where there rewards for each pool accumulate. When a members payout is",
                  " claimed, the balance comes out fo the reward pool. Keyed by the bonded pools account."
                ]
              },
              {
                "name": "CounterForRewardPools",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": ["Counter for the related counted storage map"]
              },
              {
                "name": "SubPoolsStorage",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 4,
                    "valueTypeId": 650
                  }
                },
                "default": "0x00",
                "docs": [
                  " Groups of unbonding pools. Each group of unbonding pools belongs to a",
                  " bonded pool, hence the name sub-pools. Keyed by the bonded pools account."
                ]
              },
              {
                "name": "CounterForSubPoolsStorage",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": ["Counter for the related counted storage map"]
              },
              {
                "name": "Metadata",
                "modifier": "Default",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 4,
                    "valueTypeId": 656
                  }
                },
                "default": "0x00",
                "docs": [" Metadata for the pool."]
              },
              {
                "name": "CounterForMetadata",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": ["Counter for the related counted storage map"]
              },
              {
                "name": "LastPoolId",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": [" Ever increasing number of all pools created so far."]
              },
              {
                "name": "ReversePoolIdLookup",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 0,
                    "valueTypeId": 4
                  }
                },
                "default": "0x00",
                "docs": [
                  " A reverse lookup from the pool's account id to its id.",
                  "",
                  " This is only used for slashing. In all other instances, the pool id is used, and the",
                  " accounts are deterministically derived from it."
                ]
              },
              {
                "name": "CounterForReversePoolIdLookup",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": ["Counter for the related counted storage map"]
              },
              {
                "name": "ClaimPermissions",
                "modifier": "Default",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 0,
                    "valueTypeId": 279
                  }
                },
                "default": "0x00",
                "docs": [" Map from a pool member account to their opted claim permission."]
              }
            ]
          },
          "calls": 272,
          "event": 435,
          "constants": [
            {
              "name": "PalletId",
              "typeId": 555,
              "value": "0x70792f6e6f706c73",
              "docs": [" The nomination pool's pallet id."]
            },
            {
              "name": "MaxPointsToBalance",
              "typeId": 2,
              "value": "0x0a",
              "docs": [
                " The maximum pool points-to-balance ratio that an `open` pool can have.",
                "",
                " This is important in the event slashing takes place and the pool's points-to-balance",
                " ratio becomes disproportional.",
                "",
                " Moreover, this relates to the `RewardCounter` type as well, as the arithmetic operations",
                " are a function of number of points, and by setting this value to e.g. 10, you ensure",
                " that the total number of points in the system are at most 10 times the total_issuance of",
                " the chain, in the absolute worse case.",
                "",
                " For a value of 10, the threshold would be a pool points-to-balance ratio of 10:1.",
                " Such a scenario would also be the equivalent of the pool being 90% slashed."
              ]
            }
          ],
          "error": 657,
          "index": 39,
          "docs": []
        },
        {
          "name": "FastUnstake",
          "storage": {
            "prefix": "FastUnstake",
            "entries": [
              {
                "name": "Head",
                "modifier": "Optional",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 659
                  }
                },
                "default": "0x00",
                "docs": [
                  " The current \"head of the queue\" being unstaked.",
                  "",
                  " The head in itself can be a batch of up to [`Config::BatchSize`] stakers."
                ]
              },
              {
                "name": "Queue",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 0,
                    "valueTypeId": 6
                  }
                },
                "default": "0x00",
                "docs": [
                  " The map of all accounts wishing to be unstaked.",
                  "",
                  " Keeps track of `AccountId` wishing to unstake and it's corresponding deposit."
                ]
              },
              {
                "name": "CounterForQueue",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": ["Counter for the related counted storage map"]
              },
              {
                "name": "ErasToCheckPerBlock",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  " Number of eras to check per block.",
                  "",
                  " If set to 0, this pallet does absolutely nothing. Cannot be set to more than",
                  " [`Config::MaxErasToCheckPerBlock`].",
                  "",
                  " Based on the amount of weight available at [`Pallet::on_idle`], up to this many eras are",
                  " checked. The checking is represented by updating [`UnstakeRequest::checked`], which is",
                  " stored in [`Head`]."
                ]
              }
            ]
          },
          "calls": 283,
          "event": 436,
          "constants": [
            {
              "name": "Deposit",
              "typeId": 6,
              "value": "0x00e40b54020000000000000000000000",
              "docs": [
                " Deposit to take for unstaking, to make sure we're able to slash the it in order to cover",
                " the costs of resources on unsuccessful unstake."
              ]
            }
          ],
          "error": 662,
          "index": 40,
          "docs": []
        },
        {
          "name": "ParachainsOrigin",
          "constants": [],
          "index": 50,
          "docs": [
            " There is no way to register an origin type in `construct_runtime` without a pallet the origin",
            " belongs to.",
            "",
            " This module fulfills only the single purpose of housing the `Origin` in `construct_runtime`."
          ]
        },
        {
          "name": "Configuration",
          "storage": {
            "prefix": "Configuration",
            "entries": [
              {
                "name": "ActiveConfig",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 663
                  }
                },
                "default": "0x0000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001027000080b2e60e80c3c9018096980000000000000000000000000005000000010000000100000001000000000006000000640000000100000000000000000000000000000000000000020000000200000002000000",
                "docs": [" The active configuration for the current session."]
              },
              {
                "name": "PendingConfigs",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 664
                  }
                },
                "default": "0x00",
                "docs": [
                  " Pending configuration changes.",
                  "",
                  " This is a list of configuration changes, each with a session index at which it should",
                  " be applied.",
                  "",
                  " The list is sorted ascending by session index. Also, this list can only contain at most",
                  " 2 items: for the next session and for the `scheduled_session`."
                ]
              },
              {
                "name": "BypassConsistencyCheck",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 44
                  }
                },
                "default": "0x00",
                "docs": [
                  " If this is set, then the configuration setters will bypass the consistency checks. This",
                  " is meant to be used only as the last resort."
                ]
              }
            ]
          },
          "calls": 284,
          "constants": [],
          "error": 666,
          "index": 51,
          "docs": []
        },
        {
          "name": "ParasShared",
          "storage": {
            "prefix": "ParasShared",
            "entries": [
              {
                "name": "CurrentSessionIndex",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": [" The current session index."]
              },
              {
                "name": "ActiveValidatorIndices",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 667
                  }
                },
                "default": "0x00",
                "docs": [
                  " All the validators actively participating in parachain consensus.",
                  " Indices are into the broader validator set."
                ]
              },
              {
                "name": "ActiveValidatorKeys",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 668
                  }
                },
                "default": "0x00",
                "docs": [
                  " The parachain attestation keys of the validators actively participating in parachain",
                  " consensus. This should be the same length as `ActiveValidatorIndices`."
                ]
              },
              {
                "name": "AllowedRelayParents",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 669
                  }
                },
                "default": "0x0000000000",
                "docs": [" All allowed relay-parents."]
              }
            ]
          },
          "calls": 291,
          "constants": [],
          "index": 52,
          "docs": []
        },
        {
          "name": "ParaInclusion",
          "storage": {
            "prefix": "ParaInclusion",
            "entries": [
              {
                "name": "AvailabilityBitfields",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 300,
                    "valueTypeId": 672
                  }
                },
                "default": "0x00",
                "docs": [" The latest bitfield for each validator, referred to by their index in the validator set."]
              },
              {
                "name": "PendingAvailability",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 134,
                    "valueTypeId": 673
                  }
                },
                "default": "0x00",
                "docs": [" Candidates pending availability by `ParaId`."]
              },
              {
                "name": "PendingAvailabilityCommitments",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 134,
                    "valueTypeId": 309
                  }
                },
                "default": "0x00",
                "docs": [" The commitments of candidates pending availability, by `ParaId`."]
              }
            ]
          },
          "calls": 292,
          "event": 437,
          "constants": [],
          "error": 674,
          "index": 53,
          "docs": []
        },
        {
          "name": "ParaInherent",
          "storage": {
            "prefix": "ParaInherent",
            "entries": [
              {
                "name": "Included",
                "modifier": "Optional",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 34
                  }
                },
                "default": "0x00",
                "docs": [
                  " Whether the paras inherent was included within this block.",
                  "",
                  " The `Option<()>` is effectively a `bool`, but it never hits storage in the `None` variant",
                  " due to the guarantees of FRAME's storage APIs.",
                  "",
                  " If this is `None` at the end of the block, we panic and render the block invalid."
                ]
              },
              {
                "name": "OnChainVotes",
                "modifier": "Optional",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 675
                  }
                },
                "default": "0x00",
                "docs": [" Scraped on chain data for extracting resolved disputes as well as backing votes."]
              }
            ]
          },
          "calls": 293,
          "constants": [],
          "error": 680,
          "index": 54,
          "docs": []
        },
        {
          "name": "ParaScheduler",
          "storage": {
            "prefix": "ParaScheduler",
            "entries": [
              {
                "name": "ValidatorGroups",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 681
                  }
                },
                "default": "0x00",
                "docs": [
                  " All the validator groups. One for each core. Indices are into `ActiveValidators` - not the",
                  " broader set of Polkadot validators, but instead just the subset used for parachains during",
                  " this session.",
                  "",
                  " Bound: The number of cores is the sum of the numbers of parachains and parathread",
                  " multiplexers. Reasonably, 100-1000. The dominant factor is the number of validators: safe",
                  " upper bound at 10k."
                ]
              },
              {
                "name": "AvailabilityCores",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 682
                  }
                },
                "default": "0x00",
                "docs": [
                  " One entry for each availability core. Entries are `None` if the core is not currently",
                  " occupied. Can be temporarily `Some` if scheduled but not occupied.",
                  " The i'th parachain belongs to the i'th core, with the remaining cores all being",
                  " parathread-multiplexers.",
                  "",
                  " Bounded by the maximum of either of these two values:",
                  "   * The number of parachains and parathread multiplexers",
                  "   * The number of validators divided by `configuration.max_validators_per_core`."
                ]
              },
              {
                "name": "SessionStartBlock",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  " The block number where the session start occurred. Used to track how many group rotations",
                  " have occurred.",
                  "",
                  " Note that in the context of parachains modules the session change is signaled during",
                  " the block and enacted at the end of the block (at the finalization stage, to be exact).",
                  " Thus for all intents and purposes the effect of the session change is observed at the",
                  " block following the session change, block number of which we save in this storage value."
                ]
              },
              {
                "name": "ClaimQueue",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 686
                  }
                },
                "default": "0x00",
                "docs": [
                  " One entry for each availability core. The `VecDeque` represents the assignments to be",
                  " scheduled on that core. `None` is used to signal to not schedule the next para of the core",
                  " as there is one currently being scheduled. Not using `None` here would overwrite the",
                  " `CoreState` in the runtime API. The value contained here will not be valid after the end of",
                  " a block. Runtime APIs should be used to determine scheduled cores/ for the upcoming block."
                ]
              }
            ]
          },
          "constants": [],
          "index": 55,
          "docs": []
        },
        {
          "name": "Paras",
          "storage": {
            "prefix": "Paras",
            "entries": [
              {
                "name": "PvfActiveVoteMap",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 308,
                    "valueTypeId": 691
                  }
                },
                "default": "0x00",
                "docs": [
                  " All currently active PVF pre-checking votes.",
                  "",
                  " Invariant:",
                  " - There are no PVF pre-checking votes that exists in list but not in the set and vice versa."
                ]
              },
              {
                "name": "PvfActiveVoteList",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 694
                  }
                },
                "default": "0x00",
                "docs": [" The list of all currently active PVF votes. Auxiliary to `PvfActiveVoteMap`."]
              },
              {
                "name": "Parachains",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 695
                  }
                },
                "default": "0x00",
                "docs": [
                  " All lease holding parachains. Ordered ascending by `ParaId`. On demand parachains are not",
                  " included.",
                  "",
                  " Consider using the [`ParachainsCache`] type of modifying."
                ]
              },
              {
                "name": "ParaLifecycles",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 134,
                    "valueTypeId": 696
                  }
                },
                "default": "0x00",
                "docs": [" The current lifecycle of a all known Para IDs."]
              },
              {
                "name": "Heads",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 134,
                    "valueTypeId": 316
                  }
                },
                "default": "0x00",
                "docs": [" The head-data of every registered para."]
              },
              {
                "name": "MostRecentContext",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 134,
                    "valueTypeId": 4
                  }
                },
                "default": "0x00",
                "docs": [" The context (relay-chain block number) of the most recent parachain head."]
              },
              {
                "name": "CurrentCodeHash",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 134,
                    "valueTypeId": 308
                  }
                },
                "default": "0x00",
                "docs": [
                  " The validation code hash of every live para.",
                  "",
                  " Corresponding code can be retrieved with [`CodeByHash`]."
                ]
              },
              {
                "name": "PastCodeHash",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 697,
                    "valueTypeId": 308
                  }
                },
                "default": "0x00",
                "docs": [
                  " Actual past code hash, indicated by the para id as well as the block number at which it",
                  " became outdated.",
                  "",
                  " Corresponding code can be retrieved with [`CodeByHash`]."
                ]
              },
              {
                "name": "PastCodeMeta",
                "modifier": "Default",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 134,
                    "valueTypeId": 698
                  }
                },
                "default": "0x0000",
                "docs": [
                  " Past code of parachains. The parachains themselves may not be registered anymore,",
                  " but we also keep their code on-chain for the same amount of time as outdated code",
                  " to keep it available for approval checkers."
                ]
              },
              {
                "name": "PastCodePruning",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 701
                  }
                },
                "default": "0x00",
                "docs": [
                  " Which paras have past code that needs pruning and the relay-chain block at which the code",
                  " was replaced. Note that this is the actual height of the included block, not the expected",
                  " height at which the code upgrade would be applied, although they may be equal.",
                  " This is to ensure the entire acceptance period is covered, not an offset acceptance period",
                  " starting from the time at which the parachain perceives a code upgrade as having occurred.",
                  " Multiple entries for a single para are permitted. Ordered ascending by block number."
                ]
              },
              {
                "name": "FutureCodeUpgrades",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 134,
                    "valueTypeId": 4
                  }
                },
                "default": "0x00",
                "docs": [
                  " The block number at which the planned code change is expected for a para.",
                  " The change will be applied after the first parablock for this ID included which executes",
                  " in the context of a relay chain block with a number >= `expected_at`."
                ]
              },
              {
                "name": "FutureCodeHash",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 134,
                    "valueTypeId": 308
                  }
                },
                "default": "0x00",
                "docs": [
                  " The actual future code hash of a para.",
                  "",
                  " Corresponding code can be retrieved with [`CodeByHash`]."
                ]
              },
              {
                "name": "UpgradeGoAheadSignal",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 134,
                    "valueTypeId": 702
                  }
                },
                "default": "0x00",
                "docs": [
                  " This is used by the relay-chain to communicate to a parachain a go-ahead with in the upgrade",
                  " procedure.",
                  "",
                  " This value is absent when there are no upgrades scheduled or during the time the relay chain",
                  " performs the checks. It is set at the first relay-chain block when the corresponding",
                  " parachain can switch its upgrade function. As soon as the parachain's block is included, the",
                  " value gets reset to `None`.",
                  "",
                  " NOTE that this field is used by parachains via merkle storage proofs, therefore changing",
                  " the format will require migration of parachains."
                ]
              },
              {
                "name": "UpgradeRestrictionSignal",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 134,
                    "valueTypeId": 703
                  }
                },
                "default": "0x00",
                "docs": [
                  " This is used by the relay-chain to communicate that there are restrictions for performing",
                  " an upgrade for this parachain.",
                  "",
                  " This may be a because the parachain waits for the upgrade cooldown to expire. Another",
                  " potential use case is when we want to perform some maintenance (such as storage migration)",
                  " we could restrict upgrades to make the process simpler.",
                  "",
                  " NOTE that this field is used by parachains via merkle storage proofs, therefore changing",
                  " the format will require migration of parachains."
                ]
              },
              {
                "name": "UpgradeCooldowns",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 701
                  }
                },
                "default": "0x00",
                "docs": [
                  " The list of parachains that are awaiting for their upgrade restriction to cooldown.",
                  "",
                  " Ordered ascending by block number."
                ]
              },
              {
                "name": "UpcomingUpgrades",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 701
                  }
                },
                "default": "0x00",
                "docs": [
                  " The list of upcoming code upgrades. Each item is a pair of which para performs a code",
                  " upgrade and at which relay-chain block it is expected at.",
                  "",
                  " Ordered ascending by block number."
                ]
              },
              {
                "name": "ActionsQueue",
                "modifier": "Default",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 4,
                    "valueTypeId": 695
                  }
                },
                "default": "0x00",
                "docs": [" The actions to perform during the start of a specific session index."]
              },
              {
                "name": "UpcomingParasGenesis",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 134,
                    "valueTypeId": 704
                  }
                },
                "default": "0x00",
                "docs": [
                  " Upcoming paras instantiation arguments.",
                  "",
                  " NOTE that after PVF pre-checking is enabled the para genesis arg will have it's code set",
                  " to empty. Instead, the code will be saved into the storage right away via `CodeByHash`."
                ]
              },
              {
                "name": "CodeByHashRefs",
                "modifier": "Default",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["identity"],
                    "keyTypeId": 308,
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": [" The number of reference on the validation code in [`CodeByHash`] storage."]
              },
              {
                "name": "CodeByHash",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["identity"],
                    "keyTypeId": 308,
                    "valueTypeId": 315
                  }
                },
                "default": "0x00",
                "docs": [
                  " Validation code stored by its hash.",
                  "",
                  " This storage is consistent with [`FutureCodeHash`], [`CurrentCodeHash`] and",
                  " [`PastCodeHash`]."
                ]
              }
            ]
          },
          "calls": 327,
          "event": 441,
          "constants": [
            {
              "name": "UnsignedPriority",
              "typeId": 11,
              "value": "0xffffffffffffffff",
              "docs": []
            }
          ],
          "error": 705,
          "index": 56,
          "docs": []
        },
        {
          "name": "Initializer",
          "storage": {
            "prefix": "Initializer",
            "entries": [
              {
                "name": "HasInitialized",
                "modifier": "Optional",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 34
                  }
                },
                "default": "0x00",
                "docs": [
                  " Whether the parachains modules have been initialized within this block.",
                  "",
                  " Semantically a `bool`, but this guarantees it should never hit the trie,",
                  " as this is cleared in `on_finalize` and Frame optimizes `None` values to be empty values.",
                  "",
                  " As a `bool`, `set(false)` and `remove()` both lead to the next `get()` being false, but one",
                  " of them writes to the trie and one does not. This confusion makes `Option<()>` more suitable",
                  " for the semantics of this variable."
                ]
              },
              {
                "name": "BufferedSessionChanges",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 706
                  }
                },
                "default": "0x00",
                "docs": [
                  " Buffered session changes along with the block number at which they should be applied.",
                  "",
                  " Typically this will be empty or one element long. Apart from that this item never hits",
                  " the storage.",
                  "",
                  " However this is a `Vec` regardless to handle various edge cases that may occur at runtime",
                  " upgrade boundaries or if governance intervenes."
                ]
              }
            ]
          },
          "calls": 329,
          "constants": [],
          "index": 57,
          "docs": []
        },
        {
          "name": "Dmp",
          "storage": {
            "prefix": "Dmp",
            "entries": [
              {
                "name": "DownwardMessageQueues",
                "modifier": "Default",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 134,
                    "valueTypeId": 708
                  }
                },
                "default": "0x00",
                "docs": [" The downward messages addressed for a certain para."]
              },
              {
                "name": "DownwardMessageQueueHeads",
                "modifier": "Default",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 134,
                    "valueTypeId": 12
                  }
                },
                "default": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " A mapping that stores the downward message queue MQC head for each para.",
                  "",
                  " Each link in this chain has a form:",
                  " `(prev_head, B, H(M))`, where",
                  " - `prev_head`: is the previous head hash or zero if none.",
                  " - `B`: is the relay-chain block number in which a message was appended.",
                  " - `H(M)`: is the hash of the message being appended."
                ]
              },
              {
                "name": "DeliveryFeeFactor",
                "modifier": "Default",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 134,
                    "valueTypeId": 513
                  }
                },
                "default": "0x000064a7b3b6e00d0000000000000000",
                "docs": [" The number to multiply the base delivery fee by."]
              }
            ]
          },
          "constants": [],
          "index": 58,
          "docs": []
        },
        {
          "name": "Hrmp",
          "storage": {
            "prefix": "Hrmp",
            "entries": [
              {
                "name": "HrmpOpenChannelRequests",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 331,
                    "valueTypeId": 710
                  }
                },
                "default": "0x00",
                "docs": [
                  " The set of pending HRMP open channel requests.",
                  "",
                  " The set is accompanied by a list for iteration.",
                  "",
                  " Invariant:",
                  " - There are no channels that exists in list but not in the set and vice versa."
                ]
              },
              {
                "name": "HrmpOpenChannelRequestsList",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 711
                  }
                },
                "default": "0x00",
                "docs": []
              },
              {
                "name": "HrmpOpenChannelRequestCount",
                "modifier": "Default",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 134,
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  " This mapping tracks how many open channel requests are initiated by a given sender para.",
                  " Invariant: `HrmpOpenChannelRequests` should contain the same number of items that has",
                  " `(X, _)` as the number of `HrmpOpenChannelRequestCount` for `X`."
                ]
              },
              {
                "name": "HrmpAcceptedChannelRequestCount",
                "modifier": "Default",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 134,
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  " This mapping tracks how many open channel requests were accepted by a given recipient para.",
                  " Invariant: `HrmpOpenChannelRequests` should contain the same number of items `(_, X)` with",
                  " `confirmed` set to true, as the number of `HrmpAcceptedChannelRequestCount` for `X`."
                ]
              },
              {
                "name": "HrmpCloseChannelRequests",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 331,
                    "valueTypeId": 34
                  }
                },
                "default": "0x00",
                "docs": [
                  " A set of pending HRMP close channel requests that are going to be closed during the session",
                  " change. Used for checking if a given channel is registered for closure.",
                  "",
                  " The set is accompanied by a list for iteration.",
                  "",
                  " Invariant:",
                  " - There are no channels that exists in list but not in the set and vice versa."
                ]
              },
              {
                "name": "HrmpCloseChannelRequestsList",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 711
                  }
                },
                "default": "0x00",
                "docs": []
              },
              {
                "name": "HrmpWatermarks",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 134,
                    "valueTypeId": 4
                  }
                },
                "default": "0x00",
                "docs": [
                  " The HRMP watermark associated with each para.",
                  " Invariant:",
                  " - each para `P` used here as a key should satisfy `Paras::is_valid_para(P)` within a",
                  "   session."
                ]
              },
              {
                "name": "HrmpChannels",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 331,
                    "valueTypeId": 712
                  }
                },
                "default": "0x00",
                "docs": [
                  " HRMP channel data associated with each para.",
                  " Invariant:",
                  " - each participant in the channel should satisfy `Paras::is_valid_para(P)` within a session."
                ]
              },
              {
                "name": "HrmpIngressChannelsIndex",
                "modifier": "Default",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 134,
                    "valueTypeId": 695
                  }
                },
                "default": "0x00",
                "docs": [
                  " Ingress/egress indexes allow to find all the senders and receivers given the opposite side.",
                  " I.e.",
                  "",
                  " (a) ingress index allows to find all the senders for a given recipient.",
                  " (b) egress index allows to find all the recipients for a given sender.",
                  "",
                  " Invariants:",
                  " - for each ingress index entry for `P` each item `I` in the index should present in",
                  "   `HrmpChannels` as `(I, P)`.",
                  " - for each egress index entry for `P` each item `E` in the index should present in",
                  "   `HrmpChannels` as `(P, E)`.",
                  " - there should be no other dangling channels in `HrmpChannels`.",
                  " - the vectors are sorted."
                ]
              },
              {
                "name": "HrmpEgressChannelsIndex",
                "modifier": "Default",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 134,
                    "valueTypeId": 695
                  }
                },
                "default": "0x00",
                "docs": []
              },
              {
                "name": "HrmpChannelContents",
                "modifier": "Default",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 331,
                    "valueTypeId": 713
                  }
                },
                "default": "0x00",
                "docs": [
                  " Storage for the messages for each channel.",
                  " Invariant: cannot be non-empty if the corresponding channel in `HrmpChannels` is `None`."
                ]
              },
              {
                "name": "HrmpChannelDigests",
                "modifier": "Default",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 134,
                    "valueTypeId": 715
                  }
                },
                "default": "0x00",
                "docs": [
                  " Maintains a mapping that can be used to answer the question: What paras sent a message at",
                  " the given block number for a given receiver. Invariants:",
                  " - The inner `Vec<ParaId>` is never empty.",
                  " - The inner `Vec<ParaId>` cannot store two same `ParaId`.",
                  " - The outer vector is sorted ascending by block number and cannot store two items with the",
                  "   same block number."
                ]
              }
            ]
          },
          "calls": 330,
          "event": 442,
          "constants": [],
          "error": 717,
          "index": 60,
          "docs": []
        },
        {
          "name": "ParaSessionInfo",
          "storage": {
            "prefix": "ParaSessionInfo",
            "entries": [
              {
                "name": "AssignmentKeysUnsafe",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 718
                  }
                },
                "default": "0x00",
                "docs": [
                  " Assignment keys for the current session.",
                  " Note that this API is private due to it being prone to 'off-by-one' at session boundaries.",
                  " When in doubt, use `Sessions` API instead."
                ]
              },
              {
                "name": "EarliestStoredSession",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": [" The earliest session for which previous session info is stored."]
              },
              {
                "name": "Sessions",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["identity"],
                    "keyTypeId": 4,
                    "valueTypeId": 719
                  }
                },
                "default": "0x00",
                "docs": [
                  " Session information in a rolling window.",
                  " Should have an entry in range `EarliestStoredSession..=CurrentSessionIndex`.",
                  " Does not have any entries before the session index in the first session change notification."
                ]
              },
              {
                "name": "AccountKeys",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["identity"],
                    "keyTypeId": 4,
                    "valueTypeId": 92
                  }
                },
                "default": "0x00",
                "docs": [" The validator account keys of the validators actively participating in parachain consensus."]
              },
              {
                "name": "SessionExecutorParams",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["identity"],
                    "keyTypeId": 4,
                    "valueTypeId": 286
                  }
                },
                "default": "0x00",
                "docs": [" Executor parameter set for a given session index"]
              }
            ]
          },
          "constants": [],
          "index": 61,
          "docs": []
        },
        {
          "name": "ParasDisputes",
          "storage": {
            "prefix": "ParasDisputes",
            "entries": [
              {
                "name": "LastPrunedSession",
                "modifier": "Optional",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00",
                "docs": [" The last pruned session, if any. All data stored by this module", " references sessions."]
              },
              {
                "name": "Disputes",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat", "blake2_128Concat"],
                    "keyTypeId": 723,
                    "valueTypeId": 724
                  }
                },
                "default": "0x00",
                "docs": [" All ongoing or concluded disputes for the last several sessions."]
              },
              {
                "name": "BackersOnDisputes",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat", "blake2_128Concat"],
                    "keyTypeId": 723,
                    "valueTypeId": 725
                  }
                },
                "default": "0x00",
                "docs": [" Backing votes stored for each dispute.", " This storage is used for slashing."]
              },
              {
                "name": "Included",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat", "blake2_128Concat"],
                    "keyTypeId": 723,
                    "valueTypeId": 4
                  }
                },
                "default": "0x00",
                "docs": [
                  " All included blocks on the chain, as well as the block number in this chain that",
                  " should be reverted back to if the candidate is disputed and determined to be invalid."
                ]
              },
              {
                "name": "Frozen",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 270
                  }
                },
                "default": "0x00",
                "docs": [
                  " Whether the chain is frozen. Starts as `None`. When this is `Some`,",
                  " the chain will not accept any new parachain blocks for backing or inclusion,",
                  " and its value indicates the last valid block number in the chain.",
                  " It can only be set back to `None` by governance intervention."
                ]
              }
            ]
          },
          "calls": 332,
          "event": 443,
          "constants": [],
          "error": 726,
          "index": 62,
          "docs": []
        },
        {
          "name": "ParasSlashing",
          "storage": {
            "prefix": "ParasSlashing",
            "entries": [
              {
                "name": "UnappliedSlashes",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat", "blake2_128Concat"],
                    "keyTypeId": 723,
                    "valueTypeId": 727
                  }
                },
                "default": "0x00",
                "docs": [" Validators pending dispute slashes."]
              },
              {
                "name": "ValidatorSetCounts",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 4,
                    "valueTypeId": 4
                  }
                },
                "default": "0x00",
                "docs": [" `ValidatorSetCount` per session."]
              }
            ]
          },
          "calls": 333,
          "constants": [],
          "error": 731,
          "index": 63,
          "docs": []
        },
        {
          "name": "ParaAssignmentProvider",
          "constants": [],
          "index": 64,
          "docs": []
        },
        {
          "name": "Registrar",
          "storage": {
            "prefix": "Registrar",
            "entries": [
              {
                "name": "PendingSwap",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 134,
                    "valueTypeId": 134
                  }
                },
                "default": "0x00",
                "docs": [" Pending swap operations."]
              },
              {
                "name": "Paras",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 134,
                    "valueTypeId": 732
                  }
                },
                "default": "0x00",
                "docs": [
                  " Amount held on deposit for each para and the original depositor.",
                  "",
                  " The given account ID is responsible for registering the code and initial head data, but may",
                  " only do so if it isn't yet registered. (After that, it's up to governance to do so.)"
                ]
              },
              {
                "name": "NextFreeParaId",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 134
                  }
                },
                "default": "0x00000000",
                "docs": [" The next free `ParaId`."]
              }
            ]
          },
          "calls": 337,
          "event": 446,
          "constants": [
            {
              "name": "ParaDeposit",
              "typeId": 6,
              "value": "0x0010a5d4e80000000000000000000000",
              "docs": [
                " The deposit to be paid to run a on-demand parachain.",
                " This should include the cost for storing the genesis head and validation code."
              ]
            },
            {
              "name": "DataDepositPerByte",
              "typeId": 6,
              "value": "0x80969800000000000000000000000000",
              "docs": [" The deposit to be paid per byte stored on chain."]
            }
          ],
          "error": 734,
          "index": 70,
          "docs": []
        },
        {
          "name": "Slots",
          "storage": {
            "prefix": "Slots",
            "entries": [
              {
                "name": "Leases",
                "modifier": "Default",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 134,
                    "valueTypeId": 735
                  }
                },
                "default": "0x00",
                "docs": [
                  " Amounts held on deposit for each (possibly future) leased parachain.",
                  "",
                  " The actual amount locked on its behalf by any account at any time is the maximum of the",
                  " second values of the items in this list whose first value is the account.",
                  "",
                  " The first item in the list is the amount locked for the current Lease Period. Following",
                  " items are for the subsequent lease periods.",
                  "",
                  " The default value (an empty list) implies that the parachain no longer exists (or never",
                  " existed) as far as this pallet is concerned.",
                  "",
                  " If a parachain doesn't exist *yet* but is scheduled to exist in the future, then it",
                  " will be left-padded with one or more `None`s to denote the fact that nothing is held on",
                  " deposit for the non-existent chain currently, but is held at some point in the future.",
                  "",
                  " It is illegal for a `None` value to trail in the list."
                ]
              }
            ]
          },
          "calls": 338,
          "event": 447,
          "constants": [
            {
              "name": "LeasePeriod",
              "typeId": 4,
              "value": "0x00751200",
              "docs": [" The number of blocks over which a single period lasts."]
            },
            {
              "name": "LeaseOffset",
              "typeId": 4,
              "value": "0x00100e00",
              "docs": [" The number of blocks to offset each lease period by."]
            }
          ],
          "error": 736,
          "index": 71,
          "docs": []
        },
        {
          "name": "Auctions",
          "storage": {
            "prefix": "Auctions",
            "entries": [
              {
                "name": "AuctionCounter",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": [" Number of auctions started so far."]
              },
              {
                "name": "AuctionInfo",
                "modifier": "Optional",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 31
                  }
                },
                "default": "0x00",
                "docs": [
                  " Information relating to the current auction, if there is one.",
                  "",
                  " The first item in the tuple is the lease period index that the first of the four",
                  " contiguous lease periods on auction is for. The second is the block number when the",
                  " auction will \"begin to end\", i.e. the first block of the Ending Period of the auction."
                ]
              },
              {
                "name": "ReservedAmounts",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 737,
                    "valueTypeId": 6
                  }
                },
                "default": "0x00",
                "docs": [
                  " Amounts currently reserved in the accounts of the bidders currently winning",
                  " (sub-)ranges."
                ]
              },
              {
                "name": "Winning",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 4,
                    "valueTypeId": 738
                  }
                },
                "default": "0x00",
                "docs": [
                  " The winning bids for each of the 10 ranges at each sample in the final Ending Period of",
                  " the current auction. The map's key is the 0-based index into the Sample Size. The",
                  " first sample of the ending period is 0; the last is `Sample Size - 1`."
                ]
              }
            ]
          },
          "calls": 339,
          "event": 448,
          "constants": [
            {
              "name": "EndingPeriod",
              "typeId": 4,
              "value": "0x40190100",
              "docs": [" The number of blocks over which an auction may be retroactively ended."]
            },
            {
              "name": "SampleLength",
              "typeId": 4,
              "value": "0x14000000",
              "docs": [
                " The length of each sample to take during the ending period.",
                "",
                " `EndingPeriod` / `SampleLength` = Total # of Samples"
              ]
            },
            {
              "name": "SlotRangeCount",
              "typeId": 4,
              "value": "0x24000000",
              "docs": []
            },
            {
              "name": "LeasePeriodsPerSlot",
              "typeId": 4,
              "value": "0x08000000",
              "docs": []
            }
          ],
          "error": 741,
          "index": 72,
          "docs": []
        },
        {
          "name": "Crowdloan",
          "storage": {
            "prefix": "Crowdloan",
            "entries": [
              {
                "name": "Funds",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 134,
                    "valueTypeId": 742
                  }
                },
                "default": "0x00",
                "docs": [" Info on all of the funds."]
              },
              {
                "name": "NewRaise",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 695
                  }
                },
                "default": "0x00",
                "docs": [
                  " The funds that have had additional contributions during the last block. This is used",
                  " in order to determine which funds should submit new or updated bids."
                ]
              },
              {
                "name": "EndingsCount",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": [" The number of auctions that have entered into their ending period so far."]
              },
              {
                "name": "NextFundIndex",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": [" Tracker for the next available fund index"]
              }
            ]
          },
          "calls": 341,
          "event": 449,
          "constants": [
            {
              "name": "PalletId",
              "typeId": 555,
              "value": "0x70792f6366756e64",
              "docs": [
                " `PalletId` for the crowdloan pallet. An appropriate value could be",
                " `PalletId(*b\"py/cfund\")`"
              ]
            },
            {
              "name": "MinContribution",
              "typeId": 6,
              "value": "0x00743ba40b0000000000000000000000",
              "docs": [
                " The minimum amount that may be contributed into a crowdloan. Should almost certainly be",
                " at least `ExistentialDeposit`."
              ]
            },
            {
              "name": "RemoveKeysLimit",
              "typeId": 4,
              "value": "0xe8030000",
              "docs": [" Max number of storage keys to remove per extrinsic call."]
            }
          ],
          "error": 744,
          "index": 73,
          "docs": []
        },
        {
          "name": "XcmPallet",
          "storage": {
            "prefix": "XcmPallet",
            "entries": [
              {
                "name": "QueryCounter",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 11
                  }
                },
                "default": "0x0000000000000000",
                "docs": [" The latest available query index."]
              },
              {
                "name": "Queries",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["blake2_128Concat"],
                    "keyTypeId": 11,
                    "valueTypeId": 745
                  }
                },
                "default": "0x00",
                "docs": [" The ongoing queries."]
              },
              {
                "name": "AssetTraps",
                "modifier": "Default",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["identity"],
                    "keyTypeId": 12,
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  " The existing asset traps.",
                  "",
                  " Key is the blake2 256 hash of (origin, versioned `MultiAssets`) pair. Value is the number of",
                  " times this pair has been trapped (usually just 1 if it exists at all)."
                ]
              },
              {
                "name": "SafeXcmVersion",
                "modifier": "Optional",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00",
                "docs": [
                  " Default version to encode XCM when latest version of destination is unknown. If `None`,",
                  " then the destinations whose XCM version is unknown are considered unreachable."
                ]
              },
              {
                "name": "SupportedVersion",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat", "blake2_128Concat"],
                    "keyTypeId": 750,
                    "valueTypeId": 4
                  }
                },
                "default": "0x00",
                "docs": [" The Latest versions that we know various locations support."]
              },
              {
                "name": "VersionNotifiers",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat", "blake2_128Concat"],
                    "keyTypeId": 750,
                    "valueTypeId": 11
                  }
                },
                "default": "0x00",
                "docs": [" All locations that we have requested version notifications from."]
              },
              {
                "name": "VersionNotifyTargets",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat", "blake2_128Concat"],
                    "keyTypeId": 750,
                    "valueTypeId": 751
                  }
                },
                "default": "0x00",
                "docs": [
                  " The target locations that are subscribed to our version changes, as well as the most recent",
                  " of our versions we informed them of."
                ]
              },
              {
                "name": "VersionDiscoveryQueue",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 752
                  }
                },
                "default": "0x00",
                "docs": [
                  " Destinations whose latest XCM version we would like to know. Duplicates not allowed, and",
                  " the `u32` counter is the number of times that a send to the destination has been attempted,",
                  " which is used as a prioritization."
                ]
              },
              {
                "name": "CurrentMigration",
                "modifier": "Optional",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 755
                  }
                },
                "default": "0x00",
                "docs": [" The current migration's stage, if any."]
              },
              {
                "name": "RemoteLockedFungibles",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat", "blake2_128Concat", "blake2_128Concat"],
                    "keyTypeId": 757,
                    "valueTypeId": 759
                  }
                },
                "default": "0x00",
                "docs": [" Fungible assets which we know are locked on a remote chain."]
              },
              {
                "name": "LockedFungibles",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["blake2_128Concat"],
                    "keyTypeId": 0,
                    "valueTypeId": 763
                  }
                },
                "default": "0x00",
                "docs": [" Fungible assets which we know are locked on this chain."]
              },
              {
                "name": "XcmExecutionSuspended",
                "modifier": "Default",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 44
                  }
                },
                "default": "0x00",
                "docs": [" Global suspension state of the XCM executor."]
              }
            ]
          },
          "calls": 349,
          "event": 450,
          "constants": [],
          "error": 766,
          "index": 99,
          "docs": []
        },
        {
          "name": "MessageQueue",
          "storage": {
            "prefix": "MessageQueue",
            "entries": [
              {
                "name": "BookStateFor",
                "modifier": "Default",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat"],
                    "keyTypeId": 413,
                    "valueTypeId": 767
                  }
                },
                "default": "0x0000000000000000000000000000000000000000000000000000000000",
                "docs": [" The index of the first and last (non-empty) pages."]
              },
              {
                "name": "ServiceHead",
                "modifier": "Optional",
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 413
                  }
                },
                "default": "0x00",
                "docs": [" The origin at which we should begin servicing."]
              },
              {
                "name": "Pages",
                "modifier": "Optional",
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": ["twox64Concat", "twox64Concat"],
                    "keyTypeId": 770,
                    "valueTypeId": 771
                  }
                },
                "default": "0x00",
                "docs": [" The map of page indices to pages."]
              }
            ]
          },
          "calls": 412,
          "event": 452,
          "constants": [
            {
              "name": "HeapSize",
              "typeId": 4,
              "value": "0x00000100",
              "docs": [
                " The size of the page; this implies the maximum message size which can be sent.",
                "",
                " A good value depends on the expected message sizes, their weights, the weight that is",
                " available for processing them and the maximal needed message size. The maximal message",
                " size is slightly lower than this as defined by [`MaxMessageLenOf`]."
              ]
            },
            {
              "name": "MaxStale",
              "typeId": 4,
              "value": "0x08000000",
              "docs": [
                " The maximum number of stale pages (i.e. of overweight messages) allowed before culling",
                " can happen. Once there are more stale pages than this, then historical pages may be",
                " dropped, even if they contain unprocessed overweight messages."
              ]
            },
            {
              "name": "ServiceWeight",
              "typeId": 420,
              "value": "0x010700a0db215d133333333333333333",
              "docs": [
                " The amount of weight (if any) which should be provided to the message queue for",
                " servicing enqueued items.",
                "",
                " This may be legitimately `None` in the case that you will call",
                " `ServiceQueues::service_queues` manually."
              ]
            }
          ],
          "error": 773,
          "index": 100,
          "docs": []
        }
      ],
      "extrinsic": {
        "version": 4,
        "addressTypeId": 88,
        "callTypeId": 68,
        "signatureTypeId": 347,
        "extraTypeId": 774,
        "signedExtensions": [
          {
            "ident": "CheckNonZeroSender",
            "typeId": 775,
            "additionalSigned": 34
          },
          {
            "ident": "CheckSpecVersion",
            "typeId": 776,
            "additionalSigned": 4
          },
          {
            "ident": "CheckTxVersion",
            "typeId": 777,
            "additionalSigned": 4
          },
          {
            "ident": "CheckGenesis",
            "typeId": 778,
            "additionalSigned": 12
          },
          {
            "ident": "CheckMortality",
            "typeId": 779,
            "additionalSigned": 12
          },
          {
            "ident": "CheckNonce",
            "typeId": 781,
            "additionalSigned": 34
          },
          {
            "ident": "CheckWeight",
            "typeId": 782,
            "additionalSigned": 34
          },
          {
            "ident": "ChargeTransactionPayment",
            "typeId": 783,
            "additionalSigned": 34
          },
          {
            "ident": "PrevalidateAttests",
            "typeId": 784,
            "additionalSigned": 34
          }
        ]
      },
      "runtimeType": 785,
      "apis": [
        {
          "name": "Core",
          "methods": [
            {
              "name": "version",
              "inputs": [],
              "output": 465,
              "docs": [" Returns the version of the runtime."]
            },
            {
              "name": "execute_block",
              "inputs": [
                {
                  "name": "block",
                  "typeId": 786
                }
              ],
              "output": 34,
              "docs": [" Execute the given block."]
            },
            {
              "name": "initialize_block",
              "inputs": [
                {
                  "name": "header",
                  "typeId": 78
                }
              ],
              "output": 34,
              "docs": [" Initialize a block with the given header."]
            }
          ],
          "docs": [" The `Core` runtime api that every Substrate runtime needs to implement."]
        },
        {
          "name": "Metadata",
          "methods": [
            {
              "name": "metadata",
              "inputs": [],
              "output": 789,
              "docs": [" Returns the metadata of a runtime."]
            },
            {
              "name": "metadata_at_version",
              "inputs": [
                {
                  "name": "version",
                  "typeId": 4
                }
              ],
              "output": 790,
              "docs": [
                " Returns the metadata at a given version.",
                "",
                " If the given `version` isn't supported, this will return `None`.",
                " Use [`Self::metadata_versions`] to find out about supported metadata version of the runtime."
              ]
            },
            {
              "name": "metadata_versions",
              "inputs": [],
              "output": 97,
              "docs": [
                " Returns the supported metadata versions.",
                "",
                " This can be used to call `metadata_at_version`."
              ]
            }
          ],
          "docs": [" The `Metadata` api trait that returns metadata for the runtime."]
        },
        {
          "name": "BlockBuilder",
          "methods": [
            {
              "name": "apply_extrinsic",
              "inputs": [
                {
                  "name": "extrinsic",
                  "typeId": 787
                }
              ],
              "output": 791,
              "docs": [
                " Apply the given extrinsic.",
                "",
                " Returns an inclusion outcome which specifies if this extrinsic is included in",
                " this block or not."
              ]
            },
            {
              "name": "finalize_block",
              "inputs": [],
              "output": 78,
              "docs": [" Finish the current block."]
            },
            {
              "name": "inherent_extrinsics",
              "inputs": [
                {
                  "name": "inherent",
                  "typeId": 795
                }
              ],
              "output": 788,
              "docs": [" Generate inherent extrinsics. The inherent data will vary from chain to chain."]
            },
            {
              "name": "check_inherents",
              "inputs": [
                {
                  "name": "block",
                  "typeId": 786
                },
                {
                  "name": "data",
                  "typeId": 795
                }
              ],
              "output": 799,
              "docs": [" Check that the inherents are valid. The inherent data will vary from chain to chain."]
            }
          ],
          "docs": [" The `BlockBuilder` api trait that provides the required functionality for building a block."]
        },
        {
          "name": "NominationPoolsApi",
          "methods": [
            {
              "name": "pending_rewards",
              "inputs": [
                {
                  "name": "who",
                  "typeId": 0
                }
              ],
              "output": 6,
              "docs": [" Returns the pending rewards for the member that the AccountId was given for."]
            },
            {
              "name": "points_to_balance",
              "inputs": [
                {
                  "name": "pool_id",
                  "typeId": 4
                },
                {
                  "name": "points",
                  "typeId": 6
                }
              ],
              "output": 6,
              "docs": [" Returns the equivalent balance of `points` for a given pool."]
            },
            {
              "name": "balance_to_points",
              "inputs": [
                {
                  "name": "pool_id",
                  "typeId": 4
                },
                {
                  "name": "new_funds",
                  "typeId": 6
                }
              ],
              "output": 6,
              "docs": [" Returns the equivalent points of `new_funds` for a given pool."]
            }
          ],
          "docs": [" Runtime api for accessing information about nomination pools."]
        },
        {
          "name": "StakingApi",
          "methods": [
            {
              "name": "nominations_quota",
              "inputs": [
                {
                  "name": "balance",
                  "typeId": 6
                }
              ],
              "output": 4,
              "docs": [" Returns the nominations quota for a nominator with a given balance."]
            }
          ],
          "docs": []
        },
        {
          "name": "TaggedTransactionQueue",
          "methods": [
            {
              "name": "validate_transaction",
              "inputs": [
                {
                  "name": "source",
                  "typeId": 800
                },
                {
                  "name": "tx",
                  "typeId": 787
                },
                {
                  "name": "block_hash",
                  "typeId": 12
                }
              ],
              "output": 801,
              "docs": [
                " Validate the transaction.",
                "",
                " This method is invoked by the transaction pool to learn details about given transaction.",
                " The implementation should make sure to verify the correctness of the transaction",
                " against current state. The given `block_hash` corresponds to the hash of the block",
                " that is used as current state.",
                "",
                " Note that this call may be performed by the pool multiple times and transactions",
                " might be verified in any possible order."
              ]
            }
          ],
          "docs": [" The `TaggedTransactionQueue` api trait for interfering with the transaction queue."]
        },
        {
          "name": "OffchainWorkerApi",
          "methods": [
            {
              "name": "offchain_worker",
              "inputs": [
                {
                  "name": "header",
                  "typeId": 78
                }
              ],
              "output": 34,
              "docs": [" Starts the off-chain task for given block header."]
            }
          ],
          "docs": [" The offchain worker api."]
        },
        {
          "name": "ParachainHost",
          "methods": [
            {
              "name": "validators",
              "inputs": [],
              "output": 668,
              "docs": [" Get the current validators."]
            },
            {
              "name": "validator_groups",
              "inputs": [],
              "output": 803,
              "docs": [
                " Returns the validator groups and rotation info localized based on the hypothetical child",
                "  of a block whose state  this is invoked on. Note that `now` in the `GroupRotationInfo`",
                " should be the successor of the number of the block."
              ]
            },
            {
              "name": "availability_cores",
              "inputs": [],
              "output": 805,
              "docs": [
                " Yields information on all availability cores as relevant to the child block.",
                " Cores are either free or occupied. Free cores can have paras assigned to them."
              ]
            },
            {
              "name": "persisted_validation_data",
              "inputs": [
                {
                  "name": "para_id",
                  "typeId": 134
                },
                {
                  "name": "assumption",
                  "typeId": 811
                }
              ],
              "output": 812,
              "docs": [
                " Yields the persisted validation data for the given `ParaId` along with an assumption that",
                " should be used if the para currently occupies a core.",
                "",
                " Returns `None` if either the para is not registered or the assumption is `Freed`",
                " and the para already occupies a core."
              ]
            },
            {
              "name": "assumed_validation_data",
              "inputs": [
                {
                  "name": "para_id",
                  "typeId": 134
                },
                {
                  "name": "expected_persisted_validation_data_hash",
                  "typeId": 12
                }
              ],
              "output": 814,
              "docs": [
                " Returns the persisted validation data for the given `ParaId` along with the corresponding",
                " validation code hash. Instead of accepting assumption about the para, matches the validation",
                " data hash against an expected one and yields `None` if they're not equal."
              ]
            },
            {
              "name": "check_validation_outputs",
              "inputs": [
                {
                  "name": "para_id",
                  "typeId": 134
                },
                {
                  "name": "outputs",
                  "typeId": 309
                }
              ],
              "output": 44,
              "docs": [" Checks if the given validation outputs pass the acceptance criteria."]
            },
            {
              "name": "session_index_for_child",
              "inputs": [],
              "output": 4,
              "docs": [
                " Returns the session index expected at a child of the block.",
                "",
                " This can be used to instantiate a `SigningContext`."
              ]
            },
            {
              "name": "validation_code",
              "inputs": [
                {
                  "name": "para_id",
                  "typeId": 134
                },
                {
                  "name": "assumption",
                  "typeId": 811
                }
              ],
              "output": 314,
              "docs": [
                " Fetch the validation code used by a para, making the given `OccupiedCoreAssumption`.",
                "",
                " Returns `None` if either the para is not registered or the assumption is `Freed`",
                " and the para already occupies a core."
              ]
            },
            {
              "name": "candidate_pending_availability",
              "inputs": [
                {
                  "name": "para_id",
                  "typeId": 134
                }
              ],
              "output": 816,
              "docs": [
                " Get the receipt of a candidate pending availability. This returns `Some` for any paras",
                " assigned to occupied cores in `availability_cores` and `None` otherwise."
              ]
            },
            {
              "name": "candidate_events",
              "inputs": [],
              "output": 817,
              "docs": [" Get a vector of events concerning candidates that occurred within a block."]
            },
            {
              "name": "dmq_contents",
              "inputs": [
                {
                  "name": "recipient",
                  "typeId": 134
                }
              ],
              "output": 708,
              "docs": [" Get all the pending inbound messages in the downward message queue for a para."]
            },
            {
              "name": "inbound_hrmp_channels_contents",
              "inputs": [
                {
                  "name": "recipient",
                  "typeId": 134
                }
              ],
              "output": 819,
              "docs": [
                " Get the contents of all channels addressed to the given recipient. Channels that have no",
                " messages in them are also included."
              ]
            },
            {
              "name": "validation_code_by_hash",
              "inputs": [
                {
                  "name": "hash",
                  "typeId": 308
                }
              ],
              "output": 314,
              "docs": [" Get the validation code from its hash."]
            },
            {
              "name": "on_chain_votes",
              "inputs": [],
              "output": 822,
              "docs": [" Scrape dispute relevant from on-chain, backing votes and resolved disputes."]
            },
            {
              "name": "session_info",
              "inputs": [
                {
                  "name": "index",
                  "typeId": 4
                }
              ],
              "output": 823,
              "docs": [
                " Get the session info for the given session, if stored.",
                "",
                " NOTE: This function is only available since parachain host version 2."
              ]
            },
            {
              "name": "submit_pvf_check_statement",
              "inputs": [
                {
                  "name": "stmt",
                  "typeId": 328
                },
                {
                  "name": "signature",
                  "typeId": 301
                }
              ],
              "output": 34,
              "docs": [
                " Submits a PVF pre-checking statement into the transaction pool.",
                "",
                " NOTE: This function is only available since parachain host version 2."
              ]
            },
            {
              "name": "pvfs_require_precheck",
              "inputs": [],
              "output": 694,
              "docs": [
                " Returns code hashes of PVFs that require pre-checking by validators in the active set.",
                "",
                " NOTE: This function is only available since parachain host version 2."
              ]
            },
            {
              "name": "validation_code_hash",
              "inputs": [
                {
                  "name": "para_id",
                  "typeId": 134
                },
                {
                  "name": "assumption",
                  "typeId": 811
                }
              ],
              "output": 824,
              "docs": [
                " Fetch the hash of the validation code used by a para, making the given `OccupiedCoreAssumption`.",
                "",
                " NOTE: This function is only available since parachain host version 2."
              ]
            },
            {
              "name": "disputes",
              "inputs": [],
              "output": 825,
              "docs": [" Returns all onchain disputes."]
            },
            {
              "name": "session_executor_params",
              "inputs": [
                {
                  "name": "session_index",
                  "typeId": 4
                }
              ],
              "output": 827,
              "docs": [" Returns execution parameters for the session."]
            },
            {
              "name": "unapplied_slashes",
              "inputs": [],
              "output": 828,
              "docs": [
                " Returns a list of validators that lost a past session dispute and need to be slashed.",
                " NOTE: This function is only available since parachain host version 5."
              ]
            },
            {
              "name": "key_ownership_proof",
              "inputs": [
                {
                  "name": "validator_id",
                  "typeId": 104
                }
              ],
              "output": 830,
              "docs": [
                " Returns a merkle proof of a validator session key.",
                " NOTE: This function is only available since parachain host version 5."
              ]
            },
            {
              "name": "submit_report_dispute_lost",
              "inputs": [
                {
                  "name": "dispute_proof",
                  "typeId": 334
                },
                {
                  "name": "key_ownership_proof",
                  "typeId": 831
                }
              ],
              "output": 832,
              "docs": [
                " Submit an unsigned extrinsic to slash validators who lost a dispute about",
                " a candidate of a past session.",
                " NOTE: This function is only available since parachain host version 5."
              ]
            },
            {
              "name": "minimum_backing_votes",
              "inputs": [],
              "output": 4,
              "docs": [
                " Get the minimum number of backing votes for a parachain candidate.",
                " This is a staging method! Do not use on production runtimes!"
              ]
            },
            {
              "name": "staging_para_backing_state",
              "inputs": [
                {
                  "name": "_",
                  "typeId": 134
                }
              ],
              "output": 833,
              "docs": [
                " Returns the state of parachain backing for a given para.",
                " This is a staging method! Do not use on production runtimes!"
              ]
            },
            {
              "name": "staging_async_backing_params",
              "inputs": [],
              "output": 285,
              "docs": [" Returns candidate's acceptance limitations for asynchronous backing for a relay parent."]
            }
          ],
          "docs": [" The API for querying the state of parachains on-chain."]
        },
        {
          "name": "BeefyApi",
          "methods": [
            {
              "name": "beefy_genesis",
              "inputs": [],
              "output": 270,
              "docs": [" Return the block number where BEEFY consensus is enabled/started"]
            },
            {
              "name": "validator_set",
              "inputs": [],
              "output": 845,
              "docs": [" Return the current active BEEFY validator set"]
            },
            {
              "name": "submit_report_equivocation_unsigned_extrinsic",
              "inputs": [
                {
                  "name": "equivocation_proof",
                  "typeId": 849
                },
                {
                  "name": "key_owner_proof",
                  "typeId": 856
                }
              ],
              "output": 832,
              "docs": [
                " Submits an unsigned extrinsic to report an equivocation. The caller",
                " must provide the equivocation proof and a key ownership proof",
                " (should be obtained using `generate_key_ownership_proof`). The",
                " extrinsic will be unsigned and should only be accepted for local",
                " authorship (not to be broadcast to the network). This method returns",
                " `None` when creation of the extrinsic fails, e.g. if equivocation",
                " reporting is disabled for the given runtime (i.e. this method is",
                " hardcoded to return `None`). Only useful in an offchain context."
              ]
            },
            {
              "name": "generate_key_ownership_proof",
              "inputs": [
                {
                  "name": "set_id",
                  "typeId": 11
                },
                {
                  "name": "authority_id",
                  "typeId": 847
                }
              ],
              "output": 857,
              "docs": [
                " Generates a proof of key ownership for the given authority in the",
                " given set. An example usage of this module is coupled with the",
                " session historical module to prove that a given authority key is",
                " tied to a given staking identity during a specific session. Proofs",
                " of key ownership are necessary for submitting equivocation reports.",
                " NOTE: even though the API takes a `set_id` as parameter the current",
                " implementations ignores this parameter and instead relies on this",
                " method being called at the correct block height, i.e. any point at",
                " which the given set id is live on-chain. Future implementations will",
                " instead use indexed data through an offchain worker, not requiring",
                " older states to be available."
              ]
            }
          ],
          "docs": [" API necessary for BEEFY voters."]
        },
        {
          "name": "MmrApi",
          "methods": [
            {
              "name": "mmr_root",
              "inputs": [],
              "output": 858,
              "docs": [" Return the on-chain MMR root hash."]
            },
            {
              "name": "mmr_leaf_count",
              "inputs": [],
              "output": 860,
              "docs": [" Return the number of MMR blocks in the chain."]
            },
            {
              "name": "generate_proof",
              "inputs": [
                {
                  "name": "block_numbers",
                  "typeId": 97
                },
                {
                  "name": "best_known_block_number",
                  "typeId": 270
                }
              ],
              "output": 861,
              "docs": [
                " Generate MMR proof for a series of block numbers. If `best_known_block_number = Some(n)`,",
                " use historical MMR state at given block height `n`. Else, use current MMR state."
              ]
            },
            {
              "name": "verify_proof",
              "inputs": [
                {
                  "name": "leaves",
                  "typeId": 863
                },
                {
                  "name": "proof",
                  "typeId": 865
                }
              ],
              "output": 866,
              "docs": [
                " Verify MMR proof against on-chain MMR for a batch of leaves.",
                "",
                " Note this function will use on-chain MMR root hash and check if the proof matches the hash.",
                " Note, the leaves should be sorted such that corresponding leaves and leaf indices have the",
                " same position in both the `leaves` vector and the `leaf_indices` vector contained in the [Proof]"
              ]
            },
            {
              "name": "verify_proof_stateless",
              "inputs": [
                {
                  "name": "root",
                  "typeId": 12
                },
                {
                  "name": "leaves",
                  "typeId": 863
                },
                {
                  "name": "proof",
                  "typeId": 865
                }
              ],
              "output": 866,
              "docs": [
                " Verify MMR proof against given root hash for a batch of leaves.",
                "",
                " Note this function does not require any on-chain storage - the",
                " proof is verified against given MMR root hash.",
                "",
                " Note, the leaves should be sorted such that corresponding leaves and leaf indices have the",
                " same position in both the `leaves` vector and the `leaf_indices` vector contained in the [Proof]"
              ]
            }
          ],
          "docs": [" API to interact with MMR pallet."]
        },
        {
          "name": "GrandpaApi",
          "methods": [
            {
              "name": "grandpa_authorities",
              "inputs": [],
              "output": 50,
              "docs": [
                " Get the current GRANDPA authorities and weights. This should not change except",
                " for when changes are scheduled and the corresponding delay has passed.",
                "",
                " When called at block B, it will return the set of authorities that should be",
                " used to finalize descendants of this block (B+1, B+2, ...). The block B itself",
                " is finalized by the authorities from block B-1."
              ]
            },
            {
              "name": "submit_report_equivocation_unsigned_extrinsic",
              "inputs": [
                {
                  "name": "equivocation_proof",
                  "typeId": 108
                },
                {
                  "name": "key_owner_proof",
                  "typeId": 867
                }
              ],
              "output": 832,
              "docs": [
                " Submits an unsigned extrinsic to report an equivocation. The caller",
                " must provide the equivocation proof and a key ownership proof",
                " (should be obtained using `generate_key_ownership_proof`). The",
                " extrinsic will be unsigned and should only be accepted for local",
                " authorship (not to be broadcast to the network). This method returns",
                " `None` when creation of the extrinsic fails, e.g. if equivocation",
                " reporting is disabled for the given runtime (i.e. this method is",
                " hardcoded to return `None`). Only useful in an offchain context."
              ]
            },
            {
              "name": "generate_key_ownership_proof",
              "inputs": [
                {
                  "name": "set_id",
                  "typeId": 11
                },
                {
                  "name": "authority_id",
                  "typeId": 52
                }
              ],
              "output": 868,
              "docs": [
                " Generates a proof of key ownership for the given authority in the",
                " given set. An example usage of this module is coupled with the",
                " session historical module to prove that a given authority key is",
                " tied to a given staking identity during a specific session. Proofs",
                " of key ownership are necessary for submitting equivocation reports.",
                " NOTE: even though the API takes a `set_id` as parameter the current",
                " implementations ignore this parameter and instead rely on this",
                " method being called at the correct block height, i.e. any point at",
                " which the given set id is live on-chain. Future implementations will",
                " instead use indexed data through an offchain worker, not requiring",
                " older states to be available."
              ]
            },
            {
              "name": "current_set_id",
              "inputs": [],
              "output": 11,
              "docs": [" Get current GRANDPA authority set id."]
            }
          ],
          "docs": [
            " APIs for integrating the GRANDPA finality gadget into runtimes.",
            " This should be implemented on the runtime side.",
            "",
            " This is primarily used for negotiating authority-set changes for the",
            " gadget. GRANDPA uses a signaling model of changing authority sets:",
            " changes should be signaled with a delay of N blocks, and then automatically",
            " applied in the runtime after those N blocks have passed.",
            "",
            " The consensus protocol will coordinate the handoff externally."
          ]
        },
        {
          "name": "BabeApi",
          "methods": [
            {
              "name": "configuration",
              "inputs": [],
              "output": 869,
              "docs": [" Return the configuration for BABE."]
            },
            {
              "name": "current_epoch_start",
              "inputs": [],
              "output": 81,
              "docs": [" Returns the slot that started the current epoch."]
            },
            {
              "name": "current_epoch",
              "inputs": [],
              "output": 870,
              "docs": [" Returns information regarding the current epoch."]
            },
            {
              "name": "next_epoch",
              "inputs": [],
              "output": 870,
              "docs": [" Returns information regarding the next epoch (which was already", " previously announced)."]
            },
            {
              "name": "generate_key_ownership_proof",
              "inputs": [
                {
                  "name": "slot",
                  "typeId": 81
                },
                {
                  "name": "authority_id",
                  "typeId": 80
                }
              ],
              "output": 871,
              "docs": [
                " Generates a proof of key ownership for the given authority in the",
                " current epoch. An example usage of this module is coupled with the",
                " session historical module to prove that a given authority key is",
                " tied to a given staking identity during a specific session. Proofs",
                " of key ownership are necessary for submitting equivocation reports.",
                " NOTE: even though the API takes a `slot` as parameter the current",
                " implementations ignores this parameter and instead relies on this",
                " method being called at the correct block height, i.e. any point at",
                " which the epoch for the given slot is live on-chain. Future",
                " implementations will instead use indexed data through an offchain",
                " worker, not requiring older states to be available."
              ]
            },
            {
              "name": "submit_report_equivocation_unsigned_extrinsic",
              "inputs": [
                {
                  "name": "equivocation_proof",
                  "typeId": 77
                },
                {
                  "name": "key_owner_proof",
                  "typeId": 872
                }
              ],
              "output": 832,
              "docs": [
                " Submits an unsigned extrinsic to report an equivocation. The caller",
                " must provide the equivocation proof and a key ownership proof",
                " (should be obtained using `generate_key_ownership_proof`). The",
                " extrinsic will be unsigned and should only be accepted for local",
                " authorship (not to be broadcast to the network). This method returns",
                " `None` when creation of the extrinsic fails, e.g. if equivocation",
                " reporting is disabled for the given runtime (i.e. this method is",
                " hardcoded to return `None`). Only useful in an offchain context."
              ]
            }
          ],
          "docs": [" API necessary for block authorship with BABE."]
        },
        {
          "name": "AuthorityDiscoveryApi",
          "methods": [
            {
              "name": "authorities",
              "inputs": [],
              "output": 721,
              "docs": [" Retrieve authority identifiers of the current and next authority set."]
            }
          ],
          "docs": [
            " The authority discovery api.",
            "",
            " This api is used by the `client/authority-discovery` module to retrieve identifiers",
            " of the current and next authority set."
          ]
        },
        {
          "name": "SessionKeys",
          "methods": [
            {
              "name": "generate_session_keys",
              "inputs": [
                {
                  "name": "seed",
                  "typeId": 756
                }
              ],
              "output": 13,
              "docs": [
                " Generate a set of session keys with optionally using the given seed.",
                " The keys should be stored within the keystore exposed via runtime",
                " externalities.",
                "",
                " The seed needs to be a valid `utf8` string.",
                "",
                " Returns the concatenated SCALE encoded public keys."
              ]
            },
            {
              "name": "decode_session_keys",
              "inputs": [
                {
                  "name": "encoded",
                  "typeId": 13
                }
              ],
              "output": 873,
              "docs": [
                " Decode the given public session keys.",
                "",
                " Returns the list of public raw public keys + key type."
              ]
            }
          ],
          "docs": [" Session keys runtime api."]
        },
        {
          "name": "AccountNonceApi",
          "methods": [
            {
              "name": "account_nonce",
              "inputs": [
                {
                  "name": "account",
                  "typeId": 0
                }
              ],
              "output": 4,
              "docs": [" Get current account nonce of given `AccountId`."]
            }
          ],
          "docs": [" The API to query account nonce."]
        },
        {
          "name": "TransactionPaymentApi",
          "methods": [
            {
              "name": "query_info",
              "inputs": [
                {
                  "name": "uxt",
                  "typeId": 787
                },
                {
                  "name": "len",
                  "typeId": 4
                }
              ],
              "output": 876,
              "docs": []
            },
            {
              "name": "query_fee_details",
              "inputs": [
                {
                  "name": "uxt",
                  "typeId": 787
                },
                {
                  "name": "len",
                  "typeId": 4
                }
              ],
              "output": 877,
              "docs": []
            },
            {
              "name": "query_weight_to_fee",
              "inputs": [
                {
                  "name": "weight",
                  "typeId": 9
                }
              ],
              "output": 6,
              "docs": []
            },
            {
              "name": "query_length_to_fee",
              "inputs": [
                {
                  "name": "length",
                  "typeId": 4
                }
              ],
              "output": 6,
              "docs": []
            }
          ],
          "docs": []
        },
        {
          "name": "TransactionPaymentCallApi",
          "methods": [
            {
              "name": "query_call_info",
              "inputs": [
                {
                  "name": "call",
                  "typeId": 68
                },
                {
                  "name": "len",
                  "typeId": 4
                }
              ],
              "output": 876,
              "docs": [" Query information of a dispatch class, weight, and fee of a given encoded `Call`."]
            },
            {
              "name": "query_call_fee_details",
              "inputs": [
                {
                  "name": "call",
                  "typeId": 68
                },
                {
                  "name": "len",
                  "typeId": 4
                }
              ],
              "output": 877,
              "docs": [" Query fee details of a given encoded `Call`."]
            },
            {
              "name": "query_weight_to_fee",
              "inputs": [
                {
                  "name": "weight",
                  "typeId": 9
                }
              ],
              "output": 6,
              "docs": [" Query the output of the current `WeightToFee` given some input."]
            },
            {
              "name": "query_length_to_fee",
              "inputs": [
                {
                  "name": "length",
                  "typeId": 4
                }
              ],
              "output": 6,
              "docs": [" Query the output of the current `LengthToFee` given some input."]
            }
          ],
          "docs": []
        }
      ],
      "outerEnums": {
        "callEnumTypeId": 68,
        "eventEnumTypeId": 20,
        "errorEnumTypeId": 880
      },
      "custom": {
        "map": {}
      }
    }
  }
}
