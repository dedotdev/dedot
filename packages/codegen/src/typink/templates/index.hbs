// Generated by dedot cli

{{{importTypes}}}
import { ContractQuery } from './query.js';
import { ContractTx } from './tx.js';
import { ConstructorQuery } from './constructor-query.js';
import { ConstructorTx } from './constructor-tx.js';
import { ContractEvents } from './events.js';

export * from './types.js';

{{{interfaceDocs}}}export interface {{{interfaceName}}}<Rv extends RpcVersion = RpcVersion, ChainApi extends VersionedGenericSubstrateApi = SubstrateApi> extends InkGenericContractApi<Rv, ChainApi> {
    query: ContractQuery<ChainApi[Rv], 'ink'>;
    tx: ContractTx<ChainApi[Rv], 'ink'>;
    constructorQuery: ConstructorQuery<ChainApi[Rv], 'ink'>;
    constructorTx: ConstructorTx<ChainApi[Rv], {{{interfaceName}}}, 'ink'>;
    events: ContractEvents<ChainApi[Rv], 'ink'>;
    storage: {
      root(): Promise<{{{rootStorageName}}}>;
      lazy(): {{{lazyStorageName}}};
    };

    types: {
      Metadata: ContractMetadata;
      Registry: TypinkRegistry;
      RootStorage: {{{rootStorageName}}};
      LazyStorage: {{{lazyStorageName}}};
      LangError: {{{langErrorName}}};
      ChainApi: ChainApi[Rv];
    };
}
