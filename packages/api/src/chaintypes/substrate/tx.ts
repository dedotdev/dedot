// Generated by @dedot/codegen

import type {
  GenericChainTx,
  GenericTxCall,
  ISubmittableExtrinsic,
  ISubmittableResult,
  IRuntimeTxCall,
  RpcVersion,
} from '@dedot/types';
import type {
  MultiAddressLike,
  Extrinsic,
  BytesLike,
  AccountId32Like,
  Percent,
  Perbill,
  H256,
  FixedU128,
  Data,
  FixedBytes,
  FixedU64,
  Perquintill,
} from '@dedot/codecs';
import type {
  KitchensinkRuntimeRuntimeCallLike,
  SpRuntimeMultiSignature,
  FrameSystemEventRecord,
  KitchensinkRuntimeOriginCaller,
  SpWeightsWeightV2Weight,
  SpConsensusSlotsEquivocationProof,
  SpSessionMembershipProof,
  SpConsensusBabeDigestsNextConfigDescriptor,
  PalletElectionProviderMultiPhaseRawSolution,
  PalletElectionProviderMultiPhaseSolutionOrSnapshotSize,
  SpNposElectionsElectionScore,
  SpNposElectionsSupport,
  PalletStakingRewardDestination,
  PalletStakingValidatorPrefs,
  PalletStakingPalletConfigOp,
  PalletStakingPalletConfigOpU32,
  PalletStakingPalletConfigOpPercent,
  PalletStakingPalletConfigOpPerbill,
  KitchensinkRuntimeSessionKeys,
  FrameSupportPreimagesBounded,
  PalletDemocracyVoteAccountVote,
  PalletDemocracyConviction,
  PalletDemocracyMetadataOwner,
  PalletElectionsPhragmenRenouncing,
  SpConsensusGrandpaEquivocationProof,
  PalletContractsWasmDeterminism,
  PalletImOnlineHeartbeat,
  PalletImOnlineSr25519AppSr25519Signature,
  PalletIdentityIdentityInfo,
  PalletIdentityBitFlags,
  PalletIdentityJudgement,
  PalletVestingVestingInfo,
  KitchensinkRuntimeProxyType,
  PalletMultisigTimepoint,
  PalletUniquesDestroyWitness,
  PalletNftsCollectionConfig,
  PalletNftsDestroyWitness,
  PalletNftsMintWitness,
  PalletNftsItemConfig,
  PalletNftsBitFlags,
  PalletNftsAttributeNamespace,
  PalletNftsCancelAttributesApprovalWitness,
  PalletNftsMintSettings,
  PalletNftsItemTip,
  PalletNftsPriceWithDirection,
  PalletNftsPreSignedMint,
  PalletNftsPreSignedAttributes,
  PalletCoreFellowshipParamsType,
  PalletCoreFellowshipWish,
  SpTransactionStorageProofTransactionStorageProof,
  PalletStateTrieMigrationMigrationLimits,
  PalletStateTrieMigrationMigrationTask,
  PalletStateTrieMigrationProgress,
  FrameSupportScheduleDispatchTime,
  PalletConvictionVotingVoteAccountVote,
  PalletConvictionVotingConviction,
  PalletAllianceDisbandWitness,
  PalletAllianceCid,
  PalletAllianceUnscrupulousItem,
  PalletNominationPoolsBondExtra,
  PalletNominationPoolsPoolState,
  PalletNominationPoolsConfigOp,
  PalletNominationPoolsConfigOpU32,
  PalletNominationPoolsConfigOpPerbill,
  PalletNominationPoolsConfigOp004,
  PalletNominationPoolsClaimPermission,
  PalletNominationPoolsCommissionChangeRate,
  PalletAssetConversionNativeOrAssetId,
  PalletBrokerConfigRecord,
  PalletBrokerScheduleItem,
  PalletBrokerRegionId,
  PalletBrokerCoreMask,
  PalletBrokerFinality,
} from './types.js';

export type ChainSubmittableExtrinsic<T extends IRuntimeTxCall = KitchensinkRuntimeRuntimeCallLike> = Extrinsic<
  MultiAddressLike,
  T,
  SpRuntimeMultiSignature,
  any[]
> &
  ISubmittableExtrinsic<ISubmittableResult<FrameSystemEventRecord>>;

export type TxCall = (...args: any[]) => ChainSubmittableExtrinsic;

export interface ChainTx<Rv extends RpcVersion> extends GenericChainTx<Rv, TxCall> {
  /**
   * Pallet `System`'s transaction calls
   **/
  system: {
    /**
     * See [`Pallet::remark`].
     *
     * @param {BytesLike} remark
     **/
    remark: GenericTxCall<
      Rv,
      (remark: BytesLike) => ChainSubmittableExtrinsic<{
        pallet: 'System';
        palletCall: {
          name: 'Remark';
          params: { remark: BytesLike };
        };
      }>
    >;

    /**
     * See [`Pallet::set_heap_pages`].
     *
     * @param {bigint} pages
     **/
    setHeapPages: GenericTxCall<
      Rv,
      (pages: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'System';
        palletCall: {
          name: 'SetHeapPages';
          params: { pages: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::set_code`].
     *
     * @param {BytesLike} code
     **/
    setCode: GenericTxCall<
      Rv,
      (code: BytesLike) => ChainSubmittableExtrinsic<{
        pallet: 'System';
        palletCall: {
          name: 'SetCode';
          params: { code: BytesLike };
        };
      }>
    >;

    /**
     * See [`Pallet::set_code_without_checks`].
     *
     * @param {BytesLike} code
     **/
    setCodeWithoutChecks: GenericTxCall<
      Rv,
      (code: BytesLike) => ChainSubmittableExtrinsic<{
        pallet: 'System';
        palletCall: {
          name: 'SetCodeWithoutChecks';
          params: { code: BytesLike };
        };
      }>
    >;

    /**
     * See [`Pallet::set_storage`].
     *
     * @param {Array<[BytesLike, BytesLike]>} items
     **/
    setStorage: GenericTxCall<
      Rv,
      (items: Array<[BytesLike, BytesLike]>) => ChainSubmittableExtrinsic<{
        pallet: 'System';
        palletCall: {
          name: 'SetStorage';
          params: { items: Array<[BytesLike, BytesLike]> };
        };
      }>
    >;

    /**
     * See [`Pallet::kill_storage`].
     *
     * @param {Array<BytesLike>} keys
     **/
    killStorage: GenericTxCall<
      Rv,
      (keys: Array<BytesLike>) => ChainSubmittableExtrinsic<{
        pallet: 'System';
        palletCall: {
          name: 'KillStorage';
          params: { keys: Array<BytesLike> };
        };
      }>
    >;

    /**
     * See [`Pallet::kill_prefix`].
     *
     * @param {BytesLike} prefix
     * @param {number} subkeys
     **/
    killPrefix: GenericTxCall<
      Rv,
      (
        prefix: BytesLike,
        subkeys: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'System';
        palletCall: {
          name: 'KillPrefix';
          params: { prefix: BytesLike; subkeys: number };
        };
      }>
    >;

    /**
     * See [`Pallet::remark_with_event`].
     *
     * @param {BytesLike} remark
     **/
    remarkWithEvent: GenericTxCall<
      Rv,
      (remark: BytesLike) => ChainSubmittableExtrinsic<{
        pallet: 'System';
        palletCall: {
          name: 'RemarkWithEvent';
          params: { remark: BytesLike };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall>;
  };
  /**
   * Pallet `Utility`'s transaction calls
   **/
  utility: {
    /**
     * See [`Pallet::batch`].
     *
     * @param {Array<KitchensinkRuntimeRuntimeCallLike>} calls
     **/
    batch: GenericTxCall<
      Rv,
      (calls: Array<KitchensinkRuntimeRuntimeCallLike>) => ChainSubmittableExtrinsic<{
        pallet: 'Utility';
        palletCall: {
          name: 'Batch';
          params: { calls: Array<KitchensinkRuntimeRuntimeCallLike> };
        };
      }>
    >;

    /**
     * See [`Pallet::as_derivative`].
     *
     * @param {number} index
     * @param {KitchensinkRuntimeRuntimeCallLike} call
     **/
    asDerivative: GenericTxCall<
      Rv,
      (
        index: number,
        call: KitchensinkRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Utility';
        palletCall: {
          name: 'AsDerivative';
          params: { index: number; call: KitchensinkRuntimeRuntimeCallLike };
        };
      }>
    >;

    /**
     * See [`Pallet::batch_all`].
     *
     * @param {Array<KitchensinkRuntimeRuntimeCallLike>} calls
     **/
    batchAll: GenericTxCall<
      Rv,
      (calls: Array<KitchensinkRuntimeRuntimeCallLike>) => ChainSubmittableExtrinsic<{
        pallet: 'Utility';
        palletCall: {
          name: 'BatchAll';
          params: { calls: Array<KitchensinkRuntimeRuntimeCallLike> };
        };
      }>
    >;

    /**
     * See [`Pallet::dispatch_as`].
     *
     * @param {KitchensinkRuntimeOriginCaller} asOrigin
     * @param {KitchensinkRuntimeRuntimeCallLike} call
     **/
    dispatchAs: GenericTxCall<
      Rv,
      (
        asOrigin: KitchensinkRuntimeOriginCaller,
        call: KitchensinkRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Utility';
        palletCall: {
          name: 'DispatchAs';
          params: { asOrigin: KitchensinkRuntimeOriginCaller; call: KitchensinkRuntimeRuntimeCallLike };
        };
      }>
    >;

    /**
     * See [`Pallet::force_batch`].
     *
     * @param {Array<KitchensinkRuntimeRuntimeCallLike>} calls
     **/
    forceBatch: GenericTxCall<
      Rv,
      (calls: Array<KitchensinkRuntimeRuntimeCallLike>) => ChainSubmittableExtrinsic<{
        pallet: 'Utility';
        palletCall: {
          name: 'ForceBatch';
          params: { calls: Array<KitchensinkRuntimeRuntimeCallLike> };
        };
      }>
    >;

    /**
     * See [`Pallet::with_weight`].
     *
     * @param {KitchensinkRuntimeRuntimeCallLike} call
     * @param {SpWeightsWeightV2Weight} weight
     **/
    withWeight: GenericTxCall<
      Rv,
      (
        call: KitchensinkRuntimeRuntimeCallLike,
        weight: SpWeightsWeightV2Weight,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Utility';
        palletCall: {
          name: 'WithWeight';
          params: { call: KitchensinkRuntimeRuntimeCallLike; weight: SpWeightsWeightV2Weight };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall>;
  };
  /**
   * Pallet `Babe`'s transaction calls
   **/
  babe: {
    /**
     * See [`Pallet::report_equivocation`].
     *
     * @param {SpConsensusSlotsEquivocationProof} equivocationProof
     * @param {SpSessionMembershipProof} keyOwnerProof
     **/
    reportEquivocation: GenericTxCall<
      Rv,
      (
        equivocationProof: SpConsensusSlotsEquivocationProof,
        keyOwnerProof: SpSessionMembershipProof,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Babe';
        palletCall: {
          name: 'ReportEquivocation';
          params: { equivocationProof: SpConsensusSlotsEquivocationProof; keyOwnerProof: SpSessionMembershipProof };
        };
      }>
    >;

    /**
     * See [`Pallet::report_equivocation_unsigned`].
     *
     * @param {SpConsensusSlotsEquivocationProof} equivocationProof
     * @param {SpSessionMembershipProof} keyOwnerProof
     **/
    reportEquivocationUnsigned: GenericTxCall<
      Rv,
      (
        equivocationProof: SpConsensusSlotsEquivocationProof,
        keyOwnerProof: SpSessionMembershipProof,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Babe';
        palletCall: {
          name: 'ReportEquivocationUnsigned';
          params: { equivocationProof: SpConsensusSlotsEquivocationProof; keyOwnerProof: SpSessionMembershipProof };
        };
      }>
    >;

    /**
     * See [`Pallet::plan_config_change`].
     *
     * @param {SpConsensusBabeDigestsNextConfigDescriptor} config
     **/
    planConfigChange: GenericTxCall<
      Rv,
      (config: SpConsensusBabeDigestsNextConfigDescriptor) => ChainSubmittableExtrinsic<{
        pallet: 'Babe';
        palletCall: {
          name: 'PlanConfigChange';
          params: { config: SpConsensusBabeDigestsNextConfigDescriptor };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall>;
  };
  /**
   * Pallet `Timestamp`'s transaction calls
   **/
  timestamp: {
    /**
     * See [`Pallet::set`].
     *
     * @param {bigint} now
     **/
    set: GenericTxCall<
      Rv,
      (now: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'Timestamp';
        palletCall: {
          name: 'Set';
          params: { now: bigint };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall>;
  };
  /**
   * Pallet `Indices`'s transaction calls
   **/
  indices: {
    /**
     * See [`Pallet::claim`].
     *
     * @param {number} index
     **/
    claim: GenericTxCall<
      Rv,
      (index: number) => ChainSubmittableExtrinsic<{
        pallet: 'Indices';
        palletCall: {
          name: 'Claim';
          params: { index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer`].
     *
     * @param {MultiAddressLike} new_
     * @param {number} index
     **/
    transfer: GenericTxCall<
      Rv,
      (
        new_: MultiAddressLike,
        index: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Indices';
        palletCall: {
          name: 'Transfer';
          params: { new: MultiAddressLike; index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::free`].
     *
     * @param {number} index
     **/
    free: GenericTxCall<
      Rv,
      (index: number) => ChainSubmittableExtrinsic<{
        pallet: 'Indices';
        palletCall: {
          name: 'Free';
          params: { index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::force_transfer`].
     *
     * @param {MultiAddressLike} new_
     * @param {number} index
     * @param {boolean} freeze
     **/
    forceTransfer: GenericTxCall<
      Rv,
      (
        new_: MultiAddressLike,
        index: number,
        freeze: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Indices';
        palletCall: {
          name: 'ForceTransfer';
          params: { new: MultiAddressLike; index: number; freeze: boolean };
        };
      }>
    >;

    /**
     * See [`Pallet::freeze`].
     *
     * @param {number} index
     **/
    freeze: GenericTxCall<
      Rv,
      (index: number) => ChainSubmittableExtrinsic<{
        pallet: 'Indices';
        palletCall: {
          name: 'Freeze';
          params: { index: number };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall>;
  };
  /**
   * Pallet `Balances`'s transaction calls
   **/
  balances: {
    /**
     * See [`Pallet::transfer_allow_death`].
     *
     * @param {MultiAddressLike} dest
     * @param {bigint} value
     **/
    transferAllowDeath: GenericTxCall<
      Rv,
      (
        dest: MultiAddressLike,
        value: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Balances';
        palletCall: {
          name: 'TransferAllowDeath';
          params: { dest: MultiAddressLike; value: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::set_balance_deprecated`].
     *
     * @param {MultiAddressLike} who
     * @param {bigint} newFree
     * @param {bigint} oldReserved
     **/
    setBalanceDeprecated: GenericTxCall<
      Rv,
      (
        who: MultiAddressLike,
        newFree: bigint,
        oldReserved: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Balances';
        palletCall: {
          name: 'SetBalanceDeprecated';
          params: { who: MultiAddressLike; newFree: bigint; oldReserved: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::force_transfer`].
     *
     * @param {MultiAddressLike} source
     * @param {MultiAddressLike} dest
     * @param {bigint} value
     **/
    forceTransfer: GenericTxCall<
      Rv,
      (
        source: MultiAddressLike,
        dest: MultiAddressLike,
        value: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Balances';
        palletCall: {
          name: 'ForceTransfer';
          params: { source: MultiAddressLike; dest: MultiAddressLike; value: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer_keep_alive`].
     *
     * @param {MultiAddressLike} dest
     * @param {bigint} value
     **/
    transferKeepAlive: GenericTxCall<
      Rv,
      (
        dest: MultiAddressLike,
        value: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Balances';
        palletCall: {
          name: 'TransferKeepAlive';
          params: { dest: MultiAddressLike; value: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer_all`].
     *
     * @param {MultiAddressLike} dest
     * @param {boolean} keepAlive
     **/
    transferAll: GenericTxCall<
      Rv,
      (
        dest: MultiAddressLike,
        keepAlive: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Balances';
        palletCall: {
          name: 'TransferAll';
          params: { dest: MultiAddressLike; keepAlive: boolean };
        };
      }>
    >;

    /**
     * See [`Pallet::force_unreserve`].
     *
     * @param {MultiAddressLike} who
     * @param {bigint} amount
     **/
    forceUnreserve: GenericTxCall<
      Rv,
      (
        who: MultiAddressLike,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Balances';
        palletCall: {
          name: 'ForceUnreserve';
          params: { who: MultiAddressLike; amount: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::upgrade_accounts`].
     *
     * @param {Array<AccountId32Like>} who
     **/
    upgradeAccounts: GenericTxCall<
      Rv,
      (who: Array<AccountId32Like>) => ChainSubmittableExtrinsic<{
        pallet: 'Balances';
        palletCall: {
          name: 'UpgradeAccounts';
          params: { who: Array<AccountId32Like> };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer`].
     *
     * @param {MultiAddressLike} dest
     * @param {bigint} value
     **/
    transfer: GenericTxCall<
      Rv,
      (
        dest: MultiAddressLike,
        value: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Balances';
        palletCall: {
          name: 'Transfer';
          params: { dest: MultiAddressLike; value: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::force_set_balance`].
     *
     * @param {MultiAddressLike} who
     * @param {bigint} newFree
     **/
    forceSetBalance: GenericTxCall<
      Rv,
      (
        who: MultiAddressLike,
        newFree: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Balances';
        palletCall: {
          name: 'ForceSetBalance';
          params: { who: MultiAddressLike; newFree: bigint };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall>;
  };
  /**
   * Pallet `ElectionProviderMultiPhase`'s transaction calls
   **/
  electionProviderMultiPhase: {
    /**
     * See [`Pallet::submit_unsigned`].
     *
     * @param {PalletElectionProviderMultiPhaseRawSolution} rawSolution
     * @param {PalletElectionProviderMultiPhaseSolutionOrSnapshotSize} witness
     **/
    submitUnsigned: GenericTxCall<
      Rv,
      (
        rawSolution: PalletElectionProviderMultiPhaseRawSolution,
        witness: PalletElectionProviderMultiPhaseSolutionOrSnapshotSize,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ElectionProviderMultiPhase';
        palletCall: {
          name: 'SubmitUnsigned';
          params: {
            rawSolution: PalletElectionProviderMultiPhaseRawSolution;
            witness: PalletElectionProviderMultiPhaseSolutionOrSnapshotSize;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::set_minimum_untrusted_score`].
     *
     * @param {SpNposElectionsElectionScore | undefined} maybeNextScore
     **/
    setMinimumUntrustedScore: GenericTxCall<
      Rv,
      (maybeNextScore: SpNposElectionsElectionScore | undefined) => ChainSubmittableExtrinsic<{
        pallet: 'ElectionProviderMultiPhase';
        palletCall: {
          name: 'SetMinimumUntrustedScore';
          params: { maybeNextScore: SpNposElectionsElectionScore | undefined };
        };
      }>
    >;

    /**
     * See [`Pallet::set_emergency_election_result`].
     *
     * @param {Array<[AccountId32Like, SpNposElectionsSupport]>} supports
     **/
    setEmergencyElectionResult: GenericTxCall<
      Rv,
      (supports: Array<[AccountId32Like, SpNposElectionsSupport]>) => ChainSubmittableExtrinsic<{
        pallet: 'ElectionProviderMultiPhase';
        palletCall: {
          name: 'SetEmergencyElectionResult';
          params: { supports: Array<[AccountId32Like, SpNposElectionsSupport]> };
        };
      }>
    >;

    /**
     * See [`Pallet::submit`].
     *
     * @param {PalletElectionProviderMultiPhaseRawSolution} rawSolution
     **/
    submit: GenericTxCall<
      Rv,
      (rawSolution: PalletElectionProviderMultiPhaseRawSolution) => ChainSubmittableExtrinsic<{
        pallet: 'ElectionProviderMultiPhase';
        palletCall: {
          name: 'Submit';
          params: { rawSolution: PalletElectionProviderMultiPhaseRawSolution };
        };
      }>
    >;

    /**
     * See [`Pallet::governance_fallback`].
     *
     * @param {number | undefined} maybeMaxVoters
     * @param {number | undefined} maybeMaxTargets
     **/
    governanceFallback: GenericTxCall<
      Rv,
      (
        maybeMaxVoters: number | undefined,
        maybeMaxTargets: number | undefined,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ElectionProviderMultiPhase';
        palletCall: {
          name: 'GovernanceFallback';
          params: { maybeMaxVoters: number | undefined; maybeMaxTargets: number | undefined };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall>;
  };
  /**
   * Pallet `Staking`'s transaction calls
   **/
  staking: {
    /**
     * See [`Pallet::bond`].
     *
     * @param {bigint} value
     * @param {PalletStakingRewardDestination} payee
     **/
    bond: GenericTxCall<
      Rv,
      (
        value: bigint,
        payee: PalletStakingRewardDestination,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'Bond';
          params: { value: bigint; payee: PalletStakingRewardDestination };
        };
      }>
    >;

    /**
     * See [`Pallet::bond_extra`].
     *
     * @param {bigint} maxAdditional
     **/
    bondExtra: GenericTxCall<
      Rv,
      (maxAdditional: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'BondExtra';
          params: { maxAdditional: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::unbond`].
     *
     * @param {bigint} value
     **/
    unbond: GenericTxCall<
      Rv,
      (value: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'Unbond';
          params: { value: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::withdraw_unbonded`].
     *
     * @param {number} numSlashingSpans
     **/
    withdrawUnbonded: GenericTxCall<
      Rv,
      (numSlashingSpans: number) => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'WithdrawUnbonded';
          params: { numSlashingSpans: number };
        };
      }>
    >;

    /**
     * See [`Pallet::validate`].
     *
     * @param {PalletStakingValidatorPrefs} prefs
     **/
    validate: GenericTxCall<
      Rv,
      (prefs: PalletStakingValidatorPrefs) => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'Validate';
          params: { prefs: PalletStakingValidatorPrefs };
        };
      }>
    >;

    /**
     * See [`Pallet::nominate`].
     *
     * @param {Array<MultiAddressLike>} targets
     **/
    nominate: GenericTxCall<
      Rv,
      (targets: Array<MultiAddressLike>) => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'Nominate';
          params: { targets: Array<MultiAddressLike> };
        };
      }>
    >;

    /**
     * See [`Pallet::chill`].
     *
     **/
    chill: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'Chill';
        };
      }>
    >;

    /**
     * See [`Pallet::set_payee`].
     *
     * @param {PalletStakingRewardDestination} payee
     **/
    setPayee: GenericTxCall<
      Rv,
      (payee: PalletStakingRewardDestination) => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'SetPayee';
          params: { payee: PalletStakingRewardDestination };
        };
      }>
    >;

    /**
     * See [`Pallet::set_controller`].
     *
     **/
    setController: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'SetController';
        };
      }>
    >;

    /**
     * See [`Pallet::set_validator_count`].
     *
     * @param {number} new_
     **/
    setValidatorCount: GenericTxCall<
      Rv,
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'SetValidatorCount';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::increase_validator_count`].
     *
     * @param {number} additional
     **/
    increaseValidatorCount: GenericTxCall<
      Rv,
      (additional: number) => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'IncreaseValidatorCount';
          params: { additional: number };
        };
      }>
    >;

    /**
     * See [`Pallet::scale_validator_count`].
     *
     * @param {Percent} factor
     **/
    scaleValidatorCount: GenericTxCall<
      Rv,
      (factor: Percent) => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'ScaleValidatorCount';
          params: { factor: Percent };
        };
      }>
    >;

    /**
     * See [`Pallet::force_no_eras`].
     *
     **/
    forceNoEras: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'ForceNoEras';
        };
      }>
    >;

    /**
     * See [`Pallet::force_new_era`].
     *
     **/
    forceNewEra: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'ForceNewEra';
        };
      }>
    >;

    /**
     * See [`Pallet::set_invulnerables`].
     *
     * @param {Array<AccountId32Like>} invulnerables
     **/
    setInvulnerables: GenericTxCall<
      Rv,
      (invulnerables: Array<AccountId32Like>) => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'SetInvulnerables';
          params: { invulnerables: Array<AccountId32Like> };
        };
      }>
    >;

    /**
     * See [`Pallet::force_unstake`].
     *
     * @param {AccountId32Like} stash
     * @param {number} numSlashingSpans
     **/
    forceUnstake: GenericTxCall<
      Rv,
      (
        stash: AccountId32Like,
        numSlashingSpans: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'ForceUnstake';
          params: { stash: AccountId32Like; numSlashingSpans: number };
        };
      }>
    >;

    /**
     * See [`Pallet::force_new_era_always`].
     *
     **/
    forceNewEraAlways: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'ForceNewEraAlways';
        };
      }>
    >;

    /**
     * See [`Pallet::cancel_deferred_slash`].
     *
     * @param {number} era
     * @param {Array<number>} slashIndices
     **/
    cancelDeferredSlash: GenericTxCall<
      Rv,
      (
        era: number,
        slashIndices: Array<number>,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'CancelDeferredSlash';
          params: { era: number; slashIndices: Array<number> };
        };
      }>
    >;

    /**
     * See [`Pallet::payout_stakers`].
     *
     * @param {AccountId32Like} validatorStash
     * @param {number} era
     **/
    payoutStakers: GenericTxCall<
      Rv,
      (
        validatorStash: AccountId32Like,
        era: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'PayoutStakers';
          params: { validatorStash: AccountId32Like; era: number };
        };
      }>
    >;

    /**
     * See [`Pallet::rebond`].
     *
     * @param {bigint} value
     **/
    rebond: GenericTxCall<
      Rv,
      (value: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'Rebond';
          params: { value: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::reap_stash`].
     *
     * @param {AccountId32Like} stash
     * @param {number} numSlashingSpans
     **/
    reapStash: GenericTxCall<
      Rv,
      (
        stash: AccountId32Like,
        numSlashingSpans: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'ReapStash';
          params: { stash: AccountId32Like; numSlashingSpans: number };
        };
      }>
    >;

    /**
     * See [`Pallet::kick`].
     *
     * @param {Array<MultiAddressLike>} who
     **/
    kick: GenericTxCall<
      Rv,
      (who: Array<MultiAddressLike>) => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'Kick';
          params: { who: Array<MultiAddressLike> };
        };
      }>
    >;

    /**
     * See [`Pallet::set_staking_configs`].
     *
     * @param {PalletStakingPalletConfigOp} minNominatorBond
     * @param {PalletStakingPalletConfigOp} minValidatorBond
     * @param {PalletStakingPalletConfigOpU32} maxNominatorCount
     * @param {PalletStakingPalletConfigOpU32} maxValidatorCount
     * @param {PalletStakingPalletConfigOpPercent} chillThreshold
     * @param {PalletStakingPalletConfigOpPerbill} minCommission
     **/
    setStakingConfigs: GenericTxCall<
      Rv,
      (
        minNominatorBond: PalletStakingPalletConfigOp,
        minValidatorBond: PalletStakingPalletConfigOp,
        maxNominatorCount: PalletStakingPalletConfigOpU32,
        maxValidatorCount: PalletStakingPalletConfigOpU32,
        chillThreshold: PalletStakingPalletConfigOpPercent,
        minCommission: PalletStakingPalletConfigOpPerbill,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'SetStakingConfigs';
          params: {
            minNominatorBond: PalletStakingPalletConfigOp;
            minValidatorBond: PalletStakingPalletConfigOp;
            maxNominatorCount: PalletStakingPalletConfigOpU32;
            maxValidatorCount: PalletStakingPalletConfigOpU32;
            chillThreshold: PalletStakingPalletConfigOpPercent;
            minCommission: PalletStakingPalletConfigOpPerbill;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::chill_other`].
     *
     * @param {AccountId32Like} controller
     **/
    chillOther: GenericTxCall<
      Rv,
      (controller: AccountId32Like) => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'ChillOther';
          params: { controller: AccountId32Like };
        };
      }>
    >;

    /**
     * See [`Pallet::force_apply_min_commission`].
     *
     * @param {AccountId32Like} validatorStash
     **/
    forceApplyMinCommission: GenericTxCall<
      Rv,
      (validatorStash: AccountId32Like) => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'ForceApplyMinCommission';
          params: { validatorStash: AccountId32Like };
        };
      }>
    >;

    /**
     * See [`Pallet::set_min_commission`].
     *
     * @param {Perbill} new_
     **/
    setMinCommission: GenericTxCall<
      Rv,
      (new_: Perbill) => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'SetMinCommission';
          params: { new: Perbill };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall>;
  };
  /**
   * Pallet `Session`'s transaction calls
   **/
  session: {
    /**
     * See [`Pallet::set_keys`].
     *
     * @param {KitchensinkRuntimeSessionKeys} keys
     * @param {BytesLike} proof
     **/
    setKeys: GenericTxCall<
      Rv,
      (
        keys: KitchensinkRuntimeSessionKeys,
        proof: BytesLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Session';
        palletCall: {
          name: 'SetKeys';
          params: { keys: KitchensinkRuntimeSessionKeys; proof: BytesLike };
        };
      }>
    >;

    /**
     * See [`Pallet::purge_keys`].
     *
     **/
    purgeKeys: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<{
        pallet: 'Session';
        palletCall: {
          name: 'PurgeKeys';
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall>;
  };
  /**
   * Pallet `Democracy`'s transaction calls
   **/
  democracy: {
    /**
     * See [`Pallet::propose`].
     *
     * @param {FrameSupportPreimagesBounded} proposal
     * @param {bigint} value
     **/
    propose: GenericTxCall<
      Rv,
      (
        proposal: FrameSupportPreimagesBounded,
        value: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Democracy';
        palletCall: {
          name: 'Propose';
          params: { proposal: FrameSupportPreimagesBounded; value: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::second`].
     *
     * @param {number} proposal
     **/
    second: GenericTxCall<
      Rv,
      (proposal: number) => ChainSubmittableExtrinsic<{
        pallet: 'Democracy';
        palletCall: {
          name: 'Second';
          params: { proposal: number };
        };
      }>
    >;

    /**
     * See [`Pallet::vote`].
     *
     * @param {number} refIndex
     * @param {PalletDemocracyVoteAccountVote} vote
     **/
    vote: GenericTxCall<
      Rv,
      (
        refIndex: number,
        vote: PalletDemocracyVoteAccountVote,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Democracy';
        palletCall: {
          name: 'Vote';
          params: { refIndex: number; vote: PalletDemocracyVoteAccountVote };
        };
      }>
    >;

    /**
     * See [`Pallet::emergency_cancel`].
     *
     * @param {number} refIndex
     **/
    emergencyCancel: GenericTxCall<
      Rv,
      (refIndex: number) => ChainSubmittableExtrinsic<{
        pallet: 'Democracy';
        palletCall: {
          name: 'EmergencyCancel';
          params: { refIndex: number };
        };
      }>
    >;

    /**
     * See [`Pallet::external_propose`].
     *
     * @param {FrameSupportPreimagesBounded} proposal
     **/
    externalPropose: GenericTxCall<
      Rv,
      (proposal: FrameSupportPreimagesBounded) => ChainSubmittableExtrinsic<{
        pallet: 'Democracy';
        palletCall: {
          name: 'ExternalPropose';
          params: { proposal: FrameSupportPreimagesBounded };
        };
      }>
    >;

    /**
     * See [`Pallet::external_propose_majority`].
     *
     * @param {FrameSupportPreimagesBounded} proposal
     **/
    externalProposeMajority: GenericTxCall<
      Rv,
      (proposal: FrameSupportPreimagesBounded) => ChainSubmittableExtrinsic<{
        pallet: 'Democracy';
        palletCall: {
          name: 'ExternalProposeMajority';
          params: { proposal: FrameSupportPreimagesBounded };
        };
      }>
    >;

    /**
     * See [`Pallet::external_propose_default`].
     *
     * @param {FrameSupportPreimagesBounded} proposal
     **/
    externalProposeDefault: GenericTxCall<
      Rv,
      (proposal: FrameSupportPreimagesBounded) => ChainSubmittableExtrinsic<{
        pallet: 'Democracy';
        palletCall: {
          name: 'ExternalProposeDefault';
          params: { proposal: FrameSupportPreimagesBounded };
        };
      }>
    >;

    /**
     * See [`Pallet::fast_track`].
     *
     * @param {H256} proposalHash
     * @param {number} votingPeriod
     * @param {number} delay
     **/
    fastTrack: GenericTxCall<
      Rv,
      (
        proposalHash: H256,
        votingPeriod: number,
        delay: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Democracy';
        palletCall: {
          name: 'FastTrack';
          params: { proposalHash: H256; votingPeriod: number; delay: number };
        };
      }>
    >;

    /**
     * See [`Pallet::veto_external`].
     *
     * @param {H256} proposalHash
     **/
    vetoExternal: GenericTxCall<
      Rv,
      (proposalHash: H256) => ChainSubmittableExtrinsic<{
        pallet: 'Democracy';
        palletCall: {
          name: 'VetoExternal';
          params: { proposalHash: H256 };
        };
      }>
    >;

    /**
     * See [`Pallet::cancel_referendum`].
     *
     * @param {number} refIndex
     **/
    cancelReferendum: GenericTxCall<
      Rv,
      (refIndex: number) => ChainSubmittableExtrinsic<{
        pallet: 'Democracy';
        palletCall: {
          name: 'CancelReferendum';
          params: { refIndex: number };
        };
      }>
    >;

    /**
     * See [`Pallet::delegate`].
     *
     * @param {MultiAddressLike} to
     * @param {PalletDemocracyConviction} conviction
     * @param {bigint} balance
     **/
    delegate: GenericTxCall<
      Rv,
      (
        to: MultiAddressLike,
        conviction: PalletDemocracyConviction,
        balance: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Democracy';
        palletCall: {
          name: 'Delegate';
          params: { to: MultiAddressLike; conviction: PalletDemocracyConviction; balance: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::undelegate`].
     *
     **/
    undelegate: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<{
        pallet: 'Democracy';
        palletCall: {
          name: 'Undelegate';
        };
      }>
    >;

    /**
     * See [`Pallet::clear_public_proposals`].
     *
     **/
    clearPublicProposals: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<{
        pallet: 'Democracy';
        palletCall: {
          name: 'ClearPublicProposals';
        };
      }>
    >;

    /**
     * See [`Pallet::unlock`].
     *
     * @param {MultiAddressLike} target
     **/
    unlock: GenericTxCall<
      Rv,
      (target: MultiAddressLike) => ChainSubmittableExtrinsic<{
        pallet: 'Democracy';
        palletCall: {
          name: 'Unlock';
          params: { target: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_vote`].
     *
     * @param {number} index
     **/
    removeVote: GenericTxCall<
      Rv,
      (index: number) => ChainSubmittableExtrinsic<{
        pallet: 'Democracy';
        palletCall: {
          name: 'RemoveVote';
          params: { index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_other_vote`].
     *
     * @param {MultiAddressLike} target
     * @param {number} index
     **/
    removeOtherVote: GenericTxCall<
      Rv,
      (
        target: MultiAddressLike,
        index: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Democracy';
        palletCall: {
          name: 'RemoveOtherVote';
          params: { target: MultiAddressLike; index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::blacklist`].
     *
     * @param {H256} proposalHash
     * @param {number | undefined} maybeRefIndex
     **/
    blacklist: GenericTxCall<
      Rv,
      (
        proposalHash: H256,
        maybeRefIndex: number | undefined,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Democracy';
        palletCall: {
          name: 'Blacklist';
          params: { proposalHash: H256; maybeRefIndex: number | undefined };
        };
      }>
    >;

    /**
     * See [`Pallet::cancel_proposal`].
     *
     * @param {number} propIndex
     **/
    cancelProposal: GenericTxCall<
      Rv,
      (propIndex: number) => ChainSubmittableExtrinsic<{
        pallet: 'Democracy';
        palletCall: {
          name: 'CancelProposal';
          params: { propIndex: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_metadata`].
     *
     * @param {PalletDemocracyMetadataOwner} owner
     * @param {H256 | undefined} maybeHash
     **/
    setMetadata: GenericTxCall<
      Rv,
      (
        owner: PalletDemocracyMetadataOwner,
        maybeHash: H256 | undefined,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Democracy';
        palletCall: {
          name: 'SetMetadata';
          params: { owner: PalletDemocracyMetadataOwner; maybeHash: H256 | undefined };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall>;
  };
  /**
   * Pallet `Council`'s transaction calls
   **/
  council: {
    /**
     * See [`Pallet::set_members`].
     *
     * @param {Array<AccountId32Like>} newMembers
     * @param {AccountId32Like | undefined} prime
     * @param {number} oldCount
     **/
    setMembers: GenericTxCall<
      Rv,
      (
        newMembers: Array<AccountId32Like>,
        prime: AccountId32Like | undefined,
        oldCount: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Council';
        palletCall: {
          name: 'SetMembers';
          params: { newMembers: Array<AccountId32Like>; prime: AccountId32Like | undefined; oldCount: number };
        };
      }>
    >;

    /**
     * See [`Pallet::execute`].
     *
     * @param {KitchensinkRuntimeRuntimeCallLike} proposal
     * @param {number} lengthBound
     **/
    execute: GenericTxCall<
      Rv,
      (
        proposal: KitchensinkRuntimeRuntimeCallLike,
        lengthBound: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Council';
        palletCall: {
          name: 'Execute';
          params: { proposal: KitchensinkRuntimeRuntimeCallLike; lengthBound: number };
        };
      }>
    >;

    /**
     * See [`Pallet::propose`].
     *
     * @param {number} threshold
     * @param {KitchensinkRuntimeRuntimeCallLike} proposal
     * @param {number} lengthBound
     **/
    propose: GenericTxCall<
      Rv,
      (
        threshold: number,
        proposal: KitchensinkRuntimeRuntimeCallLike,
        lengthBound: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Council';
        palletCall: {
          name: 'Propose';
          params: { threshold: number; proposal: KitchensinkRuntimeRuntimeCallLike; lengthBound: number };
        };
      }>
    >;

    /**
     * See [`Pallet::vote`].
     *
     * @param {H256} proposal
     * @param {number} index
     * @param {boolean} approve
     **/
    vote: GenericTxCall<
      Rv,
      (
        proposal: H256,
        index: number,
        approve: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Council';
        palletCall: {
          name: 'Vote';
          params: { proposal: H256; index: number; approve: boolean };
        };
      }>
    >;

    /**
     * See [`Pallet::disapprove_proposal`].
     *
     * @param {H256} proposalHash
     **/
    disapproveProposal: GenericTxCall<
      Rv,
      (proposalHash: H256) => ChainSubmittableExtrinsic<{
        pallet: 'Council';
        palletCall: {
          name: 'DisapproveProposal';
          params: { proposalHash: H256 };
        };
      }>
    >;

    /**
     * See [`Pallet::close`].
     *
     * @param {H256} proposalHash
     * @param {number} index
     * @param {SpWeightsWeightV2Weight} proposalWeightBound
     * @param {number} lengthBound
     **/
    close: GenericTxCall<
      Rv,
      (
        proposalHash: H256,
        index: number,
        proposalWeightBound: SpWeightsWeightV2Weight,
        lengthBound: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Council';
        palletCall: {
          name: 'Close';
          params: {
            proposalHash: H256;
            index: number;
            proposalWeightBound: SpWeightsWeightV2Weight;
            lengthBound: number;
          };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall>;
  };
  /**
   * Pallet `TechnicalCommittee`'s transaction calls
   **/
  technicalCommittee: {
    /**
     * See [`Pallet::set_members`].
     *
     * @param {Array<AccountId32Like>} newMembers
     * @param {AccountId32Like | undefined} prime
     * @param {number} oldCount
     **/
    setMembers: GenericTxCall<
      Rv,
      (
        newMembers: Array<AccountId32Like>,
        prime: AccountId32Like | undefined,
        oldCount: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'TechnicalCommittee';
        palletCall: {
          name: 'SetMembers';
          params: { newMembers: Array<AccountId32Like>; prime: AccountId32Like | undefined; oldCount: number };
        };
      }>
    >;

    /**
     * See [`Pallet::execute`].
     *
     * @param {KitchensinkRuntimeRuntimeCallLike} proposal
     * @param {number} lengthBound
     **/
    execute: GenericTxCall<
      Rv,
      (
        proposal: KitchensinkRuntimeRuntimeCallLike,
        lengthBound: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'TechnicalCommittee';
        palletCall: {
          name: 'Execute';
          params: { proposal: KitchensinkRuntimeRuntimeCallLike; lengthBound: number };
        };
      }>
    >;

    /**
     * See [`Pallet::propose`].
     *
     * @param {number} threshold
     * @param {KitchensinkRuntimeRuntimeCallLike} proposal
     * @param {number} lengthBound
     **/
    propose: GenericTxCall<
      Rv,
      (
        threshold: number,
        proposal: KitchensinkRuntimeRuntimeCallLike,
        lengthBound: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'TechnicalCommittee';
        palletCall: {
          name: 'Propose';
          params: { threshold: number; proposal: KitchensinkRuntimeRuntimeCallLike; lengthBound: number };
        };
      }>
    >;

    /**
     * See [`Pallet::vote`].
     *
     * @param {H256} proposal
     * @param {number} index
     * @param {boolean} approve
     **/
    vote: GenericTxCall<
      Rv,
      (
        proposal: H256,
        index: number,
        approve: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'TechnicalCommittee';
        palletCall: {
          name: 'Vote';
          params: { proposal: H256; index: number; approve: boolean };
        };
      }>
    >;

    /**
     * See [`Pallet::disapprove_proposal`].
     *
     * @param {H256} proposalHash
     **/
    disapproveProposal: GenericTxCall<
      Rv,
      (proposalHash: H256) => ChainSubmittableExtrinsic<{
        pallet: 'TechnicalCommittee';
        palletCall: {
          name: 'DisapproveProposal';
          params: { proposalHash: H256 };
        };
      }>
    >;

    /**
     * See [`Pallet::close`].
     *
     * @param {H256} proposalHash
     * @param {number} index
     * @param {SpWeightsWeightV2Weight} proposalWeightBound
     * @param {number} lengthBound
     **/
    close: GenericTxCall<
      Rv,
      (
        proposalHash: H256,
        index: number,
        proposalWeightBound: SpWeightsWeightV2Weight,
        lengthBound: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'TechnicalCommittee';
        palletCall: {
          name: 'Close';
          params: {
            proposalHash: H256;
            index: number;
            proposalWeightBound: SpWeightsWeightV2Weight;
            lengthBound: number;
          };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall>;
  };
  /**
   * Pallet `Elections`'s transaction calls
   **/
  elections: {
    /**
     * See [`Pallet::vote`].
     *
     * @param {Array<AccountId32Like>} votes
     * @param {bigint} value
     **/
    vote: GenericTxCall<
      Rv,
      (
        votes: Array<AccountId32Like>,
        value: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Elections';
        palletCall: {
          name: 'Vote';
          params: { votes: Array<AccountId32Like>; value: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_voter`].
     *
     **/
    removeVoter: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<{
        pallet: 'Elections';
        palletCall: {
          name: 'RemoveVoter';
        };
      }>
    >;

    /**
     * See [`Pallet::submit_candidacy`].
     *
     * @param {number} candidateCount
     **/
    submitCandidacy: GenericTxCall<
      Rv,
      (candidateCount: number) => ChainSubmittableExtrinsic<{
        pallet: 'Elections';
        palletCall: {
          name: 'SubmitCandidacy';
          params: { candidateCount: number };
        };
      }>
    >;

    /**
     * See [`Pallet::renounce_candidacy`].
     *
     * @param {PalletElectionsPhragmenRenouncing} renouncing
     **/
    renounceCandidacy: GenericTxCall<
      Rv,
      (renouncing: PalletElectionsPhragmenRenouncing) => ChainSubmittableExtrinsic<{
        pallet: 'Elections';
        palletCall: {
          name: 'RenounceCandidacy';
          params: { renouncing: PalletElectionsPhragmenRenouncing };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_member`].
     *
     * @param {MultiAddressLike} who
     * @param {boolean} slashBond
     * @param {boolean} rerunElection
     **/
    removeMember: GenericTxCall<
      Rv,
      (
        who: MultiAddressLike,
        slashBond: boolean,
        rerunElection: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Elections';
        palletCall: {
          name: 'RemoveMember';
          params: { who: MultiAddressLike; slashBond: boolean; rerunElection: boolean };
        };
      }>
    >;

    /**
     * See [`Pallet::clean_defunct_voters`].
     *
     * @param {number} numVoters
     * @param {number} numDefunct
     **/
    cleanDefunctVoters: GenericTxCall<
      Rv,
      (
        numVoters: number,
        numDefunct: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Elections';
        palletCall: {
          name: 'CleanDefunctVoters';
          params: { numVoters: number; numDefunct: number };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall>;
  };
  /**
   * Pallet `TechnicalMembership`'s transaction calls
   **/
  technicalMembership: {
    /**
     * See [`Pallet::add_member`].
     *
     * @param {MultiAddressLike} who
     **/
    addMember: GenericTxCall<
      Rv,
      (who: MultiAddressLike) => ChainSubmittableExtrinsic<{
        pallet: 'TechnicalMembership';
        palletCall: {
          name: 'AddMember';
          params: { who: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_member`].
     *
     * @param {MultiAddressLike} who
     **/
    removeMember: GenericTxCall<
      Rv,
      (who: MultiAddressLike) => ChainSubmittableExtrinsic<{
        pallet: 'TechnicalMembership';
        palletCall: {
          name: 'RemoveMember';
          params: { who: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::swap_member`].
     *
     * @param {MultiAddressLike} remove
     * @param {MultiAddressLike} add
     **/
    swapMember: GenericTxCall<
      Rv,
      (
        remove: MultiAddressLike,
        add: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'TechnicalMembership';
        palletCall: {
          name: 'SwapMember';
          params: { remove: MultiAddressLike; add: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::reset_members`].
     *
     * @param {Array<AccountId32Like>} members
     **/
    resetMembers: GenericTxCall<
      Rv,
      (members: Array<AccountId32Like>) => ChainSubmittableExtrinsic<{
        pallet: 'TechnicalMembership';
        palletCall: {
          name: 'ResetMembers';
          params: { members: Array<AccountId32Like> };
        };
      }>
    >;

    /**
     * See [`Pallet::change_key`].
     *
     * @param {MultiAddressLike} new_
     **/
    changeKey: GenericTxCall<
      Rv,
      (new_: MultiAddressLike) => ChainSubmittableExtrinsic<{
        pallet: 'TechnicalMembership';
        palletCall: {
          name: 'ChangeKey';
          params: { new: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::set_prime`].
     *
     * @param {MultiAddressLike} who
     **/
    setPrime: GenericTxCall<
      Rv,
      (who: MultiAddressLike) => ChainSubmittableExtrinsic<{
        pallet: 'TechnicalMembership';
        palletCall: {
          name: 'SetPrime';
          params: { who: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::clear_prime`].
     *
     **/
    clearPrime: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<{
        pallet: 'TechnicalMembership';
        palletCall: {
          name: 'ClearPrime';
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall>;
  };
  /**
   * Pallet `Grandpa`'s transaction calls
   **/
  grandpa: {
    /**
     * See [`Pallet::report_equivocation`].
     *
     * @param {SpConsensusGrandpaEquivocationProof} equivocationProof
     * @param {SpSessionMembershipProof} keyOwnerProof
     **/
    reportEquivocation: GenericTxCall<
      Rv,
      (
        equivocationProof: SpConsensusGrandpaEquivocationProof,
        keyOwnerProof: SpSessionMembershipProof,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Grandpa';
        palletCall: {
          name: 'ReportEquivocation';
          params: { equivocationProof: SpConsensusGrandpaEquivocationProof; keyOwnerProof: SpSessionMembershipProof };
        };
      }>
    >;

    /**
     * See [`Pallet::report_equivocation_unsigned`].
     *
     * @param {SpConsensusGrandpaEquivocationProof} equivocationProof
     * @param {SpSessionMembershipProof} keyOwnerProof
     **/
    reportEquivocationUnsigned: GenericTxCall<
      Rv,
      (
        equivocationProof: SpConsensusGrandpaEquivocationProof,
        keyOwnerProof: SpSessionMembershipProof,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Grandpa';
        palletCall: {
          name: 'ReportEquivocationUnsigned';
          params: { equivocationProof: SpConsensusGrandpaEquivocationProof; keyOwnerProof: SpSessionMembershipProof };
        };
      }>
    >;

    /**
     * See [`Pallet::note_stalled`].
     *
     * @param {number} delay
     * @param {number} bestFinalizedBlockNumber
     **/
    noteStalled: GenericTxCall<
      Rv,
      (
        delay: number,
        bestFinalizedBlockNumber: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Grandpa';
        palletCall: {
          name: 'NoteStalled';
          params: { delay: number; bestFinalizedBlockNumber: number };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall>;
  };
  /**
   * Pallet `Treasury`'s transaction calls
   **/
  treasury: {
    /**
     * See [`Pallet::propose_spend`].
     *
     * @param {bigint} value
     * @param {MultiAddressLike} beneficiary
     **/
    proposeSpend: GenericTxCall<
      Rv,
      (
        value: bigint,
        beneficiary: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Treasury';
        palletCall: {
          name: 'ProposeSpend';
          params: { value: bigint; beneficiary: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::reject_proposal`].
     *
     * @param {number} proposalId
     **/
    rejectProposal: GenericTxCall<
      Rv,
      (proposalId: number) => ChainSubmittableExtrinsic<{
        pallet: 'Treasury';
        palletCall: {
          name: 'RejectProposal';
          params: { proposalId: number };
        };
      }>
    >;

    /**
     * See [`Pallet::approve_proposal`].
     *
     * @param {number} proposalId
     **/
    approveProposal: GenericTxCall<
      Rv,
      (proposalId: number) => ChainSubmittableExtrinsic<{
        pallet: 'Treasury';
        palletCall: {
          name: 'ApproveProposal';
          params: { proposalId: number };
        };
      }>
    >;

    /**
     * See [`Pallet::spend`].
     *
     * @param {bigint} amount
     * @param {MultiAddressLike} beneficiary
     **/
    spend: GenericTxCall<
      Rv,
      (
        amount: bigint,
        beneficiary: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Treasury';
        palletCall: {
          name: 'Spend';
          params: { amount: bigint; beneficiary: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_approval`].
     *
     * @param {number} proposalId
     **/
    removeApproval: GenericTxCall<
      Rv,
      (proposalId: number) => ChainSubmittableExtrinsic<{
        pallet: 'Treasury';
        palletCall: {
          name: 'RemoveApproval';
          params: { proposalId: number };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall>;
  };
  /**
   * Pallet `AssetRate`'s transaction calls
   **/
  assetRate: {
    /**
     * See [`Pallet::create`].
     *
     * @param {number} assetKind
     * @param {FixedU128} rate
     **/
    create: GenericTxCall<
      Rv,
      (
        assetKind: number,
        rate: FixedU128,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'AssetRate';
        palletCall: {
          name: 'Create';
          params: { assetKind: number; rate: FixedU128 };
        };
      }>
    >;

    /**
     * See [`Pallet::update`].
     *
     * @param {number} assetKind
     * @param {FixedU128} rate
     **/
    update: GenericTxCall<
      Rv,
      (
        assetKind: number,
        rate: FixedU128,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'AssetRate';
        palletCall: {
          name: 'Update';
          params: { assetKind: number; rate: FixedU128 };
        };
      }>
    >;

    /**
     * See [`Pallet::remove`].
     *
     * @param {number} assetKind
     **/
    remove: GenericTxCall<
      Rv,
      (assetKind: number) => ChainSubmittableExtrinsic<{
        pallet: 'AssetRate';
        palletCall: {
          name: 'Remove';
          params: { assetKind: number };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall>;
  };
  /**
   * Pallet `Contracts`'s transaction calls
   **/
  contracts: {
    /**
     * See [`Pallet::call_old_weight`].
     *
     * @param {MultiAddressLike} dest
     * @param {bigint} value
     * @param {bigint} gasLimit
     * @param {bigint | undefined} storageDepositLimit
     * @param {BytesLike} data
     **/
    callOldWeight: GenericTxCall<
      Rv,
      (
        dest: MultiAddressLike,
        value: bigint,
        gasLimit: bigint,
        storageDepositLimit: bigint | undefined,
        data: BytesLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Contracts';
        palletCall: {
          name: 'CallOldWeight';
          params: {
            dest: MultiAddressLike;
            value: bigint;
            gasLimit: bigint;
            storageDepositLimit: bigint | undefined;
            data: BytesLike;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::instantiate_with_code_old_weight`].
     *
     * @param {bigint} value
     * @param {bigint} gasLimit
     * @param {bigint | undefined} storageDepositLimit
     * @param {BytesLike} code
     * @param {BytesLike} data
     * @param {BytesLike} salt
     **/
    instantiateWithCodeOldWeight: GenericTxCall<
      Rv,
      (
        value: bigint,
        gasLimit: bigint,
        storageDepositLimit: bigint | undefined,
        code: BytesLike,
        data: BytesLike,
        salt: BytesLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Contracts';
        palletCall: {
          name: 'InstantiateWithCodeOldWeight';
          params: {
            value: bigint;
            gasLimit: bigint;
            storageDepositLimit: bigint | undefined;
            code: BytesLike;
            data: BytesLike;
            salt: BytesLike;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::instantiate_old_weight`].
     *
     * @param {bigint} value
     * @param {bigint} gasLimit
     * @param {bigint | undefined} storageDepositLimit
     * @param {H256} codeHash
     * @param {BytesLike} data
     * @param {BytesLike} salt
     **/
    instantiateOldWeight: GenericTxCall<
      Rv,
      (
        value: bigint,
        gasLimit: bigint,
        storageDepositLimit: bigint | undefined,
        codeHash: H256,
        data: BytesLike,
        salt: BytesLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Contracts';
        palletCall: {
          name: 'InstantiateOldWeight';
          params: {
            value: bigint;
            gasLimit: bigint;
            storageDepositLimit: bigint | undefined;
            codeHash: H256;
            data: BytesLike;
            salt: BytesLike;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::upload_code`].
     *
     * @param {BytesLike} code
     * @param {bigint | undefined} storageDepositLimit
     * @param {PalletContractsWasmDeterminism} determinism
     **/
    uploadCode: GenericTxCall<
      Rv,
      (
        code: BytesLike,
        storageDepositLimit: bigint | undefined,
        determinism: PalletContractsWasmDeterminism,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Contracts';
        palletCall: {
          name: 'UploadCode';
          params: {
            code: BytesLike;
            storageDepositLimit: bigint | undefined;
            determinism: PalletContractsWasmDeterminism;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_code`].
     *
     * @param {H256} codeHash
     **/
    removeCode: GenericTxCall<
      Rv,
      (codeHash: H256) => ChainSubmittableExtrinsic<{
        pallet: 'Contracts';
        palletCall: {
          name: 'RemoveCode';
          params: { codeHash: H256 };
        };
      }>
    >;

    /**
     * See [`Pallet::set_code`].
     *
     * @param {MultiAddressLike} dest
     * @param {H256} codeHash
     **/
    setCode: GenericTxCall<
      Rv,
      (
        dest: MultiAddressLike,
        codeHash: H256,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Contracts';
        palletCall: {
          name: 'SetCode';
          params: { dest: MultiAddressLike; codeHash: H256 };
        };
      }>
    >;

    /**
     * See [`Pallet::call`].
     *
     * @param {MultiAddressLike} dest
     * @param {bigint} value
     * @param {SpWeightsWeightV2Weight} gasLimit
     * @param {bigint | undefined} storageDepositLimit
     * @param {BytesLike} data
     **/
    call: GenericTxCall<
      Rv,
      (
        dest: MultiAddressLike,
        value: bigint,
        gasLimit: SpWeightsWeightV2Weight,
        storageDepositLimit: bigint | undefined,
        data: BytesLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Contracts';
        palletCall: {
          name: 'Call';
          params: {
            dest: MultiAddressLike;
            value: bigint;
            gasLimit: SpWeightsWeightV2Weight;
            storageDepositLimit: bigint | undefined;
            data: BytesLike;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::instantiate_with_code`].
     *
     * @param {bigint} value
     * @param {SpWeightsWeightV2Weight} gasLimit
     * @param {bigint | undefined} storageDepositLimit
     * @param {BytesLike} code
     * @param {BytesLike} data
     * @param {BytesLike} salt
     **/
    instantiateWithCode: GenericTxCall<
      Rv,
      (
        value: bigint,
        gasLimit: SpWeightsWeightV2Weight,
        storageDepositLimit: bigint | undefined,
        code: BytesLike,
        data: BytesLike,
        salt: BytesLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Contracts';
        palletCall: {
          name: 'InstantiateWithCode';
          params: {
            value: bigint;
            gasLimit: SpWeightsWeightV2Weight;
            storageDepositLimit: bigint | undefined;
            code: BytesLike;
            data: BytesLike;
            salt: BytesLike;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::instantiate`].
     *
     * @param {bigint} value
     * @param {SpWeightsWeightV2Weight} gasLimit
     * @param {bigint | undefined} storageDepositLimit
     * @param {H256} codeHash
     * @param {BytesLike} data
     * @param {BytesLike} salt
     **/
    instantiate: GenericTxCall<
      Rv,
      (
        value: bigint,
        gasLimit: SpWeightsWeightV2Weight,
        storageDepositLimit: bigint | undefined,
        codeHash: H256,
        data: BytesLike,
        salt: BytesLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Contracts';
        palletCall: {
          name: 'Instantiate';
          params: {
            value: bigint;
            gasLimit: SpWeightsWeightV2Weight;
            storageDepositLimit: bigint | undefined;
            codeHash: H256;
            data: BytesLike;
            salt: BytesLike;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::migrate`].
     *
     * @param {SpWeightsWeightV2Weight} weightLimit
     **/
    migrate: GenericTxCall<
      Rv,
      (weightLimit: SpWeightsWeightV2Weight) => ChainSubmittableExtrinsic<{
        pallet: 'Contracts';
        palletCall: {
          name: 'Migrate';
          params: { weightLimit: SpWeightsWeightV2Weight };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall>;
  };
  /**
   * Pallet `Sudo`'s transaction calls
   **/
  sudo: {
    /**
     * See [`Pallet::sudo`].
     *
     * @param {KitchensinkRuntimeRuntimeCallLike} call
     **/
    sudo: GenericTxCall<
      Rv,
      (call: KitchensinkRuntimeRuntimeCallLike) => ChainSubmittableExtrinsic<{
        pallet: 'Sudo';
        palletCall: {
          name: 'Sudo';
          params: { call: KitchensinkRuntimeRuntimeCallLike };
        };
      }>
    >;

    /**
     * See [`Pallet::sudo_unchecked_weight`].
     *
     * @param {KitchensinkRuntimeRuntimeCallLike} call
     * @param {SpWeightsWeightV2Weight} weight
     **/
    sudoUncheckedWeight: GenericTxCall<
      Rv,
      (
        call: KitchensinkRuntimeRuntimeCallLike,
        weight: SpWeightsWeightV2Weight,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Sudo';
        palletCall: {
          name: 'SudoUncheckedWeight';
          params: { call: KitchensinkRuntimeRuntimeCallLike; weight: SpWeightsWeightV2Weight };
        };
      }>
    >;

    /**
     * See [`Pallet::set_key`].
     *
     * @param {MultiAddressLike} new_
     **/
    setKey: GenericTxCall<
      Rv,
      (new_: MultiAddressLike) => ChainSubmittableExtrinsic<{
        pallet: 'Sudo';
        palletCall: {
          name: 'SetKey';
          params: { new: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::sudo_as`].
     *
     * @param {MultiAddressLike} who
     * @param {KitchensinkRuntimeRuntimeCallLike} call
     **/
    sudoAs: GenericTxCall<
      Rv,
      (
        who: MultiAddressLike,
        call: KitchensinkRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Sudo';
        palletCall: {
          name: 'SudoAs';
          params: { who: MultiAddressLike; call: KitchensinkRuntimeRuntimeCallLike };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall>;
  };
  /**
   * Pallet `ImOnline`'s transaction calls
   **/
  imOnline: {
    /**
     * See [`Pallet::heartbeat`].
     *
     * @param {PalletImOnlineHeartbeat} heartbeat
     * @param {PalletImOnlineSr25519AppSr25519Signature} signature
     **/
    heartbeat: GenericTxCall<
      Rv,
      (
        heartbeat: PalletImOnlineHeartbeat,
        signature: PalletImOnlineSr25519AppSr25519Signature,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ImOnline';
        palletCall: {
          name: 'Heartbeat';
          params: { heartbeat: PalletImOnlineHeartbeat; signature: PalletImOnlineSr25519AppSr25519Signature };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall>;
  };
  /**
   * Pallet `Identity`'s transaction calls
   **/
  identity: {
    /**
     * See [`Pallet::add_registrar`].
     *
     * @param {MultiAddressLike} account
     **/
    addRegistrar: GenericTxCall<
      Rv,
      (account: MultiAddressLike) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'AddRegistrar';
          params: { account: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::set_identity`].
     *
     * @param {PalletIdentityIdentityInfo} info
     **/
    setIdentity: GenericTxCall<
      Rv,
      (info: PalletIdentityIdentityInfo) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'SetIdentity';
          params: { info: PalletIdentityIdentityInfo };
        };
      }>
    >;

    /**
     * See [`Pallet::set_subs`].
     *
     * @param {Array<[AccountId32Like, Data]>} subs
     **/
    setSubs: GenericTxCall<
      Rv,
      (subs: Array<[AccountId32Like, Data]>) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'SetSubs';
          params: { subs: Array<[AccountId32Like, Data]> };
        };
      }>
    >;

    /**
     * See [`Pallet::clear_identity`].
     *
     **/
    clearIdentity: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'ClearIdentity';
        };
      }>
    >;

    /**
     * See [`Pallet::request_judgement`].
     *
     * @param {number} regIndex
     * @param {bigint} maxFee
     **/
    requestJudgement: GenericTxCall<
      Rv,
      (
        regIndex: number,
        maxFee: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'RequestJudgement';
          params: { regIndex: number; maxFee: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::cancel_request`].
     *
     * @param {number} regIndex
     **/
    cancelRequest: GenericTxCall<
      Rv,
      (regIndex: number) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'CancelRequest';
          params: { regIndex: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_fee`].
     *
     * @param {number} index
     * @param {bigint} fee
     **/
    setFee: GenericTxCall<
      Rv,
      (
        index: number,
        fee: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'SetFee';
          params: { index: number; fee: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::set_account_id`].
     *
     * @param {number} index
     * @param {MultiAddressLike} new_
     **/
    setAccountId: GenericTxCall<
      Rv,
      (
        index: number,
        new_: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'SetAccountId';
          params: { index: number; new: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::set_fields`].
     *
     * @param {number} index
     * @param {PalletIdentityBitFlags} fields
     **/
    setFields: GenericTxCall<
      Rv,
      (
        index: number,
        fields: PalletIdentityBitFlags,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'SetFields';
          params: { index: number; fields: PalletIdentityBitFlags };
        };
      }>
    >;

    /**
     * See [`Pallet::provide_judgement`].
     *
     * @param {number} regIndex
     * @param {MultiAddressLike} target
     * @param {PalletIdentityJudgement} judgement
     * @param {H256} identity
     **/
    provideJudgement: GenericTxCall<
      Rv,
      (
        regIndex: number,
        target: MultiAddressLike,
        judgement: PalletIdentityJudgement,
        identity: H256,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'ProvideJudgement';
          params: { regIndex: number; target: MultiAddressLike; judgement: PalletIdentityJudgement; identity: H256 };
        };
      }>
    >;

    /**
     * See [`Pallet::kill_identity`].
     *
     * @param {MultiAddressLike} target
     **/
    killIdentity: GenericTxCall<
      Rv,
      (target: MultiAddressLike) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'KillIdentity';
          params: { target: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::add_sub`].
     *
     * @param {MultiAddressLike} sub
     * @param {Data} data
     **/
    addSub: GenericTxCall<
      Rv,
      (
        sub: MultiAddressLike,
        data: Data,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'AddSub';
          params: { sub: MultiAddressLike; data: Data };
        };
      }>
    >;

    /**
     * See [`Pallet::rename_sub`].
     *
     * @param {MultiAddressLike} sub
     * @param {Data} data
     **/
    renameSub: GenericTxCall<
      Rv,
      (
        sub: MultiAddressLike,
        data: Data,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'RenameSub';
          params: { sub: MultiAddressLike; data: Data };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_sub`].
     *
     * @param {MultiAddressLike} sub
     **/
    removeSub: GenericTxCall<
      Rv,
      (sub: MultiAddressLike) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'RemoveSub';
          params: { sub: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::quit_sub`].
     *
     **/
    quitSub: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'QuitSub';
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall>;
  };
  /**
   * Pallet `Society`'s transaction calls
   **/
  society: {
    /**
     * See [`Pallet::bid`].
     *
     * @param {bigint} value
     **/
    bid: GenericTxCall<
      Rv,
      (value: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'Society';
        palletCall: {
          name: 'Bid';
          params: { value: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::unbid`].
     *
     **/
    unbid: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<{
        pallet: 'Society';
        palletCall: {
          name: 'Unbid';
        };
      }>
    >;

    /**
     * See [`Pallet::vouch`].
     *
     * @param {MultiAddressLike} who
     * @param {bigint} value
     * @param {bigint} tip
     **/
    vouch: GenericTxCall<
      Rv,
      (
        who: MultiAddressLike,
        value: bigint,
        tip: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Society';
        palletCall: {
          name: 'Vouch';
          params: { who: MultiAddressLike; value: bigint; tip: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::unvouch`].
     *
     **/
    unvouch: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<{
        pallet: 'Society';
        palletCall: {
          name: 'Unvouch';
        };
      }>
    >;

    /**
     * See [`Pallet::vote`].
     *
     * @param {MultiAddressLike} candidate
     * @param {boolean} approve
     **/
    vote: GenericTxCall<
      Rv,
      (
        candidate: MultiAddressLike,
        approve: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Society';
        palletCall: {
          name: 'Vote';
          params: { candidate: MultiAddressLike; approve: boolean };
        };
      }>
    >;

    /**
     * See [`Pallet::defender_vote`].
     *
     * @param {boolean} approve
     **/
    defenderVote: GenericTxCall<
      Rv,
      (approve: boolean) => ChainSubmittableExtrinsic<{
        pallet: 'Society';
        palletCall: {
          name: 'DefenderVote';
          params: { approve: boolean };
        };
      }>
    >;

    /**
     * See [`Pallet::payout`].
     *
     **/
    payout: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<{
        pallet: 'Society';
        palletCall: {
          name: 'Payout';
        };
      }>
    >;

    /**
     * See [`Pallet::waive_repay`].
     *
     * @param {bigint} amount
     **/
    waiveRepay: GenericTxCall<
      Rv,
      (amount: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'Society';
        palletCall: {
          name: 'WaiveRepay';
          params: { amount: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::found_society`].
     *
     * @param {MultiAddressLike} founder
     * @param {number} maxMembers
     * @param {number} maxIntake
     * @param {number} maxStrikes
     * @param {bigint} candidateDeposit
     * @param {BytesLike} rules
     **/
    foundSociety: GenericTxCall<
      Rv,
      (
        founder: MultiAddressLike,
        maxMembers: number,
        maxIntake: number,
        maxStrikes: number,
        candidateDeposit: bigint,
        rules: BytesLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Society';
        palletCall: {
          name: 'FoundSociety';
          params: {
            founder: MultiAddressLike;
            maxMembers: number;
            maxIntake: number;
            maxStrikes: number;
            candidateDeposit: bigint;
            rules: BytesLike;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::dissolve`].
     *
     **/
    dissolve: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<{
        pallet: 'Society';
        palletCall: {
          name: 'Dissolve';
        };
      }>
    >;

    /**
     * See [`Pallet::judge_suspended_member`].
     *
     * @param {MultiAddressLike} who
     * @param {boolean} forgive
     **/
    judgeSuspendedMember: GenericTxCall<
      Rv,
      (
        who: MultiAddressLike,
        forgive: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Society';
        palletCall: {
          name: 'JudgeSuspendedMember';
          params: { who: MultiAddressLike; forgive: boolean };
        };
      }>
    >;

    /**
     * See [`Pallet::set_parameters`].
     *
     * @param {number} maxMembers
     * @param {number} maxIntake
     * @param {number} maxStrikes
     * @param {bigint} candidateDeposit
     **/
    setParameters: GenericTxCall<
      Rv,
      (
        maxMembers: number,
        maxIntake: number,
        maxStrikes: number,
        candidateDeposit: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Society';
        palletCall: {
          name: 'SetParameters';
          params: { maxMembers: number; maxIntake: number; maxStrikes: number; candidateDeposit: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::punish_skeptic`].
     *
     **/
    punishSkeptic: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<{
        pallet: 'Society';
        palletCall: {
          name: 'PunishSkeptic';
        };
      }>
    >;

    /**
     * See [`Pallet::claim_membership`].
     *
     **/
    claimMembership: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<{
        pallet: 'Society';
        palletCall: {
          name: 'ClaimMembership';
        };
      }>
    >;

    /**
     * See [`Pallet::bestow_membership`].
     *
     * @param {AccountId32Like} candidate
     **/
    bestowMembership: GenericTxCall<
      Rv,
      (candidate: AccountId32Like) => ChainSubmittableExtrinsic<{
        pallet: 'Society';
        palletCall: {
          name: 'BestowMembership';
          params: { candidate: AccountId32Like };
        };
      }>
    >;

    /**
     * See [`Pallet::kick_candidate`].
     *
     * @param {AccountId32Like} candidate
     **/
    kickCandidate: GenericTxCall<
      Rv,
      (candidate: AccountId32Like) => ChainSubmittableExtrinsic<{
        pallet: 'Society';
        palletCall: {
          name: 'KickCandidate';
          params: { candidate: AccountId32Like };
        };
      }>
    >;

    /**
     * See [`Pallet::resign_candidacy`].
     *
     **/
    resignCandidacy: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<{
        pallet: 'Society';
        palletCall: {
          name: 'ResignCandidacy';
        };
      }>
    >;

    /**
     * See [`Pallet::drop_candidate`].
     *
     * @param {AccountId32Like} candidate
     **/
    dropCandidate: GenericTxCall<
      Rv,
      (candidate: AccountId32Like) => ChainSubmittableExtrinsic<{
        pallet: 'Society';
        palletCall: {
          name: 'DropCandidate';
          params: { candidate: AccountId32Like };
        };
      }>
    >;

    /**
     * See [`Pallet::cleanup_candidacy`].
     *
     * @param {AccountId32Like} candidate
     * @param {number} max
     **/
    cleanupCandidacy: GenericTxCall<
      Rv,
      (
        candidate: AccountId32Like,
        max: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Society';
        palletCall: {
          name: 'CleanupCandidacy';
          params: { candidate: AccountId32Like; max: number };
        };
      }>
    >;

    /**
     * See [`Pallet::cleanup_challenge`].
     *
     * @param {number} challengeRound
     * @param {number} max
     **/
    cleanupChallenge: GenericTxCall<
      Rv,
      (
        challengeRound: number,
        max: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Society';
        palletCall: {
          name: 'CleanupChallenge';
          params: { challengeRound: number; max: number };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall>;
  };
  /**
   * Pallet `Recovery`'s transaction calls
   **/
  recovery: {
    /**
     * See [`Pallet::as_recovered`].
     *
     * @param {MultiAddressLike} account
     * @param {KitchensinkRuntimeRuntimeCallLike} call
     **/
    asRecovered: GenericTxCall<
      Rv,
      (
        account: MultiAddressLike,
        call: KitchensinkRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Recovery';
        palletCall: {
          name: 'AsRecovered';
          params: { account: MultiAddressLike; call: KitchensinkRuntimeRuntimeCallLike };
        };
      }>
    >;

    /**
     * See [`Pallet::set_recovered`].
     *
     * @param {MultiAddressLike} lost
     * @param {MultiAddressLike} rescuer
     **/
    setRecovered: GenericTxCall<
      Rv,
      (
        lost: MultiAddressLike,
        rescuer: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Recovery';
        palletCall: {
          name: 'SetRecovered';
          params: { lost: MultiAddressLike; rescuer: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::create_recovery`].
     *
     * @param {Array<AccountId32Like>} friends
     * @param {number} threshold
     * @param {number} delayPeriod
     **/
    createRecovery: GenericTxCall<
      Rv,
      (
        friends: Array<AccountId32Like>,
        threshold: number,
        delayPeriod: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Recovery';
        palletCall: {
          name: 'CreateRecovery';
          params: { friends: Array<AccountId32Like>; threshold: number; delayPeriod: number };
        };
      }>
    >;

    /**
     * See [`Pallet::initiate_recovery`].
     *
     * @param {MultiAddressLike} account
     **/
    initiateRecovery: GenericTxCall<
      Rv,
      (account: MultiAddressLike) => ChainSubmittableExtrinsic<{
        pallet: 'Recovery';
        palletCall: {
          name: 'InitiateRecovery';
          params: { account: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::vouch_recovery`].
     *
     * @param {MultiAddressLike} lost
     * @param {MultiAddressLike} rescuer
     **/
    vouchRecovery: GenericTxCall<
      Rv,
      (
        lost: MultiAddressLike,
        rescuer: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Recovery';
        palletCall: {
          name: 'VouchRecovery';
          params: { lost: MultiAddressLike; rescuer: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::claim_recovery`].
     *
     * @param {MultiAddressLike} account
     **/
    claimRecovery: GenericTxCall<
      Rv,
      (account: MultiAddressLike) => ChainSubmittableExtrinsic<{
        pallet: 'Recovery';
        palletCall: {
          name: 'ClaimRecovery';
          params: { account: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::close_recovery`].
     *
     * @param {MultiAddressLike} rescuer
     **/
    closeRecovery: GenericTxCall<
      Rv,
      (rescuer: MultiAddressLike) => ChainSubmittableExtrinsic<{
        pallet: 'Recovery';
        palletCall: {
          name: 'CloseRecovery';
          params: { rescuer: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_recovery`].
     *
     **/
    removeRecovery: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<{
        pallet: 'Recovery';
        palletCall: {
          name: 'RemoveRecovery';
        };
      }>
    >;

    /**
     * See [`Pallet::cancel_recovered`].
     *
     * @param {MultiAddressLike} account
     **/
    cancelRecovered: GenericTxCall<
      Rv,
      (account: MultiAddressLike) => ChainSubmittableExtrinsic<{
        pallet: 'Recovery';
        palletCall: {
          name: 'CancelRecovered';
          params: { account: MultiAddressLike };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall>;
  };
  /**
   * Pallet `Vesting`'s transaction calls
   **/
  vesting: {
    /**
     * See [`Pallet::vest`].
     *
     **/
    vest: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<{
        pallet: 'Vesting';
        palletCall: {
          name: 'Vest';
        };
      }>
    >;

    /**
     * See [`Pallet::vest_other`].
     *
     * @param {MultiAddressLike} target
     **/
    vestOther: GenericTxCall<
      Rv,
      (target: MultiAddressLike) => ChainSubmittableExtrinsic<{
        pallet: 'Vesting';
        palletCall: {
          name: 'VestOther';
          params: { target: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::vested_transfer`].
     *
     * @param {MultiAddressLike} target
     * @param {PalletVestingVestingInfo} schedule
     **/
    vestedTransfer: GenericTxCall<
      Rv,
      (
        target: MultiAddressLike,
        schedule: PalletVestingVestingInfo,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Vesting';
        palletCall: {
          name: 'VestedTransfer';
          params: { target: MultiAddressLike; schedule: PalletVestingVestingInfo };
        };
      }>
    >;

    /**
     * See [`Pallet::force_vested_transfer`].
     *
     * @param {MultiAddressLike} source
     * @param {MultiAddressLike} target
     * @param {PalletVestingVestingInfo} schedule
     **/
    forceVestedTransfer: GenericTxCall<
      Rv,
      (
        source: MultiAddressLike,
        target: MultiAddressLike,
        schedule: PalletVestingVestingInfo,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Vesting';
        palletCall: {
          name: 'ForceVestedTransfer';
          params: { source: MultiAddressLike; target: MultiAddressLike; schedule: PalletVestingVestingInfo };
        };
      }>
    >;

    /**
     * See [`Pallet::merge_schedules`].
     *
     * @param {number} schedule1Index
     * @param {number} schedule2Index
     **/
    mergeSchedules: GenericTxCall<
      Rv,
      (
        schedule1Index: number,
        schedule2Index: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Vesting';
        palletCall: {
          name: 'MergeSchedules';
          params: { schedule1Index: number; schedule2Index: number };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall>;
  };
  /**
   * Pallet `Scheduler`'s transaction calls
   **/
  scheduler: {
    /**
     * See [`Pallet::schedule`].
     *
     * @param {number} when
     * @param {[number, number] | undefined} maybePeriodic
     * @param {number} priority
     * @param {KitchensinkRuntimeRuntimeCallLike} call
     **/
    schedule: GenericTxCall<
      Rv,
      (
        when: number,
        maybePeriodic: [number, number] | undefined,
        priority: number,
        call: KitchensinkRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Scheduler';
        palletCall: {
          name: 'Schedule';
          params: {
            when: number;
            maybePeriodic: [number, number] | undefined;
            priority: number;
            call: KitchensinkRuntimeRuntimeCallLike;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::cancel`].
     *
     * @param {number} when
     * @param {number} index
     **/
    cancel: GenericTxCall<
      Rv,
      (
        when: number,
        index: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Scheduler';
        palletCall: {
          name: 'Cancel';
          params: { when: number; index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::schedule_named`].
     *
     * @param {FixedBytes<32>} id
     * @param {number} when
     * @param {[number, number] | undefined} maybePeriodic
     * @param {number} priority
     * @param {KitchensinkRuntimeRuntimeCallLike} call
     **/
    scheduleNamed: GenericTxCall<
      Rv,
      (
        id: FixedBytes<32>,
        when: number,
        maybePeriodic: [number, number] | undefined,
        priority: number,
        call: KitchensinkRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Scheduler';
        palletCall: {
          name: 'ScheduleNamed';
          params: {
            id: FixedBytes<32>;
            when: number;
            maybePeriodic: [number, number] | undefined;
            priority: number;
            call: KitchensinkRuntimeRuntimeCallLike;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::cancel_named`].
     *
     * @param {FixedBytes<32>} id
     **/
    cancelNamed: GenericTxCall<
      Rv,
      (id: FixedBytes<32>) => ChainSubmittableExtrinsic<{
        pallet: 'Scheduler';
        palletCall: {
          name: 'CancelNamed';
          params: { id: FixedBytes<32> };
        };
      }>
    >;

    /**
     * See [`Pallet::schedule_after`].
     *
     * @param {number} after
     * @param {[number, number] | undefined} maybePeriodic
     * @param {number} priority
     * @param {KitchensinkRuntimeRuntimeCallLike} call
     **/
    scheduleAfter: GenericTxCall<
      Rv,
      (
        after: number,
        maybePeriodic: [number, number] | undefined,
        priority: number,
        call: KitchensinkRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Scheduler';
        palletCall: {
          name: 'ScheduleAfter';
          params: {
            after: number;
            maybePeriodic: [number, number] | undefined;
            priority: number;
            call: KitchensinkRuntimeRuntimeCallLike;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::schedule_named_after`].
     *
     * @param {FixedBytes<32>} id
     * @param {number} after
     * @param {[number, number] | undefined} maybePeriodic
     * @param {number} priority
     * @param {KitchensinkRuntimeRuntimeCallLike} call
     **/
    scheduleNamedAfter: GenericTxCall<
      Rv,
      (
        id: FixedBytes<32>,
        after: number,
        maybePeriodic: [number, number] | undefined,
        priority: number,
        call: KitchensinkRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Scheduler';
        palletCall: {
          name: 'ScheduleNamedAfter';
          params: {
            id: FixedBytes<32>;
            after: number;
            maybePeriodic: [number, number] | undefined;
            priority: number;
            call: KitchensinkRuntimeRuntimeCallLike;
          };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall>;
  };
  /**
   * Pallet `Glutton`'s transaction calls
   **/
  glutton: {
    /**
     * See [`Pallet::initialize_pallet`].
     *
     * @param {number} newCount
     * @param {number | undefined} witnessCount
     **/
    initializePallet: GenericTxCall<
      Rv,
      (
        newCount: number,
        witnessCount: number | undefined,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Glutton';
        palletCall: {
          name: 'InitializePallet';
          params: { newCount: number; witnessCount: number | undefined };
        };
      }>
    >;

    /**
     * See [`Pallet::set_compute`].
     *
     * @param {FixedU64} compute
     **/
    setCompute: GenericTxCall<
      Rv,
      (compute: FixedU64) => ChainSubmittableExtrinsic<{
        pallet: 'Glutton';
        palletCall: {
          name: 'SetCompute';
          params: { compute: FixedU64 };
        };
      }>
    >;

    /**
     * See [`Pallet::set_storage`].
     *
     * @param {FixedU64} storage
     **/
    setStorage: GenericTxCall<
      Rv,
      (storage: FixedU64) => ChainSubmittableExtrinsic<{
        pallet: 'Glutton';
        palletCall: {
          name: 'SetStorage';
          params: { storage: FixedU64 };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall>;
  };
  /**
   * Pallet `Preimage`'s transaction calls
   **/
  preimage: {
    /**
     * See [`Pallet::note_preimage`].
     *
     * @param {BytesLike} bytes
     **/
    notePreimage: GenericTxCall<
      Rv,
      (bytes: BytesLike) => ChainSubmittableExtrinsic<{
        pallet: 'Preimage';
        palletCall: {
          name: 'NotePreimage';
          params: { bytes: BytesLike };
        };
      }>
    >;

    /**
     * See [`Pallet::unnote_preimage`].
     *
     * @param {H256} hash
     **/
    unnotePreimage: GenericTxCall<
      Rv,
      (hash: H256) => ChainSubmittableExtrinsic<{
        pallet: 'Preimage';
        palletCall: {
          name: 'UnnotePreimage';
          params: { hash: H256 };
        };
      }>
    >;

    /**
     * See [`Pallet::request_preimage`].
     *
     * @param {H256} hash
     **/
    requestPreimage: GenericTxCall<
      Rv,
      (hash: H256) => ChainSubmittableExtrinsic<{
        pallet: 'Preimage';
        palletCall: {
          name: 'RequestPreimage';
          params: { hash: H256 };
        };
      }>
    >;

    /**
     * See [`Pallet::unrequest_preimage`].
     *
     * @param {H256} hash
     **/
    unrequestPreimage: GenericTxCall<
      Rv,
      (hash: H256) => ChainSubmittableExtrinsic<{
        pallet: 'Preimage';
        palletCall: {
          name: 'UnrequestPreimage';
          params: { hash: H256 };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall>;
  };
  /**
   * Pallet `Proxy`'s transaction calls
   **/
  proxy: {
    /**
     * See [`Pallet::proxy`].
     *
     * @param {MultiAddressLike} real
     * @param {KitchensinkRuntimeProxyType | undefined} forceProxyType
     * @param {KitchensinkRuntimeRuntimeCallLike} call
     **/
    proxy: GenericTxCall<
      Rv,
      (
        real: MultiAddressLike,
        forceProxyType: KitchensinkRuntimeProxyType | undefined,
        call: KitchensinkRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Proxy';
        palletCall: {
          name: 'Proxy';
          params: {
            real: MultiAddressLike;
            forceProxyType: KitchensinkRuntimeProxyType | undefined;
            call: KitchensinkRuntimeRuntimeCallLike;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::add_proxy`].
     *
     * @param {MultiAddressLike} delegate
     * @param {KitchensinkRuntimeProxyType} proxyType
     * @param {number} delay
     **/
    addProxy: GenericTxCall<
      Rv,
      (
        delegate: MultiAddressLike,
        proxyType: KitchensinkRuntimeProxyType,
        delay: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Proxy';
        palletCall: {
          name: 'AddProxy';
          params: { delegate: MultiAddressLike; proxyType: KitchensinkRuntimeProxyType; delay: number };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_proxy`].
     *
     * @param {MultiAddressLike} delegate
     * @param {KitchensinkRuntimeProxyType} proxyType
     * @param {number} delay
     **/
    removeProxy: GenericTxCall<
      Rv,
      (
        delegate: MultiAddressLike,
        proxyType: KitchensinkRuntimeProxyType,
        delay: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Proxy';
        palletCall: {
          name: 'RemoveProxy';
          params: { delegate: MultiAddressLike; proxyType: KitchensinkRuntimeProxyType; delay: number };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_proxies`].
     *
     **/
    removeProxies: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<{
        pallet: 'Proxy';
        palletCall: {
          name: 'RemoveProxies';
        };
      }>
    >;

    /**
     * See [`Pallet::create_pure`].
     *
     * @param {KitchensinkRuntimeProxyType} proxyType
     * @param {number} delay
     * @param {number} index
     **/
    createPure: GenericTxCall<
      Rv,
      (
        proxyType: KitchensinkRuntimeProxyType,
        delay: number,
        index: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Proxy';
        palletCall: {
          name: 'CreatePure';
          params: { proxyType: KitchensinkRuntimeProxyType; delay: number; index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::kill_pure`].
     *
     * @param {MultiAddressLike} spawner
     * @param {KitchensinkRuntimeProxyType} proxyType
     * @param {number} index
     * @param {number} height
     * @param {number} extIndex
     **/
    killPure: GenericTxCall<
      Rv,
      (
        spawner: MultiAddressLike,
        proxyType: KitchensinkRuntimeProxyType,
        index: number,
        height: number,
        extIndex: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Proxy';
        palletCall: {
          name: 'KillPure';
          params: {
            spawner: MultiAddressLike;
            proxyType: KitchensinkRuntimeProxyType;
            index: number;
            height: number;
            extIndex: number;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::announce`].
     *
     * @param {MultiAddressLike} real
     * @param {H256} callHash
     **/
    announce: GenericTxCall<
      Rv,
      (
        real: MultiAddressLike,
        callHash: H256,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Proxy';
        palletCall: {
          name: 'Announce';
          params: { real: MultiAddressLike; callHash: H256 };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_announcement`].
     *
     * @param {MultiAddressLike} real
     * @param {H256} callHash
     **/
    removeAnnouncement: GenericTxCall<
      Rv,
      (
        real: MultiAddressLike,
        callHash: H256,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Proxy';
        palletCall: {
          name: 'RemoveAnnouncement';
          params: { real: MultiAddressLike; callHash: H256 };
        };
      }>
    >;

    /**
     * See [`Pallet::reject_announcement`].
     *
     * @param {MultiAddressLike} delegate
     * @param {H256} callHash
     **/
    rejectAnnouncement: GenericTxCall<
      Rv,
      (
        delegate: MultiAddressLike,
        callHash: H256,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Proxy';
        palletCall: {
          name: 'RejectAnnouncement';
          params: { delegate: MultiAddressLike; callHash: H256 };
        };
      }>
    >;

    /**
     * See [`Pallet::proxy_announced`].
     *
     * @param {MultiAddressLike} delegate
     * @param {MultiAddressLike} real
     * @param {KitchensinkRuntimeProxyType | undefined} forceProxyType
     * @param {KitchensinkRuntimeRuntimeCallLike} call
     **/
    proxyAnnounced: GenericTxCall<
      Rv,
      (
        delegate: MultiAddressLike,
        real: MultiAddressLike,
        forceProxyType: KitchensinkRuntimeProxyType | undefined,
        call: KitchensinkRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Proxy';
        palletCall: {
          name: 'ProxyAnnounced';
          params: {
            delegate: MultiAddressLike;
            real: MultiAddressLike;
            forceProxyType: KitchensinkRuntimeProxyType | undefined;
            call: KitchensinkRuntimeRuntimeCallLike;
          };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall>;
  };
  /**
   * Pallet `Multisig`'s transaction calls
   **/
  multisig: {
    /**
     * See [`Pallet::as_multi_threshold_1`].
     *
     * @param {Array<AccountId32Like>} otherSignatories
     * @param {KitchensinkRuntimeRuntimeCallLike} call
     **/
    asMultiThreshold1: GenericTxCall<
      Rv,
      (
        otherSignatories: Array<AccountId32Like>,
        call: KitchensinkRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Multisig';
        palletCall: {
          name: 'AsMultiThreshold1';
          params: { otherSignatories: Array<AccountId32Like>; call: KitchensinkRuntimeRuntimeCallLike };
        };
      }>
    >;

    /**
     * See [`Pallet::as_multi`].
     *
     * @param {number} threshold
     * @param {Array<AccountId32Like>} otherSignatories
     * @param {PalletMultisigTimepoint | undefined} maybeTimepoint
     * @param {KitchensinkRuntimeRuntimeCallLike} call
     * @param {SpWeightsWeightV2Weight} maxWeight
     **/
    asMulti: GenericTxCall<
      Rv,
      (
        threshold: number,
        otherSignatories: Array<AccountId32Like>,
        maybeTimepoint: PalletMultisigTimepoint | undefined,
        call: KitchensinkRuntimeRuntimeCallLike,
        maxWeight: SpWeightsWeightV2Weight,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Multisig';
        palletCall: {
          name: 'AsMulti';
          params: {
            threshold: number;
            otherSignatories: Array<AccountId32Like>;
            maybeTimepoint: PalletMultisigTimepoint | undefined;
            call: KitchensinkRuntimeRuntimeCallLike;
            maxWeight: SpWeightsWeightV2Weight;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::approve_as_multi`].
     *
     * @param {number} threshold
     * @param {Array<AccountId32Like>} otherSignatories
     * @param {PalletMultisigTimepoint | undefined} maybeTimepoint
     * @param {FixedBytes<32>} callHash
     * @param {SpWeightsWeightV2Weight} maxWeight
     **/
    approveAsMulti: GenericTxCall<
      Rv,
      (
        threshold: number,
        otherSignatories: Array<AccountId32Like>,
        maybeTimepoint: PalletMultisigTimepoint | undefined,
        callHash: FixedBytes<32>,
        maxWeight: SpWeightsWeightV2Weight,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Multisig';
        palletCall: {
          name: 'ApproveAsMulti';
          params: {
            threshold: number;
            otherSignatories: Array<AccountId32Like>;
            maybeTimepoint: PalletMultisigTimepoint | undefined;
            callHash: FixedBytes<32>;
            maxWeight: SpWeightsWeightV2Weight;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::cancel_as_multi`].
     *
     * @param {number} threshold
     * @param {Array<AccountId32Like>} otherSignatories
     * @param {PalletMultisigTimepoint} timepoint
     * @param {FixedBytes<32>} callHash
     **/
    cancelAsMulti: GenericTxCall<
      Rv,
      (
        threshold: number,
        otherSignatories: Array<AccountId32Like>,
        timepoint: PalletMultisigTimepoint,
        callHash: FixedBytes<32>,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Multisig';
        palletCall: {
          name: 'CancelAsMulti';
          params: {
            threshold: number;
            otherSignatories: Array<AccountId32Like>;
            timepoint: PalletMultisigTimepoint;
            callHash: FixedBytes<32>;
          };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall>;
  };
  /**
   * Pallet `Bounties`'s transaction calls
   **/
  bounties: {
    /**
     * See [`Pallet::propose_bounty`].
     *
     * @param {bigint} value
     * @param {BytesLike} description
     **/
    proposeBounty: GenericTxCall<
      Rv,
      (
        value: bigint,
        description: BytesLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Bounties';
        palletCall: {
          name: 'ProposeBounty';
          params: { value: bigint; description: BytesLike };
        };
      }>
    >;

    /**
     * See [`Pallet::approve_bounty`].
     *
     * @param {number} bountyId
     **/
    approveBounty: GenericTxCall<
      Rv,
      (bountyId: number) => ChainSubmittableExtrinsic<{
        pallet: 'Bounties';
        palletCall: {
          name: 'ApproveBounty';
          params: { bountyId: number };
        };
      }>
    >;

    /**
     * See [`Pallet::propose_curator`].
     *
     * @param {number} bountyId
     * @param {MultiAddressLike} curator
     * @param {bigint} fee
     **/
    proposeCurator: GenericTxCall<
      Rv,
      (
        bountyId: number,
        curator: MultiAddressLike,
        fee: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Bounties';
        palletCall: {
          name: 'ProposeCurator';
          params: { bountyId: number; curator: MultiAddressLike; fee: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::unassign_curator`].
     *
     * @param {number} bountyId
     **/
    unassignCurator: GenericTxCall<
      Rv,
      (bountyId: number) => ChainSubmittableExtrinsic<{
        pallet: 'Bounties';
        palletCall: {
          name: 'UnassignCurator';
          params: { bountyId: number };
        };
      }>
    >;

    /**
     * See [`Pallet::accept_curator`].
     *
     * @param {number} bountyId
     **/
    acceptCurator: GenericTxCall<
      Rv,
      (bountyId: number) => ChainSubmittableExtrinsic<{
        pallet: 'Bounties';
        palletCall: {
          name: 'AcceptCurator';
          params: { bountyId: number };
        };
      }>
    >;

    /**
     * See [`Pallet::award_bounty`].
     *
     * @param {number} bountyId
     * @param {MultiAddressLike} beneficiary
     **/
    awardBounty: GenericTxCall<
      Rv,
      (
        bountyId: number,
        beneficiary: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Bounties';
        palletCall: {
          name: 'AwardBounty';
          params: { bountyId: number; beneficiary: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::claim_bounty`].
     *
     * @param {number} bountyId
     **/
    claimBounty: GenericTxCall<
      Rv,
      (bountyId: number) => ChainSubmittableExtrinsic<{
        pallet: 'Bounties';
        palletCall: {
          name: 'ClaimBounty';
          params: { bountyId: number };
        };
      }>
    >;

    /**
     * See [`Pallet::close_bounty`].
     *
     * @param {number} bountyId
     **/
    closeBounty: GenericTxCall<
      Rv,
      (bountyId: number) => ChainSubmittableExtrinsic<{
        pallet: 'Bounties';
        palletCall: {
          name: 'CloseBounty';
          params: { bountyId: number };
        };
      }>
    >;

    /**
     * See [`Pallet::extend_bounty_expiry`].
     *
     * @param {number} bountyId
     * @param {BytesLike} remark
     **/
    extendBountyExpiry: GenericTxCall<
      Rv,
      (
        bountyId: number,
        remark: BytesLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Bounties';
        palletCall: {
          name: 'ExtendBountyExpiry';
          params: { bountyId: number; remark: BytesLike };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall>;
  };
  /**
   * Pallet `Tips`'s transaction calls
   **/
  tips: {
    /**
     * See [`Pallet::report_awesome`].
     *
     * @param {BytesLike} reason
     * @param {MultiAddressLike} who
     **/
    reportAwesome: GenericTxCall<
      Rv,
      (
        reason: BytesLike,
        who: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Tips';
        palletCall: {
          name: 'ReportAwesome';
          params: { reason: BytesLike; who: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::retract_tip`].
     *
     * @param {H256} hash
     **/
    retractTip: GenericTxCall<
      Rv,
      (hash: H256) => ChainSubmittableExtrinsic<{
        pallet: 'Tips';
        palletCall: {
          name: 'RetractTip';
          params: { hash: H256 };
        };
      }>
    >;

    /**
     * See [`Pallet::tip_new`].
     *
     * @param {BytesLike} reason
     * @param {MultiAddressLike} who
     * @param {bigint} tipValue
     **/
    tipNew: GenericTxCall<
      Rv,
      (
        reason: BytesLike,
        who: MultiAddressLike,
        tipValue: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Tips';
        palletCall: {
          name: 'TipNew';
          params: { reason: BytesLike; who: MultiAddressLike; tipValue: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::tip`].
     *
     * @param {H256} hash
     * @param {bigint} tipValue
     **/
    tip: GenericTxCall<
      Rv,
      (
        hash: H256,
        tipValue: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Tips';
        palletCall: {
          name: 'Tip';
          params: { hash: H256; tipValue: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::close_tip`].
     *
     * @param {H256} hash
     **/
    closeTip: GenericTxCall<
      Rv,
      (hash: H256) => ChainSubmittableExtrinsic<{
        pallet: 'Tips';
        palletCall: {
          name: 'CloseTip';
          params: { hash: H256 };
        };
      }>
    >;

    /**
     * See [`Pallet::slash_tip`].
     *
     * @param {H256} hash
     **/
    slashTip: GenericTxCall<
      Rv,
      (hash: H256) => ChainSubmittableExtrinsic<{
        pallet: 'Tips';
        palletCall: {
          name: 'SlashTip';
          params: { hash: H256 };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall>;
  };
  /**
   * Pallet `Assets`'s transaction calls
   **/
  assets: {
    /**
     * See [`Pallet::create`].
     *
     * @param {number} id
     * @param {MultiAddressLike} admin
     * @param {bigint} minBalance
     **/
    create: GenericTxCall<
      Rv,
      (
        id: number,
        admin: MultiAddressLike,
        minBalance: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'Create';
          params: { id: number; admin: MultiAddressLike; minBalance: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::force_create`].
     *
     * @param {number} id
     * @param {MultiAddressLike} owner
     * @param {boolean} isSufficient
     * @param {bigint} minBalance
     **/
    forceCreate: GenericTxCall<
      Rv,
      (
        id: number,
        owner: MultiAddressLike,
        isSufficient: boolean,
        minBalance: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'ForceCreate';
          params: { id: number; owner: MultiAddressLike; isSufficient: boolean; minBalance: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::start_destroy`].
     *
     * @param {number} id
     **/
    startDestroy: GenericTxCall<
      Rv,
      (id: number) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'StartDestroy';
          params: { id: number };
        };
      }>
    >;

    /**
     * See [`Pallet::destroy_accounts`].
     *
     * @param {number} id
     **/
    destroyAccounts: GenericTxCall<
      Rv,
      (id: number) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'DestroyAccounts';
          params: { id: number };
        };
      }>
    >;

    /**
     * See [`Pallet::destroy_approvals`].
     *
     * @param {number} id
     **/
    destroyApprovals: GenericTxCall<
      Rv,
      (id: number) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'DestroyApprovals';
          params: { id: number };
        };
      }>
    >;

    /**
     * See [`Pallet::finish_destroy`].
     *
     * @param {number} id
     **/
    finishDestroy: GenericTxCall<
      Rv,
      (id: number) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'FinishDestroy';
          params: { id: number };
        };
      }>
    >;

    /**
     * See [`Pallet::mint`].
     *
     * @param {number} id
     * @param {MultiAddressLike} beneficiary
     * @param {bigint} amount
     **/
    mint: GenericTxCall<
      Rv,
      (
        id: number,
        beneficiary: MultiAddressLike,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'Mint';
          params: { id: number; beneficiary: MultiAddressLike; amount: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::burn`].
     *
     * @param {number} id
     * @param {MultiAddressLike} who
     * @param {bigint} amount
     **/
    burn: GenericTxCall<
      Rv,
      (
        id: number,
        who: MultiAddressLike,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'Burn';
          params: { id: number; who: MultiAddressLike; amount: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer`].
     *
     * @param {number} id
     * @param {MultiAddressLike} target
     * @param {bigint} amount
     **/
    transfer: GenericTxCall<
      Rv,
      (
        id: number,
        target: MultiAddressLike,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'Transfer';
          params: { id: number; target: MultiAddressLike; amount: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer_keep_alive`].
     *
     * @param {number} id
     * @param {MultiAddressLike} target
     * @param {bigint} amount
     **/
    transferKeepAlive: GenericTxCall<
      Rv,
      (
        id: number,
        target: MultiAddressLike,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'TransferKeepAlive';
          params: { id: number; target: MultiAddressLike; amount: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::force_transfer`].
     *
     * @param {number} id
     * @param {MultiAddressLike} source
     * @param {MultiAddressLike} dest
     * @param {bigint} amount
     **/
    forceTransfer: GenericTxCall<
      Rv,
      (
        id: number,
        source: MultiAddressLike,
        dest: MultiAddressLike,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'ForceTransfer';
          params: { id: number; source: MultiAddressLike; dest: MultiAddressLike; amount: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::freeze`].
     *
     * @param {number} id
     * @param {MultiAddressLike} who
     **/
    freeze: GenericTxCall<
      Rv,
      (
        id: number,
        who: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'Freeze';
          params: { id: number; who: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::thaw`].
     *
     * @param {number} id
     * @param {MultiAddressLike} who
     **/
    thaw: GenericTxCall<
      Rv,
      (
        id: number,
        who: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'Thaw';
          params: { id: number; who: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::freeze_asset`].
     *
     * @param {number} id
     **/
    freezeAsset: GenericTxCall<
      Rv,
      (id: number) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'FreezeAsset';
          params: { id: number };
        };
      }>
    >;

    /**
     * See [`Pallet::thaw_asset`].
     *
     * @param {number} id
     **/
    thawAsset: GenericTxCall<
      Rv,
      (id: number) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'ThawAsset';
          params: { id: number };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer_ownership`].
     *
     * @param {number} id
     * @param {MultiAddressLike} owner
     **/
    transferOwnership: GenericTxCall<
      Rv,
      (
        id: number,
        owner: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'TransferOwnership';
          params: { id: number; owner: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::set_team`].
     *
     * @param {number} id
     * @param {MultiAddressLike} issuer
     * @param {MultiAddressLike} admin
     * @param {MultiAddressLike} freezer
     **/
    setTeam: GenericTxCall<
      Rv,
      (
        id: number,
        issuer: MultiAddressLike,
        admin: MultiAddressLike,
        freezer: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'SetTeam';
          params: { id: number; issuer: MultiAddressLike; admin: MultiAddressLike; freezer: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::set_metadata`].
     *
     * @param {number} id
     * @param {BytesLike} name
     * @param {BytesLike} symbol
     * @param {number} decimals
     **/
    setMetadata: GenericTxCall<
      Rv,
      (
        id: number,
        name: BytesLike,
        symbol: BytesLike,
        decimals: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'SetMetadata';
          params: { id: number; name: BytesLike; symbol: BytesLike; decimals: number };
        };
      }>
    >;

    /**
     * See [`Pallet::clear_metadata`].
     *
     * @param {number} id
     **/
    clearMetadata: GenericTxCall<
      Rv,
      (id: number) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'ClearMetadata';
          params: { id: number };
        };
      }>
    >;

    /**
     * See [`Pallet::force_set_metadata`].
     *
     * @param {number} id
     * @param {BytesLike} name
     * @param {BytesLike} symbol
     * @param {number} decimals
     * @param {boolean} isFrozen
     **/
    forceSetMetadata: GenericTxCall<
      Rv,
      (
        id: number,
        name: BytesLike,
        symbol: BytesLike,
        decimals: number,
        isFrozen: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'ForceSetMetadata';
          params: { id: number; name: BytesLike; symbol: BytesLike; decimals: number; isFrozen: boolean };
        };
      }>
    >;

    /**
     * See [`Pallet::force_clear_metadata`].
     *
     * @param {number} id
     **/
    forceClearMetadata: GenericTxCall<
      Rv,
      (id: number) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'ForceClearMetadata';
          params: { id: number };
        };
      }>
    >;

    /**
     * See [`Pallet::force_asset_status`].
     *
     * @param {number} id
     * @param {MultiAddressLike} owner
     * @param {MultiAddressLike} issuer
     * @param {MultiAddressLike} admin
     * @param {MultiAddressLike} freezer
     * @param {bigint} minBalance
     * @param {boolean} isSufficient
     * @param {boolean} isFrozen
     **/
    forceAssetStatus: GenericTxCall<
      Rv,
      (
        id: number,
        owner: MultiAddressLike,
        issuer: MultiAddressLike,
        admin: MultiAddressLike,
        freezer: MultiAddressLike,
        minBalance: bigint,
        isSufficient: boolean,
        isFrozen: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'ForceAssetStatus';
          params: {
            id: number;
            owner: MultiAddressLike;
            issuer: MultiAddressLike;
            admin: MultiAddressLike;
            freezer: MultiAddressLike;
            minBalance: bigint;
            isSufficient: boolean;
            isFrozen: boolean;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::approve_transfer`].
     *
     * @param {number} id
     * @param {MultiAddressLike} delegate
     * @param {bigint} amount
     **/
    approveTransfer: GenericTxCall<
      Rv,
      (
        id: number,
        delegate: MultiAddressLike,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'ApproveTransfer';
          params: { id: number; delegate: MultiAddressLike; amount: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::cancel_approval`].
     *
     * @param {number} id
     * @param {MultiAddressLike} delegate
     **/
    cancelApproval: GenericTxCall<
      Rv,
      (
        id: number,
        delegate: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'CancelApproval';
          params: { id: number; delegate: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::force_cancel_approval`].
     *
     * @param {number} id
     * @param {MultiAddressLike} owner
     * @param {MultiAddressLike} delegate
     **/
    forceCancelApproval: GenericTxCall<
      Rv,
      (
        id: number,
        owner: MultiAddressLike,
        delegate: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'ForceCancelApproval';
          params: { id: number; owner: MultiAddressLike; delegate: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer_approved`].
     *
     * @param {number} id
     * @param {MultiAddressLike} owner
     * @param {MultiAddressLike} destination
     * @param {bigint} amount
     **/
    transferApproved: GenericTxCall<
      Rv,
      (
        id: number,
        owner: MultiAddressLike,
        destination: MultiAddressLike,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'TransferApproved';
          params: { id: number; owner: MultiAddressLike; destination: MultiAddressLike; amount: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::touch`].
     *
     * @param {number} id
     **/
    touch: GenericTxCall<
      Rv,
      (id: number) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'Touch';
          params: { id: number };
        };
      }>
    >;

    /**
     * See [`Pallet::refund`].
     *
     * @param {number} id
     * @param {boolean} allowBurn
     **/
    refund: GenericTxCall<
      Rv,
      (
        id: number,
        allowBurn: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'Refund';
          params: { id: number; allowBurn: boolean };
        };
      }>
    >;

    /**
     * See [`Pallet::set_min_balance`].
     *
     * @param {number} id
     * @param {bigint} minBalance
     **/
    setMinBalance: GenericTxCall<
      Rv,
      (
        id: number,
        minBalance: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'SetMinBalance';
          params: { id: number; minBalance: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::touch_other`].
     *
     * @param {number} id
     * @param {MultiAddressLike} who
     **/
    touchOther: GenericTxCall<
      Rv,
      (
        id: number,
        who: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'TouchOther';
          params: { id: number; who: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::refund_other`].
     *
     * @param {number} id
     * @param {MultiAddressLike} who
     **/
    refundOther: GenericTxCall<
      Rv,
      (
        id: number,
        who: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'RefundOther';
          params: { id: number; who: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::block`].
     *
     * @param {number} id
     * @param {MultiAddressLike} who
     **/
    block: GenericTxCall<
      Rv,
      (
        id: number,
        who: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'Block';
          params: { id: number; who: MultiAddressLike };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall>;
  };
  /**
   * Pallet `PoolAssets`'s transaction calls
   **/
  poolAssets: {
    /**
     * See [`Pallet::create`].
     *
     * @param {number} id
     * @param {MultiAddressLike} admin
     * @param {bigint} minBalance
     **/
    create: GenericTxCall<
      Rv,
      (
        id: number,
        admin: MultiAddressLike,
        minBalance: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'PoolAssets';
        palletCall: {
          name: 'Create';
          params: { id: number; admin: MultiAddressLike; minBalance: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::force_create`].
     *
     * @param {number} id
     * @param {MultiAddressLike} owner
     * @param {boolean} isSufficient
     * @param {bigint} minBalance
     **/
    forceCreate: GenericTxCall<
      Rv,
      (
        id: number,
        owner: MultiAddressLike,
        isSufficient: boolean,
        minBalance: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'PoolAssets';
        palletCall: {
          name: 'ForceCreate';
          params: { id: number; owner: MultiAddressLike; isSufficient: boolean; minBalance: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::start_destroy`].
     *
     * @param {number} id
     **/
    startDestroy: GenericTxCall<
      Rv,
      (id: number) => ChainSubmittableExtrinsic<{
        pallet: 'PoolAssets';
        palletCall: {
          name: 'StartDestroy';
          params: { id: number };
        };
      }>
    >;

    /**
     * See [`Pallet::destroy_accounts`].
     *
     * @param {number} id
     **/
    destroyAccounts: GenericTxCall<
      Rv,
      (id: number) => ChainSubmittableExtrinsic<{
        pallet: 'PoolAssets';
        palletCall: {
          name: 'DestroyAccounts';
          params: { id: number };
        };
      }>
    >;

    /**
     * See [`Pallet::destroy_approvals`].
     *
     * @param {number} id
     **/
    destroyApprovals: GenericTxCall<
      Rv,
      (id: number) => ChainSubmittableExtrinsic<{
        pallet: 'PoolAssets';
        palletCall: {
          name: 'DestroyApprovals';
          params: { id: number };
        };
      }>
    >;

    /**
     * See [`Pallet::finish_destroy`].
     *
     * @param {number} id
     **/
    finishDestroy: GenericTxCall<
      Rv,
      (id: number) => ChainSubmittableExtrinsic<{
        pallet: 'PoolAssets';
        palletCall: {
          name: 'FinishDestroy';
          params: { id: number };
        };
      }>
    >;

    /**
     * See [`Pallet::mint`].
     *
     * @param {number} id
     * @param {MultiAddressLike} beneficiary
     * @param {bigint} amount
     **/
    mint: GenericTxCall<
      Rv,
      (
        id: number,
        beneficiary: MultiAddressLike,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'PoolAssets';
        palletCall: {
          name: 'Mint';
          params: { id: number; beneficiary: MultiAddressLike; amount: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::burn`].
     *
     * @param {number} id
     * @param {MultiAddressLike} who
     * @param {bigint} amount
     **/
    burn: GenericTxCall<
      Rv,
      (
        id: number,
        who: MultiAddressLike,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'PoolAssets';
        palletCall: {
          name: 'Burn';
          params: { id: number; who: MultiAddressLike; amount: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer`].
     *
     * @param {number} id
     * @param {MultiAddressLike} target
     * @param {bigint} amount
     **/
    transfer: GenericTxCall<
      Rv,
      (
        id: number,
        target: MultiAddressLike,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'PoolAssets';
        palletCall: {
          name: 'Transfer';
          params: { id: number; target: MultiAddressLike; amount: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer_keep_alive`].
     *
     * @param {number} id
     * @param {MultiAddressLike} target
     * @param {bigint} amount
     **/
    transferKeepAlive: GenericTxCall<
      Rv,
      (
        id: number,
        target: MultiAddressLike,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'PoolAssets';
        palletCall: {
          name: 'TransferKeepAlive';
          params: { id: number; target: MultiAddressLike; amount: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::force_transfer`].
     *
     * @param {number} id
     * @param {MultiAddressLike} source
     * @param {MultiAddressLike} dest
     * @param {bigint} amount
     **/
    forceTransfer: GenericTxCall<
      Rv,
      (
        id: number,
        source: MultiAddressLike,
        dest: MultiAddressLike,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'PoolAssets';
        palletCall: {
          name: 'ForceTransfer';
          params: { id: number; source: MultiAddressLike; dest: MultiAddressLike; amount: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::freeze`].
     *
     * @param {number} id
     * @param {MultiAddressLike} who
     **/
    freeze: GenericTxCall<
      Rv,
      (
        id: number,
        who: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'PoolAssets';
        palletCall: {
          name: 'Freeze';
          params: { id: number; who: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::thaw`].
     *
     * @param {number} id
     * @param {MultiAddressLike} who
     **/
    thaw: GenericTxCall<
      Rv,
      (
        id: number,
        who: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'PoolAssets';
        palletCall: {
          name: 'Thaw';
          params: { id: number; who: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::freeze_asset`].
     *
     * @param {number} id
     **/
    freezeAsset: GenericTxCall<
      Rv,
      (id: number) => ChainSubmittableExtrinsic<{
        pallet: 'PoolAssets';
        palletCall: {
          name: 'FreezeAsset';
          params: { id: number };
        };
      }>
    >;

    /**
     * See [`Pallet::thaw_asset`].
     *
     * @param {number} id
     **/
    thawAsset: GenericTxCall<
      Rv,
      (id: number) => ChainSubmittableExtrinsic<{
        pallet: 'PoolAssets';
        palletCall: {
          name: 'ThawAsset';
          params: { id: number };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer_ownership`].
     *
     * @param {number} id
     * @param {MultiAddressLike} owner
     **/
    transferOwnership: GenericTxCall<
      Rv,
      (
        id: number,
        owner: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'PoolAssets';
        palletCall: {
          name: 'TransferOwnership';
          params: { id: number; owner: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::set_team`].
     *
     * @param {number} id
     * @param {MultiAddressLike} issuer
     * @param {MultiAddressLike} admin
     * @param {MultiAddressLike} freezer
     **/
    setTeam: GenericTxCall<
      Rv,
      (
        id: number,
        issuer: MultiAddressLike,
        admin: MultiAddressLike,
        freezer: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'PoolAssets';
        palletCall: {
          name: 'SetTeam';
          params: { id: number; issuer: MultiAddressLike; admin: MultiAddressLike; freezer: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::set_metadata`].
     *
     * @param {number} id
     * @param {BytesLike} name
     * @param {BytesLike} symbol
     * @param {number} decimals
     **/
    setMetadata: GenericTxCall<
      Rv,
      (
        id: number,
        name: BytesLike,
        symbol: BytesLike,
        decimals: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'PoolAssets';
        palletCall: {
          name: 'SetMetadata';
          params: { id: number; name: BytesLike; symbol: BytesLike; decimals: number };
        };
      }>
    >;

    /**
     * See [`Pallet::clear_metadata`].
     *
     * @param {number} id
     **/
    clearMetadata: GenericTxCall<
      Rv,
      (id: number) => ChainSubmittableExtrinsic<{
        pallet: 'PoolAssets';
        palletCall: {
          name: 'ClearMetadata';
          params: { id: number };
        };
      }>
    >;

    /**
     * See [`Pallet::force_set_metadata`].
     *
     * @param {number} id
     * @param {BytesLike} name
     * @param {BytesLike} symbol
     * @param {number} decimals
     * @param {boolean} isFrozen
     **/
    forceSetMetadata: GenericTxCall<
      Rv,
      (
        id: number,
        name: BytesLike,
        symbol: BytesLike,
        decimals: number,
        isFrozen: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'PoolAssets';
        palletCall: {
          name: 'ForceSetMetadata';
          params: { id: number; name: BytesLike; symbol: BytesLike; decimals: number; isFrozen: boolean };
        };
      }>
    >;

    /**
     * See [`Pallet::force_clear_metadata`].
     *
     * @param {number} id
     **/
    forceClearMetadata: GenericTxCall<
      Rv,
      (id: number) => ChainSubmittableExtrinsic<{
        pallet: 'PoolAssets';
        palletCall: {
          name: 'ForceClearMetadata';
          params: { id: number };
        };
      }>
    >;

    /**
     * See [`Pallet::force_asset_status`].
     *
     * @param {number} id
     * @param {MultiAddressLike} owner
     * @param {MultiAddressLike} issuer
     * @param {MultiAddressLike} admin
     * @param {MultiAddressLike} freezer
     * @param {bigint} minBalance
     * @param {boolean} isSufficient
     * @param {boolean} isFrozen
     **/
    forceAssetStatus: GenericTxCall<
      Rv,
      (
        id: number,
        owner: MultiAddressLike,
        issuer: MultiAddressLike,
        admin: MultiAddressLike,
        freezer: MultiAddressLike,
        minBalance: bigint,
        isSufficient: boolean,
        isFrozen: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'PoolAssets';
        palletCall: {
          name: 'ForceAssetStatus';
          params: {
            id: number;
            owner: MultiAddressLike;
            issuer: MultiAddressLike;
            admin: MultiAddressLike;
            freezer: MultiAddressLike;
            minBalance: bigint;
            isSufficient: boolean;
            isFrozen: boolean;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::approve_transfer`].
     *
     * @param {number} id
     * @param {MultiAddressLike} delegate
     * @param {bigint} amount
     **/
    approveTransfer: GenericTxCall<
      Rv,
      (
        id: number,
        delegate: MultiAddressLike,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'PoolAssets';
        palletCall: {
          name: 'ApproveTransfer';
          params: { id: number; delegate: MultiAddressLike; amount: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::cancel_approval`].
     *
     * @param {number} id
     * @param {MultiAddressLike} delegate
     **/
    cancelApproval: GenericTxCall<
      Rv,
      (
        id: number,
        delegate: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'PoolAssets';
        palletCall: {
          name: 'CancelApproval';
          params: { id: number; delegate: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::force_cancel_approval`].
     *
     * @param {number} id
     * @param {MultiAddressLike} owner
     * @param {MultiAddressLike} delegate
     **/
    forceCancelApproval: GenericTxCall<
      Rv,
      (
        id: number,
        owner: MultiAddressLike,
        delegate: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'PoolAssets';
        palletCall: {
          name: 'ForceCancelApproval';
          params: { id: number; owner: MultiAddressLike; delegate: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer_approved`].
     *
     * @param {number} id
     * @param {MultiAddressLike} owner
     * @param {MultiAddressLike} destination
     * @param {bigint} amount
     **/
    transferApproved: GenericTxCall<
      Rv,
      (
        id: number,
        owner: MultiAddressLike,
        destination: MultiAddressLike,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'PoolAssets';
        palletCall: {
          name: 'TransferApproved';
          params: { id: number; owner: MultiAddressLike; destination: MultiAddressLike; amount: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::touch`].
     *
     * @param {number} id
     **/
    touch: GenericTxCall<
      Rv,
      (id: number) => ChainSubmittableExtrinsic<{
        pallet: 'PoolAssets';
        palletCall: {
          name: 'Touch';
          params: { id: number };
        };
      }>
    >;

    /**
     * See [`Pallet::refund`].
     *
     * @param {number} id
     * @param {boolean} allowBurn
     **/
    refund: GenericTxCall<
      Rv,
      (
        id: number,
        allowBurn: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'PoolAssets';
        palletCall: {
          name: 'Refund';
          params: { id: number; allowBurn: boolean };
        };
      }>
    >;

    /**
     * See [`Pallet::set_min_balance`].
     *
     * @param {number} id
     * @param {bigint} minBalance
     **/
    setMinBalance: GenericTxCall<
      Rv,
      (
        id: number,
        minBalance: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'PoolAssets';
        palletCall: {
          name: 'SetMinBalance';
          params: { id: number; minBalance: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::touch_other`].
     *
     * @param {number} id
     * @param {MultiAddressLike} who
     **/
    touchOther: GenericTxCall<
      Rv,
      (
        id: number,
        who: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'PoolAssets';
        palletCall: {
          name: 'TouchOther';
          params: { id: number; who: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::refund_other`].
     *
     * @param {number} id
     * @param {MultiAddressLike} who
     **/
    refundOther: GenericTxCall<
      Rv,
      (
        id: number,
        who: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'PoolAssets';
        palletCall: {
          name: 'RefundOther';
          params: { id: number; who: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::block`].
     *
     * @param {number} id
     * @param {MultiAddressLike} who
     **/
    block: GenericTxCall<
      Rv,
      (
        id: number,
        who: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'PoolAssets';
        palletCall: {
          name: 'Block';
          params: { id: number; who: MultiAddressLike };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall>;
  };
  /**
   * Pallet `Lottery`'s transaction calls
   **/
  lottery: {
    /**
     * See [`Pallet::buy_ticket`].
     *
     * @param {KitchensinkRuntimeRuntimeCallLike} call
     **/
    buyTicket: GenericTxCall<
      Rv,
      (call: KitchensinkRuntimeRuntimeCallLike) => ChainSubmittableExtrinsic<{
        pallet: 'Lottery';
        palletCall: {
          name: 'BuyTicket';
          params: { call: KitchensinkRuntimeRuntimeCallLike };
        };
      }>
    >;

    /**
     * See [`Pallet::set_calls`].
     *
     * @param {Array<KitchensinkRuntimeRuntimeCallLike>} calls
     **/
    setCalls: GenericTxCall<
      Rv,
      (calls: Array<KitchensinkRuntimeRuntimeCallLike>) => ChainSubmittableExtrinsic<{
        pallet: 'Lottery';
        palletCall: {
          name: 'SetCalls';
          params: { calls: Array<KitchensinkRuntimeRuntimeCallLike> };
        };
      }>
    >;

    /**
     * See [`Pallet::start_lottery`].
     *
     * @param {bigint} price
     * @param {number} length
     * @param {number} delay
     * @param {boolean} repeat
     **/
    startLottery: GenericTxCall<
      Rv,
      (
        price: bigint,
        length: number,
        delay: number,
        repeat: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Lottery';
        palletCall: {
          name: 'StartLottery';
          params: { price: bigint; length: number; delay: number; repeat: boolean };
        };
      }>
    >;

    /**
     * See [`Pallet::stop_repeat`].
     *
     **/
    stopRepeat: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<{
        pallet: 'Lottery';
        palletCall: {
          name: 'StopRepeat';
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall>;
  };
  /**
   * Pallet `Nis`'s transaction calls
   **/
  nis: {
    /**
     * See [`Pallet::place_bid`].
     *
     * @param {bigint} amount
     * @param {number} duration
     **/
    placeBid: GenericTxCall<
      Rv,
      (
        amount: bigint,
        duration: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nis';
        palletCall: {
          name: 'PlaceBid';
          params: { amount: bigint; duration: number };
        };
      }>
    >;

    /**
     * See [`Pallet::retract_bid`].
     *
     * @param {bigint} amount
     * @param {number} duration
     **/
    retractBid: GenericTxCall<
      Rv,
      (
        amount: bigint,
        duration: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nis';
        palletCall: {
          name: 'RetractBid';
          params: { amount: bigint; duration: number };
        };
      }>
    >;

    /**
     * See [`Pallet::fund_deficit`].
     *
     **/
    fundDeficit: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<{
        pallet: 'Nis';
        palletCall: {
          name: 'FundDeficit';
        };
      }>
    >;

    /**
     * See [`Pallet::thaw_private`].
     *
     * @param {number} index
     * @param {Perquintill | undefined} maybeProportion
     **/
    thawPrivate: GenericTxCall<
      Rv,
      (
        index: number,
        maybeProportion: Perquintill | undefined,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nis';
        palletCall: {
          name: 'ThawPrivate';
          params: { index: number; maybeProportion: Perquintill | undefined };
        };
      }>
    >;

    /**
     * See [`Pallet::thaw_communal`].
     *
     * @param {number} index
     **/
    thawCommunal: GenericTxCall<
      Rv,
      (index: number) => ChainSubmittableExtrinsic<{
        pallet: 'Nis';
        palletCall: {
          name: 'ThawCommunal';
          params: { index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::communify`].
     *
     * @param {number} index
     **/
    communify: GenericTxCall<
      Rv,
      (index: number) => ChainSubmittableExtrinsic<{
        pallet: 'Nis';
        palletCall: {
          name: 'Communify';
          params: { index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::privatize`].
     *
     * @param {number} index
     **/
    privatize: GenericTxCall<
      Rv,
      (index: number) => ChainSubmittableExtrinsic<{
        pallet: 'Nis';
        palletCall: {
          name: 'Privatize';
          params: { index: number };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall>;
  };
  /**
   * Pallet `Uniques`'s transaction calls
   **/
  uniques: {
    /**
     * See [`Pallet::create`].
     *
     * @param {number} collection
     * @param {MultiAddressLike} admin
     **/
    create: GenericTxCall<
      Rv,
      (
        collection: number,
        admin: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Uniques';
        palletCall: {
          name: 'Create';
          params: { collection: number; admin: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::force_create`].
     *
     * @param {number} collection
     * @param {MultiAddressLike} owner
     * @param {boolean} freeHolding
     **/
    forceCreate: GenericTxCall<
      Rv,
      (
        collection: number,
        owner: MultiAddressLike,
        freeHolding: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Uniques';
        palletCall: {
          name: 'ForceCreate';
          params: { collection: number; owner: MultiAddressLike; freeHolding: boolean };
        };
      }>
    >;

    /**
     * See [`Pallet::destroy`].
     *
     * @param {number} collection
     * @param {PalletUniquesDestroyWitness} witness
     **/
    destroy: GenericTxCall<
      Rv,
      (
        collection: number,
        witness: PalletUniquesDestroyWitness,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Uniques';
        palletCall: {
          name: 'Destroy';
          params: { collection: number; witness: PalletUniquesDestroyWitness };
        };
      }>
    >;

    /**
     * See [`Pallet::mint`].
     *
     * @param {number} collection
     * @param {number} item
     * @param {MultiAddressLike} owner
     **/
    mint: GenericTxCall<
      Rv,
      (
        collection: number,
        item: number,
        owner: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Uniques';
        palletCall: {
          name: 'Mint';
          params: { collection: number; item: number; owner: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::burn`].
     *
     * @param {number} collection
     * @param {number} item
     * @param {MultiAddressLike | undefined} checkOwner
     **/
    burn: GenericTxCall<
      Rv,
      (
        collection: number,
        item: number,
        checkOwner: MultiAddressLike | undefined,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Uniques';
        palletCall: {
          name: 'Burn';
          params: { collection: number; item: number; checkOwner: MultiAddressLike | undefined };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer`].
     *
     * @param {number} collection
     * @param {number} item
     * @param {MultiAddressLike} dest
     **/
    transfer: GenericTxCall<
      Rv,
      (
        collection: number,
        item: number,
        dest: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Uniques';
        palletCall: {
          name: 'Transfer';
          params: { collection: number; item: number; dest: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::redeposit`].
     *
     * @param {number} collection
     * @param {Array<number>} items
     **/
    redeposit: GenericTxCall<
      Rv,
      (
        collection: number,
        items: Array<number>,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Uniques';
        palletCall: {
          name: 'Redeposit';
          params: { collection: number; items: Array<number> };
        };
      }>
    >;

    /**
     * See [`Pallet::freeze`].
     *
     * @param {number} collection
     * @param {number} item
     **/
    freeze: GenericTxCall<
      Rv,
      (
        collection: number,
        item: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Uniques';
        palletCall: {
          name: 'Freeze';
          params: { collection: number; item: number };
        };
      }>
    >;

    /**
     * See [`Pallet::thaw`].
     *
     * @param {number} collection
     * @param {number} item
     **/
    thaw: GenericTxCall<
      Rv,
      (
        collection: number,
        item: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Uniques';
        palletCall: {
          name: 'Thaw';
          params: { collection: number; item: number };
        };
      }>
    >;

    /**
     * See [`Pallet::freeze_collection`].
     *
     * @param {number} collection
     **/
    freezeCollection: GenericTxCall<
      Rv,
      (collection: number) => ChainSubmittableExtrinsic<{
        pallet: 'Uniques';
        palletCall: {
          name: 'FreezeCollection';
          params: { collection: number };
        };
      }>
    >;

    /**
     * See [`Pallet::thaw_collection`].
     *
     * @param {number} collection
     **/
    thawCollection: GenericTxCall<
      Rv,
      (collection: number) => ChainSubmittableExtrinsic<{
        pallet: 'Uniques';
        palletCall: {
          name: 'ThawCollection';
          params: { collection: number };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer_ownership`].
     *
     * @param {number} collection
     * @param {MultiAddressLike} owner
     **/
    transferOwnership: GenericTxCall<
      Rv,
      (
        collection: number,
        owner: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Uniques';
        palletCall: {
          name: 'TransferOwnership';
          params: { collection: number; owner: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::set_team`].
     *
     * @param {number} collection
     * @param {MultiAddressLike} issuer
     * @param {MultiAddressLike} admin
     * @param {MultiAddressLike} freezer
     **/
    setTeam: GenericTxCall<
      Rv,
      (
        collection: number,
        issuer: MultiAddressLike,
        admin: MultiAddressLike,
        freezer: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Uniques';
        palletCall: {
          name: 'SetTeam';
          params: { collection: number; issuer: MultiAddressLike; admin: MultiAddressLike; freezer: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::approve_transfer`].
     *
     * @param {number} collection
     * @param {number} item
     * @param {MultiAddressLike} delegate
     **/
    approveTransfer: GenericTxCall<
      Rv,
      (
        collection: number,
        item: number,
        delegate: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Uniques';
        palletCall: {
          name: 'ApproveTransfer';
          params: { collection: number; item: number; delegate: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::cancel_approval`].
     *
     * @param {number} collection
     * @param {number} item
     * @param {MultiAddressLike | undefined} maybeCheckDelegate
     **/
    cancelApproval: GenericTxCall<
      Rv,
      (
        collection: number,
        item: number,
        maybeCheckDelegate: MultiAddressLike | undefined,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Uniques';
        palletCall: {
          name: 'CancelApproval';
          params: { collection: number; item: number; maybeCheckDelegate: MultiAddressLike | undefined };
        };
      }>
    >;

    /**
     * See [`Pallet::force_item_status`].
     *
     * @param {number} collection
     * @param {MultiAddressLike} owner
     * @param {MultiAddressLike} issuer
     * @param {MultiAddressLike} admin
     * @param {MultiAddressLike} freezer
     * @param {boolean} freeHolding
     * @param {boolean} isFrozen
     **/
    forceItemStatus: GenericTxCall<
      Rv,
      (
        collection: number,
        owner: MultiAddressLike,
        issuer: MultiAddressLike,
        admin: MultiAddressLike,
        freezer: MultiAddressLike,
        freeHolding: boolean,
        isFrozen: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Uniques';
        palletCall: {
          name: 'ForceItemStatus';
          params: {
            collection: number;
            owner: MultiAddressLike;
            issuer: MultiAddressLike;
            admin: MultiAddressLike;
            freezer: MultiAddressLike;
            freeHolding: boolean;
            isFrozen: boolean;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::set_attribute`].
     *
     * @param {number} collection
     * @param {number | undefined} maybeItem
     * @param {BytesLike} key
     * @param {BytesLike} value
     **/
    setAttribute: GenericTxCall<
      Rv,
      (
        collection: number,
        maybeItem: number | undefined,
        key: BytesLike,
        value: BytesLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Uniques';
        palletCall: {
          name: 'SetAttribute';
          params: { collection: number; maybeItem: number | undefined; key: BytesLike; value: BytesLike };
        };
      }>
    >;

    /**
     * See [`Pallet::clear_attribute`].
     *
     * @param {number} collection
     * @param {number | undefined} maybeItem
     * @param {BytesLike} key
     **/
    clearAttribute: GenericTxCall<
      Rv,
      (
        collection: number,
        maybeItem: number | undefined,
        key: BytesLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Uniques';
        palletCall: {
          name: 'ClearAttribute';
          params: { collection: number; maybeItem: number | undefined; key: BytesLike };
        };
      }>
    >;

    /**
     * See [`Pallet::set_metadata`].
     *
     * @param {number} collection
     * @param {number} item
     * @param {BytesLike} data
     * @param {boolean} isFrozen
     **/
    setMetadata: GenericTxCall<
      Rv,
      (
        collection: number,
        item: number,
        data: BytesLike,
        isFrozen: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Uniques';
        palletCall: {
          name: 'SetMetadata';
          params: { collection: number; item: number; data: BytesLike; isFrozen: boolean };
        };
      }>
    >;

    /**
     * See [`Pallet::clear_metadata`].
     *
     * @param {number} collection
     * @param {number} item
     **/
    clearMetadata: GenericTxCall<
      Rv,
      (
        collection: number,
        item: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Uniques';
        palletCall: {
          name: 'ClearMetadata';
          params: { collection: number; item: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_collection_metadata`].
     *
     * @param {number} collection
     * @param {BytesLike} data
     * @param {boolean} isFrozen
     **/
    setCollectionMetadata: GenericTxCall<
      Rv,
      (
        collection: number,
        data: BytesLike,
        isFrozen: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Uniques';
        palletCall: {
          name: 'SetCollectionMetadata';
          params: { collection: number; data: BytesLike; isFrozen: boolean };
        };
      }>
    >;

    /**
     * See [`Pallet::clear_collection_metadata`].
     *
     * @param {number} collection
     **/
    clearCollectionMetadata: GenericTxCall<
      Rv,
      (collection: number) => ChainSubmittableExtrinsic<{
        pallet: 'Uniques';
        palletCall: {
          name: 'ClearCollectionMetadata';
          params: { collection: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_accept_ownership`].
     *
     * @param {number | undefined} maybeCollection
     **/
    setAcceptOwnership: GenericTxCall<
      Rv,
      (maybeCollection: number | undefined) => ChainSubmittableExtrinsic<{
        pallet: 'Uniques';
        palletCall: {
          name: 'SetAcceptOwnership';
          params: { maybeCollection: number | undefined };
        };
      }>
    >;

    /**
     * See [`Pallet::set_collection_max_supply`].
     *
     * @param {number} collection
     * @param {number} maxSupply
     **/
    setCollectionMaxSupply: GenericTxCall<
      Rv,
      (
        collection: number,
        maxSupply: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Uniques';
        palletCall: {
          name: 'SetCollectionMaxSupply';
          params: { collection: number; maxSupply: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_price`].
     *
     * @param {number} collection
     * @param {number} item
     * @param {bigint | undefined} price
     * @param {MultiAddressLike | undefined} whitelistedBuyer
     **/
    setPrice: GenericTxCall<
      Rv,
      (
        collection: number,
        item: number,
        price: bigint | undefined,
        whitelistedBuyer: MultiAddressLike | undefined,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Uniques';
        palletCall: {
          name: 'SetPrice';
          params: {
            collection: number;
            item: number;
            price: bigint | undefined;
            whitelistedBuyer: MultiAddressLike | undefined;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::buy_item`].
     *
     * @param {number} collection
     * @param {number} item
     * @param {bigint} bidPrice
     **/
    buyItem: GenericTxCall<
      Rv,
      (
        collection: number,
        item: number,
        bidPrice: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Uniques';
        palletCall: {
          name: 'BuyItem';
          params: { collection: number; item: number; bidPrice: bigint };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall>;
  };
  /**
   * Pallet `Nfts`'s transaction calls
   **/
  nfts: {
    /**
     * See [`Pallet::create`].
     *
     * @param {MultiAddressLike} admin
     * @param {PalletNftsCollectionConfig} config
     **/
    create: GenericTxCall<
      Rv,
      (
        admin: MultiAddressLike,
        config: PalletNftsCollectionConfig,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'Create';
          params: { admin: MultiAddressLike; config: PalletNftsCollectionConfig };
        };
      }>
    >;

    /**
     * See [`Pallet::force_create`].
     *
     * @param {MultiAddressLike} owner
     * @param {PalletNftsCollectionConfig} config
     **/
    forceCreate: GenericTxCall<
      Rv,
      (
        owner: MultiAddressLike,
        config: PalletNftsCollectionConfig,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'ForceCreate';
          params: { owner: MultiAddressLike; config: PalletNftsCollectionConfig };
        };
      }>
    >;

    /**
     * See [`Pallet::destroy`].
     *
     * @param {number} collection
     * @param {PalletNftsDestroyWitness} witness
     **/
    destroy: GenericTxCall<
      Rv,
      (
        collection: number,
        witness: PalletNftsDestroyWitness,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'Destroy';
          params: { collection: number; witness: PalletNftsDestroyWitness };
        };
      }>
    >;

    /**
     * See [`Pallet::mint`].
     *
     * @param {number} collection
     * @param {number} item
     * @param {MultiAddressLike} mintTo
     * @param {PalletNftsMintWitness | undefined} witnessData
     **/
    mint: GenericTxCall<
      Rv,
      (
        collection: number,
        item: number,
        mintTo: MultiAddressLike,
        witnessData: PalletNftsMintWitness | undefined,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'Mint';
          params: {
            collection: number;
            item: number;
            mintTo: MultiAddressLike;
            witnessData: PalletNftsMintWitness | undefined;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::force_mint`].
     *
     * @param {number} collection
     * @param {number} item
     * @param {MultiAddressLike} mintTo
     * @param {PalletNftsItemConfig} itemConfig
     **/
    forceMint: GenericTxCall<
      Rv,
      (
        collection: number,
        item: number,
        mintTo: MultiAddressLike,
        itemConfig: PalletNftsItemConfig,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'ForceMint';
          params: { collection: number; item: number; mintTo: MultiAddressLike; itemConfig: PalletNftsItemConfig };
        };
      }>
    >;

    /**
     * See [`Pallet::burn`].
     *
     * @param {number} collection
     * @param {number} item
     **/
    burn: GenericTxCall<
      Rv,
      (
        collection: number,
        item: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'Burn';
          params: { collection: number; item: number };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer`].
     *
     * @param {number} collection
     * @param {number} item
     * @param {MultiAddressLike} dest
     **/
    transfer: GenericTxCall<
      Rv,
      (
        collection: number,
        item: number,
        dest: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'Transfer';
          params: { collection: number; item: number; dest: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::redeposit`].
     *
     * @param {number} collection
     * @param {Array<number>} items
     **/
    redeposit: GenericTxCall<
      Rv,
      (
        collection: number,
        items: Array<number>,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'Redeposit';
          params: { collection: number; items: Array<number> };
        };
      }>
    >;

    /**
     * See [`Pallet::lock_item_transfer`].
     *
     * @param {number} collection
     * @param {number} item
     **/
    lockItemTransfer: GenericTxCall<
      Rv,
      (
        collection: number,
        item: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'LockItemTransfer';
          params: { collection: number; item: number };
        };
      }>
    >;

    /**
     * See [`Pallet::unlock_item_transfer`].
     *
     * @param {number} collection
     * @param {number} item
     **/
    unlockItemTransfer: GenericTxCall<
      Rv,
      (
        collection: number,
        item: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'UnlockItemTransfer';
          params: { collection: number; item: number };
        };
      }>
    >;

    /**
     * See [`Pallet::lock_collection`].
     *
     * @param {number} collection
     * @param {PalletNftsBitFlags} lockSettings
     **/
    lockCollection: GenericTxCall<
      Rv,
      (
        collection: number,
        lockSettings: PalletNftsBitFlags,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'LockCollection';
          params: { collection: number; lockSettings: PalletNftsBitFlags };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer_ownership`].
     *
     * @param {number} collection
     * @param {MultiAddressLike} owner
     **/
    transferOwnership: GenericTxCall<
      Rv,
      (
        collection: number,
        owner: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'TransferOwnership';
          params: { collection: number; owner: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::set_team`].
     *
     * @param {number} collection
     * @param {MultiAddressLike | undefined} issuer
     * @param {MultiAddressLike | undefined} admin
     * @param {MultiAddressLike | undefined} freezer
     **/
    setTeam: GenericTxCall<
      Rv,
      (
        collection: number,
        issuer: MultiAddressLike | undefined,
        admin: MultiAddressLike | undefined,
        freezer: MultiAddressLike | undefined,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'SetTeam';
          params: {
            collection: number;
            issuer: MultiAddressLike | undefined;
            admin: MultiAddressLike | undefined;
            freezer: MultiAddressLike | undefined;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::force_collection_owner`].
     *
     * @param {number} collection
     * @param {MultiAddressLike} owner
     **/
    forceCollectionOwner: GenericTxCall<
      Rv,
      (
        collection: number,
        owner: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'ForceCollectionOwner';
          params: { collection: number; owner: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::force_collection_config`].
     *
     * @param {number} collection
     * @param {PalletNftsCollectionConfig} config
     **/
    forceCollectionConfig: GenericTxCall<
      Rv,
      (
        collection: number,
        config: PalletNftsCollectionConfig,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'ForceCollectionConfig';
          params: { collection: number; config: PalletNftsCollectionConfig };
        };
      }>
    >;

    /**
     * See [`Pallet::approve_transfer`].
     *
     * @param {number} collection
     * @param {number} item
     * @param {MultiAddressLike} delegate
     * @param {number | undefined} maybeDeadline
     **/
    approveTransfer: GenericTxCall<
      Rv,
      (
        collection: number,
        item: number,
        delegate: MultiAddressLike,
        maybeDeadline: number | undefined,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'ApproveTransfer';
          params: { collection: number; item: number; delegate: MultiAddressLike; maybeDeadline: number | undefined };
        };
      }>
    >;

    /**
     * See [`Pallet::cancel_approval`].
     *
     * @param {number} collection
     * @param {number} item
     * @param {MultiAddressLike} delegate
     **/
    cancelApproval: GenericTxCall<
      Rv,
      (
        collection: number,
        item: number,
        delegate: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'CancelApproval';
          params: { collection: number; item: number; delegate: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::clear_all_transfer_approvals`].
     *
     * @param {number} collection
     * @param {number} item
     **/
    clearAllTransferApprovals: GenericTxCall<
      Rv,
      (
        collection: number,
        item: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'ClearAllTransferApprovals';
          params: { collection: number; item: number };
        };
      }>
    >;

    /**
     * See [`Pallet::lock_item_properties`].
     *
     * @param {number} collection
     * @param {number} item
     * @param {boolean} lockMetadata
     * @param {boolean} lockAttributes
     **/
    lockItemProperties: GenericTxCall<
      Rv,
      (
        collection: number,
        item: number,
        lockMetadata: boolean,
        lockAttributes: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'LockItemProperties';
          params: { collection: number; item: number; lockMetadata: boolean; lockAttributes: boolean };
        };
      }>
    >;

    /**
     * See [`Pallet::set_attribute`].
     *
     * @param {number} collection
     * @param {number | undefined} maybeItem
     * @param {PalletNftsAttributeNamespace} namespace
     * @param {BytesLike} key
     * @param {BytesLike} value
     **/
    setAttribute: GenericTxCall<
      Rv,
      (
        collection: number,
        maybeItem: number | undefined,
        namespace: PalletNftsAttributeNamespace,
        key: BytesLike,
        value: BytesLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'SetAttribute';
          params: {
            collection: number;
            maybeItem: number | undefined;
            namespace: PalletNftsAttributeNamespace;
            key: BytesLike;
            value: BytesLike;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::force_set_attribute`].
     *
     * @param {AccountId32Like | undefined} setAs
     * @param {number} collection
     * @param {number | undefined} maybeItem
     * @param {PalletNftsAttributeNamespace} namespace
     * @param {BytesLike} key
     * @param {BytesLike} value
     **/
    forceSetAttribute: GenericTxCall<
      Rv,
      (
        setAs: AccountId32Like | undefined,
        collection: number,
        maybeItem: number | undefined,
        namespace: PalletNftsAttributeNamespace,
        key: BytesLike,
        value: BytesLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'ForceSetAttribute';
          params: {
            setAs: AccountId32Like | undefined;
            collection: number;
            maybeItem: number | undefined;
            namespace: PalletNftsAttributeNamespace;
            key: BytesLike;
            value: BytesLike;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::clear_attribute`].
     *
     * @param {number} collection
     * @param {number | undefined} maybeItem
     * @param {PalletNftsAttributeNamespace} namespace
     * @param {BytesLike} key
     **/
    clearAttribute: GenericTxCall<
      Rv,
      (
        collection: number,
        maybeItem: number | undefined,
        namespace: PalletNftsAttributeNamespace,
        key: BytesLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'ClearAttribute';
          params: {
            collection: number;
            maybeItem: number | undefined;
            namespace: PalletNftsAttributeNamespace;
            key: BytesLike;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::approve_item_attributes`].
     *
     * @param {number} collection
     * @param {number} item
     * @param {MultiAddressLike} delegate
     **/
    approveItemAttributes: GenericTxCall<
      Rv,
      (
        collection: number,
        item: number,
        delegate: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'ApproveItemAttributes';
          params: { collection: number; item: number; delegate: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::cancel_item_attributes_approval`].
     *
     * @param {number} collection
     * @param {number} item
     * @param {MultiAddressLike} delegate
     * @param {PalletNftsCancelAttributesApprovalWitness} witness
     **/
    cancelItemAttributesApproval: GenericTxCall<
      Rv,
      (
        collection: number,
        item: number,
        delegate: MultiAddressLike,
        witness: PalletNftsCancelAttributesApprovalWitness,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'CancelItemAttributesApproval';
          params: {
            collection: number;
            item: number;
            delegate: MultiAddressLike;
            witness: PalletNftsCancelAttributesApprovalWitness;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::set_metadata`].
     *
     * @param {number} collection
     * @param {number} item
     * @param {BytesLike} data
     **/
    setMetadata: GenericTxCall<
      Rv,
      (
        collection: number,
        item: number,
        data: BytesLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'SetMetadata';
          params: { collection: number; item: number; data: BytesLike };
        };
      }>
    >;

    /**
     * See [`Pallet::clear_metadata`].
     *
     * @param {number} collection
     * @param {number} item
     **/
    clearMetadata: GenericTxCall<
      Rv,
      (
        collection: number,
        item: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'ClearMetadata';
          params: { collection: number; item: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_collection_metadata`].
     *
     * @param {number} collection
     * @param {BytesLike} data
     **/
    setCollectionMetadata: GenericTxCall<
      Rv,
      (
        collection: number,
        data: BytesLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'SetCollectionMetadata';
          params: { collection: number; data: BytesLike };
        };
      }>
    >;

    /**
     * See [`Pallet::clear_collection_metadata`].
     *
     * @param {number} collection
     **/
    clearCollectionMetadata: GenericTxCall<
      Rv,
      (collection: number) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'ClearCollectionMetadata';
          params: { collection: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_accept_ownership`].
     *
     * @param {number | undefined} maybeCollection
     **/
    setAcceptOwnership: GenericTxCall<
      Rv,
      (maybeCollection: number | undefined) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'SetAcceptOwnership';
          params: { maybeCollection: number | undefined };
        };
      }>
    >;

    /**
     * See [`Pallet::set_collection_max_supply`].
     *
     * @param {number} collection
     * @param {number} maxSupply
     **/
    setCollectionMaxSupply: GenericTxCall<
      Rv,
      (
        collection: number,
        maxSupply: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'SetCollectionMaxSupply';
          params: { collection: number; maxSupply: number };
        };
      }>
    >;

    /**
     * See [`Pallet::update_mint_settings`].
     *
     * @param {number} collection
     * @param {PalletNftsMintSettings} mintSettings
     **/
    updateMintSettings: GenericTxCall<
      Rv,
      (
        collection: number,
        mintSettings: PalletNftsMintSettings,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'UpdateMintSettings';
          params: { collection: number; mintSettings: PalletNftsMintSettings };
        };
      }>
    >;

    /**
     * See [`Pallet::set_price`].
     *
     * @param {number} collection
     * @param {number} item
     * @param {bigint | undefined} price
     * @param {MultiAddressLike | undefined} whitelistedBuyer
     **/
    setPrice: GenericTxCall<
      Rv,
      (
        collection: number,
        item: number,
        price: bigint | undefined,
        whitelistedBuyer: MultiAddressLike | undefined,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'SetPrice';
          params: {
            collection: number;
            item: number;
            price: bigint | undefined;
            whitelistedBuyer: MultiAddressLike | undefined;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::buy_item`].
     *
     * @param {number} collection
     * @param {number} item
     * @param {bigint} bidPrice
     **/
    buyItem: GenericTxCall<
      Rv,
      (
        collection: number,
        item: number,
        bidPrice: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'BuyItem';
          params: { collection: number; item: number; bidPrice: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::pay_tips`].
     *
     * @param {Array<PalletNftsItemTip>} tips
     **/
    payTips: GenericTxCall<
      Rv,
      (tips: Array<PalletNftsItemTip>) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'PayTips';
          params: { tips: Array<PalletNftsItemTip> };
        };
      }>
    >;

    /**
     * See [`Pallet::create_swap`].
     *
     * @param {number} offeredCollection
     * @param {number} offeredItem
     * @param {number} desiredCollection
     * @param {number | undefined} maybeDesiredItem
     * @param {PalletNftsPriceWithDirection | undefined} maybePrice
     * @param {number} duration
     **/
    createSwap: GenericTxCall<
      Rv,
      (
        offeredCollection: number,
        offeredItem: number,
        desiredCollection: number,
        maybeDesiredItem: number | undefined,
        maybePrice: PalletNftsPriceWithDirection | undefined,
        duration: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'CreateSwap';
          params: {
            offeredCollection: number;
            offeredItem: number;
            desiredCollection: number;
            maybeDesiredItem: number | undefined;
            maybePrice: PalletNftsPriceWithDirection | undefined;
            duration: number;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::cancel_swap`].
     *
     * @param {number} offeredCollection
     * @param {number} offeredItem
     **/
    cancelSwap: GenericTxCall<
      Rv,
      (
        offeredCollection: number,
        offeredItem: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'CancelSwap';
          params: { offeredCollection: number; offeredItem: number };
        };
      }>
    >;

    /**
     * See [`Pallet::claim_swap`].
     *
     * @param {number} sendCollection
     * @param {number} sendItem
     * @param {number} receiveCollection
     * @param {number} receiveItem
     * @param {PalletNftsPriceWithDirection | undefined} witnessPrice
     **/
    claimSwap: GenericTxCall<
      Rv,
      (
        sendCollection: number,
        sendItem: number,
        receiveCollection: number,
        receiveItem: number,
        witnessPrice: PalletNftsPriceWithDirection | undefined,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'ClaimSwap';
          params: {
            sendCollection: number;
            sendItem: number;
            receiveCollection: number;
            receiveItem: number;
            witnessPrice: PalletNftsPriceWithDirection | undefined;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::mint_pre_signed`].
     *
     * @param {PalletNftsPreSignedMint} mintData
     * @param {SpRuntimeMultiSignature} signature
     * @param {AccountId32Like} signer
     **/
    mintPreSigned: GenericTxCall<
      Rv,
      (
        mintData: PalletNftsPreSignedMint,
        signature: SpRuntimeMultiSignature,
        signer: AccountId32Like,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'MintPreSigned';
          params: { mintData: PalletNftsPreSignedMint; signature: SpRuntimeMultiSignature; signer: AccountId32Like };
        };
      }>
    >;

    /**
     * See [`Pallet::set_attributes_pre_signed`].
     *
     * @param {PalletNftsPreSignedAttributes} data
     * @param {SpRuntimeMultiSignature} signature
     * @param {AccountId32Like} signer
     **/
    setAttributesPreSigned: GenericTxCall<
      Rv,
      (
        data: PalletNftsPreSignedAttributes,
        signature: SpRuntimeMultiSignature,
        signer: AccountId32Like,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'SetAttributesPreSigned';
          params: { data: PalletNftsPreSignedAttributes; signature: SpRuntimeMultiSignature; signer: AccountId32Like };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall>;
  };
  /**
   * Pallet `NftFractionalization`'s transaction calls
   **/
  nftFractionalization: {
    /**
     * See [`Pallet::fractionalize`].
     *
     * @param {number} nftCollectionId
     * @param {number} nftId
     * @param {number} assetId
     * @param {MultiAddressLike} beneficiary
     * @param {bigint} fractions
     **/
    fractionalize: GenericTxCall<
      Rv,
      (
        nftCollectionId: number,
        nftId: number,
        assetId: number,
        beneficiary: MultiAddressLike,
        fractions: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'NftFractionalization';
        palletCall: {
          name: 'Fractionalize';
          params: {
            nftCollectionId: number;
            nftId: number;
            assetId: number;
            beneficiary: MultiAddressLike;
            fractions: bigint;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::unify`].
     *
     * @param {number} nftCollectionId
     * @param {number} nftId
     * @param {number} assetId
     * @param {MultiAddressLike} beneficiary
     **/
    unify: GenericTxCall<
      Rv,
      (
        nftCollectionId: number,
        nftId: number,
        assetId: number,
        beneficiary: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'NftFractionalization';
        palletCall: {
          name: 'Unify';
          params: { nftCollectionId: number; nftId: number; assetId: number; beneficiary: MultiAddressLike };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall>;
  };
  /**
   * Pallet `Salary`'s transaction calls
   **/
  salary: {
    /**
     * See [`Pallet::init`].
     *
     **/
    init: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<{
        pallet: 'Salary';
        palletCall: {
          name: 'Init';
        };
      }>
    >;

    /**
     * See [`Pallet::bump`].
     *
     **/
    bump: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<{
        pallet: 'Salary';
        palletCall: {
          name: 'Bump';
        };
      }>
    >;

    /**
     * See [`Pallet::induct`].
     *
     **/
    induct: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<{
        pallet: 'Salary';
        palletCall: {
          name: 'Induct';
        };
      }>
    >;

    /**
     * See [`Pallet::register`].
     *
     **/
    register: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<{
        pallet: 'Salary';
        palletCall: {
          name: 'Register';
        };
      }>
    >;

    /**
     * See [`Pallet::payout`].
     *
     **/
    payout: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<{
        pallet: 'Salary';
        palletCall: {
          name: 'Payout';
        };
      }>
    >;

    /**
     * See [`Pallet::payout_other`].
     *
     * @param {AccountId32Like} beneficiary
     **/
    payoutOther: GenericTxCall<
      Rv,
      (beneficiary: AccountId32Like) => ChainSubmittableExtrinsic<{
        pallet: 'Salary';
        palletCall: {
          name: 'PayoutOther';
          params: { beneficiary: AccountId32Like };
        };
      }>
    >;

    /**
     * See [`Pallet::check_payment`].
     *
     **/
    checkPayment: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<{
        pallet: 'Salary';
        palletCall: {
          name: 'CheckPayment';
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall>;
  };
  /**
   * Pallet `CoreFellowship`'s transaction calls
   **/
  coreFellowship: {
    /**
     * See [`Pallet::bump`].
     *
     * @param {AccountId32Like} who
     **/
    bump: GenericTxCall<
      Rv,
      (who: AccountId32Like) => ChainSubmittableExtrinsic<{
        pallet: 'CoreFellowship';
        palletCall: {
          name: 'Bump';
          params: { who: AccountId32Like };
        };
      }>
    >;

    /**
     * See [`Pallet::set_params`].
     *
     * @param {PalletCoreFellowshipParamsType} params
     **/
    setParams: GenericTxCall<
      Rv,
      (params: PalletCoreFellowshipParamsType) => ChainSubmittableExtrinsic<{
        pallet: 'CoreFellowship';
        palletCall: {
          name: 'SetParams';
          params: { params: PalletCoreFellowshipParamsType };
        };
      }>
    >;

    /**
     * See [`Pallet::set_active`].
     *
     * @param {boolean} isActive
     **/
    setActive: GenericTxCall<
      Rv,
      (isActive: boolean) => ChainSubmittableExtrinsic<{
        pallet: 'CoreFellowship';
        palletCall: {
          name: 'SetActive';
          params: { isActive: boolean };
        };
      }>
    >;

    /**
     * See [`Pallet::approve`].
     *
     * @param {AccountId32Like} who
     * @param {number} atRank
     **/
    approve: GenericTxCall<
      Rv,
      (
        who: AccountId32Like,
        atRank: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'CoreFellowship';
        palletCall: {
          name: 'Approve';
          params: { who: AccountId32Like; atRank: number };
        };
      }>
    >;

    /**
     * See [`Pallet::induct`].
     *
     * @param {AccountId32Like} who
     **/
    induct: GenericTxCall<
      Rv,
      (who: AccountId32Like) => ChainSubmittableExtrinsic<{
        pallet: 'CoreFellowship';
        palletCall: {
          name: 'Induct';
          params: { who: AccountId32Like };
        };
      }>
    >;

    /**
     * See [`Pallet::promote`].
     *
     * @param {AccountId32Like} who
     * @param {number} toRank
     **/
    promote: GenericTxCall<
      Rv,
      (
        who: AccountId32Like,
        toRank: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'CoreFellowship';
        palletCall: {
          name: 'Promote';
          params: { who: AccountId32Like; toRank: number };
        };
      }>
    >;

    /**
     * See [`Pallet::offboard`].
     *
     * @param {AccountId32Like} who
     **/
    offboard: GenericTxCall<
      Rv,
      (who: AccountId32Like) => ChainSubmittableExtrinsic<{
        pallet: 'CoreFellowship';
        palletCall: {
          name: 'Offboard';
          params: { who: AccountId32Like };
        };
      }>
    >;

    /**
     * See [`Pallet::submit_evidence`].
     *
     * @param {PalletCoreFellowshipWish} wish
     * @param {BytesLike} evidence
     **/
    submitEvidence: GenericTxCall<
      Rv,
      (
        wish: PalletCoreFellowshipWish,
        evidence: BytesLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'CoreFellowship';
        palletCall: {
          name: 'SubmitEvidence';
          params: { wish: PalletCoreFellowshipWish; evidence: BytesLike };
        };
      }>
    >;

    /**
     * See [`Pallet::import`].
     *
     **/
    import: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<{
        pallet: 'CoreFellowship';
        palletCall: {
          name: 'Import';
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall>;
  };
  /**
   * Pallet `TransactionStorage`'s transaction calls
   **/
  transactionStorage: {
    /**
     * See [`Pallet::store`].
     *
     * @param {BytesLike} data
     **/
    store: GenericTxCall<
      Rv,
      (data: BytesLike) => ChainSubmittableExtrinsic<{
        pallet: 'TransactionStorage';
        palletCall: {
          name: 'Store';
          params: { data: BytesLike };
        };
      }>
    >;

    /**
     * See [`Pallet::renew`].
     *
     * @param {number} block
     * @param {number} index
     **/
    renew: GenericTxCall<
      Rv,
      (
        block: number,
        index: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'TransactionStorage';
        palletCall: {
          name: 'Renew';
          params: { block: number; index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::check_proof`].
     *
     * @param {SpTransactionStorageProofTransactionStorageProof} proof
     **/
    checkProof: GenericTxCall<
      Rv,
      (proof: SpTransactionStorageProofTransactionStorageProof) => ChainSubmittableExtrinsic<{
        pallet: 'TransactionStorage';
        palletCall: {
          name: 'CheckProof';
          params: { proof: SpTransactionStorageProofTransactionStorageProof };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall>;
  };
  /**
   * Pallet `VoterList`'s transaction calls
   **/
  voterList: {
    /**
     * See [`Pallet::rebag`].
     *
     * @param {MultiAddressLike} dislocated
     **/
    rebag: GenericTxCall<
      Rv,
      (dislocated: MultiAddressLike) => ChainSubmittableExtrinsic<{
        pallet: 'VoterList';
        palletCall: {
          name: 'Rebag';
          params: { dislocated: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::put_in_front_of`].
     *
     * @param {MultiAddressLike} lighter
     **/
    putInFrontOf: GenericTxCall<
      Rv,
      (lighter: MultiAddressLike) => ChainSubmittableExtrinsic<{
        pallet: 'VoterList';
        palletCall: {
          name: 'PutInFrontOf';
          params: { lighter: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::put_in_front_of_other`].
     *
     * @param {MultiAddressLike} heavier
     * @param {MultiAddressLike} lighter
     **/
    putInFrontOfOther: GenericTxCall<
      Rv,
      (
        heavier: MultiAddressLike,
        lighter: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'VoterList';
        palletCall: {
          name: 'PutInFrontOfOther';
          params: { heavier: MultiAddressLike; lighter: MultiAddressLike };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall>;
  };
  /**
   * Pallet `StateTrieMigration`'s transaction calls
   **/
  stateTrieMigration: {
    /**
     * See [`Pallet::control_auto_migration`].
     *
     * @param {PalletStateTrieMigrationMigrationLimits | undefined} maybeConfig
     **/
    controlAutoMigration: GenericTxCall<
      Rv,
      (maybeConfig: PalletStateTrieMigrationMigrationLimits | undefined) => ChainSubmittableExtrinsic<{
        pallet: 'StateTrieMigration';
        palletCall: {
          name: 'ControlAutoMigration';
          params: { maybeConfig: PalletStateTrieMigrationMigrationLimits | undefined };
        };
      }>
    >;

    /**
     * See [`Pallet::continue_migrate`].
     *
     * @param {PalletStateTrieMigrationMigrationLimits} limits
     * @param {number} realSizeUpper
     * @param {PalletStateTrieMigrationMigrationTask} witnessTask
     **/
    continueMigrate: GenericTxCall<
      Rv,
      (
        limits: PalletStateTrieMigrationMigrationLimits,
        realSizeUpper: number,
        witnessTask: PalletStateTrieMigrationMigrationTask,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'StateTrieMigration';
        palletCall: {
          name: 'ContinueMigrate';
          params: {
            limits: PalletStateTrieMigrationMigrationLimits;
            realSizeUpper: number;
            witnessTask: PalletStateTrieMigrationMigrationTask;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::migrate_custom_top`].
     *
     * @param {Array<BytesLike>} keys
     * @param {number} witnessSize
     **/
    migrateCustomTop: GenericTxCall<
      Rv,
      (
        keys: Array<BytesLike>,
        witnessSize: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'StateTrieMigration';
        palletCall: {
          name: 'MigrateCustomTop';
          params: { keys: Array<BytesLike>; witnessSize: number };
        };
      }>
    >;

    /**
     * See [`Pallet::migrate_custom_child`].
     *
     * @param {BytesLike} root
     * @param {Array<BytesLike>} childKeys
     * @param {number} totalSize
     **/
    migrateCustomChild: GenericTxCall<
      Rv,
      (
        root: BytesLike,
        childKeys: Array<BytesLike>,
        totalSize: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'StateTrieMigration';
        palletCall: {
          name: 'MigrateCustomChild';
          params: { root: BytesLike; childKeys: Array<BytesLike>; totalSize: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_signed_max_limits`].
     *
     * @param {PalletStateTrieMigrationMigrationLimits} limits
     **/
    setSignedMaxLimits: GenericTxCall<
      Rv,
      (limits: PalletStateTrieMigrationMigrationLimits) => ChainSubmittableExtrinsic<{
        pallet: 'StateTrieMigration';
        palletCall: {
          name: 'SetSignedMaxLimits';
          params: { limits: PalletStateTrieMigrationMigrationLimits };
        };
      }>
    >;

    /**
     * See [`Pallet::force_set_progress`].
     *
     * @param {PalletStateTrieMigrationProgress} progressTop
     * @param {PalletStateTrieMigrationProgress} progressChild
     **/
    forceSetProgress: GenericTxCall<
      Rv,
      (
        progressTop: PalletStateTrieMigrationProgress,
        progressChild: PalletStateTrieMigrationProgress,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'StateTrieMigration';
        palletCall: {
          name: 'ForceSetProgress';
          params: { progressTop: PalletStateTrieMigrationProgress; progressChild: PalletStateTrieMigrationProgress };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall>;
  };
  /**
   * Pallet `ChildBounties`'s transaction calls
   **/
  childBounties: {
    /**
     * See [`Pallet::add_child_bounty`].
     *
     * @param {number} parentBountyId
     * @param {bigint} value
     * @param {BytesLike} description
     **/
    addChildBounty: GenericTxCall<
      Rv,
      (
        parentBountyId: number,
        value: bigint,
        description: BytesLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ChildBounties';
        palletCall: {
          name: 'AddChildBounty';
          params: { parentBountyId: number; value: bigint; description: BytesLike };
        };
      }>
    >;

    /**
     * See [`Pallet::propose_curator`].
     *
     * @param {number} parentBountyId
     * @param {number} childBountyId
     * @param {MultiAddressLike} curator
     * @param {bigint} fee
     **/
    proposeCurator: GenericTxCall<
      Rv,
      (
        parentBountyId: number,
        childBountyId: number,
        curator: MultiAddressLike,
        fee: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ChildBounties';
        palletCall: {
          name: 'ProposeCurator';
          params: { parentBountyId: number; childBountyId: number; curator: MultiAddressLike; fee: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::accept_curator`].
     *
     * @param {number} parentBountyId
     * @param {number} childBountyId
     **/
    acceptCurator: GenericTxCall<
      Rv,
      (
        parentBountyId: number,
        childBountyId: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ChildBounties';
        palletCall: {
          name: 'AcceptCurator';
          params: { parentBountyId: number; childBountyId: number };
        };
      }>
    >;

    /**
     * See [`Pallet::unassign_curator`].
     *
     * @param {number} parentBountyId
     * @param {number} childBountyId
     **/
    unassignCurator: GenericTxCall<
      Rv,
      (
        parentBountyId: number,
        childBountyId: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ChildBounties';
        palletCall: {
          name: 'UnassignCurator';
          params: { parentBountyId: number; childBountyId: number };
        };
      }>
    >;

    /**
     * See [`Pallet::award_child_bounty`].
     *
     * @param {number} parentBountyId
     * @param {number} childBountyId
     * @param {MultiAddressLike} beneficiary
     **/
    awardChildBounty: GenericTxCall<
      Rv,
      (
        parentBountyId: number,
        childBountyId: number,
        beneficiary: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ChildBounties';
        palletCall: {
          name: 'AwardChildBounty';
          params: { parentBountyId: number; childBountyId: number; beneficiary: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::claim_child_bounty`].
     *
     * @param {number} parentBountyId
     * @param {number} childBountyId
     **/
    claimChildBounty: GenericTxCall<
      Rv,
      (
        parentBountyId: number,
        childBountyId: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ChildBounties';
        palletCall: {
          name: 'ClaimChildBounty';
          params: { parentBountyId: number; childBountyId: number };
        };
      }>
    >;

    /**
     * See [`Pallet::close_child_bounty`].
     *
     * @param {number} parentBountyId
     * @param {number} childBountyId
     **/
    closeChildBounty: GenericTxCall<
      Rv,
      (
        parentBountyId: number,
        childBountyId: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ChildBounties';
        palletCall: {
          name: 'CloseChildBounty';
          params: { parentBountyId: number; childBountyId: number };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall>;
  };
  /**
   * Pallet `Referenda`'s transaction calls
   **/
  referenda: {
    /**
     * See [`Pallet::submit`].
     *
     * @param {KitchensinkRuntimeOriginCaller} proposalOrigin
     * @param {FrameSupportPreimagesBounded} proposal
     * @param {FrameSupportScheduleDispatchTime} enactmentMoment
     **/
    submit: GenericTxCall<
      Rv,
      (
        proposalOrigin: KitchensinkRuntimeOriginCaller,
        proposal: FrameSupportPreimagesBounded,
        enactmentMoment: FrameSupportScheduleDispatchTime,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Referenda';
        palletCall: {
          name: 'Submit';
          params: {
            proposalOrigin: KitchensinkRuntimeOriginCaller;
            proposal: FrameSupportPreimagesBounded;
            enactmentMoment: FrameSupportScheduleDispatchTime;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::place_decision_deposit`].
     *
     * @param {number} index
     **/
    placeDecisionDeposit: GenericTxCall<
      Rv,
      (index: number) => ChainSubmittableExtrinsic<{
        pallet: 'Referenda';
        palletCall: {
          name: 'PlaceDecisionDeposit';
          params: { index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::refund_decision_deposit`].
     *
     * @param {number} index
     **/
    refundDecisionDeposit: GenericTxCall<
      Rv,
      (index: number) => ChainSubmittableExtrinsic<{
        pallet: 'Referenda';
        palletCall: {
          name: 'RefundDecisionDeposit';
          params: { index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::cancel`].
     *
     * @param {number} index
     **/
    cancel: GenericTxCall<
      Rv,
      (index: number) => ChainSubmittableExtrinsic<{
        pallet: 'Referenda';
        palletCall: {
          name: 'Cancel';
          params: { index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::kill`].
     *
     * @param {number} index
     **/
    kill: GenericTxCall<
      Rv,
      (index: number) => ChainSubmittableExtrinsic<{
        pallet: 'Referenda';
        palletCall: {
          name: 'Kill';
          params: { index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::nudge_referendum`].
     *
     * @param {number} index
     **/
    nudgeReferendum: GenericTxCall<
      Rv,
      (index: number) => ChainSubmittableExtrinsic<{
        pallet: 'Referenda';
        palletCall: {
          name: 'NudgeReferendum';
          params: { index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::one_fewer_deciding`].
     *
     * @param {number} track
     **/
    oneFewerDeciding: GenericTxCall<
      Rv,
      (track: number) => ChainSubmittableExtrinsic<{
        pallet: 'Referenda';
        palletCall: {
          name: 'OneFewerDeciding';
          params: { track: number };
        };
      }>
    >;

    /**
     * See [`Pallet::refund_submission_deposit`].
     *
     * @param {number} index
     **/
    refundSubmissionDeposit: GenericTxCall<
      Rv,
      (index: number) => ChainSubmittableExtrinsic<{
        pallet: 'Referenda';
        palletCall: {
          name: 'RefundSubmissionDeposit';
          params: { index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_metadata`].
     *
     * @param {number} index
     * @param {H256 | undefined} maybeHash
     **/
    setMetadata: GenericTxCall<
      Rv,
      (
        index: number,
        maybeHash: H256 | undefined,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Referenda';
        palletCall: {
          name: 'SetMetadata';
          params: { index: number; maybeHash: H256 | undefined };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall>;
  };
  /**
   * Pallet `Remark`'s transaction calls
   **/
  remark: {
    /**
     * See [`Pallet::store`].
     *
     * @param {BytesLike} remark
     **/
    store: GenericTxCall<
      Rv,
      (remark: BytesLike) => ChainSubmittableExtrinsic<{
        pallet: 'Remark';
        palletCall: {
          name: 'Store';
          params: { remark: BytesLike };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall>;
  };
  /**
   * Pallet `RootTesting`'s transaction calls
   **/
  rootTesting: {
    /**
     * See [`Pallet::fill_block`].
     *
     * @param {Perbill} ratio
     **/
    fillBlock: GenericTxCall<
      Rv,
      (ratio: Perbill) => ChainSubmittableExtrinsic<{
        pallet: 'RootTesting';
        palletCall: {
          name: 'FillBlock';
          params: { ratio: Perbill };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall>;
  };
  /**
   * Pallet `ConvictionVoting`'s transaction calls
   **/
  convictionVoting: {
    /**
     * See [`Pallet::vote`].
     *
     * @param {number} pollIndex
     * @param {PalletConvictionVotingVoteAccountVote} vote
     **/
    vote: GenericTxCall<
      Rv,
      (
        pollIndex: number,
        vote: PalletConvictionVotingVoteAccountVote,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ConvictionVoting';
        palletCall: {
          name: 'Vote';
          params: { pollIndex: number; vote: PalletConvictionVotingVoteAccountVote };
        };
      }>
    >;

    /**
     * See [`Pallet::delegate`].
     *
     * @param {number} class_
     * @param {MultiAddressLike} to
     * @param {PalletConvictionVotingConviction} conviction
     * @param {bigint} balance
     **/
    delegate: GenericTxCall<
      Rv,
      (
        class_: number,
        to: MultiAddressLike,
        conviction: PalletConvictionVotingConviction,
        balance: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ConvictionVoting';
        palletCall: {
          name: 'Delegate';
          params: {
            class: number;
            to: MultiAddressLike;
            conviction: PalletConvictionVotingConviction;
            balance: bigint;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::undelegate`].
     *
     * @param {number} class_
     **/
    undelegate: GenericTxCall<
      Rv,
      (class_: number) => ChainSubmittableExtrinsic<{
        pallet: 'ConvictionVoting';
        palletCall: {
          name: 'Undelegate';
          params: { class: number };
        };
      }>
    >;

    /**
     * See [`Pallet::unlock`].
     *
     * @param {number} class_
     * @param {MultiAddressLike} target
     **/
    unlock: GenericTxCall<
      Rv,
      (
        class_: number,
        target: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ConvictionVoting';
        palletCall: {
          name: 'Unlock';
          params: { class: number; target: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_vote`].
     *
     * @param {number | undefined} class_
     * @param {number} index
     **/
    removeVote: GenericTxCall<
      Rv,
      (
        class_: number | undefined,
        index: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ConvictionVoting';
        palletCall: {
          name: 'RemoveVote';
          params: { class: number | undefined; index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_other_vote`].
     *
     * @param {MultiAddressLike} target
     * @param {number} class_
     * @param {number} index
     **/
    removeOtherVote: GenericTxCall<
      Rv,
      (
        target: MultiAddressLike,
        class_: number,
        index: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ConvictionVoting';
        palletCall: {
          name: 'RemoveOtherVote';
          params: { target: MultiAddressLike; class: number; index: number };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall>;
  };
  /**
   * Pallet `Whitelist`'s transaction calls
   **/
  whitelist: {
    /**
     * See [`Pallet::whitelist_call`].
     *
     * @param {H256} callHash
     **/
    whitelistCall: GenericTxCall<
      Rv,
      (callHash: H256) => ChainSubmittableExtrinsic<{
        pallet: 'Whitelist';
        palletCall: {
          name: 'WhitelistCall';
          params: { callHash: H256 };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_whitelisted_call`].
     *
     * @param {H256} callHash
     **/
    removeWhitelistedCall: GenericTxCall<
      Rv,
      (callHash: H256) => ChainSubmittableExtrinsic<{
        pallet: 'Whitelist';
        palletCall: {
          name: 'RemoveWhitelistedCall';
          params: { callHash: H256 };
        };
      }>
    >;

    /**
     * See [`Pallet::dispatch_whitelisted_call`].
     *
     * @param {H256} callHash
     * @param {number} callEncodedLen
     * @param {SpWeightsWeightV2Weight} callWeightWitness
     **/
    dispatchWhitelistedCall: GenericTxCall<
      Rv,
      (
        callHash: H256,
        callEncodedLen: number,
        callWeightWitness: SpWeightsWeightV2Weight,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Whitelist';
        palletCall: {
          name: 'DispatchWhitelistedCall';
          params: { callHash: H256; callEncodedLen: number; callWeightWitness: SpWeightsWeightV2Weight };
        };
      }>
    >;

    /**
     * See [`Pallet::dispatch_whitelisted_call_with_preimage`].
     *
     * @param {KitchensinkRuntimeRuntimeCallLike} call
     **/
    dispatchWhitelistedCallWithPreimage: GenericTxCall<
      Rv,
      (call: KitchensinkRuntimeRuntimeCallLike) => ChainSubmittableExtrinsic<{
        pallet: 'Whitelist';
        palletCall: {
          name: 'DispatchWhitelistedCallWithPreimage';
          params: { call: KitchensinkRuntimeRuntimeCallLike };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall>;
  };
  /**
   * Pallet `AllianceMotion`'s transaction calls
   **/
  allianceMotion: {
    /**
     * See [`Pallet::set_members`].
     *
     * @param {Array<AccountId32Like>} newMembers
     * @param {AccountId32Like | undefined} prime
     * @param {number} oldCount
     **/
    setMembers: GenericTxCall<
      Rv,
      (
        newMembers: Array<AccountId32Like>,
        prime: AccountId32Like | undefined,
        oldCount: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'AllianceMotion';
        palletCall: {
          name: 'SetMembers';
          params: { newMembers: Array<AccountId32Like>; prime: AccountId32Like | undefined; oldCount: number };
        };
      }>
    >;

    /**
     * See [`Pallet::execute`].
     *
     * @param {KitchensinkRuntimeRuntimeCallLike} proposal
     * @param {number} lengthBound
     **/
    execute: GenericTxCall<
      Rv,
      (
        proposal: KitchensinkRuntimeRuntimeCallLike,
        lengthBound: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'AllianceMotion';
        palletCall: {
          name: 'Execute';
          params: { proposal: KitchensinkRuntimeRuntimeCallLike; lengthBound: number };
        };
      }>
    >;

    /**
     * See [`Pallet::propose`].
     *
     * @param {number} threshold
     * @param {KitchensinkRuntimeRuntimeCallLike} proposal
     * @param {number} lengthBound
     **/
    propose: GenericTxCall<
      Rv,
      (
        threshold: number,
        proposal: KitchensinkRuntimeRuntimeCallLike,
        lengthBound: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'AllianceMotion';
        palletCall: {
          name: 'Propose';
          params: { threshold: number; proposal: KitchensinkRuntimeRuntimeCallLike; lengthBound: number };
        };
      }>
    >;

    /**
     * See [`Pallet::vote`].
     *
     * @param {H256} proposal
     * @param {number} index
     * @param {boolean} approve
     **/
    vote: GenericTxCall<
      Rv,
      (
        proposal: H256,
        index: number,
        approve: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'AllianceMotion';
        palletCall: {
          name: 'Vote';
          params: { proposal: H256; index: number; approve: boolean };
        };
      }>
    >;

    /**
     * See [`Pallet::disapprove_proposal`].
     *
     * @param {H256} proposalHash
     **/
    disapproveProposal: GenericTxCall<
      Rv,
      (proposalHash: H256) => ChainSubmittableExtrinsic<{
        pallet: 'AllianceMotion';
        palletCall: {
          name: 'DisapproveProposal';
          params: { proposalHash: H256 };
        };
      }>
    >;

    /**
     * See [`Pallet::close`].
     *
     * @param {H256} proposalHash
     * @param {number} index
     * @param {SpWeightsWeightV2Weight} proposalWeightBound
     * @param {number} lengthBound
     **/
    close: GenericTxCall<
      Rv,
      (
        proposalHash: H256,
        index: number,
        proposalWeightBound: SpWeightsWeightV2Weight,
        lengthBound: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'AllianceMotion';
        palletCall: {
          name: 'Close';
          params: {
            proposalHash: H256;
            index: number;
            proposalWeightBound: SpWeightsWeightV2Weight;
            lengthBound: number;
          };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall>;
  };
  /**
   * Pallet `Alliance`'s transaction calls
   **/
  alliance: {
    /**
     * See [`Pallet::propose`].
     *
     * @param {number} threshold
     * @param {KitchensinkRuntimeRuntimeCallLike} proposal
     * @param {number} lengthBound
     **/
    propose: GenericTxCall<
      Rv,
      (
        threshold: number,
        proposal: KitchensinkRuntimeRuntimeCallLike,
        lengthBound: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Alliance';
        palletCall: {
          name: 'Propose';
          params: { threshold: number; proposal: KitchensinkRuntimeRuntimeCallLike; lengthBound: number };
        };
      }>
    >;

    /**
     * See [`Pallet::vote`].
     *
     * @param {H256} proposal
     * @param {number} index
     * @param {boolean} approve
     **/
    vote: GenericTxCall<
      Rv,
      (
        proposal: H256,
        index: number,
        approve: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Alliance';
        palletCall: {
          name: 'Vote';
          params: { proposal: H256; index: number; approve: boolean };
        };
      }>
    >;

    /**
     * See [`Pallet::init_members`].
     *
     * @param {Array<AccountId32Like>} fellows
     * @param {Array<AccountId32Like>} allies
     **/
    initMembers: GenericTxCall<
      Rv,
      (
        fellows: Array<AccountId32Like>,
        allies: Array<AccountId32Like>,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Alliance';
        palletCall: {
          name: 'InitMembers';
          params: { fellows: Array<AccountId32Like>; allies: Array<AccountId32Like> };
        };
      }>
    >;

    /**
     * See [`Pallet::disband`].
     *
     * @param {PalletAllianceDisbandWitness} witness
     **/
    disband: GenericTxCall<
      Rv,
      (witness: PalletAllianceDisbandWitness) => ChainSubmittableExtrinsic<{
        pallet: 'Alliance';
        palletCall: {
          name: 'Disband';
          params: { witness: PalletAllianceDisbandWitness };
        };
      }>
    >;

    /**
     * See [`Pallet::set_rule`].
     *
     * @param {PalletAllianceCid} rule
     **/
    setRule: GenericTxCall<
      Rv,
      (rule: PalletAllianceCid) => ChainSubmittableExtrinsic<{
        pallet: 'Alliance';
        palletCall: {
          name: 'SetRule';
          params: { rule: PalletAllianceCid };
        };
      }>
    >;

    /**
     * See [`Pallet::announce`].
     *
     * @param {PalletAllianceCid} announcement
     **/
    announce: GenericTxCall<
      Rv,
      (announcement: PalletAllianceCid) => ChainSubmittableExtrinsic<{
        pallet: 'Alliance';
        palletCall: {
          name: 'Announce';
          params: { announcement: PalletAllianceCid };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_announcement`].
     *
     * @param {PalletAllianceCid} announcement
     **/
    removeAnnouncement: GenericTxCall<
      Rv,
      (announcement: PalletAllianceCid) => ChainSubmittableExtrinsic<{
        pallet: 'Alliance';
        palletCall: {
          name: 'RemoveAnnouncement';
          params: { announcement: PalletAllianceCid };
        };
      }>
    >;

    /**
     * See [`Pallet::join_alliance`].
     *
     **/
    joinAlliance: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<{
        pallet: 'Alliance';
        palletCall: {
          name: 'JoinAlliance';
        };
      }>
    >;

    /**
     * See [`Pallet::nominate_ally`].
     *
     * @param {MultiAddressLike} who
     **/
    nominateAlly: GenericTxCall<
      Rv,
      (who: MultiAddressLike) => ChainSubmittableExtrinsic<{
        pallet: 'Alliance';
        palletCall: {
          name: 'NominateAlly';
          params: { who: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::elevate_ally`].
     *
     * @param {MultiAddressLike} ally
     **/
    elevateAlly: GenericTxCall<
      Rv,
      (ally: MultiAddressLike) => ChainSubmittableExtrinsic<{
        pallet: 'Alliance';
        palletCall: {
          name: 'ElevateAlly';
          params: { ally: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::give_retirement_notice`].
     *
     **/
    giveRetirementNotice: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<{
        pallet: 'Alliance';
        palletCall: {
          name: 'GiveRetirementNotice';
        };
      }>
    >;

    /**
     * See [`Pallet::retire`].
     *
     **/
    retire: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<{
        pallet: 'Alliance';
        palletCall: {
          name: 'Retire';
        };
      }>
    >;

    /**
     * See [`Pallet::kick_member`].
     *
     * @param {MultiAddressLike} who
     **/
    kickMember: GenericTxCall<
      Rv,
      (who: MultiAddressLike) => ChainSubmittableExtrinsic<{
        pallet: 'Alliance';
        palletCall: {
          name: 'KickMember';
          params: { who: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::add_unscrupulous_items`].
     *
     * @param {Array<PalletAllianceUnscrupulousItem>} items
     **/
    addUnscrupulousItems: GenericTxCall<
      Rv,
      (items: Array<PalletAllianceUnscrupulousItem>) => ChainSubmittableExtrinsic<{
        pallet: 'Alliance';
        palletCall: {
          name: 'AddUnscrupulousItems';
          params: { items: Array<PalletAllianceUnscrupulousItem> };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_unscrupulous_items`].
     *
     * @param {Array<PalletAllianceUnscrupulousItem>} items
     **/
    removeUnscrupulousItems: GenericTxCall<
      Rv,
      (items: Array<PalletAllianceUnscrupulousItem>) => ChainSubmittableExtrinsic<{
        pallet: 'Alliance';
        palletCall: {
          name: 'RemoveUnscrupulousItems';
          params: { items: Array<PalletAllianceUnscrupulousItem> };
        };
      }>
    >;

    /**
     * See [`Pallet::close`].
     *
     * @param {H256} proposalHash
     * @param {number} index
     * @param {SpWeightsWeightV2Weight} proposalWeightBound
     * @param {number} lengthBound
     **/
    close: GenericTxCall<
      Rv,
      (
        proposalHash: H256,
        index: number,
        proposalWeightBound: SpWeightsWeightV2Weight,
        lengthBound: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Alliance';
        palletCall: {
          name: 'Close';
          params: {
            proposalHash: H256;
            index: number;
            proposalWeightBound: SpWeightsWeightV2Weight;
            lengthBound: number;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::abdicate_fellow_status`].
     *
     **/
    abdicateFellowStatus: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<{
        pallet: 'Alliance';
        palletCall: {
          name: 'AbdicateFellowStatus';
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall>;
  };
  /**
   * Pallet `NominationPools`'s transaction calls
   **/
  nominationPools: {
    /**
     * See [`Pallet::join`].
     *
     * @param {bigint} amount
     * @param {number} poolId
     **/
    join: GenericTxCall<
      Rv,
      (
        amount: bigint,
        poolId: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'NominationPools';
        palletCall: {
          name: 'Join';
          params: { amount: bigint; poolId: number };
        };
      }>
    >;

    /**
     * See [`Pallet::bond_extra`].
     *
     * @param {PalletNominationPoolsBondExtra} extra
     **/
    bondExtra: GenericTxCall<
      Rv,
      (extra: PalletNominationPoolsBondExtra) => ChainSubmittableExtrinsic<{
        pallet: 'NominationPools';
        palletCall: {
          name: 'BondExtra';
          params: { extra: PalletNominationPoolsBondExtra };
        };
      }>
    >;

    /**
     * See [`Pallet::claim_payout`].
     *
     **/
    claimPayout: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<{
        pallet: 'NominationPools';
        palletCall: {
          name: 'ClaimPayout';
        };
      }>
    >;

    /**
     * See [`Pallet::unbond`].
     *
     * @param {MultiAddressLike} memberAccount
     * @param {bigint} unbondingPoints
     **/
    unbond: GenericTxCall<
      Rv,
      (
        memberAccount: MultiAddressLike,
        unbondingPoints: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'NominationPools';
        palletCall: {
          name: 'Unbond';
          params: { memberAccount: MultiAddressLike; unbondingPoints: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::pool_withdraw_unbonded`].
     *
     * @param {number} poolId
     * @param {number} numSlashingSpans
     **/
    poolWithdrawUnbonded: GenericTxCall<
      Rv,
      (
        poolId: number,
        numSlashingSpans: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'NominationPools';
        palletCall: {
          name: 'PoolWithdrawUnbonded';
          params: { poolId: number; numSlashingSpans: number };
        };
      }>
    >;

    /**
     * See [`Pallet::withdraw_unbonded`].
     *
     * @param {MultiAddressLike} memberAccount
     * @param {number} numSlashingSpans
     **/
    withdrawUnbonded: GenericTxCall<
      Rv,
      (
        memberAccount: MultiAddressLike,
        numSlashingSpans: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'NominationPools';
        palletCall: {
          name: 'WithdrawUnbonded';
          params: { memberAccount: MultiAddressLike; numSlashingSpans: number };
        };
      }>
    >;

    /**
     * See [`Pallet::create`].
     *
     * @param {bigint} amount
     * @param {MultiAddressLike} root
     * @param {MultiAddressLike} nominator
     * @param {MultiAddressLike} bouncer
     **/
    create: GenericTxCall<
      Rv,
      (
        amount: bigint,
        root: MultiAddressLike,
        nominator: MultiAddressLike,
        bouncer: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'NominationPools';
        palletCall: {
          name: 'Create';
          params: { amount: bigint; root: MultiAddressLike; nominator: MultiAddressLike; bouncer: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::create_with_pool_id`].
     *
     * @param {bigint} amount
     * @param {MultiAddressLike} root
     * @param {MultiAddressLike} nominator
     * @param {MultiAddressLike} bouncer
     * @param {number} poolId
     **/
    createWithPoolId: GenericTxCall<
      Rv,
      (
        amount: bigint,
        root: MultiAddressLike,
        nominator: MultiAddressLike,
        bouncer: MultiAddressLike,
        poolId: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'NominationPools';
        palletCall: {
          name: 'CreateWithPoolId';
          params: {
            amount: bigint;
            root: MultiAddressLike;
            nominator: MultiAddressLike;
            bouncer: MultiAddressLike;
            poolId: number;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::nominate`].
     *
     * @param {number} poolId
     * @param {Array<AccountId32Like>} validators
     **/
    nominate: GenericTxCall<
      Rv,
      (
        poolId: number,
        validators: Array<AccountId32Like>,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'NominationPools';
        palletCall: {
          name: 'Nominate';
          params: { poolId: number; validators: Array<AccountId32Like> };
        };
      }>
    >;

    /**
     * See [`Pallet::set_state`].
     *
     * @param {number} poolId
     * @param {PalletNominationPoolsPoolState} state
     **/
    setState: GenericTxCall<
      Rv,
      (
        poolId: number,
        state: PalletNominationPoolsPoolState,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'NominationPools';
        palletCall: {
          name: 'SetState';
          params: { poolId: number; state: PalletNominationPoolsPoolState };
        };
      }>
    >;

    /**
     * See [`Pallet::set_metadata`].
     *
     * @param {number} poolId
     * @param {BytesLike} metadata
     **/
    setMetadata: GenericTxCall<
      Rv,
      (
        poolId: number,
        metadata: BytesLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'NominationPools';
        palletCall: {
          name: 'SetMetadata';
          params: { poolId: number; metadata: BytesLike };
        };
      }>
    >;

    /**
     * See [`Pallet::set_configs`].
     *
     * @param {PalletNominationPoolsConfigOp} minJoinBond
     * @param {PalletNominationPoolsConfigOp} minCreateBond
     * @param {PalletNominationPoolsConfigOpU32} maxPools
     * @param {PalletNominationPoolsConfigOpU32} maxMembers
     * @param {PalletNominationPoolsConfigOpU32} maxMembersPerPool
     * @param {PalletNominationPoolsConfigOpPerbill} globalMaxCommission
     **/
    setConfigs: GenericTxCall<
      Rv,
      (
        minJoinBond: PalletNominationPoolsConfigOp,
        minCreateBond: PalletNominationPoolsConfigOp,
        maxPools: PalletNominationPoolsConfigOpU32,
        maxMembers: PalletNominationPoolsConfigOpU32,
        maxMembersPerPool: PalletNominationPoolsConfigOpU32,
        globalMaxCommission: PalletNominationPoolsConfigOpPerbill,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'NominationPools';
        palletCall: {
          name: 'SetConfigs';
          params: {
            minJoinBond: PalletNominationPoolsConfigOp;
            minCreateBond: PalletNominationPoolsConfigOp;
            maxPools: PalletNominationPoolsConfigOpU32;
            maxMembers: PalletNominationPoolsConfigOpU32;
            maxMembersPerPool: PalletNominationPoolsConfigOpU32;
            globalMaxCommission: PalletNominationPoolsConfigOpPerbill;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::update_roles`].
     *
     * @param {number} poolId
     * @param {PalletNominationPoolsConfigOp004} newRoot
     * @param {PalletNominationPoolsConfigOp004} newNominator
     * @param {PalletNominationPoolsConfigOp004} newBouncer
     **/
    updateRoles: GenericTxCall<
      Rv,
      (
        poolId: number,
        newRoot: PalletNominationPoolsConfigOp004,
        newNominator: PalletNominationPoolsConfigOp004,
        newBouncer: PalletNominationPoolsConfigOp004,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'NominationPools';
        palletCall: {
          name: 'UpdateRoles';
          params: {
            poolId: number;
            newRoot: PalletNominationPoolsConfigOp004;
            newNominator: PalletNominationPoolsConfigOp004;
            newBouncer: PalletNominationPoolsConfigOp004;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::chill`].
     *
     * @param {number} poolId
     **/
    chill: GenericTxCall<
      Rv,
      (poolId: number) => ChainSubmittableExtrinsic<{
        pallet: 'NominationPools';
        palletCall: {
          name: 'Chill';
          params: { poolId: number };
        };
      }>
    >;

    /**
     * See [`Pallet::bond_extra_other`].
     *
     * @param {MultiAddressLike} member
     * @param {PalletNominationPoolsBondExtra} extra
     **/
    bondExtraOther: GenericTxCall<
      Rv,
      (
        member: MultiAddressLike,
        extra: PalletNominationPoolsBondExtra,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'NominationPools';
        palletCall: {
          name: 'BondExtraOther';
          params: { member: MultiAddressLike; extra: PalletNominationPoolsBondExtra };
        };
      }>
    >;

    /**
     * See [`Pallet::set_claim_permission`].
     *
     * @param {PalletNominationPoolsClaimPermission} permission
     **/
    setClaimPermission: GenericTxCall<
      Rv,
      (permission: PalletNominationPoolsClaimPermission) => ChainSubmittableExtrinsic<{
        pallet: 'NominationPools';
        palletCall: {
          name: 'SetClaimPermission';
          params: { permission: PalletNominationPoolsClaimPermission };
        };
      }>
    >;

    /**
     * See [`Pallet::claim_payout_other`].
     *
     * @param {AccountId32Like} other
     **/
    claimPayoutOther: GenericTxCall<
      Rv,
      (other: AccountId32Like) => ChainSubmittableExtrinsic<{
        pallet: 'NominationPools';
        palletCall: {
          name: 'ClaimPayoutOther';
          params: { other: AccountId32Like };
        };
      }>
    >;

    /**
     * See [`Pallet::set_commission`].
     *
     * @param {number} poolId
     * @param {[Perbill, AccountId32Like] | undefined} newCommission
     **/
    setCommission: GenericTxCall<
      Rv,
      (
        poolId: number,
        newCommission: [Perbill, AccountId32Like] | undefined,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'NominationPools';
        palletCall: {
          name: 'SetCommission';
          params: { poolId: number; newCommission: [Perbill, AccountId32Like] | undefined };
        };
      }>
    >;

    /**
     * See [`Pallet::set_commission_max`].
     *
     * @param {number} poolId
     * @param {Perbill} maxCommission
     **/
    setCommissionMax: GenericTxCall<
      Rv,
      (
        poolId: number,
        maxCommission: Perbill,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'NominationPools';
        palletCall: {
          name: 'SetCommissionMax';
          params: { poolId: number; maxCommission: Perbill };
        };
      }>
    >;

    /**
     * See [`Pallet::set_commission_change_rate`].
     *
     * @param {number} poolId
     * @param {PalletNominationPoolsCommissionChangeRate} changeRate
     **/
    setCommissionChangeRate: GenericTxCall<
      Rv,
      (
        poolId: number,
        changeRate: PalletNominationPoolsCommissionChangeRate,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'NominationPools';
        palletCall: {
          name: 'SetCommissionChangeRate';
          params: { poolId: number; changeRate: PalletNominationPoolsCommissionChangeRate };
        };
      }>
    >;

    /**
     * See [`Pallet::claim_commission`].
     *
     * @param {number} poolId
     **/
    claimCommission: GenericTxCall<
      Rv,
      (poolId: number) => ChainSubmittableExtrinsic<{
        pallet: 'NominationPools';
        palletCall: {
          name: 'ClaimCommission';
          params: { poolId: number };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall>;
  };
  /**
   * Pallet `RankedPolls`'s transaction calls
   **/
  rankedPolls: {
    /**
     * See [`Pallet::submit`].
     *
     * @param {KitchensinkRuntimeOriginCaller} proposalOrigin
     * @param {FrameSupportPreimagesBounded} proposal
     * @param {FrameSupportScheduleDispatchTime} enactmentMoment
     **/
    submit: GenericTxCall<
      Rv,
      (
        proposalOrigin: KitchensinkRuntimeOriginCaller,
        proposal: FrameSupportPreimagesBounded,
        enactmentMoment: FrameSupportScheduleDispatchTime,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'RankedPolls';
        palletCall: {
          name: 'Submit';
          params: {
            proposalOrigin: KitchensinkRuntimeOriginCaller;
            proposal: FrameSupportPreimagesBounded;
            enactmentMoment: FrameSupportScheduleDispatchTime;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::place_decision_deposit`].
     *
     * @param {number} index
     **/
    placeDecisionDeposit: GenericTxCall<
      Rv,
      (index: number) => ChainSubmittableExtrinsic<{
        pallet: 'RankedPolls';
        palletCall: {
          name: 'PlaceDecisionDeposit';
          params: { index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::refund_decision_deposit`].
     *
     * @param {number} index
     **/
    refundDecisionDeposit: GenericTxCall<
      Rv,
      (index: number) => ChainSubmittableExtrinsic<{
        pallet: 'RankedPolls';
        palletCall: {
          name: 'RefundDecisionDeposit';
          params: { index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::cancel`].
     *
     * @param {number} index
     **/
    cancel: GenericTxCall<
      Rv,
      (index: number) => ChainSubmittableExtrinsic<{
        pallet: 'RankedPolls';
        palletCall: {
          name: 'Cancel';
          params: { index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::kill`].
     *
     * @param {number} index
     **/
    kill: GenericTxCall<
      Rv,
      (index: number) => ChainSubmittableExtrinsic<{
        pallet: 'RankedPolls';
        palletCall: {
          name: 'Kill';
          params: { index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::nudge_referendum`].
     *
     * @param {number} index
     **/
    nudgeReferendum: GenericTxCall<
      Rv,
      (index: number) => ChainSubmittableExtrinsic<{
        pallet: 'RankedPolls';
        palletCall: {
          name: 'NudgeReferendum';
          params: { index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::one_fewer_deciding`].
     *
     * @param {number} track
     **/
    oneFewerDeciding: GenericTxCall<
      Rv,
      (track: number) => ChainSubmittableExtrinsic<{
        pallet: 'RankedPolls';
        palletCall: {
          name: 'OneFewerDeciding';
          params: { track: number };
        };
      }>
    >;

    /**
     * See [`Pallet::refund_submission_deposit`].
     *
     * @param {number} index
     **/
    refundSubmissionDeposit: GenericTxCall<
      Rv,
      (index: number) => ChainSubmittableExtrinsic<{
        pallet: 'RankedPolls';
        palletCall: {
          name: 'RefundSubmissionDeposit';
          params: { index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_metadata`].
     *
     * @param {number} index
     * @param {H256 | undefined} maybeHash
     **/
    setMetadata: GenericTxCall<
      Rv,
      (
        index: number,
        maybeHash: H256 | undefined,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'RankedPolls';
        palletCall: {
          name: 'SetMetadata';
          params: { index: number; maybeHash: H256 | undefined };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall>;
  };
  /**
   * Pallet `RankedCollective`'s transaction calls
   **/
  rankedCollective: {
    /**
     * See [`Pallet::add_member`].
     *
     * @param {MultiAddressLike} who
     **/
    addMember: GenericTxCall<
      Rv,
      (who: MultiAddressLike) => ChainSubmittableExtrinsic<{
        pallet: 'RankedCollective';
        palletCall: {
          name: 'AddMember';
          params: { who: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::promote_member`].
     *
     * @param {MultiAddressLike} who
     **/
    promoteMember: GenericTxCall<
      Rv,
      (who: MultiAddressLike) => ChainSubmittableExtrinsic<{
        pallet: 'RankedCollective';
        palletCall: {
          name: 'PromoteMember';
          params: { who: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::demote_member`].
     *
     * @param {MultiAddressLike} who
     **/
    demoteMember: GenericTxCall<
      Rv,
      (who: MultiAddressLike) => ChainSubmittableExtrinsic<{
        pallet: 'RankedCollective';
        palletCall: {
          name: 'DemoteMember';
          params: { who: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_member`].
     *
     * @param {MultiAddressLike} who
     * @param {number} minRank
     **/
    removeMember: GenericTxCall<
      Rv,
      (
        who: MultiAddressLike,
        minRank: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'RankedCollective';
        palletCall: {
          name: 'RemoveMember';
          params: { who: MultiAddressLike; minRank: number };
        };
      }>
    >;

    /**
     * See [`Pallet::vote`].
     *
     * @param {number} poll
     * @param {boolean} aye
     **/
    vote: GenericTxCall<
      Rv,
      (
        poll: number,
        aye: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'RankedCollective';
        palletCall: {
          name: 'Vote';
          params: { poll: number; aye: boolean };
        };
      }>
    >;

    /**
     * See [`Pallet::cleanup_poll`].
     *
     * @param {number} pollIndex
     * @param {number} max
     **/
    cleanupPoll: GenericTxCall<
      Rv,
      (
        pollIndex: number,
        max: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'RankedCollective';
        palletCall: {
          name: 'CleanupPoll';
          params: { pollIndex: number; max: number };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall>;
  };
  /**
   * Pallet `AssetConversion`'s transaction calls
   **/
  assetConversion: {
    /**
     * See [`Pallet::create_pool`].
     *
     * @param {PalletAssetConversionNativeOrAssetId} asset1
     * @param {PalletAssetConversionNativeOrAssetId} asset2
     **/
    createPool: GenericTxCall<
      Rv,
      (
        asset1: PalletAssetConversionNativeOrAssetId,
        asset2: PalletAssetConversionNativeOrAssetId,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'AssetConversion';
        palletCall: {
          name: 'CreatePool';
          params: { asset1: PalletAssetConversionNativeOrAssetId; asset2: PalletAssetConversionNativeOrAssetId };
        };
      }>
    >;

    /**
     * See [`Pallet::add_liquidity`].
     *
     * @param {PalletAssetConversionNativeOrAssetId} asset1
     * @param {PalletAssetConversionNativeOrAssetId} asset2
     * @param {bigint} amount1Desired
     * @param {bigint} amount2Desired
     * @param {bigint} amount1Min
     * @param {bigint} amount2Min
     * @param {AccountId32Like} mintTo
     **/
    addLiquidity: GenericTxCall<
      Rv,
      (
        asset1: PalletAssetConversionNativeOrAssetId,
        asset2: PalletAssetConversionNativeOrAssetId,
        amount1Desired: bigint,
        amount2Desired: bigint,
        amount1Min: bigint,
        amount2Min: bigint,
        mintTo: AccountId32Like,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'AssetConversion';
        palletCall: {
          name: 'AddLiquidity';
          params: {
            asset1: PalletAssetConversionNativeOrAssetId;
            asset2: PalletAssetConversionNativeOrAssetId;
            amount1Desired: bigint;
            amount2Desired: bigint;
            amount1Min: bigint;
            amount2Min: bigint;
            mintTo: AccountId32Like;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_liquidity`].
     *
     * @param {PalletAssetConversionNativeOrAssetId} asset1
     * @param {PalletAssetConversionNativeOrAssetId} asset2
     * @param {bigint} lpTokenBurn
     * @param {bigint} amount1MinReceive
     * @param {bigint} amount2MinReceive
     * @param {AccountId32Like} withdrawTo
     **/
    removeLiquidity: GenericTxCall<
      Rv,
      (
        asset1: PalletAssetConversionNativeOrAssetId,
        asset2: PalletAssetConversionNativeOrAssetId,
        lpTokenBurn: bigint,
        amount1MinReceive: bigint,
        amount2MinReceive: bigint,
        withdrawTo: AccountId32Like,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'AssetConversion';
        palletCall: {
          name: 'RemoveLiquidity';
          params: {
            asset1: PalletAssetConversionNativeOrAssetId;
            asset2: PalletAssetConversionNativeOrAssetId;
            lpTokenBurn: bigint;
            amount1MinReceive: bigint;
            amount2MinReceive: bigint;
            withdrawTo: AccountId32Like;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::swap_exact_tokens_for_tokens`].
     *
     * @param {Array<PalletAssetConversionNativeOrAssetId>} path
     * @param {bigint} amountIn
     * @param {bigint} amountOutMin
     * @param {AccountId32Like} sendTo
     * @param {boolean} keepAlive
     **/
    swapExactTokensForTokens: GenericTxCall<
      Rv,
      (
        path: Array<PalletAssetConversionNativeOrAssetId>,
        amountIn: bigint,
        amountOutMin: bigint,
        sendTo: AccountId32Like,
        keepAlive: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'AssetConversion';
        palletCall: {
          name: 'SwapExactTokensForTokens';
          params: {
            path: Array<PalletAssetConversionNativeOrAssetId>;
            amountIn: bigint;
            amountOutMin: bigint;
            sendTo: AccountId32Like;
            keepAlive: boolean;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::swap_tokens_for_exact_tokens`].
     *
     * @param {Array<PalletAssetConversionNativeOrAssetId>} path
     * @param {bigint} amountOut
     * @param {bigint} amountInMax
     * @param {AccountId32Like} sendTo
     * @param {boolean} keepAlive
     **/
    swapTokensForExactTokens: GenericTxCall<
      Rv,
      (
        path: Array<PalletAssetConversionNativeOrAssetId>,
        amountOut: bigint,
        amountInMax: bigint,
        sendTo: AccountId32Like,
        keepAlive: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'AssetConversion';
        palletCall: {
          name: 'SwapTokensForExactTokens';
          params: {
            path: Array<PalletAssetConversionNativeOrAssetId>;
            amountOut: bigint;
            amountInMax: bigint;
            sendTo: AccountId32Like;
            keepAlive: boolean;
          };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall>;
  };
  /**
   * Pallet `FastUnstake`'s transaction calls
   **/
  fastUnstake: {
    /**
     * See [`Pallet::register_fast_unstake`].
     *
     **/
    registerFastUnstake: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<{
        pallet: 'FastUnstake';
        palletCall: {
          name: 'RegisterFastUnstake';
        };
      }>
    >;

    /**
     * See [`Pallet::deregister`].
     *
     **/
    deregister: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<{
        pallet: 'FastUnstake';
        palletCall: {
          name: 'Deregister';
        };
      }>
    >;

    /**
     * See [`Pallet::control`].
     *
     * @param {number} erasToCheck
     **/
    control: GenericTxCall<
      Rv,
      (erasToCheck: number) => ChainSubmittableExtrinsic<{
        pallet: 'FastUnstake';
        palletCall: {
          name: 'Control';
          params: { erasToCheck: number };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall>;
  };
  /**
   * Pallet `MessageQueue`'s transaction calls
   **/
  messageQueue: {
    /**
     * See [`Pallet::reap_page`].
     *
     * @param {number} messageOrigin
     * @param {number} pageIndex
     **/
    reapPage: GenericTxCall<
      Rv,
      (
        messageOrigin: number,
        pageIndex: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'MessageQueue';
        palletCall: {
          name: 'ReapPage';
          params: { messageOrigin: number; pageIndex: number };
        };
      }>
    >;

    /**
     * See [`Pallet::execute_overweight`].
     *
     * @param {number} messageOrigin
     * @param {number} page
     * @param {number} index
     * @param {SpWeightsWeightV2Weight} weightLimit
     **/
    executeOverweight: GenericTxCall<
      Rv,
      (
        messageOrigin: number,
        page: number,
        index: number,
        weightLimit: SpWeightsWeightV2Weight,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'MessageQueue';
        palletCall: {
          name: 'ExecuteOverweight';
          params: { messageOrigin: number; page: number; index: number; weightLimit: SpWeightsWeightV2Weight };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall>;
  };
  /**
   * Pallet `Pov`'s transaction calls
   **/
  pov: {
    /**
     * See [`Pallet::emit_event`].
     *
     **/
    emitEvent: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<{
        pallet: 'Pov';
        palletCall: 'EmitEvent';
      }>
    >;

    /**
     * See [`Pallet::noop`].
     *
     **/
    noop: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<{
        pallet: 'Pov';
        palletCall: 'Noop';
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall>;
  };
  /**
   * Pallet `TxPause`'s transaction calls
   **/
  txPause: {
    /**
     * See [`Pallet::pause`].
     *
     * @param {[BytesLike, BytesLike]} fullName
     **/
    pause: GenericTxCall<
      Rv,
      (fullName: [BytesLike, BytesLike]) => ChainSubmittableExtrinsic<{
        pallet: 'TxPause';
        palletCall: {
          name: 'Pause';
          params: { fullName: [BytesLike, BytesLike] };
        };
      }>
    >;

    /**
     * See [`Pallet::unpause`].
     *
     * @param {[BytesLike, BytesLike]} ident
     **/
    unpause: GenericTxCall<
      Rv,
      (ident: [BytesLike, BytesLike]) => ChainSubmittableExtrinsic<{
        pallet: 'TxPause';
        palletCall: {
          name: 'Unpause';
          params: { ident: [BytesLike, BytesLike] };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall>;
  };
  /**
   * Pallet `SafeMode`'s transaction calls
   **/
  safeMode: {
    /**
     * See [`Pallet::enter`].
     *
     **/
    enter: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<{
        pallet: 'SafeMode';
        palletCall: {
          name: 'Enter';
        };
      }>
    >;

    /**
     * See [`Pallet::force_enter`].
     *
     **/
    forceEnter: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<{
        pallet: 'SafeMode';
        palletCall: {
          name: 'ForceEnter';
        };
      }>
    >;

    /**
     * See [`Pallet::extend`].
     *
     **/
    extend: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<{
        pallet: 'SafeMode';
        palletCall: {
          name: 'Extend';
        };
      }>
    >;

    /**
     * See [`Pallet::force_extend`].
     *
     **/
    forceExtend: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<{
        pallet: 'SafeMode';
        palletCall: {
          name: 'ForceExtend';
        };
      }>
    >;

    /**
     * See [`Pallet::force_exit`].
     *
     **/
    forceExit: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<{
        pallet: 'SafeMode';
        palletCall: {
          name: 'ForceExit';
        };
      }>
    >;

    /**
     * See [`Pallet::force_slash_deposit`].
     *
     * @param {AccountId32Like} account
     * @param {number} block
     **/
    forceSlashDeposit: GenericTxCall<
      Rv,
      (
        account: AccountId32Like,
        block: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'SafeMode';
        palletCall: {
          name: 'ForceSlashDeposit';
          params: { account: AccountId32Like; block: number };
        };
      }>
    >;

    /**
     * See [`Pallet::release_deposit`].
     *
     * @param {AccountId32Like} account
     * @param {number} block
     **/
    releaseDeposit: GenericTxCall<
      Rv,
      (
        account: AccountId32Like,
        block: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'SafeMode';
        palletCall: {
          name: 'ReleaseDeposit';
          params: { account: AccountId32Like; block: number };
        };
      }>
    >;

    /**
     * See [`Pallet::force_release_deposit`].
     *
     * @param {AccountId32Like} account
     * @param {number} block
     **/
    forceReleaseDeposit: GenericTxCall<
      Rv,
      (
        account: AccountId32Like,
        block: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'SafeMode';
        palletCall: {
          name: 'ForceReleaseDeposit';
          params: { account: AccountId32Like; block: number };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall>;
  };
  /**
   * Pallet `Broker`'s transaction calls
   **/
  broker: {
    /**
     * See [`Pallet::configure`].
     *
     * @param {PalletBrokerConfigRecord} config
     **/
    configure: GenericTxCall<
      Rv,
      (config: PalletBrokerConfigRecord) => ChainSubmittableExtrinsic<{
        pallet: 'Broker';
        palletCall: {
          name: 'Configure';
          params: { config: PalletBrokerConfigRecord };
        };
      }>
    >;

    /**
     * See [`Pallet::reserve`].
     *
     * @param {Array<PalletBrokerScheduleItem>} workload
     **/
    reserve: GenericTxCall<
      Rv,
      (workload: Array<PalletBrokerScheduleItem>) => ChainSubmittableExtrinsic<{
        pallet: 'Broker';
        palletCall: {
          name: 'Reserve';
          params: { workload: Array<PalletBrokerScheduleItem> };
        };
      }>
    >;

    /**
     * See [`Pallet::unreserve`].
     *
     * @param {number} itemIndex
     **/
    unreserve: GenericTxCall<
      Rv,
      (itemIndex: number) => ChainSubmittableExtrinsic<{
        pallet: 'Broker';
        palletCall: {
          name: 'Unreserve';
          params: { itemIndex: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_lease`].
     *
     * @param {number} task
     * @param {number} until
     **/
    setLease: GenericTxCall<
      Rv,
      (
        task: number,
        until: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Broker';
        palletCall: {
          name: 'SetLease';
          params: { task: number; until: number };
        };
      }>
    >;

    /**
     * See [`Pallet::start_sales`].
     *
     * @param {bigint} initialPrice
     * @param {number} coreCount
     **/
    startSales: GenericTxCall<
      Rv,
      (
        initialPrice: bigint,
        coreCount: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Broker';
        palletCall: {
          name: 'StartSales';
          params: { initialPrice: bigint; coreCount: number };
        };
      }>
    >;

    /**
     * See [`Pallet::purchase`].
     *
     * @param {bigint} priceLimit
     **/
    purchase: GenericTxCall<
      Rv,
      (priceLimit: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'Broker';
        palletCall: {
          name: 'Purchase';
          params: { priceLimit: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::renew`].
     *
     * @param {number} core
     **/
    renew: GenericTxCall<
      Rv,
      (core: number) => ChainSubmittableExtrinsic<{
        pallet: 'Broker';
        palletCall: {
          name: 'Renew';
          params: { core: number };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer`].
     *
     * @param {PalletBrokerRegionId} regionId
     * @param {AccountId32Like} newOwner
     **/
    transfer: GenericTxCall<
      Rv,
      (
        regionId: PalletBrokerRegionId,
        newOwner: AccountId32Like,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Broker';
        palletCall: {
          name: 'Transfer';
          params: { regionId: PalletBrokerRegionId; newOwner: AccountId32Like };
        };
      }>
    >;

    /**
     * See [`Pallet::partition`].
     *
     * @param {PalletBrokerRegionId} regionId
     * @param {number} pivot
     **/
    partition: GenericTxCall<
      Rv,
      (
        regionId: PalletBrokerRegionId,
        pivot: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Broker';
        palletCall: {
          name: 'Partition';
          params: { regionId: PalletBrokerRegionId; pivot: number };
        };
      }>
    >;

    /**
     * See [`Pallet::interlace`].
     *
     * @param {PalletBrokerRegionId} regionId
     * @param {PalletBrokerCoreMask} pivot
     **/
    interlace: GenericTxCall<
      Rv,
      (
        regionId: PalletBrokerRegionId,
        pivot: PalletBrokerCoreMask,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Broker';
        palletCall: {
          name: 'Interlace';
          params: { regionId: PalletBrokerRegionId; pivot: PalletBrokerCoreMask };
        };
      }>
    >;

    /**
     * See [`Pallet::assign`].
     *
     * @param {PalletBrokerRegionId} regionId
     * @param {number} task
     * @param {PalletBrokerFinality} finality
     **/
    assign: GenericTxCall<
      Rv,
      (
        regionId: PalletBrokerRegionId,
        task: number,
        finality: PalletBrokerFinality,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Broker';
        palletCall: {
          name: 'Assign';
          params: { regionId: PalletBrokerRegionId; task: number; finality: PalletBrokerFinality };
        };
      }>
    >;

    /**
     * See [`Pallet::pool`].
     *
     * @param {PalletBrokerRegionId} regionId
     * @param {AccountId32Like} payee
     * @param {PalletBrokerFinality} finality
     **/
    pool: GenericTxCall<
      Rv,
      (
        regionId: PalletBrokerRegionId,
        payee: AccountId32Like,
        finality: PalletBrokerFinality,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Broker';
        palletCall: {
          name: 'Pool';
          params: { regionId: PalletBrokerRegionId; payee: AccountId32Like; finality: PalletBrokerFinality };
        };
      }>
    >;

    /**
     * See [`Pallet::claim_revenue`].
     *
     * @param {PalletBrokerRegionId} regionId
     * @param {number} maxTimeslices
     **/
    claimRevenue: GenericTxCall<
      Rv,
      (
        regionId: PalletBrokerRegionId,
        maxTimeslices: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Broker';
        palletCall: {
          name: 'ClaimRevenue';
          params: { regionId: PalletBrokerRegionId; maxTimeslices: number };
        };
      }>
    >;

    /**
     * See [`Pallet::purchase_credit`].
     *
     * @param {bigint} amount
     * @param {AccountId32Like} beneficiary
     **/
    purchaseCredit: GenericTxCall<
      Rv,
      (
        amount: bigint,
        beneficiary: AccountId32Like,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Broker';
        palletCall: {
          name: 'PurchaseCredit';
          params: { amount: bigint; beneficiary: AccountId32Like };
        };
      }>
    >;

    /**
     * See [`Pallet::drop_region`].
     *
     * @param {PalletBrokerRegionId} regionId
     **/
    dropRegion: GenericTxCall<
      Rv,
      (regionId: PalletBrokerRegionId) => ChainSubmittableExtrinsic<{
        pallet: 'Broker';
        palletCall: {
          name: 'DropRegion';
          params: { regionId: PalletBrokerRegionId };
        };
      }>
    >;

    /**
     * See [`Pallet::drop_contribution`].
     *
     * @param {PalletBrokerRegionId} regionId
     **/
    dropContribution: GenericTxCall<
      Rv,
      (regionId: PalletBrokerRegionId) => ChainSubmittableExtrinsic<{
        pallet: 'Broker';
        palletCall: {
          name: 'DropContribution';
          params: { regionId: PalletBrokerRegionId };
        };
      }>
    >;

    /**
     * See [`Pallet::drop_history`].
     *
     * @param {number} when
     **/
    dropHistory: GenericTxCall<
      Rv,
      (when: number) => ChainSubmittableExtrinsic<{
        pallet: 'Broker';
        palletCall: {
          name: 'DropHistory';
          params: { when: number };
        };
      }>
    >;

    /**
     * See [`Pallet::drop_renewal`].
     *
     * @param {number} core
     * @param {number} when
     **/
    dropRenewal: GenericTxCall<
      Rv,
      (
        core: number,
        when: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Broker';
        palletCall: {
          name: 'DropRenewal';
          params: { core: number; when: number };
        };
      }>
    >;

    /**
     * See [`Pallet::request_core_count`].
     *
     * @param {number} coreCount
     **/
    requestCoreCount: GenericTxCall<
      Rv,
      (coreCount: number) => ChainSubmittableExtrinsic<{
        pallet: 'Broker';
        palletCall: {
          name: 'RequestCoreCount';
          params: { coreCount: number };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall>;
  };
}
