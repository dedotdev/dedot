// Generated by @delightfuldot/codegen

import type {
  GenericChainTx,
  GenericTxCall,
  ISubmittableExtrinsic,
  ISubmittableResult,
  IRuntimeTxCall,
} from '@delightfuldot/types';
import type {
  MultiAddressLike,
  Extrinsic,
  BytesLike,
  FixedBytes,
  AccountId32Like,
  Percent,
  Perbill,
  H256,
  Data,
} from '@delightfuldot/codecs';
import type {
  AlephRuntimeRuntimeCallLike,
  SpRuntimeMultiSignature,
  FrameSystemEventRecord,
  PalletStakingRewardDestination,
  PalletStakingValidatorPrefs,
  PalletStakingPalletConfigOp,
  PalletStakingPalletConfigOpU32,
  PalletStakingPalletConfigOpPercent,
  PalletStakingPalletConfigOpPerbill,
  AlephRuntimeSessionKeys,
  PrimitivesAppPublic,
  PrimitivesCommitteeSeats,
  PrimitivesElectionOpenness,
  PalletVestingVestingInfo,
  AlephRuntimeOriginCaller,
  SpWeightsWeightV2Weight,
  PalletMultisigTimepoint,
  PalletContractsWasmDeterminism,
  PalletNominationPoolsBondExtra,
  PalletNominationPoolsPoolState,
  PalletNominationPoolsConfigOp,
  PalletNominationPoolsConfigOpU32,
  PalletNominationPoolsConfigOpPerbill,
  PalletNominationPoolsConfigOp004,
  PalletNominationPoolsClaimPermission,
  PalletNominationPoolsCommissionChangeRate,
  PalletIdentityIdentityInfo,
  PalletIdentityBitFlags,
  PalletIdentityJudgement,
} from './types';

type ChainSubmittableExtrinsic<T extends IRuntimeTxCall = AlephRuntimeRuntimeCallLike> = Extrinsic<
  MultiAddressLike,
  T,
  SpRuntimeMultiSignature,
  any[]
> &
  ISubmittableExtrinsic<ISubmittableResult<FrameSystemEventRecord>>;

export interface ChainTx extends GenericChainTx {
  system: {
    /**
     * See [`Pallet::remark`].
     *
     * @param remark
     **/
    remark: GenericTxCall<
      (remark: BytesLike) => ChainSubmittableExtrinsic<{
        pallet: 'System';
        palletCall: {
          name: 'Remark';
          params: { remark: BytesLike };
        };
      }>
    >;

    /**
     * See [`Pallet::set_heap_pages`].
     *
     * @param pages
     **/
    setHeapPages: GenericTxCall<
      (pages: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'System';
        palletCall: {
          name: 'SetHeapPages';
          params: { pages: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::set_code`].
     *
     * @param code
     **/
    setCode: GenericTxCall<
      (code: BytesLike) => ChainSubmittableExtrinsic<{
        pallet: 'System';
        palletCall: {
          name: 'SetCode';
          params: { code: BytesLike };
        };
      }>
    >;

    /**
     * See [`Pallet::set_code_without_checks`].
     *
     * @param code
     **/
    setCodeWithoutChecks: GenericTxCall<
      (code: BytesLike) => ChainSubmittableExtrinsic<{
        pallet: 'System';
        palletCall: {
          name: 'SetCodeWithoutChecks';
          params: { code: BytesLike };
        };
      }>
    >;

    /**
     * See [`Pallet::set_storage`].
     *
     * @param items
     **/
    setStorage: GenericTxCall<
      (items: Array<[BytesLike, BytesLike]>) => ChainSubmittableExtrinsic<{
        pallet: 'System';
        palletCall: {
          name: 'SetStorage';
          params: { items: Array<[BytesLike, BytesLike]> };
        };
      }>
    >;

    /**
     * See [`Pallet::kill_storage`].
     *
     * @param keys
     **/
    killStorage: GenericTxCall<
      (keys: Array<BytesLike>) => ChainSubmittableExtrinsic<{
        pallet: 'System';
        palletCall: {
          name: 'KillStorage';
          params: { keys: Array<BytesLike> };
        };
      }>
    >;

    /**
     * See [`Pallet::kill_prefix`].
     *
     * @param prefix
     * @param subkeys
     **/
    killPrefix: GenericTxCall<
      (
        prefix: BytesLike,
        subkeys: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'System';
        palletCall: {
          name: 'KillPrefix';
          params: { prefix: BytesLike; subkeys: number };
        };
      }>
    >;

    /**
     * See [`Pallet::remark_with_event`].
     *
     * @param remark
     **/
    remarkWithEvent: GenericTxCall<
      (remark: BytesLike) => ChainSubmittableExtrinsic<{
        pallet: 'System';
        palletCall: {
          name: 'RemarkWithEvent';
          params: { remark: BytesLike };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  scheduler: {
    /**
     * See [`Pallet::schedule`].
     *
     * @param when
     * @param maybePeriodic
     * @param priority
     * @param call
     **/
    schedule: GenericTxCall<
      (
        when: number,
        maybePeriodic: [number, number] | undefined,
        priority: number,
        call: AlephRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Scheduler';
        palletCall: {
          name: 'Schedule';
          params: {
            when: number;
            maybePeriodic: [number, number] | undefined;
            priority: number;
            call: AlephRuntimeRuntimeCallLike;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::cancel`].
     *
     * @param when
     * @param index
     **/
    cancel: GenericTxCall<
      (
        when: number,
        index: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Scheduler';
        palletCall: {
          name: 'Cancel';
          params: { when: number; index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::schedule_named`].
     *
     * @param id
     * @param when
     * @param maybePeriodic
     * @param priority
     * @param call
     **/
    scheduleNamed: GenericTxCall<
      (
        id: FixedBytes<32>,
        when: number,
        maybePeriodic: [number, number] | undefined,
        priority: number,
        call: AlephRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Scheduler';
        palletCall: {
          name: 'ScheduleNamed';
          params: {
            id: FixedBytes<32>;
            when: number;
            maybePeriodic: [number, number] | undefined;
            priority: number;
            call: AlephRuntimeRuntimeCallLike;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::cancel_named`].
     *
     * @param id
     **/
    cancelNamed: GenericTxCall<
      (id: FixedBytes<32>) => ChainSubmittableExtrinsic<{
        pallet: 'Scheduler';
        palletCall: {
          name: 'CancelNamed';
          params: { id: FixedBytes<32> };
        };
      }>
    >;

    /**
     * See [`Pallet::schedule_after`].
     *
     * @param after
     * @param maybePeriodic
     * @param priority
     * @param call
     **/
    scheduleAfter: GenericTxCall<
      (
        after: number,
        maybePeriodic: [number, number] | undefined,
        priority: number,
        call: AlephRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Scheduler';
        palletCall: {
          name: 'ScheduleAfter';
          params: {
            after: number;
            maybePeriodic: [number, number] | undefined;
            priority: number;
            call: AlephRuntimeRuntimeCallLike;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::schedule_named_after`].
     *
     * @param id
     * @param after
     * @param maybePeriodic
     * @param priority
     * @param call
     **/
    scheduleNamedAfter: GenericTxCall<
      (
        id: FixedBytes<32>,
        after: number,
        maybePeriodic: [number, number] | undefined,
        priority: number,
        call: AlephRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Scheduler';
        palletCall: {
          name: 'ScheduleNamedAfter';
          params: {
            id: FixedBytes<32>;
            after: number;
            maybePeriodic: [number, number] | undefined;
            priority: number;
            call: AlephRuntimeRuntimeCallLike;
          };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  timestamp: {
    /**
     * See [`Pallet::set`].
     *
     * @param now
     **/
    set: GenericTxCall<
      (now: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'Timestamp';
        palletCall: {
          name: 'Set';
          params: { now: bigint };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  balances: {
    /**
     * See [`Pallet::transfer_allow_death`].
     *
     * @param dest
     * @param value
     **/
    transferAllowDeath: GenericTxCall<
      (
        dest: MultiAddressLike,
        value: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Balances';
        palletCall: {
          name: 'TransferAllowDeath';
          params: { dest: MultiAddressLike; value: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::set_balance_deprecated`].
     *
     * @param who
     * @param newFree
     * @param oldReserved
     **/
    setBalanceDeprecated: GenericTxCall<
      (
        who: MultiAddressLike,
        newFree: bigint,
        oldReserved: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Balances';
        palletCall: {
          name: 'SetBalanceDeprecated';
          params: { who: MultiAddressLike; newFree: bigint; oldReserved: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::force_transfer`].
     *
     * @param source
     * @param dest
     * @param value
     **/
    forceTransfer: GenericTxCall<
      (
        source: MultiAddressLike,
        dest: MultiAddressLike,
        value: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Balances';
        palletCall: {
          name: 'ForceTransfer';
          params: { source: MultiAddressLike; dest: MultiAddressLike; value: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer_keep_alive`].
     *
     * @param dest
     * @param value
     **/
    transferKeepAlive: GenericTxCall<
      (
        dest: MultiAddressLike,
        value: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Balances';
        palletCall: {
          name: 'TransferKeepAlive';
          params: { dest: MultiAddressLike; value: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer_all`].
     *
     * @param dest
     * @param keepAlive
     **/
    transferAll: GenericTxCall<
      (
        dest: MultiAddressLike,
        keepAlive: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Balances';
        palletCall: {
          name: 'TransferAll';
          params: { dest: MultiAddressLike; keepAlive: boolean };
        };
      }>
    >;

    /**
     * See [`Pallet::force_unreserve`].
     *
     * @param who
     * @param amount
     **/
    forceUnreserve: GenericTxCall<
      (
        who: MultiAddressLike,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Balances';
        palletCall: {
          name: 'ForceUnreserve';
          params: { who: MultiAddressLike; amount: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::upgrade_accounts`].
     *
     * @param who
     **/
    upgradeAccounts: GenericTxCall<
      (who: Array<AccountId32Like>) => ChainSubmittableExtrinsic<{
        pallet: 'Balances';
        palletCall: {
          name: 'UpgradeAccounts';
          params: { who: Array<AccountId32Like> };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer`].
     *
     * @param dest
     * @param value
     **/
    transfer: GenericTxCall<
      (
        dest: MultiAddressLike,
        value: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Balances';
        palletCall: {
          name: 'Transfer';
          params: { dest: MultiAddressLike; value: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::force_set_balance`].
     *
     * @param who
     * @param newFree
     **/
    forceSetBalance: GenericTxCall<
      (
        who: MultiAddressLike,
        newFree: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Balances';
        palletCall: {
          name: 'ForceSetBalance';
          params: { who: MultiAddressLike; newFree: bigint };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  staking: {
    /**
     * See [`Pallet::bond`].
     *
     * @param value
     * @param payee
     **/
    bond: GenericTxCall<
      (
        value: bigint,
        payee: PalletStakingRewardDestination,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'Bond';
          params: { value: bigint; payee: PalletStakingRewardDestination };
        };
      }>
    >;

    /**
     * See [`Pallet::bond_extra`].
     *
     * @param maxAdditional
     **/
    bondExtra: GenericTxCall<
      (maxAdditional: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'BondExtra';
          params: { maxAdditional: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::unbond`].
     *
     * @param value
     **/
    unbond: GenericTxCall<
      (value: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'Unbond';
          params: { value: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::withdraw_unbonded`].
     *
     * @param numSlashingSpans
     **/
    withdrawUnbonded: GenericTxCall<
      (numSlashingSpans: number) => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'WithdrawUnbonded';
          params: { numSlashingSpans: number };
        };
      }>
    >;

    /**
     * See [`Pallet::validate`].
     *
     * @param prefs
     **/
    validate: GenericTxCall<
      (prefs: PalletStakingValidatorPrefs) => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'Validate';
          params: { prefs: PalletStakingValidatorPrefs };
        };
      }>
    >;

    /**
     * See [`Pallet::nominate`].
     *
     * @param targets
     **/
    nominate: GenericTxCall<
      (targets: Array<MultiAddressLike>) => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'Nominate';
          params: { targets: Array<MultiAddressLike> };
        };
      }>
    >;

    /**
     * See [`Pallet::chill`].
     *
     **/
    chill: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'Chill';
        };
      }>
    >;

    /**
     * See [`Pallet::set_payee`].
     *
     * @param payee
     **/
    setPayee: GenericTxCall<
      (payee: PalletStakingRewardDestination) => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'SetPayee';
          params: { payee: PalletStakingRewardDestination };
        };
      }>
    >;

    /**
     * See [`Pallet::set_controller`].
     *
     **/
    setController: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'SetController';
        };
      }>
    >;

    /**
     * See [`Pallet::set_validator_count`].
     *
     * @param new_
     **/
    setValidatorCount: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'SetValidatorCount';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::increase_validator_count`].
     *
     * @param additional
     **/
    increaseValidatorCount: GenericTxCall<
      (additional: number) => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'IncreaseValidatorCount';
          params: { additional: number };
        };
      }>
    >;

    /**
     * See [`Pallet::scale_validator_count`].
     *
     * @param factor
     **/
    scaleValidatorCount: GenericTxCall<
      (factor: Percent) => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'ScaleValidatorCount';
          params: { factor: Percent };
        };
      }>
    >;

    /**
     * See [`Pallet::force_no_eras`].
     *
     **/
    forceNoEras: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'ForceNoEras';
        };
      }>
    >;

    /**
     * See [`Pallet::force_new_era`].
     *
     **/
    forceNewEra: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'ForceNewEra';
        };
      }>
    >;

    /**
     * See [`Pallet::set_invulnerables`].
     *
     * @param invulnerables
     **/
    setInvulnerables: GenericTxCall<
      (invulnerables: Array<AccountId32Like>) => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'SetInvulnerables';
          params: { invulnerables: Array<AccountId32Like> };
        };
      }>
    >;

    /**
     * See [`Pallet::force_unstake`].
     *
     * @param stash
     * @param numSlashingSpans
     **/
    forceUnstake: GenericTxCall<
      (
        stash: AccountId32Like,
        numSlashingSpans: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'ForceUnstake';
          params: { stash: AccountId32Like; numSlashingSpans: number };
        };
      }>
    >;

    /**
     * See [`Pallet::force_new_era_always`].
     *
     **/
    forceNewEraAlways: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'ForceNewEraAlways';
        };
      }>
    >;

    /**
     * See [`Pallet::cancel_deferred_slash`].
     *
     * @param era
     * @param slashIndices
     **/
    cancelDeferredSlash: GenericTxCall<
      (
        era: number,
        slashIndices: Array<number>,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'CancelDeferredSlash';
          params: { era: number; slashIndices: Array<number> };
        };
      }>
    >;

    /**
     * See [`Pallet::payout_stakers`].
     *
     * @param validatorStash
     * @param era
     **/
    payoutStakers: GenericTxCall<
      (
        validatorStash: AccountId32Like,
        era: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'PayoutStakers';
          params: { validatorStash: AccountId32Like; era: number };
        };
      }>
    >;

    /**
     * See [`Pallet::rebond`].
     *
     * @param value
     **/
    rebond: GenericTxCall<
      (value: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'Rebond';
          params: { value: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::reap_stash`].
     *
     * @param stash
     * @param numSlashingSpans
     **/
    reapStash: GenericTxCall<
      (
        stash: AccountId32Like,
        numSlashingSpans: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'ReapStash';
          params: { stash: AccountId32Like; numSlashingSpans: number };
        };
      }>
    >;

    /**
     * See [`Pallet::kick`].
     *
     * @param who
     **/
    kick: GenericTxCall<
      (who: Array<MultiAddressLike>) => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'Kick';
          params: { who: Array<MultiAddressLike> };
        };
      }>
    >;

    /**
     * See [`Pallet::set_staking_configs`].
     *
     * @param minNominatorBond
     * @param minValidatorBond
     * @param maxNominatorCount
     * @param maxValidatorCount
     * @param chillThreshold
     * @param minCommission
     **/
    setStakingConfigs: GenericTxCall<
      (
        minNominatorBond: PalletStakingPalletConfigOp,
        minValidatorBond: PalletStakingPalletConfigOp,
        maxNominatorCount: PalletStakingPalletConfigOpU32,
        maxValidatorCount: PalletStakingPalletConfigOpU32,
        chillThreshold: PalletStakingPalletConfigOpPercent,
        minCommission: PalletStakingPalletConfigOpPerbill,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'SetStakingConfigs';
          params: {
            minNominatorBond: PalletStakingPalletConfigOp;
            minValidatorBond: PalletStakingPalletConfigOp;
            maxNominatorCount: PalletStakingPalletConfigOpU32;
            maxValidatorCount: PalletStakingPalletConfigOpU32;
            chillThreshold: PalletStakingPalletConfigOpPercent;
            minCommission: PalletStakingPalletConfigOpPerbill;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::chill_other`].
     *
     * @param controller
     **/
    chillOther: GenericTxCall<
      (controller: AccountId32Like) => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'ChillOther';
          params: { controller: AccountId32Like };
        };
      }>
    >;

    /**
     * See [`Pallet::force_apply_min_commission`].
     *
     * @param validatorStash
     **/
    forceApplyMinCommission: GenericTxCall<
      (validatorStash: AccountId32Like) => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'ForceApplyMinCommission';
          params: { validatorStash: AccountId32Like };
        };
      }>
    >;

    /**
     * See [`Pallet::set_min_commission`].
     *
     * @param new_
     **/
    setMinCommission: GenericTxCall<
      (new_: Perbill) => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'SetMinCommission';
          params: { new: Perbill };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  session: {
    /**
     * See [`Pallet::set_keys`].
     *
     * @param keys
     * @param proof
     **/
    setKeys: GenericTxCall<
      (
        keys: AlephRuntimeSessionKeys,
        proof: BytesLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Session';
        palletCall: {
          name: 'SetKeys';
          params: { keys: AlephRuntimeSessionKeys; proof: BytesLike };
        };
      }>
    >;

    /**
     * See [`Pallet::purge_keys`].
     *
     **/
    purgeKeys: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'Session';
        palletCall: {
          name: 'PurgeKeys';
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  aleph: {
    /**
     * See [`Pallet::set_emergency_finalizer`].
     *
     * @param emergencyFinalizer
     **/
    setEmergencyFinalizer: GenericTxCall<
      (emergencyFinalizer: PrimitivesAppPublic) => ChainSubmittableExtrinsic<{
        pallet: 'Aleph';
        palletCall: {
          name: 'SetEmergencyFinalizer';
          params: { emergencyFinalizer: PrimitivesAppPublic };
        };
      }>
    >;

    /**
     * See [`Pallet::schedule_finality_version_change`].
     *
     * @param versionIncoming
     * @param session
     **/
    scheduleFinalityVersionChange: GenericTxCall<
      (
        versionIncoming: number,
        session: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Aleph';
        palletCall: {
          name: 'ScheduleFinalityVersionChange';
          params: { versionIncoming: number; session: number };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  elections: {
    /**
     * See [`Pallet::change_validators`].
     *
     * @param reservedValidators
     * @param nonReservedValidators
     * @param committeeSize
     **/
    changeValidators: GenericTxCall<
      (
        reservedValidators: Array<AccountId32Like> | undefined,
        nonReservedValidators: Array<AccountId32Like> | undefined,
        committeeSize: PrimitivesCommitteeSeats | undefined,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Elections';
        palletCall: {
          name: 'ChangeValidators';
          params: {
            reservedValidators: Array<AccountId32Like> | undefined;
            nonReservedValidators: Array<AccountId32Like> | undefined;
            committeeSize: PrimitivesCommitteeSeats | undefined;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::set_elections_openness`].
     *
     * @param openness
     **/
    setElectionsOpenness: GenericTxCall<
      (openness: PrimitivesElectionOpenness) => ChainSubmittableExtrinsic<{
        pallet: 'Elections';
        palletCall: {
          name: 'SetElectionsOpenness';
          params: { openness: PrimitivesElectionOpenness };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  treasury: {
    /**
     * See [`Pallet::propose_spend`].
     *
     * @param value
     * @param beneficiary
     **/
    proposeSpend: GenericTxCall<
      (
        value: bigint,
        beneficiary: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Treasury';
        palletCall: {
          name: 'ProposeSpend';
          params: { value: bigint; beneficiary: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::reject_proposal`].
     *
     * @param proposalId
     **/
    rejectProposal: GenericTxCall<
      (proposalId: number) => ChainSubmittableExtrinsic<{
        pallet: 'Treasury';
        palletCall: {
          name: 'RejectProposal';
          params: { proposalId: number };
        };
      }>
    >;

    /**
     * See [`Pallet::approve_proposal`].
     *
     * @param proposalId
     **/
    approveProposal: GenericTxCall<
      (proposalId: number) => ChainSubmittableExtrinsic<{
        pallet: 'Treasury';
        palletCall: {
          name: 'ApproveProposal';
          params: { proposalId: number };
        };
      }>
    >;

    /**
     * See [`Pallet::spend`].
     *
     * @param amount
     * @param beneficiary
     **/
    spend: GenericTxCall<
      (
        amount: bigint,
        beneficiary: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Treasury';
        palletCall: {
          name: 'Spend';
          params: { amount: bigint; beneficiary: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_approval`].
     *
     * @param proposalId
     **/
    removeApproval: GenericTxCall<
      (proposalId: number) => ChainSubmittableExtrinsic<{
        pallet: 'Treasury';
        palletCall: {
          name: 'RemoveApproval';
          params: { proposalId: number };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  vesting: {
    /**
     * See [`Pallet::vest`].
     *
     **/
    vest: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'Vesting';
        palletCall: {
          name: 'Vest';
        };
      }>
    >;

    /**
     * See [`Pallet::vest_other`].
     *
     * @param target
     **/
    vestOther: GenericTxCall<
      (target: MultiAddressLike) => ChainSubmittableExtrinsic<{
        pallet: 'Vesting';
        palletCall: {
          name: 'VestOther';
          params: { target: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::vested_transfer`].
     *
     * @param target
     * @param schedule
     **/
    vestedTransfer: GenericTxCall<
      (
        target: MultiAddressLike,
        schedule: PalletVestingVestingInfo,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Vesting';
        palletCall: {
          name: 'VestedTransfer';
          params: { target: MultiAddressLike; schedule: PalletVestingVestingInfo };
        };
      }>
    >;

    /**
     * See [`Pallet::force_vested_transfer`].
     *
     * @param source
     * @param target
     * @param schedule
     **/
    forceVestedTransfer: GenericTxCall<
      (
        source: MultiAddressLike,
        target: MultiAddressLike,
        schedule: PalletVestingVestingInfo,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Vesting';
        palletCall: {
          name: 'ForceVestedTransfer';
          params: { source: MultiAddressLike; target: MultiAddressLike; schedule: PalletVestingVestingInfo };
        };
      }>
    >;

    /**
     * See [`Pallet::merge_schedules`].
     *
     * @param schedule1Index
     * @param schedule2Index
     **/
    mergeSchedules: GenericTxCall<
      (
        schedule1Index: number,
        schedule2Index: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Vesting';
        palletCall: {
          name: 'MergeSchedules';
          params: { schedule1Index: number; schedule2Index: number };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  utility: {
    /**
     * See [`Pallet::batch`].
     *
     * @param calls
     **/
    batch: GenericTxCall<
      (calls: Array<AlephRuntimeRuntimeCallLike>) => ChainSubmittableExtrinsic<{
        pallet: 'Utility';
        palletCall: {
          name: 'Batch';
          params: { calls: Array<AlephRuntimeRuntimeCallLike> };
        };
      }>
    >;

    /**
     * See [`Pallet::as_derivative`].
     *
     * @param index
     * @param call
     **/
    asDerivative: GenericTxCall<
      (
        index: number,
        call: AlephRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Utility';
        palletCall: {
          name: 'AsDerivative';
          params: { index: number; call: AlephRuntimeRuntimeCallLike };
        };
      }>
    >;

    /**
     * See [`Pallet::batch_all`].
     *
     * @param calls
     **/
    batchAll: GenericTxCall<
      (calls: Array<AlephRuntimeRuntimeCallLike>) => ChainSubmittableExtrinsic<{
        pallet: 'Utility';
        palletCall: {
          name: 'BatchAll';
          params: { calls: Array<AlephRuntimeRuntimeCallLike> };
        };
      }>
    >;

    /**
     * See [`Pallet::dispatch_as`].
     *
     * @param asOrigin
     * @param call
     **/
    dispatchAs: GenericTxCall<
      (
        asOrigin: AlephRuntimeOriginCaller,
        call: AlephRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Utility';
        palletCall: {
          name: 'DispatchAs';
          params: { asOrigin: AlephRuntimeOriginCaller; call: AlephRuntimeRuntimeCallLike };
        };
      }>
    >;

    /**
     * See [`Pallet::force_batch`].
     *
     * @param calls
     **/
    forceBatch: GenericTxCall<
      (calls: Array<AlephRuntimeRuntimeCallLike>) => ChainSubmittableExtrinsic<{
        pallet: 'Utility';
        palletCall: {
          name: 'ForceBatch';
          params: { calls: Array<AlephRuntimeRuntimeCallLike> };
        };
      }>
    >;

    /**
     * See [`Pallet::with_weight`].
     *
     * @param call
     * @param weight
     **/
    withWeight: GenericTxCall<
      (
        call: AlephRuntimeRuntimeCallLike,
        weight: SpWeightsWeightV2Weight,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Utility';
        palletCall: {
          name: 'WithWeight';
          params: { call: AlephRuntimeRuntimeCallLike; weight: SpWeightsWeightV2Weight };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  multisig: {
    /**
     * See [`Pallet::as_multi_threshold_1`].
     *
     * @param otherSignatories
     * @param call
     **/
    asMultiThreshold1: GenericTxCall<
      (
        otherSignatories: Array<AccountId32Like>,
        call: AlephRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Multisig';
        palletCall: {
          name: 'AsMultiThreshold1';
          params: { otherSignatories: Array<AccountId32Like>; call: AlephRuntimeRuntimeCallLike };
        };
      }>
    >;

    /**
     * See [`Pallet::as_multi`].
     *
     * @param threshold
     * @param otherSignatories
     * @param maybeTimepoint
     * @param call
     * @param maxWeight
     **/
    asMulti: GenericTxCall<
      (
        threshold: number,
        otherSignatories: Array<AccountId32Like>,
        maybeTimepoint: PalletMultisigTimepoint | undefined,
        call: AlephRuntimeRuntimeCallLike,
        maxWeight: SpWeightsWeightV2Weight,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Multisig';
        palletCall: {
          name: 'AsMulti';
          params: {
            threshold: number;
            otherSignatories: Array<AccountId32Like>;
            maybeTimepoint: PalletMultisigTimepoint | undefined;
            call: AlephRuntimeRuntimeCallLike;
            maxWeight: SpWeightsWeightV2Weight;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::approve_as_multi`].
     *
     * @param threshold
     * @param otherSignatories
     * @param maybeTimepoint
     * @param callHash
     * @param maxWeight
     **/
    approveAsMulti: GenericTxCall<
      (
        threshold: number,
        otherSignatories: Array<AccountId32Like>,
        maybeTimepoint: PalletMultisigTimepoint | undefined,
        callHash: FixedBytes<32>,
        maxWeight: SpWeightsWeightV2Weight,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Multisig';
        palletCall: {
          name: 'ApproveAsMulti';
          params: {
            threshold: number;
            otherSignatories: Array<AccountId32Like>;
            maybeTimepoint: PalletMultisigTimepoint | undefined;
            callHash: FixedBytes<32>;
            maxWeight: SpWeightsWeightV2Weight;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::cancel_as_multi`].
     *
     * @param threshold
     * @param otherSignatories
     * @param timepoint
     * @param callHash
     **/
    cancelAsMulti: GenericTxCall<
      (
        threshold: number,
        otherSignatories: Array<AccountId32Like>,
        timepoint: PalletMultisigTimepoint,
        callHash: FixedBytes<32>,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Multisig';
        palletCall: {
          name: 'CancelAsMulti';
          params: {
            threshold: number;
            otherSignatories: Array<AccountId32Like>;
            timepoint: PalletMultisigTimepoint;
            callHash: FixedBytes<32>;
          };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  sudo: {
    /**
     * See [`Pallet::sudo`].
     *
     * @param call
     **/
    sudo: GenericTxCall<
      (call: AlephRuntimeRuntimeCallLike) => ChainSubmittableExtrinsic<{
        pallet: 'Sudo';
        palletCall: {
          name: 'Sudo';
          params: { call: AlephRuntimeRuntimeCallLike };
        };
      }>
    >;

    /**
     * See [`Pallet::sudo_unchecked_weight`].
     *
     * @param call
     * @param weight
     **/
    sudoUncheckedWeight: GenericTxCall<
      (
        call: AlephRuntimeRuntimeCallLike,
        weight: SpWeightsWeightV2Weight,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Sudo';
        palletCall: {
          name: 'SudoUncheckedWeight';
          params: { call: AlephRuntimeRuntimeCallLike; weight: SpWeightsWeightV2Weight };
        };
      }>
    >;

    /**
     * See [`Pallet::set_key`].
     *
     * @param new_
     **/
    setKey: GenericTxCall<
      (new_: MultiAddressLike) => ChainSubmittableExtrinsic<{
        pallet: 'Sudo';
        palletCall: {
          name: 'SetKey';
          params: { new: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::sudo_as`].
     *
     * @param who
     * @param call
     **/
    sudoAs: GenericTxCall<
      (
        who: MultiAddressLike,
        call: AlephRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Sudo';
        palletCall: {
          name: 'SudoAs';
          params: { who: MultiAddressLike; call: AlephRuntimeRuntimeCallLike };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  contracts: {
    /**
     * See [`Pallet::call_old_weight`].
     *
     * @param dest
     * @param value
     * @param gasLimit
     * @param storageDepositLimit
     * @param data
     **/
    callOldWeight: GenericTxCall<
      (
        dest: MultiAddressLike,
        value: bigint,
        gasLimit: bigint,
        storageDepositLimit: bigint | undefined,
        data: BytesLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Contracts';
        palletCall: {
          name: 'CallOldWeight';
          params: {
            dest: MultiAddressLike;
            value: bigint;
            gasLimit: bigint;
            storageDepositLimit: bigint | undefined;
            data: BytesLike;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::instantiate_with_code_old_weight`].
     *
     * @param value
     * @param gasLimit
     * @param storageDepositLimit
     * @param code
     * @param data
     * @param salt
     **/
    instantiateWithCodeOldWeight: GenericTxCall<
      (
        value: bigint,
        gasLimit: bigint,
        storageDepositLimit: bigint | undefined,
        code: BytesLike,
        data: BytesLike,
        salt: BytesLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Contracts';
        palletCall: {
          name: 'InstantiateWithCodeOldWeight';
          params: {
            value: bigint;
            gasLimit: bigint;
            storageDepositLimit: bigint | undefined;
            code: BytesLike;
            data: BytesLike;
            salt: BytesLike;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::instantiate_old_weight`].
     *
     * @param value
     * @param gasLimit
     * @param storageDepositLimit
     * @param codeHash
     * @param data
     * @param salt
     **/
    instantiateOldWeight: GenericTxCall<
      (
        value: bigint,
        gasLimit: bigint,
        storageDepositLimit: bigint | undefined,
        codeHash: H256,
        data: BytesLike,
        salt: BytesLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Contracts';
        palletCall: {
          name: 'InstantiateOldWeight';
          params: {
            value: bigint;
            gasLimit: bigint;
            storageDepositLimit: bigint | undefined;
            codeHash: H256;
            data: BytesLike;
            salt: BytesLike;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::upload_code`].
     *
     * @param code
     * @param storageDepositLimit
     * @param determinism
     **/
    uploadCode: GenericTxCall<
      (
        code: BytesLike,
        storageDepositLimit: bigint | undefined,
        determinism: PalletContractsWasmDeterminism,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Contracts';
        palletCall: {
          name: 'UploadCode';
          params: {
            code: BytesLike;
            storageDepositLimit: bigint | undefined;
            determinism: PalletContractsWasmDeterminism;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_code`].
     *
     * @param codeHash
     **/
    removeCode: GenericTxCall<
      (codeHash: H256) => ChainSubmittableExtrinsic<{
        pallet: 'Contracts';
        palletCall: {
          name: 'RemoveCode';
          params: { codeHash: H256 };
        };
      }>
    >;

    /**
     * See [`Pallet::set_code`].
     *
     * @param dest
     * @param codeHash
     **/
    setCode: GenericTxCall<
      (
        dest: MultiAddressLike,
        codeHash: H256,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Contracts';
        palletCall: {
          name: 'SetCode';
          params: { dest: MultiAddressLike; codeHash: H256 };
        };
      }>
    >;

    /**
     * See [`Pallet::call`].
     *
     * @param dest
     * @param value
     * @param gasLimit
     * @param storageDepositLimit
     * @param data
     **/
    call: GenericTxCall<
      (
        dest: MultiAddressLike,
        value: bigint,
        gasLimit: SpWeightsWeightV2Weight,
        storageDepositLimit: bigint | undefined,
        data: BytesLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Contracts';
        palletCall: {
          name: 'Call';
          params: {
            dest: MultiAddressLike;
            value: bigint;
            gasLimit: SpWeightsWeightV2Weight;
            storageDepositLimit: bigint | undefined;
            data: BytesLike;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::instantiate_with_code`].
     *
     * @param value
     * @param gasLimit
     * @param storageDepositLimit
     * @param code
     * @param data
     * @param salt
     **/
    instantiateWithCode: GenericTxCall<
      (
        value: bigint,
        gasLimit: SpWeightsWeightV2Weight,
        storageDepositLimit: bigint | undefined,
        code: BytesLike,
        data: BytesLike,
        salt: BytesLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Contracts';
        palletCall: {
          name: 'InstantiateWithCode';
          params: {
            value: bigint;
            gasLimit: SpWeightsWeightV2Weight;
            storageDepositLimit: bigint | undefined;
            code: BytesLike;
            data: BytesLike;
            salt: BytesLike;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::instantiate`].
     *
     * @param value
     * @param gasLimit
     * @param storageDepositLimit
     * @param codeHash
     * @param data
     * @param salt
     **/
    instantiate: GenericTxCall<
      (
        value: bigint,
        gasLimit: SpWeightsWeightV2Weight,
        storageDepositLimit: bigint | undefined,
        codeHash: H256,
        data: BytesLike,
        salt: BytesLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Contracts';
        palletCall: {
          name: 'Instantiate';
          params: {
            value: bigint;
            gasLimit: SpWeightsWeightV2Weight;
            storageDepositLimit: bigint | undefined;
            codeHash: H256;
            data: BytesLike;
            salt: BytesLike;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::migrate`].
     *
     * @param weightLimit
     **/
    migrate: GenericTxCall<
      (weightLimit: SpWeightsWeightV2Weight) => ChainSubmittableExtrinsic<{
        pallet: 'Contracts';
        palletCall: {
          name: 'Migrate';
          params: { weightLimit: SpWeightsWeightV2Weight };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  nominationPools: {
    /**
     * See [`Pallet::join`].
     *
     * @param amount
     * @param poolId
     **/
    join: GenericTxCall<
      (
        amount: bigint,
        poolId: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'NominationPools';
        palletCall: {
          name: 'Join';
          params: { amount: bigint; poolId: number };
        };
      }>
    >;

    /**
     * See [`Pallet::bond_extra`].
     *
     * @param extra
     **/
    bondExtra: GenericTxCall<
      (extra: PalletNominationPoolsBondExtra) => ChainSubmittableExtrinsic<{
        pallet: 'NominationPools';
        palletCall: {
          name: 'BondExtra';
          params: { extra: PalletNominationPoolsBondExtra };
        };
      }>
    >;

    /**
     * See [`Pallet::claim_payout`].
     *
     **/
    claimPayout: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'NominationPools';
        palletCall: {
          name: 'ClaimPayout';
        };
      }>
    >;

    /**
     * See [`Pallet::unbond`].
     *
     * @param memberAccount
     * @param unbondingPoints
     **/
    unbond: GenericTxCall<
      (
        memberAccount: MultiAddressLike,
        unbondingPoints: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'NominationPools';
        palletCall: {
          name: 'Unbond';
          params: { memberAccount: MultiAddressLike; unbondingPoints: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::pool_withdraw_unbonded`].
     *
     * @param poolId
     * @param numSlashingSpans
     **/
    poolWithdrawUnbonded: GenericTxCall<
      (
        poolId: number,
        numSlashingSpans: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'NominationPools';
        palletCall: {
          name: 'PoolWithdrawUnbonded';
          params: { poolId: number; numSlashingSpans: number };
        };
      }>
    >;

    /**
     * See [`Pallet::withdraw_unbonded`].
     *
     * @param memberAccount
     * @param numSlashingSpans
     **/
    withdrawUnbonded: GenericTxCall<
      (
        memberAccount: MultiAddressLike,
        numSlashingSpans: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'NominationPools';
        palletCall: {
          name: 'WithdrawUnbonded';
          params: { memberAccount: MultiAddressLike; numSlashingSpans: number };
        };
      }>
    >;

    /**
     * See [`Pallet::create`].
     *
     * @param amount
     * @param root
     * @param nominator
     * @param bouncer
     **/
    create: GenericTxCall<
      (
        amount: bigint,
        root: MultiAddressLike,
        nominator: MultiAddressLike,
        bouncer: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'NominationPools';
        palletCall: {
          name: 'Create';
          params: { amount: bigint; root: MultiAddressLike; nominator: MultiAddressLike; bouncer: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::create_with_pool_id`].
     *
     * @param amount
     * @param root
     * @param nominator
     * @param bouncer
     * @param poolId
     **/
    createWithPoolId: GenericTxCall<
      (
        amount: bigint,
        root: MultiAddressLike,
        nominator: MultiAddressLike,
        bouncer: MultiAddressLike,
        poolId: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'NominationPools';
        palletCall: {
          name: 'CreateWithPoolId';
          params: {
            amount: bigint;
            root: MultiAddressLike;
            nominator: MultiAddressLike;
            bouncer: MultiAddressLike;
            poolId: number;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::nominate`].
     *
     * @param poolId
     * @param validators
     **/
    nominate: GenericTxCall<
      (
        poolId: number,
        validators: Array<AccountId32Like>,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'NominationPools';
        palletCall: {
          name: 'Nominate';
          params: { poolId: number; validators: Array<AccountId32Like> };
        };
      }>
    >;

    /**
     * See [`Pallet::set_state`].
     *
     * @param poolId
     * @param state
     **/
    setState: GenericTxCall<
      (
        poolId: number,
        state: PalletNominationPoolsPoolState,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'NominationPools';
        palletCall: {
          name: 'SetState';
          params: { poolId: number; state: PalletNominationPoolsPoolState };
        };
      }>
    >;

    /**
     * See [`Pallet::set_metadata`].
     *
     * @param poolId
     * @param metadata
     **/
    setMetadata: GenericTxCall<
      (
        poolId: number,
        metadata: BytesLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'NominationPools';
        palletCall: {
          name: 'SetMetadata';
          params: { poolId: number; metadata: BytesLike };
        };
      }>
    >;

    /**
     * See [`Pallet::set_configs`].
     *
     * @param minJoinBond
     * @param minCreateBond
     * @param maxPools
     * @param maxMembers
     * @param maxMembersPerPool
     * @param globalMaxCommission
     **/
    setConfigs: GenericTxCall<
      (
        minJoinBond: PalletNominationPoolsConfigOp,
        minCreateBond: PalletNominationPoolsConfigOp,
        maxPools: PalletNominationPoolsConfigOpU32,
        maxMembers: PalletNominationPoolsConfigOpU32,
        maxMembersPerPool: PalletNominationPoolsConfigOpU32,
        globalMaxCommission: PalletNominationPoolsConfigOpPerbill,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'NominationPools';
        palletCall: {
          name: 'SetConfigs';
          params: {
            minJoinBond: PalletNominationPoolsConfigOp;
            minCreateBond: PalletNominationPoolsConfigOp;
            maxPools: PalletNominationPoolsConfigOpU32;
            maxMembers: PalletNominationPoolsConfigOpU32;
            maxMembersPerPool: PalletNominationPoolsConfigOpU32;
            globalMaxCommission: PalletNominationPoolsConfigOpPerbill;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::update_roles`].
     *
     * @param poolId
     * @param newRoot
     * @param newNominator
     * @param newBouncer
     **/
    updateRoles: GenericTxCall<
      (
        poolId: number,
        newRoot: PalletNominationPoolsConfigOp004,
        newNominator: PalletNominationPoolsConfigOp004,
        newBouncer: PalletNominationPoolsConfigOp004,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'NominationPools';
        palletCall: {
          name: 'UpdateRoles';
          params: {
            poolId: number;
            newRoot: PalletNominationPoolsConfigOp004;
            newNominator: PalletNominationPoolsConfigOp004;
            newBouncer: PalletNominationPoolsConfigOp004;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::chill`].
     *
     * @param poolId
     **/
    chill: GenericTxCall<
      (poolId: number) => ChainSubmittableExtrinsic<{
        pallet: 'NominationPools';
        palletCall: {
          name: 'Chill';
          params: { poolId: number };
        };
      }>
    >;

    /**
     * See [`Pallet::bond_extra_other`].
     *
     * @param member
     * @param extra
     **/
    bondExtraOther: GenericTxCall<
      (
        member: MultiAddressLike,
        extra: PalletNominationPoolsBondExtra,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'NominationPools';
        palletCall: {
          name: 'BondExtraOther';
          params: { member: MultiAddressLike; extra: PalletNominationPoolsBondExtra };
        };
      }>
    >;

    /**
     * See [`Pallet::set_claim_permission`].
     *
     * @param permission
     **/
    setClaimPermission: GenericTxCall<
      (permission: PalletNominationPoolsClaimPermission) => ChainSubmittableExtrinsic<{
        pallet: 'NominationPools';
        palletCall: {
          name: 'SetClaimPermission';
          params: { permission: PalletNominationPoolsClaimPermission };
        };
      }>
    >;

    /**
     * See [`Pallet::claim_payout_other`].
     *
     * @param other
     **/
    claimPayoutOther: GenericTxCall<
      (other: AccountId32Like) => ChainSubmittableExtrinsic<{
        pallet: 'NominationPools';
        palletCall: {
          name: 'ClaimPayoutOther';
          params: { other: AccountId32Like };
        };
      }>
    >;

    /**
     * See [`Pallet::set_commission`].
     *
     * @param poolId
     * @param newCommission
     **/
    setCommission: GenericTxCall<
      (
        poolId: number,
        newCommission: [Perbill, AccountId32Like] | undefined,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'NominationPools';
        palletCall: {
          name: 'SetCommission';
          params: { poolId: number; newCommission: [Perbill, AccountId32Like] | undefined };
        };
      }>
    >;

    /**
     * See [`Pallet::set_commission_max`].
     *
     * @param poolId
     * @param maxCommission
     **/
    setCommissionMax: GenericTxCall<
      (
        poolId: number,
        maxCommission: Perbill,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'NominationPools';
        palletCall: {
          name: 'SetCommissionMax';
          params: { poolId: number; maxCommission: Perbill };
        };
      }>
    >;

    /**
     * See [`Pallet::set_commission_change_rate`].
     *
     * @param poolId
     * @param changeRate
     **/
    setCommissionChangeRate: GenericTxCall<
      (
        poolId: number,
        changeRate: PalletNominationPoolsCommissionChangeRate,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'NominationPools';
        palletCall: {
          name: 'SetCommissionChangeRate';
          params: { poolId: number; changeRate: PalletNominationPoolsCommissionChangeRate };
        };
      }>
    >;

    /**
     * See [`Pallet::claim_commission`].
     *
     * @param poolId
     **/
    claimCommission: GenericTxCall<
      (poolId: number) => ChainSubmittableExtrinsic<{
        pallet: 'NominationPools';
        palletCall: {
          name: 'ClaimCommission';
          params: { poolId: number };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  identity: {
    /**
     * See [`Pallet::add_registrar`].
     *
     * @param account
     **/
    addRegistrar: GenericTxCall<
      (account: MultiAddressLike) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'AddRegistrar';
          params: { account: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::set_identity`].
     *
     * @param info
     **/
    setIdentity: GenericTxCall<
      (info: PalletIdentityIdentityInfo) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'SetIdentity';
          params: { info: PalletIdentityIdentityInfo };
        };
      }>
    >;

    /**
     * See [`Pallet::set_subs`].
     *
     * @param subs
     **/
    setSubs: GenericTxCall<
      (subs: Array<[AccountId32Like, Data]>) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'SetSubs';
          params: { subs: Array<[AccountId32Like, Data]> };
        };
      }>
    >;

    /**
     * See [`Pallet::clear_identity`].
     *
     **/
    clearIdentity: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'ClearIdentity';
        };
      }>
    >;

    /**
     * See [`Pallet::request_judgement`].
     *
     * @param regIndex
     * @param maxFee
     **/
    requestJudgement: GenericTxCall<
      (
        regIndex: number,
        maxFee: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'RequestJudgement';
          params: { regIndex: number; maxFee: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::cancel_request`].
     *
     * @param regIndex
     **/
    cancelRequest: GenericTxCall<
      (regIndex: number) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'CancelRequest';
          params: { regIndex: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_fee`].
     *
     * @param index
     * @param fee
     **/
    setFee: GenericTxCall<
      (
        index: number,
        fee: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'SetFee';
          params: { index: number; fee: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::set_account_id`].
     *
     * @param index
     * @param new_
     **/
    setAccountId: GenericTxCall<
      (
        index: number,
        new_: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'SetAccountId';
          params: { index: number; new: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::set_fields`].
     *
     * @param index
     * @param fields
     **/
    setFields: GenericTxCall<
      (
        index: number,
        fields: PalletIdentityBitFlags,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'SetFields';
          params: { index: number; fields: PalletIdentityBitFlags };
        };
      }>
    >;

    /**
     * See [`Pallet::provide_judgement`].
     *
     * @param regIndex
     * @param target
     * @param judgement
     * @param identity
     **/
    provideJudgement: GenericTxCall<
      (
        regIndex: number,
        target: MultiAddressLike,
        judgement: PalletIdentityJudgement,
        identity: H256,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'ProvideJudgement';
          params: { regIndex: number; target: MultiAddressLike; judgement: PalletIdentityJudgement; identity: H256 };
        };
      }>
    >;

    /**
     * See [`Pallet::kill_identity`].
     *
     * @param target
     **/
    killIdentity: GenericTxCall<
      (target: MultiAddressLike) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'KillIdentity';
          params: { target: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::add_sub`].
     *
     * @param sub
     * @param data
     **/
    addSub: GenericTxCall<
      (
        sub: MultiAddressLike,
        data: Data,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'AddSub';
          params: { sub: MultiAddressLike; data: Data };
        };
      }>
    >;

    /**
     * See [`Pallet::rename_sub`].
     *
     * @param sub
     * @param data
     **/
    renameSub: GenericTxCall<
      (
        sub: MultiAddressLike,
        data: Data,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'RenameSub';
          params: { sub: MultiAddressLike; data: Data };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_sub`].
     *
     * @param sub
     **/
    removeSub: GenericTxCall<
      (sub: MultiAddressLike) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'RemoveSub';
          params: { sub: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::quit_sub`].
     *
     **/
    quitSub: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'QuitSub';
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  committeeManagement: {
    /**
     * See [`Pallet::set_ban_config`].
     *
     * @param minimalExpectedPerformance
     * @param underperformedSessionCountThreshold
     * @param cleanSessionCounterDelay
     * @param banPeriod
     **/
    setBanConfig: GenericTxCall<
      (
        minimalExpectedPerformance: number | undefined,
        underperformedSessionCountThreshold: number | undefined,
        cleanSessionCounterDelay: number | undefined,
        banPeriod: number | undefined,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'CommitteeManagement';
        palletCall: {
          name: 'SetBanConfig';
          params: {
            minimalExpectedPerformance: number | undefined;
            underperformedSessionCountThreshold: number | undefined;
            cleanSessionCounterDelay: number | undefined;
            banPeriod: number | undefined;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::ban_from_committee`].
     *
     * @param banned
     * @param banReason
     **/
    banFromCommittee: GenericTxCall<
      (
        banned: AccountId32Like,
        banReason: BytesLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'CommitteeManagement';
        palletCall: {
          name: 'BanFromCommittee';
          params: { banned: AccountId32Like; banReason: BytesLike };
        };
      }>
    >;

    /**
     * See [`Pallet::cancel_ban`].
     *
     * @param banned
     **/
    cancelBan: GenericTxCall<
      (banned: AccountId32Like) => ChainSubmittableExtrinsic<{
        pallet: 'CommitteeManagement';
        palletCall: {
          name: 'CancelBan';
          params: { banned: AccountId32Like };
        };
      }>
    >;

    /**
     * See [`Pallet::set_lenient_threshold`].
     *
     * @param thresholdPercent
     **/
    setLenientThreshold: GenericTxCall<
      (thresholdPercent: number) => ChainSubmittableExtrinsic<{
        pallet: 'CommitteeManagement';
        palletCall: {
          name: 'SetLenientThreshold';
          params: { thresholdPercent: number };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
}
