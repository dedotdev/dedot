// Generated by @delightfuldot/codegen

import type {
  H256,
  DispatchError,
  AccountId32,
  ResultPayload,
  FixedBytes,
  H160,
  Perbill,
  Bytes,
  U256,
  MultiAddress,
  Data,
  Era,
} from '@delightfuldot/codecs';

export type FrameSystemAccountInfo = {
  nonce: number;
  consumers: number;
  providers: number;
  sufficients: number;
  data: PalletBalancesAccountData;
};

export type PalletBalancesAccountData = {
  free: bigint;
  reserved: bigint;
  frozen: bigint;
  flags: PalletBalancesExtraFlags;
};

export type PalletBalancesExtraFlags = bigint;

export type FrameSupportDispatchPerDispatchClass = {
  normal: SpWeightsWeightV2Weight;
  operational: SpWeightsWeightV2Weight;
  mandatory: SpWeightsWeightV2Weight;
};

export type SpWeightsWeightV2Weight = { refTime: bigint; proofSize: bigint };

export type FrameSystemEventRecord = { phase: FrameSystemPhase; event: AstarRuntimeRuntimeEvent; topics: Array<H256> };

export type AstarRuntimeRuntimeEvent =
  | { pallet: 'System'; palletEvent: FrameSystemEvent }
  | { pallet: 'Utility'; palletEvent: PalletUtilityEvent }
  | { pallet: 'Identity'; palletEvent: PalletIdentityEvent }
  | { pallet: 'Multisig'; palletEvent: PalletMultisigEvent }
  | { pallet: 'Proxy'; palletEvent: PalletProxyEvent }
  | { pallet: 'ParachainSystem'; palletEvent: CumulusPalletParachainSystemEvent }
  | { pallet: 'TransactionPayment'; palletEvent: PalletTransactionPaymentEvent }
  | { pallet: 'Balances'; palletEvent: PalletBalancesEvent }
  | { pallet: 'Vesting'; palletEvent: PalletVestingEvent }
  | { pallet: 'DappsStaking'; palletEvent: PalletDappsStakingPalletEvent }
  | { pallet: 'BlockReward'; palletEvent: PalletBlockRewardsHybridEvent }
  | { pallet: 'Assets'; palletEvent: PalletAssetsEvent }
  | { pallet: 'CollatorSelection'; palletEvent: PalletCollatorSelectionEvent }
  | { pallet: 'Session'; palletEvent: PalletSessionEvent }
  | { pallet: 'XcmpQueue'; palletEvent: CumulusPalletXcmpQueueEvent }
  | { pallet: 'PolkadotXcm'; palletEvent: PalletXcmEvent }
  | { pallet: 'CumulusXcm'; palletEvent: CumulusPalletXcmEvent }
  | { pallet: 'DmpQueue'; palletEvent: CumulusPalletDmpQueueEvent }
  | { pallet: 'XcAssetConfig'; palletEvent: PalletXcAssetConfigEvent }
  | { pallet: 'XTokens'; palletEvent: OrmlXtokensModuleEvent }
  | { pallet: 'Evm'; palletEvent: PalletEvmEvent }
  | { pallet: 'Ethereum'; palletEvent: PalletEthereumEvent }
  | { pallet: 'DynamicEvmBaseFee'; palletEvent: PalletDynamicEvmBaseFeeEvent }
  | { pallet: 'Contracts'; palletEvent: PalletContractsEvent }
  | { pallet: 'Sudo'; palletEvent: PalletSudoEvent };

/**
 * Event for the System pallet.
 **/
export type FrameSystemEvent =
  /**
   * An extrinsic completed successfully.
   **/
  | { name: 'ExtrinsicSuccess'; data: { dispatchInfo: FrameSupportDispatchDispatchInfo } }
  /**
   * An extrinsic failed.
   **/
  | { name: 'ExtrinsicFailed'; data: { dispatchError: DispatchError; dispatchInfo: FrameSupportDispatchDispatchInfo } }
  /**
   * `:code` was updated.
   **/
  | { name: 'CodeUpdated' }
  /**
   * A new account was created.
   **/
  | { name: 'NewAccount'; data: { account: AccountId32 } }
  /**
   * An account was reaped.
   **/
  | { name: 'KilledAccount'; data: { account: AccountId32 } }
  /**
   * On on-chain remark happened.
   **/
  | { name: 'Remarked'; data: { sender: AccountId32; hash: H256 } };

export type FrameSupportDispatchDispatchInfo = {
  weight: SpWeightsWeightV2Weight;
  class: FrameSupportDispatchDispatchClass;
  paysFee: FrameSupportDispatchPays;
};

export type FrameSupportDispatchDispatchClass = 'Normal' | 'Operational' | 'Mandatory';

export type FrameSupportDispatchPays = 'Yes' | 'No';

/**
 * The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted by this pallet.
 **/
export type PalletUtilityEvent =
  /**
   * Batch of dispatches did not complete fully. Index of first failing dispatch given, as
   * well as the error.
   **/
  | { name: 'BatchInterrupted'; data: { index: number; error: DispatchError } }
  /**
   * Batch of dispatches completed fully with no error.
   **/
  | { name: 'BatchCompleted' }
  /**
   * Batch of dispatches completed but has errors.
   **/
  | { name: 'BatchCompletedWithErrors' }
  /**
   * A single item within a Batch of dispatches has completed with no error.
   **/
  | { name: 'ItemCompleted' }
  /**
   * A single item within a Batch of dispatches has completed with error.
   **/
  | { name: 'ItemFailed'; data: { error: DispatchError } }
  /**
   * A call was dispatched.
   **/
  | { name: 'DispatchedAs'; data: { result: ResultPayload<[], DispatchError> } };

/**
 * The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted by this pallet.
 **/
export type PalletIdentityEvent =
  /**
   * A name was set or reset (which will remove all judgements).
   **/
  | { name: 'IdentitySet'; data: { who: AccountId32 } }
  /**
   * A name was cleared, and the given balance returned.
   **/
  | { name: 'IdentityCleared'; data: { who: AccountId32; deposit: bigint } }
  /**
   * A name was removed and the given balance slashed.
   **/
  | { name: 'IdentityKilled'; data: { who: AccountId32; deposit: bigint } }
  /**
   * A judgement was asked from a registrar.
   **/
  | { name: 'JudgementRequested'; data: { who: AccountId32; registrarIndex: number } }
  /**
   * A judgement request was retracted.
   **/
  | { name: 'JudgementUnrequested'; data: { who: AccountId32; registrarIndex: number } }
  /**
   * A judgement was given by a registrar.
   **/
  | { name: 'JudgementGiven'; data: { target: AccountId32; registrarIndex: number } }
  /**
   * A registrar was added.
   **/
  | { name: 'RegistrarAdded'; data: { registrarIndex: number } }
  /**
   * A sub-identity was added to an identity and the deposit paid.
   **/
  | { name: 'SubIdentityAdded'; data: { sub: AccountId32; main: AccountId32; deposit: bigint } }
  /**
   * A sub-identity was removed from an identity and the deposit freed.
   **/
  | { name: 'SubIdentityRemoved'; data: { sub: AccountId32; main: AccountId32; deposit: bigint } }
  /**
   * A sub-identity was cleared, and the given deposit repatriated from the
   * main identity account to the sub-identity account.
   **/
  | { name: 'SubIdentityRevoked'; data: { sub: AccountId32; main: AccountId32; deposit: bigint } };

/**
 * The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted by this pallet.
 **/
export type PalletMultisigEvent =
  /**
   * A new multisig operation has begun.
   **/
  | { name: 'NewMultisig'; data: { approving: AccountId32; multisig: AccountId32; callHash: FixedBytes<32> } }
  /**
   * A multisig operation has been approved by someone.
   **/
  | {
      name: 'MultisigApproval';
      data: {
        approving: AccountId32;
        timepoint: PalletMultisigTimepoint;
        multisig: AccountId32;
        callHash: FixedBytes<32>;
      };
    }
  /**
   * A multisig operation has been executed.
   **/
  | {
      name: 'MultisigExecuted';
      data: {
        approving: AccountId32;
        timepoint: PalletMultisigTimepoint;
        multisig: AccountId32;
        callHash: FixedBytes<32>;
        result: ResultPayload<[], DispatchError>;
      };
    }
  /**
   * A multisig operation has been cancelled.
   **/
  | {
      name: 'MultisigCancelled';
      data: {
        cancelling: AccountId32;
        timepoint: PalletMultisigTimepoint;
        multisig: AccountId32;
        callHash: FixedBytes<32>;
      };
    };

export type PalletMultisigTimepoint = { height: number; index: number };

/**
 * The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted by this pallet.
 **/
export type PalletProxyEvent =
  /**
   * A proxy was executed correctly, with the given.
   **/
  | { name: 'ProxyExecuted'; data: { result: ResultPayload<[], DispatchError> } }
  /**
   * A pure account has been created by new proxy with given
   * disambiguation index and proxy type.
   **/
  | {
      name: 'PureCreated';
      data: { pure: AccountId32; who: AccountId32; proxyType: AstarRuntimeProxyType; disambiguationIndex: number };
    }
  /**
   * An announcement was placed to make a call in the future.
   **/
  | { name: 'Announced'; data: { real: AccountId32; proxy: AccountId32; callHash: H256 } }
  /**
   * A proxy was added.
   **/
  | {
      name: 'ProxyAdded';
      data: { delegator: AccountId32; delegatee: AccountId32; proxyType: AstarRuntimeProxyType; delay: number };
    }
  /**
   * A proxy was removed.
   **/
  | {
      name: 'ProxyRemoved';
      data: { delegator: AccountId32; delegatee: AccountId32; proxyType: AstarRuntimeProxyType; delay: number };
    };

export type AstarRuntimeProxyType =
  | 'Any'
  | 'NonTransfer'
  | 'Balances'
  | 'Assets'
  | 'IdentityJudgement'
  | 'CancelProxy'
  | 'DappsStaking'
  | 'StakerRewardClaim';

/**
 * The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted by this pallet.
 **/
export type CumulusPalletParachainSystemEvent =
  /**
   * The validation function has been scheduled to apply.
   **/
  | { name: 'ValidationFunctionStored' }
  /**
   * The validation function was applied as of the contained relay chain block number.
   **/
  | { name: 'ValidationFunctionApplied'; data: { relayChainBlockNum: number } }
  /**
   * The relay-chain aborted the upgrade process.
   **/
  | { name: 'ValidationFunctionDiscarded' }
  /**
   * An upgrade has been authorized.
   **/
  | { name: 'UpgradeAuthorized'; data: { codeHash: H256 } }
  /**
   * Some downward messages have been received and will be processed.
   **/
  | { name: 'DownwardMessagesReceived'; data: { count: number } }
  /**
   * Downward messages were processed using the given weight.
   **/
  | { name: 'DownwardMessagesProcessed'; data: { weightUsed: SpWeightsWeightV2Weight; dmqHead: H256 } }
  /**
   * An upward message was sent to the relay chain.
   **/
  | { name: 'UpwardMessageSent'; data: { messageHash?: FixedBytes<32> | undefined } };

/**
 * The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted by this pallet.
 **/
export type PalletTransactionPaymentEvent =
  /**
   * A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,
   * has been paid by `who`.
   **/
  { name: 'TransactionFeePaid'; data: { who: AccountId32; actualFee: bigint; tip: bigint } };

/**
 * The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted by this pallet.
 **/
export type PalletBalancesEvent =
  /**
   * An account was created with some free balance.
   **/
  | { name: 'Endowed'; data: { account: AccountId32; freeBalance: bigint } }
  /**
   * An account was removed whose balance was non-zero but below ExistentialDeposit,
   * resulting in an outright loss.
   **/
  | { name: 'DustLost'; data: { account: AccountId32; amount: bigint } }
  /**
   * Transfer succeeded.
   **/
  | { name: 'Transfer'; data: { from: AccountId32; to: AccountId32; amount: bigint } }
  /**
   * A balance was set by root.
   **/
  | { name: 'BalanceSet'; data: { who: AccountId32; free: bigint } }
  /**
   * Some balance was reserved (moved from free to reserved).
   **/
  | { name: 'Reserved'; data: { who: AccountId32; amount: bigint } }
  /**
   * Some balance was unreserved (moved from reserved to free).
   **/
  | { name: 'Unreserved'; data: { who: AccountId32; amount: bigint } }
  /**
   * Some balance was moved from the reserve of the first account to the second account.
   * Final argument indicates the destination balance type.
   **/
  | {
      name: 'ReserveRepatriated';
      data: {
        from: AccountId32;
        to: AccountId32;
        amount: bigint;
        destinationStatus: FrameSupportTokensMiscBalanceStatus;
      };
    }
  /**
   * Some amount was deposited (e.g. for transaction fees).
   **/
  | { name: 'Deposit'; data: { who: AccountId32; amount: bigint } }
  /**
   * Some amount was withdrawn from the account (e.g. for transaction fees).
   **/
  | { name: 'Withdraw'; data: { who: AccountId32; amount: bigint } }
  /**
   * Some amount was removed from the account (e.g. for misbehavior).
   **/
  | { name: 'Slashed'; data: { who: AccountId32; amount: bigint } }
  /**
   * Some amount was minted into an account.
   **/
  | { name: 'Minted'; data: { who: AccountId32; amount: bigint } }
  /**
   * Some amount was burned from an account.
   **/
  | { name: 'Burned'; data: { who: AccountId32; amount: bigint } }
  /**
   * Some amount was suspended from an account (it can be restored later).
   **/
  | { name: 'Suspended'; data: { who: AccountId32; amount: bigint } }
  /**
   * Some amount was restored into an account.
   **/
  | { name: 'Restored'; data: { who: AccountId32; amount: bigint } }
  /**
   * An account was upgraded.
   **/
  | { name: 'Upgraded'; data: { who: AccountId32 } }
  /**
   * Total issuance was increased by `amount`, creating a credit to be balanced.
   **/
  | { name: 'Issued'; data: { amount: bigint } }
  /**
   * Total issuance was decreased by `amount`, creating a debt to be balanced.
   **/
  | { name: 'Rescinded'; data: { amount: bigint } }
  /**
   * Some balance was locked.
   **/
  | { name: 'Locked'; data: { who: AccountId32; amount: bigint } }
  /**
   * Some balance was unlocked.
   **/
  | { name: 'Unlocked'; data: { who: AccountId32; amount: bigint } }
  /**
   * Some balance was frozen.
   **/
  | { name: 'Frozen'; data: { who: AccountId32; amount: bigint } }
  /**
   * Some balance was thawed.
   **/
  | { name: 'Thawed'; data: { who: AccountId32; amount: bigint } };

export type FrameSupportTokensMiscBalanceStatus = 'Free' | 'Reserved';

/**
 * The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted by this pallet.
 **/
export type PalletVestingEvent =
  /**
   * The amount vested has been updated. This could indicate a change in funds available.
   * The balance given is the amount which is left unvested (and thus locked).
   **/
  | { name: 'VestingUpdated'; data: { account: AccountId32; unvested: bigint } }
  /**
   * An \[account\] has become fully vested.
   **/
  | { name: 'VestingCompleted'; data: { account: AccountId32 } };

/**
 * The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted by this pallet.
 **/
export type PalletDappsStakingPalletEvent =
  /**
   * Account has bonded and staked funds on a smart contract.
   **/
  | { name: 'BondAndStake'; data: [AccountId32, AstarRuntimeSmartContract, bigint] }
  /**
   * Account has unbonded & unstaked some funds. Unbonding process begins.
   **/
  | { name: 'UnbondAndUnstake'; data: [AccountId32, AstarRuntimeSmartContract, bigint] }
  /**
   * Account has fully withdrawn all staked amount from an unregistered contract.
   **/
  | { name: 'WithdrawFromUnregistered'; data: [AccountId32, AstarRuntimeSmartContract, bigint] }
  /**
   * Account has withdrawn unbonded funds.
   **/
  | { name: 'Withdrawn'; data: [AccountId32, bigint] }
  /**
   * New contract added for staking.
   **/
  | { name: 'NewContract'; data: [AccountId32, AstarRuntimeSmartContract] }
  /**
   * Contract removed from dapps staking.
   **/
  | { name: 'ContractRemoved'; data: [AccountId32, AstarRuntimeSmartContract] }
  /**
   * New dapps staking era. Distribute era rewards to contracts.
   **/
  | { name: 'NewDappStakingEra'; data: number }
  /**
   * Reward paid to staker or developer.
   **/
  | { name: 'Reward'; data: [AccountId32, AstarRuntimeSmartContract, number, bigint] }
  /**
   * Maintenance mode has been enabled or disabled
   **/
  | { name: 'MaintenanceMode'; data: boolean }
  /**
   * Reward handling modified
   **/
  | { name: 'RewardDestination'; data: [AccountId32, PalletDappsStakingRewardDestination] }
  /**
   * Nomination part has been transfered from one contract to another.
   *
   * \(staker account, origin smart contract, amount, target smart contract\)
   **/
  | { name: 'NominationTransfer'; data: [AccountId32, AstarRuntimeSmartContract, bigint, AstarRuntimeSmartContract] }
  /**
   * Stale, unclaimed reward from an unregistered contract has been burned.
   *
   * \(developer account, smart contract, era, amount burned\)
   **/
  | { name: 'StaleRewardBurned'; data: [AccountId32, AstarRuntimeSmartContract, number, bigint] };

export type AstarRuntimeSmartContract = { tag: 'Evm'; value: H160 } | { tag: 'Wasm'; value: AccountId32 };

export type PalletDappsStakingRewardDestination = 'FreeBalance' | 'StakeBalance';

/**
 * The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted by this pallet.
 **/
export type PalletBlockRewardsHybridEvent =
  /**
   * Distribution configuration has been updated.
   **/
  { name: 'DistributionConfigurationChanged'; data: PalletBlockRewardsHybridRewardDistributionConfig };

export type PalletBlockRewardsHybridRewardDistributionConfig = {
  treasuryPercent: Perbill;
  baseStakerPercent: Perbill;
  dappsPercent: Perbill;
  collatorsPercent: Perbill;
  adjustablePercent: Perbill;
  idealDappsStakingTvl: Perbill;
};

/**
 * The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted by this pallet.
 **/
export type PalletAssetsEvent =
  /**
   * Some asset class was created.
   **/
  | { name: 'Created'; data: { assetId: bigint; creator: AccountId32; owner: AccountId32 } }
  /**
   * Some assets were issued.
   **/
  | { name: 'Issued'; data: { assetId: bigint; owner: AccountId32; amount: bigint } }
  /**
   * Some assets were transferred.
   **/
  | { name: 'Transferred'; data: { assetId: bigint; from: AccountId32; to: AccountId32; amount: bigint } }
  /**
   * Some assets were destroyed.
   **/
  | { name: 'Burned'; data: { assetId: bigint; owner: AccountId32; balance: bigint } }
  /**
   * The management team changed.
   **/
  | { name: 'TeamChanged'; data: { assetId: bigint; issuer: AccountId32; admin: AccountId32; freezer: AccountId32 } }
  /**
   * The owner changed.
   **/
  | { name: 'OwnerChanged'; data: { assetId: bigint; owner: AccountId32 } }
  /**
   * Some account `who` was frozen.
   **/
  | { name: 'Frozen'; data: { assetId: bigint; who: AccountId32 } }
  /**
   * Some account `who` was thawed.
   **/
  | { name: 'Thawed'; data: { assetId: bigint; who: AccountId32 } }
  /**
   * Some asset `asset_id` was frozen.
   **/
  | { name: 'AssetFrozen'; data: { assetId: bigint } }
  /**
   * Some asset `asset_id` was thawed.
   **/
  | { name: 'AssetThawed'; data: { assetId: bigint } }
  /**
   * Accounts were destroyed for given asset.
   **/
  | { name: 'AccountsDestroyed'; data: { assetId: bigint; accountsDestroyed: number; accountsRemaining: number } }
  /**
   * Approvals were destroyed for given asset.
   **/
  | { name: 'ApprovalsDestroyed'; data: { assetId: bigint; approvalsDestroyed: number; approvalsRemaining: number } }
  /**
   * An asset class is in the process of being destroyed.
   **/
  | { name: 'DestructionStarted'; data: { assetId: bigint } }
  /**
   * An asset class was destroyed.
   **/
  | { name: 'Destroyed'; data: { assetId: bigint } }
  /**
   * Some asset class was force-created.
   **/
  | { name: 'ForceCreated'; data: { assetId: bigint; owner: AccountId32 } }
  /**
   * New metadata has been set for an asset.
   **/
  | { name: 'MetadataSet'; data: { assetId: bigint; name: Bytes; symbol: Bytes; decimals: number; isFrozen: boolean } }
  /**
   * Metadata has been cleared for an asset.
   **/
  | { name: 'MetadataCleared'; data: { assetId: bigint } }
  /**
   * (Additional) funds have been approved for transfer to a destination account.
   **/
  | { name: 'ApprovedTransfer'; data: { assetId: bigint; source: AccountId32; delegate: AccountId32; amount: bigint } }
  /**
   * An approval for account `delegate` was cancelled by `owner`.
   **/
  | { name: 'ApprovalCancelled'; data: { assetId: bigint; owner: AccountId32; delegate: AccountId32 } }
  /**
   * An `amount` was transferred in its entirety from `owner` to `destination` by
   * the approved `delegate`.
   **/
  | {
      name: 'TransferredApproved';
      data: { assetId: bigint; owner: AccountId32; delegate: AccountId32; destination: AccountId32; amount: bigint };
    }
  /**
   * An asset has had its attributes changed by the `Force` origin.
   **/
  | { name: 'AssetStatusChanged'; data: { assetId: bigint } }
  /**
   * The min_balance of an asset has been updated by the asset owner.
   **/
  | { name: 'AssetMinBalanceChanged'; data: { assetId: bigint; newMinBalance: bigint } }
  /**
   * Some account `who` was created with a deposit from `depositor`.
   **/
  | { name: 'Touched'; data: { assetId: bigint; who: AccountId32; depositor: AccountId32 } }
  /**
   * Some account `who` was blocked.
   **/
  | { name: 'Blocked'; data: { assetId: bigint; who: AccountId32 } };

/**
 * The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted by this pallet.
 **/
export type PalletCollatorSelectionEvent =
  | { name: 'NewInvulnerables'; data: Array<AccountId32> }
  | { name: 'NewDesiredCandidates'; data: number }
  | { name: 'NewCandidacyBond'; data: bigint }
  | { name: 'CandidateAdded'; data: [AccountId32, bigint] }
  | { name: 'CandidateRemoved'; data: AccountId32 }
  | { name: 'CandidateSlashed'; data: AccountId32 };

/**
 * The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted by this pallet.
 **/
export type PalletSessionEvent =
  /**
   * New session has happened. Note that the argument is the session index, not the
   * block number as the type might suggest.
   **/
  { name: 'NewSession'; data: { sessionIndex: number } };

/**
 * The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted by this pallet.
 **/
export type CumulusPalletXcmpQueueEvent =
  /**
   * Some XCM was executed ok.
   **/
  | { name: 'Success'; data: { messageHash?: FixedBytes<32> | undefined; weight: SpWeightsWeightV2Weight } }
  /**
   * Some XCM failed.
   **/
  | {
      name: 'Fail';
      data: { messageHash?: FixedBytes<32> | undefined; error: XcmV3TraitsError; weight: SpWeightsWeightV2Weight };
    }
  /**
   * Bad XCM version used.
   **/
  | { name: 'BadVersion'; data: { messageHash?: FixedBytes<32> | undefined } }
  /**
   * Bad XCM format used.
   **/
  | { name: 'BadFormat'; data: { messageHash?: FixedBytes<32> | undefined } }
  /**
   * An HRMP message was sent to a sibling parachain.
   **/
  | { name: 'XcmpMessageSent'; data: { messageHash?: FixedBytes<32> | undefined } }
  /**
   * An XCM exceeded the individual message weight budget.
   **/
  | {
      name: 'OverweightEnqueued';
      data: { sender: PolkadotParachainPrimitivesId; sentAt: number; index: bigint; required: SpWeightsWeightV2Weight };
    }
  /**
   * An XCM from the overweight queue was executed with the given actual weight used.
   **/
  | { name: 'OverweightServiced'; data: { index: bigint; used: SpWeightsWeightV2Weight } };

export type XcmV3TraitsError =
  | { tag: 'Overflow' }
  | { tag: 'Unimplemented' }
  | { tag: 'UntrustedReserveLocation' }
  | { tag: 'UntrustedTeleportLocation' }
  | { tag: 'LocationFull' }
  | { tag: 'LocationNotInvertible' }
  | { tag: 'BadOrigin' }
  | { tag: 'InvalidLocation' }
  | { tag: 'AssetNotFound' }
  | { tag: 'FailedToTransactAsset' }
  | { tag: 'NotWithdrawable' }
  | { tag: 'LocationCannotHold' }
  | { tag: 'ExceedsMaxMessageSize' }
  | { tag: 'DestinationUnsupported' }
  | { tag: 'Transport' }
  | { tag: 'Unroutable' }
  | { tag: 'UnknownClaim' }
  | { tag: 'FailedToDecode' }
  | { tag: 'MaxWeightInvalid' }
  | { tag: 'NotHoldingFees' }
  | { tag: 'TooExpensive' }
  | { tag: 'Trap'; value: bigint }
  | { tag: 'ExpectationFalse' }
  | { tag: 'PalletNotFound' }
  | { tag: 'NameMismatch' }
  | { tag: 'VersionIncompatible' }
  | { tag: 'HoldingWouldOverflow' }
  | { tag: 'ExportError' }
  | { tag: 'ReanchorFailed' }
  | { tag: 'NoDeal' }
  | { tag: 'FeesNotMet' }
  | { tag: 'LockError' }
  | { tag: 'NoPermission' }
  | { tag: 'Unanchored' }
  | { tag: 'NotDepositable' }
  | { tag: 'UnhandledXcmVersion' }
  | { tag: 'WeightLimitReached'; value: SpWeightsWeightV2Weight }
  | { tag: 'Barrier' }
  | { tag: 'WeightNotComputable' }
  | { tag: 'ExceedsStackLimit' };

export type PolkadotParachainPrimitivesId = number;

/**
 * The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted by this pallet.
 **/
export type PalletXcmEvent =
  /**
   * Execution of an XCM message was attempted.
   *
   * \[ outcome \]
   **/
  | { name: 'Attempted'; data: XcmV3TraitsOutcome }
  /**
   * A XCM message was sent.
   *
   * \[ origin, destination, message \]
   **/
  | { name: 'Sent'; data: [XcmV3MultilocationMultiLocation, XcmV3MultilocationMultiLocation, XcmV3Xcm] }
  /**
   * Query response received which does not match a registered query. This may be because a
   * matching query was never registered, it may be because it is a duplicate response, or
   * because the query timed out.
   *
   * \[ origin location, id \]
   **/
  | { name: 'UnexpectedResponse'; data: [XcmV3MultilocationMultiLocation, bigint] }
  /**
   * Query response has been received and is ready for taking with `take_response`. There is
   * no registered notification call.
   *
   * \[ id, response \]
   **/
  | { name: 'ResponseReady'; data: [bigint, XcmV3Response] }
  /**
   * Query response has been received and query is removed. The registered notification has
   * been dispatched and executed successfully.
   *
   * \[ id, pallet index, call index \]
   **/
  | { name: 'Notified'; data: [bigint, number, number] }
  /**
   * Query response has been received and query is removed. The registered notification could
   * not be dispatched because the dispatch weight is greater than the maximum weight
   * originally budgeted by this runtime for the query result.
   *
   * \[ id, pallet index, call index, actual weight, max budgeted weight \]
   **/
  | { name: 'NotifyOverweight'; data: [bigint, number, number, SpWeightsWeightV2Weight, SpWeightsWeightV2Weight] }
  /**
   * Query response has been received and query is removed. There was a general error with
   * dispatching the notification call.
   *
   * \[ id, pallet index, call index \]
   **/
  | { name: 'NotifyDispatchError'; data: [bigint, number, number] }
  /**
   * Query response has been received and query is removed. The dispatch was unable to be
   * decoded into a `Call`; this might be due to dispatch function having a signature which
   * is not `(origin, QueryId, Response)`.
   *
   * \[ id, pallet index, call index \]
   **/
  | { name: 'NotifyDecodeFailed'; data: [bigint, number, number] }
  /**
   * Expected query response has been received but the origin location of the response does
   * not match that expected. The query remains registered for a later, valid, response to
   * be received and acted upon.
   *
   * \[ origin location, id, expected location \]
   **/
  | {
      name: 'InvalidResponder';
      data: [XcmV3MultilocationMultiLocation, bigint, XcmV3MultilocationMultiLocation | undefined];
    }
  /**
   * Expected query response has been received but the expected origin location placed in
   * storage by this runtime previously cannot be decoded. The query remains registered.
   *
   * This is unexpected (since a location placed in storage in a previously executing
   * runtime should be readable prior to query timeout) and dangerous since the possibly
   * valid response will be dropped. Manual governance intervention is probably going to be
   * needed.
   *
   * \[ origin location, id \]
   **/
  | { name: 'InvalidResponderVersion'; data: [XcmV3MultilocationMultiLocation, bigint] }
  /**
   * Received query response has been read and removed.
   *
   * \[ id \]
   **/
  | { name: 'ResponseTaken'; data: bigint }
  /**
   * Some assets have been placed in an asset trap.
   *
   * \[ hash, origin, assets \]
   **/
  | { name: 'AssetsTrapped'; data: [H256, XcmV3MultilocationMultiLocation, XcmVersionedMultiAssets] }
  /**
   * An XCM version change notification message has been attempted to be sent.
   *
   * The cost of sending it (borne by the chain) is included.
   *
   * \[ destination, result, cost \]
   **/
  | { name: 'VersionChangeNotified'; data: [XcmV3MultilocationMultiLocation, number, XcmV3MultiassetMultiAssets] }
  /**
   * The supported version of a location has been changed. This might be through an
   * automatic notification or a manual intervention.
   *
   * \[ location, XCM version \]
   **/
  | { name: 'SupportedVersionChanged'; data: [XcmV3MultilocationMultiLocation, number] }
  /**
   * A given location which had a version change subscription was dropped owing to an error
   * sending the notification to it.
   *
   * \[ location, query ID, error \]
   **/
  | { name: 'NotifyTargetSendFail'; data: [XcmV3MultilocationMultiLocation, bigint, XcmV3TraitsError] }
  /**
   * A given location which had a version change subscription was dropped owing to an error
   * migrating the location to our new XCM format.
   *
   * \[ location, query ID \]
   **/
  | { name: 'NotifyTargetMigrationFail'; data: [XcmVersionedMultiLocation, bigint] }
  /**
   * Expected query response has been received but the expected querier location placed in
   * storage by this runtime previously cannot be decoded. The query remains registered.
   *
   * This is unexpected (since a location placed in storage in a previously executing
   * runtime should be readable prior to query timeout) and dangerous since the possibly
   * valid response will be dropped. Manual governance intervention is probably going to be
   * needed.
   *
   * \[ origin location, id \]
   **/
  | { name: 'InvalidQuerierVersion'; data: [XcmV3MultilocationMultiLocation, bigint] }
  /**
   * Expected query response has been received but the querier location of the response does
   * not match the expected. The query remains registered for a later, valid, response to
   * be received and acted upon.
   *
   * \[ origin location, id, expected querier, maybe actual querier \]
   **/
  | {
      name: 'InvalidQuerier';
      data: [
        XcmV3MultilocationMultiLocation,
        bigint,
        XcmV3MultilocationMultiLocation,
        XcmV3MultilocationMultiLocation | undefined,
      ];
    }
  /**
   * A remote has requested XCM version change notification from us and we have honored it.
   * A version information message is sent to them and its cost is included.
   *
   * \[ destination location, cost \]
   **/
  | { name: 'VersionNotifyStarted'; data: [XcmV3MultilocationMultiLocation, XcmV3MultiassetMultiAssets] }
  /**
   * We have requested that a remote chain sends us XCM version change notifications.
   *
   * \[ destination location, cost \]
   **/
  | { name: 'VersionNotifyRequested'; data: [XcmV3MultilocationMultiLocation, XcmV3MultiassetMultiAssets] }
  /**
   * We have requested that a remote chain stops sending us XCM version change notifications.
   *
   * \[ destination location, cost \]
   **/
  | { name: 'VersionNotifyUnrequested'; data: [XcmV3MultilocationMultiLocation, XcmV3MultiassetMultiAssets] }
  /**
   * Fees were paid from a location for an operation (often for using `SendXcm`).
   *
   * \[ paying location, fees \]
   **/
  | { name: 'FeesPaid'; data: [XcmV3MultilocationMultiLocation, XcmV3MultiassetMultiAssets] }
  /**
   * Some assets have been claimed from an asset trap
   *
   * \[ hash, origin, assets \]
   **/
  | { name: 'AssetsClaimed'; data: [H256, XcmV3MultilocationMultiLocation, XcmVersionedMultiAssets] };

export type XcmV3TraitsOutcome =
  | { tag: 'Complete'; value: SpWeightsWeightV2Weight }
  | { tag: 'Incomplete'; value: [SpWeightsWeightV2Weight, XcmV3TraitsError] }
  | { tag: 'Error'; value: XcmV3TraitsError };

export type XcmV3MultilocationMultiLocation = { parents: number; interior: XcmV3Junctions };

export type XcmV3Junctions =
  | { tag: 'Here' }
  | { tag: 'X1'; value: XcmV3Junction }
  | { tag: 'X2'; value: [XcmV3Junction, XcmV3Junction] }
  | { tag: 'X3'; value: [XcmV3Junction, XcmV3Junction, XcmV3Junction] }
  | { tag: 'X4'; value: [XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction] }
  | { tag: 'X5'; value: [XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction] }
  | { tag: 'X6'; value: [XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction] }
  | {
      tag: 'X7';
      value: [XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction];
    }
  | {
      tag: 'X8';
      value: [
        XcmV3Junction,
        XcmV3Junction,
        XcmV3Junction,
        XcmV3Junction,
        XcmV3Junction,
        XcmV3Junction,
        XcmV3Junction,
        XcmV3Junction,
      ];
    };

export type XcmV3Junction =
  | { tag: 'Parachain'; value: number }
  | { tag: 'AccountId32'; value: { network?: XcmV3JunctionNetworkId | undefined; id: FixedBytes<32> } }
  | { tag: 'AccountIndex64'; value: { network?: XcmV3JunctionNetworkId | undefined; index: bigint } }
  | { tag: 'AccountKey20'; value: { network?: XcmV3JunctionNetworkId | undefined; key: FixedBytes<20> } }
  | { tag: 'PalletInstance'; value: number }
  | { tag: 'GeneralIndex'; value: bigint }
  | { tag: 'GeneralKey'; value: { length: number; data: FixedBytes<32> } }
  | { tag: 'OnlyChild' }
  | { tag: 'Plurality'; value: { id: XcmV3JunctionBodyId; part: XcmV3JunctionBodyPart } }
  | { tag: 'GlobalConsensus'; value: XcmV3JunctionNetworkId };

export type XcmV3JunctionNetworkId =
  | { tag: 'ByGenesis'; value: FixedBytes<32> }
  | { tag: 'ByFork'; value: { blockNumber: bigint; blockHash: FixedBytes<32> } }
  | { tag: 'Polkadot' }
  | { tag: 'Kusama' }
  | { tag: 'Westend' }
  | { tag: 'Rococo' }
  | { tag: 'Wococo' }
  | { tag: 'Ethereum'; value: { chainId: bigint } }
  | { tag: 'BitcoinCore' }
  | { tag: 'BitcoinCash' };

export type XcmV3JunctionBodyId =
  | { tag: 'Unit' }
  | { tag: 'Moniker'; value: FixedBytes<4> }
  | { tag: 'Index'; value: number }
  | { tag: 'Executive' }
  | { tag: 'Technical' }
  | { tag: 'Legislative' }
  | { tag: 'Judicial' }
  | { tag: 'Defense' }
  | { tag: 'Administration' }
  | { tag: 'Treasury' };

export type XcmV3JunctionBodyPart =
  | { tag: 'Voice' }
  | { tag: 'Members'; value: { count: number } }
  | { tag: 'Fraction'; value: { nom: number; denom: number } }
  | { tag: 'AtLeastProportion'; value: { nom: number; denom: number } }
  | { tag: 'MoreThanProportion'; value: { nom: number; denom: number } };

export type XcmV3Xcm = Array<XcmV3Instruction>;

export type XcmV3Instruction =
  | { tag: 'WithdrawAsset'; value: XcmV3MultiassetMultiAssets }
  | { tag: 'ReserveAssetDeposited'; value: XcmV3MultiassetMultiAssets }
  | { tag: 'ReceiveTeleportedAsset'; value: XcmV3MultiassetMultiAssets }
  | {
      tag: 'QueryResponse';
      value: {
        queryId: bigint;
        response: XcmV3Response;
        maxWeight: SpWeightsWeightV2Weight;
        querier?: XcmV3MultilocationMultiLocation | undefined;
      };
    }
  | {
      tag: 'TransferAsset';
      value: { assets: XcmV3MultiassetMultiAssets; beneficiary: XcmV3MultilocationMultiLocation };
    }
  | {
      tag: 'TransferReserveAsset';
      value: { assets: XcmV3MultiassetMultiAssets; dest: XcmV3MultilocationMultiLocation; xcm: XcmV3Xcm };
    }
  | {
      tag: 'Transact';
      value: { originKind: XcmV2OriginKind; requireWeightAtMost: SpWeightsWeightV2Weight; call: XcmDoubleEncoded };
    }
  | { tag: 'HrmpNewChannelOpenRequest'; value: { sender: number; maxMessageSize: number; maxCapacity: number } }
  | { tag: 'HrmpChannelAccepted'; value: { recipient: number } }
  | { tag: 'HrmpChannelClosing'; value: { initiator: number; sender: number; recipient: number } }
  | { tag: 'ClearOrigin' }
  | { tag: 'DescendOrigin'; value: XcmV3Junctions }
  | { tag: 'ReportError'; value: XcmV3QueryResponseInfo }
  | {
      tag: 'DepositAsset';
      value: { assets: XcmV3MultiassetMultiAssetFilter; beneficiary: XcmV3MultilocationMultiLocation };
    }
  | {
      tag: 'DepositReserveAsset';
      value: { assets: XcmV3MultiassetMultiAssetFilter; dest: XcmV3MultilocationMultiLocation; xcm: XcmV3Xcm };
    }
  | {
      tag: 'ExchangeAsset';
      value: { give: XcmV3MultiassetMultiAssetFilter; want: XcmV3MultiassetMultiAssets; maximal: boolean };
    }
  | {
      tag: 'InitiateReserveWithdraw';
      value: { assets: XcmV3MultiassetMultiAssetFilter; reserve: XcmV3MultilocationMultiLocation; xcm: XcmV3Xcm };
    }
  | {
      tag: 'InitiateTeleport';
      value: { assets: XcmV3MultiassetMultiAssetFilter; dest: XcmV3MultilocationMultiLocation; xcm: XcmV3Xcm };
    }
  | { tag: 'ReportHolding'; value: { responseInfo: XcmV3QueryResponseInfo; assets: XcmV3MultiassetMultiAssetFilter } }
  | { tag: 'BuyExecution'; value: { fees: XcmV3MultiassetMultiAsset; weightLimit: XcmV3WeightLimit } }
  | { tag: 'RefundSurplus' }
  | { tag: 'SetErrorHandler'; value: XcmV3Xcm }
  | { tag: 'SetAppendix'; value: XcmV3Xcm }
  | { tag: 'ClearError' }
  | { tag: 'ClaimAsset'; value: { assets: XcmV3MultiassetMultiAssets; ticket: XcmV3MultilocationMultiLocation } }
  | { tag: 'Trap'; value: bigint }
  | { tag: 'SubscribeVersion'; value: { queryId: bigint; maxResponseWeight: SpWeightsWeightV2Weight } }
  | { tag: 'UnsubscribeVersion' }
  | { tag: 'BurnAsset'; value: XcmV3MultiassetMultiAssets }
  | { tag: 'ExpectAsset'; value: XcmV3MultiassetMultiAssets }
  | { tag: 'ExpectOrigin'; value?: XcmV3MultilocationMultiLocation | undefined }
  | { tag: 'ExpectError'; value?: [number, XcmV3TraitsError] | undefined }
  | { tag: 'ExpectTransactStatus'; value: XcmV3MaybeErrorCode }
  | { tag: 'QueryPallet'; value: { moduleName: Bytes; responseInfo: XcmV3QueryResponseInfo } }
  | {
      tag: 'ExpectPallet';
      value: { index: number; name: Bytes; moduleName: Bytes; crateMajor: number; minCrateMinor: number };
    }
  | { tag: 'ReportTransactStatus'; value: XcmV3QueryResponseInfo }
  | { tag: 'ClearTransactStatus' }
  | { tag: 'UniversalOrigin'; value: XcmV3Junction }
  | { tag: 'ExportMessage'; value: { network: XcmV3JunctionNetworkId; destination: XcmV3Junctions; xcm: XcmV3Xcm } }
  | { tag: 'LockAsset'; value: { asset: XcmV3MultiassetMultiAsset; unlocker: XcmV3MultilocationMultiLocation } }
  | { tag: 'UnlockAsset'; value: { asset: XcmV3MultiassetMultiAsset; target: XcmV3MultilocationMultiLocation } }
  | { tag: 'NoteUnlockable'; value: { asset: XcmV3MultiassetMultiAsset; owner: XcmV3MultilocationMultiLocation } }
  | { tag: 'RequestUnlock'; value: { asset: XcmV3MultiassetMultiAsset; locker: XcmV3MultilocationMultiLocation } }
  | { tag: 'SetFeesMode'; value: { jitWithdraw: boolean } }
  | { tag: 'SetTopic'; value: FixedBytes<32> }
  | { tag: 'ClearTopic' }
  | { tag: 'AliasOrigin'; value: XcmV3MultilocationMultiLocation }
  | {
      tag: 'UnpaidExecution';
      value: { weightLimit: XcmV3WeightLimit; checkOrigin?: XcmV3MultilocationMultiLocation | undefined };
    };

export type XcmV3MultiassetMultiAssets = Array<XcmV3MultiassetMultiAsset>;

export type XcmV3MultiassetMultiAsset = { id: XcmV3MultiassetAssetId; fun: XcmV3MultiassetFungibility };

export type XcmV3MultiassetAssetId =
  | { tag: 'Concrete'; value: XcmV3MultilocationMultiLocation }
  | { tag: 'Abstract'; value: FixedBytes<32> };

export type XcmV3MultiassetFungibility =
  | { tag: 'Fungible'; value: bigint }
  | { tag: 'NonFungible'; value: XcmV3MultiassetAssetInstance };

export type XcmV3MultiassetAssetInstance =
  | { tag: 'Undefined' }
  | { tag: 'Index'; value: bigint }
  | { tag: 'Array4'; value: FixedBytes<4> }
  | { tag: 'Array8'; value: FixedBytes<8> }
  | { tag: 'Array16'; value: FixedBytes<16> }
  | { tag: 'Array32'; value: FixedBytes<32> };

export type XcmV3Response =
  | { tag: 'Null' }
  | { tag: 'Assets'; value: XcmV3MultiassetMultiAssets }
  | { tag: 'ExecutionResult'; value?: [number, XcmV3TraitsError] | undefined }
  | { tag: 'Version'; value: number }
  | { tag: 'PalletsInfo'; value: Array<XcmV3PalletInfo> }
  | { tag: 'DispatchResult'; value: XcmV3MaybeErrorCode };

export type XcmV3PalletInfo = {
  index: number;
  name: Bytes;
  moduleName: Bytes;
  major: number;
  minor: number;
  patch: number;
};

export type XcmV3MaybeErrorCode =
  | { tag: 'Success' }
  | { tag: 'Error'; value: Bytes }
  | { tag: 'TruncatedError'; value: Bytes };

export type XcmV2OriginKind = 'Native' | 'SovereignAccount' | 'Superuser' | 'Xcm';

export type XcmDoubleEncoded = { encoded: Bytes };

export type XcmV3QueryResponseInfo = {
  destination: XcmV3MultilocationMultiLocation;
  queryId: bigint;
  maxWeight: SpWeightsWeightV2Weight;
};

export type XcmV3MultiassetMultiAssetFilter =
  | { tag: 'Definite'; value: XcmV3MultiassetMultiAssets }
  | { tag: 'Wild'; value: XcmV3MultiassetWildMultiAsset };

export type XcmV3MultiassetWildMultiAsset =
  | { tag: 'All' }
  | { tag: 'AllOf'; value: { id: XcmV3MultiassetAssetId; fun: XcmV3MultiassetWildFungibility } }
  | { tag: 'AllCounted'; value: number }
  | { tag: 'AllOfCounted'; value: { id: XcmV3MultiassetAssetId; fun: XcmV3MultiassetWildFungibility; count: number } };

export type XcmV3MultiassetWildFungibility = 'Fungible' | 'NonFungible';

export type XcmV3WeightLimit = { tag: 'Unlimited' } | { tag: 'Limited'; value: SpWeightsWeightV2Weight };

export type XcmVersionedMultiAssets =
  | { tag: 'V2'; value: XcmV2MultiassetMultiAssets }
  | { tag: 'V3'; value: XcmV3MultiassetMultiAssets };

export type XcmV2MultiassetMultiAssets = Array<XcmV2MultiassetMultiAsset>;

export type XcmV2MultiassetMultiAsset = { id: XcmV2MultiassetAssetId; fun: XcmV2MultiassetFungibility };

export type XcmV2MultiassetAssetId =
  | { tag: 'Concrete'; value: XcmV2MultilocationMultiLocation }
  | { tag: 'Abstract'; value: Bytes };

export type XcmV2MultilocationMultiLocation = { parents: number; interior: XcmV2MultilocationJunctions };

export type XcmV2MultilocationJunctions =
  | { tag: 'Here' }
  | { tag: 'X1'; value: XcmV2Junction }
  | { tag: 'X2'; value: [XcmV2Junction, XcmV2Junction] }
  | { tag: 'X3'; value: [XcmV2Junction, XcmV2Junction, XcmV2Junction] }
  | { tag: 'X4'; value: [XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction] }
  | { tag: 'X5'; value: [XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction] }
  | { tag: 'X6'; value: [XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction] }
  | {
      tag: 'X7';
      value: [XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction];
    }
  | {
      tag: 'X8';
      value: [
        XcmV2Junction,
        XcmV2Junction,
        XcmV2Junction,
        XcmV2Junction,
        XcmV2Junction,
        XcmV2Junction,
        XcmV2Junction,
        XcmV2Junction,
      ];
    };

export type XcmV2Junction =
  | { tag: 'Parachain'; value: number }
  | { tag: 'AccountId32'; value: { network: XcmV2NetworkId; id: FixedBytes<32> } }
  | { tag: 'AccountIndex64'; value: { network: XcmV2NetworkId; index: bigint } }
  | { tag: 'AccountKey20'; value: { network: XcmV2NetworkId; key: FixedBytes<20> } }
  | { tag: 'PalletInstance'; value: number }
  | { tag: 'GeneralIndex'; value: bigint }
  | { tag: 'GeneralKey'; value: Bytes }
  | { tag: 'OnlyChild' }
  | { tag: 'Plurality'; value: { id: XcmV2BodyId; part: XcmV2BodyPart } };

export type XcmV2NetworkId = { tag: 'Any' } | { tag: 'Named'; value: Bytes } | { tag: 'Polkadot' } | { tag: 'Kusama' };

export type XcmV2BodyId =
  | { tag: 'Unit' }
  | { tag: 'Named'; value: Bytes }
  | { tag: 'Index'; value: number }
  | { tag: 'Executive' }
  | { tag: 'Technical' }
  | { tag: 'Legislative' }
  | { tag: 'Judicial' }
  | { tag: 'Defense' }
  | { tag: 'Administration' }
  | { tag: 'Treasury' };

export type XcmV2BodyPart =
  | { tag: 'Voice' }
  | { tag: 'Members'; value: { count: number } }
  | { tag: 'Fraction'; value: { nom: number; denom: number } }
  | { tag: 'AtLeastProportion'; value: { nom: number; denom: number } }
  | { tag: 'MoreThanProportion'; value: { nom: number; denom: number } };

export type XcmV2MultiassetFungibility =
  | { tag: 'Fungible'; value: bigint }
  | { tag: 'NonFungible'; value: XcmV2MultiassetAssetInstance };

export type XcmV2MultiassetAssetInstance =
  | { tag: 'Undefined' }
  | { tag: 'Index'; value: bigint }
  | { tag: 'Array4'; value: FixedBytes<4> }
  | { tag: 'Array8'; value: FixedBytes<8> }
  | { tag: 'Array16'; value: FixedBytes<16> }
  | { tag: 'Array32'; value: FixedBytes<32> }
  | { tag: 'Blob'; value: Bytes };

export type XcmVersionedMultiLocation =
  | { tag: 'V2'; value: XcmV2MultilocationMultiLocation }
  | { tag: 'V3'; value: XcmV3MultilocationMultiLocation };

/**
 * The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted by this pallet.
 **/
export type CumulusPalletXcmEvent =
  /**
   * Downward message is invalid XCM.
   * \[ id \]
   **/
  | { name: 'InvalidFormat'; data: FixedBytes<32> }
  /**
   * Downward message is unsupported version of XCM.
   * \[ id \]
   **/
  | { name: 'UnsupportedVersion'; data: FixedBytes<32> }
  /**
   * Downward message executed with the given outcome.
   * \[ id, outcome \]
   **/
  | { name: 'ExecutedDownward'; data: [FixedBytes<32>, XcmV3TraitsOutcome] };

/**
 * The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted by this pallet.
 **/
export type CumulusPalletDmpQueueEvent =
  /**
   * Downward message is invalid XCM.
   **/
  | { name: 'InvalidFormat'; data: { messageId: FixedBytes<32> } }
  /**
   * Downward message is unsupported version of XCM.
   **/
  | { name: 'UnsupportedVersion'; data: { messageId: FixedBytes<32> } }
  /**
   * Downward message executed with the given outcome.
   **/
  | { name: 'ExecutedDownward'; data: { messageId: FixedBytes<32>; outcome: XcmV3TraitsOutcome } }
  /**
   * The weight limit for handling downward messages was reached.
   **/
  | {
      name: 'WeightExhausted';
      data: {
        messageId: FixedBytes<32>;
        remainingWeight: SpWeightsWeightV2Weight;
        requiredWeight: SpWeightsWeightV2Weight;
      };
    }
  /**
   * Downward message is overweight and was placed in the overweight queue.
   **/
  | {
      name: 'OverweightEnqueued';
      data: { messageId: FixedBytes<32>; overweightIndex: bigint; requiredWeight: SpWeightsWeightV2Weight };
    }
  /**
   * Downward message from the overweight queue was executed.
   **/
  | { name: 'OverweightServiced'; data: { overweightIndex: bigint; weightUsed: SpWeightsWeightV2Weight } }
  /**
   * The maximum number of downward messages was.
   **/
  | { name: 'MaxMessagesExhausted'; data: { messageId: FixedBytes<32> } };

/**
 * The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted by this pallet.
 **/
export type PalletXcAssetConfigEvent =
  /**
   * Registed mapping between asset type and asset Id.
   **/
  | { name: 'AssetRegistered'; data: { assetLocation: XcmVersionedMultiLocation; assetId: bigint } }
  /**
   * Changed the amount of units we are charging per execution second for an asset
   **/
  | { name: 'UnitsPerSecondChanged'; data: { assetLocation: XcmVersionedMultiLocation; unitsPerSecond: bigint } }
  /**
   * Changed the asset type mapping for a given asset id
   **/
  | {
      name: 'AssetLocationChanged';
      data: {
        previousAssetLocation: XcmVersionedMultiLocation;
        assetId: bigint;
        newAssetLocation: XcmVersionedMultiLocation;
      };
    }
  /**
   * Supported asset type for fee payment removed.
   **/
  | { name: 'SupportedAssetRemoved'; data: { assetLocation: XcmVersionedMultiLocation } }
  /**
   * Removed all information related to an asset Id
   **/
  | { name: 'AssetRemoved'; data: { assetLocation: XcmVersionedMultiLocation; assetId: bigint } };

/**
 * The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted by this pallet.
 **/
export type OrmlXtokensModuleEvent =
  /**
   * Transferred `MultiAsset` with fee.
   **/
  {
    tag: 'TransferredMultiAssets';
    value: {
      sender: AccountId32;
      assets: XcmV3MultiassetMultiAssets;
      fee: XcmV3MultiassetMultiAsset;
      dest: XcmV3MultilocationMultiLocation;
    };
  };

/**
 * The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted by this pallet.
 **/
export type PalletEvmEvent =
  /**
   * Ethereum events from contracts.
   **/
  | { name: 'Log'; data: { log: EthereumLog } }
  /**
   * A contract has been created at given address.
   **/
  | { name: 'Created'; data: { address: H160 } }
  /**
   * A contract was attempted to be created, but the execution failed.
   **/
  | { name: 'CreatedFailed'; data: { address: H160 } }
  /**
   * A contract has been executed successfully with states applied.
   **/
  | { name: 'Executed'; data: { address: H160 } }
  /**
   * A contract has been executed with errors. States are reverted with only gas fees applied.
   **/
  | { name: 'ExecutedFailed'; data: { address: H160 } };

export type EthereumLog = { address: H160; topics: Array<H256>; data: Bytes };

/**
 * The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted by this pallet.
 **/
export type PalletEthereumEvent =
  /**
   * An ethereum transaction was successfully executed.
   **/
  {
    name: 'Executed';
    data: { from: H160; to: H160; transactionHash: H256; exitReason: EvmCoreErrorExitReason; extraData: Bytes };
  };

export type EvmCoreErrorExitReason =
  | { tag: 'Succeed'; value: EvmCoreErrorExitSucceed }
  | { tag: 'Error'; value: EvmCoreErrorExitError }
  | { tag: 'Revert'; value: EvmCoreErrorExitRevert }
  | { tag: 'Fatal'; value: EvmCoreErrorExitFatal };

export type EvmCoreErrorExitSucceed = 'Stopped' | 'Returned' | 'Suicided';

export type EvmCoreErrorExitError =
  | { tag: 'StackUnderflow' }
  | { tag: 'StackOverflow' }
  | { tag: 'InvalidJump' }
  | { tag: 'InvalidRange' }
  | { tag: 'DesignatedInvalid' }
  | { tag: 'CallTooDeep' }
  | { tag: 'CreateCollision' }
  | { tag: 'CreateContractLimit' }
  | { tag: 'InvalidCode'; value: EvmCoreOpcode }
  | { tag: 'OutOfOffset' }
  | { tag: 'OutOfGas' }
  | { tag: 'OutOfFund' }
  | { tag: 'PcUnderflow' }
  | { tag: 'CreateEmpty' }
  | { tag: 'Other'; value: string }
  | { tag: 'MaxNonce' };

export type EvmCoreOpcode = number;

export type EvmCoreErrorExitRevert = 'Reverted';

export type EvmCoreErrorExitFatal =
  | { tag: 'NotSupported' }
  | { tag: 'UnhandledInterrupt' }
  | { tag: 'CallErrorAsFatal'; value: EvmCoreErrorExitError }
  | { tag: 'Other'; value: string };

/**
 * The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted by this pallet.
 **/
export type PalletDynamicEvmBaseFeeEvent =
  /**
   * New `base fee per gas` value has been force-set.
   **/
  { name: 'NewBaseFeePerGas'; data: { fee: U256 } };

/**
 * The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted by this pallet.
 **/
export type PalletContractsEvent =
  /**
   * Contract deployed by address at the specified address.
   **/
  | { name: 'Instantiated'; data: { deployer: AccountId32; contract: AccountId32 } }
  /**
   * Contract has been removed.
   *
   * # Note
   *
   * The only way for a contract to be removed and emitting this event is by calling
   * `seal_terminate`.
   **/
  | {
      name: 'Terminated';
      data: {
        /**
         * The contract that was terminated.
         **/
        contract: AccountId32;

        /**
         * The account that received the contracts remaining balance
         **/
        beneficiary: AccountId32;
      };
    }
  /**
   * Code with the specified hash has been stored.
   **/
  | { name: 'CodeStored'; data: { codeHash: H256 } }
  /**
   * A custom event emitted by the contract.
   **/
  | {
      name: 'ContractEmitted';
      data: {
        /**
         * The contract that emitted the event.
         **/
        contract: AccountId32;

        /**
         * Data supplied by the contract. Metadata generated during contract compilation
         * is needed to decode it.
         **/
        data: Bytes;
      };
    }
  /**
   * A code with the specified hash was removed.
   **/
  | { name: 'CodeRemoved'; data: { codeHash: H256 } }
  /**
   * A contract's code was updated.
   **/
  | {
      name: 'ContractCodeUpdated';
      data: {
        /**
         * The contract that has been updated.
         **/
        contract: AccountId32;

        /**
         * New code hash that was set for the contract.
         **/
        newCodeHash: H256;

        /**
         * Previous code hash of the contract.
         **/
        oldCodeHash: H256;
      };
    }
  /**
   * A contract was called either by a plain account or another contract.
   *
   * # Note
   *
   * Please keep in mind that like all events this is only emitted for successful
   * calls. This is because on failure all storage changes including events are
   * rolled back.
   **/
  | {
      name: 'Called';
      data: {
        /**
         * The caller of the `contract`.
         **/
        caller: PalletContractsOrigin;

        /**
         * The contract that was called.
         **/
        contract: AccountId32;
      };
    }
  /**
   * A contract delegate called a code hash.
   *
   * # Note
   *
   * Please keep in mind that like all events this is only emitted for successful
   * calls. This is because on failure all storage changes including events are
   * rolled back.
   **/
  | {
      name: 'DelegateCalled';
      data: {
        /**
         * The contract that performed the delegate call and hence in whose context
         * the `code_hash` is executed.
         **/
        contract: AccountId32;

        /**
         * The code hash that was delegate called.
         **/
        codeHash: H256;
      };
    };

export type PalletContractsOrigin = { tag: 'Root' } | { tag: 'Signed'; value: AccountId32 };

export type AstarRuntimeRuntime = {};

/**
 * The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted by this pallet.
 **/
export type PalletSudoEvent =
  /**
   * A sudo just took place. \[result\]
   **/
  | { name: 'Sudid'; data: { sudoResult: ResultPayload<[], DispatchError> } }
  /**
   * The \[sudoer\] just switched identity; the old key is supplied if one existed.
   **/
  | { name: 'KeyChanged'; data: { oldSudoer?: AccountId32 | undefined } }
  /**
   * A sudo just took place. \[result\]
   **/
  | { name: 'SudoAsDone'; data: { sudoResult: ResultPayload<[], DispatchError> } };

export type FrameSystemPhase =
  | { tag: 'ApplyExtrinsic'; value: number }
  | { tag: 'Finalization' }
  | { tag: 'Initialization' };

export type FrameSystemLastRuntimeUpgradeInfo = { specVersion: number; specName: string };

/**
 * Contains one variant per dispatchable that can be called by an extrinsic.
 **/
export type FrameSystemCall =
  /**
   * Make some on-chain remark.
   *
   * - `O(1)`
   **/
  | { name: 'Remark'; params: { remark: Bytes } }
  /**
   * Set the number of pages in the WebAssembly environment's heap.
   **/
  | { name: 'SetHeapPages'; params: { pages: bigint } }
  /**
   * Set the new runtime code.
   **/
  | { name: 'SetCode'; params: { code: Bytes } }
  /**
   * Set the new runtime code without doing any checks of the given `code`.
   **/
  | { name: 'SetCodeWithoutChecks'; params: { code: Bytes } }
  /**
   * Set some items of storage.
   **/
  | { name: 'SetStorage'; params: { items: Array<[Bytes, Bytes]> } }
  /**
   * Kill some items from storage.
   **/
  | { name: 'KillStorage'; params: { keys: Array<Bytes> } }
  /**
   * Kill all storage items with a key that starts with the given prefix.
   *
   * **NOTE:** We rely on the Root origin to provide us the number of subkeys under
   * the prefix we are removing to accurately calculate the weight of this function.
   **/
  | { name: 'KillPrefix'; params: { prefix: Bytes; subkeys: number } }
  /**
   * Make some on-chain remark and emit event.
   **/
  | { name: 'RemarkWithEvent'; params: { remark: Bytes } };

export type FrameSystemLimitsBlockWeights = {
  baseBlock: SpWeightsWeightV2Weight;
  maxBlock: SpWeightsWeightV2Weight;
  perClass: FrameSupportDispatchPerDispatchClassWeightsPerClass;
};

export type FrameSupportDispatchPerDispatchClassWeightsPerClass = {
  normal: FrameSystemLimitsWeightsPerClass;
  operational: FrameSystemLimitsWeightsPerClass;
  mandatory: FrameSystemLimitsWeightsPerClass;
};

export type FrameSystemLimitsWeightsPerClass = {
  baseExtrinsic: SpWeightsWeightV2Weight;
  maxExtrinsic?: SpWeightsWeightV2Weight | undefined;
  maxTotal?: SpWeightsWeightV2Weight | undefined;
  reserved?: SpWeightsWeightV2Weight | undefined;
};

export type FrameSystemLimitsBlockLength = { max: FrameSupportDispatchPerDispatchClassU32 };

export type FrameSupportDispatchPerDispatchClassU32 = { normal: number; operational: number; mandatory: number };

export type SpWeightsRuntimeDbWeight = { read: bigint; write: bigint };

export type SpVersionRuntimeVersion = {
  specName: string;
  implName: string;
  authoringVersion: number;
  specVersion: number;
  implVersion: number;
  apis: Array<[FixedBytes<8>, number]>;
  transactionVersion: number;
  stateVersion: number;
};

/**
 * Error for the System pallet
 **/
export type FrameSystemError =
  /**
   * The name of specification does not match between the current runtime
   * and the new runtime.
   **/
  | 'InvalidSpecName'
  /**
   * The specification version is not allowed to decrease between the current runtime
   * and the new runtime.
   **/
  | 'SpecVersionNeedsToIncrease'
  /**
   * Failed to extract the runtime version from the new runtime.
   *
   * Either calling `Core_version` or decoding `RuntimeVersion` failed.
   **/
  | 'FailedToExtractRuntimeVersion'
  /**
   * Suicide called when the account has non-default composite data.
   **/
  | 'NonDefaultComposite'
  /**
   * There is a non-zero reference count preventing the account from being purged.
   **/
  | 'NonZeroRefCount'
  /**
   * The origin filter prevent the call to be dispatched.
   **/
  | 'CallFiltered';

/**
 * Contains one variant per dispatchable that can be called by an extrinsic.
 **/
export type PalletUtilityCall =
  /**
   * Send a batch of dispatch calls.
   *
   * May be called from any origin except `None`.
   *
   * - `calls`: The calls to be dispatched from the same origin. The number of call must not
   * exceed the constant: `batched_calls_limit` (available in constant metadata).
   *
   * If origin is root then the calls are dispatched without checking origin filter. (This
   * includes bypassing `frame_system::Config::BaseCallFilter`).
   *
   * ## Complexity
   * - O(C) where C is the number of calls to be batched.
   *
   * This will return `Ok` in all circumstances. To determine the success of the batch, an
   * event is deposited. If a call failed and the batch was interrupted, then the
   * `BatchInterrupted` event is deposited, along with the number of successful calls made
   * and the error of the failed call. If all were successful, then the `BatchCompleted`
   * event is deposited.
   **/
  | { name: 'Batch'; params: { calls: Array<AstarRuntimeRuntimeCall> } }
  /**
   * Send a call through an indexed pseudonym of the sender.
   *
   * Filter from origin are passed along. The call will be dispatched with an origin which
   * use the same filter as the origin of this call.
   *
   * NOTE: If you need to ensure that any account-based filtering is not honored (i.e.
   * because you expect `proxy` to have been used prior in the call stack and you do not want
   * the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`
   * in the Multisig pallet instead.
   *
   * NOTE: Prior to version *12, this was called `as_limited_sub`.
   *
   * The dispatch origin for this call must be _Signed_.
   **/
  | { name: 'AsDerivative'; params: { index: number; call: AstarRuntimeRuntimeCall } }
  /**
   * Send a batch of dispatch calls and atomically execute them.
   * The whole transaction will rollback and fail if any of the calls failed.
   *
   * May be called from any origin except `None`.
   *
   * - `calls`: The calls to be dispatched from the same origin. The number of call must not
   * exceed the constant: `batched_calls_limit` (available in constant metadata).
   *
   * If origin is root then the calls are dispatched without checking origin filter. (This
   * includes bypassing `frame_system::Config::BaseCallFilter`).
   *
   * ## Complexity
   * - O(C) where C is the number of calls to be batched.
   **/
  | { name: 'BatchAll'; params: { calls: Array<AstarRuntimeRuntimeCall> } }
  /**
   * Dispatches a function call with a provided origin.
   *
   * The dispatch origin for this call must be _Root_.
   *
   * ## Complexity
   * - O(1).
   **/
  | { name: 'DispatchAs'; params: { asOrigin: AstarRuntimeOriginCaller; call: AstarRuntimeRuntimeCall } }
  /**
   * Send a batch of dispatch calls.
   * Unlike `batch`, it allows errors and won't interrupt.
   *
   * May be called from any origin except `None`.
   *
   * - `calls`: The calls to be dispatched from the same origin. The number of call must not
   * exceed the constant: `batched_calls_limit` (available in constant metadata).
   *
   * If origin is root then the calls are dispatch without checking origin filter. (This
   * includes bypassing `frame_system::Config::BaseCallFilter`).
   *
   * ## Complexity
   * - O(C) where C is the number of calls to be batched.
   **/
  | { name: 'ForceBatch'; params: { calls: Array<AstarRuntimeRuntimeCall> } }
  /**
   * Dispatch a function call with a specified weight.
   *
   * This function does not check the weight of the call, and instead allows the
   * Root origin to specify the weight of the call.
   *
   * The dispatch origin for this call must be _Root_.
   **/
  | { name: 'WithWeight'; params: { call: AstarRuntimeRuntimeCall; weight: SpWeightsWeightV2Weight } };

export type AstarRuntimeRuntimeCall =
  | { pallet: 'System'; palletCall: FrameSystemCall }
  | { pallet: 'Utility'; palletCall: PalletUtilityCall }
  | { pallet: 'Identity'; palletCall: PalletIdentityCall }
  | { pallet: 'Timestamp'; palletCall: PalletTimestampCall }
  | { pallet: 'Multisig'; palletCall: PalletMultisigCall }
  | { pallet: 'Proxy'; palletCall: PalletProxyCall }
  | { pallet: 'ParachainSystem'; palletCall: CumulusPalletParachainSystemCall }
  | { pallet: 'ParachainInfo'; palletCall: ParachainInfoCall }
  | { pallet: 'Balances'; palletCall: PalletBalancesCall }
  | { pallet: 'Vesting'; palletCall: PalletVestingCall }
  | { pallet: 'DappsStaking'; palletCall: PalletDappsStakingPalletCall }
  | { pallet: 'BlockReward'; palletCall: PalletBlockRewardsHybridCall }
  | { pallet: 'Assets'; palletCall: PalletAssetsCall }
  | { pallet: 'CollatorSelection'; palletCall: PalletCollatorSelectionCall }
  | { pallet: 'Session'; palletCall: PalletSessionCall }
  | { pallet: 'XcmpQueue'; palletCall: CumulusPalletXcmpQueueCall }
  | { pallet: 'PolkadotXcm'; palletCall: PalletXcmCall }
  | { pallet: 'CumulusXcm'; palletCall: CumulusPalletXcmCall }
  | { pallet: 'DmpQueue'; palletCall: CumulusPalletDmpQueueCall }
  | { pallet: 'XcAssetConfig'; palletCall: PalletXcAssetConfigCall }
  | { pallet: 'XTokens'; palletCall: OrmlXtokensModuleCall }
  | { pallet: 'Evm'; palletCall: PalletEvmCall }
  | { pallet: 'Ethereum'; palletCall: PalletEthereumCall }
  | { pallet: 'DynamicEvmBaseFee'; palletCall: PalletDynamicEvmBaseFeeCall }
  | { pallet: 'Contracts'; palletCall: PalletContractsCall }
  | { pallet: 'Sudo'; palletCall: PalletSudoCall };

/**
 * Identity pallet declaration.
 **/
export type PalletIdentityCall =
  /**
   * Add a registrar to the system.
   *
   * The dispatch origin for this call must be `T::RegistrarOrigin`.
   *
   * - `account`: the account of the registrar.
   *
   * Emits `RegistrarAdded` if successful.
   *
   * ## Complexity
   * - `O(R)` where `R` registrar-count (governance-bounded and code-bounded).
   **/
  | { name: 'AddRegistrar'; params: { account: MultiAddress } }
  /**
   * Set an account's identity information and reserve the appropriate deposit.
   *
   * If the account already has identity information, the deposit is taken as part payment
   * for the new deposit.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * - `info`: The identity information.
   *
   * Emits `IdentitySet` if successful.
   *
   * ## Complexity
   * - `O(X + X' + R)`
   * - where `X` additional-field-count (deposit-bounded and code-bounded)
   * - where `R` judgements-count (registrar-count-bounded)
   **/
  | { name: 'SetIdentity'; params: { info: PalletIdentityIdentityInfo } }
  /**
   * Set the sub-accounts of the sender.
   *
   * Payment: Any aggregate balance reserved by previous `set_subs` calls will be returned
   * and an amount `SubAccountDeposit` will be reserved for each item in `subs`.
   *
   * The dispatch origin for this call must be _Signed_ and the sender must have a registered
   * identity.
   *
   * - `subs`: The identity's (new) sub-accounts.
   *
   * ## Complexity
   * - `O(P + S)`
   * - where `P` old-subs-count (hard- and deposit-bounded).
   * - where `S` subs-count (hard- and deposit-bounded).
   **/
  | { name: 'SetSubs'; params: { subs: Array<[AccountId32, Data]> } }
  /**
   * Clear an account's identity info and all sub-accounts and return all deposits.
   *
   * Payment: All reserved balances on the account are returned.
   *
   * The dispatch origin for this call must be _Signed_ and the sender must have a registered
   * identity.
   *
   * Emits `IdentityCleared` if successful.
   *
   * ## Complexity
   * - `O(R + S + X)`
   * - where `R` registrar-count (governance-bounded).
   * - where `S` subs-count (hard- and deposit-bounded).
   * - where `X` additional-field-count (deposit-bounded and code-bounded).
   **/
  | { name: 'ClearIdentity' }
  /**
   * Request a judgement from a registrar.
   *
   * Payment: At most `max_fee` will be reserved for payment to the registrar if judgement
   * given.
   *
   * The dispatch origin for this call must be _Signed_ and the sender must have a
   * registered identity.
   *
   * - `reg_index`: The index of the registrar whose judgement is requested.
   * - `max_fee`: The maximum fee that may be paid. This should just be auto-populated as:
   *
   * ```nocompile
   * Self::registrars().get(reg_index).unwrap().fee
   * ```
   *
   * Emits `JudgementRequested` if successful.
   *
   * ## Complexity
   * - `O(R + X)`.
   * - where `R` registrar-count (governance-bounded).
   * - where `X` additional-field-count (deposit-bounded and code-bounded).
   **/
  | { name: 'RequestJudgement'; params: { regIndex: number; maxFee: bigint } }
  /**
   * Cancel a previous request.
   *
   * Payment: A previously reserved deposit is returned on success.
   *
   * The dispatch origin for this call must be _Signed_ and the sender must have a
   * registered identity.
   *
   * - `reg_index`: The index of the registrar whose judgement is no longer requested.
   *
   * Emits `JudgementUnrequested` if successful.
   *
   * ## Complexity
   * - `O(R + X)`.
   * - where `R` registrar-count (governance-bounded).
   * - where `X` additional-field-count (deposit-bounded and code-bounded).
   **/
  | { name: 'CancelRequest'; params: { regIndex: number } }
  /**
   * Set the fee required for a judgement to be requested from a registrar.
   *
   * The dispatch origin for this call must be _Signed_ and the sender must be the account
   * of the registrar whose index is `index`.
   *
   * - `index`: the index of the registrar whose fee is to be set.
   * - `fee`: the new fee.
   *
   * ## Complexity
   * - `O(R)`.
   * - where `R` registrar-count (governance-bounded).
   **/
  | { name: 'SetFee'; params: { index: number; fee: bigint } }
  /**
   * Change the account associated with a registrar.
   *
   * The dispatch origin for this call must be _Signed_ and the sender must be the account
   * of the registrar whose index is `index`.
   *
   * - `index`: the index of the registrar whose fee is to be set.
   * - `new`: the new account ID.
   *
   * ## Complexity
   * - `O(R)`.
   * - where `R` registrar-count (governance-bounded).
   **/
  | { name: 'SetAccountId'; params: { index: number; new: MultiAddress } }
  /**
   * Set the field information for a registrar.
   *
   * The dispatch origin for this call must be _Signed_ and the sender must be the account
   * of the registrar whose index is `index`.
   *
   * - `index`: the index of the registrar whose fee is to be set.
   * - `fields`: the fields that the registrar concerns themselves with.
   *
   * ## Complexity
   * - `O(R)`.
   * - where `R` registrar-count (governance-bounded).
   **/
  | { name: 'SetFields'; params: { index: number; fields: PalletIdentityBitFlags } }
  /**
   * Provide a judgement for an account's identity.
   *
   * The dispatch origin for this call must be _Signed_ and the sender must be the account
   * of the registrar whose index is `reg_index`.
   *
   * - `reg_index`: the index of the registrar whose judgement is being made.
   * - `target`: the account whose identity the judgement is upon. This must be an account
   * with a registered identity.
   * - `judgement`: the judgement of the registrar of index `reg_index` about `target`.
   * - `identity`: The hash of the [`IdentityInfo`] for that the judgement is provided.
   *
   * Emits `JudgementGiven` if successful.
   *
   * ## Complexity
   * - `O(R + X)`.
   * - where `R` registrar-count (governance-bounded).
   * - where `X` additional-field-count (deposit-bounded and code-bounded).
   **/
  | {
      name: 'ProvideJudgement';
      params: { regIndex: number; target: MultiAddress; judgement: PalletIdentityJudgement; identity: H256 };
    }
  /**
   * Remove an account's identity and sub-account information and slash the deposits.
   *
   * Payment: Reserved balances from `set_subs` and `set_identity` are slashed and handled by
   * `Slash`. Verification request deposits are not returned; they should be cancelled
   * manually using `cancel_request`.
   *
   * The dispatch origin for this call must match `T::ForceOrigin`.
   *
   * - `target`: the account whose identity the judgement is upon. This must be an account
   * with a registered identity.
   *
   * Emits `IdentityKilled` if successful.
   *
   * ## Complexity
   * - `O(R + S + X)`
   * - where `R` registrar-count (governance-bounded).
   * - where `S` subs-count (hard- and deposit-bounded).
   * - where `X` additional-field-count (deposit-bounded and code-bounded).
   **/
  | { name: 'KillIdentity'; params: { target: MultiAddress } }
  /**
   * Add the given account to the sender's subs.
   *
   * Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated
   * to the sender.
   *
   * The dispatch origin for this call must be _Signed_ and the sender must have a registered
   * sub identity of `sub`.
   **/
  | { name: 'AddSub'; params: { sub: MultiAddress; data: Data } }
  /**
   * Alter the associated name of the given sub-account.
   *
   * The dispatch origin for this call must be _Signed_ and the sender must have a registered
   * sub identity of `sub`.
   **/
  | { name: 'RenameSub'; params: { sub: MultiAddress; data: Data } }
  /**
   * Remove the given account from the sender's subs.
   *
   * Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated
   * to the sender.
   *
   * The dispatch origin for this call must be _Signed_ and the sender must have a registered
   * sub identity of `sub`.
   **/
  | { name: 'RemoveSub'; params: { sub: MultiAddress } }
  /**
   * Remove the sender as a sub-account.
   *
   * Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated
   * to the sender (*not* the original depositor).
   *
   * The dispatch origin for this call must be _Signed_ and the sender must have a registered
   * super-identity.
   *
   * NOTE: This should not normally be used, but is provided in the case that the non-
   * controller of an account is maliciously registered as a sub-account.
   **/
  | { name: 'QuitSub' };

export type PalletIdentityIdentityInfo = {
  additional: Array<[Data, Data]>;
  display: Data;
  legal: Data;
  web: Data;
  riot: Data;
  email: Data;
  pgpFingerprint?: FixedBytes<20> | undefined;
  image: Data;
  twitter: Data;
};

export type PalletIdentityBitFlags = bigint;

export type PalletIdentityIdentityField =
  | 'Display'
  | 'Legal'
  | 'Web'
  | 'Riot'
  | 'Email'
  | 'PgpFingerprint'
  | 'Image'
  | 'Twitter';

export type PalletIdentityJudgement =
  | { tag: 'Unknown' }
  | { tag: 'FeePaid'; value: bigint }
  | { tag: 'Reasonable' }
  | { tag: 'KnownGood' }
  | { tag: 'OutOfDate' }
  | { tag: 'LowQuality' }
  | { tag: 'Erroneous' };

/**
 * Contains one variant per dispatchable that can be called by an extrinsic.
 **/
export type PalletTimestampCall =
  /**
   * Set the current time.
   *
   * This call should be invoked exactly once per block. It will panic at the finalization
   * phase, if this call hasn't been invoked by that time.
   *
   * The timestamp should be greater than the previous one by the amount specified by
   * `MinimumPeriod`.
   *
   * The dispatch origin for this call must be `Inherent`.
   *
   * ## Complexity
   * - `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)
   * - 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in
   * `on_finalize`)
   * - 1 event handler `on_timestamp_set`. Must be `O(1)`.
   **/
  { name: 'Set'; params: { now: bigint } };

/**
 * Contains one variant per dispatchable that can be called by an extrinsic.
 **/
export type PalletMultisigCall =
  /**
   * Immediately dispatch a multi-signature call using a single approval from the caller.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * - `other_signatories`: The accounts (other than the sender) who are part of the
   * multi-signature, but do not participate in the approval process.
   * - `call`: The call to be executed.
   *
   * Result is equivalent to the dispatched result.
   *
   * ## Complexity
   * O(Z + C) where Z is the length of the call and C its execution weight.
   **/
  | { name: 'AsMultiThreshold1'; params: { otherSignatories: Array<AccountId32>; call: AstarRuntimeRuntimeCall } }
  /**
   * Register approval for a dispatch to be made from a deterministic composite account if
   * approved by a total of `threshold - 1` of `other_signatories`.
   *
   * If there are enough, then dispatch the call.
   *
   * Payment: `DepositBase` will be reserved if this is the first approval, plus
   * `threshold` times `DepositFactor`. It is returned once this dispatch happens or
   * is cancelled.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * - `threshold`: The total number of approvals for this dispatch before it is executed.
   * - `other_signatories`: The accounts (other than the sender) who can approve this
   * dispatch. May not be empty.
   * - `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is
   * not the first approval, then it must be `Some`, with the timepoint (block number and
   * transaction index) of the first approval transaction.
   * - `call`: The call to be executed.
   *
   * NOTE: Unless this is the final approval, you will generally want to use
   * `approve_as_multi` instead, since it only requires a hash of the call.
   *
   * Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise
   * on success, result is `Ok` and the result from the interior call, if it was executed,
   * may be found in the deposited `MultisigExecuted` event.
   *
   * ## Complexity
   * - `O(S + Z + Call)`.
   * - Up to one balance-reserve or unreserve operation.
   * - One passthrough operation, one insert, both `O(S)` where `S` is the number of
   * signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
   * - One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.
   * - One encode & hash, both of complexity `O(S)`.
   * - Up to one binary search and insert (`O(logS + S)`).
   * - I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.
   * - One event.
   * - The weight of the `call`.
   * - Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit
   * taken for its lifetime of `DepositBase + threshold * DepositFactor`.
   **/
  | {
      name: 'AsMulti';
      params: {
        threshold: number;
        otherSignatories: Array<AccountId32>;
        maybeTimepoint?: PalletMultisigTimepoint | undefined;
        call: AstarRuntimeRuntimeCall;
        maxWeight: SpWeightsWeightV2Weight;
      };
    }
  /**
   * Register approval for a dispatch to be made from a deterministic composite account if
   * approved by a total of `threshold - 1` of `other_signatories`.
   *
   * Payment: `DepositBase` will be reserved if this is the first approval, plus
   * `threshold` times `DepositFactor`. It is returned once this dispatch happens or
   * is cancelled.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * - `threshold`: The total number of approvals for this dispatch before it is executed.
   * - `other_signatories`: The accounts (other than the sender) who can approve this
   * dispatch. May not be empty.
   * - `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is
   * not the first approval, then it must be `Some`, with the timepoint (block number and
   * transaction index) of the first approval transaction.
   * - `call_hash`: The hash of the call to be executed.
   *
   * NOTE: If this is the final approval, you will want to use `as_multi` instead.
   *
   * ## Complexity
   * - `O(S)`.
   * - Up to one balance-reserve or unreserve operation.
   * - One passthrough operation, one insert, both `O(S)` where `S` is the number of
   * signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
   * - One encode & hash, both of complexity `O(S)`.
   * - Up to one binary search and insert (`O(logS + S)`).
   * - I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.
   * - One event.
   * - Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit
   * taken for its lifetime of `DepositBase + threshold * DepositFactor`.
   **/
  | {
      name: 'ApproveAsMulti';
      params: {
        threshold: number;
        otherSignatories: Array<AccountId32>;
        maybeTimepoint?: PalletMultisigTimepoint | undefined;
        callHash: FixedBytes<32>;
        maxWeight: SpWeightsWeightV2Weight;
      };
    }
  /**
   * Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously
   * for this operation will be unreserved on success.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * - `threshold`: The total number of approvals for this dispatch before it is executed.
   * - `other_signatories`: The accounts (other than the sender) who can approve this
   * dispatch. May not be empty.
   * - `timepoint`: The timepoint (block number and transaction index) of the first approval
   * transaction for this dispatch.
   * - `call_hash`: The hash of the call to be executed.
   *
   * ## Complexity
   * - `O(S)`.
   * - Up to one balance-reserve or unreserve operation.
   * - One passthrough operation, one insert, both `O(S)` where `S` is the number of
   * signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
   * - One encode & hash, both of complexity `O(S)`.
   * - One event.
   * - I/O: 1 read `O(S)`, one remove.
   * - Storage: removes one item.
   **/
  | {
      name: 'CancelAsMulti';
      params: {
        threshold: number;
        otherSignatories: Array<AccountId32>;
        timepoint: PalletMultisigTimepoint;
        callHash: FixedBytes<32>;
      };
    };

/**
 * Contains one variant per dispatchable that can be called by an extrinsic.
 **/
export type PalletProxyCall =
  /**
   * Dispatch the given `call` from an account that the sender is authorised for through
   * `add_proxy`.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * Parameters:
   * - `real`: The account that the proxy will make a call on behalf of.
   * - `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.
   * - `call`: The call to be made by the `real` account.
   **/
  | {
      name: 'Proxy';
      params: { real: MultiAddress; forceProxyType?: AstarRuntimeProxyType | undefined; call: AstarRuntimeRuntimeCall };
    }
  /**
   * Register a proxy account for the sender that is able to make calls on its behalf.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * Parameters:
   * - `proxy`: The account that the `caller` would like to make a proxy.
   * - `proxy_type`: The permissions allowed for this proxy account.
   * - `delay`: The announcement period required of the initial proxy. Will generally be
   * zero.
   **/
  | { name: 'AddProxy'; params: { delegate: MultiAddress; proxyType: AstarRuntimeProxyType; delay: number } }
  /**
   * Unregister a proxy account for the sender.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * Parameters:
   * - `proxy`: The account that the `caller` would like to remove as a proxy.
   * - `proxy_type`: The permissions currently enabled for the removed proxy account.
   **/
  | { name: 'RemoveProxy'; params: { delegate: MultiAddress; proxyType: AstarRuntimeProxyType; delay: number } }
  /**
   * Unregister all proxy accounts for the sender.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * WARNING: This may be called on accounts created by `pure`, however if done, then
   * the unreserved fees will be inaccessible. **All access to this account will be lost.**
   **/
  | { name: 'RemoveProxies' }
  /**
   * Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and
   * initialize it with a proxy of `proxy_type` for `origin` sender.
   *
   * Requires a `Signed` origin.
   *
   * - `proxy_type`: The type of the proxy that the sender will be registered as over the
   * new account. This will almost always be the most permissive `ProxyType` possible to
   * allow for maximum flexibility.
   * - `index`: A disambiguation index, in case this is called multiple times in the same
   * transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just
   * want to use `0`.
   * - `delay`: The announcement period required of the initial proxy. Will generally be
   * zero.
   *
   * Fails with `Duplicate` if this has already been called in this transaction, from the
   * same sender, with the same parameters.
   *
   * Fails if there are insufficient funds to pay for deposit.
   **/
  | { name: 'CreatePure'; params: { proxyType: AstarRuntimeProxyType; delay: number; index: number } }
  /**
   * Removes a previously spawned pure proxy.
   *
   * WARNING: **All access to this account will be lost.** Any funds held in it will be
   * inaccessible.
   *
   * Requires a `Signed` origin, and the sender account must have been created by a call to
   * `pure` with corresponding parameters.
   *
   * - `spawner`: The account that originally called `pure` to create this account.
   * - `index`: The disambiguation index originally passed to `pure`. Probably `0`.
   * - `proxy_type`: The proxy type originally passed to `pure`.
   * - `height`: The height of the chain when the call to `pure` was processed.
   * - `ext_index`: The extrinsic index in which the call to `pure` was processed.
   *
   * Fails with `NoPermission` in case the caller is not a previously created pure
   * account whose `pure` call has corresponding parameters.
   **/
  | {
      name: 'KillPure';
      params: {
        spawner: MultiAddress;
        proxyType: AstarRuntimeProxyType;
        index: number;
        height: number;
        extIndex: number;
      };
    }
  /**
   * Publish the hash of a proxy-call that will be made in the future.
   *
   * This must be called some number of blocks before the corresponding `proxy` is attempted
   * if the delay associated with the proxy relationship is greater than zero.
   *
   * No more than `MaxPending` announcements may be made at any one time.
   *
   * This will take a deposit of `AnnouncementDepositFactor` as well as
   * `AnnouncementDepositBase` if there are no other pending announcements.
   *
   * The dispatch origin for this call must be _Signed_ and a proxy of `real`.
   *
   * Parameters:
   * - `real`: The account that the proxy will make a call on behalf of.
   * - `call_hash`: The hash of the call to be made by the `real` account.
   **/
  | { name: 'Announce'; params: { real: MultiAddress; callHash: H256 } }
  /**
   * Remove a given announcement.
   *
   * May be called by a proxy account to remove a call they previously announced and return
   * the deposit.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * Parameters:
   * - `real`: The account that the proxy will make a call on behalf of.
   * - `call_hash`: The hash of the call to be made by the `real` account.
   **/
  | { name: 'RemoveAnnouncement'; params: { real: MultiAddress; callHash: H256 } }
  /**
   * Remove the given announcement of a delegate.
   *
   * May be called by a target (proxied) account to remove a call that one of their delegates
   * (`delegate`) has announced they want to execute. The deposit is returned.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * Parameters:
   * - `delegate`: The account that previously announced the call.
   * - `call_hash`: The hash of the call to be made.
   **/
  | { name: 'RejectAnnouncement'; params: { delegate: MultiAddress; callHash: H256 } }
  /**
   * Dispatch the given `call` from an account that the sender is authorized for through
   * `add_proxy`.
   *
   * Removes any corresponding announcement(s).
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * Parameters:
   * - `real`: The account that the proxy will make a call on behalf of.
   * - `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.
   * - `call`: The call to be made by the `real` account.
   **/
  | {
      name: 'ProxyAnnounced';
      params: {
        delegate: MultiAddress;
        real: MultiAddress;
        forceProxyType?: AstarRuntimeProxyType | undefined;
        call: AstarRuntimeRuntimeCall;
      };
    };

/**
 * Contains one variant per dispatchable that can be called by an extrinsic.
 **/
export type CumulusPalletParachainSystemCall =
  /**
   * Set the current validation data.
   *
   * This should be invoked exactly once per block. It will panic at the finalization
   * phase if the call was not invoked.
   *
   * The dispatch origin for this call must be `Inherent`
   *
   * As a side effect, this function upgrades the current validation function
   * if the appropriate time has come.
   **/
  | { name: 'SetValidationData'; params: { data: CumulusPrimitivesParachainInherentParachainInherentData } }
  | { name: 'SudoSendUpwardMessage'; params: { message: Bytes } }
  /**
   * Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied
   * later.
   *
   * The `check_version` parameter sets a boolean flag for whether or not the runtime's spec
   * version and name should be verified on upgrade. Since the authorization only has a hash,
   * it cannot actually perform the verification.
   *
   * This call requires Root origin.
   **/
  | { name: 'AuthorizeUpgrade'; params: { codeHash: H256; checkVersion: boolean } }
  /**
   * Provide the preimage (runtime binary) `code` for an upgrade that has been authorized.
   *
   * If the authorization required a version check, this call will ensure the spec name
   * remains unchanged and that the spec version has increased.
   *
   * Note that this function will not apply the new `code`, but only attempt to schedule the
   * upgrade with the Relay Chain.
   *
   * All origins are allowed.
   **/
  | { name: 'EnactAuthorizedUpgrade'; params: { code: Bytes } };

export type CumulusPrimitivesParachainInherentParachainInherentData = {
  validationData: PolkadotPrimitivesV4PersistedValidationData;
  relayChainState: SpTrieStorageProof;
  downwardMessages: Array<PolkadotCorePrimitivesInboundDownwardMessage>;
  horizontalMessages: Array<[PolkadotParachainPrimitivesId, Array<PolkadotCorePrimitivesInboundHrmpMessage>]>;
};

export type PolkadotPrimitivesV4PersistedValidationData = {
  parentHead: PolkadotParachainPrimitivesHeadData;
  relayParentNumber: number;
  relayParentStorageRoot: H256;
  maxPovSize: number;
};

export type PolkadotParachainPrimitivesHeadData = Bytes;

export type SpTrieStorageProof = { trieNodes: Array<Bytes> };

export type PolkadotCorePrimitivesInboundDownwardMessage = { sentAt: number; msg: Bytes };

export type PolkadotCorePrimitivesInboundHrmpMessage = { sentAt: number; data: Bytes };

/**
 * Contains one variant per dispatchable that can be called by an extrinsic.
 **/
export type ParachainInfoCall = null;

/**
 * Contains one variant per dispatchable that can be called by an extrinsic.
 **/
export type PalletBalancesCall =
  /**
   * Transfer some liquid free balance to another account.
   *
   * `transfer_allow_death` will set the `FreeBalance` of the sender and receiver.
   * If the sender's account is below the existential deposit as a result
   * of the transfer, the account will be reaped.
   *
   * The dispatch origin for this call must be `Signed` by the transactor.
   **/
  | { name: 'TransferAllowDeath'; params: { dest: MultiAddress; value: bigint } }
  /**
   * Set the regular balance of a given account; it also takes a reserved balance but this
   * must be the same as the account's current reserved balance.
   *
   * The dispatch origin for this call is `root`.
   *
   * WARNING: This call is DEPRECATED! Use `force_set_balance` instead.
   **/
  | { name: 'SetBalanceDeprecated'; params: { who: MultiAddress; newFree: bigint; oldReserved: bigint } }
  /**
   * Exactly as `transfer_allow_death`, except the origin must be root and the source account
   * may be specified.
   **/
  | { name: 'ForceTransfer'; params: { source: MultiAddress; dest: MultiAddress; value: bigint } }
  /**
   * Same as the [`transfer_allow_death`] call, but with a check that the transfer will not
   * kill the origin account.
   *
   * 99% of the time you want [`transfer_allow_death`] instead.
   *
   * [`transfer_allow_death`]: struct.Pallet.html#method.transfer
   **/
  | { name: 'TransferKeepAlive'; params: { dest: MultiAddress; value: bigint } }
  /**
   * Transfer the entire transferable balance from the caller account.
   *
   * NOTE: This function only attempts to transfer _transferable_ balances. This means that
   * any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be
   * transferred by this function. To ensure that this function results in a killed account,
   * you might need to prepare the account by removing any reference counters, storage
   * deposits, etc...
   *
   * The dispatch origin of this call must be Signed.
   *
   * - `dest`: The recipient of the transfer.
   * - `keep_alive`: A boolean to determine if the `transfer_all` operation should send all
   * of the funds the account has, causing the sender account to be killed (false), or
   * transfer everything except at least the existential deposit, which will guarantee to
   * keep the sender account alive (true).
   **/
  | { name: 'TransferAll'; params: { dest: MultiAddress; keepAlive: boolean } }
  /**
   * Unreserve some balance from a user by force.
   *
   * Can only be called by ROOT.
   **/
  | { name: 'ForceUnreserve'; params: { who: MultiAddress; amount: bigint } }
  /**
   * Upgrade a specified account.
   *
   * - `origin`: Must be `Signed`.
   * - `who`: The account to be upgraded.
   *
   * This will waive the transaction fee if at least all but 10% of the accounts needed to
   * be upgraded. (We let some not have to be upgraded just in order to allow for the
   * possibililty of churn).
   **/
  | { name: 'UpgradeAccounts'; params: { who: Array<AccountId32> } }
  /**
   * Alias for `transfer_allow_death`, provided only for name-wise compatibility.
   *
   * WARNING: DEPRECATED! Will be released in approximately 3 months.
   **/
  | { name: 'Transfer'; params: { dest: MultiAddress; value: bigint } }
  /**
   * Set the regular balance of a given account.
   *
   * The dispatch origin for this call is `root`.
   **/
  | { name: 'ForceSetBalance'; params: { who: MultiAddress; newFree: bigint } };

/**
 * Contains one variant per dispatchable that can be called by an extrinsic.
 **/
export type PalletVestingCall =
  /**
   * Unlock any vested funds of the sender account.
   *
   * The dispatch origin for this call must be _Signed_ and the sender must have funds still
   * locked under this pallet.
   *
   * Emits either `VestingCompleted` or `VestingUpdated`.
   *
   * ## Complexity
   * - `O(1)`.
   **/
  | { name: 'Vest' }
  /**
   * Unlock any vested funds of a `target` account.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * - `target`: The account whose vested funds should be unlocked. Must have funds still
   * locked under this pallet.
   *
   * Emits either `VestingCompleted` or `VestingUpdated`.
   *
   * ## Complexity
   * - `O(1)`.
   **/
  | { name: 'VestOther'; params: { target: MultiAddress } }
  /**
   * Create a vested transfer.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * - `target`: The account receiving the vested funds.
   * - `schedule`: The vesting schedule attached to the transfer.
   *
   * Emits `VestingCreated`.
   *
   * NOTE: This will unlock all schedules through the current block.
   *
   * ## Complexity
   * - `O(1)`.
   **/
  | { name: 'VestedTransfer'; params: { target: MultiAddress; schedule: PalletVestingVestingInfo } }
  /**
   * Force a vested transfer.
   *
   * The dispatch origin for this call must be _Root_.
   *
   * - `source`: The account whose funds should be transferred.
   * - `target`: The account that should be transferred the vested funds.
   * - `schedule`: The vesting schedule attached to the transfer.
   *
   * Emits `VestingCreated`.
   *
   * NOTE: This will unlock all schedules through the current block.
   *
   * ## Complexity
   * - `O(1)`.
   **/
  | {
      name: 'ForceVestedTransfer';
      params: { source: MultiAddress; target: MultiAddress; schedule: PalletVestingVestingInfo };
    }
  /**
   * Merge two vesting schedules together, creating a new vesting schedule that unlocks over
   * the highest possible start and end blocks. If both schedules have already started the
   * current block will be used as the schedule start; with the caveat that if one schedule
   * is finished by the current block, the other will be treated as the new merged schedule,
   * unmodified.
   *
   * NOTE: If `schedule1_index == schedule2_index` this is a no-op.
   * NOTE: This will unlock all schedules through the current block prior to merging.
   * NOTE: If both schedules have ended by the current block, no new schedule will be created
   * and both will be removed.
   *
   * Merged schedule attributes:
   * - `starting_block`: `MAX(schedule1.starting_block, scheduled2.starting_block,
   * current_block)`.
   * - `ending_block`: `MAX(schedule1.ending_block, schedule2.ending_block)`.
   * - `locked`: `schedule1.locked_at(current_block) + schedule2.locked_at(current_block)`.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * - `schedule1_index`: index of the first schedule to merge.
   * - `schedule2_index`: index of the second schedule to merge.
   **/
  | { name: 'MergeSchedules'; params: { schedule1Index: number; schedule2Index: number } };

export type PalletVestingVestingInfo = { locked: bigint; perBlock: bigint; startingBlock: number };

/**
 * Contains one variant per dispatchable that can be called by an extrinsic.
 **/
export type PalletDappsStakingPalletCall =
  /**
   * Used to register contract for dapps staking.
   * The origin account used is treated as the `developer` account.
   *
   * Depending on the pallet configuration/state it is possible that developer needs to be whitelisted prior to registration.
   *
   * As part of this call, `RegisterDeposit` will be reserved from devs account.
   **/
  | { name: 'Register'; params: { developer: AccountId32; contractId: AstarRuntimeSmartContract } }
  /**
   * Unregister existing contract from dapps staking, making it ineligible for rewards from current era onwards.
   * This must be called by the root (at the moment).
   *
   * Deposit is returned to the developer but existing stakers should manually call `withdraw_from_unregistered` if they wish to to unstake.
   *
   * **Warning**: After this action ,contract can not be registered for dapps staking again.
   **/
  | { name: 'Unregister'; params: { contractId: AstarRuntimeSmartContract } }
  /**
   * Withdraw locked funds from a contract that was unregistered.
   *
   * Funds don't need to undergo the unbonding period - they are returned immediately to the staker's free balance.
   **/
  | { name: 'WithdrawFromUnregistered'; params: { contractId: AstarRuntimeSmartContract } }
  /**
   * Lock up and stake balance of the origin account.
   *
   * `value` must be more than the `minimum_balance` specified by `MinimumStakingAmount`
   * unless account already has bonded value equal or more than 'minimum_balance'.
   *
   * The dispatch origin for this call must be _Signed_ by the staker's account.
   **/
  | { name: 'BondAndStake'; params: { contractId: AstarRuntimeSmartContract; value: bigint } }
  /**
   * Start unbonding process and unstake balance from the contract.
   *
   * The unstaked amount will no longer be eligible for rewards but still won't be unlocked.
   * User needs to wait for the unbonding period to finish before being able to withdraw
   * the funds via `withdraw_unbonded` call.
   *
   * In case remaining staked balance on contract is below minimum staking amount,
   * entire stake for that contract will be unstaked.
   **/
  | { name: 'UnbondAndUnstake'; params: { contractId: AstarRuntimeSmartContract; value: bigint } }
  /**
   * Withdraw all funds that have completed the unbonding process.
   *
   * If there are unbonding chunks which will be fully unbonded in future eras,
   * they will remain and can be withdrawn later.
   **/
  | { name: 'WithdrawUnbonded' }
  /**
   * Transfer nomination from one contract to another.
   *
   * Same rules as for `bond_and_stake` and `unbond_and_unstake` apply.
   * Minor difference is that there is no unbonding period so this call won't
   * check whether max number of unbonding chunks is exceeded.
   *
   **/
  | {
      name: 'NominationTransfer';
      params: {
        originContractId: AstarRuntimeSmartContract;
        value: bigint;
        targetContractId: AstarRuntimeSmartContract;
      };
    }
  /**
   * Claim earned staker rewards for the oldest unclaimed era.
   * In order to claim multiple eras, this call has to be called multiple times.
   *
   * The rewards are always added to the staker's free balance (account) but depending on the reward destination configuration,
   * they might be immediately re-staked.
   **/
  | { name: 'ClaimStaker'; params: { contractId: AstarRuntimeSmartContract } }
  /**
   * Claim earned dapp rewards for the specified era.
   *
   * Call must ensure that the specified era is eligible for reward payout and that it hasn't already been paid out for the dapp.
   **/
  | { name: 'ClaimDapp'; params: { contractId: AstarRuntimeSmartContract; era: number } }
  /**
   * Force a new era at the start of the next block.
   *
   * The dispatch origin must be Root.
   **/
  | { name: 'ForceNewEra' }
  /**
   * `true` will disable pallet, enabling maintenance mode. `false` will do the opposite.
   *
   * The dispatch origin must be Root.
   **/
  | { name: 'MaintenanceMode'; params: { enableMaintenance: boolean } }
  /**
   * Used to set reward destination for staker rewards.
   *
   * User must be an active staker in order to use this call.
   * This will apply to all existing unclaimed rewards.
   **/
  | { name: 'SetRewardDestination'; params: { rewardDestination: PalletDappsStakingRewardDestination } }
  /**
   * Used to force set `ContractEraStake` storage values.
   * The purpose of this call is only for fixing one of the issues detected with dapps-staking.
   *
   * The dispatch origin must be Root.
   **/
  | {
      name: 'SetContractStakeInfo';
      params: {
        contract: AstarRuntimeSmartContract;
        era: number;
        contractStakeInfo: PalletDappsStakingContractStakeInfo;
      };
    }
  /**
   * Used to burn unclaimed & stale rewards from an unregistered contract.
   **/
  | { name: 'BurnStaleReward'; params: { contractId: AstarRuntimeSmartContract; era: number } };

export type PalletDappsStakingContractStakeInfo = {
  total: bigint;
  numberOfStakers: number;
  contractRewardClaimed: boolean;
};

/**
 * Contains one variant per dispatchable that can be called by an extrinsic.
 **/
export type PalletBlockRewardsHybridCall =
  /**
   * Sets the reward distribution configuration parameters which will be used from next block reward distribution.
   *
   * It is mandatory that all components of configuration sum up to one whole (**100%**),
   * otherwise an error `InvalidDistributionConfiguration` will be raised.
   *
   * - `reward_distro_params` - reward distribution params
   *
   * Emits `DistributionConfigurationChanged` with config embeded into event itself.
   *
   **/
  { name: 'SetConfiguration'; params: { rewardDistroParams: PalletBlockRewardsHybridRewardDistributionConfig } };

/**
 * Contains one variant per dispatchable that can be called by an extrinsic.
 **/
export type PalletAssetsCall =
  /**
   * Issue a new class of fungible assets from a public origin.
   *
   * This new asset class has no assets initially and its owner is the origin.
   *
   * The origin must conform to the configured `CreateOrigin` and have sufficient funds free.
   *
   * Funds of sender are reserved by `AssetDeposit`.
   *
   * Parameters:
   * - `id`: The identifier of the new asset. This must not be currently in use to identify
   * an existing asset.
   * - `admin`: The admin of this class of assets. The admin is the initial address of each
   * member of the asset class's admin team.
   * - `min_balance`: The minimum balance of this new asset that any single account must
   * have. If an account's balance is reduced below this, then it collapses to zero.
   *
   * Emits `Created` event when successful.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Create'; params: { id: bigint; admin: MultiAddress; minBalance: bigint } }
  /**
   * Issue a new class of fungible assets from a privileged origin.
   *
   * This new asset class has no assets initially.
   *
   * The origin must conform to `ForceOrigin`.
   *
   * Unlike `create`, no funds are reserved.
   *
   * - `id`: The identifier of the new asset. This must not be currently in use to identify
   * an existing asset.
   * - `owner`: The owner of this class of assets. The owner has full superuser permissions
   * over this asset, but may later change and configure the permissions using
   * `transfer_ownership` and `set_team`.
   * - `min_balance`: The minimum balance of this new asset that any single account must
   * have. If an account's balance is reduced below this, then it collapses to zero.
   *
   * Emits `ForceCreated` event when successful.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ForceCreate'; params: { id: bigint; owner: MultiAddress; isSufficient: boolean; minBalance: bigint } }
  /**
   * Start the process of destroying a fungible asset class.
   *
   * `start_destroy` is the first in a series of extrinsics that should be called, to allow
   * destruction of an asset class.
   *
   * The origin must conform to `ForceOrigin` or must be `Signed` by the asset's `owner`.
   *
   * - `id`: The identifier of the asset to be destroyed. This must identify an existing
   * asset.
   *
   * The asset class must be frozen before calling `start_destroy`.
   **/
  | { name: 'StartDestroy'; params: { id: bigint } }
  /**
   * Destroy all accounts associated with a given asset.
   *
   * `destroy_accounts` should only be called after `start_destroy` has been called, and the
   * asset is in a `Destroying` state.
   *
   * Due to weight restrictions, this function may need to be called multiple times to fully
   * destroy all accounts. It will destroy `RemoveItemsLimit` accounts at a time.
   *
   * - `id`: The identifier of the asset to be destroyed. This must identify an existing
   * asset.
   *
   * Each call emits the `Event::DestroyedAccounts` event.
   **/
  | { name: 'DestroyAccounts'; params: { id: bigint } }
  /**
   * Destroy all approvals associated with a given asset up to the max (T::RemoveItemsLimit).
   *
   * `destroy_approvals` should only be called after `start_destroy` has been called, and the
   * asset is in a `Destroying` state.
   *
   * Due to weight restrictions, this function may need to be called multiple times to fully
   * destroy all approvals. It will destroy `RemoveItemsLimit` approvals at a time.
   *
   * - `id`: The identifier of the asset to be destroyed. This must identify an existing
   * asset.
   *
   * Each call emits the `Event::DestroyedApprovals` event.
   **/
  | { name: 'DestroyApprovals'; params: { id: bigint } }
  /**
   * Complete destroying asset and unreserve currency.
   *
   * `finish_destroy` should only be called after `start_destroy` has been called, and the
   * asset is in a `Destroying` state. All accounts or approvals should be destroyed before
   * hand.
   *
   * - `id`: The identifier of the asset to be destroyed. This must identify an existing
   * asset.
   *
   * Each successful call emits the `Event::Destroyed` event.
   **/
  | { name: 'FinishDestroy'; params: { id: bigint } }
  /**
   * Mint assets of a particular class.
   *
   * The origin must be Signed and the sender must be the Issuer of the asset `id`.
   *
   * - `id`: The identifier of the asset to have some amount minted.
   * - `beneficiary`: The account to be credited with the minted assets.
   * - `amount`: The amount of the asset to be minted.
   *
   * Emits `Issued` event when successful.
   *
   * Weight: `O(1)`
   * Modes: Pre-existing balance of `beneficiary`; Account pre-existence of `beneficiary`.
   **/
  | { name: 'Mint'; params: { id: bigint; beneficiary: MultiAddress; amount: bigint } }
  /**
   * Reduce the balance of `who` by as much as possible up to `amount` assets of `id`.
   *
   * Origin must be Signed and the sender should be the Manager of the asset `id`.
   *
   * Bails with `NoAccount` if the `who` is already dead.
   *
   * - `id`: The identifier of the asset to have some amount burned.
   * - `who`: The account to be debited from.
   * - `amount`: The maximum amount by which `who`'s balance should be reduced.
   *
   * Emits `Burned` with the actual amount burned. If this takes the balance to below the
   * minimum for the asset, then the amount burned is increased to take it to zero.
   *
   * Weight: `O(1)`
   * Modes: Post-existence of `who`; Pre & post Zombie-status of `who`.
   **/
  | { name: 'Burn'; params: { id: bigint; who: MultiAddress; amount: bigint } }
  /**
   * Move some assets from the sender account to another.
   *
   * Origin must be Signed.
   *
   * - `id`: The identifier of the asset to have some amount transferred.
   * - `target`: The account to be credited.
   * - `amount`: The amount by which the sender's balance of assets should be reduced and
   * `target`'s balance increased. The amount actually transferred may be slightly greater in
   * the case that the transfer would otherwise take the sender balance above zero but below
   * the minimum balance. Must be greater than zero.
   *
   * Emits `Transferred` with the actual amount transferred. If this takes the source balance
   * to below the minimum for the asset, then the amount transferred is increased to take it
   * to zero.
   *
   * Weight: `O(1)`
   * Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of
   * `target`.
   **/
  | { name: 'Transfer'; params: { id: bigint; target: MultiAddress; amount: bigint } }
  /**
   * Move some assets from the sender account to another, keeping the sender account alive.
   *
   * Origin must be Signed.
   *
   * - `id`: The identifier of the asset to have some amount transferred.
   * - `target`: The account to be credited.
   * - `amount`: The amount by which the sender's balance of assets should be reduced and
   * `target`'s balance increased. The amount actually transferred may be slightly greater in
   * the case that the transfer would otherwise take the sender balance above zero but below
   * the minimum balance. Must be greater than zero.
   *
   * Emits `Transferred` with the actual amount transferred. If this takes the source balance
   * to below the minimum for the asset, then the amount transferred is increased to take it
   * to zero.
   *
   * Weight: `O(1)`
   * Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of
   * `target`.
   **/
  | { name: 'TransferKeepAlive'; params: { id: bigint; target: MultiAddress; amount: bigint } }
  /**
   * Move some assets from one account to another.
   *
   * Origin must be Signed and the sender should be the Admin of the asset `id`.
   *
   * - `id`: The identifier of the asset to have some amount transferred.
   * - `source`: The account to be debited.
   * - `dest`: The account to be credited.
   * - `amount`: The amount by which the `source`'s balance of assets should be reduced and
   * `dest`'s balance increased. The amount actually transferred may be slightly greater in
   * the case that the transfer would otherwise take the `source` balance above zero but
   * below the minimum balance. Must be greater than zero.
   *
   * Emits `Transferred` with the actual amount transferred. If this takes the source balance
   * to below the minimum for the asset, then the amount transferred is increased to take it
   * to zero.
   *
   * Weight: `O(1)`
   * Modes: Pre-existence of `dest`; Post-existence of `source`; Account pre-existence of
   * `dest`.
   **/
  | { name: 'ForceTransfer'; params: { id: bigint; source: MultiAddress; dest: MultiAddress; amount: bigint } }
  /**
   * Disallow further unprivileged transfers of an asset `id` from an account `who`. `who`
   * must already exist as an entry in `Account`s of the asset. If you want to freeze an
   * account that does not have an entry, use `touch_other` first.
   *
   * Origin must be Signed and the sender should be the Freezer of the asset `id`.
   *
   * - `id`: The identifier of the asset to be frozen.
   * - `who`: The account to be frozen.
   *
   * Emits `Frozen`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Freeze'; params: { id: bigint; who: MultiAddress } }
  /**
   * Allow unprivileged transfers to and from an account again.
   *
   * Origin must be Signed and the sender should be the Admin of the asset `id`.
   *
   * - `id`: The identifier of the asset to be frozen.
   * - `who`: The account to be unfrozen.
   *
   * Emits `Thawed`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Thaw'; params: { id: bigint; who: MultiAddress } }
  /**
   * Disallow further unprivileged transfers for the asset class.
   *
   * Origin must be Signed and the sender should be the Freezer of the asset `id`.
   *
   * - `id`: The identifier of the asset to be frozen.
   *
   * Emits `Frozen`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'FreezeAsset'; params: { id: bigint } }
  /**
   * Allow unprivileged transfers for the asset again.
   *
   * Origin must be Signed and the sender should be the Admin of the asset `id`.
   *
   * - `id`: The identifier of the asset to be thawed.
   *
   * Emits `Thawed`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ThawAsset'; params: { id: bigint } }
  /**
   * Change the Owner of an asset.
   *
   * Origin must be Signed and the sender should be the Owner of the asset `id`.
   *
   * - `id`: The identifier of the asset.
   * - `owner`: The new Owner of this asset.
   *
   * Emits `OwnerChanged`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'TransferOwnership'; params: { id: bigint; owner: MultiAddress } }
  /**
   * Change the Issuer, Admin and Freezer of an asset.
   *
   * Origin must be Signed and the sender should be the Owner of the asset `id`.
   *
   * - `id`: The identifier of the asset to be frozen.
   * - `issuer`: The new Issuer of this asset.
   * - `admin`: The new Admin of this asset.
   * - `freezer`: The new Freezer of this asset.
   *
   * Emits `TeamChanged`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'SetTeam'; params: { id: bigint; issuer: MultiAddress; admin: MultiAddress; freezer: MultiAddress } }
  /**
   * Set the metadata for an asset.
   *
   * Origin must be Signed and the sender should be the Owner of the asset `id`.
   *
   * Funds of sender are reserved according to the formula:
   * `MetadataDepositBase + MetadataDepositPerByte * (name.len + symbol.len)` taking into
   * account any already reserved funds.
   *
   * - `id`: The identifier of the asset to update.
   * - `name`: The user friendly name of this asset. Limited in length by `StringLimit`.
   * - `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.
   * - `decimals`: The number of decimals this asset uses to represent one unit.
   *
   * Emits `MetadataSet`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'SetMetadata'; params: { id: bigint; name: Bytes; symbol: Bytes; decimals: number } }
  /**
   * Clear the metadata for an asset.
   *
   * Origin must be Signed and the sender should be the Owner of the asset `id`.
   *
   * Any deposit is freed for the asset owner.
   *
   * - `id`: The identifier of the asset to clear.
   *
   * Emits `MetadataCleared`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ClearMetadata'; params: { id: bigint } }
  /**
   * Force the metadata for an asset to some value.
   *
   * Origin must be ForceOrigin.
   *
   * Any deposit is left alone.
   *
   * - `id`: The identifier of the asset to update.
   * - `name`: The user friendly name of this asset. Limited in length by `StringLimit`.
   * - `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.
   * - `decimals`: The number of decimals this asset uses to represent one unit.
   *
   * Emits `MetadataSet`.
   *
   * Weight: `O(N + S)` where N and S are the length of the name and symbol respectively.
   **/
  | {
      name: 'ForceSetMetadata';
      params: { id: bigint; name: Bytes; symbol: Bytes; decimals: number; isFrozen: boolean };
    }
  /**
   * Clear the metadata for an asset.
   *
   * Origin must be ForceOrigin.
   *
   * Any deposit is returned.
   *
   * - `id`: The identifier of the asset to clear.
   *
   * Emits `MetadataCleared`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ForceClearMetadata'; params: { id: bigint } }
  /**
   * Alter the attributes of a given asset.
   *
   * Origin must be `ForceOrigin`.
   *
   * - `id`: The identifier of the asset.
   * - `owner`: The new Owner of this asset.
   * - `issuer`: The new Issuer of this asset.
   * - `admin`: The new Admin of this asset.
   * - `freezer`: The new Freezer of this asset.
   * - `min_balance`: The minimum balance of this new asset that any single account must
   * have. If an account's balance is reduced below this, then it collapses to zero.
   * - `is_sufficient`: Whether a non-zero balance of this asset is deposit of sufficient
   * value to account for the state bloat associated with its balance storage. If set to
   * `true`, then non-zero balances may be stored without a `consumer` reference (and thus
   * an ED in the Balances pallet or whatever else is used to control user-account state
   * growth).
   * - `is_frozen`: Whether this asset class is frozen except for permissioned/admin
   * instructions.
   *
   * Emits `AssetStatusChanged` with the identity of the asset.
   *
   * Weight: `O(1)`
   **/
  | {
      name: 'ForceAssetStatus';
      params: {
        id: bigint;
        owner: MultiAddress;
        issuer: MultiAddress;
        admin: MultiAddress;
        freezer: MultiAddress;
        minBalance: bigint;
        isSufficient: boolean;
        isFrozen: boolean;
      };
    }
  /**
   * Approve an amount of asset for transfer by a delegated third-party account.
   *
   * Origin must be Signed.
   *
   * Ensures that `ApprovalDeposit` worth of `Currency` is reserved from signing account
   * for the purpose of holding the approval. If some non-zero amount of assets is already
   * approved from signing account to `delegate`, then it is topped up or unreserved to
   * meet the right value.
   *
   * NOTE: The signing account does not need to own `amount` of assets at the point of
   * making this call.
   *
   * - `id`: The identifier of the asset.
   * - `delegate`: The account to delegate permission to transfer asset.
   * - `amount`: The amount of asset that may be transferred by `delegate`. If there is
   * already an approval in place, then this acts additively.
   *
   * Emits `ApprovedTransfer` on success.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ApproveTransfer'; params: { id: bigint; delegate: MultiAddress; amount: bigint } }
  /**
   * Cancel all of some asset approved for delegated transfer by a third-party account.
   *
   * Origin must be Signed and there must be an approval in place between signer and
   * `delegate`.
   *
   * Unreserves any deposit previously reserved by `approve_transfer` for the approval.
   *
   * - `id`: The identifier of the asset.
   * - `delegate`: The account delegated permission to transfer asset.
   *
   * Emits `ApprovalCancelled` on success.
   *
   * Weight: `O(1)`
   **/
  | { name: 'CancelApproval'; params: { id: bigint; delegate: MultiAddress } }
  /**
   * Cancel all of some asset approved for delegated transfer by a third-party account.
   *
   * Origin must be either ForceOrigin or Signed origin with the signer being the Admin
   * account of the asset `id`.
   *
   * Unreserves any deposit previously reserved by `approve_transfer` for the approval.
   *
   * - `id`: The identifier of the asset.
   * - `delegate`: The account delegated permission to transfer asset.
   *
   * Emits `ApprovalCancelled` on success.
   *
   * Weight: `O(1)`
   **/
  | { name: 'ForceCancelApproval'; params: { id: bigint; owner: MultiAddress; delegate: MultiAddress } }
  /**
   * Transfer some asset balance from a previously delegated account to some third-party
   * account.
   *
   * Origin must be Signed and there must be an approval in place by the `owner` to the
   * signer.
   *
   * If the entire amount approved for transfer is transferred, then any deposit previously
   * reserved by `approve_transfer` is unreserved.
   *
   * - `id`: The identifier of the asset.
   * - `owner`: The account which previously approved for a transfer of at least `amount` and
   * from which the asset balance will be withdrawn.
   * - `destination`: The account to which the asset balance of `amount` will be transferred.
   * - `amount`: The amount of assets to transfer.
   *
   * Emits `TransferredApproved` on success.
   *
   * Weight: `O(1)`
   **/
  | { name: 'TransferApproved'; params: { id: bigint; owner: MultiAddress; destination: MultiAddress; amount: bigint } }
  /**
   * Create an asset account for non-provider assets.
   *
   * A deposit will be taken from the signer account.
   *
   * - `origin`: Must be Signed; the signer account must have sufficient funds for a deposit
   * to be taken.
   * - `id`: The identifier of the asset for the account to be created.
   *
   * Emits `Touched` event when successful.
   **/
  | { name: 'Touch'; params: { id: bigint } }
  /**
   * Return the deposit (if any) of an asset account or a consumer reference (if any) of an
   * account.
   *
   * The origin must be Signed.
   *
   * - `id`: The identifier of the asset for which the caller would like the deposit
   * refunded.
   * - `allow_burn`: If `true` then assets may be destroyed in order to complete the refund.
   *
   * Emits `Refunded` event when successful.
   **/
  | { name: 'Refund'; params: { id: bigint; allowBurn: boolean } }
  /**
   * Sets the minimum balance of an asset.
   *
   * Only works if there aren't any accounts that are holding the asset or if
   * the new value of `min_balance` is less than the old one.
   *
   * Origin must be Signed and the sender has to be the Owner of the
   * asset `id`.
   *
   * - `id`: The identifier of the asset.
   * - `min_balance`: The new value of `min_balance`.
   *
   * Emits `AssetMinBalanceChanged` event when successful.
   **/
  | { name: 'SetMinBalance'; params: { id: bigint; minBalance: bigint } }
  /**
   * Create an asset account for `who`.
   *
   * A deposit will be taken from the signer account.
   *
   * - `origin`: Must be Signed by `Freezer` or `Admin` of the asset `id`; the signer account
   * must have sufficient funds for a deposit to be taken.
   * - `id`: The identifier of the asset for the account to be created.
   * - `who`: The account to be created.
   *
   * Emits `Touched` event when successful.
   **/
  | { name: 'TouchOther'; params: { id: bigint; who: MultiAddress } }
  /**
   * Return the deposit (if any) of a target asset account. Useful if you are the depositor.
   *
   * The origin must be Signed and either the account owner, depositor, or asset `Admin`. In
   * order to burn a non-zero balance of the asset, the caller must be the account and should
   * use `refund`.
   *
   * - `id`: The identifier of the asset for the account holding a deposit.
   * - `who`: The account to refund.
   *
   * Emits `Refunded` event when successful.
   **/
  | { name: 'RefundOther'; params: { id: bigint; who: MultiAddress } }
  /**
   * Disallow further unprivileged transfers of an asset `id` to and from an account `who`.
   *
   * Origin must be Signed and the sender should be the Freezer of the asset `id`.
   *
   * - `id`: The identifier of the account's asset.
   * - `who`: The account to be unblocked.
   *
   * Emits `Blocked`.
   *
   * Weight: `O(1)`
   **/
  | { name: 'Block'; params: { id: bigint; who: MultiAddress } };

/**
 * Contains one variant per dispatchable that can be called by an extrinsic.
 **/
export type PalletCollatorSelectionCall =
  /**
   * Set the list of invulnerable (fixed) collators.
   **/
  | { name: 'SetInvulnerables'; params: { new: Array<AccountId32> } }
  /**
   * Set the ideal number of collators (not including the invulnerables).
   * If lowering this number, then the number of running collators could be higher than this figure.
   * Aside from that edge case, there should be no other way to have more collators than the desired number.
   **/
  | { name: 'SetDesiredCandidates'; params: { max: number } }
  /**
   * Set the candidacy bond amount.
   **/
  | { name: 'SetCandidacyBond'; params: { bond: bigint } }
  /**
   * Register this account as a collator candidate. The account must (a) already have
   * registered session keys and (b) be able to reserve the `CandidacyBond`.
   *
   * This call is not available to `Invulnerable` collators.
   **/
  | { name: 'RegisterAsCandidate' }
  /**
   * Deregister `origin` as a collator candidate. Note that the collator can only leave on
   * session change. The `CandidacyBond` will be unreserved immediately.
   *
   * This call will fail if the total number of candidates would drop below `MinCandidates`.
   *
   * This call is not available to `Invulnerable` collators.
   **/
  | { name: 'LeaveIntent' };

/**
 * Contains one variant per dispatchable that can be called by an extrinsic.
 **/
export type PalletSessionCall =
  /**
   * Sets the session key(s) of the function caller to `keys`.
   * Allows an account to set its session key prior to becoming a validator.
   * This doesn't take effect until the next session.
   *
   * The dispatch origin of this function must be signed.
   *
   * ## Complexity
   * - `O(1)`. Actual cost depends on the number of length of `T::Keys::key_ids()` which is
   * fixed.
   **/
  | { name: 'SetKeys'; params: { keys: AstarRuntimeSessionKeys; proof: Bytes } }
  /**
   * Removes any session key(s) of the function caller.
   *
   * This doesn't take effect until the next session.
   *
   * The dispatch origin of this function must be Signed and the account must be either be
   * convertible to a validator ID using the chain's typical addressing system (this usually
   * means being a controller account) or directly convertible into a validator ID (which
   * usually means being a stash account).
   *
   * ## Complexity
   * - `O(1)` in number of key types. Actual cost depends on the number of length of
   * `T::Keys::key_ids()` which is fixed.
   **/
  | { name: 'PurgeKeys' };

export type AstarRuntimeSessionKeys = { aura: SpConsensusAuraSr25519AppSr25519Public };

export type SpConsensusAuraSr25519AppSr25519Public = SpCoreSr25519Public;

export type SpCoreSr25519Public = FixedBytes<32>;

/**
 * Contains one variant per dispatchable that can be called by an extrinsic.
 **/
export type CumulusPalletXcmpQueueCall =
  /**
   * Services a single overweight XCM.
   *
   * - `origin`: Must pass `ExecuteOverweightOrigin`.
   * - `index`: The index of the overweight XCM to service
   * - `weight_limit`: The amount of weight that XCM execution may take.
   *
   * Errors:
   * - `BadOverweightIndex`: XCM under `index` is not found in the `Overweight` storage map.
   * - `BadXcm`: XCM under `index` cannot be properly decoded into a valid XCM format.
   * - `WeightOverLimit`: XCM execution may use greater `weight_limit`.
   *
   * Events:
   * - `OverweightServiced`: On success.
   **/
  | { name: 'ServiceOverweight'; params: { index: bigint; weightLimit: SpWeightsWeightV2Weight } }
  /**
   * Suspends all XCM executions for the XCMP queue, regardless of the sender's origin.
   *
   * - `origin`: Must pass `ControllerOrigin`.
   **/
  | { name: 'SuspendXcmExecution' }
  /**
   * Resumes all XCM executions for the XCMP queue.
   *
   * Note that this function doesn't change the status of the in/out bound channels.
   *
   * - `origin`: Must pass `ControllerOrigin`.
   **/
  | { name: 'ResumeXcmExecution' }
  /**
   * Overwrites the number of pages of messages which must be in the queue for the other side to be told to
   * suspend their sending.
   *
   * - `origin`: Must pass `Root`.
   * - `new`: Desired value for `QueueConfigData.suspend_value`
   **/
  | { name: 'UpdateSuspendThreshold'; params: { new: number } }
  /**
   * Overwrites the number of pages of messages which must be in the queue after which we drop any further
   * messages from the channel.
   *
   * - `origin`: Must pass `Root`.
   * - `new`: Desired value for `QueueConfigData.drop_threshold`
   **/
  | { name: 'UpdateDropThreshold'; params: { new: number } }
  /**
   * Overwrites the number of pages of messages which the queue must be reduced to before it signals that
   * message sending may recommence after it has been suspended.
   *
   * - `origin`: Must pass `Root`.
   * - `new`: Desired value for `QueueConfigData.resume_threshold`
   **/
  | { name: 'UpdateResumeThreshold'; params: { new: number } }
  /**
   * Overwrites the amount of remaining weight under which we stop processing messages.
   *
   * - `origin`: Must pass `Root`.
   * - `new`: Desired value for `QueueConfigData.threshold_weight`
   **/
  | { name: 'UpdateThresholdWeight'; params: { new: SpWeightsWeightV2Weight } }
  /**
   * Overwrites the speed to which the available weight approaches the maximum weight.
   * A lower number results in a faster progression. A value of 1 makes the entire weight available initially.
   *
   * - `origin`: Must pass `Root`.
   * - `new`: Desired value for `QueueConfigData.weight_restrict_decay`.
   **/
  | { name: 'UpdateWeightRestrictDecay'; params: { new: SpWeightsWeightV2Weight } }
  /**
   * Overwrite the maximum amount of weight any individual message may consume.
   * Messages above this weight go into the overweight queue and may only be serviced explicitly.
   *
   * - `origin`: Must pass `Root`.
   * - `new`: Desired value for `QueueConfigData.xcmp_max_individual_weight`.
   **/
  | { name: 'UpdateXcmpMaxIndividualWeight'; params: { new: SpWeightsWeightV2Weight } };

/**
 * Contains one variant per dispatchable that can be called by an extrinsic.
 **/
export type PalletXcmCall =
  | { name: 'Send'; params: { dest: XcmVersionedMultiLocation; message: XcmVersionedXcm } }
  /**
   * Teleport some assets from the local chain to some destination chain.
   *
   * Fee payment on the destination side is made from the asset in the `assets` vector of
   * index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,
   * with all fees taken as needed from the asset.
   *
   * - `origin`: Must be capable of withdrawing the `assets` and executing XCM.
   * - `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send
   * from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.
   * - `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be
   * an `AccountId32` value.
   * - `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the
   * `dest` side. May not be empty.
   * - `fee_asset_item`: The index into `assets` of the item which should be used to pay
   * fees.
   **/
  | {
      name: 'TeleportAssets';
      params: {
        dest: XcmVersionedMultiLocation;
        beneficiary: XcmVersionedMultiLocation;
        assets: XcmVersionedMultiAssets;
        feeAssetItem: number;
      };
    }
  /**
   * Transfer some assets from the local chain to the sovereign account of a destination
   * chain and forward a notification XCM.
   *
   * Fee payment on the destination side is made from the asset in the `assets` vector of
   * index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,
   * with all fees taken as needed from the asset.
   *
   * - `origin`: Must be capable of withdrawing the `assets` and executing XCM.
   * - `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send
   * from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.
   * - `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be
   * an `AccountId32` value.
   * - `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the
   * `dest` side.
   * - `fee_asset_item`: The index into `assets` of the item which should be used to pay
   * fees.
   **/
  | {
      name: 'ReserveTransferAssets';
      params: {
        dest: XcmVersionedMultiLocation;
        beneficiary: XcmVersionedMultiLocation;
        assets: XcmVersionedMultiAssets;
        feeAssetItem: number;
      };
    }
  /**
   * Execute an XCM message from a local, signed, origin.
   *
   * An event is deposited indicating whether `msg` could be executed completely or only
   * partially.
   *
   * No more than `max_weight` will be used in its attempted execution. If this is less than the
   * maximum amount of weight that the message could take to be executed, then no execution
   * attempt will be made.
   *
   * NOTE: A successful return to this does *not* imply that the `msg` was executed successfully
   * to completion; only that *some* of it was executed.
   **/
  | { name: 'Execute'; params: { message: XcmVersionedXcm; maxWeight: SpWeightsWeightV2Weight } }
  /**
   * Extoll that a particular destination can be communicated with through a particular
   * version of XCM.
   *
   * - `origin`: Must be an origin specified by AdminOrigin.
   * - `location`: The destination that is being described.
   * - `xcm_version`: The latest version of XCM that `location` supports.
   **/
  | { name: 'ForceXcmVersion'; params: { location: XcmV3MultilocationMultiLocation; xcmVersion: number } }
  /**
   * Set a safe XCM version (the version that XCM should be encoded with if the most recent
   * version a destination can accept is unknown).
   *
   * - `origin`: Must be an origin specified by AdminOrigin.
   * - `maybe_xcm_version`: The default XCM encoding version, or `None` to disable.
   **/
  | { name: 'ForceDefaultXcmVersion'; params: { maybeXcmVersion?: number | undefined } }
  /**
   * Ask a location to notify us regarding their XCM version and any changes to it.
   *
   * - `origin`: Must be an origin specified by AdminOrigin.
   * - `location`: The location to which we should subscribe for XCM version notifications.
   **/
  | { name: 'ForceSubscribeVersionNotify'; params: { location: XcmVersionedMultiLocation } }
  /**
   * Require that a particular destination should no longer notify us regarding any XCM
   * version changes.
   *
   * - `origin`: Must be an origin specified by AdminOrigin.
   * - `location`: The location to which we are currently subscribed for XCM version
   * notifications which we no longer desire.
   **/
  | { name: 'ForceUnsubscribeVersionNotify'; params: { location: XcmVersionedMultiLocation } }
  /**
   * Transfer some assets from the local chain to the sovereign account of a destination
   * chain and forward a notification XCM.
   *
   * Fee payment on the destination side is made from the asset in the `assets` vector of
   * index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight
   * is needed than `weight_limit`, then the operation will fail and the assets send may be
   * at risk.
   *
   * - `origin`: Must be capable of withdrawing the `assets` and executing XCM.
   * - `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send
   * from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.
   * - `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be
   * an `AccountId32` value.
   * - `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the
   * `dest` side.
   * - `fee_asset_item`: The index into `assets` of the item which should be used to pay
   * fees.
   * - `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase.
   **/
  | {
      name: 'LimitedReserveTransferAssets';
      params: {
        dest: XcmVersionedMultiLocation;
        beneficiary: XcmVersionedMultiLocation;
        assets: XcmVersionedMultiAssets;
        feeAssetItem: number;
        weightLimit: XcmV3WeightLimit;
      };
    }
  /**
   * Teleport some assets from the local chain to some destination chain.
   *
   * Fee payment on the destination side is made from the asset in the `assets` vector of
   * index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight
   * is needed than `weight_limit`, then the operation will fail and the assets send may be
   * at risk.
   *
   * - `origin`: Must be capable of withdrawing the `assets` and executing XCM.
   * - `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send
   * from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.
   * - `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be
   * an `AccountId32` value.
   * - `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the
   * `dest` side. May not be empty.
   * - `fee_asset_item`: The index into `assets` of the item which should be used to pay
   * fees.
   * - `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase.
   **/
  | {
      name: 'LimitedTeleportAssets';
      params: {
        dest: XcmVersionedMultiLocation;
        beneficiary: XcmVersionedMultiLocation;
        assets: XcmVersionedMultiAssets;
        feeAssetItem: number;
        weightLimit: XcmV3WeightLimit;
      };
    }
  /**
   * Set or unset the global suspension state of the XCM executor.
   *
   * - `origin`: Must be an origin specified by AdminOrigin.
   * - `suspended`: `true` to suspend, `false` to resume.
   **/
  | { name: 'ForceSuspension'; params: { suspended: boolean } };

export type XcmVersionedXcm = { tag: 'V2'; value: XcmV2Xcm } | { tag: 'V3'; value: XcmV3Xcm };

export type XcmV2Xcm = Array<XcmV2Instruction>;

export type XcmV2Instruction =
  | { tag: 'WithdrawAsset'; value: XcmV2MultiassetMultiAssets }
  | { tag: 'ReserveAssetDeposited'; value: XcmV2MultiassetMultiAssets }
  | { tag: 'ReceiveTeleportedAsset'; value: XcmV2MultiassetMultiAssets }
  | { tag: 'QueryResponse'; value: { queryId: bigint; response: XcmV2Response; maxWeight: bigint } }
  | {
      tag: 'TransferAsset';
      value: { assets: XcmV2MultiassetMultiAssets; beneficiary: XcmV2MultilocationMultiLocation };
    }
  | {
      tag: 'TransferReserveAsset';
      value: { assets: XcmV2MultiassetMultiAssets; dest: XcmV2MultilocationMultiLocation; xcm: XcmV2Xcm };
    }
  | { tag: 'Transact'; value: { originType: XcmV2OriginKind; requireWeightAtMost: bigint; call: XcmDoubleEncoded } }
  | { tag: 'HrmpNewChannelOpenRequest'; value: { sender: number; maxMessageSize: number; maxCapacity: number } }
  | { tag: 'HrmpChannelAccepted'; value: { recipient: number } }
  | { tag: 'HrmpChannelClosing'; value: { initiator: number; sender: number; recipient: number } }
  | { tag: 'ClearOrigin' }
  | { tag: 'DescendOrigin'; value: XcmV2MultilocationJunctions }
  | { tag: 'ReportError'; value: { queryId: bigint; dest: XcmV2MultilocationMultiLocation; maxResponseWeight: bigint } }
  | {
      tag: 'DepositAsset';
      value: {
        assets: XcmV2MultiassetMultiAssetFilter;
        maxAssets: number;
        beneficiary: XcmV2MultilocationMultiLocation;
      };
    }
  | {
      tag: 'DepositReserveAsset';
      value: {
        assets: XcmV2MultiassetMultiAssetFilter;
        maxAssets: number;
        dest: XcmV2MultilocationMultiLocation;
        xcm: XcmV2Xcm;
      };
    }
  | { tag: 'ExchangeAsset'; value: { give: XcmV2MultiassetMultiAssetFilter; receive: XcmV2MultiassetMultiAssets } }
  | {
      tag: 'InitiateReserveWithdraw';
      value: { assets: XcmV2MultiassetMultiAssetFilter; reserve: XcmV2MultilocationMultiLocation; xcm: XcmV2Xcm };
    }
  | {
      tag: 'InitiateTeleport';
      value: { assets: XcmV2MultiassetMultiAssetFilter; dest: XcmV2MultilocationMultiLocation; xcm: XcmV2Xcm };
    }
  | {
      tag: 'QueryHolding';
      value: {
        queryId: bigint;
        dest: XcmV2MultilocationMultiLocation;
        assets: XcmV2MultiassetMultiAssetFilter;
        maxResponseWeight: bigint;
      };
    }
  | { tag: 'BuyExecution'; value: { fees: XcmV2MultiassetMultiAsset; weightLimit: XcmV2WeightLimit } }
  | { tag: 'RefundSurplus' }
  | { tag: 'SetErrorHandler'; value: XcmV2Xcm }
  | { tag: 'SetAppendix'; value: XcmV2Xcm }
  | { tag: 'ClearError' }
  | { tag: 'ClaimAsset'; value: { assets: XcmV2MultiassetMultiAssets; ticket: XcmV2MultilocationMultiLocation } }
  | { tag: 'Trap'; value: bigint }
  | { tag: 'SubscribeVersion'; value: { queryId: bigint; maxResponseWeight: bigint } }
  | { tag: 'UnsubscribeVersion' };

export type XcmV2Response =
  | { tag: 'Null' }
  | { tag: 'Assets'; value: XcmV2MultiassetMultiAssets }
  | { tag: 'ExecutionResult'; value?: [number, XcmV2TraitsError] | undefined }
  | { tag: 'Version'; value: number };

export type XcmV2TraitsError =
  | { tag: 'Overflow' }
  | { tag: 'Unimplemented' }
  | { tag: 'UntrustedReserveLocation' }
  | { tag: 'UntrustedTeleportLocation' }
  | { tag: 'MultiLocationFull' }
  | { tag: 'MultiLocationNotInvertible' }
  | { tag: 'BadOrigin' }
  | { tag: 'InvalidLocation' }
  | { tag: 'AssetNotFound' }
  | { tag: 'FailedToTransactAsset' }
  | { tag: 'NotWithdrawable' }
  | { tag: 'LocationCannotHold' }
  | { tag: 'ExceedsMaxMessageSize' }
  | { tag: 'DestinationUnsupported' }
  | { tag: 'Transport' }
  | { tag: 'Unroutable' }
  | { tag: 'UnknownClaim' }
  | { tag: 'FailedToDecode' }
  | { tag: 'MaxWeightInvalid' }
  | { tag: 'NotHoldingFees' }
  | { tag: 'TooExpensive' }
  | { tag: 'Trap'; value: bigint }
  | { tag: 'UnhandledXcmVersion' }
  | { tag: 'WeightLimitReached'; value: bigint }
  | { tag: 'Barrier' }
  | { tag: 'WeightNotComputable' };

export type XcmV2MultiassetMultiAssetFilter =
  | { tag: 'Definite'; value: XcmV2MultiassetMultiAssets }
  | { tag: 'Wild'; value: XcmV2MultiassetWildMultiAsset };

export type XcmV2MultiassetWildMultiAsset =
  | { tag: 'All' }
  | { tag: 'AllOf'; value: { id: XcmV2MultiassetAssetId; fun: XcmV2MultiassetWildFungibility } };

export type XcmV2MultiassetWildFungibility = 'Fungible' | 'NonFungible';

export type XcmV2WeightLimit = { tag: 'Unlimited' } | { tag: 'Limited'; value: bigint };

/**
 * Contains one variant per dispatchable that can be called by an extrinsic.
 **/
export type CumulusPalletXcmCall = null;

/**
 * Contains one variant per dispatchable that can be called by an extrinsic.
 **/
export type CumulusPalletDmpQueueCall =
  /**
   * Service a single overweight message.
   **/
  { name: 'ServiceOverweight'; params: { index: bigint; weightLimit: SpWeightsWeightV2Weight } };

/**
 * Contains one variant per dispatchable that can be called by an extrinsic.
 **/
export type PalletXcAssetConfigCall =
  /**
   * Register new asset location to asset Id mapping.
   *
   * This makes the asset eligible for XCM interaction.
   **/
  | { name: 'RegisterAssetLocation'; params: { assetLocation: XcmVersionedMultiLocation; assetId: bigint } }
  /**
   * Change the amount of units we are charging per execution second
   * for a given AssetLocation.
   **/
  | { name: 'SetAssetUnitsPerSecond'; params: { assetLocation: XcmVersionedMultiLocation; unitsPerSecond: bigint } }
  /**
   * Change the xcm type mapping for a given asset Id.
   * The new asset type will inherit old `units per second` value.
   **/
  | { name: 'ChangeExistingAssetLocation'; params: { newAssetLocation: XcmVersionedMultiLocation; assetId: bigint } }
  /**
   * Removes asset from the set of supported payment assets.
   *
   * The asset can still be interacted with via XCM but it cannot be used to pay for execution time.
   **/
  | { name: 'RemovePaymentAsset'; params: { assetLocation: XcmVersionedMultiLocation } }
  /**
   * Removes all information related to asset, removing it from XCM support.
   **/
  | { name: 'RemoveAsset'; params: { assetId: bigint } };

/**
 * Contains one variant per dispatchable that can be called by an extrinsic.
 **/
export type OrmlXtokensModuleCall =
  /**
   * Transfer native currencies.
   *
   * `dest_weight_limit` is the weight for XCM execution on the dest
   * chain, and it would be charged from the transferred assets. If set
   * below requirements, the execution may fail and assets wouldn't be
   * received.
   *
   * It's a no-op if any error on local XCM execution or message sending.
   * Note sending assets out per se doesn't guarantee they would be
   * received. Receiving depends on if the XCM message could be delivered
   * by the network, and if the receiving chain would handle
   * messages correctly.
   **/
  | {
      tag: 'Transfer';
      value: { currencyId: bigint; amount: bigint; dest: XcmVersionedMultiLocation; destWeightLimit: XcmV3WeightLimit };
    }
  /**
   * Transfer `MultiAsset`.
   *
   * `dest_weight_limit` is the weight for XCM execution on the dest
   * chain, and it would be charged from the transferred assets. If set
   * below requirements, the execution may fail and assets wouldn't be
   * received.
   *
   * It's a no-op if any error on local XCM execution or message sending.
   * Note sending assets out per se doesn't guarantee they would be
   * received. Receiving depends on if the XCM message could be delivered
   * by the network, and if the receiving chain would handle
   * messages correctly.
   **/
  | {
      tag: 'TransferMultiasset';
      value: { asset: XcmVersionedMultiAsset; dest: XcmVersionedMultiLocation; destWeightLimit: XcmV3WeightLimit };
    }
  /**
   * Transfer native currencies specifying the fee and amount as
   * separate.
   *
   * `dest_weight_limit` is the weight for XCM execution on the dest
   * chain, and it would be charged from the transferred assets. If set
   * below requirements, the execution may fail and assets wouldn't be
   * received.
   *
   * `fee` is the amount to be spent to pay for execution in destination
   * chain. Both fee and amount will be subtracted form the callers
   * balance.
   *
   * If `fee` is not high enough to cover for the execution costs in the
   * destination chain, then the assets will be trapped in the
   * destination chain
   *
   * It's a no-op if any error on local XCM execution or message sending.
   * Note sending assets out per se doesn't guarantee they would be
   * received. Receiving depends on if the XCM message could be delivered
   * by the network, and if the receiving chain would handle
   * messages correctly.
   **/
  | {
      tag: 'TransferWithFee';
      value: {
        currencyId: bigint;
        amount: bigint;
        fee: bigint;
        dest: XcmVersionedMultiLocation;
        destWeightLimit: XcmV3WeightLimit;
      };
    }
  /**
   * Transfer `MultiAsset` specifying the fee and amount as separate.
   *
   * `dest_weight_limit` is the weight for XCM execution on the dest
   * chain, and it would be charged from the transferred assets. If set
   * below requirements, the execution may fail and assets wouldn't be
   * received.
   *
   * `fee` is the multiasset to be spent to pay for execution in
   * destination chain. Both fee and amount will be subtracted form the
   * callers balance For now we only accept fee and asset having the same
   * `MultiLocation` id.
   *
   * If `fee` is not high enough to cover for the execution costs in the
   * destination chain, then the assets will be trapped in the
   * destination chain
   *
   * It's a no-op if any error on local XCM execution or message sending.
   * Note sending assets out per se doesn't guarantee they would be
   * received. Receiving depends on if the XCM message could be delivered
   * by the network, and if the receiving chain would handle
   * messages correctly.
   **/
  | {
      tag: 'TransferMultiassetWithFee';
      value: {
        asset: XcmVersionedMultiAsset;
        fee: XcmVersionedMultiAsset;
        dest: XcmVersionedMultiLocation;
        destWeightLimit: XcmV3WeightLimit;
      };
    }
  /**
   * Transfer several currencies specifying the item to be used as fee
   *
   * `dest_weight_limit` is the weight for XCM execution on the dest
   * chain, and it would be charged from the transferred assets. If set
   * below requirements, the execution may fail and assets wouldn't be
   * received.
   *
   * `fee_item` is index of the currencies tuple that we want to use for
   * payment
   *
   * It's a no-op if any error on local XCM execution or message sending.
   * Note sending assets out per se doesn't guarantee they would be
   * received. Receiving depends on if the XCM message could be delivered
   * by the network, and if the receiving chain would handle
   * messages correctly.
   **/
  | {
      tag: 'TransferMulticurrencies';
      value: {
        currencies: Array<[bigint, bigint]>;
        feeItem: number;
        dest: XcmVersionedMultiLocation;
        destWeightLimit: XcmV3WeightLimit;
      };
    }
  /**
   * Transfer several `MultiAsset` specifying the item to be used as fee
   *
   * `dest_weight_limit` is the weight for XCM execution on the dest
   * chain, and it would be charged from the transferred assets. If set
   * below requirements, the execution may fail and assets wouldn't be
   * received.
   *
   * `fee_item` is index of the MultiAssets that we want to use for
   * payment
   *
   * It's a no-op if any error on local XCM execution or message sending.
   * Note sending assets out per se doesn't guarantee they would be
   * received. Receiving depends on if the XCM message could be delivered
   * by the network, and if the receiving chain would handle
   * messages correctly.
   **/
  | {
      tag: 'TransferMultiassets';
      value: {
        assets: XcmVersionedMultiAssets;
        feeItem: number;
        dest: XcmVersionedMultiLocation;
        destWeightLimit: XcmV3WeightLimit;
      };
    };

export type XcmVersionedMultiAsset =
  | { tag: 'V2'; value: XcmV2MultiassetMultiAsset }
  | { tag: 'V3'; value: XcmV3MultiassetMultiAsset };

/**
 * Contains one variant per dispatchable that can be called by an extrinsic.
 **/
export type PalletEvmCall =
  /**
   * Withdraw balance from EVM into currency/balances pallet.
   **/
  | { name: 'Withdraw'; params: { address: H160; value: bigint } }
  /**
   * Issue an EVM call operation. This is similar to a message call transaction in Ethereum.
   **/
  | {
      name: 'Call';
      params: {
        source: H160;
        target: H160;
        input: Bytes;
        value: U256;
        gasLimit: bigint;
        maxFeePerGas: U256;
        maxPriorityFeePerGas?: U256 | undefined;
        nonce?: U256 | undefined;
        accessList: Array<[H160, Array<H256>]>;
      };
    }
  /**
   * Issue an EVM create operation. This is similar to a contract creation transaction in
   * Ethereum.
   **/
  | {
      name: 'Create';
      params: {
        source: H160;
        init: Bytes;
        value: U256;
        gasLimit: bigint;
        maxFeePerGas: U256;
        maxPriorityFeePerGas?: U256 | undefined;
        nonce?: U256 | undefined;
        accessList: Array<[H160, Array<H256>]>;
      };
    }
  /**
   * Issue an EVM create2 operation.
   **/
  | {
      name: 'Create2';
      params: {
        source: H160;
        init: Bytes;
        salt: H256;
        value: U256;
        gasLimit: bigint;
        maxFeePerGas: U256;
        maxPriorityFeePerGas?: U256 | undefined;
        nonce?: U256 | undefined;
        accessList: Array<[H160, Array<H256>]>;
      };
    };

/**
 * Contains one variant per dispatchable that can be called by an extrinsic.
 **/
export type PalletEthereumCall =
  /**
   * Transact an Ethereum transaction.
   **/
  { name: 'Transact'; params: { transaction: EthereumTransactionTransactionV2 } };

export type EthereumTransactionTransactionV2 =
  | { tag: 'Legacy'; value: EthereumTransactionLegacyTransaction }
  | { tag: 'Eip2930'; value: EthereumTransactionEip2930Transaction }
  | { tag: 'Eip1559'; value: EthereumTransactionEip1559Transaction };

export type EthereumTransactionLegacyTransaction = {
  nonce: U256;
  gasPrice: U256;
  gasLimit: U256;
  action: EthereumTransactionTransactionAction;
  value: U256;
  input: Bytes;
  signature: EthereumTransactionTransactionSignature;
};

export type EthereumTransactionTransactionAction = { tag: 'Call'; value: H160 } | { tag: 'Create' };

export type EthereumTransactionTransactionSignature = { v: EthereumTransactionTransactionRecoveryId; r: H256; s: H256 };

export type EthereumTransactionTransactionRecoveryId = bigint;

export type EthereumTransactionEip2930Transaction = {
  chainId: bigint;
  nonce: U256;
  gasPrice: U256;
  gasLimit: U256;
  action: EthereumTransactionTransactionAction;
  value: U256;
  input: Bytes;
  accessList: Array<EthereumTransactionAccessListItem>;
  oddYParity: boolean;
  r: H256;
  s: H256;
};

export type EthereumTransactionAccessListItem = { address: H160; storageKeys: Array<H256> };

export type EthereumTransactionEip1559Transaction = {
  chainId: bigint;
  nonce: U256;
  maxPriorityFeePerGas: U256;
  maxFeePerGas: U256;
  gasLimit: U256;
  action: EthereumTransactionTransactionAction;
  value: U256;
  input: Bytes;
  accessList: Array<EthereumTransactionAccessListItem>;
  oddYParity: boolean;
  r: H256;
  s: H256;
};

/**
 * Contains one variant per dispatchable that can be called by an extrinsic.
 **/
export type PalletDynamicEvmBaseFeeCall =
  /**
   * `root-only` extrinsic to set the `base_fee_per_gas` value manually.
   * The specified value has to respect min & max limits configured in the runtime.
   **/
  { name: 'SetBaseFeePerGas'; params: { fee: U256 } };

/**
 * Contains one variant per dispatchable that can be called by an extrinsic.
 **/
export type PalletContractsCall =
  /**
   * Deprecated version if [`Self::call`] for use in an in-storage `Call`.
   **/
  | {
      name: 'CallOldWeight';
      params: {
        dest: MultiAddress;
        value: bigint;
        gasLimit: bigint;
        storageDepositLimit?: bigint | undefined;
        data: Bytes;
      };
    }
  /**
   * Deprecated version if [`Self::instantiate_with_code`] for use in an in-storage `Call`.
   **/
  | {
      name: 'InstantiateWithCodeOldWeight';
      params: {
        value: bigint;
        gasLimit: bigint;
        storageDepositLimit?: bigint | undefined;
        code: Bytes;
        data: Bytes;
        salt: Bytes;
      };
    }
  /**
   * Deprecated version if [`Self::instantiate`] for use in an in-storage `Call`.
   **/
  | {
      name: 'InstantiateOldWeight';
      params: {
        value: bigint;
        gasLimit: bigint;
        storageDepositLimit?: bigint | undefined;
        codeHash: H256;
        data: Bytes;
        salt: Bytes;
      };
    }
  /**
   * Upload new `code` without instantiating a contract from it.
   *
   * If the code does not already exist a deposit is reserved from the caller
   * and unreserved only when [`Self::remove_code`] is called. The size of the reserve
   * depends on the instrumented size of the the supplied `code`.
   *
   * If the code already exists in storage it will still return `Ok` and upgrades
   * the in storage version to the current
   * [`InstructionWeights::version`](InstructionWeights).
   *
   * - `determinism`: If this is set to any other value but [`Determinism::Enforced`] then
   * the only way to use this code is to delegate call into it from an offchain execution.
   * Set to [`Determinism::Enforced`] if in doubt.
   *
   * # Note
   *
   * Anyone can instantiate a contract from any uploaded code and thus prevent its removal.
   * To avoid this situation a constructor could employ access control so that it can
   * only be instantiated by permissioned entities. The same is true when uploading
   * through [`Self::instantiate_with_code`].
   **/
  | {
      name: 'UploadCode';
      params: { code: Bytes; storageDepositLimit?: bigint | undefined; determinism: PalletContractsWasmDeterminism };
    }
  /**
   * Remove the code stored under `code_hash` and refund the deposit to its owner.
   *
   * A code can only be removed by its original uploader (its owner) and only if it is
   * not used by any contract.
   **/
  | { name: 'RemoveCode'; params: { codeHash: H256 } }
  /**
   * Privileged function that changes the code of an existing contract.
   *
   * This takes care of updating refcounts and all other necessary operations. Returns
   * an error if either the `code_hash` or `dest` do not exist.
   *
   * # Note
   *
   * This does **not** change the address of the contract in question. This means
   * that the contract address is no longer derived from its code hash after calling
   * this dispatchable.
   **/
  | { name: 'SetCode'; params: { dest: MultiAddress; codeHash: H256 } }
  /**
   * Makes a call to an account, optionally transferring some balance.
   *
   * # Parameters
   *
   * * `dest`: Address of the contract to call.
   * * `value`: The balance to transfer from the `origin` to `dest`.
   * * `gas_limit`: The gas limit enforced when executing the constructor.
   * * `storage_deposit_limit`: The maximum amount of balance that can be charged from the
   * caller to pay for the storage consumed.
   * * `data`: The input data to pass to the contract.
   *
   * * If the account is a smart-contract account, the associated code will be
   * executed and any value will be transferred.
   * * If the account is a regular account, any value will be transferred.
   * * If no account exists and the call value is not less than `existential_deposit`,
   * a regular account will be created and any value will be transferred.
   **/
  | {
      name: 'Call';
      params: {
        dest: MultiAddress;
        value: bigint;
        gasLimit: SpWeightsWeightV2Weight;
        storageDepositLimit?: bigint | undefined;
        data: Bytes;
      };
    }
  /**
   * Instantiates a new contract from the supplied `code` optionally transferring
   * some balance.
   *
   * This dispatchable has the same effect as calling [`Self::upload_code`] +
   * [`Self::instantiate`]. Bundling them together provides efficiency gains. Please
   * also check the documentation of [`Self::upload_code`].
   *
   * # Parameters
   *
   * * `value`: The balance to transfer from the `origin` to the newly created contract.
   * * `gas_limit`: The gas limit enforced when executing the constructor.
   * * `storage_deposit_limit`: The maximum amount of balance that can be charged/reserved
   * from the caller to pay for the storage consumed.
   * * `code`: The contract code to deploy in raw bytes.
   * * `data`: The input data to pass to the contract constructor.
   * * `salt`: Used for the address derivation. See [`Pallet::contract_address`].
   *
   * Instantiation is executed as follows:
   *
   * - The supplied `code` is instrumented, deployed, and a `code_hash` is created for that
   * code.
   * - If the `code_hash` already exists on the chain the underlying `code` will be shared.
   * - The destination address is computed based on the sender, code_hash and the salt.
   * - The smart-contract account is created at the computed address.
   * - The `value` is transferred to the new account.
   * - The `deploy` function is executed in the context of the newly-created account.
   **/
  | {
      name: 'InstantiateWithCode';
      params: {
        value: bigint;
        gasLimit: SpWeightsWeightV2Weight;
        storageDepositLimit?: bigint | undefined;
        code: Bytes;
        data: Bytes;
        salt: Bytes;
      };
    }
  /**
   * Instantiates a contract from a previously deployed wasm binary.
   *
   * This function is identical to [`Self::instantiate_with_code`] but without the
   * code deployment step. Instead, the `code_hash` of an on-chain deployed wasm binary
   * must be supplied.
   **/
  | {
      name: 'Instantiate';
      params: {
        value: bigint;
        gasLimit: SpWeightsWeightV2Weight;
        storageDepositLimit?: bigint | undefined;
        codeHash: H256;
        data: Bytes;
        salt: Bytes;
      };
    }
  /**
   * When a migration is in progress, this dispatchable can be used to run migration steps.
   * Calls that contribute to advancing the migration have their fees waived, as it's helpful
   * for the chain. Note that while the migration is in progress, the pallet will also
   * leverage the `on_idle` hooks to run migration steps.
   **/
  | { name: 'Migrate'; params: { weightLimit: SpWeightsWeightV2Weight } };

export type PalletContractsWasmDeterminism = 'Enforced' | 'Relaxed';

/**
 * Contains one variant per dispatchable that can be called by an extrinsic.
 **/
export type PalletSudoCall =
  /**
   * Authenticates the sudo key and dispatches a function call with `Root` origin.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * ## Complexity
   * - O(1).
   **/
  | { name: 'Sudo'; params: { call: AstarRuntimeRuntimeCall } }
  /**
   * Authenticates the sudo key and dispatches a function call with `Root` origin.
   * This function does not check the weight of the call, and instead allows the
   * Sudo user to specify the weight of the call.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * ## Complexity
   * - O(1).
   **/
  | { name: 'SudoUncheckedWeight'; params: { call: AstarRuntimeRuntimeCall; weight: SpWeightsWeightV2Weight } }
  /**
   * Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo
   * key.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * ## Complexity
   * - O(1).
   **/
  | { name: 'SetKey'; params: { new: MultiAddress } }
  /**
   * Authenticates the sudo key and dispatches a function call with `Signed` origin from
   * a given account.
   *
   * The dispatch origin for this call must be _Signed_.
   *
   * ## Complexity
   * - O(1).
   **/
  | { name: 'SudoAs'; params: { who: MultiAddress; call: AstarRuntimeRuntimeCall } };

export type AstarRuntimeOriginCaller =
  | { tag: 'System'; value: FrameSupportDispatchRawOrigin }
  | { tag: 'PolkadotXcm'; value: PalletXcmOrigin }
  | { tag: 'CumulusXcm'; value: CumulusPalletXcmOrigin }
  | { tag: 'Ethereum'; value: PalletEthereumRawOrigin }
  | { tag: 'Void'; value: SpCoreVoid };

export type FrameSupportDispatchRawOrigin = { tag: 'Root' } | { tag: 'Signed'; value: AccountId32 } | { tag: 'None' };

export type PalletXcmOrigin =
  | { tag: 'Xcm'; value: XcmV3MultilocationMultiLocation }
  | { tag: 'Response'; value: XcmV3MultilocationMultiLocation };

export type CumulusPalletXcmOrigin =
  | { tag: 'Relay' }
  | { tag: 'SiblingParachain'; value: PolkadotParachainPrimitivesId };

export type PalletEthereumRawOrigin = { tag: 'EthereumTransaction'; value: H160 };

export type SpCoreVoid = null;

/**
 * Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/) of this pallet.
 **/
export type PalletUtilityError =
  /**
   * Too many calls batched.
   **/
  'TooManyCalls';

export type PalletIdentityRegistration = {
  judgements: Array<[number, PalletIdentityJudgement]>;
  deposit: bigint;
  info: PalletIdentityIdentityInfo;
};

export type PalletIdentityRegistrarInfo = { account: AccountId32; fee: bigint; fields: PalletIdentityBitFlags };

/**
 * Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/) of this pallet.
 **/
export type PalletIdentityError =
  /**
   * Too many subs-accounts.
   **/
  | 'TooManySubAccounts'
  /**
   * Account isn't found.
   **/
  | 'NotFound'
  /**
   * Account isn't named.
   **/
  | 'NotNamed'
  /**
   * Empty index.
   **/
  | 'EmptyIndex'
  /**
   * Fee is changed.
   **/
  | 'FeeChanged'
  /**
   * No identity found.
   **/
  | 'NoIdentity'
  /**
   * Sticky judgement.
   **/
  | 'StickyJudgement'
  /**
   * Judgement given.
   **/
  | 'JudgementGiven'
  /**
   * Invalid judgement.
   **/
  | 'InvalidJudgement'
  /**
   * The index is invalid.
   **/
  | 'InvalidIndex'
  /**
   * The target is invalid.
   **/
  | 'InvalidTarget'
  /**
   * Too many additional fields.
   **/
  | 'TooManyFields'
  /**
   * Maximum amount of registrars reached. Cannot add any more.
   **/
  | 'TooManyRegistrars'
  /**
   * Account ID is already named.
   **/
  | 'AlreadyClaimed'
  /**
   * Sender is not a sub-account.
   **/
  | 'NotSub'
  /**
   * Sub-account isn't owned by sender.
   **/
  | 'NotOwned'
  /**
   * The provided judgement was for a different identity.
   **/
  | 'JudgementForDifferentIdentity'
  /**
   * Error that occurs when there is an issue paying for judgement.
   **/
  | 'JudgementPaymentFailed';

export type PalletMultisigMultisig = {
  when: PalletMultisigTimepoint;
  deposit: bigint;
  depositor: AccountId32;
  approvals: Array<AccountId32>;
};

/**
 * Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/) of this pallet.
 **/
export type PalletMultisigError =
  /**
   * Threshold must be 2 or greater.
   **/
  | 'MinimumThreshold'
  /**
   * Call is already approved by this signatory.
   **/
  | 'AlreadyApproved'
  /**
   * Call doesn't need any (more) approvals.
   **/
  | 'NoApprovalsNeeded'
  /**
   * There are too few signatories in the list.
   **/
  | 'TooFewSignatories'
  /**
   * There are too many signatories in the list.
   **/
  | 'TooManySignatories'
  /**
   * The signatories were provided out of order; they should be ordered.
   **/
  | 'SignatoriesOutOfOrder'
  /**
   * The sender was contained in the other signatories; it shouldn't be.
   **/
  | 'SenderInSignatories'
  /**
   * Multisig operation not found when attempting to cancel.
   **/
  | 'NotFound'
  /**
   * Only the account that originally created the multisig is able to cancel it.
   **/
  | 'NotOwner'
  /**
   * No timepoint was given, yet the multisig operation is already underway.
   **/
  | 'NoTimepoint'
  /**
   * A different timepoint was given to the multisig operation that is underway.
   **/
  | 'WrongTimepoint'
  /**
   * A timepoint was given, yet no multisig operation is underway.
   **/
  | 'UnexpectedTimepoint'
  /**
   * The maximum weight information provided was too low.
   **/
  | 'MaxWeightTooLow'
  /**
   * The data to be stored is already stored.
   **/
  | 'AlreadyStored';

export type PalletProxyProxyDefinition = { delegate: AccountId32; proxyType: AstarRuntimeProxyType; delay: number };

export type PalletProxyAnnouncement = { real: AccountId32; callHash: H256; height: number };

/**
 * Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/) of this pallet.
 **/
export type PalletProxyError =
  /**
   * There are too many proxies registered or too many announcements pending.
   **/
  | 'TooMany'
  /**
   * Proxy registration not found.
   **/
  | 'NotFound'
  /**
   * Sender is not a proxy of the account to be proxied.
   **/
  | 'NotProxy'
  /**
   * A call which is incompatible with the proxy type's filter was attempted.
   **/
  | 'Unproxyable'
  /**
   * Account is already a proxy.
   **/
  | 'Duplicate'
  /**
   * Call may not be made by proxy because it may escalate its privileges.
   **/
  | 'NoPermission'
  /**
   * Announcement, if made at all, was made too recently.
   **/
  | 'Unannounced'
  /**
   * Cannot add self as proxy.
   **/
  | 'NoSelfProxy';

export type PolkadotPrimitivesV4UpgradeRestriction = 'Present';

export type CumulusPalletParachainSystemRelayStateSnapshotMessagingStateSnapshot = {
  dmqMqcHead: H256;
  relayDispatchQueueSize: CumulusPalletParachainSystemRelayStateSnapshotRelayDispachQueueSize;
  ingressChannels: Array<[PolkadotParachainPrimitivesId, PolkadotPrimitivesV4AbridgedHrmpChannel]>;
  egressChannels: Array<[PolkadotParachainPrimitivesId, PolkadotPrimitivesV4AbridgedHrmpChannel]>;
};

export type CumulusPalletParachainSystemRelayStateSnapshotRelayDispachQueueSize = {
  remainingCount: number;
  remainingSize: number;
};

export type PolkadotPrimitivesV4AbridgedHrmpChannel = {
  maxCapacity: number;
  maxTotalSize: number;
  maxMessageSize: number;
  msgCount: number;
  totalSize: number;
  mqcHead?: H256 | undefined;
};

export type PolkadotPrimitivesV4AbridgedHostConfiguration = {
  maxCodeSize: number;
  maxHeadDataSize: number;
  maxUpwardQueueCount: number;
  maxUpwardQueueSize: number;
  maxUpwardMessageSize: number;
  maxUpwardMessageNumPerCandidate: number;
  hrmpMaxMessageNumPerCandidate: number;
  validationUpgradeCooldown: number;
  validationUpgradeDelay: number;
};

export type CumulusPrimitivesParachainInherentMessageQueueChain = H256;

export type PolkadotCorePrimitivesOutboundHrmpMessage = { recipient: PolkadotParachainPrimitivesId; data: Bytes };

export type CumulusPalletParachainSystemCodeUpgradeAuthorization = { codeHash: H256; checkVersion: boolean };

/**
 * Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/) of this pallet.
 **/
export type CumulusPalletParachainSystemError =
  /**
   * Attempt to upgrade validation function while existing upgrade pending.
   **/
  | 'OverlappingUpgrades'
  /**
   * Polkadot currently prohibits this parachain from upgrading its validation function.
   **/
  | 'ProhibitedByPolkadot'
  /**
   * The supplied validation function has compiled into a blob larger than Polkadot is
   * willing to run.
   **/
  | 'TooBig'
  /**
   * The inherent which supplies the validation data did not run this block.
   **/
  | 'ValidationDataNotAvailable'
  /**
   * The inherent which supplies the host configuration did not run this block.
   **/
  | 'HostConfigurationNotAvailable'
  /**
   * No validation function upgrade is currently scheduled.
   **/
  | 'NotScheduled'
  /**
   * No code upgrade has been authorized.
   **/
  | 'NothingAuthorized'
  /**
   * The given code upgrade has not been authorized.
   **/
  | 'Unauthorized';

export type PalletTransactionPaymentReleases = 'V1Ancient' | 'V2';

export type PalletBalancesBalanceLock = { id: FixedBytes<8>; amount: bigint; reasons: PalletBalancesReasons };

export type PalletBalancesReasons = 'Fee' | 'Misc' | 'All';

export type PalletBalancesReserveData = { id: FixedBytes<8>; amount: bigint };

export type PalletBalancesIdAmount = { id: []; amount: bigint };

/**
 * Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/) of this pallet.
 **/
export type PalletBalancesError =
  /**
   * Vesting balance too high to send value.
   **/
  | 'VestingBalance'
  /**
   * Account liquidity restrictions prevent withdrawal.
   **/
  | 'LiquidityRestrictions'
  /**
   * Balance too low to send value.
   **/
  | 'InsufficientBalance'
  /**
   * Value too low to create account due to existential deposit.
   **/
  | 'ExistentialDeposit'
  /**
   * Transfer/payment would kill account.
   **/
  | 'Expendability'
  /**
   * A vesting schedule already exists for this account.
   **/
  | 'ExistingVestingSchedule'
  /**
   * Beneficiary account must pre-exist.
   **/
  | 'DeadAccount'
  /**
   * Number of named reserves exceed `MaxReserves`.
   **/
  | 'TooManyReserves'
  /**
   * Number of holds exceed `MaxHolds`.
   **/
  | 'TooManyHolds'
  /**
   * Number of freezes exceed `MaxFreezes`.
   **/
  | 'TooManyFreezes';

export type PalletVestingReleases = 'V0' | 'V1';

/**
 * Error for the vesting pallet.
 **/
export type PalletVestingError =
  /**
   * The account given is not vesting.
   **/
  | 'NotVesting'
  /**
   * The account already has `MaxVestingSchedules` count of schedules and thus
   * cannot add another one. Consider merging existing schedules in order to add another.
   **/
  | 'AtMaxVestingSchedules'
  /**
   * Amount being transferred is too low to create a vesting schedule.
   **/
  | 'AmountLow'
  /**
   * An index was out of bounds of the vesting schedules.
   **/
  | 'ScheduleIndexOutOfBounds'
  /**
   * Failed to create a new schedule because some parameter was invalid.
   **/
  | 'InvalidScheduleParams';

export type PalletDappsStakingAccountLedger = {
  locked: bigint;
  unbondingInfo: PalletDappsStakingUnbondingInfo;
  rewardDestination: PalletDappsStakingRewardDestination;
};

export type PalletDappsStakingUnbondingInfo = { unlockingChunks: Array<PalletDappsStakingUnlockingChunk> };

export type PalletDappsStakingUnlockingChunk = { amount: bigint; unlockEra: number };

export type PalletDappsStakingRewardInfo = { stakers: bigint; dapps: bigint };

export type PalletDappsStakingForcing = 'NotForcing' | 'ForceNew';

export type PalletDappsStakingDAppInfo = { developer: AccountId32; state: PalletDappsStakingDAppState };

export type PalletDappsStakingDAppState = { tag: 'Registered' } | { tag: 'Unregistered'; value: number };

export type PalletDappsStakingEraInfo = { rewards: PalletDappsStakingRewardInfo; staked: bigint; locked: bigint };

export type PalletDappsStakingStakerInfo = { stakes: Array<PalletDappsStakingEraStake> };

export type PalletDappsStakingEraStake = { staked: bigint; era: number };

export type PalletDappsStakingVersion = 'V1_0_0' | 'V2_0_0' | 'V3_0_0' | 'V4_0_0';

export type FrameSupportPalletId = FixedBytes<8>;

/**
 * Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/) of this pallet.
 **/
export type PalletDappsStakingPalletError =
  /**
   * Disabled
   **/
  | 'Disabled'
  /**
   * No change in maintenance mode
   **/
  | 'NoMaintenanceModeChange'
  /**
   * Upgrade is too heavy, reduce the weight parameter.
   **/
  | 'UpgradeTooHeavy'
  /**
   * Can not stake with zero value.
   **/
  | 'StakingWithNoValue'
  /**
   * Can not stake with value less than minimum staking value
   **/
  | 'InsufficientValue'
  /**
   * Number of stakers per contract exceeded.
   **/
  | 'MaxNumberOfStakersExceeded'
  /**
   * Targets must be operated contracts
   **/
  | 'NotOperatedContract'
  /**
   * Contract isn't staked.
   **/
  | 'NotStakedContract'
  /**
   * Contract isn't unregistered.
   **/
  | 'NotUnregisteredContract'
  /**
   * Unclaimed rewards should be claimed before withdrawing stake.
   **/
  | 'UnclaimedRewardsRemaining'
  /**
   * Unstaking a contract with zero value
   **/
  | 'UnstakingWithNoValue'
  /**
   * There are no previously unbonded funds that can be unstaked and withdrawn.
   **/
  | 'NothingToWithdraw'
  /**
   * The contract is already registered by other account
   **/
  | 'AlreadyRegisteredContract'
  /**
   * This account was already used to register contract
   **/
  | 'AlreadyUsedDeveloperAccount'
  /**
   * Smart contract not owned by the account id.
   **/
  | 'NotOwnedContract'
  /**
   * Report issue on github if this is ever emitted
   **/
  | 'UnknownEraReward'
  /**
   * Report issue on github if this is ever emitted
   **/
  | 'UnexpectedStakeInfoEra'
  /**
   * Contract has too many unlocking chunks. Withdraw the existing chunks if possible
   * or wait for current chunks to complete unlocking process to withdraw them.
   **/
  | 'TooManyUnlockingChunks'
  /**
   * Contract already claimed in this era and reward is distributed
   **/
  | 'AlreadyClaimedInThisEra'
  /**
   * Era parameter is out of bounds
   **/
  | 'EraOutOfBounds'
  /**
   * Too many active `EraStake` values for (staker, contract) pairing.
   * Claim existing rewards to fix this problem.
   **/
  | 'TooManyEraStakeValues'
  /**
   * Account is not actively staking
   **/
  | 'NotActiveStaker'
  /**
   * Transfering nomination to the same contract
   **/
  | 'NominationTransferToSameContract';

/**
 * Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/) of this pallet.
 **/
export type PalletBlockRewardsHybridError =
  /**
   * Sum of all rations must be one whole (100%)
   **/
  'InvalidDistributionConfiguration';

export type PalletAssetsAssetDetails = {
  owner: AccountId32;
  issuer: AccountId32;
  admin: AccountId32;
  freezer: AccountId32;
  supply: bigint;
  deposit: bigint;
  minBalance: bigint;
  isSufficient: boolean;
  accounts: number;
  sufficients: number;
  approvals: number;
  status: PalletAssetsAssetStatus;
};

export type PalletAssetsAssetStatus = 'Live' | 'Frozen' | 'Destroying';

export type PalletAssetsAssetAccount = {
  balance: bigint;
  status: PalletAssetsAccountStatus;
  reason: PalletAssetsExistenceReason;
  extra: [];
};

export type PalletAssetsAccountStatus = 'Liquid' | 'Frozen' | 'Blocked';

export type PalletAssetsExistenceReason =
  | { tag: 'Consumer' }
  | { tag: 'Sufficient' }
  | { tag: 'DepositHeld'; value: bigint }
  | { tag: 'DepositRefunded' }
  | { tag: 'DepositFrom'; value: [AccountId32, bigint] };

export type PalletAssetsApproval = { amount: bigint; deposit: bigint };

export type PalletAssetsAssetMetadata = {
  deposit: bigint;
  name: Bytes;
  symbol: Bytes;
  decimals: number;
  isFrozen: boolean;
};

/**
 * Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/) of this pallet.
 **/
export type PalletAssetsError =
  /**
   * Account balance must be greater than or equal to the transfer amount.
   **/
  | 'BalanceLow'
  /**
   * The account to alter does not exist.
   **/
  | 'NoAccount'
  /**
   * The signing account has no permission to do the operation.
   **/
  | 'NoPermission'
  /**
   * The given asset ID is unknown.
   **/
  | 'Unknown'
  /**
   * The origin account is frozen.
   **/
  | 'Frozen'
  /**
   * The asset ID is already taken.
   **/
  | 'InUse'
  /**
   * Invalid witness data given.
   **/
  | 'BadWitness'
  /**
   * Minimum balance should be non-zero.
   **/
  | 'MinBalanceZero'
  /**
   * Unable to increment the consumer reference counters on the account. Either no provider
   * reference exists to allow a non-zero balance of a non-self-sufficient asset, or one
   * fewer then the maximum number of consumers has been reached.
   **/
  | 'UnavailableConsumer'
  /**
   * Invalid metadata given.
   **/
  | 'BadMetadata'
  /**
   * No approval exists that would allow the transfer.
   **/
  | 'Unapproved'
  /**
   * The source account would not survive the transfer and it needs to stay alive.
   **/
  | 'WouldDie'
  /**
   * The asset-account already exists.
   **/
  | 'AlreadyExists'
  /**
   * The asset-account doesn't have an associated deposit.
   **/
  | 'NoDeposit'
  /**
   * The operation would result in funds being burned.
   **/
  | 'WouldBurn'
  /**
   * The asset is a live asset and is actively being used. Usually emit for operations such
   * as `start_destroy` which require the asset to be in a destroying state.
   **/
  | 'LiveAsset'
  /**
   * The asset is not live, and likely being destroyed.
   **/
  | 'AssetNotLive'
  /**
   * The asset status is not the expected status.
   **/
  | 'IncorrectStatus'
  /**
   * The asset should be frozen before the given operation.
   **/
  | 'NotFrozen'
  /**
   * Callback action resulted in error
   **/
  | 'CallbackFailed';

export type PalletCollatorSelectionCandidateInfo = { who: AccountId32; deposit: bigint };

/**
 * Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/) of this pallet.
 **/
export type PalletCollatorSelectionError =
  /**
   * Too many candidates
   **/
  | 'TooManyCandidates'
  /**
   * Too few candidates
   **/
  | 'TooFewCandidates'
  /**
   * Unknown error
   **/
  | 'Unknown'
  /**
   * Permission issue
   **/
  | 'Permission'
  /**
   * User is already a candidate
   **/
  | 'AlreadyCandidate'
  /**
   * User is not a candidate
   **/
  | 'NotCandidate'
  /**
   * User is already an Invulnerable
   **/
  | 'AlreadyInvulnerable'
  /**
   * Account has no associated validator ID
   **/
  | 'NoAssociatedValidatorId'
  /**
   * Validator ID is not yet registered
   **/
  | 'ValidatorNotRegistered';

export type SpCoreCryptoKeyTypeId = FixedBytes<4>;

/**
 * Error for the session pallet.
 **/
export type PalletSessionError =
  /**
   * Invalid ownership proof.
   **/
  | 'InvalidProof'
  /**
   * No associated validator ID for account.
   **/
  | 'NoAssociatedValidatorId'
  /**
   * Registered duplicate key.
   **/
  | 'DuplicatedKey'
  /**
   * No keys are associated with this account.
   **/
  | 'NoKeys'
  /**
   * Key setting account is not live, so it's impossible to associate keys.
   **/
  | 'NoAccount';

export type SpConsensusSlotsSlot = bigint;

export type CumulusPalletXcmpQueueInboundChannelDetails = {
  sender: PolkadotParachainPrimitivesId;
  state: CumulusPalletXcmpQueueInboundState;
  messageMetadata: Array<[number, PolkadotParachainPrimitivesXcmpMessageFormat]>;
};

export type CumulusPalletXcmpQueueInboundState = 'Ok' | 'Suspended';

export type PolkadotParachainPrimitivesXcmpMessageFormat =
  | 'ConcatenatedVersionedXcm'
  | 'ConcatenatedEncodedBlob'
  | 'Signals';

export type CumulusPalletXcmpQueueOutboundChannelDetails = {
  recipient: PolkadotParachainPrimitivesId;
  state: CumulusPalletXcmpQueueOutboundState;
  signalsExist: boolean;
  firstIndex: number;
  lastIndex: number;
};

export type CumulusPalletXcmpQueueOutboundState = 'Ok' | 'Suspended';

export type CumulusPalletXcmpQueueQueueConfigData = {
  suspendThreshold: number;
  dropThreshold: number;
  resumeThreshold: number;
  thresholdWeight: SpWeightsWeightV2Weight;
  weightRestrictDecay: SpWeightsWeightV2Weight;
  xcmpMaxIndividualWeight: SpWeightsWeightV2Weight;
};

/**
 * Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/) of this pallet.
 **/
export type CumulusPalletXcmpQueueError =
  /**
   * Failed to send XCM message.
   **/
  | 'FailedToSend'
  /**
   * Bad XCM origin.
   **/
  | 'BadXcmOrigin'
  /**
   * Bad XCM data.
   **/
  | 'BadXcm'
  /**
   * Bad overweight index.
   **/
  | 'BadOverweightIndex'
  /**
   * Provided weight is possibly not enough to execute the message.
   **/
  | 'WeightOverLimit';

export type PalletXcmQueryStatus =
  | {
      tag: 'Pending';
      value: {
        responder: XcmVersionedMultiLocation;
        maybeMatchQuerier?: XcmVersionedMultiLocation | undefined;
        maybeNotify?: [number, number] | undefined;
        timeout: number;
      };
    }
  | { tag: 'VersionNotifier'; value: { origin: XcmVersionedMultiLocation; isActive: boolean } }
  | { tag: 'Ready'; value: { response: XcmVersionedResponse; at: number } };

export type XcmVersionedResponse = { tag: 'V2'; value: XcmV2Response } | { tag: 'V3'; value: XcmV3Response };

export type PalletXcmVersionMigrationStage =
  | { tag: 'MigrateSupportedVersion' }
  | { tag: 'MigrateVersionNotifiers' }
  | { tag: 'NotifyCurrentTargets'; value?: Bytes | undefined }
  | { tag: 'MigrateAndNotifyOldTargets' };

export type XcmVersionedAssetId = { tag: 'V3'; value: XcmV3MultiassetAssetId };

export type PalletXcmRemoteLockedFungibleRecord = {
  amount: bigint;
  owner: XcmVersionedMultiLocation;
  locker: XcmVersionedMultiLocation;
  consumers: Array<[[], bigint]>;
};

/**
 * Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/) of this pallet.
 **/
export type PalletXcmError =
  /**
   * The desired destination was unreachable, generally because there is a no way of routing
   * to it.
   **/
  | 'Unreachable'
  /**
   * There was some other issue (i.e. not to do with routing) in sending the message. Perhaps
   * a lack of space for buffering the message.
   **/
  | 'SendFailure'
  /**
   * The message execution fails the filter.
   **/
  | 'Filtered'
  /**
   * The message's weight could not be determined.
   **/
  | 'UnweighableMessage'
  /**
   * The destination `MultiLocation` provided cannot be inverted.
   **/
  | 'DestinationNotInvertible'
  /**
   * The assets to be sent are empty.
   **/
  | 'Empty'
  /**
   * Could not re-anchor the assets to declare the fees for the destination chain.
   **/
  | 'CannotReanchor'
  /**
   * Too many assets have been attempted for transfer.
   **/
  | 'TooManyAssets'
  /**
   * Origin is invalid for sending.
   **/
  | 'InvalidOrigin'
  /**
   * The version of the `Versioned` value used is not able to be interpreted.
   **/
  | 'BadVersion'
  /**
   * The given location could not be used (e.g. because it cannot be expressed in the
   * desired version of XCM).
   **/
  | 'BadLocation'
  /**
   * The referenced subscription could not be found.
   **/
  | 'NoSubscription'
  /**
   * The location is invalid since it already has a subscription from us.
   **/
  | 'AlreadySubscribed'
  /**
   * Invalid asset for the operation.
   **/
  | 'InvalidAsset'
  /**
   * The owner does not own (all) of the asset that they wish to do the operation on.
   **/
  | 'LowBalance'
  /**
   * The asset owner has too many locks on the asset.
   **/
  | 'TooManyLocks'
  /**
   * The given account is not an identifiable sovereign account for any location.
   **/
  | 'AccountNotSovereign'
  /**
   * The operation required fees to be paid which the initiator could not meet.
   **/
  | 'FeesNotMet'
  /**
   * A remote lock with the corresponding data could not be found.
   **/
  | 'LockNotFound'
  /**
   * The unlock operation cannot succeed because there are still consumers of the lock.
   **/
  | 'InUse';

/**
 * Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/) of this pallet.
 **/
export type CumulusPalletXcmError = null;

export type CumulusPalletDmpQueueConfigData = { maxIndividual: SpWeightsWeightV2Weight };

export type CumulusPalletDmpQueuePageIndexData = { beginUsed: number; endUsed: number; overweightCount: bigint };

/**
 * Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/) of this pallet.
 **/
export type CumulusPalletDmpQueueError =
  /**
   * The message index given is unknown.
   **/
  | 'Unknown'
  /**
   * The amount of weight given is possibly not enough for executing the message.
   **/
  | 'OverLimit';

/**
 * Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/) of this pallet.
 **/
export type PalletXcAssetConfigError =
  /**
   * Asset is already registered.
   **/
  | 'AssetAlreadyRegistered'
  /**
   * Asset does not exist (hasn't been registered).
   **/
  | 'AssetDoesNotExist'
  /**
   * Failed to convert to latest versioned MultiLocation
   **/
  | 'MultiLocationNotSupported';

/**
 * Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/) of this pallet.
 **/
export type OrmlXtokensModuleError =
  /**
   * Asset has no reserve location.
   **/
  | 'AssetHasNoReserve'
  /**
   * Not cross-chain transfer.
   **/
  | 'NotCrossChainTransfer'
  /**
   * Invalid transfer destination.
   **/
  | 'InvalidDest'
  /**
   * Currency is not cross-chain transferable.
   **/
  | 'NotCrossChainTransferableCurrency'
  /**
   * The message's weight could not be determined.
   **/
  | 'UnweighableMessage'
  /**
   * XCM execution failed.
   **/
  | 'XcmExecutionFailed'
  /**
   * Could not re-anchor the assets to declare the fees for the
   * destination chain.
   **/
  | 'CannotReanchor'
  /**
   * Could not get ancestry of asset reserve location.
   **/
  | 'InvalidAncestry'
  /**
   * The MultiAsset is invalid.
   **/
  | 'InvalidAsset'
  /**
   * The destination `MultiLocation` provided cannot be inverted.
   **/
  | 'DestinationNotInvertible'
  /**
   * The version of the `Versioned` value used is not able to be
   * interpreted.
   **/
  | 'BadVersion'
  /**
   * We tried sending distinct asset and fee but they have different
   * reserve chains.
   **/
  | 'DistinctReserveForAssetAndFee'
  /**
   * The fee is zero.
   **/
  | 'ZeroFee'
  /**
   * The transfering asset amount is zero.
   **/
  | 'ZeroAmount'
  /**
   * The number of assets to be sent is over the maximum.
   **/
  | 'TooManyAssetsBeingSent'
  /**
   * The specified index does not exist in a MultiAssets struct.
   **/
  | 'AssetIndexNonExistent'
  /**
   * Fee is not enough.
   **/
  | 'FeeNotEnough'
  /**
   * Not supported MultiLocation
   **/
  | 'NotSupportedMultiLocation'
  /**
   * MinXcmFee not registered for certain reserve location
   **/
  | 'MinXcmFeeNotDefined';

export type PalletEvmCodeMetadata = { size: bigint; hash: H256 };

/**
 * Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/) of this pallet.
 **/
export type PalletEvmError =
  /**
   * Not enough balance to perform action
   **/
  | 'BalanceLow'
  /**
   * Calculating total fee overflowed
   **/
  | 'FeeOverflow'
  /**
   * Calculating total payment overflowed
   **/
  | 'PaymentOverflow'
  /**
   * Withdraw fee failed
   **/
  | 'WithdrawFailed'
  /**
   * Gas price is too low.
   **/
  | 'GasPriceTooLow'
  /**
   * Nonce is invalid
   **/
  | 'InvalidNonce'
  /**
   * Gas limit is too low.
   **/
  | 'GasLimitTooLow'
  /**
   * Gas limit is too high.
   **/
  | 'GasLimitTooHigh'
  /**
   * Undefined error.
   **/
  | 'Undefined'
  /**
   * EVM reentrancy
   **/
  | 'Reentrancy'
  /**
   * EIP-3607,
   **/
  | 'TransactionMustComeFromEOA';

export type FpRpcTransactionStatus = {
  transactionHash: H256;
  transactionIndex: number;
  from: H160;
  to?: H160 | undefined;
  contractAddress?: H160 | undefined;
  logs: Array<EthereumLog>;
  logsBloom: EthbloomBloom;
};

export type EthbloomBloom = FixedBytes<256>;

export type EthereumReceiptReceiptV3 =
  | { tag: 'Legacy'; value: EthereumReceiptEip658ReceiptData }
  | { tag: 'Eip2930'; value: EthereumReceiptEip658ReceiptData }
  | { tag: 'Eip1559'; value: EthereumReceiptEip658ReceiptData };

export type EthereumReceiptEip658ReceiptData = {
  statusCode: number;
  usedGas: U256;
  logsBloom: EthbloomBloom;
  logs: Array<EthereumLog>;
};

export type EthereumBlock = {
  header: EthereumHeader;
  transactions: Array<EthereumTransactionTransactionV2>;
  ommers: Array<EthereumHeader>;
};

export type EthereumHeader = {
  parentHash: H256;
  ommersHash: H256;
  beneficiary: H160;
  stateRoot: H256;
  transactionsRoot: H256;
  receiptsRoot: H256;
  logsBloom: EthbloomBloom;
  difficulty: U256;
  number: U256;
  gasLimit: U256;
  gasUsed: U256;
  timestamp: bigint;
  extraData: Bytes;
  mixHash: H256;
  nonce: EthereumTypesHashH64;
};

export type EthereumTypesHashH64 = FixedBytes<8>;

/**
 * Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/) of this pallet.
 **/
export type PalletEthereumError =
  /**
   * Signature is invalid.
   **/
  | 'InvalidSignature'
  /**
   * Pre-log is present, therefore transact is not allowed.
   **/
  | 'PreLogExists';

/**
 * Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/) of this pallet.
 **/
export type PalletDynamicEvmBaseFeeError =
  /**
   * Specified value is outside of the allowed range.
   **/
  'ValueOutOfBounds';

export type PalletContractsWasmPrefabWasmModule = {
  instructionWeightsVersion: number;
  initial: number;
  maximum: number;
  code: Bytes;
  determinism: PalletContractsWasmDeterminism;
};

export type PalletContractsWasmOwnerInfo = { owner: AccountId32; deposit: bigint; refcount: bigint };

export type PalletContractsStorageContractInfo = {
  trieId: Bytes;
  depositAccount: PalletContractsStorageDepositAccount;
  codeHash: H256;
  storageBytes: number;
  storageItems: number;
  storageByteDeposit: bigint;
  storageItemDeposit: bigint;
  storageBaseDeposit: bigint;
};

export type PalletContractsStorageDepositAccount = AccountId32;

export type PalletContractsStorageDeletionQueueManager = { insertCounter: number; deleteCounter: number };

export type PalletContractsSchedule = {
  limits: PalletContractsScheduleLimits;
  instructionWeights: PalletContractsScheduleInstructionWeights;
  hostFnWeights: PalletContractsScheduleHostFnWeights;
};

export type PalletContractsScheduleLimits = {
  eventTopics: number;
  globals: number;
  locals: number;
  parameters: number;
  memoryPages: number;
  tableSize: number;
  brTableSize: number;
  subjectLen: number;
  payloadLen: number;
  runtimeMemory: number;
};

export type PalletContractsScheduleInstructionWeights = {
  version: number;
  fallback: number;
  i64const: number;
  i64load: number;
  i64store: number;
  select: number;
  rIf: number;
  br: number;
  brIf: number;
  brTable: number;
  brTablePerEntry: number;
  call: number;
  callIndirect: number;
  callPerLocal: number;
  localGet: number;
  localSet: number;
  localTee: number;
  globalGet: number;
  globalSet: number;
  memoryCurrent: number;
  memoryGrow: number;
  i64clz: number;
  i64ctz: number;
  i64popcnt: number;
  i64eqz: number;
  i64extendsi32: number;
  i64extendui32: number;
  i32wrapi64: number;
  i64eq: number;
  i64ne: number;
  i64lts: number;
  i64ltu: number;
  i64gts: number;
  i64gtu: number;
  i64les: number;
  i64leu: number;
  i64ges: number;
  i64geu: number;
  i64add: number;
  i64sub: number;
  i64mul: number;
  i64divs: number;
  i64divu: number;
  i64rems: number;
  i64remu: number;
  i64and: number;
  i64or: number;
  i64xor: number;
  i64shl: number;
  i64shrs: number;
  i64shru: number;
  i64rotl: number;
  i64rotr: number;
};

export type PalletContractsScheduleHostFnWeights = {
  caller: SpWeightsWeightV2Weight;
  isContract: SpWeightsWeightV2Weight;
  codeHash: SpWeightsWeightV2Weight;
  ownCodeHash: SpWeightsWeightV2Weight;
  callerIsOrigin: SpWeightsWeightV2Weight;
  callerIsRoot: SpWeightsWeightV2Weight;
  address: SpWeightsWeightV2Weight;
  gasLeft: SpWeightsWeightV2Weight;
  balance: SpWeightsWeightV2Weight;
  valueTransferred: SpWeightsWeightV2Weight;
  minimumBalance: SpWeightsWeightV2Weight;
  blockNumber: SpWeightsWeightV2Weight;
  now: SpWeightsWeightV2Weight;
  weightToFee: SpWeightsWeightV2Weight;
  gas: SpWeightsWeightV2Weight;
  input: SpWeightsWeightV2Weight;
  inputPerByte: SpWeightsWeightV2Weight;
  rReturn: SpWeightsWeightV2Weight;
  returnPerByte: SpWeightsWeightV2Weight;
  terminate: SpWeightsWeightV2Weight;
  random: SpWeightsWeightV2Weight;
  depositEvent: SpWeightsWeightV2Weight;
  depositEventPerTopic: SpWeightsWeightV2Weight;
  depositEventPerByte: SpWeightsWeightV2Weight;
  debugMessage: SpWeightsWeightV2Weight;
  debugMessagePerByte: SpWeightsWeightV2Weight;
  setStorage: SpWeightsWeightV2Weight;
  setStoragePerNewByte: SpWeightsWeightV2Weight;
  setStoragePerOldByte: SpWeightsWeightV2Weight;
  setCodeHash: SpWeightsWeightV2Weight;
  clearStorage: SpWeightsWeightV2Weight;
  clearStoragePerByte: SpWeightsWeightV2Weight;
  containsStorage: SpWeightsWeightV2Weight;
  containsStoragePerByte: SpWeightsWeightV2Weight;
  getStorage: SpWeightsWeightV2Weight;
  getStoragePerByte: SpWeightsWeightV2Weight;
  takeStorage: SpWeightsWeightV2Weight;
  takeStoragePerByte: SpWeightsWeightV2Weight;
  transfer: SpWeightsWeightV2Weight;
  call: SpWeightsWeightV2Weight;
  delegateCall: SpWeightsWeightV2Weight;
  callTransferSurcharge: SpWeightsWeightV2Weight;
  callPerClonedByte: SpWeightsWeightV2Weight;
  instantiate: SpWeightsWeightV2Weight;
  instantiateTransferSurcharge: SpWeightsWeightV2Weight;
  instantiatePerInputByte: SpWeightsWeightV2Weight;
  instantiatePerSaltByte: SpWeightsWeightV2Weight;
  hashSha2256: SpWeightsWeightV2Weight;
  hashSha2256PerByte: SpWeightsWeightV2Weight;
  hashKeccak256: SpWeightsWeightV2Weight;
  hashKeccak256PerByte: SpWeightsWeightV2Weight;
  hashBlake2256: SpWeightsWeightV2Weight;
  hashBlake2256PerByte: SpWeightsWeightV2Weight;
  hashBlake2128: SpWeightsWeightV2Weight;
  hashBlake2128PerByte: SpWeightsWeightV2Weight;
  ecdsaRecover: SpWeightsWeightV2Weight;
  ecdsaToEthAddress: SpWeightsWeightV2Weight;
  sr25519Verify: SpWeightsWeightV2Weight;
  sr25519VerifyPerByte: SpWeightsWeightV2Weight;
  reentranceCount: SpWeightsWeightV2Weight;
  accountReentranceCount: SpWeightsWeightV2Weight;
  instantiationNonce: SpWeightsWeightV2Weight;
};

/**
 * Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/) of this pallet.
 **/
export type PalletContractsError =
  /**
   * A new schedule must have a greater version than the current one.
   **/
  | 'InvalidScheduleVersion'
  /**
   * Invalid combination of flags supplied to `seal_call` or `seal_delegate_call`.
   **/
  | 'InvalidCallFlags'
  /**
   * The executed contract exhausted its gas limit.
   **/
  | 'OutOfGas'
  /**
   * The output buffer supplied to a contract API call was too small.
   **/
  | 'OutputBufferTooSmall'
  /**
   * Performing the requested transfer failed. Probably because there isn't enough
   * free balance in the sender's account.
   **/
  | 'TransferFailed'
  /**
   * Performing a call was denied because the calling depth reached the limit
   * of what is specified in the schedule.
   **/
  | 'MaxCallDepthReached'
  /**
   * No contract was found at the specified address.
   **/
  | 'ContractNotFound'
  /**
   * The code supplied to `instantiate_with_code` exceeds the limit specified in the
   * current schedule.
   **/
  | 'CodeTooLarge'
  /**
   * No code could be found at the supplied code hash.
   **/
  | 'CodeNotFound'
  /**
   * A buffer outside of sandbox memory was passed to a contract API function.
   **/
  | 'OutOfBounds'
  /**
   * Input passed to a contract API function failed to decode as expected type.
   **/
  | 'DecodingFailed'
  /**
   * Contract trapped during execution.
   **/
  | 'ContractTrapped'
  /**
   * The size defined in `T::MaxValueSize` was exceeded.
   **/
  | 'ValueTooLarge'
  /**
   * Termination of a contract is not allowed while the contract is already
   * on the call stack. Can be triggered by `seal_terminate`.
   **/
  | 'TerminatedWhileReentrant'
  /**
   * `seal_call` forwarded this contracts input. It therefore is no longer available.
   **/
  | 'InputForwarded'
  /**
   * The subject passed to `seal_random` exceeds the limit.
   **/
  | 'RandomSubjectTooLong'
  /**
   * The amount of topics passed to `seal_deposit_events` exceeds the limit.
   **/
  | 'TooManyTopics'
  /**
   * The chain does not provide a chain extension. Calling the chain extension results
   * in this error. Note that this usually shouldn't happen as deploying such contracts
   * is rejected.
   **/
  | 'NoChainExtension'
  /**
   * A contract with the same AccountId already exists.
   **/
  | 'DuplicateContract'
  /**
   * A contract self destructed in its constructor.
   *
   * This can be triggered by a call to `seal_terminate`.
   **/
  | 'TerminatedInConstructor'
  /**
   * A call tried to invoke a contract that is flagged as non-reentrant.
   * The only other cause is that a call from a contract into the runtime tried to call back
   * into `pallet-contracts`. This would make the whole pallet reentrant with regard to
   * contract code execution which is not supported.
   **/
  | 'ReentranceDenied'
  /**
   * Origin doesn't have enough balance to pay the required storage deposits.
   **/
  | 'StorageDepositNotEnoughFunds'
  /**
   * More storage was created than allowed by the storage deposit limit.
   **/
  | 'StorageDepositLimitExhausted'
  /**
   * Code removal was denied because the code is still in use by at least one contract.
   **/
  | 'CodeInUse'
  /**
   * The contract ran to completion but decided to revert its storage changes.
   * Please note that this error is only returned from extrinsics. When called directly
   * or via RPC an `Ok` will be returned. In this case the caller needs to inspect the flags
   * to determine whether a reversion has taken place.
   **/
  | 'ContractReverted'
  /**
   * The contract's code was found to be invalid during validation or instrumentation.
   *
   * The most likely cause of this is that an API was used which is not supported by the
   * node. This happens if an older node is used with a new version of ink!. Try updating
   * your node to the newest available version.
   *
   * A more detailed error can be found on the node console if debug messages are enabled
   * by supplying `-lruntime::contracts=debug`.
   **/
  | 'CodeRejected'
  /**
   * An indetermistic code was used in a context where this is not permitted.
   **/
  | 'Indeterministic'
  /**
   * A pending migration needs to complete before the extrinsic can be called.
   **/
  | 'MigrationInProgress'
  /**
   * Migrate dispatch call was attempted but no migration was performed.
   **/
  | 'NoMigrationPerformed';

/**
 * Error for the Sudo pallet
 **/
export type PalletSudoError =
  /**
   * Sender must be the Sudo account
   **/
  'RequireSudo';

export type FpSelfContainedUncheckedExtrinsic = SpRuntimeUncheckedExtrinsic;

export type SpRuntimeMultiSignature =
  | { tag: 'Ed25519'; value: SpCoreEd25519Signature }
  | { tag: 'Sr25519'; value: SpCoreSr25519Signature }
  | { tag: 'Ecdsa'; value: SpCoreEcdsaSignature };

export type SpCoreEd25519Signature = FixedBytes<64>;

export type SpCoreSr25519Signature = FixedBytes<64>;

export type SpCoreEcdsaSignature = FixedBytes<65>;

export type FrameSystemExtensionsCheckSpecVersion = {};

export type FrameSystemExtensionsCheckTxVersion = {};

export type FrameSystemExtensionsCheckGenesis = {};

export type FrameSystemExtensionsCheckMortality = Era;

export type FrameSystemExtensionsCheckNonce = number;

export type FrameSystemExtensionsCheckWeight = {};

export type PalletTransactionPaymentChargeTransactionPayment = bigint;

export type SpRuntimeUncheckedExtrinsic = Bytes;
