// Generated by @delightfuldot/codegen

import type { GenericChainTx, ISubmittableExtrinsic } from '@delightfuldot/types';
import type {
  Bytes,
  MultiAddressLike,
  AccountId32Like,
  Data,
  H256,
  FixedBytes,
  H160,
  U256,
} from '@delightfuldot/codecs';
import type {
  AstarRuntimeRuntimeCall,
  AstarRuntimeOriginCaller,
  SpWeightsWeightV2Weight,
  PalletIdentityIdentityInfo,
  PalletIdentityBitFlags,
  PalletIdentityJudgement,
  PalletMultisigTimepoint,
  AstarRuntimeProxyType,
  CumulusPrimitivesParachainInherentParachainInherentData,
  PalletVestingVestingInfo,
  AstarRuntimeSmartContract,
  PalletDappsStakingRewardDestination,
  PalletDappsStakingContractStakeInfo,
  PalletBlockRewardsHybridRewardDistributionConfig,
  AstarRuntimeSessionKeys,
  XcmVersionedMultiLocation,
  XcmVersionedXcm,
  XcmVersionedMultiAssets,
  XcmV3MultilocationMultiLocation,
  XcmV3WeightLimit,
  XcmVersionedMultiAsset,
  EthereumTransactionTransactionV2,
  PalletContractsWasmDeterminism,
} from './types';

export interface ChainTx extends GenericChainTx {
  system: {
    /**
     * Make some on-chain remark.
     *
     * - `O(1)`
     *
     * @param remark
     **/
    remark(remark: Bytes): ISubmittableExtrinsic;

    /**
     * Set the number of pages in the WebAssembly environment's heap.
     *
     * @param pages
     **/
    setHeapPages(pages: bigint): ISubmittableExtrinsic;

    /**
     * Set the new runtime code.
     *
     * @param code
     **/
    setCode(code: Bytes): ISubmittableExtrinsic;

    /**
     * Set the new runtime code without doing any checks of the given `code`.
     *
     * @param code
     **/
    setCodeWithoutChecks(code: Bytes): ISubmittableExtrinsic;

    /**
     * Set some items of storage.
     *
     * @param items
     **/
    setStorage(items: Array<[Bytes, Bytes]>): ISubmittableExtrinsic;

    /**
     * Kill some items from storage.
     *
     * @param keys
     **/
    killStorage(keys: Array<Bytes>): ISubmittableExtrinsic;

    /**
     * Kill all storage items with a key that starts with the given prefix.
     *
     * **NOTE:** We rely on the Root origin to provide us the number of subkeys under
     * the prefix we are removing to accurately calculate the weight of this function.
     *
     * @param prefix
     * @param subkeys
     **/
    killPrefix(prefix: Bytes, subkeys: number): ISubmittableExtrinsic;

    /**
     * Make some on-chain remark and emit event.
     *
     * @param remark
     **/
    remarkWithEvent(remark: Bytes): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  utility: {
    /**
     * Send a batch of dispatch calls.
     *
     * May be called from any origin except `None`.
     *
     * - `calls`: The calls to be dispatched from the same origin. The number of call must not
     * exceed the constant: `batched_calls_limit` (available in constant metadata).
     *
     * If origin is root then the calls are dispatched without checking origin filter. (This
     * includes bypassing `frame_system::Config::BaseCallFilter`).
     *
     * ## Complexity
     * - O(C) where C is the number of calls to be batched.
     *
     * This will return `Ok` in all circumstances. To determine the success of the batch, an
     * event is deposited. If a call failed and the batch was interrupted, then the
     * `BatchInterrupted` event is deposited, along with the number of successful calls made
     * and the error of the failed call. If all were successful, then the `BatchCompleted`
     * event is deposited.
     *
     * @param calls
     **/
    batch(calls: Array<AstarRuntimeRuntimeCall>): ISubmittableExtrinsic;

    /**
     * Send a call through an indexed pseudonym of the sender.
     *
     * Filter from origin are passed along. The call will be dispatched with an origin which
     * use the same filter as the origin of this call.
     *
     * NOTE: If you need to ensure that any account-based filtering is not honored (i.e.
     * because you expect `proxy` to have been used prior in the call stack and you do not want
     * the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`
     * in the Multisig pallet instead.
     *
     * NOTE: Prior to version *12, this was called `as_limited_sub`.
     *
     * The dispatch origin for this call must be _Signed_.
     *
     * @param index
     * @param call
     **/
    asDerivative(index: number, call: AstarRuntimeRuntimeCall): ISubmittableExtrinsic;

    /**
     * Send a batch of dispatch calls and atomically execute them.
     * The whole transaction will rollback and fail if any of the calls failed.
     *
     * May be called from any origin except `None`.
     *
     * - `calls`: The calls to be dispatched from the same origin. The number of call must not
     * exceed the constant: `batched_calls_limit` (available in constant metadata).
     *
     * If origin is root then the calls are dispatched without checking origin filter. (This
     * includes bypassing `frame_system::Config::BaseCallFilter`).
     *
     * ## Complexity
     * - O(C) where C is the number of calls to be batched.
     *
     * @param calls
     **/
    batchAll(calls: Array<AstarRuntimeRuntimeCall>): ISubmittableExtrinsic;

    /**
     * Dispatches a function call with a provided origin.
     *
     * The dispatch origin for this call must be _Root_.
     *
     * ## Complexity
     * - O(1).
     *
     * @param asOrigin
     * @param call
     **/
    dispatchAs(asOrigin: AstarRuntimeOriginCaller, call: AstarRuntimeRuntimeCall): ISubmittableExtrinsic;

    /**
     * Send a batch of dispatch calls.
     * Unlike `batch`, it allows errors and won't interrupt.
     *
     * May be called from any origin except `None`.
     *
     * - `calls`: The calls to be dispatched from the same origin. The number of call must not
     * exceed the constant: `batched_calls_limit` (available in constant metadata).
     *
     * If origin is root then the calls are dispatch without checking origin filter. (This
     * includes bypassing `frame_system::Config::BaseCallFilter`).
     *
     * ## Complexity
     * - O(C) where C is the number of calls to be batched.
     *
     * @param calls
     **/
    forceBatch(calls: Array<AstarRuntimeRuntimeCall>): ISubmittableExtrinsic;

    /**
     * Dispatch a function call with a specified weight.
     *
     * This function does not check the weight of the call, and instead allows the
     * Root origin to specify the weight of the call.
     *
     * The dispatch origin for this call must be _Root_.
     *
     * @param call
     * @param weight
     **/
    withWeight(call: AstarRuntimeRuntimeCall, weight: SpWeightsWeightV2Weight): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  identity: {
    /**
     * Add a registrar to the system.
     *
     * The dispatch origin for this call must be `T::RegistrarOrigin`.
     *
     * - `account`: the account of the registrar.
     *
     * Emits `RegistrarAdded` if successful.
     *
     * ## Complexity
     * - `O(R)` where `R` registrar-count (governance-bounded and code-bounded).
     *
     * @param account
     **/
    addRegistrar(account: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * Set an account's identity information and reserve the appropriate deposit.
     *
     * If the account already has identity information, the deposit is taken as part payment
     * for the new deposit.
     *
     * The dispatch origin for this call must be _Signed_.
     *
     * - `info`: The identity information.
     *
     * Emits `IdentitySet` if successful.
     *
     * ## Complexity
     * - `O(X + X' + R)`
     * - where `X` additional-field-count (deposit-bounded and code-bounded)
     * - where `R` judgements-count (registrar-count-bounded)
     *
     * @param info
     **/
    setIdentity(info: PalletIdentityIdentityInfo): ISubmittableExtrinsic;

    /**
     * Set the sub-accounts of the sender.
     *
     * Payment: Any aggregate balance reserved by previous `set_subs` calls will be returned
     * and an amount `SubAccountDeposit` will be reserved for each item in `subs`.
     *
     * The dispatch origin for this call must be _Signed_ and the sender must have a registered
     * identity.
     *
     * - `subs`: The identity's (new) sub-accounts.
     *
     * ## Complexity
     * - `O(P + S)`
     * - where `P` old-subs-count (hard- and deposit-bounded).
     * - where `S` subs-count (hard- and deposit-bounded).
     *
     * @param subs
     **/
    setSubs(subs: Array<[AccountId32Like, Data]>): ISubmittableExtrinsic;

    /**
     * Clear an account's identity info and all sub-accounts and return all deposits.
     *
     * Payment: All reserved balances on the account are returned.
     *
     * The dispatch origin for this call must be _Signed_ and the sender must have a registered
     * identity.
     *
     * Emits `IdentityCleared` if successful.
     *
     * ## Complexity
     * - `O(R + S + X)`
     * - where `R` registrar-count (governance-bounded).
     * - where `S` subs-count (hard- and deposit-bounded).
     * - where `X` additional-field-count (deposit-bounded and code-bounded).
     *
     **/
    clearIdentity(): ISubmittableExtrinsic;

    /**
     * Request a judgement from a registrar.
     *
     * Payment: At most `max_fee` will be reserved for payment to the registrar if judgement
     * given.
     *
     * The dispatch origin for this call must be _Signed_ and the sender must have a
     * registered identity.
     *
     * - `reg_index`: The index of the registrar whose judgement is requested.
     * - `max_fee`: The maximum fee that may be paid. This should just be auto-populated as:
     *
     * ```nocompile
     * Self::registrars().get(reg_index).unwrap().fee
     * ```
     *
     * Emits `JudgementRequested` if successful.
     *
     * ## Complexity
     * - `O(R + X)`.
     * - where `R` registrar-count (governance-bounded).
     * - where `X` additional-field-count (deposit-bounded and code-bounded).
     *
     * @param regIndex
     * @param maxFee
     **/
    requestJudgement(regIndex: number, maxFee: bigint): ISubmittableExtrinsic;

    /**
     * Cancel a previous request.
     *
     * Payment: A previously reserved deposit is returned on success.
     *
     * The dispatch origin for this call must be _Signed_ and the sender must have a
     * registered identity.
     *
     * - `reg_index`: The index of the registrar whose judgement is no longer requested.
     *
     * Emits `JudgementUnrequested` if successful.
     *
     * ## Complexity
     * - `O(R + X)`.
     * - where `R` registrar-count (governance-bounded).
     * - where `X` additional-field-count (deposit-bounded and code-bounded).
     *
     * @param regIndex
     **/
    cancelRequest(regIndex: number): ISubmittableExtrinsic;

    /**
     * Set the fee required for a judgement to be requested from a registrar.
     *
     * The dispatch origin for this call must be _Signed_ and the sender must be the account
     * of the registrar whose index is `index`.
     *
     * - `index`: the index of the registrar whose fee is to be set.
     * - `fee`: the new fee.
     *
     * ## Complexity
     * - `O(R)`.
     * - where `R` registrar-count (governance-bounded).
     *
     * @param index
     * @param fee
     **/
    setFee(index: number, fee: bigint): ISubmittableExtrinsic;

    /**
     * Change the account associated with a registrar.
     *
     * The dispatch origin for this call must be _Signed_ and the sender must be the account
     * of the registrar whose index is `index`.
     *
     * - `index`: the index of the registrar whose fee is to be set.
     * - `new`: the new account ID.
     *
     * ## Complexity
     * - `O(R)`.
     * - where `R` registrar-count (governance-bounded).
     *
     * @param index
     * @param new_
     **/
    setAccountId(index: number, new_: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * Set the field information for a registrar.
     *
     * The dispatch origin for this call must be _Signed_ and the sender must be the account
     * of the registrar whose index is `index`.
     *
     * - `index`: the index of the registrar whose fee is to be set.
     * - `fields`: the fields that the registrar concerns themselves with.
     *
     * ## Complexity
     * - `O(R)`.
     * - where `R` registrar-count (governance-bounded).
     *
     * @param index
     * @param fields
     **/
    setFields(index: number, fields: PalletIdentityBitFlags): ISubmittableExtrinsic;

    /**
     * Provide a judgement for an account's identity.
     *
     * The dispatch origin for this call must be _Signed_ and the sender must be the account
     * of the registrar whose index is `reg_index`.
     *
     * - `reg_index`: the index of the registrar whose judgement is being made.
     * - `target`: the account whose identity the judgement is upon. This must be an account
     * with a registered identity.
     * - `judgement`: the judgement of the registrar of index `reg_index` about `target`.
     * - `identity`: The hash of the [`IdentityInfo`] for that the judgement is provided.
     *
     * Emits `JudgementGiven` if successful.
     *
     * ## Complexity
     * - `O(R + X)`.
     * - where `R` registrar-count (governance-bounded).
     * - where `X` additional-field-count (deposit-bounded and code-bounded).
     *
     * @param regIndex
     * @param target
     * @param judgement
     * @param identity
     **/
    provideJudgement(
      regIndex: number,
      target: MultiAddressLike,
      judgement: PalletIdentityJudgement,
      identity: H256,
    ): ISubmittableExtrinsic;

    /**
     * Remove an account's identity and sub-account information and slash the deposits.
     *
     * Payment: Reserved balances from `set_subs` and `set_identity` are slashed and handled by
     * `Slash`. Verification request deposits are not returned; they should be cancelled
     * manually using `cancel_request`.
     *
     * The dispatch origin for this call must match `T::ForceOrigin`.
     *
     * - `target`: the account whose identity the judgement is upon. This must be an account
     * with a registered identity.
     *
     * Emits `IdentityKilled` if successful.
     *
     * ## Complexity
     * - `O(R + S + X)`
     * - where `R` registrar-count (governance-bounded).
     * - where `S` subs-count (hard- and deposit-bounded).
     * - where `X` additional-field-count (deposit-bounded and code-bounded).
     *
     * @param target
     **/
    killIdentity(target: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * Add the given account to the sender's subs.
     *
     * Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated
     * to the sender.
     *
     * The dispatch origin for this call must be _Signed_ and the sender must have a registered
     * sub identity of `sub`.
     *
     * @param sub
     * @param data
     **/
    addSub(sub: MultiAddressLike, data: Data): ISubmittableExtrinsic;

    /**
     * Alter the associated name of the given sub-account.
     *
     * The dispatch origin for this call must be _Signed_ and the sender must have a registered
     * sub identity of `sub`.
     *
     * @param sub
     * @param data
     **/
    renameSub(sub: MultiAddressLike, data: Data): ISubmittableExtrinsic;

    /**
     * Remove the given account from the sender's subs.
     *
     * Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated
     * to the sender.
     *
     * The dispatch origin for this call must be _Signed_ and the sender must have a registered
     * sub identity of `sub`.
     *
     * @param sub
     **/
    removeSub(sub: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * Remove the sender as a sub-account.
     *
     * Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated
     * to the sender (*not* the original depositor).
     *
     * The dispatch origin for this call must be _Signed_ and the sender must have a registered
     * super-identity.
     *
     * NOTE: This should not normally be used, but is provided in the case that the non-
     * controller of an account is maliciously registered as a sub-account.
     *
     **/
    quitSub(): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  timestamp: {
    /**
     * Set the current time.
     *
     * This call should be invoked exactly once per block. It will panic at the finalization
     * phase, if this call hasn't been invoked by that time.
     *
     * The timestamp should be greater than the previous one by the amount specified by
     * `MinimumPeriod`.
     *
     * The dispatch origin for this call must be `Inherent`.
     *
     * ## Complexity
     * - `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)
     * - 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in
     * `on_finalize`)
     * - 1 event handler `on_timestamp_set`. Must be `O(1)`.
     *
     * @param now
     **/
    set(now: bigint): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  multisig: {
    /**
     * Immediately dispatch a multi-signature call using a single approval from the caller.
     *
     * The dispatch origin for this call must be _Signed_.
     *
     * - `other_signatories`: The accounts (other than the sender) who are part of the
     * multi-signature, but do not participate in the approval process.
     * - `call`: The call to be executed.
     *
     * Result is equivalent to the dispatched result.
     *
     * ## Complexity
     * O(Z + C) where Z is the length of the call and C its execution weight.
     *
     * @param otherSignatories
     * @param call
     **/
    asMultiThreshold1(otherSignatories: Array<AccountId32Like>, call: AstarRuntimeRuntimeCall): ISubmittableExtrinsic;

    /**
     * Register approval for a dispatch to be made from a deterministic composite account if
     * approved by a total of `threshold - 1` of `other_signatories`.
     *
     * If there are enough, then dispatch the call.
     *
     * Payment: `DepositBase` will be reserved if this is the first approval, plus
     * `threshold` times `DepositFactor`. It is returned once this dispatch happens or
     * is cancelled.
     *
     * The dispatch origin for this call must be _Signed_.
     *
     * - `threshold`: The total number of approvals for this dispatch before it is executed.
     * - `other_signatories`: The accounts (other than the sender) who can approve this
     * dispatch. May not be empty.
     * - `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is
     * not the first approval, then it must be `Some`, with the timepoint (block number and
     * transaction index) of the first approval transaction.
     * - `call`: The call to be executed.
     *
     * NOTE: Unless this is the final approval, you will generally want to use
     * `approve_as_multi` instead, since it only requires a hash of the call.
     *
     * Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise
     * on success, result is `Ok` and the result from the interior call, if it was executed,
     * may be found in the deposited `MultisigExecuted` event.
     *
     * ## Complexity
     * - `O(S + Z + Call)`.
     * - Up to one balance-reserve or unreserve operation.
     * - One passthrough operation, one insert, both `O(S)` where `S` is the number of
     * signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
     * - One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.
     * - One encode & hash, both of complexity `O(S)`.
     * - Up to one binary search and insert (`O(logS + S)`).
     * - I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.
     * - One event.
     * - The weight of the `call`.
     * - Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit
     * taken for its lifetime of `DepositBase + threshold * DepositFactor`.
     *
     * @param threshold
     * @param otherSignatories
     * @param maybeTimepoint
     * @param call
     * @param maxWeight
     **/
    asMulti(
      threshold: number,
      otherSignatories: Array<AccountId32Like>,
      maybeTimepoint: PalletMultisigTimepoint | undefined,
      call: AstarRuntimeRuntimeCall,
      maxWeight: SpWeightsWeightV2Weight,
    ): ISubmittableExtrinsic;

    /**
     * Register approval for a dispatch to be made from a deterministic composite account if
     * approved by a total of `threshold - 1` of `other_signatories`.
     *
     * Payment: `DepositBase` will be reserved if this is the first approval, plus
     * `threshold` times `DepositFactor`. It is returned once this dispatch happens or
     * is cancelled.
     *
     * The dispatch origin for this call must be _Signed_.
     *
     * - `threshold`: The total number of approvals for this dispatch before it is executed.
     * - `other_signatories`: The accounts (other than the sender) who can approve this
     * dispatch. May not be empty.
     * - `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is
     * not the first approval, then it must be `Some`, with the timepoint (block number and
     * transaction index) of the first approval transaction.
     * - `call_hash`: The hash of the call to be executed.
     *
     * NOTE: If this is the final approval, you will want to use `as_multi` instead.
     *
     * ## Complexity
     * - `O(S)`.
     * - Up to one balance-reserve or unreserve operation.
     * - One passthrough operation, one insert, both `O(S)` where `S` is the number of
     * signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
     * - One encode & hash, both of complexity `O(S)`.
     * - Up to one binary search and insert (`O(logS + S)`).
     * - I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.
     * - One event.
     * - Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit
     * taken for its lifetime of `DepositBase + threshold * DepositFactor`.
     *
     * @param threshold
     * @param otherSignatories
     * @param maybeTimepoint
     * @param callHash
     * @param maxWeight
     **/
    approveAsMulti(
      threshold: number,
      otherSignatories: Array<AccountId32Like>,
      maybeTimepoint: PalletMultisigTimepoint | undefined,
      callHash: FixedBytes<32>,
      maxWeight: SpWeightsWeightV2Weight,
    ): ISubmittableExtrinsic;

    /**
     * Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously
     * for this operation will be unreserved on success.
     *
     * The dispatch origin for this call must be _Signed_.
     *
     * - `threshold`: The total number of approvals for this dispatch before it is executed.
     * - `other_signatories`: The accounts (other than the sender) who can approve this
     * dispatch. May not be empty.
     * - `timepoint`: The timepoint (block number and transaction index) of the first approval
     * transaction for this dispatch.
     * - `call_hash`: The hash of the call to be executed.
     *
     * ## Complexity
     * - `O(S)`.
     * - Up to one balance-reserve or unreserve operation.
     * - One passthrough operation, one insert, both `O(S)` where `S` is the number of
     * signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
     * - One encode & hash, both of complexity `O(S)`.
     * - One event.
     * - I/O: 1 read `O(S)`, one remove.
     * - Storage: removes one item.
     *
     * @param threshold
     * @param otherSignatories
     * @param timepoint
     * @param callHash
     **/
    cancelAsMulti(
      threshold: number,
      otherSignatories: Array<AccountId32Like>,
      timepoint: PalletMultisigTimepoint,
      callHash: FixedBytes<32>,
    ): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  proxy: {
    /**
     * Dispatch the given `call` from an account that the sender is authorised for through
     * `add_proxy`.
     *
     * The dispatch origin for this call must be _Signed_.
     *
     * Parameters:
     * - `real`: The account that the proxy will make a call on behalf of.
     * - `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.
     * - `call`: The call to be made by the `real` account.
     *
     * @param real
     * @param forceProxyType
     * @param call
     **/
    proxy(
      real: MultiAddressLike,
      forceProxyType: AstarRuntimeProxyType | undefined,
      call: AstarRuntimeRuntimeCall,
    ): ISubmittableExtrinsic;

    /**
     * Register a proxy account for the sender that is able to make calls on its behalf.
     *
     * The dispatch origin for this call must be _Signed_.
     *
     * Parameters:
     * - `proxy`: The account that the `caller` would like to make a proxy.
     * - `proxy_type`: The permissions allowed for this proxy account.
     * - `delay`: The announcement period required of the initial proxy. Will generally be
     * zero.
     *
     * @param delegate
     * @param proxyType
     * @param delay
     **/
    addProxy(delegate: MultiAddressLike, proxyType: AstarRuntimeProxyType, delay: number): ISubmittableExtrinsic;

    /**
     * Unregister a proxy account for the sender.
     *
     * The dispatch origin for this call must be _Signed_.
     *
     * Parameters:
     * - `proxy`: The account that the `caller` would like to remove as a proxy.
     * - `proxy_type`: The permissions currently enabled for the removed proxy account.
     *
     * @param delegate
     * @param proxyType
     * @param delay
     **/
    removeProxy(delegate: MultiAddressLike, proxyType: AstarRuntimeProxyType, delay: number): ISubmittableExtrinsic;

    /**
     * Unregister all proxy accounts for the sender.
     *
     * The dispatch origin for this call must be _Signed_.
     *
     * WARNING: This may be called on accounts created by `pure`, however if done, then
     * the unreserved fees will be inaccessible. **All access to this account will be lost.**
     *
     **/
    removeProxies(): ISubmittableExtrinsic;

    /**
     * Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and
     * initialize it with a proxy of `proxy_type` for `origin` sender.
     *
     * Requires a `Signed` origin.
     *
     * - `proxy_type`: The type of the proxy that the sender will be registered as over the
     * new account. This will almost always be the most permissive `ProxyType` possible to
     * allow for maximum flexibility.
     * - `index`: A disambiguation index, in case this is called multiple times in the same
     * transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just
     * want to use `0`.
     * - `delay`: The announcement period required of the initial proxy. Will generally be
     * zero.
     *
     * Fails with `Duplicate` if this has already been called in this transaction, from the
     * same sender, with the same parameters.
     *
     * Fails if there are insufficient funds to pay for deposit.
     *
     * @param proxyType
     * @param delay
     * @param index
     **/
    createPure(proxyType: AstarRuntimeProxyType, delay: number, index: number): ISubmittableExtrinsic;

    /**
     * Removes a previously spawned pure proxy.
     *
     * WARNING: **All access to this account will be lost.** Any funds held in it will be
     * inaccessible.
     *
     * Requires a `Signed` origin, and the sender account must have been created by a call to
     * `pure` with corresponding parameters.
     *
     * - `spawner`: The account that originally called `pure` to create this account.
     * - `index`: The disambiguation index originally passed to `pure`. Probably `0`.
     * - `proxy_type`: The proxy type originally passed to `pure`.
     * - `height`: The height of the chain when the call to `pure` was processed.
     * - `ext_index`: The extrinsic index in which the call to `pure` was processed.
     *
     * Fails with `NoPermission` in case the caller is not a previously created pure
     * account whose `pure` call has corresponding parameters.
     *
     * @param spawner
     * @param proxyType
     * @param index
     * @param height
     * @param extIndex
     **/
    killPure(
      spawner: MultiAddressLike,
      proxyType: AstarRuntimeProxyType,
      index: number,
      height: number,
      extIndex: number,
    ): ISubmittableExtrinsic;

    /**
     * Publish the hash of a proxy-call that will be made in the future.
     *
     * This must be called some number of blocks before the corresponding `proxy` is attempted
     * if the delay associated with the proxy relationship is greater than zero.
     *
     * No more than `MaxPending` announcements may be made at any one time.
     *
     * This will take a deposit of `AnnouncementDepositFactor` as well as
     * `AnnouncementDepositBase` if there are no other pending announcements.
     *
     * The dispatch origin for this call must be _Signed_ and a proxy of `real`.
     *
     * Parameters:
     * - `real`: The account that the proxy will make a call on behalf of.
     * - `call_hash`: The hash of the call to be made by the `real` account.
     *
     * @param real
     * @param callHash
     **/
    announce(real: MultiAddressLike, callHash: H256): ISubmittableExtrinsic;

    /**
     * Remove a given announcement.
     *
     * May be called by a proxy account to remove a call they previously announced and return
     * the deposit.
     *
     * The dispatch origin for this call must be _Signed_.
     *
     * Parameters:
     * - `real`: The account that the proxy will make a call on behalf of.
     * - `call_hash`: The hash of the call to be made by the `real` account.
     *
     * @param real
     * @param callHash
     **/
    removeAnnouncement(real: MultiAddressLike, callHash: H256): ISubmittableExtrinsic;

    /**
     * Remove the given announcement of a delegate.
     *
     * May be called by a target (proxied) account to remove a call that one of their delegates
     * (`delegate`) has announced they want to execute. The deposit is returned.
     *
     * The dispatch origin for this call must be _Signed_.
     *
     * Parameters:
     * - `delegate`: The account that previously announced the call.
     * - `call_hash`: The hash of the call to be made.
     *
     * @param delegate
     * @param callHash
     **/
    rejectAnnouncement(delegate: MultiAddressLike, callHash: H256): ISubmittableExtrinsic;

    /**
     * Dispatch the given `call` from an account that the sender is authorized for through
     * `add_proxy`.
     *
     * Removes any corresponding announcement(s).
     *
     * The dispatch origin for this call must be _Signed_.
     *
     * Parameters:
     * - `real`: The account that the proxy will make a call on behalf of.
     * - `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.
     * - `call`: The call to be made by the `real` account.
     *
     * @param delegate
     * @param real
     * @param forceProxyType
     * @param call
     **/
    proxyAnnounced(
      delegate: MultiAddressLike,
      real: MultiAddressLike,
      forceProxyType: AstarRuntimeProxyType | undefined,
      call: AstarRuntimeRuntimeCall,
    ): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  parachainSystem: {
    /**
     * Set the current validation data.
     *
     * This should be invoked exactly once per block. It will panic at the finalization
     * phase if the call was not invoked.
     *
     * The dispatch origin for this call must be `Inherent`
     *
     * As a side effect, this function upgrades the current validation function
     * if the appropriate time has come.
     *
     * @param data
     **/
    setValidationData(data: CumulusPrimitivesParachainInherentParachainInherentData): ISubmittableExtrinsic;

    /**
     *
     * @param message
     **/
    sudoSendUpwardMessage(message: Bytes): ISubmittableExtrinsic;

    /**
     * Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied
     * later.
     *
     * The `check_version` parameter sets a boolean flag for whether or not the runtime's spec
     * version and name should be verified on upgrade. Since the authorization only has a hash,
     * it cannot actually perform the verification.
     *
     * This call requires Root origin.
     *
     * @param codeHash
     * @param checkVersion
     **/
    authorizeUpgrade(codeHash: H256, checkVersion: boolean): ISubmittableExtrinsic;

    /**
     * Provide the preimage (runtime binary) `code` for an upgrade that has been authorized.
     *
     * If the authorization required a version check, this call will ensure the spec name
     * remains unchanged and that the spec version has increased.
     *
     * Note that this function will not apply the new `code`, but only attempt to schedule the
     * upgrade with the Relay Chain.
     *
     * All origins are allowed.
     *
     * @param code
     **/
    enactAuthorizedUpgrade(code: Bytes): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  parachainInfo: {
    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  balances: {
    /**
     * Transfer some liquid free balance to another account.
     *
     * `transfer_allow_death` will set the `FreeBalance` of the sender and receiver.
     * If the sender's account is below the existential deposit as a result
     * of the transfer, the account will be reaped.
     *
     * The dispatch origin for this call must be `Signed` by the transactor.
     *
     * @param dest
     * @param value
     **/
    transferAllowDeath(dest: MultiAddressLike, value: bigint): ISubmittableExtrinsic;

    /**
     * Set the regular balance of a given account; it also takes a reserved balance but this
     * must be the same as the account's current reserved balance.
     *
     * The dispatch origin for this call is `root`.
     *
     * WARNING: This call is DEPRECATED! Use `force_set_balance` instead.
     *
     * @param who
     * @param newFree
     * @param oldReserved
     **/
    setBalanceDeprecated(who: MultiAddressLike, newFree: bigint, oldReserved: bigint): ISubmittableExtrinsic;

    /**
     * Exactly as `transfer_allow_death`, except the origin must be root and the source account
     * may be specified.
     *
     * @param source
     * @param dest
     * @param value
     **/
    forceTransfer(source: MultiAddressLike, dest: MultiAddressLike, value: bigint): ISubmittableExtrinsic;

    /**
     * Same as the [`transfer_allow_death`] call, but with a check that the transfer will not
     * kill the origin account.
     *
     * 99% of the time you want [`transfer_allow_death`] instead.
     *
     * [`transfer_allow_death`]: struct.Pallet.html#method.transfer
     *
     * @param dest
     * @param value
     **/
    transferKeepAlive(dest: MultiAddressLike, value: bigint): ISubmittableExtrinsic;

    /**
     * Transfer the entire transferable balance from the caller account.
     *
     * NOTE: This function only attempts to transfer _transferable_ balances. This means that
     * any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be
     * transferred by this function. To ensure that this function results in a killed account,
     * you might need to prepare the account by removing any reference counters, storage
     * deposits, etc...
     *
     * The dispatch origin of this call must be Signed.
     *
     * - `dest`: The recipient of the transfer.
     * - `keep_alive`: A boolean to determine if the `transfer_all` operation should send all
     * of the funds the account has, causing the sender account to be killed (false), or
     * transfer everything except at least the existential deposit, which will guarantee to
     * keep the sender account alive (true).
     *
     * @param dest
     * @param keepAlive
     **/
    transferAll(dest: MultiAddressLike, keepAlive: boolean): ISubmittableExtrinsic;

    /**
     * Unreserve some balance from a user by force.
     *
     * Can only be called by ROOT.
     *
     * @param who
     * @param amount
     **/
    forceUnreserve(who: MultiAddressLike, amount: bigint): ISubmittableExtrinsic;

    /**
     * Upgrade a specified account.
     *
     * - `origin`: Must be `Signed`.
     * - `who`: The account to be upgraded.
     *
     * This will waive the transaction fee if at least all but 10% of the accounts needed to
     * be upgraded. (We let some not have to be upgraded just in order to allow for the
     * possibililty of churn).
     *
     * @param who
     **/
    upgradeAccounts(who: Array<AccountId32Like>): ISubmittableExtrinsic;

    /**
     * Alias for `transfer_allow_death`, provided only for name-wise compatibility.
     *
     * WARNING: DEPRECATED! Will be released in approximately 3 months.
     *
     * @param dest
     * @param value
     **/
    transfer(dest: MultiAddressLike, value: bigint): ISubmittableExtrinsic;

    /**
     * Set the regular balance of a given account.
     *
     * The dispatch origin for this call is `root`.
     *
     * @param who
     * @param newFree
     **/
    forceSetBalance(who: MultiAddressLike, newFree: bigint): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  vesting: {
    /**
     * Unlock any vested funds of the sender account.
     *
     * The dispatch origin for this call must be _Signed_ and the sender must have funds still
     * locked under this pallet.
     *
     * Emits either `VestingCompleted` or `VestingUpdated`.
     *
     * ## Complexity
     * - `O(1)`.
     *
     **/
    vest(): ISubmittableExtrinsic;

    /**
     * Unlock any vested funds of a `target` account.
     *
     * The dispatch origin for this call must be _Signed_.
     *
     * - `target`: The account whose vested funds should be unlocked. Must have funds still
     * locked under this pallet.
     *
     * Emits either `VestingCompleted` or `VestingUpdated`.
     *
     * ## Complexity
     * - `O(1)`.
     *
     * @param target
     **/
    vestOther(target: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * Create a vested transfer.
     *
     * The dispatch origin for this call must be _Signed_.
     *
     * - `target`: The account receiving the vested funds.
     * - `schedule`: The vesting schedule attached to the transfer.
     *
     * Emits `VestingCreated`.
     *
     * NOTE: This will unlock all schedules through the current block.
     *
     * ## Complexity
     * - `O(1)`.
     *
     * @param target
     * @param schedule
     **/
    vestedTransfer(target: MultiAddressLike, schedule: PalletVestingVestingInfo): ISubmittableExtrinsic;

    /**
     * Force a vested transfer.
     *
     * The dispatch origin for this call must be _Root_.
     *
     * - `source`: The account whose funds should be transferred.
     * - `target`: The account that should be transferred the vested funds.
     * - `schedule`: The vesting schedule attached to the transfer.
     *
     * Emits `VestingCreated`.
     *
     * NOTE: This will unlock all schedules through the current block.
     *
     * ## Complexity
     * - `O(1)`.
     *
     * @param source
     * @param target
     * @param schedule
     **/
    forceVestedTransfer(
      source: MultiAddressLike,
      target: MultiAddressLike,
      schedule: PalletVestingVestingInfo,
    ): ISubmittableExtrinsic;

    /**
     * Merge two vesting schedules together, creating a new vesting schedule that unlocks over
     * the highest possible start and end blocks. If both schedules have already started the
     * current block will be used as the schedule start; with the caveat that if one schedule
     * is finished by the current block, the other will be treated as the new merged schedule,
     * unmodified.
     *
     * NOTE: If `schedule1_index == schedule2_index` this is a no-op.
     * NOTE: This will unlock all schedules through the current block prior to merging.
     * NOTE: If both schedules have ended by the current block, no new schedule will be created
     * and both will be removed.
     *
     * Merged schedule attributes:
     * - `starting_block`: `MAX(schedule1.starting_block, scheduled2.starting_block,
     * current_block)`.
     * - `ending_block`: `MAX(schedule1.ending_block, schedule2.ending_block)`.
     * - `locked`: `schedule1.locked_at(current_block) + schedule2.locked_at(current_block)`.
     *
     * The dispatch origin for this call must be _Signed_.
     *
     * - `schedule1_index`: index of the first schedule to merge.
     * - `schedule2_index`: index of the second schedule to merge.
     *
     * @param schedule1Index
     * @param schedule2Index
     **/
    mergeSchedules(schedule1Index: number, schedule2Index: number): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  dappsStaking: {
    /**
     * Used to register contract for dapps staking.
     * The origin account used is treated as the `developer` account.
     *
     * Depending on the pallet configuration/state it is possible that developer needs to be whitelisted prior to registration.
     *
     * As part of this call, `RegisterDeposit` will be reserved from devs account.
     *
     * @param developer
     * @param contractId
     **/
    register(developer: AccountId32Like, contractId: AstarRuntimeSmartContract): ISubmittableExtrinsic;

    /**
     * Unregister existing contract from dapps staking, making it ineligible for rewards from current era onwards.
     * This must be called by the root (at the moment).
     *
     * Deposit is returned to the developer but existing stakers should manually call `withdraw_from_unregistered` if they wish to to unstake.
     *
     * **Warning**: After this action ,contract can not be registered for dapps staking again.
     *
     * @param contractId
     **/
    unregister(contractId: AstarRuntimeSmartContract): ISubmittableExtrinsic;

    /**
     * Withdraw locked funds from a contract that was unregistered.
     *
     * Funds don't need to undergo the unbonding period - they are returned immediately to the staker's free balance.
     *
     * @param contractId
     **/
    withdrawFromUnregistered(contractId: AstarRuntimeSmartContract): ISubmittableExtrinsic;

    /**
     * Lock up and stake balance of the origin account.
     *
     * `value` must be more than the `minimum_balance` specified by `MinimumStakingAmount`
     * unless account already has bonded value equal or more than 'minimum_balance'.
     *
     * The dispatch origin for this call must be _Signed_ by the staker's account.
     *
     * @param contractId
     * @param value
     **/
    bondAndStake(contractId: AstarRuntimeSmartContract, value: bigint): ISubmittableExtrinsic;

    /**
     * Start unbonding process and unstake balance from the contract.
     *
     * The unstaked amount will no longer be eligible for rewards but still won't be unlocked.
     * User needs to wait for the unbonding period to finish before being able to withdraw
     * the funds via `withdraw_unbonded` call.
     *
     * In case remaining staked balance on contract is below minimum staking amount,
     * entire stake for that contract will be unstaked.
     *
     * @param contractId
     * @param value
     **/
    unbondAndUnstake(contractId: AstarRuntimeSmartContract, value: bigint): ISubmittableExtrinsic;

    /**
     * Withdraw all funds that have completed the unbonding process.
     *
     * If there are unbonding chunks which will be fully unbonded in future eras,
     * they will remain and can be withdrawn later.
     *
     **/
    withdrawUnbonded(): ISubmittableExtrinsic;

    /**
     * Transfer nomination from one contract to another.
     *
     * Same rules as for `bond_and_stake` and `unbond_and_unstake` apply.
     * Minor difference is that there is no unbonding period so this call won't
     * check whether max number of unbonding chunks is exceeded.
     *
     *
     * @param originContractId
     * @param value
     * @param targetContractId
     **/
    nominationTransfer(
      originContractId: AstarRuntimeSmartContract,
      value: bigint,
      targetContractId: AstarRuntimeSmartContract,
    ): ISubmittableExtrinsic;

    /**
     * Claim earned staker rewards for the oldest unclaimed era.
     * In order to claim multiple eras, this call has to be called multiple times.
     *
     * The rewards are always added to the staker's free balance (account) but depending on the reward destination configuration,
     * they might be immediately re-staked.
     *
     * @param contractId
     **/
    claimStaker(contractId: AstarRuntimeSmartContract): ISubmittableExtrinsic;

    /**
     * Claim earned dapp rewards for the specified era.
     *
     * Call must ensure that the specified era is eligible for reward payout and that it hasn't already been paid out for the dapp.
     *
     * @param contractId
     * @param era
     **/
    claimDapp(contractId: AstarRuntimeSmartContract, era: number): ISubmittableExtrinsic;

    /**
     * Force a new era at the start of the next block.
     *
     * The dispatch origin must be Root.
     *
     **/
    forceNewEra(): ISubmittableExtrinsic;

    /**
     * `true` will disable pallet, enabling maintenance mode. `false` will do the opposite.
     *
     * The dispatch origin must be Root.
     *
     * @param enableMaintenance
     **/
    maintenanceMode(enableMaintenance: boolean): ISubmittableExtrinsic;

    /**
     * Used to set reward destination for staker rewards.
     *
     * User must be an active staker in order to use this call.
     * This will apply to all existing unclaimed rewards.
     *
     * @param rewardDestination
     **/
    setRewardDestination(rewardDestination: PalletDappsStakingRewardDestination): ISubmittableExtrinsic;

    /**
     * Used to force set `ContractEraStake` storage values.
     * The purpose of this call is only for fixing one of the issues detected with dapps-staking.
     *
     * The dispatch origin must be Root.
     *
     * @param contract
     * @param era
     * @param contractStakeInfo
     **/
    setContractStakeInfo(
      contract: AstarRuntimeSmartContract,
      era: number,
      contractStakeInfo: PalletDappsStakingContractStakeInfo,
    ): ISubmittableExtrinsic;

    /**
     * Used to burn unclaimed & stale rewards from an unregistered contract.
     *
     * @param contractId
     * @param era
     **/
    burnStaleReward(contractId: AstarRuntimeSmartContract, era: number): ISubmittableExtrinsic;

    /**
     * Claim earned staker rewards for the given staker, and the oldest unclaimed era.
     * In order to claim multiple eras, this call has to be called multiple times.
     *
     * This call can only be used during the pallet decommission process.
     *
     * @param staker
     * @param contractId
     **/
    claimStakerFor(staker: AccountId32Like, contractId: AstarRuntimeSmartContract): ISubmittableExtrinsic;

    /**
     * Used to set reward destination for staker rewards, for the given staker
     *
     *
     * @param staker
     * @param rewardDestination
     **/
    setRewardDestinationFor(
      staker: AccountId32Like,
      rewardDestination: PalletDappsStakingRewardDestination,
    ): ISubmittableExtrinsic;

    /**
     * Enable the `decommission` flag for the pallet.
     *
     * The dispatch origin must be Root.
     *
     **/
    decommission(): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  blockReward: {
    /**
     * Sets the reward distribution configuration parameters which will be used from next block reward distribution.
     *
     * It is mandatory that all components of configuration sum up to one whole (**100%**),
     * otherwise an error `InvalidDistributionConfiguration` will be raised.
     *
     * - `reward_distro_params` - reward distribution params
     *
     * Emits `DistributionConfigurationChanged` with config embeded into event itself.
     *
     *
     * @param rewardDistroParams
     **/
    setConfiguration(rewardDistroParams: PalletBlockRewardsHybridRewardDistributionConfig): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  assets: {
    /**
     * Issue a new class of fungible assets from a public origin.
     *
     * This new asset class has no assets initially and its owner is the origin.
     *
     * The origin must conform to the configured `CreateOrigin` and have sufficient funds free.
     *
     * Funds of sender are reserved by `AssetDeposit`.
     *
     * Parameters:
     * - `id`: The identifier of the new asset. This must not be currently in use to identify
     * an existing asset.
     * - `admin`: The admin of this class of assets. The admin is the initial address of each
     * member of the asset class's admin team.
     * - `min_balance`: The minimum balance of this new asset that any single account must
     * have. If an account's balance is reduced below this, then it collapses to zero.
     *
     * Emits `Created` event when successful.
     *
     * Weight: `O(1)`
     *
     * @param id
     * @param admin
     * @param minBalance
     **/
    create(id: bigint, admin: MultiAddressLike, minBalance: bigint): ISubmittableExtrinsic;

    /**
     * Issue a new class of fungible assets from a privileged origin.
     *
     * This new asset class has no assets initially.
     *
     * The origin must conform to `ForceOrigin`.
     *
     * Unlike `create`, no funds are reserved.
     *
     * - `id`: The identifier of the new asset. This must not be currently in use to identify
     * an existing asset.
     * - `owner`: The owner of this class of assets. The owner has full superuser permissions
     * over this asset, but may later change and configure the permissions using
     * `transfer_ownership` and `set_team`.
     * - `min_balance`: The minimum balance of this new asset that any single account must
     * have. If an account's balance is reduced below this, then it collapses to zero.
     *
     * Emits `ForceCreated` event when successful.
     *
     * Weight: `O(1)`
     *
     * @param id
     * @param owner
     * @param isSufficient
     * @param minBalance
     **/
    forceCreate(id: bigint, owner: MultiAddressLike, isSufficient: boolean, minBalance: bigint): ISubmittableExtrinsic;

    /**
     * Start the process of destroying a fungible asset class.
     *
     * `start_destroy` is the first in a series of extrinsics that should be called, to allow
     * destruction of an asset class.
     *
     * The origin must conform to `ForceOrigin` or must be `Signed` by the asset's `owner`.
     *
     * - `id`: The identifier of the asset to be destroyed. This must identify an existing
     * asset.
     *
     * The asset class must be frozen before calling `start_destroy`.
     *
     * @param id
     **/
    startDestroy(id: bigint): ISubmittableExtrinsic;

    /**
     * Destroy all accounts associated with a given asset.
     *
     * `destroy_accounts` should only be called after `start_destroy` has been called, and the
     * asset is in a `Destroying` state.
     *
     * Due to weight restrictions, this function may need to be called multiple times to fully
     * destroy all accounts. It will destroy `RemoveItemsLimit` accounts at a time.
     *
     * - `id`: The identifier of the asset to be destroyed. This must identify an existing
     * asset.
     *
     * Each call emits the `Event::DestroyedAccounts` event.
     *
     * @param id
     **/
    destroyAccounts(id: bigint): ISubmittableExtrinsic;

    /**
     * Destroy all approvals associated with a given asset up to the max (T::RemoveItemsLimit).
     *
     * `destroy_approvals` should only be called after `start_destroy` has been called, and the
     * asset is in a `Destroying` state.
     *
     * Due to weight restrictions, this function may need to be called multiple times to fully
     * destroy all approvals. It will destroy `RemoveItemsLimit` approvals at a time.
     *
     * - `id`: The identifier of the asset to be destroyed. This must identify an existing
     * asset.
     *
     * Each call emits the `Event::DestroyedApprovals` event.
     *
     * @param id
     **/
    destroyApprovals(id: bigint): ISubmittableExtrinsic;

    /**
     * Complete destroying asset and unreserve currency.
     *
     * `finish_destroy` should only be called after `start_destroy` has been called, and the
     * asset is in a `Destroying` state. All accounts or approvals should be destroyed before
     * hand.
     *
     * - `id`: The identifier of the asset to be destroyed. This must identify an existing
     * asset.
     *
     * Each successful call emits the `Event::Destroyed` event.
     *
     * @param id
     **/
    finishDestroy(id: bigint): ISubmittableExtrinsic;

    /**
     * Mint assets of a particular class.
     *
     * The origin must be Signed and the sender must be the Issuer of the asset `id`.
     *
     * - `id`: The identifier of the asset to have some amount minted.
     * - `beneficiary`: The account to be credited with the minted assets.
     * - `amount`: The amount of the asset to be minted.
     *
     * Emits `Issued` event when successful.
     *
     * Weight: `O(1)`
     * Modes: Pre-existing balance of `beneficiary`; Account pre-existence of `beneficiary`.
     *
     * @param id
     * @param beneficiary
     * @param amount
     **/
    mint(id: bigint, beneficiary: MultiAddressLike, amount: bigint): ISubmittableExtrinsic;

    /**
     * Reduce the balance of `who` by as much as possible up to `amount` assets of `id`.
     *
     * Origin must be Signed and the sender should be the Manager of the asset `id`.
     *
     * Bails with `NoAccount` if the `who` is already dead.
     *
     * - `id`: The identifier of the asset to have some amount burned.
     * - `who`: The account to be debited from.
     * - `amount`: The maximum amount by which `who`'s balance should be reduced.
     *
     * Emits `Burned` with the actual amount burned. If this takes the balance to below the
     * minimum for the asset, then the amount burned is increased to take it to zero.
     *
     * Weight: `O(1)`
     * Modes: Post-existence of `who`; Pre & post Zombie-status of `who`.
     *
     * @param id
     * @param who
     * @param amount
     **/
    burn(id: bigint, who: MultiAddressLike, amount: bigint): ISubmittableExtrinsic;

    /**
     * Move some assets from the sender account to another.
     *
     * Origin must be Signed.
     *
     * - `id`: The identifier of the asset to have some amount transferred.
     * - `target`: The account to be credited.
     * - `amount`: The amount by which the sender's balance of assets should be reduced and
     * `target`'s balance increased. The amount actually transferred may be slightly greater in
     * the case that the transfer would otherwise take the sender balance above zero but below
     * the minimum balance. Must be greater than zero.
     *
     * Emits `Transferred` with the actual amount transferred. If this takes the source balance
     * to below the minimum for the asset, then the amount transferred is increased to take it
     * to zero.
     *
     * Weight: `O(1)`
     * Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of
     * `target`.
     *
     * @param id
     * @param target
     * @param amount
     **/
    transfer(id: bigint, target: MultiAddressLike, amount: bigint): ISubmittableExtrinsic;

    /**
     * Move some assets from the sender account to another, keeping the sender account alive.
     *
     * Origin must be Signed.
     *
     * - `id`: The identifier of the asset to have some amount transferred.
     * - `target`: The account to be credited.
     * - `amount`: The amount by which the sender's balance of assets should be reduced and
     * `target`'s balance increased. The amount actually transferred may be slightly greater in
     * the case that the transfer would otherwise take the sender balance above zero but below
     * the minimum balance. Must be greater than zero.
     *
     * Emits `Transferred` with the actual amount transferred. If this takes the source balance
     * to below the minimum for the asset, then the amount transferred is increased to take it
     * to zero.
     *
     * Weight: `O(1)`
     * Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of
     * `target`.
     *
     * @param id
     * @param target
     * @param amount
     **/
    transferKeepAlive(id: bigint, target: MultiAddressLike, amount: bigint): ISubmittableExtrinsic;

    /**
     * Move some assets from one account to another.
     *
     * Origin must be Signed and the sender should be the Admin of the asset `id`.
     *
     * - `id`: The identifier of the asset to have some amount transferred.
     * - `source`: The account to be debited.
     * - `dest`: The account to be credited.
     * - `amount`: The amount by which the `source`'s balance of assets should be reduced and
     * `dest`'s balance increased. The amount actually transferred may be slightly greater in
     * the case that the transfer would otherwise take the `source` balance above zero but
     * below the minimum balance. Must be greater than zero.
     *
     * Emits `Transferred` with the actual amount transferred. If this takes the source balance
     * to below the minimum for the asset, then the amount transferred is increased to take it
     * to zero.
     *
     * Weight: `O(1)`
     * Modes: Pre-existence of `dest`; Post-existence of `source`; Account pre-existence of
     * `dest`.
     *
     * @param id
     * @param source
     * @param dest
     * @param amount
     **/
    forceTransfer(id: bigint, source: MultiAddressLike, dest: MultiAddressLike, amount: bigint): ISubmittableExtrinsic;

    /**
     * Disallow further unprivileged transfers of an asset `id` from an account `who`. `who`
     * must already exist as an entry in `Account`s of the asset. If you want to freeze an
     * account that does not have an entry, use `touch_other` first.
     *
     * Origin must be Signed and the sender should be the Freezer of the asset `id`.
     *
     * - `id`: The identifier of the asset to be frozen.
     * - `who`: The account to be frozen.
     *
     * Emits `Frozen`.
     *
     * Weight: `O(1)`
     *
     * @param id
     * @param who
     **/
    freeze(id: bigint, who: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * Allow unprivileged transfers to and from an account again.
     *
     * Origin must be Signed and the sender should be the Admin of the asset `id`.
     *
     * - `id`: The identifier of the asset to be frozen.
     * - `who`: The account to be unfrozen.
     *
     * Emits `Thawed`.
     *
     * Weight: `O(1)`
     *
     * @param id
     * @param who
     **/
    thaw(id: bigint, who: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * Disallow further unprivileged transfers for the asset class.
     *
     * Origin must be Signed and the sender should be the Freezer of the asset `id`.
     *
     * - `id`: The identifier of the asset to be frozen.
     *
     * Emits `Frozen`.
     *
     * Weight: `O(1)`
     *
     * @param id
     **/
    freezeAsset(id: bigint): ISubmittableExtrinsic;

    /**
     * Allow unprivileged transfers for the asset again.
     *
     * Origin must be Signed and the sender should be the Admin of the asset `id`.
     *
     * - `id`: The identifier of the asset to be thawed.
     *
     * Emits `Thawed`.
     *
     * Weight: `O(1)`
     *
     * @param id
     **/
    thawAsset(id: bigint): ISubmittableExtrinsic;

    /**
     * Change the Owner of an asset.
     *
     * Origin must be Signed and the sender should be the Owner of the asset `id`.
     *
     * - `id`: The identifier of the asset.
     * - `owner`: The new Owner of this asset.
     *
     * Emits `OwnerChanged`.
     *
     * Weight: `O(1)`
     *
     * @param id
     * @param owner
     **/
    transferOwnership(id: bigint, owner: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * Change the Issuer, Admin and Freezer of an asset.
     *
     * Origin must be Signed and the sender should be the Owner of the asset `id`.
     *
     * - `id`: The identifier of the asset to be frozen.
     * - `issuer`: The new Issuer of this asset.
     * - `admin`: The new Admin of this asset.
     * - `freezer`: The new Freezer of this asset.
     *
     * Emits `TeamChanged`.
     *
     * Weight: `O(1)`
     *
     * @param id
     * @param issuer
     * @param admin
     * @param freezer
     **/
    setTeam(
      id: bigint,
      issuer: MultiAddressLike,
      admin: MultiAddressLike,
      freezer: MultiAddressLike,
    ): ISubmittableExtrinsic;

    /**
     * Set the metadata for an asset.
     *
     * Origin must be Signed and the sender should be the Owner of the asset `id`.
     *
     * Funds of sender are reserved according to the formula:
     * `MetadataDepositBase + MetadataDepositPerByte * (name.len + symbol.len)` taking into
     * account any already reserved funds.
     *
     * - `id`: The identifier of the asset to update.
     * - `name`: The user friendly name of this asset. Limited in length by `StringLimit`.
     * - `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.
     * - `decimals`: The number of decimals this asset uses to represent one unit.
     *
     * Emits `MetadataSet`.
     *
     * Weight: `O(1)`
     *
     * @param id
     * @param name
     * @param symbol
     * @param decimals
     **/
    setMetadata(id: bigint, name: Bytes, symbol: Bytes, decimals: number): ISubmittableExtrinsic;

    /**
     * Clear the metadata for an asset.
     *
     * Origin must be Signed and the sender should be the Owner of the asset `id`.
     *
     * Any deposit is freed for the asset owner.
     *
     * - `id`: The identifier of the asset to clear.
     *
     * Emits `MetadataCleared`.
     *
     * Weight: `O(1)`
     *
     * @param id
     **/
    clearMetadata(id: bigint): ISubmittableExtrinsic;

    /**
     * Force the metadata for an asset to some value.
     *
     * Origin must be ForceOrigin.
     *
     * Any deposit is left alone.
     *
     * - `id`: The identifier of the asset to update.
     * - `name`: The user friendly name of this asset. Limited in length by `StringLimit`.
     * - `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.
     * - `decimals`: The number of decimals this asset uses to represent one unit.
     *
     * Emits `MetadataSet`.
     *
     * Weight: `O(N + S)` where N and S are the length of the name and symbol respectively.
     *
     * @param id
     * @param name
     * @param symbol
     * @param decimals
     * @param isFrozen
     **/
    forceSetMetadata(
      id: bigint,
      name: Bytes,
      symbol: Bytes,
      decimals: number,
      isFrozen: boolean,
    ): ISubmittableExtrinsic;

    /**
     * Clear the metadata for an asset.
     *
     * Origin must be ForceOrigin.
     *
     * Any deposit is returned.
     *
     * - `id`: The identifier of the asset to clear.
     *
     * Emits `MetadataCleared`.
     *
     * Weight: `O(1)`
     *
     * @param id
     **/
    forceClearMetadata(id: bigint): ISubmittableExtrinsic;

    /**
     * Alter the attributes of a given asset.
     *
     * Origin must be `ForceOrigin`.
     *
     * - `id`: The identifier of the asset.
     * - `owner`: The new Owner of this asset.
     * - `issuer`: The new Issuer of this asset.
     * - `admin`: The new Admin of this asset.
     * - `freezer`: The new Freezer of this asset.
     * - `min_balance`: The minimum balance of this new asset that any single account must
     * have. If an account's balance is reduced below this, then it collapses to zero.
     * - `is_sufficient`: Whether a non-zero balance of this asset is deposit of sufficient
     * value to account for the state bloat associated with its balance storage. If set to
     * `true`, then non-zero balances may be stored without a `consumer` reference (and thus
     * an ED in the Balances pallet or whatever else is used to control user-account state
     * growth).
     * - `is_frozen`: Whether this asset class is frozen except for permissioned/admin
     * instructions.
     *
     * Emits `AssetStatusChanged` with the identity of the asset.
     *
     * Weight: `O(1)`
     *
     * @param id
     * @param owner
     * @param issuer
     * @param admin
     * @param freezer
     * @param minBalance
     * @param isSufficient
     * @param isFrozen
     **/
    forceAssetStatus(
      id: bigint,
      owner: MultiAddressLike,
      issuer: MultiAddressLike,
      admin: MultiAddressLike,
      freezer: MultiAddressLike,
      minBalance: bigint,
      isSufficient: boolean,
      isFrozen: boolean,
    ): ISubmittableExtrinsic;

    /**
     * Approve an amount of asset for transfer by a delegated third-party account.
     *
     * Origin must be Signed.
     *
     * Ensures that `ApprovalDeposit` worth of `Currency` is reserved from signing account
     * for the purpose of holding the approval. If some non-zero amount of assets is already
     * approved from signing account to `delegate`, then it is topped up or unreserved to
     * meet the right value.
     *
     * NOTE: The signing account does not need to own `amount` of assets at the point of
     * making this call.
     *
     * - `id`: The identifier of the asset.
     * - `delegate`: The account to delegate permission to transfer asset.
     * - `amount`: The amount of asset that may be transferred by `delegate`. If there is
     * already an approval in place, then this acts additively.
     *
     * Emits `ApprovedTransfer` on success.
     *
     * Weight: `O(1)`
     *
     * @param id
     * @param delegate
     * @param amount
     **/
    approveTransfer(id: bigint, delegate: MultiAddressLike, amount: bigint): ISubmittableExtrinsic;

    /**
     * Cancel all of some asset approved for delegated transfer by a third-party account.
     *
     * Origin must be Signed and there must be an approval in place between signer and
     * `delegate`.
     *
     * Unreserves any deposit previously reserved by `approve_transfer` for the approval.
     *
     * - `id`: The identifier of the asset.
     * - `delegate`: The account delegated permission to transfer asset.
     *
     * Emits `ApprovalCancelled` on success.
     *
     * Weight: `O(1)`
     *
     * @param id
     * @param delegate
     **/
    cancelApproval(id: bigint, delegate: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * Cancel all of some asset approved for delegated transfer by a third-party account.
     *
     * Origin must be either ForceOrigin or Signed origin with the signer being the Admin
     * account of the asset `id`.
     *
     * Unreserves any deposit previously reserved by `approve_transfer` for the approval.
     *
     * - `id`: The identifier of the asset.
     * - `delegate`: The account delegated permission to transfer asset.
     *
     * Emits `ApprovalCancelled` on success.
     *
     * Weight: `O(1)`
     *
     * @param id
     * @param owner
     * @param delegate
     **/
    forceCancelApproval(id: bigint, owner: MultiAddressLike, delegate: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * Transfer some asset balance from a previously delegated account to some third-party
     * account.
     *
     * Origin must be Signed and there must be an approval in place by the `owner` to the
     * signer.
     *
     * If the entire amount approved for transfer is transferred, then any deposit previously
     * reserved by `approve_transfer` is unreserved.
     *
     * - `id`: The identifier of the asset.
     * - `owner`: The account which previously approved for a transfer of at least `amount` and
     * from which the asset balance will be withdrawn.
     * - `destination`: The account to which the asset balance of `amount` will be transferred.
     * - `amount`: The amount of assets to transfer.
     *
     * Emits `TransferredApproved` on success.
     *
     * Weight: `O(1)`
     *
     * @param id
     * @param owner
     * @param destination
     * @param amount
     **/
    transferApproved(
      id: bigint,
      owner: MultiAddressLike,
      destination: MultiAddressLike,
      amount: bigint,
    ): ISubmittableExtrinsic;

    /**
     * Create an asset account for non-provider assets.
     *
     * A deposit will be taken from the signer account.
     *
     * - `origin`: Must be Signed; the signer account must have sufficient funds for a deposit
     * to be taken.
     * - `id`: The identifier of the asset for the account to be created.
     *
     * Emits `Touched` event when successful.
     *
     * @param id
     **/
    touch(id: bigint): ISubmittableExtrinsic;

    /**
     * Return the deposit (if any) of an asset account or a consumer reference (if any) of an
     * account.
     *
     * The origin must be Signed.
     *
     * - `id`: The identifier of the asset for which the caller would like the deposit
     * refunded.
     * - `allow_burn`: If `true` then assets may be destroyed in order to complete the refund.
     *
     * Emits `Refunded` event when successful.
     *
     * @param id
     * @param allowBurn
     **/
    refund(id: bigint, allowBurn: boolean): ISubmittableExtrinsic;

    /**
     * Sets the minimum balance of an asset.
     *
     * Only works if there aren't any accounts that are holding the asset or if
     * the new value of `min_balance` is less than the old one.
     *
     * Origin must be Signed and the sender has to be the Owner of the
     * asset `id`.
     *
     * - `id`: The identifier of the asset.
     * - `min_balance`: The new value of `min_balance`.
     *
     * Emits `AssetMinBalanceChanged` event when successful.
     *
     * @param id
     * @param minBalance
     **/
    setMinBalance(id: bigint, minBalance: bigint): ISubmittableExtrinsic;

    /**
     * Create an asset account for `who`.
     *
     * A deposit will be taken from the signer account.
     *
     * - `origin`: Must be Signed by `Freezer` or `Admin` of the asset `id`; the signer account
     * must have sufficient funds for a deposit to be taken.
     * - `id`: The identifier of the asset for the account to be created.
     * - `who`: The account to be created.
     *
     * Emits `Touched` event when successful.
     *
     * @param id
     * @param who
     **/
    touchOther(id: bigint, who: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * Return the deposit (if any) of a target asset account. Useful if you are the depositor.
     *
     * The origin must be Signed and either the account owner, depositor, or asset `Admin`. In
     * order to burn a non-zero balance of the asset, the caller must be the account and should
     * use `refund`.
     *
     * - `id`: The identifier of the asset for the account holding a deposit.
     * - `who`: The account to refund.
     *
     * Emits `Refunded` event when successful.
     *
     * @param id
     * @param who
     **/
    refundOther(id: bigint, who: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * Disallow further unprivileged transfers of an asset `id` to and from an account `who`.
     *
     * Origin must be Signed and the sender should be the Freezer of the asset `id`.
     *
     * - `id`: The identifier of the account's asset.
     * - `who`: The account to be unblocked.
     *
     * Emits `Blocked`.
     *
     * Weight: `O(1)`
     *
     * @param id
     * @param who
     **/
    block(id: bigint, who: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  collatorSelection: {
    /**
     * Set the list of invulnerable (fixed) collators.
     *
     * @param new_
     **/
    setInvulnerables(new_: Array<AccountId32Like>): ISubmittableExtrinsic;

    /**
     * Set the ideal number of collators (not including the invulnerables).
     * If lowering this number, then the number of running collators could be higher than this figure.
     * Aside from that edge case, there should be no other way to have more collators than the desired number.
     *
     * @param max
     **/
    setDesiredCandidates(max: number): ISubmittableExtrinsic;

    /**
     * Set the candidacy bond amount.
     *
     * @param bond
     **/
    setCandidacyBond(bond: bigint): ISubmittableExtrinsic;

    /**
     * Register this account as a collator candidate. The account must (a) already have
     * registered session keys and (b) be able to reserve the `CandidacyBond`.
     *
     * This call is not available to `Invulnerable` collators.
     *
     **/
    registerAsCandidate(): ISubmittableExtrinsic;

    /**
     * Deregister `origin` as a collator candidate. Note that the collator can only leave on
     * session change. The `CandidacyBond` will be unreserved immediately.
     *
     * This call will fail if the total number of candidates would drop below `MinCandidates`.
     *
     * This call is not available to `Invulnerable` collators.
     *
     **/
    leaveIntent(): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  session: {
    /**
     * Sets the session key(s) of the function caller to `keys`.
     * Allows an account to set its session key prior to becoming a validator.
     * This doesn't take effect until the next session.
     *
     * The dispatch origin of this function must be signed.
     *
     * ## Complexity
     * - `O(1)`. Actual cost depends on the number of length of `T::Keys::key_ids()` which is
     * fixed.
     *
     * @param keys
     * @param proof
     **/
    setKeys(keys: AstarRuntimeSessionKeys, proof: Bytes): ISubmittableExtrinsic;

    /**
     * Removes any session key(s) of the function caller.
     *
     * This doesn't take effect until the next session.
     *
     * The dispatch origin of this function must be Signed and the account must be either be
     * convertible to a validator ID using the chain's typical addressing system (this usually
     * means being a controller account) or directly convertible into a validator ID (which
     * usually means being a stash account).
     *
     * ## Complexity
     * - `O(1)` in number of key types. Actual cost depends on the number of length of
     * `T::Keys::key_ids()` which is fixed.
     *
     **/
    purgeKeys(): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  xcmpQueue: {
    /**
     * Services a single overweight XCM.
     *
     * - `origin`: Must pass `ExecuteOverweightOrigin`.
     * - `index`: The index of the overweight XCM to service
     * - `weight_limit`: The amount of weight that XCM execution may take.
     *
     * Errors:
     * - `BadOverweightIndex`: XCM under `index` is not found in the `Overweight` storage map.
     * - `BadXcm`: XCM under `index` cannot be properly decoded into a valid XCM format.
     * - `WeightOverLimit`: XCM execution may use greater `weight_limit`.
     *
     * Events:
     * - `OverweightServiced`: On success.
     *
     * @param index
     * @param weightLimit
     **/
    serviceOverweight(index: bigint, weightLimit: SpWeightsWeightV2Weight): ISubmittableExtrinsic;

    /**
     * Suspends all XCM executions for the XCMP queue, regardless of the sender's origin.
     *
     * - `origin`: Must pass `ControllerOrigin`.
     *
     **/
    suspendXcmExecution(): ISubmittableExtrinsic;

    /**
     * Resumes all XCM executions for the XCMP queue.
     *
     * Note that this function doesn't change the status of the in/out bound channels.
     *
     * - `origin`: Must pass `ControllerOrigin`.
     *
     **/
    resumeXcmExecution(): ISubmittableExtrinsic;

    /**
     * Overwrites the number of pages of messages which must be in the queue for the other side to be told to
     * suspend their sending.
     *
     * - `origin`: Must pass `Root`.
     * - `new`: Desired value for `QueueConfigData.suspend_value`
     *
     * @param new_
     **/
    updateSuspendThreshold(new_: number): ISubmittableExtrinsic;

    /**
     * Overwrites the number of pages of messages which must be in the queue after which we drop any further
     * messages from the channel.
     *
     * - `origin`: Must pass `Root`.
     * - `new`: Desired value for `QueueConfigData.drop_threshold`
     *
     * @param new_
     **/
    updateDropThreshold(new_: number): ISubmittableExtrinsic;

    /**
     * Overwrites the number of pages of messages which the queue must be reduced to before it signals that
     * message sending may recommence after it has been suspended.
     *
     * - `origin`: Must pass `Root`.
     * - `new`: Desired value for `QueueConfigData.resume_threshold`
     *
     * @param new_
     **/
    updateResumeThreshold(new_: number): ISubmittableExtrinsic;

    /**
     * Overwrites the amount of remaining weight under which we stop processing messages.
     *
     * - `origin`: Must pass `Root`.
     * - `new`: Desired value for `QueueConfigData.threshold_weight`
     *
     * @param new_
     **/
    updateThresholdWeight(new_: SpWeightsWeightV2Weight): ISubmittableExtrinsic;

    /**
     * Overwrites the speed to which the available weight approaches the maximum weight.
     * A lower number results in a faster progression. A value of 1 makes the entire weight available initially.
     *
     * - `origin`: Must pass `Root`.
     * - `new`: Desired value for `QueueConfigData.weight_restrict_decay`.
     *
     * @param new_
     **/
    updateWeightRestrictDecay(new_: SpWeightsWeightV2Weight): ISubmittableExtrinsic;

    /**
     * Overwrite the maximum amount of weight any individual message may consume.
     * Messages above this weight go into the overweight queue and may only be serviced explicitly.
     *
     * - `origin`: Must pass `Root`.
     * - `new`: Desired value for `QueueConfigData.xcmp_max_individual_weight`.
     *
     * @param new_
     **/
    updateXcmpMaxIndividualWeight(new_: SpWeightsWeightV2Weight): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  polkadotXcm: {
    /**
     *
     * @param dest
     * @param message
     **/
    send(dest: XcmVersionedMultiLocation, message: XcmVersionedXcm): ISubmittableExtrinsic;

    /**
     * Teleport some assets from the local chain to some destination chain.
     *
     * Fee payment on the destination side is made from the asset in the `assets` vector of
     * index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,
     * with all fees taken as needed from the asset.
     *
     * - `origin`: Must be capable of withdrawing the `assets` and executing XCM.
     * - `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send
     * from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.
     * - `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be
     * an `AccountId32` value.
     * - `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the
     * `dest` side. May not be empty.
     * - `fee_asset_item`: The index into `assets` of the item which should be used to pay
     * fees.
     *
     * @param dest
     * @param beneficiary
     * @param assets
     * @param feeAssetItem
     **/
    teleportAssets(
      dest: XcmVersionedMultiLocation,
      beneficiary: XcmVersionedMultiLocation,
      assets: XcmVersionedMultiAssets,
      feeAssetItem: number,
    ): ISubmittableExtrinsic;

    /**
     * Transfer some assets from the local chain to the sovereign account of a destination
     * chain and forward a notification XCM.
     *
     * Fee payment on the destination side is made from the asset in the `assets` vector of
     * index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,
     * with all fees taken as needed from the asset.
     *
     * - `origin`: Must be capable of withdrawing the `assets` and executing XCM.
     * - `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send
     * from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.
     * - `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be
     * an `AccountId32` value.
     * - `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the
     * `dest` side.
     * - `fee_asset_item`: The index into `assets` of the item which should be used to pay
     * fees.
     *
     * @param dest
     * @param beneficiary
     * @param assets
     * @param feeAssetItem
     **/
    reserveTransferAssets(
      dest: XcmVersionedMultiLocation,
      beneficiary: XcmVersionedMultiLocation,
      assets: XcmVersionedMultiAssets,
      feeAssetItem: number,
    ): ISubmittableExtrinsic;

    /**
     * Execute an XCM message from a local, signed, origin.
     *
     * An event is deposited indicating whether `msg` could be executed completely or only
     * partially.
     *
     * No more than `max_weight` will be used in its attempted execution. If this is less than the
     * maximum amount of weight that the message could take to be executed, then no execution
     * attempt will be made.
     *
     * NOTE: A successful return to this does *not* imply that the `msg` was executed successfully
     * to completion; only that *some* of it was executed.
     *
     * @param message
     * @param maxWeight
     **/
    execute(message: XcmVersionedXcm, maxWeight: SpWeightsWeightV2Weight): ISubmittableExtrinsic;

    /**
     * Extoll that a particular destination can be communicated with through a particular
     * version of XCM.
     *
     * - `origin`: Must be an origin specified by AdminOrigin.
     * - `location`: The destination that is being described.
     * - `xcm_version`: The latest version of XCM that `location` supports.
     *
     * @param location
     * @param xcmVersion
     **/
    forceXcmVersion(location: XcmV3MultilocationMultiLocation, xcmVersion: number): ISubmittableExtrinsic;

    /**
     * Set a safe XCM version (the version that XCM should be encoded with if the most recent
     * version a destination can accept is unknown).
     *
     * - `origin`: Must be an origin specified by AdminOrigin.
     * - `maybe_xcm_version`: The default XCM encoding version, or `None` to disable.
     *
     * @param maybeXcmVersion
     **/
    forceDefaultXcmVersion(maybeXcmVersion: number | undefined): ISubmittableExtrinsic;

    /**
     * Ask a location to notify us regarding their XCM version and any changes to it.
     *
     * - `origin`: Must be an origin specified by AdminOrigin.
     * - `location`: The location to which we should subscribe for XCM version notifications.
     *
     * @param location
     **/
    forceSubscribeVersionNotify(location: XcmVersionedMultiLocation): ISubmittableExtrinsic;

    /**
     * Require that a particular destination should no longer notify us regarding any XCM
     * version changes.
     *
     * - `origin`: Must be an origin specified by AdminOrigin.
     * - `location`: The location to which we are currently subscribed for XCM version
     * notifications which we no longer desire.
     *
     * @param location
     **/
    forceUnsubscribeVersionNotify(location: XcmVersionedMultiLocation): ISubmittableExtrinsic;

    /**
     * Transfer some assets from the local chain to the sovereign account of a destination
     * chain and forward a notification XCM.
     *
     * Fee payment on the destination side is made from the asset in the `assets` vector of
     * index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight
     * is needed than `weight_limit`, then the operation will fail and the assets send may be
     * at risk.
     *
     * - `origin`: Must be capable of withdrawing the `assets` and executing XCM.
     * - `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send
     * from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.
     * - `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be
     * an `AccountId32` value.
     * - `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the
     * `dest` side.
     * - `fee_asset_item`: The index into `assets` of the item which should be used to pay
     * fees.
     * - `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase.
     *
     * @param dest
     * @param beneficiary
     * @param assets
     * @param feeAssetItem
     * @param weightLimit
     **/
    limitedReserveTransferAssets(
      dest: XcmVersionedMultiLocation,
      beneficiary: XcmVersionedMultiLocation,
      assets: XcmVersionedMultiAssets,
      feeAssetItem: number,
      weightLimit: XcmV3WeightLimit,
    ): ISubmittableExtrinsic;

    /**
     * Teleport some assets from the local chain to some destination chain.
     *
     * Fee payment on the destination side is made from the asset in the `assets` vector of
     * index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight
     * is needed than `weight_limit`, then the operation will fail and the assets send may be
     * at risk.
     *
     * - `origin`: Must be capable of withdrawing the `assets` and executing XCM.
     * - `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send
     * from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.
     * - `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be
     * an `AccountId32` value.
     * - `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the
     * `dest` side. May not be empty.
     * - `fee_asset_item`: The index into `assets` of the item which should be used to pay
     * fees.
     * - `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase.
     *
     * @param dest
     * @param beneficiary
     * @param assets
     * @param feeAssetItem
     * @param weightLimit
     **/
    limitedTeleportAssets(
      dest: XcmVersionedMultiLocation,
      beneficiary: XcmVersionedMultiLocation,
      assets: XcmVersionedMultiAssets,
      feeAssetItem: number,
      weightLimit: XcmV3WeightLimit,
    ): ISubmittableExtrinsic;

    /**
     * Set or unset the global suspension state of the XCM executor.
     *
     * - `origin`: Must be an origin specified by AdminOrigin.
     * - `suspended`: `true` to suspend, `false` to resume.
     *
     * @param suspended
     **/
    forceSuspension(suspended: boolean): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  cumulusXcm: {
    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  dmpQueue: {
    /**
     * Service a single overweight message.
     *
     * @param index
     * @param weightLimit
     **/
    serviceOverweight(index: bigint, weightLimit: SpWeightsWeightV2Weight): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  xcAssetConfig: {
    /**
     * Register new asset location to asset Id mapping.
     *
     * This makes the asset eligible for XCM interaction.
     *
     * @param assetLocation
     * @param assetId
     **/
    registerAssetLocation(assetLocation: XcmVersionedMultiLocation, assetId: bigint): ISubmittableExtrinsic;

    /**
     * Change the amount of units we are charging per execution second
     * for a given AssetLocation.
     *
     * @param assetLocation
     * @param unitsPerSecond
     **/
    setAssetUnitsPerSecond(assetLocation: XcmVersionedMultiLocation, unitsPerSecond: bigint): ISubmittableExtrinsic;

    /**
     * Change the xcm type mapping for a given asset Id.
     * The new asset type will inherit old `units per second` value.
     *
     * @param newAssetLocation
     * @param assetId
     **/
    changeExistingAssetLocation(newAssetLocation: XcmVersionedMultiLocation, assetId: bigint): ISubmittableExtrinsic;

    /**
     * Removes asset from the set of supported payment assets.
     *
     * The asset can still be interacted with via XCM but it cannot be used to pay for execution time.
     *
     * @param assetLocation
     **/
    removePaymentAsset(assetLocation: XcmVersionedMultiLocation): ISubmittableExtrinsic;

    /**
     * Removes all information related to asset, removing it from XCM support.
     *
     * @param assetId
     **/
    removeAsset(assetId: bigint): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  xTokens: {
    /**
     * Transfer native currencies.
     *
     * `dest_weight_limit` is the weight for XCM execution on the dest
     * chain, and it would be charged from the transferred assets. If set
     * below requirements, the execution may fail and assets wouldn't be
     * received.
     *
     * It's a no-op if any error on local XCM execution or message sending.
     * Note sending assets out per se doesn't guarantee they would be
     * received. Receiving depends on if the XCM message could be delivered
     * by the network, and if the receiving chain would handle
     * messages correctly.
     *
     * @param currencyId
     * @param amount
     * @param dest
     * @param destWeightLimit
     **/
    transfer(
      currencyId: bigint,
      amount: bigint,
      dest: XcmVersionedMultiLocation,
      destWeightLimit: XcmV3WeightLimit,
    ): ISubmittableExtrinsic;

    /**
     * Transfer `MultiAsset`.
     *
     * `dest_weight_limit` is the weight for XCM execution on the dest
     * chain, and it would be charged from the transferred assets. If set
     * below requirements, the execution may fail and assets wouldn't be
     * received.
     *
     * It's a no-op if any error on local XCM execution or message sending.
     * Note sending assets out per se doesn't guarantee they would be
     * received. Receiving depends on if the XCM message could be delivered
     * by the network, and if the receiving chain would handle
     * messages correctly.
     *
     * @param asset
     * @param dest
     * @param destWeightLimit
     **/
    transferMultiasset(
      asset: XcmVersionedMultiAsset,
      dest: XcmVersionedMultiLocation,
      destWeightLimit: XcmV3WeightLimit,
    ): ISubmittableExtrinsic;

    /**
     * Transfer native currencies specifying the fee and amount as
     * separate.
     *
     * `dest_weight_limit` is the weight for XCM execution on the dest
     * chain, and it would be charged from the transferred assets. If set
     * below requirements, the execution may fail and assets wouldn't be
     * received.
     *
     * `fee` is the amount to be spent to pay for execution in destination
     * chain. Both fee and amount will be subtracted form the callers
     * balance.
     *
     * If `fee` is not high enough to cover for the execution costs in the
     * destination chain, then the assets will be trapped in the
     * destination chain
     *
     * It's a no-op if any error on local XCM execution or message sending.
     * Note sending assets out per se doesn't guarantee they would be
     * received. Receiving depends on if the XCM message could be delivered
     * by the network, and if the receiving chain would handle
     * messages correctly.
     *
     * @param currencyId
     * @param amount
     * @param fee
     * @param dest
     * @param destWeightLimit
     **/
    transferWithFee(
      currencyId: bigint,
      amount: bigint,
      fee: bigint,
      dest: XcmVersionedMultiLocation,
      destWeightLimit: XcmV3WeightLimit,
    ): ISubmittableExtrinsic;

    /**
     * Transfer `MultiAsset` specifying the fee and amount as separate.
     *
     * `dest_weight_limit` is the weight for XCM execution on the dest
     * chain, and it would be charged from the transferred assets. If set
     * below requirements, the execution may fail and assets wouldn't be
     * received.
     *
     * `fee` is the multiasset to be spent to pay for execution in
     * destination chain. Both fee and amount will be subtracted form the
     * callers balance For now we only accept fee and asset having the same
     * `MultiLocation` id.
     *
     * If `fee` is not high enough to cover for the execution costs in the
     * destination chain, then the assets will be trapped in the
     * destination chain
     *
     * It's a no-op if any error on local XCM execution or message sending.
     * Note sending assets out per se doesn't guarantee they would be
     * received. Receiving depends on if the XCM message could be delivered
     * by the network, and if the receiving chain would handle
     * messages correctly.
     *
     * @param asset
     * @param fee
     * @param dest
     * @param destWeightLimit
     **/
    transferMultiassetWithFee(
      asset: XcmVersionedMultiAsset,
      fee: XcmVersionedMultiAsset,
      dest: XcmVersionedMultiLocation,
      destWeightLimit: XcmV3WeightLimit,
    ): ISubmittableExtrinsic;

    /**
     * Transfer several currencies specifying the item to be used as fee
     *
     * `dest_weight_limit` is the weight for XCM execution on the dest
     * chain, and it would be charged from the transferred assets. If set
     * below requirements, the execution may fail and assets wouldn't be
     * received.
     *
     * `fee_item` is index of the currencies tuple that we want to use for
     * payment
     *
     * It's a no-op if any error on local XCM execution or message sending.
     * Note sending assets out per se doesn't guarantee they would be
     * received. Receiving depends on if the XCM message could be delivered
     * by the network, and if the receiving chain would handle
     * messages correctly.
     *
     * @param currencies
     * @param feeItem
     * @param dest
     * @param destWeightLimit
     **/
    transferMulticurrencies(
      currencies: Array<[bigint, bigint]>,
      feeItem: number,
      dest: XcmVersionedMultiLocation,
      destWeightLimit: XcmV3WeightLimit,
    ): ISubmittableExtrinsic;

    /**
     * Transfer several `MultiAsset` specifying the item to be used as fee
     *
     * `dest_weight_limit` is the weight for XCM execution on the dest
     * chain, and it would be charged from the transferred assets. If set
     * below requirements, the execution may fail and assets wouldn't be
     * received.
     *
     * `fee_item` is index of the MultiAssets that we want to use for
     * payment
     *
     * It's a no-op if any error on local XCM execution or message sending.
     * Note sending assets out per se doesn't guarantee they would be
     * received. Receiving depends on if the XCM message could be delivered
     * by the network, and if the receiving chain would handle
     * messages correctly.
     *
     * @param assets
     * @param feeItem
     * @param dest
     * @param destWeightLimit
     **/
    transferMultiassets(
      assets: XcmVersionedMultiAssets,
      feeItem: number,
      dest: XcmVersionedMultiLocation,
      destWeightLimit: XcmV3WeightLimit,
    ): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  evm: {
    /**
     * Withdraw balance from EVM into currency/balances pallet.
     *
     * @param address
     * @param value
     **/
    withdraw(address: H160, value: bigint): ISubmittableExtrinsic;

    /**
     * Issue an EVM call operation. This is similar to a message call transaction in Ethereum.
     *
     * @param source
     * @param target
     * @param input
     * @param value
     * @param gasLimit
     * @param maxFeePerGas
     * @param maxPriorityFeePerGas
     * @param nonce
     * @param accessList
     **/
    call(
      source: H160,
      target: H160,
      input: Bytes,
      value: U256,
      gasLimit: bigint,
      maxFeePerGas: U256,
      maxPriorityFeePerGas: U256 | undefined,
      nonce: U256 | undefined,
      accessList: Array<[H160, Array<H256>]>,
    ): ISubmittableExtrinsic;

    /**
     * Issue an EVM create operation. This is similar to a contract creation transaction in
     * Ethereum.
     *
     * @param source
     * @param init
     * @param value
     * @param gasLimit
     * @param maxFeePerGas
     * @param maxPriorityFeePerGas
     * @param nonce
     * @param accessList
     **/
    create(
      source: H160,
      init: Bytes,
      value: U256,
      gasLimit: bigint,
      maxFeePerGas: U256,
      maxPriorityFeePerGas: U256 | undefined,
      nonce: U256 | undefined,
      accessList: Array<[H160, Array<H256>]>,
    ): ISubmittableExtrinsic;

    /**
     * Issue an EVM create2 operation.
     *
     * @param source
     * @param init
     * @param salt
     * @param value
     * @param gasLimit
     * @param maxFeePerGas
     * @param maxPriorityFeePerGas
     * @param nonce
     * @param accessList
     **/
    create2(
      source: H160,
      init: Bytes,
      salt: H256,
      value: U256,
      gasLimit: bigint,
      maxFeePerGas: U256,
      maxPriorityFeePerGas: U256 | undefined,
      nonce: U256 | undefined,
      accessList: Array<[H160, Array<H256>]>,
    ): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  ethereum: {
    /**
     * Transact an Ethereum transaction.
     *
     * @param transaction
     **/
    transact(transaction: EthereumTransactionTransactionV2): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  dynamicEvmBaseFee: {
    /**
     * `root-only` extrinsic to set the `base_fee_per_gas` value manually.
     * The specified value has to respect min & max limits configured in the runtime.
     *
     * @param fee
     **/
    setBaseFeePerGas(fee: U256): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  contracts: {
    /**
     * Deprecated version if [`Self::call`] for use in an in-storage `Call`.
     *
     * @param dest
     * @param value
     * @param gasLimit
     * @param storageDepositLimit
     * @param data
     **/
    callOldWeight(
      dest: MultiAddressLike,
      value: bigint,
      gasLimit: bigint,
      storageDepositLimit: bigint | undefined,
      data: Bytes,
    ): ISubmittableExtrinsic;

    /**
     * Deprecated version if [`Self::instantiate_with_code`] for use in an in-storage `Call`.
     *
     * @param value
     * @param gasLimit
     * @param storageDepositLimit
     * @param code
     * @param data
     * @param salt
     **/
    instantiateWithCodeOldWeight(
      value: bigint,
      gasLimit: bigint,
      storageDepositLimit: bigint | undefined,
      code: Bytes,
      data: Bytes,
      salt: Bytes,
    ): ISubmittableExtrinsic;

    /**
     * Deprecated version if [`Self::instantiate`] for use in an in-storage `Call`.
     *
     * @param value
     * @param gasLimit
     * @param storageDepositLimit
     * @param codeHash
     * @param data
     * @param salt
     **/
    instantiateOldWeight(
      value: bigint,
      gasLimit: bigint,
      storageDepositLimit: bigint | undefined,
      codeHash: H256,
      data: Bytes,
      salt: Bytes,
    ): ISubmittableExtrinsic;

    /**
     * Upload new `code` without instantiating a contract from it.
     *
     * If the code does not already exist a deposit is reserved from the caller
     * and unreserved only when [`Self::remove_code`] is called. The size of the reserve
     * depends on the instrumented size of the the supplied `code`.
     *
     * If the code already exists in storage it will still return `Ok` and upgrades
     * the in storage version to the current
     * [`InstructionWeights::version`](InstructionWeights).
     *
     * - `determinism`: If this is set to any other value but [`Determinism::Enforced`] then
     * the only way to use this code is to delegate call into it from an offchain execution.
     * Set to [`Determinism::Enforced`] if in doubt.
     *
     * # Note
     *
     * Anyone can instantiate a contract from any uploaded code and thus prevent its removal.
     * To avoid this situation a constructor could employ access control so that it can
     * only be instantiated by permissioned entities. The same is true when uploading
     * through [`Self::instantiate_with_code`].
     *
     * @param code
     * @param storageDepositLimit
     * @param determinism
     **/
    uploadCode(
      code: Bytes,
      storageDepositLimit: bigint | undefined,
      determinism: PalletContractsWasmDeterminism,
    ): ISubmittableExtrinsic;

    /**
     * Remove the code stored under `code_hash` and refund the deposit to its owner.
     *
     * A code can only be removed by its original uploader (its owner) and only if it is
     * not used by any contract.
     *
     * @param codeHash
     **/
    removeCode(codeHash: H256): ISubmittableExtrinsic;

    /**
     * Privileged function that changes the code of an existing contract.
     *
     * This takes care of updating refcounts and all other necessary operations. Returns
     * an error if either the `code_hash` or `dest` do not exist.
     *
     * # Note
     *
     * This does **not** change the address of the contract in question. This means
     * that the contract address is no longer derived from its code hash after calling
     * this dispatchable.
     *
     * @param dest
     * @param codeHash
     **/
    setCode(dest: MultiAddressLike, codeHash: H256): ISubmittableExtrinsic;

    /**
     * Makes a call to an account, optionally transferring some balance.
     *
     * # Parameters
     *
     * * `dest`: Address of the contract to call.
     * * `value`: The balance to transfer from the `origin` to `dest`.
     * * `gas_limit`: The gas limit enforced when executing the constructor.
     * * `storage_deposit_limit`: The maximum amount of balance that can be charged from the
     * caller to pay for the storage consumed.
     * * `data`: The input data to pass to the contract.
     *
     * * If the account is a smart-contract account, the associated code will be
     * executed and any value will be transferred.
     * * If the account is a regular account, any value will be transferred.
     * * If no account exists and the call value is not less than `existential_deposit`,
     * a regular account will be created and any value will be transferred.
     *
     * @param dest
     * @param value
     * @param gasLimit
     * @param storageDepositLimit
     * @param data
     **/
    call(
      dest: MultiAddressLike,
      value: bigint,
      gasLimit: SpWeightsWeightV2Weight,
      storageDepositLimit: bigint | undefined,
      data: Bytes,
    ): ISubmittableExtrinsic;

    /**
     * Instantiates a new contract from the supplied `code` optionally transferring
     * some balance.
     *
     * This dispatchable has the same effect as calling [`Self::upload_code`] +
     * [`Self::instantiate`]. Bundling them together provides efficiency gains. Please
     * also check the documentation of [`Self::upload_code`].
     *
     * # Parameters
     *
     * * `value`: The balance to transfer from the `origin` to the newly created contract.
     * * `gas_limit`: The gas limit enforced when executing the constructor.
     * * `storage_deposit_limit`: The maximum amount of balance that can be charged/reserved
     * from the caller to pay for the storage consumed.
     * * `code`: The contract code to deploy in raw bytes.
     * * `data`: The input data to pass to the contract constructor.
     * * `salt`: Used for the address derivation. See [`Pallet::contract_address`].
     *
     * Instantiation is executed as follows:
     *
     * - The supplied `code` is instrumented, deployed, and a `code_hash` is created for that
     * code.
     * - If the `code_hash` already exists on the chain the underlying `code` will be shared.
     * - The destination address is computed based on the sender, code_hash and the salt.
     * - The smart-contract account is created at the computed address.
     * - The `value` is transferred to the new account.
     * - The `deploy` function is executed in the context of the newly-created account.
     *
     * @param value
     * @param gasLimit
     * @param storageDepositLimit
     * @param code
     * @param data
     * @param salt
     **/
    instantiateWithCode(
      value: bigint,
      gasLimit: SpWeightsWeightV2Weight,
      storageDepositLimit: bigint | undefined,
      code: Bytes,
      data: Bytes,
      salt: Bytes,
    ): ISubmittableExtrinsic;

    /**
     * Instantiates a contract from a previously deployed wasm binary.
     *
     * This function is identical to [`Self::instantiate_with_code`] but without the
     * code deployment step. Instead, the `code_hash` of an on-chain deployed wasm binary
     * must be supplied.
     *
     * @param value
     * @param gasLimit
     * @param storageDepositLimit
     * @param codeHash
     * @param data
     * @param salt
     **/
    instantiate(
      value: bigint,
      gasLimit: SpWeightsWeightV2Weight,
      storageDepositLimit: bigint | undefined,
      codeHash: H256,
      data: Bytes,
      salt: Bytes,
    ): ISubmittableExtrinsic;

    /**
     * When a migration is in progress, this dispatchable can be used to run migration steps.
     * Calls that contribute to advancing the migration have their fees waived, as it's helpful
     * for the chain. Note that while the migration is in progress, the pallet will also
     * leverage the `on_idle` hooks to run migration steps.
     *
     * @param weightLimit
     **/
    migrate(weightLimit: SpWeightsWeightV2Weight): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  sudo: {
    /**
     * Authenticates the sudo key and dispatches a function call with `Root` origin.
     *
     * The dispatch origin for this call must be _Signed_.
     *
     * ## Complexity
     * - O(1).
     *
     * @param call
     **/
    sudo(call: AstarRuntimeRuntimeCall): ISubmittableExtrinsic;

    /**
     * Authenticates the sudo key and dispatches a function call with `Root` origin.
     * This function does not check the weight of the call, and instead allows the
     * Sudo user to specify the weight of the call.
     *
     * The dispatch origin for this call must be _Signed_.
     *
     * ## Complexity
     * - O(1).
     *
     * @param call
     * @param weight
     **/
    sudoUncheckedWeight(call: AstarRuntimeRuntimeCall, weight: SpWeightsWeightV2Weight): ISubmittableExtrinsic;

    /**
     * Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo
     * key.
     *
     * The dispatch origin for this call must be _Signed_.
     *
     * ## Complexity
     * - O(1).
     *
     * @param new_
     **/
    setKey(new_: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * Authenticates the sudo key and dispatches a function call with `Signed` origin from
     * a given account.
     *
     * The dispatch origin for this call must be _Signed_.
     *
     * ## Complexity
     * - O(1).
     *
     * @param who
     * @param call
     **/
    sudoAs(who: MultiAddressLike, call: AstarRuntimeRuntimeCall): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
}
