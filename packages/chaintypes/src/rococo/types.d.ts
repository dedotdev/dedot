// Generated by @dedot/codegen

import type {
  Phase,
  H256,
  DispatchInfo,
  DispatchError,
  AccountId32,
  FixedBytes,
  Bytes,
  FixedArray,
  BytesLike,
  Header,
  MultiAddress,
  MultiAddressLike,
  AccountId32Like,
  EthereumAddress,
  EthereumAddressLike,
  Data,
  FixedU128,
  Perquintill,
  Perbill,
  BitSequence,
  Result,
  FixedI64,
  Era,
  UncheckedExtrinsic,
} from '@dedot/codecs';

export type FrameSystemAccountInfo = {
  nonce: number;
  consumers: number;
  providers: number;
  sufficients: number;
  data: PalletBalancesAccountData;
};

export type PalletBalancesAccountData = {
  free: bigint;
  reserved: bigint;
  frozen: bigint;
  flags: PalletBalancesExtraFlags;
};

export type PalletBalancesExtraFlags = bigint;

export type FrameSupportDispatchPerDispatchClass = {
  normal: SpWeightsWeightV2Weight;
  operational: SpWeightsWeightV2Weight;
  mandatory: SpWeightsWeightV2Weight;
};

export type SpWeightsWeightV2Weight = { refTime: bigint; proofSize: bigint };

export type FrameSystemEventRecord = { phase: Phase; event: RococoRuntimeRuntimeEvent; topics: Array<H256> };

export type RococoRuntimeRuntimeEvent =
  | { pallet: 'System'; palletEvent: FrameSystemEvent }
  | { pallet: 'Indices'; palletEvent: PalletIndicesEvent }
  | { pallet: 'Balances'; palletEvent: PalletBalancesEvent }
  | { pallet: 'TransactionPayment'; palletEvent: PalletTransactionPaymentEvent }
  | { pallet: 'Offences'; palletEvent: PalletOffencesEvent }
  | { pallet: 'Session'; palletEvent: PalletSessionEvent }
  | { pallet: 'Grandpa'; palletEvent: PalletGrandpaEvent }
  | { pallet: 'Treasury'; palletEvent: PalletTreasuryEvent }
  | { pallet: 'ConvictionVoting'; palletEvent: PalletConvictionVotingEvent }
  | { pallet: 'Referenda'; palletEvent: PalletReferendaEvent }
  | { pallet: 'FellowshipCollective'; palletEvent: PalletRankedCollectiveEvent }
  | { pallet: 'FellowshipReferenda'; palletEvent: PalletReferendaEvent002 }
  | { pallet: 'Whitelist'; palletEvent: PalletWhitelistEvent }
  | { pallet: 'Claims'; palletEvent: PolkadotRuntimeCommonClaimsPalletEvent }
  | { pallet: 'Utility'; palletEvent: PalletUtilityEvent }
  | { pallet: 'Identity'; palletEvent: PalletIdentityEvent }
  | { pallet: 'Society'; palletEvent: PalletSocietyEvent }
  | { pallet: 'Recovery'; palletEvent: PalletRecoveryEvent }
  | { pallet: 'Vesting'; palletEvent: PalletVestingEvent }
  | { pallet: 'Scheduler'; palletEvent: PalletSchedulerEvent }
  | { pallet: 'Proxy'; palletEvent: PalletProxyEvent }
  | { pallet: 'Multisig'; palletEvent: PalletMultisigEvent }
  | { pallet: 'Preimage'; palletEvent: PalletPreimageEvent }
  | { pallet: 'AssetRate'; palletEvent: PalletAssetRateEvent }
  | { pallet: 'Bounties'; palletEvent: PalletBountiesEvent }
  | { pallet: 'ChildBounties'; palletEvent: PalletChildBountiesEvent }
  | { pallet: 'Nis'; palletEvent: PalletNisEvent }
  | { pallet: 'NisCounterpartBalances'; palletEvent: PalletBalancesEvent }
  | { pallet: 'ParaInclusion'; palletEvent: PolkadotRuntimeParachainsInclusionPalletEvent }
  | { pallet: 'Paras'; palletEvent: PolkadotRuntimeParachainsParasPalletEvent }
  | { pallet: 'Hrmp'; palletEvent: PolkadotRuntimeParachainsHrmpPalletEvent }
  | { pallet: 'ParasDisputes'; palletEvent: PolkadotRuntimeParachainsDisputesPalletEvent }
  | { pallet: 'MessageQueue'; palletEvent: PalletMessageQueueEvent }
  | { pallet: 'OnDemandAssignmentProvider'; palletEvent: PolkadotRuntimeParachainsAssignerOnDemandPalletEvent }
  | { pallet: 'Registrar'; palletEvent: PolkadotRuntimeCommonParasRegistrarPalletEvent }
  | { pallet: 'Slots'; palletEvent: PolkadotRuntimeCommonSlotsPalletEvent }
  | { pallet: 'Auctions'; palletEvent: PolkadotRuntimeCommonAuctionsPalletEvent }
  | { pallet: 'Crowdloan'; palletEvent: PolkadotRuntimeCommonCrowdloanPalletEvent }
  | { pallet: 'Coretime'; palletEvent: PolkadotRuntimeParachainsCoretimePalletEvent }
  | { pallet: 'XcmPallet'; palletEvent: PalletXcmEvent }
  | { pallet: 'IdentityMigrator'; palletEvent: PolkadotRuntimeCommonIdentityMigratorPalletEvent }
  | { pallet: 'AssignedSlots'; palletEvent: PolkadotRuntimeCommonAssignedSlotsPalletEvent }
  | { pallet: 'ValidatorManager'; palletEvent: RococoRuntimeValidatorManagerPalletEvent }
  | { pallet: 'StateTrieMigration'; palletEvent: PalletStateTrieMigrationEvent }
  | { pallet: 'RootTesting'; palletEvent: PalletRootTestingEvent }
  | { pallet: 'Sudo'; palletEvent: PalletSudoEvent };

/**
 * Event for the System pallet.
 **/
export type FrameSystemEvent =
  /**
   * An extrinsic completed successfully.
   **/
  | { name: 'ExtrinsicSuccess'; data: { dispatchInfo: DispatchInfo } }
  /**
   * An extrinsic failed.
   **/
  | { name: 'ExtrinsicFailed'; data: { dispatchError: DispatchError; dispatchInfo: DispatchInfo } }
  /**
   * `:code` was updated.
   **/
  | { name: 'CodeUpdated' }
  /**
   * A new account was created.
   **/
  | { name: 'NewAccount'; data: { account: AccountId32 } }
  /**
   * An account was reaped.
   **/
  | { name: 'KilledAccount'; data: { account: AccountId32 } }
  /**
   * On on-chain remark happened.
   **/
  | { name: 'Remarked'; data: { sender: AccountId32; hash: H256 } }
  /**
   * An upgrade was authorized.
   **/
  | { name: 'UpgradeAuthorized'; data: { codeHash: H256; checkVersion: boolean } };

export type FrameSupportDispatchDispatchClass = 'Normal' | 'Operational' | 'Mandatory';

export type FrameSupportDispatchPays = 'Yes' | 'No';

/**
 * The `Event` enum of this pallet
 **/
export type PalletIndicesEvent =
  /**
   * A account index was assigned.
   **/
  | { name: 'IndexAssigned'; data: { who: AccountId32; index: number } }
  /**
   * A account index has been freed up (unassigned).
   **/
  | { name: 'IndexFreed'; data: { index: number } }
  /**
   * A account index has been frozen to its current account ID.
   **/
  | { name: 'IndexFrozen'; data: { index: number; who: AccountId32 } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletBalancesEvent =
  /**
   * An account was created with some free balance.
   **/
  | { name: 'Endowed'; data: { account: AccountId32; freeBalance: bigint } }
  /**
   * An account was removed whose balance was non-zero but below ExistentialDeposit,
   * resulting in an outright loss.
   **/
  | { name: 'DustLost'; data: { account: AccountId32; amount: bigint } }
  /**
   * Transfer succeeded.
   **/
  | { name: 'Transfer'; data: { from: AccountId32; to: AccountId32; amount: bigint } }
  /**
   * A balance was set by root.
   **/
  | { name: 'BalanceSet'; data: { who: AccountId32; free: bigint } }
  /**
   * Some balance was reserved (moved from free to reserved).
   **/
  | { name: 'Reserved'; data: { who: AccountId32; amount: bigint } }
  /**
   * Some balance was unreserved (moved from reserved to free).
   **/
  | { name: 'Unreserved'; data: { who: AccountId32; amount: bigint } }
  /**
   * Some balance was moved from the reserve of the first account to the second account.
   * Final argument indicates the destination balance type.
   **/
  | {
      name: 'ReserveRepatriated';
      data: {
        from: AccountId32;
        to: AccountId32;
        amount: bigint;
        destinationStatus: FrameSupportTokensMiscBalanceStatus;
      };
    }
  /**
   * Some amount was deposited (e.g. for transaction fees).
   **/
  | { name: 'Deposit'; data: { who: AccountId32; amount: bigint } }
  /**
   * Some amount was withdrawn from the account (e.g. for transaction fees).
   **/
  | { name: 'Withdraw'; data: { who: AccountId32; amount: bigint } }
  /**
   * Some amount was removed from the account (e.g. for misbehavior).
   **/
  | { name: 'Slashed'; data: { who: AccountId32; amount: bigint } }
  /**
   * Some amount was minted into an account.
   **/
  | { name: 'Minted'; data: { who: AccountId32; amount: bigint } }
  /**
   * Some amount was burned from an account.
   **/
  | { name: 'Burned'; data: { who: AccountId32; amount: bigint } }
  /**
   * Some amount was suspended from an account (it can be restored later).
   **/
  | { name: 'Suspended'; data: { who: AccountId32; amount: bigint } }
  /**
   * Some amount was restored into an account.
   **/
  | { name: 'Restored'; data: { who: AccountId32; amount: bigint } }
  /**
   * An account was upgraded.
   **/
  | { name: 'Upgraded'; data: { who: AccountId32 } }
  /**
   * Total issuance was increased by `amount`, creating a credit to be balanced.
   **/
  | { name: 'Issued'; data: { amount: bigint } }
  /**
   * Total issuance was decreased by `amount`, creating a debt to be balanced.
   **/
  | { name: 'Rescinded'; data: { amount: bigint } }
  /**
   * Some balance was locked.
   **/
  | { name: 'Locked'; data: { who: AccountId32; amount: bigint } }
  /**
   * Some balance was unlocked.
   **/
  | { name: 'Unlocked'; data: { who: AccountId32; amount: bigint } }
  /**
   * Some balance was frozen.
   **/
  | { name: 'Frozen'; data: { who: AccountId32; amount: bigint } }
  /**
   * Some balance was thawed.
   **/
  | { name: 'Thawed'; data: { who: AccountId32; amount: bigint } }
  /**
   * The `TotalIssuance` was forcefully changed.
   **/
  | { name: 'TotalIssuanceForced'; data: { old: bigint; new: bigint } };

export type FrameSupportTokensMiscBalanceStatus = 'Free' | 'Reserved';

/**
 * The `Event` enum of this pallet
 **/
export type PalletTransactionPaymentEvent =
  /**
   * A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,
   * has been paid by `who`.
   **/
  { name: 'TransactionFeePaid'; data: { who: AccountId32; actualFee: bigint; tip: bigint } };

/**
 * Events type.
 **/
export type PalletOffencesEvent =
  /**
   * There is an offence reported of the given `kind` happened at the `session_index` and
   * (kind-specific) time slot. This event is not deposited for duplicate slashes.
   * \[kind, timeslot\].
   **/
  { name: 'Offence'; data: { kind: FixedBytes<16>; timeslot: Bytes } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletSessionEvent =
  /**
   * New session has happened. Note that the argument is the session index, not the
   * block number as the type might suggest.
   **/
  { name: 'NewSession'; data: { sessionIndex: number } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletGrandpaEvent =
  /**
   * New authority set has been applied.
   **/
  | { name: 'NewAuthorities'; data: { authoritySet: Array<[SpConsensusGrandpaAppPublic, bigint]> } }
  /**
   * Current authority set has been paused.
   **/
  | { name: 'Paused' }
  /**
   * Current authority set has been resumed.
   **/
  | { name: 'Resumed' };

export type SpConsensusGrandpaAppPublic = SpCoreEd25519Public;

export type SpCoreEd25519Public = FixedBytes<32>;

/**
 * The `Event` enum of this pallet
 **/
export type PalletTreasuryEvent =
  /**
   * New proposal.
   **/
  | { name: 'Proposed'; data: { proposalIndex: number } }
  /**
   * We have ended a spend period and will now allocate funds.
   **/
  | { name: 'Spending'; data: { budgetRemaining: bigint } }
  /**
   * Some funds have been allocated.
   **/
  | { name: 'Awarded'; data: { proposalIndex: number; award: bigint; account: AccountId32 } }
  /**
   * A proposal was rejected; funds were slashed.
   **/
  | { name: 'Rejected'; data: { proposalIndex: number; slashed: bigint } }
  /**
   * Some of our funds have been burnt.
   **/
  | { name: 'Burnt'; data: { burntFunds: bigint } }
  /**
   * Spending has finished; this is the amount that rolls over until next spend.
   **/
  | { name: 'Rollover'; data: { rolloverBalance: bigint } }
  /**
   * Some funds have been deposited.
   **/
  | { name: 'Deposit'; data: { value: bigint } }
  /**
   * A new spend proposal has been approved.
   **/
  | { name: 'SpendApproved'; data: { proposalIndex: number; amount: bigint; beneficiary: AccountId32 } }
  /**
   * The inactive funds of the pallet have been updated.
   **/
  | { name: 'UpdatedInactive'; data: { reactivated: bigint; deactivated: bigint } }
  /**
   * A new asset spend proposal has been approved.
   **/
  | {
      name: 'AssetSpendApproved';
      data: {
        index: number;
        assetKind: PolkadotRuntimeCommonImplsVersionedLocatableAsset;
        amount: bigint;
        beneficiary: XcmVersionedLocation;
        validFrom: number;
        expireAt: number;
      };
    }
  /**
   * An approved spend was voided.
   **/
  | { name: 'AssetSpendVoided'; data: { index: number } }
  /**
   * A payment happened.
   **/
  | { name: 'Paid'; data: { index: number; paymentId: bigint } }
  /**
   * A payment failed and can be retried.
   **/
  | { name: 'PaymentFailed'; data: { index: number; paymentId: bigint } }
  /**
   * A spend was processed and removed from the storage. It might have been successfully
   * paid or it may have expired.
   **/
  | { name: 'SpendProcessed'; data: { index: number } };

export type PolkadotRuntimeCommonImplsVersionedLocatableAsset =
  | { tag: 'V3'; value: { location: StagingXcmV3MultilocationMultiLocation; assetId: XcmV3MultiassetAssetId } }
  | { tag: 'V4'; value: { location: StagingXcmV4Location; assetId: StagingXcmV4AssetAssetId } };

export type StagingXcmV3MultilocationMultiLocation = { parents: number; interior: XcmV3Junctions };

export type XcmV3Junctions =
  | { tag: 'Here' }
  | { tag: 'X1'; value: XcmV3Junction }
  | { tag: 'X2'; value: [XcmV3Junction, XcmV3Junction] }
  | { tag: 'X3'; value: [XcmV3Junction, XcmV3Junction, XcmV3Junction] }
  | { tag: 'X4'; value: [XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction] }
  | { tag: 'X5'; value: [XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction] }
  | { tag: 'X6'; value: [XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction] }
  | {
      tag: 'X7';
      value: [XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction];
    }
  | {
      tag: 'X8';
      value: [
        XcmV3Junction,
        XcmV3Junction,
        XcmV3Junction,
        XcmV3Junction,
        XcmV3Junction,
        XcmV3Junction,
        XcmV3Junction,
        XcmV3Junction,
      ];
    };

export type XcmV3Junction =
  | { tag: 'Parachain'; value: number }
  | { tag: 'AccountId32'; value: { network?: XcmV3JunctionNetworkId | undefined; id: FixedBytes<32> } }
  | { tag: 'AccountIndex64'; value: { network?: XcmV3JunctionNetworkId | undefined; index: bigint } }
  | { tag: 'AccountKey20'; value: { network?: XcmV3JunctionNetworkId | undefined; key: FixedBytes<20> } }
  | { tag: 'PalletInstance'; value: number }
  | { tag: 'GeneralIndex'; value: bigint }
  | { tag: 'GeneralKey'; value: { length: number; data: FixedBytes<32> } }
  | { tag: 'OnlyChild' }
  | { tag: 'Plurality'; value: { id: XcmV3JunctionBodyId; part: XcmV3JunctionBodyPart } }
  | { tag: 'GlobalConsensus'; value: XcmV3JunctionNetworkId };

export type XcmV3JunctionNetworkId =
  | { tag: 'ByGenesis'; value: FixedBytes<32> }
  | { tag: 'ByFork'; value: { blockNumber: bigint; blockHash: FixedBytes<32> } }
  | { tag: 'Polkadot' }
  | { tag: 'Kusama' }
  | { tag: 'Westend' }
  | { tag: 'Rococo' }
  | { tag: 'Wococo' }
  | { tag: 'Ethereum'; value: { chainId: bigint } }
  | { tag: 'BitcoinCore' }
  | { tag: 'BitcoinCash' }
  | { tag: 'PolkadotBulletin' };

export type XcmV3JunctionBodyId =
  | { tag: 'Unit' }
  | { tag: 'Moniker'; value: FixedBytes<4> }
  | { tag: 'Index'; value: number }
  | { tag: 'Executive' }
  | { tag: 'Technical' }
  | { tag: 'Legislative' }
  | { tag: 'Judicial' }
  | { tag: 'Defense' }
  | { tag: 'Administration' }
  | { tag: 'Treasury' };

export type XcmV3JunctionBodyPart =
  | { tag: 'Voice' }
  | { tag: 'Members'; value: { count: number } }
  | { tag: 'Fraction'; value: { nom: number; denom: number } }
  | { tag: 'AtLeastProportion'; value: { nom: number; denom: number } }
  | { tag: 'MoreThanProportion'; value: { nom: number; denom: number } };

export type XcmV3MultiassetAssetId =
  | { tag: 'Concrete'; value: StagingXcmV3MultilocationMultiLocation }
  | { tag: 'Abstract'; value: FixedBytes<32> };

export type StagingXcmV4Location = { parents: number; interior: StagingXcmV4Junctions };

export type StagingXcmV4Junctions =
  | { tag: 'Here' }
  | { tag: 'X1'; value: FixedArray<StagingXcmV4Junction, 1> }
  | { tag: 'X2'; value: FixedArray<StagingXcmV4Junction, 2> }
  | { tag: 'X3'; value: FixedArray<StagingXcmV4Junction, 3> }
  | { tag: 'X4'; value: FixedArray<StagingXcmV4Junction, 4> }
  | { tag: 'X5'; value: FixedArray<StagingXcmV4Junction, 5> }
  | { tag: 'X6'; value: FixedArray<StagingXcmV4Junction, 6> }
  | { tag: 'X7'; value: FixedArray<StagingXcmV4Junction, 7> }
  | { tag: 'X8'; value: FixedArray<StagingXcmV4Junction, 8> };

export type StagingXcmV4Junction =
  | { tag: 'Parachain'; value: number }
  | { tag: 'AccountId32'; value: { network?: StagingXcmV4JunctionNetworkId | undefined; id: FixedBytes<32> } }
  | { tag: 'AccountIndex64'; value: { network?: StagingXcmV4JunctionNetworkId | undefined; index: bigint } }
  | { tag: 'AccountKey20'; value: { network?: StagingXcmV4JunctionNetworkId | undefined; key: FixedBytes<20> } }
  | { tag: 'PalletInstance'; value: number }
  | { tag: 'GeneralIndex'; value: bigint }
  | { tag: 'GeneralKey'; value: { length: number; data: FixedBytes<32> } }
  | { tag: 'OnlyChild' }
  | { tag: 'Plurality'; value: { id: XcmV3JunctionBodyId; part: XcmV3JunctionBodyPart } }
  | { tag: 'GlobalConsensus'; value: StagingXcmV4JunctionNetworkId };

export type StagingXcmV4JunctionNetworkId =
  | { tag: 'ByGenesis'; value: FixedBytes<32> }
  | { tag: 'ByFork'; value: { blockNumber: bigint; blockHash: FixedBytes<32> } }
  | { tag: 'Polkadot' }
  | { tag: 'Kusama' }
  | { tag: 'Westend' }
  | { tag: 'Rococo' }
  | { tag: 'Wococo' }
  | { tag: 'Ethereum'; value: { chainId: bigint } }
  | { tag: 'BitcoinCore' }
  | { tag: 'BitcoinCash' }
  | { tag: 'PolkadotBulletin' };

export type StagingXcmV4AssetAssetId = StagingXcmV4Location;

export type XcmVersionedLocation =
  | { tag: 'V2'; value: XcmV2MultilocationMultiLocation }
  | { tag: 'V3'; value: StagingXcmV3MultilocationMultiLocation }
  | { tag: 'V4'; value: StagingXcmV4Location };

export type XcmV2MultilocationMultiLocation = { parents: number; interior: XcmV2MultilocationJunctions };

export type XcmV2MultilocationJunctions =
  | { tag: 'Here' }
  | { tag: 'X1'; value: XcmV2Junction }
  | { tag: 'X2'; value: [XcmV2Junction, XcmV2Junction] }
  | { tag: 'X3'; value: [XcmV2Junction, XcmV2Junction, XcmV2Junction] }
  | { tag: 'X4'; value: [XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction] }
  | { tag: 'X5'; value: [XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction] }
  | { tag: 'X6'; value: [XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction] }
  | {
      tag: 'X7';
      value: [XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction];
    }
  | {
      tag: 'X8';
      value: [
        XcmV2Junction,
        XcmV2Junction,
        XcmV2Junction,
        XcmV2Junction,
        XcmV2Junction,
        XcmV2Junction,
        XcmV2Junction,
        XcmV2Junction,
      ];
    };

export type XcmV2Junction =
  | { tag: 'Parachain'; value: number }
  | { tag: 'AccountId32'; value: { network: XcmV2NetworkId; id: FixedBytes<32> } }
  | { tag: 'AccountIndex64'; value: { network: XcmV2NetworkId; index: bigint } }
  | { tag: 'AccountKey20'; value: { network: XcmV2NetworkId; key: FixedBytes<20> } }
  | { tag: 'PalletInstance'; value: number }
  | { tag: 'GeneralIndex'; value: bigint }
  | { tag: 'GeneralKey'; value: Bytes }
  | { tag: 'OnlyChild' }
  | { tag: 'Plurality'; value: { id: XcmV2BodyId; part: XcmV2BodyPart } };

export type XcmV2NetworkId = { tag: 'Any' } | { tag: 'Named'; value: Bytes } | { tag: 'Polkadot' } | { tag: 'Kusama' };

export type XcmV2BodyId =
  | { tag: 'Unit' }
  | { tag: 'Named'; value: Bytes }
  | { tag: 'Index'; value: number }
  | { tag: 'Executive' }
  | { tag: 'Technical' }
  | { tag: 'Legislative' }
  | { tag: 'Judicial' }
  | { tag: 'Defense' }
  | { tag: 'Administration' }
  | { tag: 'Treasury' };

export type XcmV2BodyPart =
  | { tag: 'Voice' }
  | { tag: 'Members'; value: { count: number } }
  | { tag: 'Fraction'; value: { nom: number; denom: number } }
  | { tag: 'AtLeastProportion'; value: { nom: number; denom: number } }
  | { tag: 'MoreThanProportion'; value: { nom: number; denom: number } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletConvictionVotingEvent =
  /**
   * An account has delegated their vote to another account. \[who, target\]
   **/
  | { name: 'Delegated'; data: [AccountId32, AccountId32] }
  /**
   * An \[account\] has cancelled a previous delegation operation.
   **/
  | { name: 'Undelegated'; data: AccountId32 };

/**
 * The `Event` enum of this pallet
 **/
export type PalletReferendaEvent =
  /**
   * A referendum has been submitted.
   **/
  | {
      name: 'Submitted';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The track (and by extension proposal dispatch origin) of this referendum.
         **/
        track: number;

        /**
         * The proposal for the referendum.
         **/
        proposal: FrameSupportPreimagesBounded;
      };
    }
  /**
   * The decision deposit has been placed.
   **/
  | {
      name: 'DecisionDepositPlaced';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The account who placed the deposit.
         **/
        who: AccountId32;

        /**
         * The amount placed by the account.
         **/
        amount: bigint;
      };
    }
  /**
   * The decision deposit has been refunded.
   **/
  | {
      name: 'DecisionDepositRefunded';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The account who placed the deposit.
         **/
        who: AccountId32;

        /**
         * The amount placed by the account.
         **/
        amount: bigint;
      };
    }
  /**
   * A deposit has been slashed.
   **/
  | {
      name: 'DepositSlashed';
      data: {
        /**
         * The account who placed the deposit.
         **/
        who: AccountId32;

        /**
         * The amount placed by the account.
         **/
        amount: bigint;
      };
    }
  /**
   * A referendum has moved into the deciding phase.
   **/
  | {
      name: 'DecisionStarted';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The track (and by extension proposal dispatch origin) of this referendum.
         **/
        track: number;

        /**
         * The proposal for the referendum.
         **/
        proposal: FrameSupportPreimagesBounded;

        /**
         * The current tally of votes in this referendum.
         **/
        tally: PalletConvictionVotingTally;
      };
    }
  | {
      name: 'ConfirmStarted';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;
      };
    }
  | {
      name: 'ConfirmAborted';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;
      };
    }
  /**
   * A referendum has ended its confirmation phase and is ready for approval.
   **/
  | {
      name: 'Confirmed';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The final tally of votes in this referendum.
         **/
        tally: PalletConvictionVotingTally;
      };
    }
  /**
   * A referendum has been approved and its proposal has been scheduled.
   **/
  | {
      name: 'Approved';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;
      };
    }
  /**
   * A proposal has been rejected by referendum.
   **/
  | {
      name: 'Rejected';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The final tally of votes in this referendum.
         **/
        tally: PalletConvictionVotingTally;
      };
    }
  /**
   * A referendum has been timed out without being decided.
   **/
  | {
      name: 'TimedOut';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The final tally of votes in this referendum.
         **/
        tally: PalletConvictionVotingTally;
      };
    }
  /**
   * A referendum has been cancelled.
   **/
  | {
      name: 'Cancelled';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The final tally of votes in this referendum.
         **/
        tally: PalletConvictionVotingTally;
      };
    }
  /**
   * A referendum has been killed.
   **/
  | {
      name: 'Killed';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The final tally of votes in this referendum.
         **/
        tally: PalletConvictionVotingTally;
      };
    }
  /**
   * The submission deposit has been refunded.
   **/
  | {
      name: 'SubmissionDepositRefunded';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The account who placed the deposit.
         **/
        who: AccountId32;

        /**
         * The amount placed by the account.
         **/
        amount: bigint;
      };
    }
  /**
   * Metadata for a referendum has been set.
   **/
  | {
      name: 'MetadataSet';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * Preimage hash.
         **/
        hash: H256;
      };
    }
  /**
   * Metadata for a referendum has been cleared.
   **/
  | {
      name: 'MetadataCleared';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * Preimage hash.
         **/
        hash: H256;
      };
    };

export type FrameSupportPreimagesBounded =
  | { tag: 'Legacy'; value: { hash: H256 } }
  | { tag: 'Inline'; value: Bytes }
  | { tag: 'Lookup'; value: { hash: H256; len: number } };

export type RococoRuntimeRuntimeCall =
  | { pallet: 'System'; palletCall: FrameSystemCall }
  | { pallet: 'Babe'; palletCall: PalletBabeCall }
  | { pallet: 'Timestamp'; palletCall: PalletTimestampCall }
  | { pallet: 'Indices'; palletCall: PalletIndicesCall }
  | { pallet: 'Balances'; palletCall: PalletBalancesCall }
  | { pallet: 'Session'; palletCall: PalletSessionCall }
  | { pallet: 'Grandpa'; palletCall: PalletGrandpaCall }
  | { pallet: 'Treasury'; palletCall: PalletTreasuryCall }
  | { pallet: 'ConvictionVoting'; palletCall: PalletConvictionVotingCall }
  | { pallet: 'Referenda'; palletCall: PalletReferendaCall }
  | { pallet: 'FellowshipCollective'; palletCall: PalletRankedCollectiveCall }
  | { pallet: 'FellowshipReferenda'; palletCall: PalletReferendaCall }
  | { pallet: 'Whitelist'; palletCall: PalletWhitelistCall }
  | { pallet: 'Claims'; palletCall: PolkadotRuntimeCommonClaimsPalletCall }
  | { pallet: 'Utility'; palletCall: PalletUtilityCall }
  | { pallet: 'Identity'; palletCall: PalletIdentityCall }
  | { pallet: 'Society'; palletCall: PalletSocietyCall }
  | { pallet: 'Recovery'; palletCall: PalletRecoveryCall }
  | { pallet: 'Vesting'; palletCall: PalletVestingCall }
  | { pallet: 'Scheduler'; palletCall: PalletSchedulerCall }
  | { pallet: 'Proxy'; palletCall: PalletProxyCall }
  | { pallet: 'Multisig'; palletCall: PalletMultisigCall }
  | { pallet: 'Preimage'; palletCall: PalletPreimageCall }
  | { pallet: 'AssetRate'; palletCall: PalletAssetRateCall }
  | { pallet: 'Bounties'; palletCall: PalletBountiesCall }
  | { pallet: 'ChildBounties'; palletCall: PalletChildBountiesCall }
  | { pallet: 'Nis'; palletCall: PalletNisCall }
  | { pallet: 'NisCounterpartBalances'; palletCall: PalletBalancesCall }
  | { pallet: 'Configuration'; palletCall: PolkadotRuntimeParachainsConfigurationPalletCall }
  | { pallet: 'ParasShared'; palletCall: PolkadotRuntimeParachainsSharedPalletCall }
  | { pallet: 'ParaInclusion'; palletCall: PolkadotRuntimeParachainsInclusionPalletCall }
  | { pallet: 'ParaInherent'; palletCall: PolkadotRuntimeParachainsParasInherentPalletCall }
  | { pallet: 'Paras'; palletCall: PolkadotRuntimeParachainsParasPalletCall }
  | { pallet: 'Initializer'; palletCall: PolkadotRuntimeParachainsInitializerPalletCall }
  | { pallet: 'Hrmp'; palletCall: PolkadotRuntimeParachainsHrmpPalletCall }
  | { pallet: 'ParasDisputes'; palletCall: PolkadotRuntimeParachainsDisputesPalletCall }
  | { pallet: 'ParasSlashing'; palletCall: PolkadotRuntimeParachainsDisputesSlashingPalletCall }
  | { pallet: 'MessageQueue'; palletCall: PalletMessageQueueCall }
  | { pallet: 'OnDemandAssignmentProvider'; palletCall: PolkadotRuntimeParachainsAssignerOnDemandPalletCall }
  | { pallet: 'Registrar'; palletCall: PolkadotRuntimeCommonParasRegistrarPalletCall }
  | { pallet: 'Slots'; palletCall: PolkadotRuntimeCommonSlotsPalletCall }
  | { pallet: 'Auctions'; palletCall: PolkadotRuntimeCommonAuctionsPalletCall }
  | { pallet: 'Crowdloan'; palletCall: PolkadotRuntimeCommonCrowdloanPalletCall }
  | { pallet: 'Coretime'; palletCall: PolkadotRuntimeParachainsCoretimePalletCall }
  | { pallet: 'XcmPallet'; palletCall: PalletXcmCall }
  | { pallet: 'Beefy'; palletCall: PalletBeefyCall }
  | { pallet: 'IdentityMigrator'; palletCall: PolkadotRuntimeCommonIdentityMigratorPalletCall }
  | { pallet: 'ParasSudoWrapper'; palletCall: PolkadotRuntimeCommonParasSudoWrapperPalletCall }
  | { pallet: 'AssignedSlots'; palletCall: PolkadotRuntimeCommonAssignedSlotsPalletCall }
  | { pallet: 'ValidatorManager'; palletCall: RococoRuntimeValidatorManagerPalletCall }
  | { pallet: 'StateTrieMigration'; palletCall: PalletStateTrieMigrationCall }
  | { pallet: 'RootTesting'; palletCall: PalletRootTestingCall }
  | { pallet: 'Sudo'; palletCall: PalletSudoCall };

export type RococoRuntimeRuntimeCallLike =
  | { pallet: 'System'; palletCall: FrameSystemCallLike }
  | { pallet: 'Babe'; palletCall: PalletBabeCallLike }
  | { pallet: 'Timestamp'; palletCall: PalletTimestampCallLike }
  | { pallet: 'Indices'; palletCall: PalletIndicesCallLike }
  | { pallet: 'Balances'; palletCall: PalletBalancesCallLike }
  | { pallet: 'Session'; palletCall: PalletSessionCallLike }
  | { pallet: 'Grandpa'; palletCall: PalletGrandpaCallLike }
  | { pallet: 'Treasury'; palletCall: PalletTreasuryCallLike }
  | { pallet: 'ConvictionVoting'; palletCall: PalletConvictionVotingCallLike }
  | { pallet: 'Referenda'; palletCall: PalletReferendaCallLike }
  | { pallet: 'FellowshipCollective'; palletCall: PalletRankedCollectiveCallLike }
  | { pallet: 'FellowshipReferenda'; palletCall: PalletReferendaCallLike }
  | { pallet: 'Whitelist'; palletCall: PalletWhitelistCallLike }
  | { pallet: 'Claims'; palletCall: PolkadotRuntimeCommonClaimsPalletCallLike }
  | { pallet: 'Utility'; palletCall: PalletUtilityCallLike }
  | { pallet: 'Identity'; palletCall: PalletIdentityCallLike }
  | { pallet: 'Society'; palletCall: PalletSocietyCallLike }
  | { pallet: 'Recovery'; palletCall: PalletRecoveryCallLike }
  | { pallet: 'Vesting'; palletCall: PalletVestingCallLike }
  | { pallet: 'Scheduler'; palletCall: PalletSchedulerCallLike }
  | { pallet: 'Proxy'; palletCall: PalletProxyCallLike }
  | { pallet: 'Multisig'; palletCall: PalletMultisigCallLike }
  | { pallet: 'Preimage'; palletCall: PalletPreimageCallLike }
  | { pallet: 'AssetRate'; palletCall: PalletAssetRateCallLike }
  | { pallet: 'Bounties'; palletCall: PalletBountiesCallLike }
  | { pallet: 'ChildBounties'; palletCall: PalletChildBountiesCallLike }
  | { pallet: 'Nis'; palletCall: PalletNisCallLike }
  | { pallet: 'NisCounterpartBalances'; palletCall: PalletBalancesCallLike }
  | { pallet: 'Configuration'; palletCall: PolkadotRuntimeParachainsConfigurationPalletCallLike }
  | { pallet: 'ParasShared'; palletCall: PolkadotRuntimeParachainsSharedPalletCallLike }
  | { pallet: 'ParaInclusion'; palletCall: PolkadotRuntimeParachainsInclusionPalletCallLike }
  | { pallet: 'ParaInherent'; palletCall: PolkadotRuntimeParachainsParasInherentPalletCallLike }
  | { pallet: 'Paras'; palletCall: PolkadotRuntimeParachainsParasPalletCallLike }
  | { pallet: 'Initializer'; palletCall: PolkadotRuntimeParachainsInitializerPalletCallLike }
  | { pallet: 'Hrmp'; palletCall: PolkadotRuntimeParachainsHrmpPalletCallLike }
  | { pallet: 'ParasDisputes'; palletCall: PolkadotRuntimeParachainsDisputesPalletCallLike }
  | { pallet: 'ParasSlashing'; palletCall: PolkadotRuntimeParachainsDisputesSlashingPalletCallLike }
  | { pallet: 'MessageQueue'; palletCall: PalletMessageQueueCallLike }
  | { pallet: 'OnDemandAssignmentProvider'; palletCall: PolkadotRuntimeParachainsAssignerOnDemandPalletCallLike }
  | { pallet: 'Registrar'; palletCall: PolkadotRuntimeCommonParasRegistrarPalletCallLike }
  | { pallet: 'Slots'; palletCall: PolkadotRuntimeCommonSlotsPalletCallLike }
  | { pallet: 'Auctions'; palletCall: PolkadotRuntimeCommonAuctionsPalletCallLike }
  | { pallet: 'Crowdloan'; palletCall: PolkadotRuntimeCommonCrowdloanPalletCallLike }
  | { pallet: 'Coretime'; palletCall: PolkadotRuntimeParachainsCoretimePalletCallLike }
  | { pallet: 'XcmPallet'; palletCall: PalletXcmCallLike }
  | { pallet: 'Beefy'; palletCall: PalletBeefyCallLike }
  | { pallet: 'IdentityMigrator'; palletCall: PolkadotRuntimeCommonIdentityMigratorPalletCallLike }
  | { pallet: 'ParasSudoWrapper'; palletCall: PolkadotRuntimeCommonParasSudoWrapperPalletCallLike }
  | { pallet: 'AssignedSlots'; palletCall: PolkadotRuntimeCommonAssignedSlotsPalletCallLike }
  | { pallet: 'ValidatorManager'; palletCall: RococoRuntimeValidatorManagerPalletCallLike }
  | { pallet: 'StateTrieMigration'; palletCall: PalletStateTrieMigrationCallLike }
  | { pallet: 'RootTesting'; palletCall: PalletRootTestingCallLike }
  | { pallet: 'Sudo'; palletCall: PalletSudoCallLike };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type FrameSystemCall =
  /**
   * See [`Pallet::remark`].
   **/
  | { name: 'Remark'; params: { remark: Bytes } }
  /**
   * See [`Pallet::set_heap_pages`].
   **/
  | { name: 'SetHeapPages'; params: { pages: bigint } }
  /**
   * See [`Pallet::set_code`].
   **/
  | { name: 'SetCode'; params: { code: Bytes } }
  /**
   * See [`Pallet::set_code_without_checks`].
   **/
  | { name: 'SetCodeWithoutChecks'; params: { code: Bytes } }
  /**
   * See [`Pallet::set_storage`].
   **/
  | { name: 'SetStorage'; params: { items: Array<[Bytes, Bytes]> } }
  /**
   * See [`Pallet::kill_storage`].
   **/
  | { name: 'KillStorage'; params: { keys: Array<Bytes> } }
  /**
   * See [`Pallet::kill_prefix`].
   **/
  | { name: 'KillPrefix'; params: { prefix: Bytes; subkeys: number } }
  /**
   * See [`Pallet::remark_with_event`].
   **/
  | { name: 'RemarkWithEvent'; params: { remark: Bytes } }
  /**
   * See [`Pallet::authorize_upgrade`].
   **/
  | { name: 'AuthorizeUpgrade'; params: { codeHash: H256 } }
  /**
   * See [`Pallet::authorize_upgrade_without_checks`].
   **/
  | { name: 'AuthorizeUpgradeWithoutChecks'; params: { codeHash: H256 } }
  /**
   * See [`Pallet::apply_authorized_upgrade`].
   **/
  | { name: 'ApplyAuthorizedUpgrade'; params: { code: Bytes } };

export type FrameSystemCallLike =
  /**
   * See [`Pallet::remark`].
   **/
  | { name: 'Remark'; params: { remark: BytesLike } }
  /**
   * See [`Pallet::set_heap_pages`].
   **/
  | { name: 'SetHeapPages'; params: { pages: bigint } }
  /**
   * See [`Pallet::set_code`].
   **/
  | { name: 'SetCode'; params: { code: BytesLike } }
  /**
   * See [`Pallet::set_code_without_checks`].
   **/
  | { name: 'SetCodeWithoutChecks'; params: { code: BytesLike } }
  /**
   * See [`Pallet::set_storage`].
   **/
  | { name: 'SetStorage'; params: { items: Array<[BytesLike, BytesLike]> } }
  /**
   * See [`Pallet::kill_storage`].
   **/
  | { name: 'KillStorage'; params: { keys: Array<BytesLike> } }
  /**
   * See [`Pallet::kill_prefix`].
   **/
  | { name: 'KillPrefix'; params: { prefix: BytesLike; subkeys: number } }
  /**
   * See [`Pallet::remark_with_event`].
   **/
  | { name: 'RemarkWithEvent'; params: { remark: BytesLike } }
  /**
   * See [`Pallet::authorize_upgrade`].
   **/
  | { name: 'AuthorizeUpgrade'; params: { codeHash: H256 } }
  /**
   * See [`Pallet::authorize_upgrade_without_checks`].
   **/
  | { name: 'AuthorizeUpgradeWithoutChecks'; params: { codeHash: H256 } }
  /**
   * See [`Pallet::apply_authorized_upgrade`].
   **/
  | { name: 'ApplyAuthorizedUpgrade'; params: { code: BytesLike } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletBabeCall =
  /**
   * See [`Pallet::report_equivocation`].
   **/
  | {
      name: 'ReportEquivocation';
      params: { equivocationProof: SpConsensusSlotsEquivocationProof; keyOwnerProof: SpSessionMembershipProof };
    }
  /**
   * See [`Pallet::report_equivocation_unsigned`].
   **/
  | {
      name: 'ReportEquivocationUnsigned';
      params: { equivocationProof: SpConsensusSlotsEquivocationProof; keyOwnerProof: SpSessionMembershipProof };
    }
  /**
   * See [`Pallet::plan_config_change`].
   **/
  | { name: 'PlanConfigChange'; params: { config: SpConsensusBabeDigestsNextConfigDescriptor } };

export type PalletBabeCallLike =
  /**
   * See [`Pallet::report_equivocation`].
   **/
  | {
      name: 'ReportEquivocation';
      params: { equivocationProof: SpConsensusSlotsEquivocationProof; keyOwnerProof: SpSessionMembershipProof };
    }
  /**
   * See [`Pallet::report_equivocation_unsigned`].
   **/
  | {
      name: 'ReportEquivocationUnsigned';
      params: { equivocationProof: SpConsensusSlotsEquivocationProof; keyOwnerProof: SpSessionMembershipProof };
    }
  /**
   * See [`Pallet::plan_config_change`].
   **/
  | { name: 'PlanConfigChange'; params: { config: SpConsensusBabeDigestsNextConfigDescriptor } };

export type SpConsensusSlotsEquivocationProof = {
  offender: SpConsensusBabeAppPublic;
  slot: SpConsensusSlotsSlot;
  firstHeader: Header;
  secondHeader: Header;
};

export type SpConsensusBabeAppPublic = SpCoreSr25519Public;

export type SpCoreSr25519Public = FixedBytes<32>;

export type SpConsensusSlotsSlot = bigint;

export type SpSessionMembershipProof = { session: number; trieNodes: Array<Bytes>; validatorCount: number };

export type SpConsensusBabeDigestsNextConfigDescriptor = {
  tag: 'V1';
  value: { c: [bigint, bigint]; allowedSlots: SpConsensusBabeAllowedSlots };
};

export type SpConsensusBabeAllowedSlots =
  | 'PrimarySlots'
  | 'PrimaryAndSecondaryPlainSlots'
  | 'PrimaryAndSecondaryVRFSlots';

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletTimestampCall =
  /**
   * See [`Pallet::set`].
   **/
  { name: 'Set'; params: { now: bigint } };

export type PalletTimestampCallLike =
  /**
   * See [`Pallet::set`].
   **/
  { name: 'Set'; params: { now: bigint } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletIndicesCall =
  /**
   * See [`Pallet::claim`].
   **/
  | { name: 'Claim'; params: { index: number } }
  /**
   * See [`Pallet::transfer`].
   **/
  | { name: 'Transfer'; params: { new: MultiAddress; index: number } }
  /**
   * See [`Pallet::free`].
   **/
  | { name: 'Free'; params: { index: number } }
  /**
   * See [`Pallet::force_transfer`].
   **/
  | { name: 'ForceTransfer'; params: { new: MultiAddress; index: number; freeze: boolean } }
  /**
   * See [`Pallet::freeze`].
   **/
  | { name: 'Freeze'; params: { index: number } };

export type PalletIndicesCallLike =
  /**
   * See [`Pallet::claim`].
   **/
  | { name: 'Claim'; params: { index: number } }
  /**
   * See [`Pallet::transfer`].
   **/
  | { name: 'Transfer'; params: { new: MultiAddressLike; index: number } }
  /**
   * See [`Pallet::free`].
   **/
  | { name: 'Free'; params: { index: number } }
  /**
   * See [`Pallet::force_transfer`].
   **/
  | { name: 'ForceTransfer'; params: { new: MultiAddressLike; index: number; freeze: boolean } }
  /**
   * See [`Pallet::freeze`].
   **/
  | { name: 'Freeze'; params: { index: number } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletBalancesCall =
  /**
   * See [`Pallet::transfer_allow_death`].
   **/
  | { name: 'TransferAllowDeath'; params: { dest: MultiAddress; value: bigint } }
  /**
   * See [`Pallet::force_transfer`].
   **/
  | { name: 'ForceTransfer'; params: { source: MultiAddress; dest: MultiAddress; value: bigint } }
  /**
   * See [`Pallet::transfer_keep_alive`].
   **/
  | { name: 'TransferKeepAlive'; params: { dest: MultiAddress; value: bigint } }
  /**
   * See [`Pallet::transfer_all`].
   **/
  | { name: 'TransferAll'; params: { dest: MultiAddress; keepAlive: boolean } }
  /**
   * See [`Pallet::force_unreserve`].
   **/
  | { name: 'ForceUnreserve'; params: { who: MultiAddress; amount: bigint } }
  /**
   * See [`Pallet::upgrade_accounts`].
   **/
  | { name: 'UpgradeAccounts'; params: { who: Array<AccountId32> } }
  /**
   * See [`Pallet::force_set_balance`].
   **/
  | { name: 'ForceSetBalance'; params: { who: MultiAddress; newFree: bigint } }
  /**
   * See [`Pallet::force_adjust_total_issuance`].
   **/
  | { name: 'ForceAdjustTotalIssuance'; params: { direction: PalletBalancesAdjustmentDirection; delta: bigint } };

export type PalletBalancesCallLike =
  /**
   * See [`Pallet::transfer_allow_death`].
   **/
  | { name: 'TransferAllowDeath'; params: { dest: MultiAddressLike; value: bigint } }
  /**
   * See [`Pallet::force_transfer`].
   **/
  | { name: 'ForceTransfer'; params: { source: MultiAddressLike; dest: MultiAddressLike; value: bigint } }
  /**
   * See [`Pallet::transfer_keep_alive`].
   **/
  | { name: 'TransferKeepAlive'; params: { dest: MultiAddressLike; value: bigint } }
  /**
   * See [`Pallet::transfer_all`].
   **/
  | { name: 'TransferAll'; params: { dest: MultiAddressLike; keepAlive: boolean } }
  /**
   * See [`Pallet::force_unreserve`].
   **/
  | { name: 'ForceUnreserve'; params: { who: MultiAddressLike; amount: bigint } }
  /**
   * See [`Pallet::upgrade_accounts`].
   **/
  | { name: 'UpgradeAccounts'; params: { who: Array<AccountId32Like> } }
  /**
   * See [`Pallet::force_set_balance`].
   **/
  | { name: 'ForceSetBalance'; params: { who: MultiAddressLike; newFree: bigint } }
  /**
   * See [`Pallet::force_adjust_total_issuance`].
   **/
  | { name: 'ForceAdjustTotalIssuance'; params: { direction: PalletBalancesAdjustmentDirection; delta: bigint } };

export type PalletBalancesAdjustmentDirection = 'Increase' | 'Decrease';

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletSessionCall =
  /**
   * See [`Pallet::set_keys`].
   **/
  | { name: 'SetKeys'; params: { keys: RococoRuntimeSessionKeys; proof: Bytes } }
  /**
   * See [`Pallet::purge_keys`].
   **/
  | { name: 'PurgeKeys' };

export type PalletSessionCallLike =
  /**
   * See [`Pallet::set_keys`].
   **/
  | { name: 'SetKeys'; params: { keys: RococoRuntimeSessionKeys; proof: BytesLike } }
  /**
   * See [`Pallet::purge_keys`].
   **/
  | { name: 'PurgeKeys' };

export type RococoRuntimeSessionKeys = {
  grandpa: SpConsensusGrandpaAppPublic;
  babe: SpConsensusBabeAppPublic;
  paraValidator: PolkadotPrimitivesV6ValidatorAppPublic;
  paraAssignment: PolkadotPrimitivesV6AssignmentAppPublic;
  authorityDiscovery: SpAuthorityDiscoveryAppPublic;
  beefy: SpConsensusBeefyEcdsaCryptoPublic;
};

export type PolkadotPrimitivesV6ValidatorAppPublic = SpCoreSr25519Public;

export type PolkadotPrimitivesV6AssignmentAppPublic = SpCoreSr25519Public;

export type SpAuthorityDiscoveryAppPublic = SpCoreSr25519Public;

export type SpConsensusBeefyEcdsaCryptoPublic = SpCoreEcdsaPublic;

export type SpCoreEcdsaPublic = FixedBytes<33>;

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletGrandpaCall =
  /**
   * See [`Pallet::report_equivocation`].
   **/
  | {
      name: 'ReportEquivocation';
      params: { equivocationProof: SpConsensusGrandpaEquivocationProof; keyOwnerProof: SpSessionMembershipProof };
    }
  /**
   * See [`Pallet::report_equivocation_unsigned`].
   **/
  | {
      name: 'ReportEquivocationUnsigned';
      params: { equivocationProof: SpConsensusGrandpaEquivocationProof; keyOwnerProof: SpSessionMembershipProof };
    }
  /**
   * See [`Pallet::note_stalled`].
   **/
  | { name: 'NoteStalled'; params: { delay: number; bestFinalizedBlockNumber: number } };

export type PalletGrandpaCallLike =
  /**
   * See [`Pallet::report_equivocation`].
   **/
  | {
      name: 'ReportEquivocation';
      params: { equivocationProof: SpConsensusGrandpaEquivocationProof; keyOwnerProof: SpSessionMembershipProof };
    }
  /**
   * See [`Pallet::report_equivocation_unsigned`].
   **/
  | {
      name: 'ReportEquivocationUnsigned';
      params: { equivocationProof: SpConsensusGrandpaEquivocationProof; keyOwnerProof: SpSessionMembershipProof };
    }
  /**
   * See [`Pallet::note_stalled`].
   **/
  | { name: 'NoteStalled'; params: { delay: number; bestFinalizedBlockNumber: number } };

export type SpConsensusGrandpaEquivocationProof = { setId: bigint; equivocation: SpConsensusGrandpaEquivocation };

export type SpConsensusGrandpaEquivocation =
  | { tag: 'Prevote'; value: FinalityGrandpaEquivocation }
  | { tag: 'Precommit'; value: FinalityGrandpaEquivocationPrecommit };

export type FinalityGrandpaEquivocation = {
  roundNumber: bigint;
  identity: SpConsensusGrandpaAppPublic;
  first: [FinalityGrandpaPrevote, SpConsensusGrandpaAppSignature];
  second: [FinalityGrandpaPrevote, SpConsensusGrandpaAppSignature];
};

export type FinalityGrandpaPrevote = { targetHash: H256; targetNumber: number };

export type SpConsensusGrandpaAppSignature = SpCoreEd25519Signature;

export type SpCoreEd25519Signature = FixedBytes<64>;

export type FinalityGrandpaEquivocationPrecommit = {
  roundNumber: bigint;
  identity: SpConsensusGrandpaAppPublic;
  first: [FinalityGrandpaPrecommit, SpConsensusGrandpaAppSignature];
  second: [FinalityGrandpaPrecommit, SpConsensusGrandpaAppSignature];
};

export type FinalityGrandpaPrecommit = { targetHash: H256; targetNumber: number };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletTreasuryCall =
  /**
   * See [`Pallet::propose_spend`].
   **/
  | { name: 'ProposeSpend'; params: { value: bigint; beneficiary: MultiAddress } }
  /**
   * See [`Pallet::reject_proposal`].
   **/
  | { name: 'RejectProposal'; params: { proposalId: number } }
  /**
   * See [`Pallet::approve_proposal`].
   **/
  | { name: 'ApproveProposal'; params: { proposalId: number } }
  /**
   * See [`Pallet::spend_local`].
   **/
  | { name: 'SpendLocal'; params: { amount: bigint; beneficiary: MultiAddress } }
  /**
   * See [`Pallet::remove_approval`].
   **/
  | { name: 'RemoveApproval'; params: { proposalId: number } }
  /**
   * See [`Pallet::spend`].
   **/
  | {
      name: 'Spend';
      params: {
        assetKind: PolkadotRuntimeCommonImplsVersionedLocatableAsset;
        amount: bigint;
        beneficiary: XcmVersionedLocation;
        validFrom?: number | undefined;
      };
    }
  /**
   * See [`Pallet::payout`].
   **/
  | { name: 'Payout'; params: { index: number } }
  /**
   * See [`Pallet::check_status`].
   **/
  | { name: 'CheckStatus'; params: { index: number } }
  /**
   * See [`Pallet::void_spend`].
   **/
  | { name: 'VoidSpend'; params: { index: number } };

export type PalletTreasuryCallLike =
  /**
   * See [`Pallet::propose_spend`].
   **/
  | { name: 'ProposeSpend'; params: { value: bigint; beneficiary: MultiAddressLike } }
  /**
   * See [`Pallet::reject_proposal`].
   **/
  | { name: 'RejectProposal'; params: { proposalId: number } }
  /**
   * See [`Pallet::approve_proposal`].
   **/
  | { name: 'ApproveProposal'; params: { proposalId: number } }
  /**
   * See [`Pallet::spend_local`].
   **/
  | { name: 'SpendLocal'; params: { amount: bigint; beneficiary: MultiAddressLike } }
  /**
   * See [`Pallet::remove_approval`].
   **/
  | { name: 'RemoveApproval'; params: { proposalId: number } }
  /**
   * See [`Pallet::spend`].
   **/
  | {
      name: 'Spend';
      params: {
        assetKind: PolkadotRuntimeCommonImplsVersionedLocatableAsset;
        amount: bigint;
        beneficiary: XcmVersionedLocation;
        validFrom?: number | undefined;
      };
    }
  /**
   * See [`Pallet::payout`].
   **/
  | { name: 'Payout'; params: { index: number } }
  /**
   * See [`Pallet::check_status`].
   **/
  | { name: 'CheckStatus'; params: { index: number } }
  /**
   * See [`Pallet::void_spend`].
   **/
  | { name: 'VoidSpend'; params: { index: number } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletConvictionVotingCall =
  /**
   * See [`Pallet::vote`].
   **/
  | { name: 'Vote'; params: { pollIndex: number; vote: PalletConvictionVotingVoteAccountVote } }
  /**
   * See [`Pallet::delegate`].
   **/
  | {
      name: 'Delegate';
      params: { class: number; to: MultiAddress; conviction: PalletConvictionVotingConviction; balance: bigint };
    }
  /**
   * See [`Pallet::undelegate`].
   **/
  | { name: 'Undelegate'; params: { class: number } }
  /**
   * See [`Pallet::unlock`].
   **/
  | { name: 'Unlock'; params: { class: number; target: MultiAddress } }
  /**
   * See [`Pallet::remove_vote`].
   **/
  | { name: 'RemoveVote'; params: { class?: number | undefined; index: number } }
  /**
   * See [`Pallet::remove_other_vote`].
   **/
  | { name: 'RemoveOtherVote'; params: { target: MultiAddress; class: number; index: number } };

export type PalletConvictionVotingCallLike =
  /**
   * See [`Pallet::vote`].
   **/
  | { name: 'Vote'; params: { pollIndex: number; vote: PalletConvictionVotingVoteAccountVote } }
  /**
   * See [`Pallet::delegate`].
   **/
  | {
      name: 'Delegate';
      params: { class: number; to: MultiAddressLike; conviction: PalletConvictionVotingConviction; balance: bigint };
    }
  /**
   * See [`Pallet::undelegate`].
   **/
  | { name: 'Undelegate'; params: { class: number } }
  /**
   * See [`Pallet::unlock`].
   **/
  | { name: 'Unlock'; params: { class: number; target: MultiAddressLike } }
  /**
   * See [`Pallet::remove_vote`].
   **/
  | { name: 'RemoveVote'; params: { class?: number | undefined; index: number } }
  /**
   * See [`Pallet::remove_other_vote`].
   **/
  | { name: 'RemoveOtherVote'; params: { target: MultiAddressLike; class: number; index: number } };

export type PalletConvictionVotingVoteAccountVote =
  | { tag: 'Standard'; value: { vote: PalletConvictionVotingVote; balance: bigint } }
  | { tag: 'Split'; value: { aye: bigint; nay: bigint } }
  | { tag: 'SplitAbstain'; value: { aye: bigint; nay: bigint; abstain: bigint } };

export type PalletConvictionVotingVote = number;

export type PalletConvictionVotingConviction =
  | 'None'
  | 'Locked1x'
  | 'Locked2x'
  | 'Locked3x'
  | 'Locked4x'
  | 'Locked5x'
  | 'Locked6x';

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletReferendaCall =
  /**
   * See [`Pallet::submit`].
   **/
  | {
      name: 'Submit';
      params: {
        proposalOrigin: RococoRuntimeOriginCaller;
        proposal: FrameSupportPreimagesBounded;
        enactmentMoment: FrameSupportScheduleDispatchTime;
      };
    }
  /**
   * See [`Pallet::place_decision_deposit`].
   **/
  | { name: 'PlaceDecisionDeposit'; params: { index: number } }
  /**
   * See [`Pallet::refund_decision_deposit`].
   **/
  | { name: 'RefundDecisionDeposit'; params: { index: number } }
  /**
   * See [`Pallet::cancel`].
   **/
  | { name: 'Cancel'; params: { index: number } }
  /**
   * See [`Pallet::kill`].
   **/
  | { name: 'Kill'; params: { index: number } }
  /**
   * See [`Pallet::nudge_referendum`].
   **/
  | { name: 'NudgeReferendum'; params: { index: number } }
  /**
   * See [`Pallet::one_fewer_deciding`].
   **/
  | { name: 'OneFewerDeciding'; params: { track: number } }
  /**
   * See [`Pallet::refund_submission_deposit`].
   **/
  | { name: 'RefundSubmissionDeposit'; params: { index: number } }
  /**
   * See [`Pallet::set_metadata`].
   **/
  | { name: 'SetMetadata'; params: { index: number; maybeHash?: H256 | undefined } };

export type PalletReferendaCallLike =
  /**
   * See [`Pallet::submit`].
   **/
  | {
      name: 'Submit';
      params: {
        proposalOrigin: RococoRuntimeOriginCaller;
        proposal: FrameSupportPreimagesBounded;
        enactmentMoment: FrameSupportScheduleDispatchTime;
      };
    }
  /**
   * See [`Pallet::place_decision_deposit`].
   **/
  | { name: 'PlaceDecisionDeposit'; params: { index: number } }
  /**
   * See [`Pallet::refund_decision_deposit`].
   **/
  | { name: 'RefundDecisionDeposit'; params: { index: number } }
  /**
   * See [`Pallet::cancel`].
   **/
  | { name: 'Cancel'; params: { index: number } }
  /**
   * See [`Pallet::kill`].
   **/
  | { name: 'Kill'; params: { index: number } }
  /**
   * See [`Pallet::nudge_referendum`].
   **/
  | { name: 'NudgeReferendum'; params: { index: number } }
  /**
   * See [`Pallet::one_fewer_deciding`].
   **/
  | { name: 'OneFewerDeciding'; params: { track: number } }
  /**
   * See [`Pallet::refund_submission_deposit`].
   **/
  | { name: 'RefundSubmissionDeposit'; params: { index: number } }
  /**
   * See [`Pallet::set_metadata`].
   **/
  | { name: 'SetMetadata'; params: { index: number; maybeHash?: H256 | undefined } };

export type RococoRuntimeOriginCaller =
  | { tag: 'System'; value: FrameSupportDispatchRawOrigin }
  | { tag: 'Origins'; value: RococoRuntimeGovernanceOriginsPalletCustomOriginsOrigin }
  | { tag: 'ParachainsOrigin'; value: PolkadotRuntimeParachainsOriginPalletOrigin }
  | { tag: 'XcmPallet'; value: PalletXcmOrigin }
  | { tag: 'Void'; value: SpCoreVoid };

export type FrameSupportDispatchRawOrigin = { tag: 'Root' } | { tag: 'Signed'; value: AccountId32 } | { tag: 'None' };

export type RococoRuntimeGovernanceOriginsPalletCustomOriginsOrigin =
  | 'StakingAdmin'
  | 'Treasurer'
  | 'FellowshipAdmin'
  | 'GeneralAdmin'
  | 'AuctionAdmin'
  | 'LeaseAdmin'
  | 'ReferendumCanceller'
  | 'ReferendumKiller'
  | 'SmallTipper'
  | 'BigTipper'
  | 'SmallSpender'
  | 'MediumSpender'
  | 'BigSpender'
  | 'WhitelistedCaller'
  | 'FellowshipInitiates'
  | 'Fellows'
  | 'FellowshipExperts'
  | 'FellowshipMasters'
  | 'Fellowship1Dan'
  | 'Fellowship2Dan'
  | 'Fellowship3Dan'
  | 'Fellowship4Dan'
  | 'Fellowship5Dan'
  | 'Fellowship6Dan'
  | 'Fellowship7Dan'
  | 'Fellowship8Dan'
  | 'Fellowship9Dan';

export type PolkadotRuntimeParachainsOriginPalletOrigin = {
  tag: 'Parachain';
  value: PolkadotParachainPrimitivesPrimitivesId;
};

export type PolkadotParachainPrimitivesPrimitivesId = number;

export type PalletXcmOrigin =
  | { tag: 'Xcm'; value: StagingXcmV4Location }
  | { tag: 'Response'; value: StagingXcmV4Location };

export type SpCoreVoid = null;

export type FrameSupportScheduleDispatchTime = { tag: 'At'; value: number } | { tag: 'After'; value: number };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletRankedCollectiveCall =
  /**
   * See [`Pallet::add_member`].
   **/
  | { name: 'AddMember'; params: { who: MultiAddress } }
  /**
   * See [`Pallet::promote_member`].
   **/
  | { name: 'PromoteMember'; params: { who: MultiAddress } }
  /**
   * See [`Pallet::demote_member`].
   **/
  | { name: 'DemoteMember'; params: { who: MultiAddress } }
  /**
   * See [`Pallet::remove_member`].
   **/
  | { name: 'RemoveMember'; params: { who: MultiAddress; minRank: number } }
  /**
   * See [`Pallet::vote`].
   **/
  | { name: 'Vote'; params: { poll: number; aye: boolean } }
  /**
   * See [`Pallet::cleanup_poll`].
   **/
  | { name: 'CleanupPoll'; params: { pollIndex: number; max: number } }
  /**
   * See [`Pallet::exchange_member`].
   **/
  | { name: 'ExchangeMember'; params: { who: MultiAddress; newWho: MultiAddress } };

export type PalletRankedCollectiveCallLike =
  /**
   * See [`Pallet::add_member`].
   **/
  | { name: 'AddMember'; params: { who: MultiAddressLike } }
  /**
   * See [`Pallet::promote_member`].
   **/
  | { name: 'PromoteMember'; params: { who: MultiAddressLike } }
  /**
   * See [`Pallet::demote_member`].
   **/
  | { name: 'DemoteMember'; params: { who: MultiAddressLike } }
  /**
   * See [`Pallet::remove_member`].
   **/
  | { name: 'RemoveMember'; params: { who: MultiAddressLike; minRank: number } }
  /**
   * See [`Pallet::vote`].
   **/
  | { name: 'Vote'; params: { poll: number; aye: boolean } }
  /**
   * See [`Pallet::cleanup_poll`].
   **/
  | { name: 'CleanupPoll'; params: { pollIndex: number; max: number } }
  /**
   * See [`Pallet::exchange_member`].
   **/
  | { name: 'ExchangeMember'; params: { who: MultiAddressLike; newWho: MultiAddressLike } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletWhitelistCall =
  /**
   * See [`Pallet::whitelist_call`].
   **/
  | { name: 'WhitelistCall'; params: { callHash: H256 } }
  /**
   * See [`Pallet::remove_whitelisted_call`].
   **/
  | { name: 'RemoveWhitelistedCall'; params: { callHash: H256 } }
  /**
   * See [`Pallet::dispatch_whitelisted_call`].
   **/
  | {
      name: 'DispatchWhitelistedCall';
      params: { callHash: H256; callEncodedLen: number; callWeightWitness: SpWeightsWeightV2Weight };
    }
  /**
   * See [`Pallet::dispatch_whitelisted_call_with_preimage`].
   **/
  | { name: 'DispatchWhitelistedCallWithPreimage'; params: { call: RococoRuntimeRuntimeCall } };

export type PalletWhitelistCallLike =
  /**
   * See [`Pallet::whitelist_call`].
   **/
  | { name: 'WhitelistCall'; params: { callHash: H256 } }
  /**
   * See [`Pallet::remove_whitelisted_call`].
   **/
  | { name: 'RemoveWhitelistedCall'; params: { callHash: H256 } }
  /**
   * See [`Pallet::dispatch_whitelisted_call`].
   **/
  | {
      name: 'DispatchWhitelistedCall';
      params: { callHash: H256; callEncodedLen: number; callWeightWitness: SpWeightsWeightV2Weight };
    }
  /**
   * See [`Pallet::dispatch_whitelisted_call_with_preimage`].
   **/
  | { name: 'DispatchWhitelistedCallWithPreimage'; params: { call: RococoRuntimeRuntimeCallLike } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PolkadotRuntimeCommonClaimsPalletCall =
  /**
   * See [`Pallet::claim`].
   **/
  | { name: 'Claim'; params: { dest: AccountId32; ethereumSignature: PolkadotRuntimeCommonClaimsEcdsaSignature } }
  /**
   * See [`Pallet::mint_claim`].
   **/
  | {
      name: 'MintClaim';
      params: {
        who: EthereumAddress;
        value: bigint;
        vestingSchedule?: [bigint, bigint, number] | undefined;
        statement?: PolkadotRuntimeCommonClaimsStatementKind | undefined;
      };
    }
  /**
   * See [`Pallet::claim_attest`].
   **/
  | {
      name: 'ClaimAttest';
      params: { dest: AccountId32; ethereumSignature: PolkadotRuntimeCommonClaimsEcdsaSignature; statement: Bytes };
    }
  /**
   * See [`Pallet::attest`].
   **/
  | { name: 'Attest'; params: { statement: Bytes } }
  /**
   * See [`Pallet::move_claim`].
   **/
  | {
      name: 'MoveClaim';
      params: { old: EthereumAddress; new: EthereumAddress; maybePreclaim?: AccountId32 | undefined };
    };

export type PolkadotRuntimeCommonClaimsPalletCallLike =
  /**
   * See [`Pallet::claim`].
   **/
  | { name: 'Claim'; params: { dest: AccountId32Like; ethereumSignature: PolkadotRuntimeCommonClaimsEcdsaSignature } }
  /**
   * See [`Pallet::mint_claim`].
   **/
  | {
      name: 'MintClaim';
      params: {
        who: EthereumAddressLike;
        value: bigint;
        vestingSchedule?: [bigint, bigint, number] | undefined;
        statement?: PolkadotRuntimeCommonClaimsStatementKind | undefined;
      };
    }
  /**
   * See [`Pallet::claim_attest`].
   **/
  | {
      name: 'ClaimAttest';
      params: {
        dest: AccountId32Like;
        ethereumSignature: PolkadotRuntimeCommonClaimsEcdsaSignature;
        statement: BytesLike;
      };
    }
  /**
   * See [`Pallet::attest`].
   **/
  | { name: 'Attest'; params: { statement: BytesLike } }
  /**
   * See [`Pallet::move_claim`].
   **/
  | {
      name: 'MoveClaim';
      params: { old: EthereumAddressLike; new: EthereumAddressLike; maybePreclaim?: AccountId32Like | undefined };
    };

export type PolkadotRuntimeCommonClaimsEcdsaSignature = FixedBytes<65>;

export type PolkadotRuntimeCommonClaimsStatementKind = 'Regular' | 'Saft';

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletUtilityCall =
  /**
   * See [`Pallet::batch`].
   **/
  | { name: 'Batch'; params: { calls: Array<RococoRuntimeRuntimeCall> } }
  /**
   * See [`Pallet::as_derivative`].
   **/
  | { name: 'AsDerivative'; params: { index: number; call: RococoRuntimeRuntimeCall } }
  /**
   * See [`Pallet::batch_all`].
   **/
  | { name: 'BatchAll'; params: { calls: Array<RococoRuntimeRuntimeCall> } }
  /**
   * See [`Pallet::dispatch_as`].
   **/
  | { name: 'DispatchAs'; params: { asOrigin: RococoRuntimeOriginCaller; call: RococoRuntimeRuntimeCall } }
  /**
   * See [`Pallet::force_batch`].
   **/
  | { name: 'ForceBatch'; params: { calls: Array<RococoRuntimeRuntimeCall> } }
  /**
   * See [`Pallet::with_weight`].
   **/
  | { name: 'WithWeight'; params: { call: RococoRuntimeRuntimeCall; weight: SpWeightsWeightV2Weight } };

export type PalletUtilityCallLike =
  /**
   * See [`Pallet::batch`].
   **/
  | { name: 'Batch'; params: { calls: Array<RococoRuntimeRuntimeCallLike> } }
  /**
   * See [`Pallet::as_derivative`].
   **/
  | { name: 'AsDerivative'; params: { index: number; call: RococoRuntimeRuntimeCallLike } }
  /**
   * See [`Pallet::batch_all`].
   **/
  | { name: 'BatchAll'; params: { calls: Array<RococoRuntimeRuntimeCallLike> } }
  /**
   * See [`Pallet::dispatch_as`].
   **/
  | { name: 'DispatchAs'; params: { asOrigin: RococoRuntimeOriginCaller; call: RococoRuntimeRuntimeCallLike } }
  /**
   * See [`Pallet::force_batch`].
   **/
  | { name: 'ForceBatch'; params: { calls: Array<RococoRuntimeRuntimeCallLike> } }
  /**
   * See [`Pallet::with_weight`].
   **/
  | { name: 'WithWeight'; params: { call: RococoRuntimeRuntimeCallLike; weight: SpWeightsWeightV2Weight } };

/**
 * Identity pallet declaration.
 **/
export type PalletIdentityCall =
  /**
   * See [`Pallet::add_registrar`].
   **/
  | { name: 'AddRegistrar'; params: { account: MultiAddress } }
  /**
   * See [`Pallet::set_identity`].
   **/
  | { name: 'SetIdentity'; params: { info: PalletIdentityLegacyIdentityInfo } }
  /**
   * See [`Pallet::set_subs`].
   **/
  | { name: 'SetSubs'; params: { subs: Array<[AccountId32, Data]> } }
  /**
   * See [`Pallet::clear_identity`].
   **/
  | { name: 'ClearIdentity' }
  /**
   * See [`Pallet::request_judgement`].
   **/
  | { name: 'RequestJudgement'; params: { regIndex: number; maxFee: bigint } }
  /**
   * See [`Pallet::cancel_request`].
   **/
  | { name: 'CancelRequest'; params: { regIndex: number } }
  /**
   * See [`Pallet::set_fee`].
   **/
  | { name: 'SetFee'; params: { index: number; fee: bigint } }
  /**
   * See [`Pallet::set_account_id`].
   **/
  | { name: 'SetAccountId'; params: { index: number; new: MultiAddress } }
  /**
   * See [`Pallet::set_fields`].
   **/
  | { name: 'SetFields'; params: { index: number; fields: bigint } }
  /**
   * See [`Pallet::provide_judgement`].
   **/
  | {
      name: 'ProvideJudgement';
      params: { regIndex: number; target: MultiAddress; judgement: PalletIdentityJudgement; identity: H256 };
    }
  /**
   * See [`Pallet::kill_identity`].
   **/
  | { name: 'KillIdentity'; params: { target: MultiAddress } }
  /**
   * See [`Pallet::add_sub`].
   **/
  | { name: 'AddSub'; params: { sub: MultiAddress; data: Data } }
  /**
   * See [`Pallet::rename_sub`].
   **/
  | { name: 'RenameSub'; params: { sub: MultiAddress; data: Data } }
  /**
   * See [`Pallet::remove_sub`].
   **/
  | { name: 'RemoveSub'; params: { sub: MultiAddress } }
  /**
   * See [`Pallet::quit_sub`].
   **/
  | { name: 'QuitSub' }
  /**
   * See [`Pallet::add_username_authority`].
   **/
  | { name: 'AddUsernameAuthority'; params: { authority: MultiAddress; suffix: Bytes; allocation: number } }
  /**
   * See [`Pallet::remove_username_authority`].
   **/
  | { name: 'RemoveUsernameAuthority'; params: { authority: MultiAddress } }
  /**
   * See [`Pallet::set_username_for`].
   **/
  | {
      name: 'SetUsernameFor';
      params: { who: MultiAddress; username: Bytes; signature?: SpRuntimeMultiSignature | undefined };
    }
  /**
   * See [`Pallet::accept_username`].
   **/
  | { name: 'AcceptUsername'; params: { username: Bytes } }
  /**
   * See [`Pallet::remove_expired_approval`].
   **/
  | { name: 'RemoveExpiredApproval'; params: { username: Bytes } }
  /**
   * See [`Pallet::set_primary_username`].
   **/
  | { name: 'SetPrimaryUsername'; params: { username: Bytes } }
  /**
   * See [`Pallet::remove_dangling_username`].
   **/
  | { name: 'RemoveDanglingUsername'; params: { username: Bytes } };

export type PalletIdentityCallLike =
  /**
   * See [`Pallet::add_registrar`].
   **/
  | { name: 'AddRegistrar'; params: { account: MultiAddressLike } }
  /**
   * See [`Pallet::set_identity`].
   **/
  | { name: 'SetIdentity'; params: { info: PalletIdentityLegacyIdentityInfo } }
  /**
   * See [`Pallet::set_subs`].
   **/
  | { name: 'SetSubs'; params: { subs: Array<[AccountId32Like, Data]> } }
  /**
   * See [`Pallet::clear_identity`].
   **/
  | { name: 'ClearIdentity' }
  /**
   * See [`Pallet::request_judgement`].
   **/
  | { name: 'RequestJudgement'; params: { regIndex: number; maxFee: bigint } }
  /**
   * See [`Pallet::cancel_request`].
   **/
  | { name: 'CancelRequest'; params: { regIndex: number } }
  /**
   * See [`Pallet::set_fee`].
   **/
  | { name: 'SetFee'; params: { index: number; fee: bigint } }
  /**
   * See [`Pallet::set_account_id`].
   **/
  | { name: 'SetAccountId'; params: { index: number; new: MultiAddressLike } }
  /**
   * See [`Pallet::set_fields`].
   **/
  | { name: 'SetFields'; params: { index: number; fields: bigint } }
  /**
   * See [`Pallet::provide_judgement`].
   **/
  | {
      name: 'ProvideJudgement';
      params: { regIndex: number; target: MultiAddressLike; judgement: PalletIdentityJudgement; identity: H256 };
    }
  /**
   * See [`Pallet::kill_identity`].
   **/
  | { name: 'KillIdentity'; params: { target: MultiAddressLike } }
  /**
   * See [`Pallet::add_sub`].
   **/
  | { name: 'AddSub'; params: { sub: MultiAddressLike; data: Data } }
  /**
   * See [`Pallet::rename_sub`].
   **/
  | { name: 'RenameSub'; params: { sub: MultiAddressLike; data: Data } }
  /**
   * See [`Pallet::remove_sub`].
   **/
  | { name: 'RemoveSub'; params: { sub: MultiAddressLike } }
  /**
   * See [`Pallet::quit_sub`].
   **/
  | { name: 'QuitSub' }
  /**
   * See [`Pallet::add_username_authority`].
   **/
  | { name: 'AddUsernameAuthority'; params: { authority: MultiAddressLike; suffix: BytesLike; allocation: number } }
  /**
   * See [`Pallet::remove_username_authority`].
   **/
  | { name: 'RemoveUsernameAuthority'; params: { authority: MultiAddressLike } }
  /**
   * See [`Pallet::set_username_for`].
   **/
  | {
      name: 'SetUsernameFor';
      params: { who: MultiAddressLike; username: BytesLike; signature?: SpRuntimeMultiSignature | undefined };
    }
  /**
   * See [`Pallet::accept_username`].
   **/
  | { name: 'AcceptUsername'; params: { username: BytesLike } }
  /**
   * See [`Pallet::remove_expired_approval`].
   **/
  | { name: 'RemoveExpiredApproval'; params: { username: BytesLike } }
  /**
   * See [`Pallet::set_primary_username`].
   **/
  | { name: 'SetPrimaryUsername'; params: { username: BytesLike } }
  /**
   * See [`Pallet::remove_dangling_username`].
   **/
  | { name: 'RemoveDanglingUsername'; params: { username: BytesLike } };

export type PalletIdentityLegacyIdentityInfo = {
  additional: Array<[Data, Data]>;
  display: Data;
  legal: Data;
  web: Data;
  riot: Data;
  email: Data;
  pgpFingerprint?: FixedBytes<20> | undefined;
  image: Data;
  twitter: Data;
};

export type PalletIdentityJudgement =
  | { tag: 'Unknown' }
  | { tag: 'FeePaid'; value: bigint }
  | { tag: 'Reasonable' }
  | { tag: 'KnownGood' }
  | { tag: 'OutOfDate' }
  | { tag: 'LowQuality' }
  | { tag: 'Erroneous' };

export type SpRuntimeMultiSignature =
  | { tag: 'Ed25519'; value: SpCoreEd25519Signature }
  | { tag: 'Sr25519'; value: SpCoreSr25519Signature }
  | { tag: 'Ecdsa'; value: SpCoreEcdsaSignature };

export type SpCoreSr25519Signature = FixedBytes<64>;

export type SpCoreEcdsaSignature = FixedBytes<65>;

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletSocietyCall =
  /**
   * See [`Pallet::bid`].
   **/
  | { name: 'Bid'; params: { value: bigint } }
  /**
   * See [`Pallet::unbid`].
   **/
  | { name: 'Unbid' }
  /**
   * See [`Pallet::vouch`].
   **/
  | { name: 'Vouch'; params: { who: MultiAddress; value: bigint; tip: bigint } }
  /**
   * See [`Pallet::unvouch`].
   **/
  | { name: 'Unvouch' }
  /**
   * See [`Pallet::vote`].
   **/
  | { name: 'Vote'; params: { candidate: MultiAddress; approve: boolean } }
  /**
   * See [`Pallet::defender_vote`].
   **/
  | { name: 'DefenderVote'; params: { approve: boolean } }
  /**
   * See [`Pallet::payout`].
   **/
  | { name: 'Payout' }
  /**
   * See [`Pallet::waive_repay`].
   **/
  | { name: 'WaiveRepay'; params: { amount: bigint } }
  /**
   * See [`Pallet::found_society`].
   **/
  | {
      name: 'FoundSociety';
      params: {
        founder: MultiAddress;
        maxMembers: number;
        maxIntake: number;
        maxStrikes: number;
        candidateDeposit: bigint;
        rules: Bytes;
      };
    }
  /**
   * See [`Pallet::dissolve`].
   **/
  | { name: 'Dissolve' }
  /**
   * See [`Pallet::judge_suspended_member`].
   **/
  | { name: 'JudgeSuspendedMember'; params: { who: MultiAddress; forgive: boolean } }
  /**
   * See [`Pallet::set_parameters`].
   **/
  | {
      name: 'SetParameters';
      params: { maxMembers: number; maxIntake: number; maxStrikes: number; candidateDeposit: bigint };
    }
  /**
   * See [`Pallet::punish_skeptic`].
   **/
  | { name: 'PunishSkeptic' }
  /**
   * See [`Pallet::claim_membership`].
   **/
  | { name: 'ClaimMembership' }
  /**
   * See [`Pallet::bestow_membership`].
   **/
  | { name: 'BestowMembership'; params: { candidate: AccountId32 } }
  /**
   * See [`Pallet::kick_candidate`].
   **/
  | { name: 'KickCandidate'; params: { candidate: AccountId32 } }
  /**
   * See [`Pallet::resign_candidacy`].
   **/
  | { name: 'ResignCandidacy' }
  /**
   * See [`Pallet::drop_candidate`].
   **/
  | { name: 'DropCandidate'; params: { candidate: AccountId32 } }
  /**
   * See [`Pallet::cleanup_candidacy`].
   **/
  | { name: 'CleanupCandidacy'; params: { candidate: AccountId32; max: number } }
  /**
   * See [`Pallet::cleanup_challenge`].
   **/
  | { name: 'CleanupChallenge'; params: { challengeRound: number; max: number } };

export type PalletSocietyCallLike =
  /**
   * See [`Pallet::bid`].
   **/
  | { name: 'Bid'; params: { value: bigint } }
  /**
   * See [`Pallet::unbid`].
   **/
  | { name: 'Unbid' }
  /**
   * See [`Pallet::vouch`].
   **/
  | { name: 'Vouch'; params: { who: MultiAddressLike; value: bigint; tip: bigint } }
  /**
   * See [`Pallet::unvouch`].
   **/
  | { name: 'Unvouch' }
  /**
   * See [`Pallet::vote`].
   **/
  | { name: 'Vote'; params: { candidate: MultiAddressLike; approve: boolean } }
  /**
   * See [`Pallet::defender_vote`].
   **/
  | { name: 'DefenderVote'; params: { approve: boolean } }
  /**
   * See [`Pallet::payout`].
   **/
  | { name: 'Payout' }
  /**
   * See [`Pallet::waive_repay`].
   **/
  | { name: 'WaiveRepay'; params: { amount: bigint } }
  /**
   * See [`Pallet::found_society`].
   **/
  | {
      name: 'FoundSociety';
      params: {
        founder: MultiAddressLike;
        maxMembers: number;
        maxIntake: number;
        maxStrikes: number;
        candidateDeposit: bigint;
        rules: BytesLike;
      };
    }
  /**
   * See [`Pallet::dissolve`].
   **/
  | { name: 'Dissolve' }
  /**
   * See [`Pallet::judge_suspended_member`].
   **/
  | { name: 'JudgeSuspendedMember'; params: { who: MultiAddressLike; forgive: boolean } }
  /**
   * See [`Pallet::set_parameters`].
   **/
  | {
      name: 'SetParameters';
      params: { maxMembers: number; maxIntake: number; maxStrikes: number; candidateDeposit: bigint };
    }
  /**
   * See [`Pallet::punish_skeptic`].
   **/
  | { name: 'PunishSkeptic' }
  /**
   * See [`Pallet::claim_membership`].
   **/
  | { name: 'ClaimMembership' }
  /**
   * See [`Pallet::bestow_membership`].
   **/
  | { name: 'BestowMembership'; params: { candidate: AccountId32Like } }
  /**
   * See [`Pallet::kick_candidate`].
   **/
  | { name: 'KickCandidate'; params: { candidate: AccountId32Like } }
  /**
   * See [`Pallet::resign_candidacy`].
   **/
  | { name: 'ResignCandidacy' }
  /**
   * See [`Pallet::drop_candidate`].
   **/
  | { name: 'DropCandidate'; params: { candidate: AccountId32Like } }
  /**
   * See [`Pallet::cleanup_candidacy`].
   **/
  | { name: 'CleanupCandidacy'; params: { candidate: AccountId32Like; max: number } }
  /**
   * See [`Pallet::cleanup_challenge`].
   **/
  | { name: 'CleanupChallenge'; params: { challengeRound: number; max: number } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletRecoveryCall =
  /**
   * See [`Pallet::as_recovered`].
   **/
  | { name: 'AsRecovered'; params: { account: MultiAddress; call: RococoRuntimeRuntimeCall } }
  /**
   * See [`Pallet::set_recovered`].
   **/
  | { name: 'SetRecovered'; params: { lost: MultiAddress; rescuer: MultiAddress } }
  /**
   * See [`Pallet::create_recovery`].
   **/
  | { name: 'CreateRecovery'; params: { friends: Array<AccountId32>; threshold: number; delayPeriod: number } }
  /**
   * See [`Pallet::initiate_recovery`].
   **/
  | { name: 'InitiateRecovery'; params: { account: MultiAddress } }
  /**
   * See [`Pallet::vouch_recovery`].
   **/
  | { name: 'VouchRecovery'; params: { lost: MultiAddress; rescuer: MultiAddress } }
  /**
   * See [`Pallet::claim_recovery`].
   **/
  | { name: 'ClaimRecovery'; params: { account: MultiAddress } }
  /**
   * See [`Pallet::close_recovery`].
   **/
  | { name: 'CloseRecovery'; params: { rescuer: MultiAddress } }
  /**
   * See [`Pallet::remove_recovery`].
   **/
  | { name: 'RemoveRecovery' }
  /**
   * See [`Pallet::cancel_recovered`].
   **/
  | { name: 'CancelRecovered'; params: { account: MultiAddress } };

export type PalletRecoveryCallLike =
  /**
   * See [`Pallet::as_recovered`].
   **/
  | { name: 'AsRecovered'; params: { account: MultiAddressLike; call: RococoRuntimeRuntimeCallLike } }
  /**
   * See [`Pallet::set_recovered`].
   **/
  | { name: 'SetRecovered'; params: { lost: MultiAddressLike; rescuer: MultiAddressLike } }
  /**
   * See [`Pallet::create_recovery`].
   **/
  | { name: 'CreateRecovery'; params: { friends: Array<AccountId32Like>; threshold: number; delayPeriod: number } }
  /**
   * See [`Pallet::initiate_recovery`].
   **/
  | { name: 'InitiateRecovery'; params: { account: MultiAddressLike } }
  /**
   * See [`Pallet::vouch_recovery`].
   **/
  | { name: 'VouchRecovery'; params: { lost: MultiAddressLike; rescuer: MultiAddressLike } }
  /**
   * See [`Pallet::claim_recovery`].
   **/
  | { name: 'ClaimRecovery'; params: { account: MultiAddressLike } }
  /**
   * See [`Pallet::close_recovery`].
   **/
  | { name: 'CloseRecovery'; params: { rescuer: MultiAddressLike } }
  /**
   * See [`Pallet::remove_recovery`].
   **/
  | { name: 'RemoveRecovery' }
  /**
   * See [`Pallet::cancel_recovered`].
   **/
  | { name: 'CancelRecovered'; params: { account: MultiAddressLike } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletVestingCall =
  /**
   * See [`Pallet::vest`].
   **/
  | { name: 'Vest' }
  /**
   * See [`Pallet::vest_other`].
   **/
  | { name: 'VestOther'; params: { target: MultiAddress } }
  /**
   * See [`Pallet::vested_transfer`].
   **/
  | { name: 'VestedTransfer'; params: { target: MultiAddress; schedule: PalletVestingVestingInfo } }
  /**
   * See [`Pallet::force_vested_transfer`].
   **/
  | {
      name: 'ForceVestedTransfer';
      params: { source: MultiAddress; target: MultiAddress; schedule: PalletVestingVestingInfo };
    }
  /**
   * See [`Pallet::merge_schedules`].
   **/
  | { name: 'MergeSchedules'; params: { schedule1Index: number; schedule2Index: number } }
  /**
   * See [`Pallet::force_remove_vesting_schedule`].
   **/
  | { name: 'ForceRemoveVestingSchedule'; params: { target: MultiAddress; scheduleIndex: number } };

export type PalletVestingCallLike =
  /**
   * See [`Pallet::vest`].
   **/
  | { name: 'Vest' }
  /**
   * See [`Pallet::vest_other`].
   **/
  | { name: 'VestOther'; params: { target: MultiAddressLike } }
  /**
   * See [`Pallet::vested_transfer`].
   **/
  | { name: 'VestedTransfer'; params: { target: MultiAddressLike; schedule: PalletVestingVestingInfo } }
  /**
   * See [`Pallet::force_vested_transfer`].
   **/
  | {
      name: 'ForceVestedTransfer';
      params: { source: MultiAddressLike; target: MultiAddressLike; schedule: PalletVestingVestingInfo };
    }
  /**
   * See [`Pallet::merge_schedules`].
   **/
  | { name: 'MergeSchedules'; params: { schedule1Index: number; schedule2Index: number } }
  /**
   * See [`Pallet::force_remove_vesting_schedule`].
   **/
  | { name: 'ForceRemoveVestingSchedule'; params: { target: MultiAddressLike; scheduleIndex: number } };

export type PalletVestingVestingInfo = { locked: bigint; perBlock: bigint; startingBlock: number };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletSchedulerCall =
  /**
   * See [`Pallet::schedule`].
   **/
  | {
      name: 'Schedule';
      params: {
        when: number;
        maybePeriodic?: [number, number] | undefined;
        priority: number;
        call: RococoRuntimeRuntimeCall;
      };
    }
  /**
   * See [`Pallet::cancel`].
   **/
  | { name: 'Cancel'; params: { when: number; index: number } }
  /**
   * See [`Pallet::schedule_named`].
   **/
  | {
      name: 'ScheduleNamed';
      params: {
        id: FixedBytes<32>;
        when: number;
        maybePeriodic?: [number, number] | undefined;
        priority: number;
        call: RococoRuntimeRuntimeCall;
      };
    }
  /**
   * See [`Pallet::cancel_named`].
   **/
  | { name: 'CancelNamed'; params: { id: FixedBytes<32> } }
  /**
   * See [`Pallet::schedule_after`].
   **/
  | {
      name: 'ScheduleAfter';
      params: {
        after: number;
        maybePeriodic?: [number, number] | undefined;
        priority: number;
        call: RococoRuntimeRuntimeCall;
      };
    }
  /**
   * See [`Pallet::schedule_named_after`].
   **/
  | {
      name: 'ScheduleNamedAfter';
      params: {
        id: FixedBytes<32>;
        after: number;
        maybePeriodic?: [number, number] | undefined;
        priority: number;
        call: RococoRuntimeRuntimeCall;
      };
    }
  /**
   * See [`Pallet::set_retry`].
   **/
  | { name: 'SetRetry'; params: { task: [number, number]; retries: number; period: number } }
  /**
   * See [`Pallet::set_retry_named`].
   **/
  | { name: 'SetRetryNamed'; params: { id: FixedBytes<32>; retries: number; period: number } }
  /**
   * See [`Pallet::cancel_retry`].
   **/
  | { name: 'CancelRetry'; params: { task: [number, number] } }
  /**
   * See [`Pallet::cancel_retry_named`].
   **/
  | { name: 'CancelRetryNamed'; params: { id: FixedBytes<32> } };

export type PalletSchedulerCallLike =
  /**
   * See [`Pallet::schedule`].
   **/
  | {
      name: 'Schedule';
      params: {
        when: number;
        maybePeriodic?: [number, number] | undefined;
        priority: number;
        call: RococoRuntimeRuntimeCallLike;
      };
    }
  /**
   * See [`Pallet::cancel`].
   **/
  | { name: 'Cancel'; params: { when: number; index: number } }
  /**
   * See [`Pallet::schedule_named`].
   **/
  | {
      name: 'ScheduleNamed';
      params: {
        id: FixedBytes<32>;
        when: number;
        maybePeriodic?: [number, number] | undefined;
        priority: number;
        call: RococoRuntimeRuntimeCallLike;
      };
    }
  /**
   * See [`Pallet::cancel_named`].
   **/
  | { name: 'CancelNamed'; params: { id: FixedBytes<32> } }
  /**
   * See [`Pallet::schedule_after`].
   **/
  | {
      name: 'ScheduleAfter';
      params: {
        after: number;
        maybePeriodic?: [number, number] | undefined;
        priority: number;
        call: RococoRuntimeRuntimeCallLike;
      };
    }
  /**
   * See [`Pallet::schedule_named_after`].
   **/
  | {
      name: 'ScheduleNamedAfter';
      params: {
        id: FixedBytes<32>;
        after: number;
        maybePeriodic?: [number, number] | undefined;
        priority: number;
        call: RococoRuntimeRuntimeCallLike;
      };
    }
  /**
   * See [`Pallet::set_retry`].
   **/
  | { name: 'SetRetry'; params: { task: [number, number]; retries: number; period: number } }
  /**
   * See [`Pallet::set_retry_named`].
   **/
  | { name: 'SetRetryNamed'; params: { id: FixedBytes<32>; retries: number; period: number } }
  /**
   * See [`Pallet::cancel_retry`].
   **/
  | { name: 'CancelRetry'; params: { task: [number, number] } }
  /**
   * See [`Pallet::cancel_retry_named`].
   **/
  | { name: 'CancelRetryNamed'; params: { id: FixedBytes<32> } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletProxyCall =
  /**
   * See [`Pallet::proxy`].
   **/
  | {
      name: 'Proxy';
      params: {
        real: MultiAddress;
        forceProxyType?: RococoRuntimeProxyType | undefined;
        call: RococoRuntimeRuntimeCall;
      };
    }
  /**
   * See [`Pallet::add_proxy`].
   **/
  | { name: 'AddProxy'; params: { delegate: MultiAddress; proxyType: RococoRuntimeProxyType; delay: number } }
  /**
   * See [`Pallet::remove_proxy`].
   **/
  | { name: 'RemoveProxy'; params: { delegate: MultiAddress; proxyType: RococoRuntimeProxyType; delay: number } }
  /**
   * See [`Pallet::remove_proxies`].
   **/
  | { name: 'RemoveProxies' }
  /**
   * See [`Pallet::create_pure`].
   **/
  | { name: 'CreatePure'; params: { proxyType: RococoRuntimeProxyType; delay: number; index: number } }
  /**
   * See [`Pallet::kill_pure`].
   **/
  | {
      name: 'KillPure';
      params: {
        spawner: MultiAddress;
        proxyType: RococoRuntimeProxyType;
        index: number;
        height: number;
        extIndex: number;
      };
    }
  /**
   * See [`Pallet::announce`].
   **/
  | { name: 'Announce'; params: { real: MultiAddress; callHash: H256 } }
  /**
   * See [`Pallet::remove_announcement`].
   **/
  | { name: 'RemoveAnnouncement'; params: { real: MultiAddress; callHash: H256 } }
  /**
   * See [`Pallet::reject_announcement`].
   **/
  | { name: 'RejectAnnouncement'; params: { delegate: MultiAddress; callHash: H256 } }
  /**
   * See [`Pallet::proxy_announced`].
   **/
  | {
      name: 'ProxyAnnounced';
      params: {
        delegate: MultiAddress;
        real: MultiAddress;
        forceProxyType?: RococoRuntimeProxyType | undefined;
        call: RococoRuntimeRuntimeCall;
      };
    };

export type PalletProxyCallLike =
  /**
   * See [`Pallet::proxy`].
   **/
  | {
      name: 'Proxy';
      params: {
        real: MultiAddressLike;
        forceProxyType?: RococoRuntimeProxyType | undefined;
        call: RococoRuntimeRuntimeCallLike;
      };
    }
  /**
   * See [`Pallet::add_proxy`].
   **/
  | { name: 'AddProxy'; params: { delegate: MultiAddressLike; proxyType: RococoRuntimeProxyType; delay: number } }
  /**
   * See [`Pallet::remove_proxy`].
   **/
  | { name: 'RemoveProxy'; params: { delegate: MultiAddressLike; proxyType: RococoRuntimeProxyType; delay: number } }
  /**
   * See [`Pallet::remove_proxies`].
   **/
  | { name: 'RemoveProxies' }
  /**
   * See [`Pallet::create_pure`].
   **/
  | { name: 'CreatePure'; params: { proxyType: RococoRuntimeProxyType; delay: number; index: number } }
  /**
   * See [`Pallet::kill_pure`].
   **/
  | {
      name: 'KillPure';
      params: {
        spawner: MultiAddressLike;
        proxyType: RococoRuntimeProxyType;
        index: number;
        height: number;
        extIndex: number;
      };
    }
  /**
   * See [`Pallet::announce`].
   **/
  | { name: 'Announce'; params: { real: MultiAddressLike; callHash: H256 } }
  /**
   * See [`Pallet::remove_announcement`].
   **/
  | { name: 'RemoveAnnouncement'; params: { real: MultiAddressLike; callHash: H256 } }
  /**
   * See [`Pallet::reject_announcement`].
   **/
  | { name: 'RejectAnnouncement'; params: { delegate: MultiAddressLike; callHash: H256 } }
  /**
   * See [`Pallet::proxy_announced`].
   **/
  | {
      name: 'ProxyAnnounced';
      params: {
        delegate: MultiAddressLike;
        real: MultiAddressLike;
        forceProxyType?: RococoRuntimeProxyType | undefined;
        call: RococoRuntimeRuntimeCallLike;
      };
    };

export type RococoRuntimeProxyType =
  | 'Any'
  | 'NonTransfer'
  | 'Governance'
  | 'IdentityJudgement'
  | 'CancelProxy'
  | 'Auction'
  | 'Society'
  | 'OnDemandOrdering';

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletMultisigCall =
  /**
   * See [`Pallet::as_multi_threshold_1`].
   **/
  | { name: 'AsMultiThreshold1'; params: { otherSignatories: Array<AccountId32>; call: RococoRuntimeRuntimeCall } }
  /**
   * See [`Pallet::as_multi`].
   **/
  | {
      name: 'AsMulti';
      params: {
        threshold: number;
        otherSignatories: Array<AccountId32>;
        maybeTimepoint?: PalletMultisigTimepoint | undefined;
        call: RococoRuntimeRuntimeCall;
        maxWeight: SpWeightsWeightV2Weight;
      };
    }
  /**
   * See [`Pallet::approve_as_multi`].
   **/
  | {
      name: 'ApproveAsMulti';
      params: {
        threshold: number;
        otherSignatories: Array<AccountId32>;
        maybeTimepoint?: PalletMultisigTimepoint | undefined;
        callHash: FixedBytes<32>;
        maxWeight: SpWeightsWeightV2Weight;
      };
    }
  /**
   * See [`Pallet::cancel_as_multi`].
   **/
  | {
      name: 'CancelAsMulti';
      params: {
        threshold: number;
        otherSignatories: Array<AccountId32>;
        timepoint: PalletMultisigTimepoint;
        callHash: FixedBytes<32>;
      };
    };

export type PalletMultisigCallLike =
  /**
   * See [`Pallet::as_multi_threshold_1`].
   **/
  | {
      name: 'AsMultiThreshold1';
      params: { otherSignatories: Array<AccountId32Like>; call: RococoRuntimeRuntimeCallLike };
    }
  /**
   * See [`Pallet::as_multi`].
   **/
  | {
      name: 'AsMulti';
      params: {
        threshold: number;
        otherSignatories: Array<AccountId32Like>;
        maybeTimepoint?: PalletMultisigTimepoint | undefined;
        call: RococoRuntimeRuntimeCallLike;
        maxWeight: SpWeightsWeightV2Weight;
      };
    }
  /**
   * See [`Pallet::approve_as_multi`].
   **/
  | {
      name: 'ApproveAsMulti';
      params: {
        threshold: number;
        otherSignatories: Array<AccountId32Like>;
        maybeTimepoint?: PalletMultisigTimepoint | undefined;
        callHash: FixedBytes<32>;
        maxWeight: SpWeightsWeightV2Weight;
      };
    }
  /**
   * See [`Pallet::cancel_as_multi`].
   **/
  | {
      name: 'CancelAsMulti';
      params: {
        threshold: number;
        otherSignatories: Array<AccountId32Like>;
        timepoint: PalletMultisigTimepoint;
        callHash: FixedBytes<32>;
      };
    };

export type PalletMultisigTimepoint = { height: number; index: number };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletPreimageCall =
  /**
   * See [`Pallet::note_preimage`].
   **/
  | { name: 'NotePreimage'; params: { bytes: Bytes } }
  /**
   * See [`Pallet::unnote_preimage`].
   **/
  | { name: 'UnnotePreimage'; params: { hash: H256 } }
  /**
   * See [`Pallet::request_preimage`].
   **/
  | { name: 'RequestPreimage'; params: { hash: H256 } }
  /**
   * See [`Pallet::unrequest_preimage`].
   **/
  | { name: 'UnrequestPreimage'; params: { hash: H256 } }
  /**
   * See [`Pallet::ensure_updated`].
   **/
  | { name: 'EnsureUpdated'; params: { hashes: Array<H256> } };

export type PalletPreimageCallLike =
  /**
   * See [`Pallet::note_preimage`].
   **/
  | { name: 'NotePreimage'; params: { bytes: BytesLike } }
  /**
   * See [`Pallet::unnote_preimage`].
   **/
  | { name: 'UnnotePreimage'; params: { hash: H256 } }
  /**
   * See [`Pallet::request_preimage`].
   **/
  | { name: 'RequestPreimage'; params: { hash: H256 } }
  /**
   * See [`Pallet::unrequest_preimage`].
   **/
  | { name: 'UnrequestPreimage'; params: { hash: H256 } }
  /**
   * See [`Pallet::ensure_updated`].
   **/
  | { name: 'EnsureUpdated'; params: { hashes: Array<H256> } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletAssetRateCall =
  /**
   * See [`Pallet::create`].
   **/
  | { name: 'Create'; params: { assetKind: PolkadotRuntimeCommonImplsVersionedLocatableAsset; rate: FixedU128 } }
  /**
   * See [`Pallet::update`].
   **/
  | { name: 'Update'; params: { assetKind: PolkadotRuntimeCommonImplsVersionedLocatableAsset; rate: FixedU128 } }
  /**
   * See [`Pallet::remove`].
   **/
  | { name: 'Remove'; params: { assetKind: PolkadotRuntimeCommonImplsVersionedLocatableAsset } };

export type PalletAssetRateCallLike =
  /**
   * See [`Pallet::create`].
   **/
  | { name: 'Create'; params: { assetKind: PolkadotRuntimeCommonImplsVersionedLocatableAsset; rate: FixedU128 } }
  /**
   * See [`Pallet::update`].
   **/
  | { name: 'Update'; params: { assetKind: PolkadotRuntimeCommonImplsVersionedLocatableAsset; rate: FixedU128 } }
  /**
   * See [`Pallet::remove`].
   **/
  | { name: 'Remove'; params: { assetKind: PolkadotRuntimeCommonImplsVersionedLocatableAsset } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletBountiesCall =
  /**
   * See [`Pallet::propose_bounty`].
   **/
  | { name: 'ProposeBounty'; params: { value: bigint; description: Bytes } }
  /**
   * See [`Pallet::approve_bounty`].
   **/
  | { name: 'ApproveBounty'; params: { bountyId: number } }
  /**
   * See [`Pallet::propose_curator`].
   **/
  | { name: 'ProposeCurator'; params: { bountyId: number; curator: MultiAddress; fee: bigint } }
  /**
   * See [`Pallet::unassign_curator`].
   **/
  | { name: 'UnassignCurator'; params: { bountyId: number } }
  /**
   * See [`Pallet::accept_curator`].
   **/
  | { name: 'AcceptCurator'; params: { bountyId: number } }
  /**
   * See [`Pallet::award_bounty`].
   **/
  | { name: 'AwardBounty'; params: { bountyId: number; beneficiary: MultiAddress } }
  /**
   * See [`Pallet::claim_bounty`].
   **/
  | { name: 'ClaimBounty'; params: { bountyId: number } }
  /**
   * See [`Pallet::close_bounty`].
   **/
  | { name: 'CloseBounty'; params: { bountyId: number } }
  /**
   * See [`Pallet::extend_bounty_expiry`].
   **/
  | { name: 'ExtendBountyExpiry'; params: { bountyId: number; remark: Bytes } };

export type PalletBountiesCallLike =
  /**
   * See [`Pallet::propose_bounty`].
   **/
  | { name: 'ProposeBounty'; params: { value: bigint; description: BytesLike } }
  /**
   * See [`Pallet::approve_bounty`].
   **/
  | { name: 'ApproveBounty'; params: { bountyId: number } }
  /**
   * See [`Pallet::propose_curator`].
   **/
  | { name: 'ProposeCurator'; params: { bountyId: number; curator: MultiAddressLike; fee: bigint } }
  /**
   * See [`Pallet::unassign_curator`].
   **/
  | { name: 'UnassignCurator'; params: { bountyId: number } }
  /**
   * See [`Pallet::accept_curator`].
   **/
  | { name: 'AcceptCurator'; params: { bountyId: number } }
  /**
   * See [`Pallet::award_bounty`].
   **/
  | { name: 'AwardBounty'; params: { bountyId: number; beneficiary: MultiAddressLike } }
  /**
   * See [`Pallet::claim_bounty`].
   **/
  | { name: 'ClaimBounty'; params: { bountyId: number } }
  /**
   * See [`Pallet::close_bounty`].
   **/
  | { name: 'CloseBounty'; params: { bountyId: number } }
  /**
   * See [`Pallet::extend_bounty_expiry`].
   **/
  | { name: 'ExtendBountyExpiry'; params: { bountyId: number; remark: BytesLike } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletChildBountiesCall =
  /**
   * See [`Pallet::add_child_bounty`].
   **/
  | { name: 'AddChildBounty'; params: { parentBountyId: number; value: bigint; description: Bytes } }
  /**
   * See [`Pallet::propose_curator`].
   **/
  | {
      name: 'ProposeCurator';
      params: { parentBountyId: number; childBountyId: number; curator: MultiAddress; fee: bigint };
    }
  /**
   * See [`Pallet::accept_curator`].
   **/
  | { name: 'AcceptCurator'; params: { parentBountyId: number; childBountyId: number } }
  /**
   * See [`Pallet::unassign_curator`].
   **/
  | { name: 'UnassignCurator'; params: { parentBountyId: number; childBountyId: number } }
  /**
   * See [`Pallet::award_child_bounty`].
   **/
  | { name: 'AwardChildBounty'; params: { parentBountyId: number; childBountyId: number; beneficiary: MultiAddress } }
  /**
   * See [`Pallet::claim_child_bounty`].
   **/
  | { name: 'ClaimChildBounty'; params: { parentBountyId: number; childBountyId: number } }
  /**
   * See [`Pallet::close_child_bounty`].
   **/
  | { name: 'CloseChildBounty'; params: { parentBountyId: number; childBountyId: number } };

export type PalletChildBountiesCallLike =
  /**
   * See [`Pallet::add_child_bounty`].
   **/
  | { name: 'AddChildBounty'; params: { parentBountyId: number; value: bigint; description: BytesLike } }
  /**
   * See [`Pallet::propose_curator`].
   **/
  | {
      name: 'ProposeCurator';
      params: { parentBountyId: number; childBountyId: number; curator: MultiAddressLike; fee: bigint };
    }
  /**
   * See [`Pallet::accept_curator`].
   **/
  | { name: 'AcceptCurator'; params: { parentBountyId: number; childBountyId: number } }
  /**
   * See [`Pallet::unassign_curator`].
   **/
  | { name: 'UnassignCurator'; params: { parentBountyId: number; childBountyId: number } }
  /**
   * See [`Pallet::award_child_bounty`].
   **/
  | {
      name: 'AwardChildBounty';
      params: { parentBountyId: number; childBountyId: number; beneficiary: MultiAddressLike };
    }
  /**
   * See [`Pallet::claim_child_bounty`].
   **/
  | { name: 'ClaimChildBounty'; params: { parentBountyId: number; childBountyId: number } }
  /**
   * See [`Pallet::close_child_bounty`].
   **/
  | { name: 'CloseChildBounty'; params: { parentBountyId: number; childBountyId: number } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletNisCall =
  /**
   * See [`Pallet::place_bid`].
   **/
  | { name: 'PlaceBid'; params: { amount: bigint; duration: number } }
  /**
   * See [`Pallet::retract_bid`].
   **/
  | { name: 'RetractBid'; params: { amount: bigint; duration: number } }
  /**
   * See [`Pallet::fund_deficit`].
   **/
  | { name: 'FundDeficit' }
  /**
   * See [`Pallet::thaw_private`].
   **/
  | { name: 'ThawPrivate'; params: { index: number; maybeProportion?: Perquintill | undefined } }
  /**
   * See [`Pallet::thaw_communal`].
   **/
  | { name: 'ThawCommunal'; params: { index: number } }
  /**
   * See [`Pallet::communify`].
   **/
  | { name: 'Communify'; params: { index: number } }
  /**
   * See [`Pallet::privatize`].
   **/
  | { name: 'Privatize'; params: { index: number } };

export type PalletNisCallLike =
  /**
   * See [`Pallet::place_bid`].
   **/
  | { name: 'PlaceBid'; params: { amount: bigint; duration: number } }
  /**
   * See [`Pallet::retract_bid`].
   **/
  | { name: 'RetractBid'; params: { amount: bigint; duration: number } }
  /**
   * See [`Pallet::fund_deficit`].
   **/
  | { name: 'FundDeficit' }
  /**
   * See [`Pallet::thaw_private`].
   **/
  | { name: 'ThawPrivate'; params: { index: number; maybeProportion?: Perquintill | undefined } }
  /**
   * See [`Pallet::thaw_communal`].
   **/
  | { name: 'ThawCommunal'; params: { index: number } }
  /**
   * See [`Pallet::communify`].
   **/
  | { name: 'Communify'; params: { index: number } }
  /**
   * See [`Pallet::privatize`].
   **/
  | { name: 'Privatize'; params: { index: number } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PolkadotRuntimeParachainsConfigurationPalletCall =
  /**
   * See [`Pallet::set_validation_upgrade_cooldown`].
   **/
  | { name: 'SetValidationUpgradeCooldown'; params: { new: number } }
  /**
   * See [`Pallet::set_validation_upgrade_delay`].
   **/
  | { name: 'SetValidationUpgradeDelay'; params: { new: number } }
  /**
   * See [`Pallet::set_code_retention_period`].
   **/
  | { name: 'SetCodeRetentionPeriod'; params: { new: number } }
  /**
   * See [`Pallet::set_max_code_size`].
   **/
  | { name: 'SetMaxCodeSize'; params: { new: number } }
  /**
   * See [`Pallet::set_max_pov_size`].
   **/
  | { name: 'SetMaxPovSize'; params: { new: number } }
  /**
   * See [`Pallet::set_max_head_data_size`].
   **/
  | { name: 'SetMaxHeadDataSize'; params: { new: number } }
  /**
   * See [`Pallet::set_coretime_cores`].
   **/
  | { name: 'SetCoretimeCores'; params: { new: number } }
  /**
   * See [`Pallet::set_on_demand_retries`].
   **/
  | { name: 'SetOnDemandRetries'; params: { new: number } }
  /**
   * See [`Pallet::set_group_rotation_frequency`].
   **/
  | { name: 'SetGroupRotationFrequency'; params: { new: number } }
  /**
   * See [`Pallet::set_paras_availability_period`].
   **/
  | { name: 'SetParasAvailabilityPeriod'; params: { new: number } }
  /**
   * See [`Pallet::set_scheduling_lookahead`].
   **/
  | { name: 'SetSchedulingLookahead'; params: { new: number } }
  /**
   * See [`Pallet::set_max_validators_per_core`].
   **/
  | { name: 'SetMaxValidatorsPerCore'; params: { new?: number | undefined } }
  /**
   * See [`Pallet::set_max_validators`].
   **/
  | { name: 'SetMaxValidators'; params: { new?: number | undefined } }
  /**
   * See [`Pallet::set_dispute_period`].
   **/
  | { name: 'SetDisputePeriod'; params: { new: number } }
  /**
   * See [`Pallet::set_dispute_post_conclusion_acceptance_period`].
   **/
  | { name: 'SetDisputePostConclusionAcceptancePeriod'; params: { new: number } }
  /**
   * See [`Pallet::set_no_show_slots`].
   **/
  | { name: 'SetNoShowSlots'; params: { new: number } }
  /**
   * See [`Pallet::set_n_delay_tranches`].
   **/
  | { name: 'SetNDelayTranches'; params: { new: number } }
  /**
   * See [`Pallet::set_zeroth_delay_tranche_width`].
   **/
  | { name: 'SetZerothDelayTrancheWidth'; params: { new: number } }
  /**
   * See [`Pallet::set_needed_approvals`].
   **/
  | { name: 'SetNeededApprovals'; params: { new: number } }
  /**
   * See [`Pallet::set_relay_vrf_modulo_samples`].
   **/
  | { name: 'SetRelayVrfModuloSamples'; params: { new: number } }
  /**
   * See [`Pallet::set_max_upward_queue_count`].
   **/
  | { name: 'SetMaxUpwardQueueCount'; params: { new: number } }
  /**
   * See [`Pallet::set_max_upward_queue_size`].
   **/
  | { name: 'SetMaxUpwardQueueSize'; params: { new: number } }
  /**
   * See [`Pallet::set_max_downward_message_size`].
   **/
  | { name: 'SetMaxDownwardMessageSize'; params: { new: number } }
  /**
   * See [`Pallet::set_max_upward_message_size`].
   **/
  | { name: 'SetMaxUpwardMessageSize'; params: { new: number } }
  /**
   * See [`Pallet::set_max_upward_message_num_per_candidate`].
   **/
  | { name: 'SetMaxUpwardMessageNumPerCandidate'; params: { new: number } }
  /**
   * See [`Pallet::set_hrmp_open_request_ttl`].
   **/
  | { name: 'SetHrmpOpenRequestTtl'; params: { new: number } }
  /**
   * See [`Pallet::set_hrmp_sender_deposit`].
   **/
  | { name: 'SetHrmpSenderDeposit'; params: { new: bigint } }
  /**
   * See [`Pallet::set_hrmp_recipient_deposit`].
   **/
  | { name: 'SetHrmpRecipientDeposit'; params: { new: bigint } }
  /**
   * See [`Pallet::set_hrmp_channel_max_capacity`].
   **/
  | { name: 'SetHrmpChannelMaxCapacity'; params: { new: number } }
  /**
   * See [`Pallet::set_hrmp_channel_max_total_size`].
   **/
  | { name: 'SetHrmpChannelMaxTotalSize'; params: { new: number } }
  /**
   * See [`Pallet::set_hrmp_max_parachain_inbound_channels`].
   **/
  | { name: 'SetHrmpMaxParachainInboundChannels'; params: { new: number } }
  /**
   * See [`Pallet::set_hrmp_channel_max_message_size`].
   **/
  | { name: 'SetHrmpChannelMaxMessageSize'; params: { new: number } }
  /**
   * See [`Pallet::set_hrmp_max_parachain_outbound_channels`].
   **/
  | { name: 'SetHrmpMaxParachainOutboundChannels'; params: { new: number } }
  /**
   * See [`Pallet::set_hrmp_max_message_num_per_candidate`].
   **/
  | { name: 'SetHrmpMaxMessageNumPerCandidate'; params: { new: number } }
  /**
   * See [`Pallet::set_pvf_voting_ttl`].
   **/
  | { name: 'SetPvfVotingTtl'; params: { new: number } }
  /**
   * See [`Pallet::set_minimum_validation_upgrade_delay`].
   **/
  | { name: 'SetMinimumValidationUpgradeDelay'; params: { new: number } }
  /**
   * See [`Pallet::set_bypass_consistency_check`].
   **/
  | { name: 'SetBypassConsistencyCheck'; params: { new: boolean } }
  /**
   * See [`Pallet::set_async_backing_params`].
   **/
  | { name: 'SetAsyncBackingParams'; params: { new: PolkadotPrimitivesV6AsyncBackingAsyncBackingParams } }
  /**
   * See [`Pallet::set_executor_params`].
   **/
  | { name: 'SetExecutorParams'; params: { new: PolkadotPrimitivesV6ExecutorParams } }
  /**
   * See [`Pallet::set_on_demand_base_fee`].
   **/
  | { name: 'SetOnDemandBaseFee'; params: { new: bigint } }
  /**
   * See [`Pallet::set_on_demand_fee_variability`].
   **/
  | { name: 'SetOnDemandFeeVariability'; params: { new: Perbill } }
  /**
   * See [`Pallet::set_on_demand_queue_max_size`].
   **/
  | { name: 'SetOnDemandQueueMaxSize'; params: { new: number } }
  /**
   * See [`Pallet::set_on_demand_target_queue_utilization`].
   **/
  | { name: 'SetOnDemandTargetQueueUtilization'; params: { new: Perbill } }
  /**
   * See [`Pallet::set_on_demand_ttl`].
   **/
  | { name: 'SetOnDemandTtl'; params: { new: number } }
  /**
   * See [`Pallet::set_minimum_backing_votes`].
   **/
  | { name: 'SetMinimumBackingVotes'; params: { new: number } }
  /**
   * See [`Pallet::set_node_feature`].
   **/
  | { name: 'SetNodeFeature'; params: { index: number; value: boolean } }
  /**
   * See [`Pallet::set_approval_voting_params`].
   **/
  | { name: 'SetApprovalVotingParams'; params: { new: PolkadotPrimitivesVstagingApprovalVotingParams } };

export type PolkadotRuntimeParachainsConfigurationPalletCallLike =
  /**
   * See [`Pallet::set_validation_upgrade_cooldown`].
   **/
  | { name: 'SetValidationUpgradeCooldown'; params: { new: number } }
  /**
   * See [`Pallet::set_validation_upgrade_delay`].
   **/
  | { name: 'SetValidationUpgradeDelay'; params: { new: number } }
  /**
   * See [`Pallet::set_code_retention_period`].
   **/
  | { name: 'SetCodeRetentionPeriod'; params: { new: number } }
  /**
   * See [`Pallet::set_max_code_size`].
   **/
  | { name: 'SetMaxCodeSize'; params: { new: number } }
  /**
   * See [`Pallet::set_max_pov_size`].
   **/
  | { name: 'SetMaxPovSize'; params: { new: number } }
  /**
   * See [`Pallet::set_max_head_data_size`].
   **/
  | { name: 'SetMaxHeadDataSize'; params: { new: number } }
  /**
   * See [`Pallet::set_coretime_cores`].
   **/
  | { name: 'SetCoretimeCores'; params: { new: number } }
  /**
   * See [`Pallet::set_on_demand_retries`].
   **/
  | { name: 'SetOnDemandRetries'; params: { new: number } }
  /**
   * See [`Pallet::set_group_rotation_frequency`].
   **/
  | { name: 'SetGroupRotationFrequency'; params: { new: number } }
  /**
   * See [`Pallet::set_paras_availability_period`].
   **/
  | { name: 'SetParasAvailabilityPeriod'; params: { new: number } }
  /**
   * See [`Pallet::set_scheduling_lookahead`].
   **/
  | { name: 'SetSchedulingLookahead'; params: { new: number } }
  /**
   * See [`Pallet::set_max_validators_per_core`].
   **/
  | { name: 'SetMaxValidatorsPerCore'; params: { new?: number | undefined } }
  /**
   * See [`Pallet::set_max_validators`].
   **/
  | { name: 'SetMaxValidators'; params: { new?: number | undefined } }
  /**
   * See [`Pallet::set_dispute_period`].
   **/
  | { name: 'SetDisputePeriod'; params: { new: number } }
  /**
   * See [`Pallet::set_dispute_post_conclusion_acceptance_period`].
   **/
  | { name: 'SetDisputePostConclusionAcceptancePeriod'; params: { new: number } }
  /**
   * See [`Pallet::set_no_show_slots`].
   **/
  | { name: 'SetNoShowSlots'; params: { new: number } }
  /**
   * See [`Pallet::set_n_delay_tranches`].
   **/
  | { name: 'SetNDelayTranches'; params: { new: number } }
  /**
   * See [`Pallet::set_zeroth_delay_tranche_width`].
   **/
  | { name: 'SetZerothDelayTrancheWidth'; params: { new: number } }
  /**
   * See [`Pallet::set_needed_approvals`].
   **/
  | { name: 'SetNeededApprovals'; params: { new: number } }
  /**
   * See [`Pallet::set_relay_vrf_modulo_samples`].
   **/
  | { name: 'SetRelayVrfModuloSamples'; params: { new: number } }
  /**
   * See [`Pallet::set_max_upward_queue_count`].
   **/
  | { name: 'SetMaxUpwardQueueCount'; params: { new: number } }
  /**
   * See [`Pallet::set_max_upward_queue_size`].
   **/
  | { name: 'SetMaxUpwardQueueSize'; params: { new: number } }
  /**
   * See [`Pallet::set_max_downward_message_size`].
   **/
  | { name: 'SetMaxDownwardMessageSize'; params: { new: number } }
  /**
   * See [`Pallet::set_max_upward_message_size`].
   **/
  | { name: 'SetMaxUpwardMessageSize'; params: { new: number } }
  /**
   * See [`Pallet::set_max_upward_message_num_per_candidate`].
   **/
  | { name: 'SetMaxUpwardMessageNumPerCandidate'; params: { new: number } }
  /**
   * See [`Pallet::set_hrmp_open_request_ttl`].
   **/
  | { name: 'SetHrmpOpenRequestTtl'; params: { new: number } }
  /**
   * See [`Pallet::set_hrmp_sender_deposit`].
   **/
  | { name: 'SetHrmpSenderDeposit'; params: { new: bigint } }
  /**
   * See [`Pallet::set_hrmp_recipient_deposit`].
   **/
  | { name: 'SetHrmpRecipientDeposit'; params: { new: bigint } }
  /**
   * See [`Pallet::set_hrmp_channel_max_capacity`].
   **/
  | { name: 'SetHrmpChannelMaxCapacity'; params: { new: number } }
  /**
   * See [`Pallet::set_hrmp_channel_max_total_size`].
   **/
  | { name: 'SetHrmpChannelMaxTotalSize'; params: { new: number } }
  /**
   * See [`Pallet::set_hrmp_max_parachain_inbound_channels`].
   **/
  | { name: 'SetHrmpMaxParachainInboundChannels'; params: { new: number } }
  /**
   * See [`Pallet::set_hrmp_channel_max_message_size`].
   **/
  | { name: 'SetHrmpChannelMaxMessageSize'; params: { new: number } }
  /**
   * See [`Pallet::set_hrmp_max_parachain_outbound_channels`].
   **/
  | { name: 'SetHrmpMaxParachainOutboundChannels'; params: { new: number } }
  /**
   * See [`Pallet::set_hrmp_max_message_num_per_candidate`].
   **/
  | { name: 'SetHrmpMaxMessageNumPerCandidate'; params: { new: number } }
  /**
   * See [`Pallet::set_pvf_voting_ttl`].
   **/
  | { name: 'SetPvfVotingTtl'; params: { new: number } }
  /**
   * See [`Pallet::set_minimum_validation_upgrade_delay`].
   **/
  | { name: 'SetMinimumValidationUpgradeDelay'; params: { new: number } }
  /**
   * See [`Pallet::set_bypass_consistency_check`].
   **/
  | { name: 'SetBypassConsistencyCheck'; params: { new: boolean } }
  /**
   * See [`Pallet::set_async_backing_params`].
   **/
  | { name: 'SetAsyncBackingParams'; params: { new: PolkadotPrimitivesV6AsyncBackingAsyncBackingParams } }
  /**
   * See [`Pallet::set_executor_params`].
   **/
  | { name: 'SetExecutorParams'; params: { new: PolkadotPrimitivesV6ExecutorParams } }
  /**
   * See [`Pallet::set_on_demand_base_fee`].
   **/
  | { name: 'SetOnDemandBaseFee'; params: { new: bigint } }
  /**
   * See [`Pallet::set_on_demand_fee_variability`].
   **/
  | { name: 'SetOnDemandFeeVariability'; params: { new: Perbill } }
  /**
   * See [`Pallet::set_on_demand_queue_max_size`].
   **/
  | { name: 'SetOnDemandQueueMaxSize'; params: { new: number } }
  /**
   * See [`Pallet::set_on_demand_target_queue_utilization`].
   **/
  | { name: 'SetOnDemandTargetQueueUtilization'; params: { new: Perbill } }
  /**
   * See [`Pallet::set_on_demand_ttl`].
   **/
  | { name: 'SetOnDemandTtl'; params: { new: number } }
  /**
   * See [`Pallet::set_minimum_backing_votes`].
   **/
  | { name: 'SetMinimumBackingVotes'; params: { new: number } }
  /**
   * See [`Pallet::set_node_feature`].
   **/
  | { name: 'SetNodeFeature'; params: { index: number; value: boolean } }
  /**
   * See [`Pallet::set_approval_voting_params`].
   **/
  | { name: 'SetApprovalVotingParams'; params: { new: PolkadotPrimitivesVstagingApprovalVotingParams } };

export type PolkadotPrimitivesV6AsyncBackingAsyncBackingParams = {
  maxCandidateDepth: number;
  allowedAncestryLen: number;
};

export type PolkadotPrimitivesV6ExecutorParams = Array<PolkadotPrimitivesV6ExecutorParamsExecutorParam>;

export type PolkadotPrimitivesV6ExecutorParamsExecutorParam =
  | { tag: 'MaxMemoryPages'; value: number }
  | { tag: 'StackLogicalMax'; value: number }
  | { tag: 'StackNativeMax'; value: number }
  | { tag: 'PrecheckingMaxMemory'; value: bigint }
  | { tag: 'PvfPrepTimeout'; value: [PolkadotPrimitivesV6PvfPrepKind, bigint] }
  | { tag: 'PvfExecTimeout'; value: [PolkadotPrimitivesV6PvfExecKind, bigint] }
  | { tag: 'WasmExtBulkMemory' };

export type PolkadotPrimitivesV6PvfPrepKind = 'Precheck' | 'Prepare';

export type PolkadotPrimitivesV6PvfExecKind = 'Backing' | 'Approval';

export type PolkadotPrimitivesVstagingApprovalVotingParams = { maxApprovalCoalesceCount: number };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PolkadotRuntimeParachainsSharedPalletCall = null;

export type PolkadotRuntimeParachainsSharedPalletCallLike = null;

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PolkadotRuntimeParachainsInclusionPalletCall = null;

export type PolkadotRuntimeParachainsInclusionPalletCallLike = null;

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PolkadotRuntimeParachainsParasInherentPalletCall =
  /**
   * See [`Pallet::enter`].
   **/
  { name: 'Enter'; params: { data: PolkadotPrimitivesV6InherentData } };

export type PolkadotRuntimeParachainsParasInherentPalletCallLike =
  /**
   * See [`Pallet::enter`].
   **/
  { name: 'Enter'; params: { data: PolkadotPrimitivesV6InherentData } };

export type PolkadotPrimitivesV6InherentData = {
  bitfields: Array<PolkadotPrimitivesV6SignedUncheckedSigned>;
  backedCandidates: Array<PolkadotPrimitivesV6BackedCandidate>;
  disputes: Array<PolkadotPrimitivesV6DisputeStatementSet>;
  parentHeader: Header;
};

export type PolkadotPrimitivesV6SignedUncheckedSigned = {
  payload: PolkadotPrimitivesV6AvailabilityBitfield;
  validatorIndex: PolkadotPrimitivesV6ValidatorIndex;
  signature: PolkadotPrimitivesV6ValidatorAppSignature;
};

export type PolkadotPrimitivesV6AvailabilityBitfield = BitSequence;

export type BitvecOrderLsb0 = {};

export type PolkadotPrimitivesV6ValidatorIndex = number;

export type PolkadotPrimitivesV6ValidatorAppSignature = SpCoreSr25519Signature;

export type PolkadotPrimitivesV6BackedCandidate = {
  candidate: PolkadotPrimitivesV6CommittedCandidateReceipt;
  validityVotes: Array<PolkadotPrimitivesV6ValidityAttestation>;
  validatorIndices: BitSequence;
};

export type PolkadotPrimitivesV6CommittedCandidateReceipt = {
  descriptor: PolkadotPrimitivesV6CandidateDescriptor;
  commitments: PolkadotPrimitivesV6CandidateCommitments;
};

export type PolkadotPrimitivesV6CandidateDescriptor = {
  paraId: PolkadotParachainPrimitivesPrimitivesId;
  relayParent: H256;
  collator: PolkadotPrimitivesV6CollatorAppPublic;
  persistedValidationDataHash: H256;
  povHash: H256;
  erasureRoot: H256;
  signature: PolkadotPrimitivesV6CollatorAppSignature;
  paraHead: H256;
  validationCodeHash: PolkadotParachainPrimitivesPrimitivesValidationCodeHash;
};

export type PolkadotPrimitivesV6CollatorAppPublic = SpCoreSr25519Public;

export type PolkadotPrimitivesV6CollatorAppSignature = SpCoreSr25519Signature;

export type PolkadotParachainPrimitivesPrimitivesValidationCodeHash = H256;

export type PolkadotPrimitivesV6CandidateCommitments = {
  upwardMessages: Array<Bytes>;
  horizontalMessages: Array<PolkadotCorePrimitivesOutboundHrmpMessage>;
  newValidationCode?: PolkadotParachainPrimitivesPrimitivesValidationCode | undefined;
  headData: PolkadotParachainPrimitivesPrimitivesHeadData;
  processedDownwardMessages: number;
  hrmpWatermark: number;
};

export type PolkadotCorePrimitivesOutboundHrmpMessage = {
  recipient: PolkadotParachainPrimitivesPrimitivesId;
  data: Bytes;
};

export type PolkadotParachainPrimitivesPrimitivesValidationCode = Bytes;

export type PolkadotParachainPrimitivesPrimitivesHeadData = Bytes;

export type PolkadotPrimitivesV6ValidityAttestation =
  | { tag: 'Implicit'; value: PolkadotPrimitivesV6ValidatorAppSignature }
  | { tag: 'Explicit'; value: PolkadotPrimitivesV6ValidatorAppSignature };

export type PolkadotPrimitivesV6DisputeStatementSet = {
  candidateHash: PolkadotCorePrimitivesCandidateHash;
  session: number;
  statements: Array<
    [
      PolkadotPrimitivesV6DisputeStatement,
      PolkadotPrimitivesV6ValidatorIndex,
      PolkadotPrimitivesV6ValidatorAppSignature,
    ]
  >;
};

export type PolkadotCorePrimitivesCandidateHash = H256;

export type PolkadotPrimitivesV6DisputeStatement =
  | { tag: 'Valid'; value: PolkadotPrimitivesV6ValidDisputeStatementKind }
  | { tag: 'Invalid'; value: PolkadotPrimitivesV6InvalidDisputeStatementKind };

export type PolkadotPrimitivesV6ValidDisputeStatementKind =
  | { tag: 'Explicit' }
  | { tag: 'BackingSeconded'; value: H256 }
  | { tag: 'BackingValid'; value: H256 }
  | { tag: 'ApprovalChecking' }
  | { tag: 'ApprovalCheckingMultipleCandidates'; value: Array<PolkadotCorePrimitivesCandidateHash> };

export type PolkadotPrimitivesV6InvalidDisputeStatementKind = 'Explicit';

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PolkadotRuntimeParachainsParasPalletCall =
  /**
   * See [`Pallet::force_set_current_code`].
   **/
  | {
      name: 'ForceSetCurrentCode';
      params: {
        para: PolkadotParachainPrimitivesPrimitivesId;
        newCode: PolkadotParachainPrimitivesPrimitivesValidationCode;
      };
    }
  /**
   * See [`Pallet::force_set_current_head`].
   **/
  | {
      name: 'ForceSetCurrentHead';
      params: { para: PolkadotParachainPrimitivesPrimitivesId; newHead: PolkadotParachainPrimitivesPrimitivesHeadData };
    }
  /**
   * See [`Pallet::force_schedule_code_upgrade`].
   **/
  | {
      name: 'ForceScheduleCodeUpgrade';
      params: {
        para: PolkadotParachainPrimitivesPrimitivesId;
        newCode: PolkadotParachainPrimitivesPrimitivesValidationCode;
        relayParentNumber: number;
      };
    }
  /**
   * See [`Pallet::force_note_new_head`].
   **/
  | {
      name: 'ForceNoteNewHead';
      params: { para: PolkadotParachainPrimitivesPrimitivesId; newHead: PolkadotParachainPrimitivesPrimitivesHeadData };
    }
  /**
   * See [`Pallet::force_queue_action`].
   **/
  | { name: 'ForceQueueAction'; params: { para: PolkadotParachainPrimitivesPrimitivesId } }
  /**
   * See [`Pallet::add_trusted_validation_code`].
   **/
  | {
      name: 'AddTrustedValidationCode';
      params: { validationCode: PolkadotParachainPrimitivesPrimitivesValidationCode };
    }
  /**
   * See [`Pallet::poke_unused_validation_code`].
   **/
  | {
      name: 'PokeUnusedValidationCode';
      params: { validationCodeHash: PolkadotParachainPrimitivesPrimitivesValidationCodeHash };
    }
  /**
   * See [`Pallet::include_pvf_check_statement`].
   **/
  | {
      name: 'IncludePvfCheckStatement';
      params: { stmt: PolkadotPrimitivesV6PvfCheckStatement; signature: PolkadotPrimitivesV6ValidatorAppSignature };
    }
  /**
   * See [`Pallet::force_set_most_recent_context`].
   **/
  | { name: 'ForceSetMostRecentContext'; params: { para: PolkadotParachainPrimitivesPrimitivesId; context: number } };

export type PolkadotRuntimeParachainsParasPalletCallLike =
  /**
   * See [`Pallet::force_set_current_code`].
   **/
  | {
      name: 'ForceSetCurrentCode';
      params: {
        para: PolkadotParachainPrimitivesPrimitivesId;
        newCode: PolkadotParachainPrimitivesPrimitivesValidationCode;
      };
    }
  /**
   * See [`Pallet::force_set_current_head`].
   **/
  | {
      name: 'ForceSetCurrentHead';
      params: { para: PolkadotParachainPrimitivesPrimitivesId; newHead: PolkadotParachainPrimitivesPrimitivesHeadData };
    }
  /**
   * See [`Pallet::force_schedule_code_upgrade`].
   **/
  | {
      name: 'ForceScheduleCodeUpgrade';
      params: {
        para: PolkadotParachainPrimitivesPrimitivesId;
        newCode: PolkadotParachainPrimitivesPrimitivesValidationCode;
        relayParentNumber: number;
      };
    }
  /**
   * See [`Pallet::force_note_new_head`].
   **/
  | {
      name: 'ForceNoteNewHead';
      params: { para: PolkadotParachainPrimitivesPrimitivesId; newHead: PolkadotParachainPrimitivesPrimitivesHeadData };
    }
  /**
   * See [`Pallet::force_queue_action`].
   **/
  | { name: 'ForceQueueAction'; params: { para: PolkadotParachainPrimitivesPrimitivesId } }
  /**
   * See [`Pallet::add_trusted_validation_code`].
   **/
  | {
      name: 'AddTrustedValidationCode';
      params: { validationCode: PolkadotParachainPrimitivesPrimitivesValidationCode };
    }
  /**
   * See [`Pallet::poke_unused_validation_code`].
   **/
  | {
      name: 'PokeUnusedValidationCode';
      params: { validationCodeHash: PolkadotParachainPrimitivesPrimitivesValidationCodeHash };
    }
  /**
   * See [`Pallet::include_pvf_check_statement`].
   **/
  | {
      name: 'IncludePvfCheckStatement';
      params: { stmt: PolkadotPrimitivesV6PvfCheckStatement; signature: PolkadotPrimitivesV6ValidatorAppSignature };
    }
  /**
   * See [`Pallet::force_set_most_recent_context`].
   **/
  | { name: 'ForceSetMostRecentContext'; params: { para: PolkadotParachainPrimitivesPrimitivesId; context: number } };

export type PolkadotPrimitivesV6PvfCheckStatement = {
  accept: boolean;
  subject: PolkadotParachainPrimitivesPrimitivesValidationCodeHash;
  sessionIndex: number;
  validatorIndex: PolkadotPrimitivesV6ValidatorIndex;
};

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PolkadotRuntimeParachainsInitializerPalletCall =
  /**
   * See [`Pallet::force_approve`].
   **/
  { name: 'ForceApprove'; params: { upTo: number } };

export type PolkadotRuntimeParachainsInitializerPalletCallLike =
  /**
   * See [`Pallet::force_approve`].
   **/
  { name: 'ForceApprove'; params: { upTo: number } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PolkadotRuntimeParachainsHrmpPalletCall =
  /**
   * See [`Pallet::hrmp_init_open_channel`].
   **/
  | {
      name: 'HrmpInitOpenChannel';
      params: {
        recipient: PolkadotParachainPrimitivesPrimitivesId;
        proposedMaxCapacity: number;
        proposedMaxMessageSize: number;
      };
    }
  /**
   * See [`Pallet::hrmp_accept_open_channel`].
   **/
  | { name: 'HrmpAcceptOpenChannel'; params: { sender: PolkadotParachainPrimitivesPrimitivesId } }
  /**
   * See [`Pallet::hrmp_close_channel`].
   **/
  | { name: 'HrmpCloseChannel'; params: { channelId: PolkadotParachainPrimitivesPrimitivesHrmpChannelId } }
  /**
   * See [`Pallet::force_clean_hrmp`].
   **/
  | {
      name: 'ForceCleanHrmp';
      params: { para: PolkadotParachainPrimitivesPrimitivesId; numInbound: number; numOutbound: number };
    }
  /**
   * See [`Pallet::force_process_hrmp_open`].
   **/
  | { name: 'ForceProcessHrmpOpen'; params: { channels: number } }
  /**
   * See [`Pallet::force_process_hrmp_close`].
   **/
  | { name: 'ForceProcessHrmpClose'; params: { channels: number } }
  /**
   * See [`Pallet::hrmp_cancel_open_request`].
   **/
  | {
      name: 'HrmpCancelOpenRequest';
      params: { channelId: PolkadotParachainPrimitivesPrimitivesHrmpChannelId; openRequests: number };
    }
  /**
   * See [`Pallet::force_open_hrmp_channel`].
   **/
  | {
      name: 'ForceOpenHrmpChannel';
      params: {
        sender: PolkadotParachainPrimitivesPrimitivesId;
        recipient: PolkadotParachainPrimitivesPrimitivesId;
        maxCapacity: number;
        maxMessageSize: number;
      };
    }
  /**
   * See [`Pallet::establish_system_channel`].
   **/
  | {
      name: 'EstablishSystemChannel';
      params: { sender: PolkadotParachainPrimitivesPrimitivesId; recipient: PolkadotParachainPrimitivesPrimitivesId };
    }
  /**
   * See [`Pallet::poke_channel_deposits`].
   **/
  | {
      name: 'PokeChannelDeposits';
      params: { sender: PolkadotParachainPrimitivesPrimitivesId; recipient: PolkadotParachainPrimitivesPrimitivesId };
    };

export type PolkadotRuntimeParachainsHrmpPalletCallLike =
  /**
   * See [`Pallet::hrmp_init_open_channel`].
   **/
  | {
      name: 'HrmpInitOpenChannel';
      params: {
        recipient: PolkadotParachainPrimitivesPrimitivesId;
        proposedMaxCapacity: number;
        proposedMaxMessageSize: number;
      };
    }
  /**
   * See [`Pallet::hrmp_accept_open_channel`].
   **/
  | { name: 'HrmpAcceptOpenChannel'; params: { sender: PolkadotParachainPrimitivesPrimitivesId } }
  /**
   * See [`Pallet::hrmp_close_channel`].
   **/
  | { name: 'HrmpCloseChannel'; params: { channelId: PolkadotParachainPrimitivesPrimitivesHrmpChannelId } }
  /**
   * See [`Pallet::force_clean_hrmp`].
   **/
  | {
      name: 'ForceCleanHrmp';
      params: { para: PolkadotParachainPrimitivesPrimitivesId; numInbound: number; numOutbound: number };
    }
  /**
   * See [`Pallet::force_process_hrmp_open`].
   **/
  | { name: 'ForceProcessHrmpOpen'; params: { channels: number } }
  /**
   * See [`Pallet::force_process_hrmp_close`].
   **/
  | { name: 'ForceProcessHrmpClose'; params: { channels: number } }
  /**
   * See [`Pallet::hrmp_cancel_open_request`].
   **/
  | {
      name: 'HrmpCancelOpenRequest';
      params: { channelId: PolkadotParachainPrimitivesPrimitivesHrmpChannelId; openRequests: number };
    }
  /**
   * See [`Pallet::force_open_hrmp_channel`].
   **/
  | {
      name: 'ForceOpenHrmpChannel';
      params: {
        sender: PolkadotParachainPrimitivesPrimitivesId;
        recipient: PolkadotParachainPrimitivesPrimitivesId;
        maxCapacity: number;
        maxMessageSize: number;
      };
    }
  /**
   * See [`Pallet::establish_system_channel`].
   **/
  | {
      name: 'EstablishSystemChannel';
      params: { sender: PolkadotParachainPrimitivesPrimitivesId; recipient: PolkadotParachainPrimitivesPrimitivesId };
    }
  /**
   * See [`Pallet::poke_channel_deposits`].
   **/
  | {
      name: 'PokeChannelDeposits';
      params: { sender: PolkadotParachainPrimitivesPrimitivesId; recipient: PolkadotParachainPrimitivesPrimitivesId };
    };

export type PolkadotParachainPrimitivesPrimitivesHrmpChannelId = {
  sender: PolkadotParachainPrimitivesPrimitivesId;
  recipient: PolkadotParachainPrimitivesPrimitivesId;
};

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PolkadotRuntimeParachainsDisputesPalletCall =
  /**
   * See [`Pallet::force_unfreeze`].
   **/
  'ForceUnfreeze';

export type PolkadotRuntimeParachainsDisputesPalletCallLike =
  /**
   * See [`Pallet::force_unfreeze`].
   **/
  'ForceUnfreeze';

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PolkadotRuntimeParachainsDisputesSlashingPalletCall =
  /**
   * See [`Pallet::report_dispute_lost_unsigned`].
   **/
  {
    name: 'ReportDisputeLostUnsigned';
    params: { disputeProof: PolkadotPrimitivesV6SlashingDisputeProof; keyOwnerProof: SpSessionMembershipProof };
  };

export type PolkadotRuntimeParachainsDisputesSlashingPalletCallLike =
  /**
   * See [`Pallet::report_dispute_lost_unsigned`].
   **/
  {
    name: 'ReportDisputeLostUnsigned';
    params: { disputeProof: PolkadotPrimitivesV6SlashingDisputeProof; keyOwnerProof: SpSessionMembershipProof };
  };

export type PolkadotPrimitivesV6SlashingDisputeProof = {
  timeSlot: PolkadotPrimitivesV6SlashingDisputesTimeSlot;
  kind: PolkadotPrimitivesV6SlashingSlashingOffenceKind;
  validatorIndex: PolkadotPrimitivesV6ValidatorIndex;
  validatorId: PolkadotPrimitivesV6ValidatorAppPublic;
};

export type PolkadotPrimitivesV6SlashingDisputesTimeSlot = {
  sessionIndex: number;
  candidateHash: PolkadotCorePrimitivesCandidateHash;
};

export type PolkadotPrimitivesV6SlashingSlashingOffenceKind = 'ForInvalid' | 'AgainstValid';

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletMessageQueueCall =
  /**
   * See [`Pallet::reap_page`].
   **/
  | {
      name: 'ReapPage';
      params: { messageOrigin: PolkadotRuntimeParachainsInclusionAggregateMessageOrigin; pageIndex: number };
    }
  /**
   * See [`Pallet::execute_overweight`].
   **/
  | {
      name: 'ExecuteOverweight';
      params: {
        messageOrigin: PolkadotRuntimeParachainsInclusionAggregateMessageOrigin;
        page: number;
        index: number;
        weightLimit: SpWeightsWeightV2Weight;
      };
    };

export type PalletMessageQueueCallLike =
  /**
   * See [`Pallet::reap_page`].
   **/
  | {
      name: 'ReapPage';
      params: { messageOrigin: PolkadotRuntimeParachainsInclusionAggregateMessageOrigin; pageIndex: number };
    }
  /**
   * See [`Pallet::execute_overweight`].
   **/
  | {
      name: 'ExecuteOverweight';
      params: {
        messageOrigin: PolkadotRuntimeParachainsInclusionAggregateMessageOrigin;
        page: number;
        index: number;
        weightLimit: SpWeightsWeightV2Weight;
      };
    };

export type PolkadotRuntimeParachainsInclusionAggregateMessageOrigin = {
  tag: 'Ump';
  value: PolkadotRuntimeParachainsInclusionUmpQueueId;
};

export type PolkadotRuntimeParachainsInclusionUmpQueueId = {
  tag: 'Para';
  value: PolkadotParachainPrimitivesPrimitivesId;
};

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PolkadotRuntimeParachainsAssignerOnDemandPalletCall =
  /**
   * See [`Pallet::place_order_allow_death`].
   **/
  | { name: 'PlaceOrderAllowDeath'; params: { maxAmount: bigint; paraId: PolkadotParachainPrimitivesPrimitivesId } }
  /**
   * See [`Pallet::place_order_keep_alive`].
   **/
  | { name: 'PlaceOrderKeepAlive'; params: { maxAmount: bigint; paraId: PolkadotParachainPrimitivesPrimitivesId } };

export type PolkadotRuntimeParachainsAssignerOnDemandPalletCallLike =
  /**
   * See [`Pallet::place_order_allow_death`].
   **/
  | { name: 'PlaceOrderAllowDeath'; params: { maxAmount: bigint; paraId: PolkadotParachainPrimitivesPrimitivesId } }
  /**
   * See [`Pallet::place_order_keep_alive`].
   **/
  | { name: 'PlaceOrderKeepAlive'; params: { maxAmount: bigint; paraId: PolkadotParachainPrimitivesPrimitivesId } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PolkadotRuntimeCommonParasRegistrarPalletCall =
  /**
   * See [`Pallet::register`].
   **/
  | {
      name: 'Register';
      params: {
        id: PolkadotParachainPrimitivesPrimitivesId;
        genesisHead: PolkadotParachainPrimitivesPrimitivesHeadData;
        validationCode: PolkadotParachainPrimitivesPrimitivesValidationCode;
      };
    }
  /**
   * See [`Pallet::force_register`].
   **/
  | {
      name: 'ForceRegister';
      params: {
        who: AccountId32;
        deposit: bigint;
        id: PolkadotParachainPrimitivesPrimitivesId;
        genesisHead: PolkadotParachainPrimitivesPrimitivesHeadData;
        validationCode: PolkadotParachainPrimitivesPrimitivesValidationCode;
      };
    }
  /**
   * See [`Pallet::deregister`].
   **/
  | { name: 'Deregister'; params: { id: PolkadotParachainPrimitivesPrimitivesId } }
  /**
   * See [`Pallet::swap`].
   **/
  | {
      name: 'Swap';
      params: { id: PolkadotParachainPrimitivesPrimitivesId; other: PolkadotParachainPrimitivesPrimitivesId };
    }
  /**
   * See [`Pallet::remove_lock`].
   **/
  | { name: 'RemoveLock'; params: { para: PolkadotParachainPrimitivesPrimitivesId } }
  /**
   * See [`Pallet::reserve`].
   **/
  | { name: 'Reserve' }
  /**
   * See [`Pallet::add_lock`].
   **/
  | { name: 'AddLock'; params: { para: PolkadotParachainPrimitivesPrimitivesId } }
  /**
   * See [`Pallet::schedule_code_upgrade`].
   **/
  | {
      name: 'ScheduleCodeUpgrade';
      params: {
        para: PolkadotParachainPrimitivesPrimitivesId;
        newCode: PolkadotParachainPrimitivesPrimitivesValidationCode;
      };
    }
  /**
   * See [`Pallet::set_current_head`].
   **/
  | {
      name: 'SetCurrentHead';
      params: { para: PolkadotParachainPrimitivesPrimitivesId; newHead: PolkadotParachainPrimitivesPrimitivesHeadData };
    };

export type PolkadotRuntimeCommonParasRegistrarPalletCallLike =
  /**
   * See [`Pallet::register`].
   **/
  | {
      name: 'Register';
      params: {
        id: PolkadotParachainPrimitivesPrimitivesId;
        genesisHead: PolkadotParachainPrimitivesPrimitivesHeadData;
        validationCode: PolkadotParachainPrimitivesPrimitivesValidationCode;
      };
    }
  /**
   * See [`Pallet::force_register`].
   **/
  | {
      name: 'ForceRegister';
      params: {
        who: AccountId32Like;
        deposit: bigint;
        id: PolkadotParachainPrimitivesPrimitivesId;
        genesisHead: PolkadotParachainPrimitivesPrimitivesHeadData;
        validationCode: PolkadotParachainPrimitivesPrimitivesValidationCode;
      };
    }
  /**
   * See [`Pallet::deregister`].
   **/
  | { name: 'Deregister'; params: { id: PolkadotParachainPrimitivesPrimitivesId } }
  /**
   * See [`Pallet::swap`].
   **/
  | {
      name: 'Swap';
      params: { id: PolkadotParachainPrimitivesPrimitivesId; other: PolkadotParachainPrimitivesPrimitivesId };
    }
  /**
   * See [`Pallet::remove_lock`].
   **/
  | { name: 'RemoveLock'; params: { para: PolkadotParachainPrimitivesPrimitivesId } }
  /**
   * See [`Pallet::reserve`].
   **/
  | { name: 'Reserve' }
  /**
   * See [`Pallet::add_lock`].
   **/
  | { name: 'AddLock'; params: { para: PolkadotParachainPrimitivesPrimitivesId } }
  /**
   * See [`Pallet::schedule_code_upgrade`].
   **/
  | {
      name: 'ScheduleCodeUpgrade';
      params: {
        para: PolkadotParachainPrimitivesPrimitivesId;
        newCode: PolkadotParachainPrimitivesPrimitivesValidationCode;
      };
    }
  /**
   * See [`Pallet::set_current_head`].
   **/
  | {
      name: 'SetCurrentHead';
      params: { para: PolkadotParachainPrimitivesPrimitivesId; newHead: PolkadotParachainPrimitivesPrimitivesHeadData };
    };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PolkadotRuntimeCommonSlotsPalletCall =
  /**
   * See [`Pallet::force_lease`].
   **/
  | {
      name: 'ForceLease';
      params: {
        para: PolkadotParachainPrimitivesPrimitivesId;
        leaser: AccountId32;
        amount: bigint;
        periodBegin: number;
        periodCount: number;
      };
    }
  /**
   * See [`Pallet::clear_all_leases`].
   **/
  | { name: 'ClearAllLeases'; params: { para: PolkadotParachainPrimitivesPrimitivesId } }
  /**
   * See [`Pallet::trigger_onboard`].
   **/
  | { name: 'TriggerOnboard'; params: { para: PolkadotParachainPrimitivesPrimitivesId } };

export type PolkadotRuntimeCommonSlotsPalletCallLike =
  /**
   * See [`Pallet::force_lease`].
   **/
  | {
      name: 'ForceLease';
      params: {
        para: PolkadotParachainPrimitivesPrimitivesId;
        leaser: AccountId32Like;
        amount: bigint;
        periodBegin: number;
        periodCount: number;
      };
    }
  /**
   * See [`Pallet::clear_all_leases`].
   **/
  | { name: 'ClearAllLeases'; params: { para: PolkadotParachainPrimitivesPrimitivesId } }
  /**
   * See [`Pallet::trigger_onboard`].
   **/
  | { name: 'TriggerOnboard'; params: { para: PolkadotParachainPrimitivesPrimitivesId } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PolkadotRuntimeCommonAuctionsPalletCall =
  /**
   * See [`Pallet::new_auction`].
   **/
  | { name: 'NewAuction'; params: { duration: number; leasePeriodIndex: number } }
  /**
   * See [`Pallet::bid`].
   **/
  | {
      name: 'Bid';
      params: {
        para: PolkadotParachainPrimitivesPrimitivesId;
        auctionIndex: number;
        firstSlot: number;
        lastSlot: number;
        amount: bigint;
      };
    }
  /**
   * See [`Pallet::cancel_auction`].
   **/
  | { name: 'CancelAuction' };

export type PolkadotRuntimeCommonAuctionsPalletCallLike =
  /**
   * See [`Pallet::new_auction`].
   **/
  | { name: 'NewAuction'; params: { duration: number; leasePeriodIndex: number } }
  /**
   * See [`Pallet::bid`].
   **/
  | {
      name: 'Bid';
      params: {
        para: PolkadotParachainPrimitivesPrimitivesId;
        auctionIndex: number;
        firstSlot: number;
        lastSlot: number;
        amount: bigint;
      };
    }
  /**
   * See [`Pallet::cancel_auction`].
   **/
  | { name: 'CancelAuction' };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PolkadotRuntimeCommonCrowdloanPalletCall =
  /**
   * See [`Pallet::create`].
   **/
  | {
      name: 'Create';
      params: {
        index: PolkadotParachainPrimitivesPrimitivesId;
        cap: bigint;
        firstPeriod: number;
        lastPeriod: number;
        end: number;
        verifier?: SpRuntimeMultiSigner | undefined;
      };
    }
  /**
   * See [`Pallet::contribute`].
   **/
  | {
      name: 'Contribute';
      params: {
        index: PolkadotParachainPrimitivesPrimitivesId;
        value: bigint;
        signature?: SpRuntimeMultiSignature | undefined;
      };
    }
  /**
   * See [`Pallet::withdraw`].
   **/
  | { name: 'Withdraw'; params: { who: AccountId32; index: PolkadotParachainPrimitivesPrimitivesId } }
  /**
   * See [`Pallet::refund`].
   **/
  | { name: 'Refund'; params: { index: PolkadotParachainPrimitivesPrimitivesId } }
  /**
   * See [`Pallet::dissolve`].
   **/
  | { name: 'Dissolve'; params: { index: PolkadotParachainPrimitivesPrimitivesId } }
  /**
   * See [`Pallet::edit`].
   **/
  | {
      name: 'Edit';
      params: {
        index: PolkadotParachainPrimitivesPrimitivesId;
        cap: bigint;
        firstPeriod: number;
        lastPeriod: number;
        end: number;
        verifier?: SpRuntimeMultiSigner | undefined;
      };
    }
  /**
   * See [`Pallet::add_memo`].
   **/
  | { name: 'AddMemo'; params: { index: PolkadotParachainPrimitivesPrimitivesId; memo: Bytes } }
  /**
   * See [`Pallet::poke`].
   **/
  | { name: 'Poke'; params: { index: PolkadotParachainPrimitivesPrimitivesId } }
  /**
   * See [`Pallet::contribute_all`].
   **/
  | {
      name: 'ContributeAll';
      params: { index: PolkadotParachainPrimitivesPrimitivesId; signature?: SpRuntimeMultiSignature | undefined };
    };

export type PolkadotRuntimeCommonCrowdloanPalletCallLike =
  /**
   * See [`Pallet::create`].
   **/
  | {
      name: 'Create';
      params: {
        index: PolkadotParachainPrimitivesPrimitivesId;
        cap: bigint;
        firstPeriod: number;
        lastPeriod: number;
        end: number;
        verifier?: SpRuntimeMultiSigner | undefined;
      };
    }
  /**
   * See [`Pallet::contribute`].
   **/
  | {
      name: 'Contribute';
      params: {
        index: PolkadotParachainPrimitivesPrimitivesId;
        value: bigint;
        signature?: SpRuntimeMultiSignature | undefined;
      };
    }
  /**
   * See [`Pallet::withdraw`].
   **/
  | { name: 'Withdraw'; params: { who: AccountId32Like; index: PolkadotParachainPrimitivesPrimitivesId } }
  /**
   * See [`Pallet::refund`].
   **/
  | { name: 'Refund'; params: { index: PolkadotParachainPrimitivesPrimitivesId } }
  /**
   * See [`Pallet::dissolve`].
   **/
  | { name: 'Dissolve'; params: { index: PolkadotParachainPrimitivesPrimitivesId } }
  /**
   * See [`Pallet::edit`].
   **/
  | {
      name: 'Edit';
      params: {
        index: PolkadotParachainPrimitivesPrimitivesId;
        cap: bigint;
        firstPeriod: number;
        lastPeriod: number;
        end: number;
        verifier?: SpRuntimeMultiSigner | undefined;
      };
    }
  /**
   * See [`Pallet::add_memo`].
   **/
  | { name: 'AddMemo'; params: { index: PolkadotParachainPrimitivesPrimitivesId; memo: BytesLike } }
  /**
   * See [`Pallet::poke`].
   **/
  | { name: 'Poke'; params: { index: PolkadotParachainPrimitivesPrimitivesId } }
  /**
   * See [`Pallet::contribute_all`].
   **/
  | {
      name: 'ContributeAll';
      params: { index: PolkadotParachainPrimitivesPrimitivesId; signature?: SpRuntimeMultiSignature | undefined };
    };

export type SpRuntimeMultiSigner =
  | { tag: 'Ed25519'; value: SpCoreEd25519Public }
  | { tag: 'Sr25519'; value: SpCoreSr25519Public }
  | { tag: 'Ecdsa'; value: SpCoreEcdsaPublic };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PolkadotRuntimeParachainsCoretimePalletCall =
  /**
   * See [`Pallet::request_core_count`].
   **/
  | { name: 'RequestCoreCount'; params: { count: number } }
  /**
   * See [`Pallet::assign_core`].
   **/
  | {
      name: 'AssignCore';
      params: {
        core: number;
        begin: number;
        assignment: Array<
          [PalletBrokerCoretimeInterfaceCoreAssignment, PolkadotRuntimeParachainsAssignerCoretimePartsOf57600]
        >;
        endHint?: number | undefined;
      };
    };

export type PolkadotRuntimeParachainsCoretimePalletCallLike =
  /**
   * See [`Pallet::request_core_count`].
   **/
  | { name: 'RequestCoreCount'; params: { count: number } }
  /**
   * See [`Pallet::assign_core`].
   **/
  | {
      name: 'AssignCore';
      params: {
        core: number;
        begin: number;
        assignment: Array<
          [PalletBrokerCoretimeInterfaceCoreAssignment, PolkadotRuntimeParachainsAssignerCoretimePartsOf57600]
        >;
        endHint?: number | undefined;
      };
    };

export type PalletBrokerCoretimeInterfaceCoreAssignment =
  | { tag: 'Idle' }
  | { tag: 'Pool' }
  | { tag: 'Task'; value: number };

export type PolkadotRuntimeParachainsAssignerCoretimePartsOf57600 = number;

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletXcmCall =
  /**
   * See [`Pallet::send`].
   **/
  | { name: 'Send'; params: { dest: XcmVersionedLocation; message: XcmVersionedXcm } }
  /**
   * See [`Pallet::teleport_assets`].
   **/
  | {
      name: 'TeleportAssets';
      params: {
        dest: XcmVersionedLocation;
        beneficiary: XcmVersionedLocation;
        assets: XcmVersionedAssets;
        feeAssetItem: number;
      };
    }
  /**
   * See [`Pallet::reserve_transfer_assets`].
   **/
  | {
      name: 'ReserveTransferAssets';
      params: {
        dest: XcmVersionedLocation;
        beneficiary: XcmVersionedLocation;
        assets: XcmVersionedAssets;
        feeAssetItem: number;
      };
    }
  /**
   * See [`Pallet::execute`].
   **/
  | { name: 'Execute'; params: { message: XcmVersionedXcm; maxWeight: SpWeightsWeightV2Weight } }
  /**
   * See [`Pallet::force_xcm_version`].
   **/
  | { name: 'ForceXcmVersion'; params: { location: StagingXcmV4Location; version: number } }
  /**
   * See [`Pallet::force_default_xcm_version`].
   **/
  | { name: 'ForceDefaultXcmVersion'; params: { maybeXcmVersion?: number | undefined } }
  /**
   * See [`Pallet::force_subscribe_version_notify`].
   **/
  | { name: 'ForceSubscribeVersionNotify'; params: { location: XcmVersionedLocation } }
  /**
   * See [`Pallet::force_unsubscribe_version_notify`].
   **/
  | { name: 'ForceUnsubscribeVersionNotify'; params: { location: XcmVersionedLocation } }
  /**
   * See [`Pallet::limited_reserve_transfer_assets`].
   **/
  | {
      name: 'LimitedReserveTransferAssets';
      params: {
        dest: XcmVersionedLocation;
        beneficiary: XcmVersionedLocation;
        assets: XcmVersionedAssets;
        feeAssetItem: number;
        weightLimit: XcmV3WeightLimit;
      };
    }
  /**
   * See [`Pallet::limited_teleport_assets`].
   **/
  | {
      name: 'LimitedTeleportAssets';
      params: {
        dest: XcmVersionedLocation;
        beneficiary: XcmVersionedLocation;
        assets: XcmVersionedAssets;
        feeAssetItem: number;
        weightLimit: XcmV3WeightLimit;
      };
    }
  /**
   * See [`Pallet::force_suspension`].
   **/
  | { name: 'ForceSuspension'; params: { suspended: boolean } }
  /**
   * See [`Pallet::transfer_assets`].
   **/
  | {
      name: 'TransferAssets';
      params: {
        dest: XcmVersionedLocation;
        beneficiary: XcmVersionedLocation;
        assets: XcmVersionedAssets;
        feeAssetItem: number;
        weightLimit: XcmV3WeightLimit;
      };
    };

export type PalletXcmCallLike =
  /**
   * See [`Pallet::send`].
   **/
  | { name: 'Send'; params: { dest: XcmVersionedLocation; message: XcmVersionedXcm } }
  /**
   * See [`Pallet::teleport_assets`].
   **/
  | {
      name: 'TeleportAssets';
      params: {
        dest: XcmVersionedLocation;
        beneficiary: XcmVersionedLocation;
        assets: XcmVersionedAssets;
        feeAssetItem: number;
      };
    }
  /**
   * See [`Pallet::reserve_transfer_assets`].
   **/
  | {
      name: 'ReserveTransferAssets';
      params: {
        dest: XcmVersionedLocation;
        beneficiary: XcmVersionedLocation;
        assets: XcmVersionedAssets;
        feeAssetItem: number;
      };
    }
  /**
   * See [`Pallet::execute`].
   **/
  | { name: 'Execute'; params: { message: XcmVersionedXcm; maxWeight: SpWeightsWeightV2Weight } }
  /**
   * See [`Pallet::force_xcm_version`].
   **/
  | { name: 'ForceXcmVersion'; params: { location: StagingXcmV4Location; version: number } }
  /**
   * See [`Pallet::force_default_xcm_version`].
   **/
  | { name: 'ForceDefaultXcmVersion'; params: { maybeXcmVersion?: number | undefined } }
  /**
   * See [`Pallet::force_subscribe_version_notify`].
   **/
  | { name: 'ForceSubscribeVersionNotify'; params: { location: XcmVersionedLocation } }
  /**
   * See [`Pallet::force_unsubscribe_version_notify`].
   **/
  | { name: 'ForceUnsubscribeVersionNotify'; params: { location: XcmVersionedLocation } }
  /**
   * See [`Pallet::limited_reserve_transfer_assets`].
   **/
  | {
      name: 'LimitedReserveTransferAssets';
      params: {
        dest: XcmVersionedLocation;
        beneficiary: XcmVersionedLocation;
        assets: XcmVersionedAssets;
        feeAssetItem: number;
        weightLimit: XcmV3WeightLimit;
      };
    }
  /**
   * See [`Pallet::limited_teleport_assets`].
   **/
  | {
      name: 'LimitedTeleportAssets';
      params: {
        dest: XcmVersionedLocation;
        beneficiary: XcmVersionedLocation;
        assets: XcmVersionedAssets;
        feeAssetItem: number;
        weightLimit: XcmV3WeightLimit;
      };
    }
  /**
   * See [`Pallet::force_suspension`].
   **/
  | { name: 'ForceSuspension'; params: { suspended: boolean } }
  /**
   * See [`Pallet::transfer_assets`].
   **/
  | {
      name: 'TransferAssets';
      params: {
        dest: XcmVersionedLocation;
        beneficiary: XcmVersionedLocation;
        assets: XcmVersionedAssets;
        feeAssetItem: number;
        weightLimit: XcmV3WeightLimit;
      };
    };

export type XcmVersionedXcm =
  | { tag: 'V2'; value: XcmV2Xcm }
  | { tag: 'V3'; value: XcmV3Xcm }
  | { tag: 'V4'; value: StagingXcmV4Xcm };

export type XcmV2Xcm = Array<XcmV2Instruction>;

export type XcmV2Instruction =
  | { tag: 'WithdrawAsset'; value: XcmV2MultiassetMultiAssets }
  | { tag: 'ReserveAssetDeposited'; value: XcmV2MultiassetMultiAssets }
  | { tag: 'ReceiveTeleportedAsset'; value: XcmV2MultiassetMultiAssets }
  | { tag: 'QueryResponse'; value: { queryId: bigint; response: XcmV2Response; maxWeight: bigint } }
  | {
      tag: 'TransferAsset';
      value: { assets: XcmV2MultiassetMultiAssets; beneficiary: XcmV2MultilocationMultiLocation };
    }
  | {
      tag: 'TransferReserveAsset';
      value: { assets: XcmV2MultiassetMultiAssets; dest: XcmV2MultilocationMultiLocation; xcm: XcmV2Xcm };
    }
  | { tag: 'Transact'; value: { originType: XcmV2OriginKind; requireWeightAtMost: bigint; call: XcmDoubleEncoded } }
  | { tag: 'HrmpNewChannelOpenRequest'; value: { sender: number; maxMessageSize: number; maxCapacity: number } }
  | { tag: 'HrmpChannelAccepted'; value: { recipient: number } }
  | { tag: 'HrmpChannelClosing'; value: { initiator: number; sender: number; recipient: number } }
  | { tag: 'ClearOrigin' }
  | { tag: 'DescendOrigin'; value: XcmV2MultilocationJunctions }
  | { tag: 'ReportError'; value: { queryId: bigint; dest: XcmV2MultilocationMultiLocation; maxResponseWeight: bigint } }
  | {
      tag: 'DepositAsset';
      value: {
        assets: XcmV2MultiassetMultiAssetFilter;
        maxAssets: number;
        beneficiary: XcmV2MultilocationMultiLocation;
      };
    }
  | {
      tag: 'DepositReserveAsset';
      value: {
        assets: XcmV2MultiassetMultiAssetFilter;
        maxAssets: number;
        dest: XcmV2MultilocationMultiLocation;
        xcm: XcmV2Xcm;
      };
    }
  | { tag: 'ExchangeAsset'; value: { give: XcmV2MultiassetMultiAssetFilter; receive: XcmV2MultiassetMultiAssets } }
  | {
      tag: 'InitiateReserveWithdraw';
      value: { assets: XcmV2MultiassetMultiAssetFilter; reserve: XcmV2MultilocationMultiLocation; xcm: XcmV2Xcm };
    }
  | {
      tag: 'InitiateTeleport';
      value: { assets: XcmV2MultiassetMultiAssetFilter; dest: XcmV2MultilocationMultiLocation; xcm: XcmV2Xcm };
    }
  | {
      tag: 'QueryHolding';
      value: {
        queryId: bigint;
        dest: XcmV2MultilocationMultiLocation;
        assets: XcmV2MultiassetMultiAssetFilter;
        maxResponseWeight: bigint;
      };
    }
  | { tag: 'BuyExecution'; value: { fees: XcmV2MultiassetMultiAsset; weightLimit: XcmV2WeightLimit } }
  | { tag: 'RefundSurplus' }
  | { tag: 'SetErrorHandler'; value: XcmV2Xcm }
  | { tag: 'SetAppendix'; value: XcmV2Xcm }
  | { tag: 'ClearError' }
  | { tag: 'ClaimAsset'; value: { assets: XcmV2MultiassetMultiAssets; ticket: XcmV2MultilocationMultiLocation } }
  | { tag: 'Trap'; value: bigint }
  | { tag: 'SubscribeVersion'; value: { queryId: bigint; maxResponseWeight: bigint } }
  | { tag: 'UnsubscribeVersion' };

export type XcmV2MultiassetMultiAssets = Array<XcmV2MultiassetMultiAsset>;

export type XcmV2MultiassetMultiAsset = { id: XcmV2MultiassetAssetId; fun: XcmV2MultiassetFungibility };

export type XcmV2MultiassetAssetId =
  | { tag: 'Concrete'; value: XcmV2MultilocationMultiLocation }
  | { tag: 'Abstract'; value: Bytes };

export type XcmV2MultiassetFungibility =
  | { tag: 'Fungible'; value: bigint }
  | { tag: 'NonFungible'; value: XcmV2MultiassetAssetInstance };

export type XcmV2MultiassetAssetInstance =
  | { tag: 'Undefined' }
  | { tag: 'Index'; value: bigint }
  | { tag: 'Array4'; value: FixedBytes<4> }
  | { tag: 'Array8'; value: FixedBytes<8> }
  | { tag: 'Array16'; value: FixedBytes<16> }
  | { tag: 'Array32'; value: FixedBytes<32> }
  | { tag: 'Blob'; value: Bytes };

export type XcmV2Response =
  | { tag: 'Null' }
  | { tag: 'Assets'; value: XcmV2MultiassetMultiAssets }
  | { tag: 'ExecutionResult'; value?: [number, XcmV2TraitsError] | undefined }
  | { tag: 'Version'; value: number };

export type XcmV2TraitsError =
  | { tag: 'Overflow' }
  | { tag: 'Unimplemented' }
  | { tag: 'UntrustedReserveLocation' }
  | { tag: 'UntrustedTeleportLocation' }
  | { tag: 'MultiLocationFull' }
  | { tag: 'MultiLocationNotInvertible' }
  | { tag: 'BadOrigin' }
  | { tag: 'InvalidLocation' }
  | { tag: 'AssetNotFound' }
  | { tag: 'FailedToTransactAsset' }
  | { tag: 'NotWithdrawable' }
  | { tag: 'LocationCannotHold' }
  | { tag: 'ExceedsMaxMessageSize' }
  | { tag: 'DestinationUnsupported' }
  | { tag: 'Transport' }
  | { tag: 'Unroutable' }
  | { tag: 'UnknownClaim' }
  | { tag: 'FailedToDecode' }
  | { tag: 'MaxWeightInvalid' }
  | { tag: 'NotHoldingFees' }
  | { tag: 'TooExpensive' }
  | { tag: 'Trap'; value: bigint }
  | { tag: 'UnhandledXcmVersion' }
  | { tag: 'WeightLimitReached'; value: bigint }
  | { tag: 'Barrier' }
  | { tag: 'WeightNotComputable' };

export type XcmV2OriginKind = 'Native' | 'SovereignAccount' | 'Superuser' | 'Xcm';

export type XcmDoubleEncoded = { encoded: Bytes };

export type XcmV2MultiassetMultiAssetFilter =
  | { tag: 'Definite'; value: XcmV2MultiassetMultiAssets }
  | { tag: 'Wild'; value: XcmV2MultiassetWildMultiAsset };

export type XcmV2MultiassetWildMultiAsset =
  | { tag: 'All' }
  | { tag: 'AllOf'; value: { id: XcmV2MultiassetAssetId; fun: XcmV2MultiassetWildFungibility } };

export type XcmV2MultiassetWildFungibility = 'Fungible' | 'NonFungible';

export type XcmV2WeightLimit = { tag: 'Unlimited' } | { tag: 'Limited'; value: bigint };

export type XcmV3Xcm = Array<XcmV3Instruction>;

export type XcmV3Instruction =
  | { tag: 'WithdrawAsset'; value: XcmV3MultiassetMultiAssets }
  | { tag: 'ReserveAssetDeposited'; value: XcmV3MultiassetMultiAssets }
  | { tag: 'ReceiveTeleportedAsset'; value: XcmV3MultiassetMultiAssets }
  | {
      tag: 'QueryResponse';
      value: {
        queryId: bigint;
        response: XcmV3Response;
        maxWeight: SpWeightsWeightV2Weight;
        querier?: StagingXcmV3MultilocationMultiLocation | undefined;
      };
    }
  | {
      tag: 'TransferAsset';
      value: { assets: XcmV3MultiassetMultiAssets; beneficiary: StagingXcmV3MultilocationMultiLocation };
    }
  | {
      tag: 'TransferReserveAsset';
      value: { assets: XcmV3MultiassetMultiAssets; dest: StagingXcmV3MultilocationMultiLocation; xcm: XcmV3Xcm };
    }
  | {
      tag: 'Transact';
      value: { originKind: XcmV2OriginKind; requireWeightAtMost: SpWeightsWeightV2Weight; call: XcmDoubleEncoded };
    }
  | { tag: 'HrmpNewChannelOpenRequest'; value: { sender: number; maxMessageSize: number; maxCapacity: number } }
  | { tag: 'HrmpChannelAccepted'; value: { recipient: number } }
  | { tag: 'HrmpChannelClosing'; value: { initiator: number; sender: number; recipient: number } }
  | { tag: 'ClearOrigin' }
  | { tag: 'DescendOrigin'; value: XcmV3Junctions }
  | { tag: 'ReportError'; value: XcmV3QueryResponseInfo }
  | {
      tag: 'DepositAsset';
      value: { assets: XcmV3MultiassetMultiAssetFilter; beneficiary: StagingXcmV3MultilocationMultiLocation };
    }
  | {
      tag: 'DepositReserveAsset';
      value: { assets: XcmV3MultiassetMultiAssetFilter; dest: StagingXcmV3MultilocationMultiLocation; xcm: XcmV3Xcm };
    }
  | {
      tag: 'ExchangeAsset';
      value: { give: XcmV3MultiassetMultiAssetFilter; want: XcmV3MultiassetMultiAssets; maximal: boolean };
    }
  | {
      tag: 'InitiateReserveWithdraw';
      value: {
        assets: XcmV3MultiassetMultiAssetFilter;
        reserve: StagingXcmV3MultilocationMultiLocation;
        xcm: XcmV3Xcm;
      };
    }
  | {
      tag: 'InitiateTeleport';
      value: { assets: XcmV3MultiassetMultiAssetFilter; dest: StagingXcmV3MultilocationMultiLocation; xcm: XcmV3Xcm };
    }
  | { tag: 'ReportHolding'; value: { responseInfo: XcmV3QueryResponseInfo; assets: XcmV3MultiassetMultiAssetFilter } }
  | { tag: 'BuyExecution'; value: { fees: XcmV3MultiassetMultiAsset; weightLimit: XcmV3WeightLimit } }
  | { tag: 'RefundSurplus' }
  | { tag: 'SetErrorHandler'; value: XcmV3Xcm }
  | { tag: 'SetAppendix'; value: XcmV3Xcm }
  | { tag: 'ClearError' }
  | { tag: 'ClaimAsset'; value: { assets: XcmV3MultiassetMultiAssets; ticket: StagingXcmV3MultilocationMultiLocation } }
  | { tag: 'Trap'; value: bigint }
  | { tag: 'SubscribeVersion'; value: { queryId: bigint; maxResponseWeight: SpWeightsWeightV2Weight } }
  | { tag: 'UnsubscribeVersion' }
  | { tag: 'BurnAsset'; value: XcmV3MultiassetMultiAssets }
  | { tag: 'ExpectAsset'; value: XcmV3MultiassetMultiAssets }
  | { tag: 'ExpectOrigin'; value?: StagingXcmV3MultilocationMultiLocation | undefined }
  | { tag: 'ExpectError'; value?: [number, XcmV3TraitsError] | undefined }
  | { tag: 'ExpectTransactStatus'; value: XcmV3MaybeErrorCode }
  | { tag: 'QueryPallet'; value: { moduleName: Bytes; responseInfo: XcmV3QueryResponseInfo } }
  | {
      tag: 'ExpectPallet';
      value: { index: number; name: Bytes; moduleName: Bytes; crateMajor: number; minCrateMinor: number };
    }
  | { tag: 'ReportTransactStatus'; value: XcmV3QueryResponseInfo }
  | { tag: 'ClearTransactStatus' }
  | { tag: 'UniversalOrigin'; value: XcmV3Junction }
  | { tag: 'ExportMessage'; value: { network: XcmV3JunctionNetworkId; destination: XcmV3Junctions; xcm: XcmV3Xcm } }
  | { tag: 'LockAsset'; value: { asset: XcmV3MultiassetMultiAsset; unlocker: StagingXcmV3MultilocationMultiLocation } }
  | { tag: 'UnlockAsset'; value: { asset: XcmV3MultiassetMultiAsset; target: StagingXcmV3MultilocationMultiLocation } }
  | {
      tag: 'NoteUnlockable';
      value: { asset: XcmV3MultiassetMultiAsset; owner: StagingXcmV3MultilocationMultiLocation };
    }
  | {
      tag: 'RequestUnlock';
      value: { asset: XcmV3MultiassetMultiAsset; locker: StagingXcmV3MultilocationMultiLocation };
    }
  | { tag: 'SetFeesMode'; value: { jitWithdraw: boolean } }
  | { tag: 'SetTopic'; value: FixedBytes<32> }
  | { tag: 'ClearTopic' }
  | { tag: 'AliasOrigin'; value: StagingXcmV3MultilocationMultiLocation }
  | {
      tag: 'UnpaidExecution';
      value: { weightLimit: XcmV3WeightLimit; checkOrigin?: StagingXcmV3MultilocationMultiLocation | undefined };
    };

export type XcmV3MultiassetMultiAssets = Array<XcmV3MultiassetMultiAsset>;

export type XcmV3MultiassetMultiAsset = { id: XcmV3MultiassetAssetId; fun: XcmV3MultiassetFungibility };

export type XcmV3MultiassetFungibility =
  | { tag: 'Fungible'; value: bigint }
  | { tag: 'NonFungible'; value: XcmV3MultiassetAssetInstance };

export type XcmV3MultiassetAssetInstance =
  | { tag: 'Undefined' }
  | { tag: 'Index'; value: bigint }
  | { tag: 'Array4'; value: FixedBytes<4> }
  | { tag: 'Array8'; value: FixedBytes<8> }
  | { tag: 'Array16'; value: FixedBytes<16> }
  | { tag: 'Array32'; value: FixedBytes<32> };

export type XcmV3Response =
  | { tag: 'Null' }
  | { tag: 'Assets'; value: XcmV3MultiassetMultiAssets }
  | { tag: 'ExecutionResult'; value?: [number, XcmV3TraitsError] | undefined }
  | { tag: 'Version'; value: number }
  | { tag: 'PalletsInfo'; value: Array<XcmV3PalletInfo> }
  | { tag: 'DispatchResult'; value: XcmV3MaybeErrorCode };

export type XcmV3TraitsError =
  | { tag: 'Overflow' }
  | { tag: 'Unimplemented' }
  | { tag: 'UntrustedReserveLocation' }
  | { tag: 'UntrustedTeleportLocation' }
  | { tag: 'LocationFull' }
  | { tag: 'LocationNotInvertible' }
  | { tag: 'BadOrigin' }
  | { tag: 'InvalidLocation' }
  | { tag: 'AssetNotFound' }
  | { tag: 'FailedToTransactAsset' }
  | { tag: 'NotWithdrawable' }
  | { tag: 'LocationCannotHold' }
  | { tag: 'ExceedsMaxMessageSize' }
  | { tag: 'DestinationUnsupported' }
  | { tag: 'Transport' }
  | { tag: 'Unroutable' }
  | { tag: 'UnknownClaim' }
  | { tag: 'FailedToDecode' }
  | { tag: 'MaxWeightInvalid' }
  | { tag: 'NotHoldingFees' }
  | { tag: 'TooExpensive' }
  | { tag: 'Trap'; value: bigint }
  | { tag: 'ExpectationFalse' }
  | { tag: 'PalletNotFound' }
  | { tag: 'NameMismatch' }
  | { tag: 'VersionIncompatible' }
  | { tag: 'HoldingWouldOverflow' }
  | { tag: 'ExportError' }
  | { tag: 'ReanchorFailed' }
  | { tag: 'NoDeal' }
  | { tag: 'FeesNotMet' }
  | { tag: 'LockError' }
  | { tag: 'NoPermission' }
  | { tag: 'Unanchored' }
  | { tag: 'NotDepositable' }
  | { tag: 'UnhandledXcmVersion' }
  | { tag: 'WeightLimitReached'; value: SpWeightsWeightV2Weight }
  | { tag: 'Barrier' }
  | { tag: 'WeightNotComputable' }
  | { tag: 'ExceedsStackLimit' };

export type XcmV3PalletInfo = {
  index: number;
  name: Bytes;
  moduleName: Bytes;
  major: number;
  minor: number;
  patch: number;
};

export type XcmV3MaybeErrorCode =
  | { tag: 'Success' }
  | { tag: 'Error'; value: Bytes }
  | { tag: 'TruncatedError'; value: Bytes };

export type XcmV3QueryResponseInfo = {
  destination: StagingXcmV3MultilocationMultiLocation;
  queryId: bigint;
  maxWeight: SpWeightsWeightV2Weight;
};

export type XcmV3MultiassetMultiAssetFilter =
  | { tag: 'Definite'; value: XcmV3MultiassetMultiAssets }
  | { tag: 'Wild'; value: XcmV3MultiassetWildMultiAsset };

export type XcmV3MultiassetWildMultiAsset =
  | { tag: 'All' }
  | { tag: 'AllOf'; value: { id: XcmV3MultiassetAssetId; fun: XcmV3MultiassetWildFungibility } }
  | { tag: 'AllCounted'; value: number }
  | { tag: 'AllOfCounted'; value: { id: XcmV3MultiassetAssetId; fun: XcmV3MultiassetWildFungibility; count: number } };

export type XcmV3MultiassetWildFungibility = 'Fungible' | 'NonFungible';

export type XcmV3WeightLimit = { tag: 'Unlimited' } | { tag: 'Limited'; value: SpWeightsWeightV2Weight };

export type StagingXcmV4Xcm = Array<StagingXcmV4Instruction>;

export type StagingXcmV4Instruction =
  | { tag: 'WithdrawAsset'; value: StagingXcmV4AssetAssets }
  | { tag: 'ReserveAssetDeposited'; value: StagingXcmV4AssetAssets }
  | { tag: 'ReceiveTeleportedAsset'; value: StagingXcmV4AssetAssets }
  | {
      tag: 'QueryResponse';
      value: {
        queryId: bigint;
        response: StagingXcmV4Response;
        maxWeight: SpWeightsWeightV2Weight;
        querier?: StagingXcmV4Location | undefined;
      };
    }
  | { tag: 'TransferAsset'; value: { assets: StagingXcmV4AssetAssets; beneficiary: StagingXcmV4Location } }
  | {
      tag: 'TransferReserveAsset';
      value: { assets: StagingXcmV4AssetAssets; dest: StagingXcmV4Location; xcm: StagingXcmV4Xcm };
    }
  | {
      tag: 'Transact';
      value: { originKind: XcmV2OriginKind; requireWeightAtMost: SpWeightsWeightV2Weight; call: XcmDoubleEncoded };
    }
  | { tag: 'HrmpNewChannelOpenRequest'; value: { sender: number; maxMessageSize: number; maxCapacity: number } }
  | { tag: 'HrmpChannelAccepted'; value: { recipient: number } }
  | { tag: 'HrmpChannelClosing'; value: { initiator: number; sender: number; recipient: number } }
  | { tag: 'ClearOrigin' }
  | { tag: 'DescendOrigin'; value: StagingXcmV4Junctions }
  | { tag: 'ReportError'; value: StagingXcmV4QueryResponseInfo }
  | { tag: 'DepositAsset'; value: { assets: StagingXcmV4AssetAssetFilter; beneficiary: StagingXcmV4Location } }
  | {
      tag: 'DepositReserveAsset';
      value: { assets: StagingXcmV4AssetAssetFilter; dest: StagingXcmV4Location; xcm: StagingXcmV4Xcm };
    }
  | {
      tag: 'ExchangeAsset';
      value: { give: StagingXcmV4AssetAssetFilter; want: StagingXcmV4AssetAssets; maximal: boolean };
    }
  | {
      tag: 'InitiateReserveWithdraw';
      value: { assets: StagingXcmV4AssetAssetFilter; reserve: StagingXcmV4Location; xcm: StagingXcmV4Xcm };
    }
  | {
      tag: 'InitiateTeleport';
      value: { assets: StagingXcmV4AssetAssetFilter; dest: StagingXcmV4Location; xcm: StagingXcmV4Xcm };
    }
  | {
      tag: 'ReportHolding';
      value: { responseInfo: StagingXcmV4QueryResponseInfo; assets: StagingXcmV4AssetAssetFilter };
    }
  | { tag: 'BuyExecution'; value: { fees: StagingXcmV4Asset; weightLimit: XcmV3WeightLimit } }
  | { tag: 'RefundSurplus' }
  | { tag: 'SetErrorHandler'; value: StagingXcmV4Xcm }
  | { tag: 'SetAppendix'; value: StagingXcmV4Xcm }
  | { tag: 'ClearError' }
  | { tag: 'ClaimAsset'; value: { assets: StagingXcmV4AssetAssets; ticket: StagingXcmV4Location } }
  | { tag: 'Trap'; value: bigint }
  | { tag: 'SubscribeVersion'; value: { queryId: bigint; maxResponseWeight: SpWeightsWeightV2Weight } }
  | { tag: 'UnsubscribeVersion' }
  | { tag: 'BurnAsset'; value: StagingXcmV4AssetAssets }
  | { tag: 'ExpectAsset'; value: StagingXcmV4AssetAssets }
  | { tag: 'ExpectOrigin'; value?: StagingXcmV4Location | undefined }
  | { tag: 'ExpectError'; value?: [number, XcmV3TraitsError] | undefined }
  | { tag: 'ExpectTransactStatus'; value: XcmV3MaybeErrorCode }
  | { tag: 'QueryPallet'; value: { moduleName: Bytes; responseInfo: StagingXcmV4QueryResponseInfo } }
  | {
      tag: 'ExpectPallet';
      value: { index: number; name: Bytes; moduleName: Bytes; crateMajor: number; minCrateMinor: number };
    }
  | { tag: 'ReportTransactStatus'; value: StagingXcmV4QueryResponseInfo }
  | { tag: 'ClearTransactStatus' }
  | { tag: 'UniversalOrigin'; value: StagingXcmV4Junction }
  | {
      tag: 'ExportMessage';
      value: { network: StagingXcmV4JunctionNetworkId; destination: StagingXcmV4Junctions; xcm: StagingXcmV4Xcm };
    }
  | { tag: 'LockAsset'; value: { asset: StagingXcmV4Asset; unlocker: StagingXcmV4Location } }
  | { tag: 'UnlockAsset'; value: { asset: StagingXcmV4Asset; target: StagingXcmV4Location } }
  | { tag: 'NoteUnlockable'; value: { asset: StagingXcmV4Asset; owner: StagingXcmV4Location } }
  | { tag: 'RequestUnlock'; value: { asset: StagingXcmV4Asset; locker: StagingXcmV4Location } }
  | { tag: 'SetFeesMode'; value: { jitWithdraw: boolean } }
  | { tag: 'SetTopic'; value: FixedBytes<32> }
  | { tag: 'ClearTopic' }
  | { tag: 'AliasOrigin'; value: StagingXcmV4Location }
  | {
      tag: 'UnpaidExecution';
      value: { weightLimit: XcmV3WeightLimit; checkOrigin?: StagingXcmV4Location | undefined };
    };

export type StagingXcmV4AssetAssets = Array<StagingXcmV4Asset>;

export type StagingXcmV4Asset = { id: StagingXcmV4AssetAssetId; fun: StagingXcmV4AssetFungibility };

export type StagingXcmV4AssetFungibility =
  | { tag: 'Fungible'; value: bigint }
  | { tag: 'NonFungible'; value: StagingXcmV4AssetAssetInstance };

export type StagingXcmV4AssetAssetInstance =
  | { tag: 'Undefined' }
  | { tag: 'Index'; value: bigint }
  | { tag: 'Array4'; value: FixedBytes<4> }
  | { tag: 'Array8'; value: FixedBytes<8> }
  | { tag: 'Array16'; value: FixedBytes<16> }
  | { tag: 'Array32'; value: FixedBytes<32> };

export type StagingXcmV4Response =
  | { tag: 'Null' }
  | { tag: 'Assets'; value: StagingXcmV4AssetAssets }
  | { tag: 'ExecutionResult'; value?: [number, XcmV3TraitsError] | undefined }
  | { tag: 'Version'; value: number }
  | { tag: 'PalletsInfo'; value: Array<StagingXcmV4PalletInfo> }
  | { tag: 'DispatchResult'; value: XcmV3MaybeErrorCode };

export type StagingXcmV4PalletInfo = {
  index: number;
  name: Bytes;
  moduleName: Bytes;
  major: number;
  minor: number;
  patch: number;
};

export type StagingXcmV4QueryResponseInfo = {
  destination: StagingXcmV4Location;
  queryId: bigint;
  maxWeight: SpWeightsWeightV2Weight;
};

export type StagingXcmV4AssetAssetFilter =
  | { tag: 'Definite'; value: StagingXcmV4AssetAssets }
  | { tag: 'Wild'; value: StagingXcmV4AssetWildAsset };

export type StagingXcmV4AssetWildAsset =
  | { tag: 'All' }
  | { tag: 'AllOf'; value: { id: StagingXcmV4AssetAssetId; fun: StagingXcmV4AssetWildFungibility } }
  | { tag: 'AllCounted'; value: number }
  | {
      tag: 'AllOfCounted';
      value: { id: StagingXcmV4AssetAssetId; fun: StagingXcmV4AssetWildFungibility; count: number };
    };

export type StagingXcmV4AssetWildFungibility = 'Fungible' | 'NonFungible';

export type XcmVersionedAssets =
  | { tag: 'V2'; value: XcmV2MultiassetMultiAssets }
  | { tag: 'V3'; value: XcmV3MultiassetMultiAssets }
  | { tag: 'V4'; value: StagingXcmV4AssetAssets };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletBeefyCall =
  /**
   * See [`Pallet::report_equivocation`].
   **/
  | {
      name: 'ReportEquivocation';
      params: { equivocationProof: SpConsensusBeefyEquivocationProof; keyOwnerProof: SpSessionMembershipProof };
    }
  /**
   * See [`Pallet::report_equivocation_unsigned`].
   **/
  | {
      name: 'ReportEquivocationUnsigned';
      params: { equivocationProof: SpConsensusBeefyEquivocationProof; keyOwnerProof: SpSessionMembershipProof };
    }
  /**
   * See [`Pallet::set_new_genesis`].
   **/
  | { name: 'SetNewGenesis'; params: { delayInBlocks: number } };

export type PalletBeefyCallLike =
  /**
   * See [`Pallet::report_equivocation`].
   **/
  | {
      name: 'ReportEquivocation';
      params: { equivocationProof: SpConsensusBeefyEquivocationProof; keyOwnerProof: SpSessionMembershipProof };
    }
  /**
   * See [`Pallet::report_equivocation_unsigned`].
   **/
  | {
      name: 'ReportEquivocationUnsigned';
      params: { equivocationProof: SpConsensusBeefyEquivocationProof; keyOwnerProof: SpSessionMembershipProof };
    }
  /**
   * See [`Pallet::set_new_genesis`].
   **/
  | { name: 'SetNewGenesis'; params: { delayInBlocks: number } };

export type SpConsensusBeefyEquivocationProof = {
  first: SpConsensusBeefyVoteMessage;
  second: SpConsensusBeefyVoteMessage;
};

export type SpConsensusBeefyEcdsaCryptoSignature = SpCoreEcdsaSignature;

export type SpConsensusBeefyVoteMessage = {
  commitment: SpConsensusBeefyCommitment;
  id: SpConsensusBeefyEcdsaCryptoPublic;
  signature: SpConsensusBeefyEcdsaCryptoSignature;
};

export type SpConsensusBeefyCommitment = {
  payload: SpConsensusBeefyPayload;
  blockNumber: number;
  validatorSetId: bigint;
};

export type SpConsensusBeefyPayload = Array<[FixedBytes<2>, Bytes]>;

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PolkadotRuntimeCommonIdentityMigratorPalletCall =
  /**
   * See [`Pallet::reap_identity`].
   **/
  | { name: 'ReapIdentity'; params: { who: AccountId32 } }
  /**
   * See [`Pallet::poke_deposit`].
   **/
  | { name: 'PokeDeposit'; params: { who: AccountId32 } };

export type PolkadotRuntimeCommonIdentityMigratorPalletCallLike =
  /**
   * See [`Pallet::reap_identity`].
   **/
  | { name: 'ReapIdentity'; params: { who: AccountId32Like } }
  /**
   * See [`Pallet::poke_deposit`].
   **/
  | { name: 'PokeDeposit'; params: { who: AccountId32Like } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PolkadotRuntimeCommonParasSudoWrapperPalletCall =
  /**
   * See [`Pallet::sudo_schedule_para_initialize`].
   **/
  | {
      name: 'SudoScheduleParaInitialize';
      params: { id: PolkadotParachainPrimitivesPrimitivesId; genesis: PolkadotRuntimeParachainsParasParaGenesisArgs };
    }
  /**
   * See [`Pallet::sudo_schedule_para_cleanup`].
   **/
  | { name: 'SudoScheduleParaCleanup'; params: { id: PolkadotParachainPrimitivesPrimitivesId } }
  /**
   * See [`Pallet::sudo_schedule_parathread_upgrade`].
   **/
  | { name: 'SudoScheduleParathreadUpgrade'; params: { id: PolkadotParachainPrimitivesPrimitivesId } }
  /**
   * See [`Pallet::sudo_schedule_parachain_downgrade`].
   **/
  | { name: 'SudoScheduleParachainDowngrade'; params: { id: PolkadotParachainPrimitivesPrimitivesId } }
  /**
   * See [`Pallet::sudo_queue_downward_xcm`].
   **/
  | { name: 'SudoQueueDownwardXcm'; params: { id: PolkadotParachainPrimitivesPrimitivesId; xcm: XcmVersionedXcm } }
  /**
   * See [`Pallet::sudo_establish_hrmp_channel`].
   **/
  | {
      name: 'SudoEstablishHrmpChannel';
      params: {
        sender: PolkadotParachainPrimitivesPrimitivesId;
        recipient: PolkadotParachainPrimitivesPrimitivesId;
        maxCapacity: number;
        maxMessageSize: number;
      };
    };

export type PolkadotRuntimeCommonParasSudoWrapperPalletCallLike =
  /**
   * See [`Pallet::sudo_schedule_para_initialize`].
   **/
  | {
      name: 'SudoScheduleParaInitialize';
      params: { id: PolkadotParachainPrimitivesPrimitivesId; genesis: PolkadotRuntimeParachainsParasParaGenesisArgs };
    }
  /**
   * See [`Pallet::sudo_schedule_para_cleanup`].
   **/
  | { name: 'SudoScheduleParaCleanup'; params: { id: PolkadotParachainPrimitivesPrimitivesId } }
  /**
   * See [`Pallet::sudo_schedule_parathread_upgrade`].
   **/
  | { name: 'SudoScheduleParathreadUpgrade'; params: { id: PolkadotParachainPrimitivesPrimitivesId } }
  /**
   * See [`Pallet::sudo_schedule_parachain_downgrade`].
   **/
  | { name: 'SudoScheduleParachainDowngrade'; params: { id: PolkadotParachainPrimitivesPrimitivesId } }
  /**
   * See [`Pallet::sudo_queue_downward_xcm`].
   **/
  | { name: 'SudoQueueDownwardXcm'; params: { id: PolkadotParachainPrimitivesPrimitivesId; xcm: XcmVersionedXcm } }
  /**
   * See [`Pallet::sudo_establish_hrmp_channel`].
   **/
  | {
      name: 'SudoEstablishHrmpChannel';
      params: {
        sender: PolkadotParachainPrimitivesPrimitivesId;
        recipient: PolkadotParachainPrimitivesPrimitivesId;
        maxCapacity: number;
        maxMessageSize: number;
      };
    };

export type PolkadotRuntimeParachainsParasParaGenesisArgs = {
  genesisHead: PolkadotParachainPrimitivesPrimitivesHeadData;
  validationCode: PolkadotParachainPrimitivesPrimitivesValidationCode;
  paraKind: boolean;
};

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PolkadotRuntimeCommonAssignedSlotsPalletCall =
  /**
   * See [`Pallet::assign_perm_parachain_slot`].
   **/
  | { name: 'AssignPermParachainSlot'; params: { id: PolkadotParachainPrimitivesPrimitivesId } }
  /**
   * See [`Pallet::assign_temp_parachain_slot`].
   **/
  | {
      name: 'AssignTempParachainSlot';
      params: {
        id: PolkadotParachainPrimitivesPrimitivesId;
        leasePeriodStart: PolkadotRuntimeCommonAssignedSlotsSlotLeasePeriodStart;
      };
    }
  /**
   * See [`Pallet::unassign_parachain_slot`].
   **/
  | { name: 'UnassignParachainSlot'; params: { id: PolkadotParachainPrimitivesPrimitivesId } }
  /**
   * See [`Pallet::set_max_permanent_slots`].
   **/
  | { name: 'SetMaxPermanentSlots'; params: { slots: number } }
  /**
   * See [`Pallet::set_max_temporary_slots`].
   **/
  | { name: 'SetMaxTemporarySlots'; params: { slots: number } };

export type PolkadotRuntimeCommonAssignedSlotsPalletCallLike =
  /**
   * See [`Pallet::assign_perm_parachain_slot`].
   **/
  | { name: 'AssignPermParachainSlot'; params: { id: PolkadotParachainPrimitivesPrimitivesId } }
  /**
   * See [`Pallet::assign_temp_parachain_slot`].
   **/
  | {
      name: 'AssignTempParachainSlot';
      params: {
        id: PolkadotParachainPrimitivesPrimitivesId;
        leasePeriodStart: PolkadotRuntimeCommonAssignedSlotsSlotLeasePeriodStart;
      };
    }
  /**
   * See [`Pallet::unassign_parachain_slot`].
   **/
  | { name: 'UnassignParachainSlot'; params: { id: PolkadotParachainPrimitivesPrimitivesId } }
  /**
   * See [`Pallet::set_max_permanent_slots`].
   **/
  | { name: 'SetMaxPermanentSlots'; params: { slots: number } }
  /**
   * See [`Pallet::set_max_temporary_slots`].
   **/
  | { name: 'SetMaxTemporarySlots'; params: { slots: number } };

export type PolkadotRuntimeCommonAssignedSlotsSlotLeasePeriodStart = 'Current' | 'Next';

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type RococoRuntimeValidatorManagerPalletCall =
  /**
   * See [`Pallet::register_validators`].
   **/
  | { name: 'RegisterValidators'; params: { validators: Array<AccountId32> } }
  /**
   * See [`Pallet::deregister_validators`].
   **/
  | { name: 'DeregisterValidators'; params: { validators: Array<AccountId32> } };

export type RococoRuntimeValidatorManagerPalletCallLike =
  /**
   * See [`Pallet::register_validators`].
   **/
  | { name: 'RegisterValidators'; params: { validators: Array<AccountId32Like> } }
  /**
   * See [`Pallet::deregister_validators`].
   **/
  | { name: 'DeregisterValidators'; params: { validators: Array<AccountId32Like> } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletStateTrieMigrationCall =
  /**
   * See [`Pallet::control_auto_migration`].
   **/
  | { name: 'ControlAutoMigration'; params: { maybeConfig?: PalletStateTrieMigrationMigrationLimits | undefined } }
  /**
   * See [`Pallet::continue_migrate`].
   **/
  | {
      name: 'ContinueMigrate';
      params: {
        limits: PalletStateTrieMigrationMigrationLimits;
        realSizeUpper: number;
        witnessTask: PalletStateTrieMigrationMigrationTask;
      };
    }
  /**
   * See [`Pallet::migrate_custom_top`].
   **/
  | { name: 'MigrateCustomTop'; params: { keys: Array<Bytes>; witnessSize: number } }
  /**
   * See [`Pallet::migrate_custom_child`].
   **/
  | { name: 'MigrateCustomChild'; params: { root: Bytes; childKeys: Array<Bytes>; totalSize: number } }
  /**
   * See [`Pallet::set_signed_max_limits`].
   **/
  | { name: 'SetSignedMaxLimits'; params: { limits: PalletStateTrieMigrationMigrationLimits } }
  /**
   * See [`Pallet::force_set_progress`].
   **/
  | {
      name: 'ForceSetProgress';
      params: { progressTop: PalletStateTrieMigrationProgress; progressChild: PalletStateTrieMigrationProgress };
    };

export type PalletStateTrieMigrationCallLike =
  /**
   * See [`Pallet::control_auto_migration`].
   **/
  | { name: 'ControlAutoMigration'; params: { maybeConfig?: PalletStateTrieMigrationMigrationLimits | undefined } }
  /**
   * See [`Pallet::continue_migrate`].
   **/
  | {
      name: 'ContinueMigrate';
      params: {
        limits: PalletStateTrieMigrationMigrationLimits;
        realSizeUpper: number;
        witnessTask: PalletStateTrieMigrationMigrationTask;
      };
    }
  /**
   * See [`Pallet::migrate_custom_top`].
   **/
  | { name: 'MigrateCustomTop'; params: { keys: Array<BytesLike>; witnessSize: number } }
  /**
   * See [`Pallet::migrate_custom_child`].
   **/
  | { name: 'MigrateCustomChild'; params: { root: BytesLike; childKeys: Array<BytesLike>; totalSize: number } }
  /**
   * See [`Pallet::set_signed_max_limits`].
   **/
  | { name: 'SetSignedMaxLimits'; params: { limits: PalletStateTrieMigrationMigrationLimits } }
  /**
   * See [`Pallet::force_set_progress`].
   **/
  | {
      name: 'ForceSetProgress';
      params: { progressTop: PalletStateTrieMigrationProgress; progressChild: PalletStateTrieMigrationProgress };
    };

export type PalletStateTrieMigrationMigrationLimits = { size: number; item: number };

export type PalletStateTrieMigrationMigrationTask = {
  progressTop: PalletStateTrieMigrationProgress;
  progressChild: PalletStateTrieMigrationProgress;
  size: number;
  topItems: number;
  childItems: number;
};

export type PalletStateTrieMigrationProgress =
  | { tag: 'ToStart' }
  | { tag: 'LastKey'; value: Bytes }
  | { tag: 'Complete' };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletRootTestingCall =
  /**
   * See `Pallet::fill_block`.
   **/
  | { name: 'FillBlock'; params: { ratio: Perbill } }
  /**
   * See `Pallet::trigger_defensive`.
   **/
  | { name: 'TriggerDefensive' };

export type PalletRootTestingCallLike =
  /**
   * See `Pallet::fill_block`.
   **/
  | { name: 'FillBlock'; params: { ratio: Perbill } }
  /**
   * See `Pallet::trigger_defensive`.
   **/
  | { name: 'TriggerDefensive' };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletSudoCall =
  /**
   * See [`Pallet::sudo`].
   **/
  | { name: 'Sudo'; params: { call: RococoRuntimeRuntimeCall } }
  /**
   * See [`Pallet::sudo_unchecked_weight`].
   **/
  | { name: 'SudoUncheckedWeight'; params: { call: RococoRuntimeRuntimeCall; weight: SpWeightsWeightV2Weight } }
  /**
   * See [`Pallet::set_key`].
   **/
  | { name: 'SetKey'; params: { new: MultiAddress } }
  /**
   * See [`Pallet::sudo_as`].
   **/
  | { name: 'SudoAs'; params: { who: MultiAddress; call: RococoRuntimeRuntimeCall } }
  /**
   * See [`Pallet::remove_key`].
   **/
  | { name: 'RemoveKey' };

export type PalletSudoCallLike =
  /**
   * See [`Pallet::sudo`].
   **/
  | { name: 'Sudo'; params: { call: RococoRuntimeRuntimeCallLike } }
  /**
   * See [`Pallet::sudo_unchecked_weight`].
   **/
  | { name: 'SudoUncheckedWeight'; params: { call: RococoRuntimeRuntimeCallLike; weight: SpWeightsWeightV2Weight } }
  /**
   * See [`Pallet::set_key`].
   **/
  | { name: 'SetKey'; params: { new: MultiAddressLike } }
  /**
   * See [`Pallet::sudo_as`].
   **/
  | { name: 'SudoAs'; params: { who: MultiAddressLike; call: RococoRuntimeRuntimeCallLike } }
  /**
   * See [`Pallet::remove_key`].
   **/
  | { name: 'RemoveKey' };

export type SpRuntimeBlakeTwo256 = {};

export type PalletConvictionVotingTally = { ayes: bigint; nays: bigint; support: bigint };

/**
 * The `Event` enum of this pallet
 **/
export type PalletRankedCollectiveEvent =
  /**
   * A member `who` has been added.
   **/
  | { name: 'MemberAdded'; data: { who: AccountId32 } }
  /**
   * The member `who`se rank has been changed to the given `rank`.
   **/
  | { name: 'RankChanged'; data: { who: AccountId32; rank: number } }
  /**
   * The member `who` of given `rank` has been removed from the collective.
   **/
  | { name: 'MemberRemoved'; data: { who: AccountId32; rank: number } }
  /**
   * The member `who` has voted for the `poll` with the given `vote` leading to an updated
   * `tally`.
   **/
  | {
      name: 'Voted';
      data: {
        who: AccountId32;
        poll: number;
        vote: PalletRankedCollectiveVoteRecord;
        tally: PalletRankedCollectiveTally;
      };
    }
  /**
   * The member `who` had their `AccountId` changed to `new_who`.
   **/
  | { name: 'MemberExchanged'; data: { who: AccountId32; newWho: AccountId32 } };

export type PalletRankedCollectiveVoteRecord = { tag: 'Aye'; value: number } | { tag: 'Nay'; value: number };

export type PalletRankedCollectiveTally = { bareAyes: number; ayes: number; nays: number };

/**
 * The `Event` enum of this pallet
 **/
export type PalletReferendaEvent002 =
  /**
   * A referendum has been submitted.
   **/
  | {
      name: 'Submitted';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The track (and by extension proposal dispatch origin) of this referendum.
         **/
        track: number;

        /**
         * The proposal for the referendum.
         **/
        proposal: FrameSupportPreimagesBounded;
      };
    }
  /**
   * The decision deposit has been placed.
   **/
  | {
      name: 'DecisionDepositPlaced';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The account who placed the deposit.
         **/
        who: AccountId32;

        /**
         * The amount placed by the account.
         **/
        amount: bigint;
      };
    }
  /**
   * The decision deposit has been refunded.
   **/
  | {
      name: 'DecisionDepositRefunded';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The account who placed the deposit.
         **/
        who: AccountId32;

        /**
         * The amount placed by the account.
         **/
        amount: bigint;
      };
    }
  /**
   * A deposit has been slashed.
   **/
  | {
      name: 'DepositSlashed';
      data: {
        /**
         * The account who placed the deposit.
         **/
        who: AccountId32;

        /**
         * The amount placed by the account.
         **/
        amount: bigint;
      };
    }
  /**
   * A referendum has moved into the deciding phase.
   **/
  | {
      name: 'DecisionStarted';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The track (and by extension proposal dispatch origin) of this referendum.
         **/
        track: number;

        /**
         * The proposal for the referendum.
         **/
        proposal: FrameSupportPreimagesBounded;

        /**
         * The current tally of votes in this referendum.
         **/
        tally: PalletRankedCollectiveTally;
      };
    }
  | {
      name: 'ConfirmStarted';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;
      };
    }
  | {
      name: 'ConfirmAborted';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;
      };
    }
  /**
   * A referendum has ended its confirmation phase and is ready for approval.
   **/
  | {
      name: 'Confirmed';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The final tally of votes in this referendum.
         **/
        tally: PalletRankedCollectiveTally;
      };
    }
  /**
   * A referendum has been approved and its proposal has been scheduled.
   **/
  | {
      name: 'Approved';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;
      };
    }
  /**
   * A proposal has been rejected by referendum.
   **/
  | {
      name: 'Rejected';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The final tally of votes in this referendum.
         **/
        tally: PalletRankedCollectiveTally;
      };
    }
  /**
   * A referendum has been timed out without being decided.
   **/
  | {
      name: 'TimedOut';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The final tally of votes in this referendum.
         **/
        tally: PalletRankedCollectiveTally;
      };
    }
  /**
   * A referendum has been cancelled.
   **/
  | {
      name: 'Cancelled';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The final tally of votes in this referendum.
         **/
        tally: PalletRankedCollectiveTally;
      };
    }
  /**
   * A referendum has been killed.
   **/
  | {
      name: 'Killed';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The final tally of votes in this referendum.
         **/
        tally: PalletRankedCollectiveTally;
      };
    }
  /**
   * The submission deposit has been refunded.
   **/
  | {
      name: 'SubmissionDepositRefunded';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The account who placed the deposit.
         **/
        who: AccountId32;

        /**
         * The amount placed by the account.
         **/
        amount: bigint;
      };
    }
  /**
   * Metadata for a referendum has been set.
   **/
  | {
      name: 'MetadataSet';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * Preimage hash.
         **/
        hash: H256;
      };
    }
  /**
   * Metadata for a referendum has been cleared.
   **/
  | {
      name: 'MetadataCleared';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * Preimage hash.
         **/
        hash: H256;
      };
    };

/**
 * The `Event` enum of this pallet
 **/
export type PalletWhitelistEvent =
  | { name: 'CallWhitelisted'; data: { callHash: H256 } }
  | { name: 'WhitelistedCallRemoved'; data: { callHash: H256 } }
  | {
      name: 'WhitelistedCallDispatched';
      data: {
        callHash: H256;
        result: Result<FrameSupportDispatchPostDispatchInfo, SpRuntimeDispatchErrorWithPostInfo>;
      };
    };

export type FrameSupportDispatchPostDispatchInfo = {
  actualWeight?: SpWeightsWeightV2Weight | undefined;
  paysFee: FrameSupportDispatchPays;
};

export type SpRuntimeDispatchErrorWithPostInfo = {
  postInfo: FrameSupportDispatchPostDispatchInfo;
  error: DispatchError;
};

/**
 * The `Event` enum of this pallet
 **/
export type PolkadotRuntimeCommonClaimsPalletEvent =
  /**
   * Someone claimed some DOTs.
   **/
  { name: 'Claimed'; data: { who: AccountId32; ethereumAddress: EthereumAddress; amount: bigint } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletUtilityEvent =
  /**
   * Batch of dispatches did not complete fully. Index of first failing dispatch given, as
   * well as the error.
   **/
  | { name: 'BatchInterrupted'; data: { index: number; error: DispatchError } }
  /**
   * Batch of dispatches completed fully with no error.
   **/
  | { name: 'BatchCompleted' }
  /**
   * Batch of dispatches completed but has errors.
   **/
  | { name: 'BatchCompletedWithErrors' }
  /**
   * A single item within a Batch of dispatches has completed with no error.
   **/
  | { name: 'ItemCompleted' }
  /**
   * A single item within a Batch of dispatches has completed with error.
   **/
  | { name: 'ItemFailed'; data: { error: DispatchError } }
  /**
   * A call was dispatched.
   **/
  | { name: 'DispatchedAs'; data: { result: Result<[], DispatchError> } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletIdentityEvent =
  /**
   * A name was set or reset (which will remove all judgements).
   **/
  | { name: 'IdentitySet'; data: { who: AccountId32 } }
  /**
   * A name was cleared, and the given balance returned.
   **/
  | { name: 'IdentityCleared'; data: { who: AccountId32; deposit: bigint } }
  /**
   * A name was removed and the given balance slashed.
   **/
  | { name: 'IdentityKilled'; data: { who: AccountId32; deposit: bigint } }
  /**
   * A judgement was asked from a registrar.
   **/
  | { name: 'JudgementRequested'; data: { who: AccountId32; registrarIndex: number } }
  /**
   * A judgement request was retracted.
   **/
  | { name: 'JudgementUnrequested'; data: { who: AccountId32; registrarIndex: number } }
  /**
   * A judgement was given by a registrar.
   **/
  | { name: 'JudgementGiven'; data: { target: AccountId32; registrarIndex: number } }
  /**
   * A registrar was added.
   **/
  | { name: 'RegistrarAdded'; data: { registrarIndex: number } }
  /**
   * A sub-identity was added to an identity and the deposit paid.
   **/
  | { name: 'SubIdentityAdded'; data: { sub: AccountId32; main: AccountId32; deposit: bigint } }
  /**
   * A sub-identity was removed from an identity and the deposit freed.
   **/
  | { name: 'SubIdentityRemoved'; data: { sub: AccountId32; main: AccountId32; deposit: bigint } }
  /**
   * A sub-identity was cleared, and the given deposit repatriated from the
   * main identity account to the sub-identity account.
   **/
  | { name: 'SubIdentityRevoked'; data: { sub: AccountId32; main: AccountId32; deposit: bigint } }
  /**
   * A username authority was added.
   **/
  | { name: 'AuthorityAdded'; data: { authority: AccountId32 } }
  /**
   * A username authority was removed.
   **/
  | { name: 'AuthorityRemoved'; data: { authority: AccountId32 } }
  /**
   * A username was set for `who`.
   **/
  | { name: 'UsernameSet'; data: { who: AccountId32; username: Bytes } }
  /**
   * A username was queued, but `who` must accept it prior to `expiration`.
   **/
  | { name: 'UsernameQueued'; data: { who: AccountId32; username: Bytes; expiration: number } }
  /**
   * A queued username passed its expiration without being claimed and was removed.
   **/
  | { name: 'PreapprovalExpired'; data: { whose: AccountId32 } }
  /**
   * A username was set as a primary and can be looked up from `who`.
   **/
  | { name: 'PrimaryUsernameSet'; data: { who: AccountId32; username: Bytes } }
  /**
   * A dangling username (as in, a username corresponding to an account that has removed its
   * identity) has been removed.
   **/
  | { name: 'DanglingUsernameRemoved'; data: { who: AccountId32; username: Bytes } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletSocietyEvent =
  /**
   * The society is founded by the given identity.
   **/
  | { name: 'Founded'; data: { founder: AccountId32 } }
  /**
   * A membership bid just happened. The given account is the candidate's ID and their offer
   * is the second.
   **/
  | { name: 'Bid'; data: { candidateId: AccountId32; offer: bigint } }
  /**
   * A membership bid just happened by vouching. The given account is the candidate's ID and
   * their offer is the second. The vouching party is the third.
   **/
  | { name: 'Vouch'; data: { candidateId: AccountId32; offer: bigint; vouching: AccountId32 } }
  /**
   * A candidate was dropped (due to an excess of bids in the system).
   **/
  | { name: 'AutoUnbid'; data: { candidate: AccountId32 } }
  /**
   * A candidate was dropped (by their request).
   **/
  | { name: 'Unbid'; data: { candidate: AccountId32 } }
  /**
   * A candidate was dropped (by request of who vouched for them).
   **/
  | { name: 'Unvouch'; data: { candidate: AccountId32 } }
  /**
   * A group of candidates have been inducted. The batch's primary is the first value, the
   * batch in full is the second.
   **/
  | { name: 'Inducted'; data: { primary: AccountId32; candidates: Array<AccountId32> } }
  /**
   * A suspended member has been judged.
   **/
  | { name: 'SuspendedMemberJudgement'; data: { who: AccountId32; judged: boolean } }
  /**
   * A candidate has been suspended
   **/
  | { name: 'CandidateSuspended'; data: { candidate: AccountId32 } }
  /**
   * A member has been suspended
   **/
  | { name: 'MemberSuspended'; data: { member: AccountId32 } }
  /**
   * A member has been challenged
   **/
  | { name: 'Challenged'; data: { member: AccountId32 } }
  /**
   * A vote has been placed
   **/
  | { name: 'Vote'; data: { candidate: AccountId32; voter: AccountId32; vote: boolean } }
  /**
   * A vote has been placed for a defending member
   **/
  | { name: 'DefenderVote'; data: { voter: AccountId32; vote: boolean } }
  /**
   * A new set of \[params\] has been set for the group.
   **/
  | { name: 'NewParams'; data: { params: PalletSocietyGroupParams } }
  /**
   * Society is unfounded.
   **/
  | { name: 'Unfounded'; data: { founder: AccountId32 } }
  /**
   * Some funds were deposited into the society account.
   **/
  | { name: 'Deposit'; data: { value: bigint } }
  /**
   * A \[member\] got elevated to \[rank\].
   **/
  | { name: 'Elevated'; data: { member: AccountId32; rank: number } };

export type PalletSocietyGroupParams = {
  maxMembers: number;
  maxIntake: number;
  maxStrikes: number;
  candidateDeposit: bigint;
};

/**
 * Events type.
 **/
export type PalletRecoveryEvent =
  /**
   * A recovery process has been set up for an account.
   **/
  | { name: 'RecoveryCreated'; data: { account: AccountId32 } }
  /**
   * A recovery process has been initiated for lost account by rescuer account.
   **/
  | { name: 'RecoveryInitiated'; data: { lostAccount: AccountId32; rescuerAccount: AccountId32 } }
  /**
   * A recovery process for lost account by rescuer account has been vouched for by sender.
   **/
  | { name: 'RecoveryVouched'; data: { lostAccount: AccountId32; rescuerAccount: AccountId32; sender: AccountId32 } }
  /**
   * A recovery process for lost account by rescuer account has been closed.
   **/
  | { name: 'RecoveryClosed'; data: { lostAccount: AccountId32; rescuerAccount: AccountId32 } }
  /**
   * Lost account has been successfully recovered by rescuer account.
   **/
  | { name: 'AccountRecovered'; data: { lostAccount: AccountId32; rescuerAccount: AccountId32 } }
  /**
   * A recovery process has been removed for an account.
   **/
  | { name: 'RecoveryRemoved'; data: { lostAccount: AccountId32 } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletVestingEvent =
  /**
   * The amount vested has been updated. This could indicate a change in funds available.
   * The balance given is the amount which is left unvested (and thus locked).
   **/
  | { name: 'VestingUpdated'; data: { account: AccountId32; unvested: bigint } }
  /**
   * An \[account\] has become fully vested.
   **/
  | { name: 'VestingCompleted'; data: { account: AccountId32 } };

/**
 * Events type.
 **/
export type PalletSchedulerEvent =
  /**
   * Scheduled some task.
   **/
  | { name: 'Scheduled'; data: { when: number; index: number } }
  /**
   * Canceled some task.
   **/
  | { name: 'Canceled'; data: { when: number; index: number } }
  /**
   * Dispatched some task.
   **/
  | {
      name: 'Dispatched';
      data: { task: [number, number]; id?: FixedBytes<32> | undefined; result: Result<[], DispatchError> };
    }
  /**
   * Set a retry configuration for some task.
   **/
  | {
      name: 'RetrySet';
      data: { task: [number, number]; id?: FixedBytes<32> | undefined; period: number; retries: number };
    }
  /**
   * Cancel a retry configuration for some task.
   **/
  | { name: 'RetryCancelled'; data: { task: [number, number]; id?: FixedBytes<32> | undefined } }
  /**
   * The call for the provided hash was not found so the task has been aborted.
   **/
  | { name: 'CallUnavailable'; data: { task: [number, number]; id?: FixedBytes<32> | undefined } }
  /**
   * The given task was unable to be renewed since the agenda is full at that block.
   **/
  | { name: 'PeriodicFailed'; data: { task: [number, number]; id?: FixedBytes<32> | undefined } }
  /**
   * The given task was unable to be retried since the agenda is full at that block or there
   * was not enough weight to reschedule it.
   **/
  | { name: 'RetryFailed'; data: { task: [number, number]; id?: FixedBytes<32> | undefined } }
  /**
   * The given task can never be executed since it is overweight.
   **/
  | { name: 'PermanentlyOverweight'; data: { task: [number, number]; id?: FixedBytes<32> | undefined } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletProxyEvent =
  /**
   * A proxy was executed correctly, with the given.
   **/
  | { name: 'ProxyExecuted'; data: { result: Result<[], DispatchError> } }
  /**
   * A pure account has been created by new proxy with given
   * disambiguation index and proxy type.
   **/
  | {
      name: 'PureCreated';
      data: { pure: AccountId32; who: AccountId32; proxyType: RococoRuntimeProxyType; disambiguationIndex: number };
    }
  /**
   * An announcement was placed to make a call in the future.
   **/
  | { name: 'Announced'; data: { real: AccountId32; proxy: AccountId32; callHash: H256 } }
  /**
   * A proxy was added.
   **/
  | {
      name: 'ProxyAdded';
      data: { delegator: AccountId32; delegatee: AccountId32; proxyType: RococoRuntimeProxyType; delay: number };
    }
  /**
   * A proxy was removed.
   **/
  | {
      name: 'ProxyRemoved';
      data: { delegator: AccountId32; delegatee: AccountId32; proxyType: RococoRuntimeProxyType; delay: number };
    };

/**
 * The `Event` enum of this pallet
 **/
export type PalletMultisigEvent =
  /**
   * A new multisig operation has begun.
   **/
  | { name: 'NewMultisig'; data: { approving: AccountId32; multisig: AccountId32; callHash: FixedBytes<32> } }
  /**
   * A multisig operation has been approved by someone.
   **/
  | {
      name: 'MultisigApproval';
      data: {
        approving: AccountId32;
        timepoint: PalletMultisigTimepoint;
        multisig: AccountId32;
        callHash: FixedBytes<32>;
      };
    }
  /**
   * A multisig operation has been executed.
   **/
  | {
      name: 'MultisigExecuted';
      data: {
        approving: AccountId32;
        timepoint: PalletMultisigTimepoint;
        multisig: AccountId32;
        callHash: FixedBytes<32>;
        result: Result<[], DispatchError>;
      };
    }
  /**
   * A multisig operation has been cancelled.
   **/
  | {
      name: 'MultisigCancelled';
      data: {
        cancelling: AccountId32;
        timepoint: PalletMultisigTimepoint;
        multisig: AccountId32;
        callHash: FixedBytes<32>;
      };
    };

/**
 * The `Event` enum of this pallet
 **/
export type PalletPreimageEvent =
  /**
   * A preimage has been noted.
   **/
  | { name: 'Noted'; data: { hash: H256 } }
  /**
   * A preimage has been requested.
   **/
  | { name: 'Requested'; data: { hash: H256 } }
  /**
   * A preimage has ben cleared.
   **/
  | { name: 'Cleared'; data: { hash: H256 } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletAssetRateEvent =
  | {
      name: 'AssetRateCreated';
      data: { assetKind: PolkadotRuntimeCommonImplsVersionedLocatableAsset; rate: FixedU128 };
    }
  | { name: 'AssetRateRemoved'; data: { assetKind: PolkadotRuntimeCommonImplsVersionedLocatableAsset } }
  | {
      name: 'AssetRateUpdated';
      data: { assetKind: PolkadotRuntimeCommonImplsVersionedLocatableAsset; old: FixedU128; new: FixedU128 };
    };

/**
 * The `Event` enum of this pallet
 **/
export type PalletBountiesEvent =
  /**
   * New bounty proposal.
   **/
  | { name: 'BountyProposed'; data: { index: number } }
  /**
   * A bounty proposal was rejected; funds were slashed.
   **/
  | { name: 'BountyRejected'; data: { index: number; bond: bigint } }
  /**
   * A bounty proposal is funded and became active.
   **/
  | { name: 'BountyBecameActive'; data: { index: number } }
  /**
   * A bounty is awarded to a beneficiary.
   **/
  | { name: 'BountyAwarded'; data: { index: number; beneficiary: AccountId32 } }
  /**
   * A bounty is claimed by beneficiary.
   **/
  | { name: 'BountyClaimed'; data: { index: number; payout: bigint; beneficiary: AccountId32 } }
  /**
   * A bounty is cancelled.
   **/
  | { name: 'BountyCanceled'; data: { index: number } }
  /**
   * A bounty expiry is extended.
   **/
  | { name: 'BountyExtended'; data: { index: number } }
  /**
   * A bounty is approved.
   **/
  | { name: 'BountyApproved'; data: { index: number } }
  /**
   * A bounty curator is proposed.
   **/
  | { name: 'CuratorProposed'; data: { bountyId: number; curator: AccountId32 } }
  /**
   * A bounty curator is unassigned.
   **/
  | { name: 'CuratorUnassigned'; data: { bountyId: number } }
  /**
   * A bounty curator is accepted.
   **/
  | { name: 'CuratorAccepted'; data: { bountyId: number; curator: AccountId32 } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletChildBountiesEvent =
  /**
   * A child-bounty is added.
   **/
  | { name: 'Added'; data: { index: number; childIndex: number } }
  /**
   * A child-bounty is awarded to a beneficiary.
   **/
  | { name: 'Awarded'; data: { index: number; childIndex: number; beneficiary: AccountId32 } }
  /**
   * A child-bounty is claimed by beneficiary.
   **/
  | { name: 'Claimed'; data: { index: number; childIndex: number; payout: bigint; beneficiary: AccountId32 } }
  /**
   * A child-bounty is cancelled.
   **/
  | { name: 'Canceled'; data: { index: number; childIndex: number } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletNisEvent =
  /**
   * A bid was successfully placed.
   **/
  | { name: 'BidPlaced'; data: { who: AccountId32; amount: bigint; duration: number } }
  /**
   * A bid was successfully removed (before being accepted).
   **/
  | { name: 'BidRetracted'; data: { who: AccountId32; amount: bigint; duration: number } }
  /**
   * A bid was dropped from a queue because of another, more substantial, bid was present.
   **/
  | { name: 'BidDropped'; data: { who: AccountId32; amount: bigint; duration: number } }
  /**
   * A bid was accepted. The balance may not be released until expiry.
   **/
  | {
      name: 'Issued';
      data: {
        /**
         * The identity of the receipt.
         **/
        index: number;

        /**
         * The block number at which the receipt may be thawed.
         **/
        expiry: number;

        /**
         * The owner of the receipt.
         **/
        who: AccountId32;

        /**
         * The proportion of the effective total issuance which the receipt represents.
         **/
        proportion: Perquintill;

        /**
         * The amount of funds which were debited from the owner.
         **/
        amount: bigint;
      };
    }
  /**
   * An receipt has been (at least partially) thawed.
   **/
  | {
      name: 'Thawed';
      data: {
        /**
         * The identity of the receipt.
         **/
        index: number;

        /**
         * The owner.
         **/
        who: AccountId32;

        /**
         * The proportion of the effective total issuance by which the owner was debited.
         **/
        proportion: Perquintill;

        /**
         * The amount by which the owner was credited.
         **/
        amount: bigint;

        /**
         * If `true` then the receipt is done.
         **/
        dropped: boolean;
      };
    }
  /**
   * An automatic funding of the deficit was made.
   **/
  | { name: 'Funded'; data: { deficit: bigint } }
  /**
   * A receipt was transfered.
   **/
  | { name: 'Transferred'; data: { from: AccountId32; to: AccountId32; index: number } };

/**
 * The `Event` enum of this pallet
 **/
export type PolkadotRuntimeParachainsInclusionPalletEvent =
  /**
   * A candidate was backed. `[candidate, head_data]`
   **/
  | {
      name: 'CandidateBacked';
      data: [
        PolkadotPrimitivesV6CandidateReceipt,
        PolkadotParachainPrimitivesPrimitivesHeadData,
        PolkadotPrimitivesV6CoreIndex,
        PolkadotPrimitivesV6GroupIndex,
      ];
    }
  /**
   * A candidate was included. `[candidate, head_data]`
   **/
  | {
      name: 'CandidateIncluded';
      data: [
        PolkadotPrimitivesV6CandidateReceipt,
        PolkadotParachainPrimitivesPrimitivesHeadData,
        PolkadotPrimitivesV6CoreIndex,
        PolkadotPrimitivesV6GroupIndex,
      ];
    }
  /**
   * A candidate timed out. `[candidate, head_data]`
   **/
  | {
      name: 'CandidateTimedOut';
      data: [
        PolkadotPrimitivesV6CandidateReceipt,
        PolkadotParachainPrimitivesPrimitivesHeadData,
        PolkadotPrimitivesV6CoreIndex,
      ];
    }
  /**
   * Some upward messages have been received and will be processed.
   **/
  | { name: 'UpwardMessagesReceived'; data: { from: PolkadotParachainPrimitivesPrimitivesId; count: number } };

export type PolkadotPrimitivesV6CandidateReceipt = {
  descriptor: PolkadotPrimitivesV6CandidateDescriptor;
  commitmentsHash: H256;
};

export type PolkadotPrimitivesV6CoreIndex = number;

export type PolkadotPrimitivesV6GroupIndex = number;

/**
 * The `Event` enum of this pallet
 **/
export type PolkadotRuntimeParachainsParasPalletEvent =
  /**
   * Current code has been updated for a Para. `para_id`
   **/
  | { name: 'CurrentCodeUpdated'; data: PolkadotParachainPrimitivesPrimitivesId }
  /**
   * Current head has been updated for a Para. `para_id`
   **/
  | { name: 'CurrentHeadUpdated'; data: PolkadotParachainPrimitivesPrimitivesId }
  /**
   * A code upgrade has been scheduled for a Para. `para_id`
   **/
  | { name: 'CodeUpgradeScheduled'; data: PolkadotParachainPrimitivesPrimitivesId }
  /**
   * A new head has been noted for a Para. `para_id`
   **/
  | { name: 'NewHeadNoted'; data: PolkadotParachainPrimitivesPrimitivesId }
  /**
   * A para has been queued to execute pending actions. `para_id`
   **/
  | { name: 'ActionQueued'; data: [PolkadotParachainPrimitivesPrimitivesId, number] }
  /**
   * The given para either initiated or subscribed to a PVF check for the given validation
   * code. `code_hash` `para_id`
   **/
  | {
      name: 'PvfCheckStarted';
      data: [PolkadotParachainPrimitivesPrimitivesValidationCodeHash, PolkadotParachainPrimitivesPrimitivesId];
    }
  /**
   * The given validation code was accepted by the PVF pre-checking vote.
   * `code_hash` `para_id`
   **/
  | {
      name: 'PvfCheckAccepted';
      data: [PolkadotParachainPrimitivesPrimitivesValidationCodeHash, PolkadotParachainPrimitivesPrimitivesId];
    }
  /**
   * The given validation code was rejected by the PVF pre-checking vote.
   * `code_hash` `para_id`
   **/
  | {
      name: 'PvfCheckRejected';
      data: [PolkadotParachainPrimitivesPrimitivesValidationCodeHash, PolkadotParachainPrimitivesPrimitivesId];
    };

/**
 * The `Event` enum of this pallet
 **/
export type PolkadotRuntimeParachainsHrmpPalletEvent =
  /**
   * Open HRMP channel requested.
   **/
  | {
      name: 'OpenChannelRequested';
      data: {
        sender: PolkadotParachainPrimitivesPrimitivesId;
        recipient: PolkadotParachainPrimitivesPrimitivesId;
        proposedMaxCapacity: number;
        proposedMaxMessageSize: number;
      };
    }
  /**
   * An HRMP channel request sent by the receiver was canceled by either party.
   **/
  | {
      name: 'OpenChannelCanceled';
      data: {
        byParachain: PolkadotParachainPrimitivesPrimitivesId;
        channelId: PolkadotParachainPrimitivesPrimitivesHrmpChannelId;
      };
    }
  /**
   * Open HRMP channel accepted.
   **/
  | {
      name: 'OpenChannelAccepted';
      data: { sender: PolkadotParachainPrimitivesPrimitivesId; recipient: PolkadotParachainPrimitivesPrimitivesId };
    }
  /**
   * HRMP channel closed.
   **/
  | {
      name: 'ChannelClosed';
      data: {
        byParachain: PolkadotParachainPrimitivesPrimitivesId;
        channelId: PolkadotParachainPrimitivesPrimitivesHrmpChannelId;
      };
    }
  /**
   * An HRMP channel was opened via Root origin.
   **/
  | {
      name: 'HrmpChannelForceOpened';
      data: {
        sender: PolkadotParachainPrimitivesPrimitivesId;
        recipient: PolkadotParachainPrimitivesPrimitivesId;
        proposedMaxCapacity: number;
        proposedMaxMessageSize: number;
      };
    }
  /**
   * An HRMP channel was opened between two system chains.
   **/
  | {
      name: 'HrmpSystemChannelOpened';
      data: {
        sender: PolkadotParachainPrimitivesPrimitivesId;
        recipient: PolkadotParachainPrimitivesPrimitivesId;
        proposedMaxCapacity: number;
        proposedMaxMessageSize: number;
      };
    }
  /**
   * An HRMP channel's deposits were updated.
   **/
  | {
      name: 'OpenChannelDepositsUpdated';
      data: { sender: PolkadotParachainPrimitivesPrimitivesId; recipient: PolkadotParachainPrimitivesPrimitivesId };
    };

/**
 * The `Event` enum of this pallet
 **/
export type PolkadotRuntimeParachainsDisputesPalletEvent =
  /**
   * A dispute has been initiated. \[candidate hash, dispute location\]
   **/
  | {
      name: 'DisputeInitiated';
      data: [PolkadotCorePrimitivesCandidateHash, PolkadotRuntimeParachainsDisputesDisputeLocation];
    }
  /**
   * A dispute has concluded for or against a candidate.
   * `\[para id, candidate hash, dispute result\]`
   **/
  | {
      name: 'DisputeConcluded';
      data: [PolkadotCorePrimitivesCandidateHash, PolkadotRuntimeParachainsDisputesDisputeResult];
    }
  /**
   * A dispute has concluded with supermajority against a candidate.
   * Block authors should no longer build on top of this head and should
   * instead revert the block at the given height. This should be the
   * number of the child of the last known valid block in the chain.
   **/
  | { name: 'Revert'; data: number };

export type PolkadotRuntimeParachainsDisputesDisputeLocation = 'Local' | 'Remote';

export type PolkadotRuntimeParachainsDisputesDisputeResult = 'Valid' | 'Invalid';

/**
 * The `Event` enum of this pallet
 **/
export type PalletMessageQueueEvent =
  /**
   * Message discarded due to an error in the `MessageProcessor` (usually a format error).
   **/
  | {
      name: 'ProcessingFailed';
      data: {
        /**
         * The `blake2_256` hash of the message.
         **/
        id: H256;

        /**
         * The queue of the message.
         **/
        origin: PolkadotRuntimeParachainsInclusionAggregateMessageOrigin;

        /**
         * The error that occurred.
         *
         * This error is pretty opaque. More fine-grained errors need to be emitted as events
         * by the `MessageProcessor`.
         **/
        error: FrameSupportMessagesProcessMessageError;
      };
    }
  /**
   * Message is processed.
   **/
  | {
      name: 'Processed';
      data: {
        /**
         * The `blake2_256` hash of the message.
         **/
        id: H256;

        /**
         * The queue of the message.
         **/
        origin: PolkadotRuntimeParachainsInclusionAggregateMessageOrigin;

        /**
         * How much weight was used to process the message.
         **/
        weightUsed: SpWeightsWeightV2Weight;

        /**
         * Whether the message was processed.
         *
         * Note that this does not mean that the underlying `MessageProcessor` was internally
         * successful. It *solely* means that the MQ pallet will treat this as a success
         * condition and discard the message. Any internal error needs to be emitted as events
         * by the `MessageProcessor`.
         **/
        success: boolean;
      };
    }
  /**
   * Message placed in overweight queue.
   **/
  | {
      name: 'OverweightEnqueued';
      data: {
        /**
         * The `blake2_256` hash of the message.
         **/
        id: FixedBytes<32>;

        /**
         * The queue of the message.
         **/
        origin: PolkadotRuntimeParachainsInclusionAggregateMessageOrigin;

        /**
         * The page of the message.
         **/
        pageIndex: number;

        /**
         * The index of the message within the page.
         **/
        messageIndex: number;
      };
    }
  /**
   * This page was reaped.
   **/
  | {
      name: 'PageReaped';
      data: {
        /**
         * The queue of the page.
         **/
        origin: PolkadotRuntimeParachainsInclusionAggregateMessageOrigin;

        /**
         * The index of the page.
         **/
        index: number;
      };
    };

export type FrameSupportMessagesProcessMessageError =
  | { tag: 'BadFormat' }
  | { tag: 'Corrupt' }
  | { tag: 'Unsupported' }
  | { tag: 'Overweight'; value: SpWeightsWeightV2Weight }
  | { tag: 'Yield' };

/**
 * The `Event` enum of this pallet
 **/
export type PolkadotRuntimeParachainsAssignerOnDemandPalletEvent =
  /**
   * An order was placed at some spot price amount.
   **/
  | { name: 'OnDemandOrderPlaced'; data: { paraId: PolkadotParachainPrimitivesPrimitivesId; spotPrice: bigint } }
  /**
   * The value of the spot traffic multiplier changed.
   **/
  | { name: 'SpotTrafficSet'; data: { traffic: FixedU128 } };

/**
 * The `Event` enum of this pallet
 **/
export type PolkadotRuntimeCommonParasRegistrarPalletEvent =
  | { name: 'Registered'; data: { paraId: PolkadotParachainPrimitivesPrimitivesId; manager: AccountId32 } }
  | { name: 'Deregistered'; data: { paraId: PolkadotParachainPrimitivesPrimitivesId } }
  | { name: 'Reserved'; data: { paraId: PolkadotParachainPrimitivesPrimitivesId; who: AccountId32 } }
  | {
      name: 'Swapped';
      data: { paraId: PolkadotParachainPrimitivesPrimitivesId; otherId: PolkadotParachainPrimitivesPrimitivesId };
    };

/**
 * The `Event` enum of this pallet
 **/
export type PolkadotRuntimeCommonSlotsPalletEvent =
  /**
   * A new `[lease_period]` is beginning.
   **/
  | { name: 'NewLeasePeriod'; data: { leasePeriod: number } }
  /**
   * A para has won the right to a continuous set of lease periods as a parachain.
   * First balance is any extra amount reserved on top of the para's existing deposit.
   * Second balance is the total amount reserved.
   **/
  | {
      name: 'Leased';
      data: {
        paraId: PolkadotParachainPrimitivesPrimitivesId;
        leaser: AccountId32;
        periodBegin: number;
        periodCount: number;
        extraReserved: bigint;
        totalAmount: bigint;
      };
    };

/**
 * The `Event` enum of this pallet
 **/
export type PolkadotRuntimeCommonAuctionsPalletEvent =
  /**
   * An auction started. Provides its index and the block number where it will begin to
   * close and the first lease period of the quadruplet that is auctioned.
   **/
  | { name: 'AuctionStarted'; data: { auctionIndex: number; leasePeriod: number; ending: number } }
  /**
   * An auction ended. All funds become unreserved.
   **/
  | { name: 'AuctionClosed'; data: { auctionIndex: number } }
  /**
   * Funds were reserved for a winning bid. First balance is the extra amount reserved.
   * Second is the total.
   **/
  | { name: 'Reserved'; data: { bidder: AccountId32; extraReserved: bigint; totalAmount: bigint } }
  /**
   * Funds were unreserved since bidder is no longer active. `[bidder, amount]`
   **/
  | { name: 'Unreserved'; data: { bidder: AccountId32; amount: bigint } }
  /**
   * Someone attempted to lease the same slot twice for a parachain. The amount is held in
   * reserve but no parachain slot has been leased.
   **/
  | {
      name: 'ReserveConfiscated';
      data: { paraId: PolkadotParachainPrimitivesPrimitivesId; leaser: AccountId32; amount: bigint };
    }
  /**
   * A new bid has been accepted as the current winner.
   **/
  | {
      name: 'BidAccepted';
      data: {
        bidder: AccountId32;
        paraId: PolkadotParachainPrimitivesPrimitivesId;
        amount: bigint;
        firstSlot: number;
        lastSlot: number;
      };
    }
  /**
   * The winning offset was chosen for an auction. This will map into the `Winning` storage
   * map.
   **/
  | { name: 'WinningOffset'; data: { auctionIndex: number; blockNumber: number } };

/**
 * The `Event` enum of this pallet
 **/
export type PolkadotRuntimeCommonCrowdloanPalletEvent =
  /**
   * Create a new crowdloaning campaign.
   **/
  | { name: 'Created'; data: { paraId: PolkadotParachainPrimitivesPrimitivesId } }
  /**
   * Contributed to a crowd sale.
   **/
  | {
      name: 'Contributed';
      data: { who: AccountId32; fundIndex: PolkadotParachainPrimitivesPrimitivesId; amount: bigint };
    }
  /**
   * Withdrew full balance of a contributor.
   **/
  | { name: 'Withdrew'; data: { who: AccountId32; fundIndex: PolkadotParachainPrimitivesPrimitivesId; amount: bigint } }
  /**
   * The loans in a fund have been partially dissolved, i.e. there are some left
   * over child keys that still need to be killed.
   **/
  | { name: 'PartiallyRefunded'; data: { paraId: PolkadotParachainPrimitivesPrimitivesId } }
  /**
   * All loans in a fund have been refunded.
   **/
  | { name: 'AllRefunded'; data: { paraId: PolkadotParachainPrimitivesPrimitivesId } }
  /**
   * Fund is dissolved.
   **/
  | { name: 'Dissolved'; data: { paraId: PolkadotParachainPrimitivesPrimitivesId } }
  /**
   * The result of trying to submit a new bid to the Slots pallet.
   **/
  | {
      name: 'HandleBidResult';
      data: { paraId: PolkadotParachainPrimitivesPrimitivesId; result: Result<[], DispatchError> };
    }
  /**
   * The configuration to a crowdloan has been edited.
   **/
  | { name: 'Edited'; data: { paraId: PolkadotParachainPrimitivesPrimitivesId } }
  /**
   * A memo has been updated.
   **/
  | { name: 'MemoUpdated'; data: { who: AccountId32; paraId: PolkadotParachainPrimitivesPrimitivesId; memo: Bytes } }
  /**
   * A parachain has been moved to `NewRaise`
   **/
  | { name: 'AddedToNewRaise'; data: { paraId: PolkadotParachainPrimitivesPrimitivesId } };

/**
 * The `Event` enum of this pallet
 **/
export type PolkadotRuntimeParachainsCoretimePalletEvent =
  /**
   * The broker chain has asked for revenue information for a specific block.
   **/
  | { name: 'RevenueInfoRequested'; data: { when: number } }
  /**
   * A core has received a new assignment from the broker chain.
   **/
  | { name: 'CoreAssigned'; data: { core: PolkadotPrimitivesV6CoreIndex } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletXcmEvent =
  /**
   * Execution of an XCM message was attempted.
   **/
  | { name: 'Attempted'; data: { outcome: StagingXcmV4TraitsOutcome } }
  /**
   * A XCM message was sent.
   **/
  | {
      name: 'Sent';
      data: {
        origin: StagingXcmV4Location;
        destination: StagingXcmV4Location;
        message: StagingXcmV4Xcm;
        messageId: FixedBytes<32>;
      };
    }
  /**
   * Query response received which does not match a registered query. This may be because a
   * matching query was never registered, it may be because it is a duplicate response, or
   * because the query timed out.
   **/
  | { name: 'UnexpectedResponse'; data: { origin: StagingXcmV4Location; queryId: bigint } }
  /**
   * Query response has been received and is ready for taking with `take_response`. There is
   * no registered notification call.
   **/
  | { name: 'ResponseReady'; data: { queryId: bigint; response: StagingXcmV4Response } }
  /**
   * Query response has been received and query is removed. The registered notification has
   * been dispatched and executed successfully.
   **/
  | { name: 'Notified'; data: { queryId: bigint; palletIndex: number; callIndex: number } }
  /**
   * Query response has been received and query is removed. The registered notification
   * could not be dispatched because the dispatch weight is greater than the maximum weight
   * originally budgeted by this runtime for the query result.
   **/
  | {
      name: 'NotifyOverweight';
      data: {
        queryId: bigint;
        palletIndex: number;
        callIndex: number;
        actualWeight: SpWeightsWeightV2Weight;
        maxBudgetedWeight: SpWeightsWeightV2Weight;
      };
    }
  /**
   * Query response has been received and query is removed. There was a general error with
   * dispatching the notification call.
   **/
  | { name: 'NotifyDispatchError'; data: { queryId: bigint; palletIndex: number; callIndex: number } }
  /**
   * Query response has been received and query is removed. The dispatch was unable to be
   * decoded into a `Call`; this might be due to dispatch function having a signature which
   * is not `(origin, QueryId, Response)`.
   **/
  | { name: 'NotifyDecodeFailed'; data: { queryId: bigint; palletIndex: number; callIndex: number } }
  /**
   * Expected query response has been received but the origin location of the response does
   * not match that expected. The query remains registered for a later, valid, response to
   * be received and acted upon.
   **/
  | {
      name: 'InvalidResponder';
      data: { origin: StagingXcmV4Location; queryId: bigint; expectedLocation?: StagingXcmV4Location | undefined };
    }
  /**
   * Expected query response has been received but the expected origin location placed in
   * storage by this runtime previously cannot be decoded. The query remains registered.
   *
   * This is unexpected (since a location placed in storage in a previously executing
   * runtime should be readable prior to query timeout) and dangerous since the possibly
   * valid response will be dropped. Manual governance intervention is probably going to be
   * needed.
   **/
  | { name: 'InvalidResponderVersion'; data: { origin: StagingXcmV4Location; queryId: bigint } }
  /**
   * Received query response has been read and removed.
   **/
  | { name: 'ResponseTaken'; data: { queryId: bigint } }
  /**
   * Some assets have been placed in an asset trap.
   **/
  | { name: 'AssetsTrapped'; data: { hash: H256; origin: StagingXcmV4Location; assets: XcmVersionedAssets } }
  /**
   * An XCM version change notification message has been attempted to be sent.
   *
   * The cost of sending it (borne by the chain) is included.
   **/
  | {
      name: 'VersionChangeNotified';
      data: {
        destination: StagingXcmV4Location;
        result: number;
        cost: StagingXcmV4AssetAssets;
        messageId: FixedBytes<32>;
      };
    }
  /**
   * The supported version of a location has been changed. This might be through an
   * automatic notification or a manual intervention.
   **/
  | { name: 'SupportedVersionChanged'; data: { location: StagingXcmV4Location; version: number } }
  /**
   * A given location which had a version change subscription was dropped owing to an error
   * sending the notification to it.
   **/
  | { name: 'NotifyTargetSendFail'; data: { location: StagingXcmV4Location; queryId: bigint; error: XcmV3TraitsError } }
  /**
   * A given location which had a version change subscription was dropped owing to an error
   * migrating the location to our new XCM format.
   **/
  | { name: 'NotifyTargetMigrationFail'; data: { location: XcmVersionedLocation; queryId: bigint } }
  /**
   * Expected query response has been received but the expected querier location placed in
   * storage by this runtime previously cannot be decoded. The query remains registered.
   *
   * This is unexpected (since a location placed in storage in a previously executing
   * runtime should be readable prior to query timeout) and dangerous since the possibly
   * valid response will be dropped. Manual governance intervention is probably going to be
   * needed.
   **/
  | { name: 'InvalidQuerierVersion'; data: { origin: StagingXcmV4Location; queryId: bigint } }
  /**
   * Expected query response has been received but the querier location of the response does
   * not match the expected. The query remains registered for a later, valid, response to
   * be received and acted upon.
   **/
  | {
      name: 'InvalidQuerier';
      data: {
        origin: StagingXcmV4Location;
        queryId: bigint;
        expectedQuerier: StagingXcmV4Location;
        maybeActualQuerier?: StagingXcmV4Location | undefined;
      };
    }
  /**
   * A remote has requested XCM version change notification from us and we have honored it.
   * A version information message is sent to them and its cost is included.
   **/
  | {
      name: 'VersionNotifyStarted';
      data: { destination: StagingXcmV4Location; cost: StagingXcmV4AssetAssets; messageId: FixedBytes<32> };
    }
  /**
   * We have requested that a remote chain send us XCM version change notifications.
   **/
  | {
      name: 'VersionNotifyRequested';
      data: { destination: StagingXcmV4Location; cost: StagingXcmV4AssetAssets; messageId: FixedBytes<32> };
    }
  /**
   * We have requested that a remote chain stops sending us XCM version change
   * notifications.
   **/
  | {
      name: 'VersionNotifyUnrequested';
      data: { destination: StagingXcmV4Location; cost: StagingXcmV4AssetAssets; messageId: FixedBytes<32> };
    }
  /**
   * Fees were paid from a location for an operation (often for using `SendXcm`).
   **/
  | { name: 'FeesPaid'; data: { paying: StagingXcmV4Location; fees: StagingXcmV4AssetAssets } }
  /**
   * Some assets have been claimed from an asset trap
   **/
  | { name: 'AssetsClaimed'; data: { hash: H256; origin: StagingXcmV4Location; assets: XcmVersionedAssets } }
  /**
   * A XCM version migration finished.
   **/
  | { name: 'VersionMigrationFinished'; data: { version: number } };

export type StagingXcmV4TraitsOutcome =
  | { tag: 'Complete'; value: { used: SpWeightsWeightV2Weight } }
  | { tag: 'Incomplete'; value: { used: SpWeightsWeightV2Weight; error: XcmV3TraitsError } }
  | { tag: 'Error'; value: { error: XcmV3TraitsError } };

/**
 * The `Event` enum of this pallet
 **/
export type PolkadotRuntimeCommonIdentityMigratorPalletEvent =
  /**
   * The identity and all sub accounts were reaped for `who`.
   **/
  | { name: 'IdentityReaped'; data: { who: AccountId32 } }
  /**
   * The deposits held for `who` were updated. `identity` is the new deposit held for
   * identity info, and `subs` is the new deposit held for the sub-accounts.
   **/
  | { name: 'DepositUpdated'; data: { who: AccountId32; identity: bigint; subs: bigint } };

/**
 * The `Event` enum of this pallet
 **/
export type PolkadotRuntimeCommonAssignedSlotsPalletEvent =
  /**
   * A parachain was assigned a permanent parachain slot
   **/
  | { name: 'PermanentSlotAssigned'; data: PolkadotParachainPrimitivesPrimitivesId }
  /**
   * A parachain was assigned a temporary parachain slot
   **/
  | { name: 'TemporarySlotAssigned'; data: PolkadotParachainPrimitivesPrimitivesId }
  /**
   * The maximum number of permanent slots has been changed
   **/
  | { name: 'MaxPermanentSlotsChanged'; data: { slots: number } }
  /**
   * The maximum number of temporary slots has been changed
   **/
  | { name: 'MaxTemporarySlotsChanged'; data: { slots: number } };

/**
 * The `Event` enum of this pallet
 **/
export type RococoRuntimeValidatorManagerPalletEvent =
  /**
   * New validators were added to the set.
   **/
  | { name: 'ValidatorsRegistered'; data: Array<AccountId32> }
  /**
   * Validators were removed from the set.
   **/
  | { name: 'ValidatorsDeregistered'; data: Array<AccountId32> };

/**
 * Inner events of this pallet.
 **/
export type PalletStateTrieMigrationEvent =
  /**
   * Given number of `(top, child)` keys were migrated respectively, with the given
   * `compute`.
   **/
  | { name: 'Migrated'; data: { top: number; child: number; compute: PalletStateTrieMigrationMigrationCompute } }
  /**
   * Some account got slashed by the given amount.
   **/
  | { name: 'Slashed'; data: { who: AccountId32; amount: bigint } }
  /**
   * The auto migration task finished.
   **/
  | { name: 'AutoMigrationFinished' }
  /**
   * Migration got halted due to an error or miss-configuration.
   **/
  | { name: 'Halted'; data: { error: PalletStateTrieMigrationError } };

export type PalletStateTrieMigrationMigrationCompute = 'Signed' | 'Auto';

/**
 * The `Error` enum of this pallet.
 **/
export type PalletStateTrieMigrationError =
  /**
   * Max signed limits not respected.
   **/
  | 'MaxSignedLimits'
  /**
   * A key was longer than the configured maximum.
   *
   * This means that the migration halted at the current [`Progress`] and
   * can be resumed with a larger [`crate::Config::MaxKeyLen`] value.
   * Retrying with the same [`crate::Config::MaxKeyLen`] value will not work.
   * The value should only be increased to avoid a storage migration for the currently
   * stored [`crate::Progress::LastKey`].
   **/
  | 'KeyTooLong'
  /**
   * submitter does not have enough funds.
   **/
  | 'NotEnoughFunds'
  /**
   * Bad witness data provided.
   **/
  | 'BadWitness'
  /**
   * Signed migration is not allowed because the maximum limit is not set yet.
   **/
  | 'SignedMigrationNotAllowed'
  /**
   * Bad child root provided.
   **/
  | 'BadChildRoot';

/**
 * The `Event` enum of this pallet
 **/
export type PalletRootTestingEvent =
  /**
   * Event dispatched when the trigger_defensive extrinsic is called.
   **/
  'DefensiveTestCall';

/**
 * The `Event` enum of this pallet
 **/
export type PalletSudoEvent =
  /**
   * A sudo call just took place.
   **/
  | {
      name: 'Sudid';
      data: {
        /**
         * The result of the call made by the sudo user.
         **/
        sudoResult: Result<[], DispatchError>;
      };
    }
  /**
   * The sudo key has been updated.
   **/
  | {
      name: 'KeyChanged';
      data: {
        /**
         * The old sudo key (if one was previously set).
         **/
        old?: AccountId32 | undefined;

        /**
         * The new sudo key (if one was set).
         **/
        new: AccountId32;
      };
    }
  /**
   * The key was permanently removed.
   **/
  | { name: 'KeyRemoved' }
  /**
   * A [sudo_as](Pallet::sudo_as) call just took place.
   **/
  | {
      name: 'SudoAsDone';
      data: {
        /**
         * The result of the call made by the sudo user.
         **/
        sudoResult: Result<[], DispatchError>;
      };
    };

export type FrameSystemLastRuntimeUpgradeInfo = { specVersion: number; specName: string };

export type FrameSystemCodeUpgradeAuthorization = { codeHash: H256; checkVersion: boolean };

export type FrameSystemLimitsBlockWeights = {
  baseBlock: SpWeightsWeightV2Weight;
  maxBlock: SpWeightsWeightV2Weight;
  perClass: FrameSupportDispatchPerDispatchClassWeightsPerClass;
};

export type FrameSupportDispatchPerDispatchClassWeightsPerClass = {
  normal: FrameSystemLimitsWeightsPerClass;
  operational: FrameSystemLimitsWeightsPerClass;
  mandatory: FrameSystemLimitsWeightsPerClass;
};

export type FrameSystemLimitsWeightsPerClass = {
  baseExtrinsic: SpWeightsWeightV2Weight;
  maxExtrinsic?: SpWeightsWeightV2Weight | undefined;
  maxTotal?: SpWeightsWeightV2Weight | undefined;
  reserved?: SpWeightsWeightV2Weight | undefined;
};

export type FrameSystemLimitsBlockLength = { max: FrameSupportDispatchPerDispatchClassU32 };

export type FrameSupportDispatchPerDispatchClassU32 = { normal: number; operational: number; mandatory: number };

export type SpWeightsRuntimeDbWeight = { read: bigint; write: bigint };

/**
 * Error for the System pallet
 **/
export type FrameSystemError =
  /**
   * The name of specification does not match between the current runtime
   * and the new runtime.
   **/
  | 'InvalidSpecName'
  /**
   * The specification version is not allowed to decrease between the current runtime
   * and the new runtime.
   **/
  | 'SpecVersionNeedsToIncrease'
  /**
   * Failed to extract the runtime version from the new runtime.
   *
   * Either calling `Core_version` or decoding `RuntimeVersion` failed.
   **/
  | 'FailedToExtractRuntimeVersion'
  /**
   * Suicide called when the account has non-default composite data.
   **/
  | 'NonDefaultComposite'
  /**
   * There is a non-zero reference count preventing the account from being purged.
   **/
  | 'NonZeroRefCount'
  /**
   * The origin filter prevent the call to be dispatched.
   **/
  | 'CallFiltered'
  /**
   * No upgrade authorized.
   **/
  | 'NothingAuthorized'
  /**
   * The submitted code is not authorized.
   **/
  | 'Unauthorized';

export type SpConsensusBabeDigestsPreDigest =
  | { tag: 'Primary'; value: SpConsensusBabeDigestsPrimaryPreDigest }
  | { tag: 'SecondaryPlain'; value: SpConsensusBabeDigestsSecondaryPlainPreDigest }
  | { tag: 'SecondaryVRF'; value: SpConsensusBabeDigestsSecondaryVRFPreDigest };

export type SpConsensusBabeDigestsPrimaryPreDigest = {
  authorityIndex: number;
  slot: SpConsensusSlotsSlot;
  vrfSignature: SpCoreSr25519VrfVrfSignature;
};

export type SpCoreSr25519VrfVrfSignature = { preOutput: FixedBytes<32>; proof: FixedBytes<64> };

export type SpConsensusBabeDigestsSecondaryPlainPreDigest = { authorityIndex: number; slot: SpConsensusSlotsSlot };

export type SpConsensusBabeDigestsSecondaryVRFPreDigest = {
  authorityIndex: number;
  slot: SpConsensusSlotsSlot;
  vrfSignature: SpCoreSr25519VrfVrfSignature;
};

export type SpConsensusBabeBabeEpochConfiguration = { c: [bigint, bigint]; allowedSlots: SpConsensusBabeAllowedSlots };

/**
 * The `Error` enum of this pallet.
 **/
export type PalletBabeError =
  /**
   * An equivocation proof provided as part of an equivocation report is invalid.
   **/
  | 'InvalidEquivocationProof'
  /**
   * A key ownership proof provided as part of an equivocation report is invalid.
   **/
  | 'InvalidKeyOwnershipProof'
  /**
   * A given equivocation report is valid but already previously reported.
   **/
  | 'DuplicateOffenceReport'
  /**
   * Submitted configuration is invalid.
   **/
  | 'InvalidConfiguration';

/**
 * The `Error` enum of this pallet.
 **/
export type PalletIndicesError =
  /**
   * The index was not already assigned.
   **/
  | 'NotAssigned'
  /**
   * The index is assigned to another account.
   **/
  | 'NotOwner'
  /**
   * The index was not available.
   **/
  | 'InUse'
  /**
   * The source and destination accounts are identical.
   **/
  | 'NotTransfer'
  /**
   * The index is permanent and may not be freed/changed.
   **/
  | 'Permanent';

export type PalletBalancesBalanceLock = { id: FixedBytes<8>; amount: bigint; reasons: PalletBalancesReasons };

export type PalletBalancesReasons = 'Fee' | 'Misc' | 'All';

export type PalletBalancesReserveData = { id: FixedBytes<8>; amount: bigint };

export type PalletBalancesIdAmount = { id: RococoRuntimeRuntimeHoldReason; amount: bigint };

export type RococoRuntimeRuntimeHoldReason =
  | { tag: 'Preimage'; value: PalletPreimageHoldReason }
  | { tag: 'Nis'; value: PalletNisHoldReason }
  | { tag: 'StateTrieMigration'; value: PalletStateTrieMigrationHoldReason };

export type PalletPreimageHoldReason = 'Preimage';

export type PalletNisHoldReason = 'NftReceipt';

export type PalletStateTrieMigrationHoldReason = 'SlashForMigrate';

export type PalletBalancesIdAmount002 = { id: []; amount: bigint };

/**
 * The `Error` enum of this pallet.
 **/
export type PalletBalancesError =
  /**
   * Vesting balance too high to send value.
   **/
  | 'VestingBalance'
  /**
   * Account liquidity restrictions prevent withdrawal.
   **/
  | 'LiquidityRestrictions'
  /**
   * Balance too low to send value.
   **/
  | 'InsufficientBalance'
  /**
   * Value too low to create account due to existential deposit.
   **/
  | 'ExistentialDeposit'
  /**
   * Transfer/payment would kill account.
   **/
  | 'Expendability'
  /**
   * A vesting schedule already exists for this account.
   **/
  | 'ExistingVestingSchedule'
  /**
   * Beneficiary account must pre-exist.
   **/
  | 'DeadAccount'
  /**
   * Number of named reserves exceed `MaxReserves`.
   **/
  | 'TooManyReserves'
  /**
   * Number of holds exceed `VariantCountOf<T::RuntimeHoldReason>`.
   **/
  | 'TooManyHolds'
  /**
   * Number of freezes exceed `MaxFreezes`.
   **/
  | 'TooManyFreezes'
  /**
   * The issuance cannot be modified since it is already deactivated.
   **/
  | 'IssuanceDeactivated'
  /**
   * The delta cannot be zero.
   **/
  | 'DeltaZero';

export type PalletTransactionPaymentReleases = 'V1Ancient' | 'V2';

export type SpStakingOffenceOffenceDetails = { offender: [AccountId32, []]; reporters: Array<AccountId32> };

export type SpCoreCryptoKeyTypeId = FixedBytes<4>;

/**
 * Error for the session pallet.
 **/
export type PalletSessionError =
  /**
   * Invalid ownership proof.
   **/
  | 'InvalidProof'
  /**
   * No associated validator ID for account.
   **/
  | 'NoAssociatedValidatorId'
  /**
   * Registered duplicate key.
   **/
  | 'DuplicatedKey'
  /**
   * No keys are associated with this account.
   **/
  | 'NoKeys'
  /**
   * Key setting account is not live, so it's impossible to associate keys.
   **/
  | 'NoAccount';

export type PalletGrandpaStoredState =
  | { tag: 'Live' }
  | { tag: 'PendingPause'; value: { scheduledAt: number; delay: number } }
  | { tag: 'Paused' }
  | { tag: 'PendingResume'; value: { scheduledAt: number; delay: number } };

export type PalletGrandpaStoredPendingChange = {
  scheduledAt: number;
  delay: number;
  nextAuthorities: Array<[SpConsensusGrandpaAppPublic, bigint]>;
  forced?: number | undefined;
};

/**
 * The `Error` enum of this pallet.
 **/
export type PalletGrandpaError =
  /**
   * Attempt to signal GRANDPA pause when the authority set isn't live
   * (either paused or already pending pause).
   **/
  | 'PauseFailed'
  /**
   * Attempt to signal GRANDPA resume when the authority set isn't paused
   * (either live or already pending resume).
   **/
  | 'ResumeFailed'
  /**
   * Attempt to signal GRANDPA change with one already pending.
   **/
  | 'ChangePending'
  /**
   * Cannot signal forced change so soon after last.
   **/
  | 'TooSoon'
  /**
   * A key ownership proof provided as part of an equivocation report is invalid.
   **/
  | 'InvalidKeyOwnershipProof'
  /**
   * An equivocation proof provided as part of an equivocation report is invalid.
   **/
  | 'InvalidEquivocationProof'
  /**
   * A given equivocation report is valid but already previously reported.
   **/
  | 'DuplicateOffenceReport';

export type PalletTreasuryProposal = { proposer: AccountId32; value: bigint; beneficiary: AccountId32; bond: bigint };

export type PalletTreasurySpendStatus = {
  assetKind: PolkadotRuntimeCommonImplsVersionedLocatableAsset;
  amount: bigint;
  beneficiary: XcmVersionedLocation;
  validFrom: number;
  expireAt: number;
  status: PalletTreasuryPaymentState;
};

export type PalletTreasuryPaymentState =
  | { tag: 'Pending' }
  | { tag: 'Attempted'; value: { id: bigint } }
  | { tag: 'Failed' };

export type FrameSupportPalletId = FixedBytes<8>;

/**
 * Error for the treasury pallet.
 **/
export type PalletTreasuryError =
  /**
   * Proposer's balance is too low.
   **/
  | 'InsufficientProposersBalance'
  /**
   * No proposal, bounty or spend at that index.
   **/
  | 'InvalidIndex'
  /**
   * Too many approvals in the queue.
   **/
  | 'TooManyApprovals'
  /**
   * The spend origin is valid but the amount it is allowed to spend is lower than the
   * amount to be spent.
   **/
  | 'InsufficientPermission'
  /**
   * Proposal has not been approved.
   **/
  | 'ProposalNotApproved'
  /**
   * The balance of the asset kind is not convertible to the balance of the native asset.
   **/
  | 'FailedToConvertBalance'
  /**
   * The spend has expired and cannot be claimed.
   **/
  | 'SpendExpired'
  /**
   * The spend is not yet eligible for payout.
   **/
  | 'EarlyPayout'
  /**
   * The payment has already been attempted.
   **/
  | 'AlreadyAttempted'
  /**
   * There was some issue with the mechanism of payment.
   **/
  | 'PayoutError'
  /**
   * The payout was not yet attempted/claimed.
   **/
  | 'NotAttempted'
  /**
   * The payment has neither failed nor succeeded yet.
   **/
  | 'Inconclusive';

export type PalletConvictionVotingVoteVoting =
  | { tag: 'Casting'; value: PalletConvictionVotingVoteCasting }
  | { tag: 'Delegating'; value: PalletConvictionVotingVoteDelegating };

export type PalletConvictionVotingVoteCasting = {
  votes: Array<[number, PalletConvictionVotingVoteAccountVote]>;
  delegations: PalletConvictionVotingDelegations;
  prior: PalletConvictionVotingVotePriorLock;
};

export type PalletConvictionVotingDelegations = { votes: bigint; capital: bigint };

export type PalletConvictionVotingVotePriorLock = [number, bigint];

export type PalletConvictionVotingVoteDelegating = {
  balance: bigint;
  target: AccountId32;
  conviction: PalletConvictionVotingConviction;
  delegations: PalletConvictionVotingDelegations;
  prior: PalletConvictionVotingVotePriorLock;
};

/**
 * The `Error` enum of this pallet.
 **/
export type PalletConvictionVotingError =
  /**
   * Poll is not ongoing.
   **/
  | 'NotOngoing'
  /**
   * The given account did not vote on the poll.
   **/
  | 'NotVoter'
  /**
   * The actor has no permission to conduct the action.
   **/
  | 'NoPermission'
  /**
   * The actor has no permission to conduct the action right now but will do in the future.
   **/
  | 'NoPermissionYet'
  /**
   * The account is already delegating.
   **/
  | 'AlreadyDelegating'
  /**
   * The account currently has votes attached to it and the operation cannot succeed until
   * these are removed through `remove_vote`.
   **/
  | 'AlreadyVoting'
  /**
   * Too high a balance was provided that the account cannot afford.
   **/
  | 'InsufficientFunds'
  /**
   * The account is not currently delegating.
   **/
  | 'NotDelegating'
  /**
   * Delegation to oneself makes no sense.
   **/
  | 'Nonsense'
  /**
   * Maximum number of votes reached.
   **/
  | 'MaxVotesReached'
  /**
   * The class must be supplied since it is not easily determinable from the state.
   **/
  | 'ClassNeeded'
  /**
   * The class ID supplied is invalid.
   **/
  | 'BadClass';

export type PalletReferendaReferendumInfo =
  | { tag: 'Ongoing'; value: PalletReferendaReferendumStatus }
  | { tag: 'Approved'; value: [number, PalletReferendaDeposit | undefined, PalletReferendaDeposit | undefined] }
  | { tag: 'Rejected'; value: [number, PalletReferendaDeposit | undefined, PalletReferendaDeposit | undefined] }
  | { tag: 'Cancelled'; value: [number, PalletReferendaDeposit | undefined, PalletReferendaDeposit | undefined] }
  | { tag: 'TimedOut'; value: [number, PalletReferendaDeposit | undefined, PalletReferendaDeposit | undefined] }
  | { tag: 'Killed'; value: number };

export type PalletReferendaReferendumStatus = {
  track: number;
  origin: RococoRuntimeOriginCaller;
  proposal: FrameSupportPreimagesBounded;
  enactment: FrameSupportScheduleDispatchTime;
  submitted: number;
  submissionDeposit: PalletReferendaDeposit;
  decisionDeposit?: PalletReferendaDeposit | undefined;
  deciding?: PalletReferendaDecidingStatus | undefined;
  tally: PalletConvictionVotingTally;
  inQueue: boolean;
  alarm?: [number, [number, number]] | undefined;
};

export type PalletReferendaDeposit = { who: AccountId32; amount: bigint };

export type PalletReferendaDecidingStatus = { since: number; confirming?: number | undefined };

export type PalletReferendaTrackInfo = {
  name: string;
  maxDeciding: number;
  decisionDeposit: bigint;
  preparePeriod: number;
  decisionPeriod: number;
  confirmPeriod: number;
  minEnactmentPeriod: number;
  minApproval: PalletReferendaCurve;
  minSupport: PalletReferendaCurve;
};

export type PalletReferendaCurve =
  | { tag: 'LinearDecreasing'; value: { length: Perbill; floor: Perbill; ceil: Perbill } }
  | { tag: 'SteppedDecreasing'; value: { begin: Perbill; end: Perbill; step: Perbill; period: Perbill } }
  | { tag: 'Reciprocal'; value: { factor: FixedI64; xOffset: FixedI64; yOffset: FixedI64 } };

/**
 * The `Error` enum of this pallet.
 **/
export type PalletReferendaError =
  /**
   * Referendum is not ongoing.
   **/
  | 'NotOngoing'
  /**
   * Referendum's decision deposit is already paid.
   **/
  | 'HasDeposit'
  /**
   * The track identifier given was invalid.
   **/
  | 'BadTrack'
  /**
   * There are already a full complement of referenda in progress for this track.
   **/
  | 'Full'
  /**
   * The queue of the track is empty.
   **/
  | 'QueueEmpty'
  /**
   * The referendum index provided is invalid in this context.
   **/
  | 'BadReferendum'
  /**
   * There was nothing to do in the advancement.
   **/
  | 'NothingToDo'
  /**
   * No track exists for the proposal origin.
   **/
  | 'NoTrack'
  /**
   * Any deposit cannot be refunded until after the decision is over.
   **/
  | 'Unfinished'
  /**
   * The deposit refunder is not the depositor.
   **/
  | 'NoPermission'
  /**
   * The deposit cannot be refunded since none was made.
   **/
  | 'NoDeposit'
  /**
   * The referendum status is invalid for this operation.
   **/
  | 'BadStatus'
  /**
   * The preimage does not exist.
   **/
  | 'PreimageNotExist';

export type PalletRankedCollectiveMemberRecord = { rank: number };

/**
 * The `Error` enum of this pallet.
 **/
export type PalletRankedCollectiveError =
  /**
   * Account is already a member.
   **/
  | 'AlreadyMember'
  /**
   * Account is not a member.
   **/
  | 'NotMember'
  /**
   * The given poll index is unknown or has closed.
   **/
  | 'NotPolling'
  /**
   * The given poll is still ongoing.
   **/
  | 'Ongoing'
  /**
   * There are no further records to be removed.
   **/
  | 'NoneRemaining'
  /**
   * Unexpected error in state.
   **/
  | 'Corruption'
  /**
   * The member's rank is too low to vote.
   **/
  | 'RankTooLow'
  /**
   * The information provided is incorrect.
   **/
  | 'InvalidWitness'
  /**
   * The origin is not sufficiently privileged to do the operation.
   **/
  | 'NoPermission'
  /**
   * The new member to exchange is the same as the old member
   **/
  | 'SameMember';

export type PalletReferendaReferendumInfoTally =
  | { tag: 'Ongoing'; value: PalletReferendaReferendumStatusTally }
  | { tag: 'Approved'; value: [number, PalletReferendaDeposit | undefined, PalletReferendaDeposit | undefined] }
  | { tag: 'Rejected'; value: [number, PalletReferendaDeposit | undefined, PalletReferendaDeposit | undefined] }
  | { tag: 'Cancelled'; value: [number, PalletReferendaDeposit | undefined, PalletReferendaDeposit | undefined] }
  | { tag: 'TimedOut'; value: [number, PalletReferendaDeposit | undefined, PalletReferendaDeposit | undefined] }
  | { tag: 'Killed'; value: number };

export type PalletReferendaReferendumStatusTally = {
  track: number;
  origin: RococoRuntimeOriginCaller;
  proposal: FrameSupportPreimagesBounded;
  enactment: FrameSupportScheduleDispatchTime;
  submitted: number;
  submissionDeposit: PalletReferendaDeposit;
  decisionDeposit?: PalletReferendaDeposit | undefined;
  deciding?: PalletReferendaDecidingStatus | undefined;
  tally: PalletRankedCollectiveTally;
  inQueue: boolean;
  alarm?: [number, [number, number]] | undefined;
};

/**
 * The `Error` enum of this pallet.
 **/
export type PalletWhitelistError =
  /**
   * The preimage of the call hash could not be loaded.
   **/
  | 'UnavailablePreImage'
  /**
   * The call could not be decoded.
   **/
  | 'UndecodableCall'
  /**
   * The weight of the decoded call was higher than the witness.
   **/
  | 'InvalidCallWeightWitness'
  /**
   * The call was not whitelisted.
   **/
  | 'CallIsNotWhitelisted'
  /**
   * The call was already whitelisted; No-Op.
   **/
  | 'CallAlreadyWhitelisted';

/**
 * The `Error` enum of this pallet.
 **/
export type PolkadotRuntimeCommonClaimsPalletError =
  /**
   * Invalid Ethereum signature.
   **/
  | 'InvalidEthereumSignature'
  /**
   * Ethereum address has no claim.
   **/
  | 'SignerHasNoClaim'
  /**
   * Account ID sending transaction has no claim.
   **/
  | 'SenderHasNoClaim'
  /**
   * There's not enough in the pot to pay out some unvested amount. Generally implies a
   * logic error.
   **/
  | 'PotUnderflow'
  /**
   * A needed statement was not included.
   **/
  | 'InvalidStatement'
  /**
   * The account already has a vested balance.
   **/
  | 'VestedBalanceExists';

/**
 * The `Error` enum of this pallet.
 **/
export type PalletUtilityError =
  /**
   * Too many calls batched.
   **/
  'TooManyCalls';

export type PalletIdentityRegistration = {
  judgements: Array<[number, PalletIdentityJudgement]>;
  deposit: bigint;
  info: PalletIdentityLegacyIdentityInfo;
};

export type PalletIdentityRegistrarInfo = { account: AccountId32; fee: bigint; fields: bigint };

export type PalletIdentityAuthorityProperties = { suffix: Bytes; allocation: number };

/**
 * The `Error` enum of this pallet.
 **/
export type PalletIdentityError =
  /**
   * Too many subs-accounts.
   **/
  | 'TooManySubAccounts'
  /**
   * Account isn't found.
   **/
  | 'NotFound'
  /**
   * Account isn't named.
   **/
  | 'NotNamed'
  /**
   * Empty index.
   **/
  | 'EmptyIndex'
  /**
   * Fee is changed.
   **/
  | 'FeeChanged'
  /**
   * No identity found.
   **/
  | 'NoIdentity'
  /**
   * Sticky judgement.
   **/
  | 'StickyJudgement'
  /**
   * Judgement given.
   **/
  | 'JudgementGiven'
  /**
   * Invalid judgement.
   **/
  | 'InvalidJudgement'
  /**
   * The index is invalid.
   **/
  | 'InvalidIndex'
  /**
   * The target is invalid.
   **/
  | 'InvalidTarget'
  /**
   * Maximum amount of registrars reached. Cannot add any more.
   **/
  | 'TooManyRegistrars'
  /**
   * Account ID is already named.
   **/
  | 'AlreadyClaimed'
  /**
   * Sender is not a sub-account.
   **/
  | 'NotSub'
  /**
   * Sub-account isn't owned by sender.
   **/
  | 'NotOwned'
  /**
   * The provided judgement was for a different identity.
   **/
  | 'JudgementForDifferentIdentity'
  /**
   * Error that occurs when there is an issue paying for judgement.
   **/
  | 'JudgementPaymentFailed'
  /**
   * The provided suffix is too long.
   **/
  | 'InvalidSuffix'
  /**
   * The sender does not have permission to issue a username.
   **/
  | 'NotUsernameAuthority'
  /**
   * The authority cannot allocate any more usernames.
   **/
  | 'NoAllocation'
  /**
   * The signature on a username was not valid.
   **/
  | 'InvalidSignature'
  /**
   * Setting this username requires a signature, but none was provided.
   **/
  | 'RequiresSignature'
  /**
   * The username does not meet the requirements.
   **/
  | 'InvalidUsername'
  /**
   * The username is already taken.
   **/
  | 'UsernameTaken'
  /**
   * The requested username does not exist.
   **/
  | 'NoUsername'
  /**
   * The username cannot be forcefully removed because it can still be accepted.
   **/
  | 'NotExpired';

export type PalletSocietyMemberRecord = {
  rank: number;
  strikes: number;
  vouching?: PalletSocietyVouchingStatus | undefined;
  index: number;
};

export type PalletSocietyVouchingStatus = 'Vouching' | 'Banned';

export type PalletSocietyPayoutRecord = { paid: bigint; payouts: Array<[number, bigint]> };

export type PalletSocietyBid = { who: AccountId32; kind: PalletSocietyBidKind; value: bigint };

export type PalletSocietyBidKind = { tag: 'Deposit'; value: bigint } | { tag: 'Vouch'; value: [AccountId32, bigint] };

export type PalletSocietyCandidacy = {
  round: number;
  kind: PalletSocietyBidKind;
  bid: bigint;
  tally: PalletSocietyTally;
  skepticStruck: boolean;
};

export type PalletSocietyTally = { approvals: number; rejections: number };

export type PalletSocietyVote = { approve: boolean; weight: number };

export type PalletSocietyIntakeRecord = { who: AccountId32; bid: bigint; round: number };

/**
 * The `Error` enum of this pallet.
 **/
export type PalletSocietyError =
  /**
   * User is not a member.
   **/
  | 'NotMember'
  /**
   * User is already a member.
   **/
  | 'AlreadyMember'
  /**
   * User is suspended.
   **/
  | 'Suspended'
  /**
   * User is not suspended.
   **/
  | 'NotSuspended'
  /**
   * Nothing to payout.
   **/
  | 'NoPayout'
  /**
   * Society already founded.
   **/
  | 'AlreadyFounded'
  /**
   * Not enough in pot to accept candidate.
   **/
  | 'InsufficientPot'
  /**
   * Member is already vouching or banned from vouching again.
   **/
  | 'AlreadyVouching'
  /**
   * Member is not vouching.
   **/
  | 'NotVouchingOnBidder'
  /**
   * Cannot remove the head of the chain.
   **/
  | 'Head'
  /**
   * Cannot remove the founder.
   **/
  | 'Founder'
  /**
   * User has already made a bid.
   **/
  | 'AlreadyBid'
  /**
   * User is already a candidate.
   **/
  | 'AlreadyCandidate'
  /**
   * User is not a candidate.
   **/
  | 'NotCandidate'
  /**
   * Too many members in the society.
   **/
  | 'MaxMembers'
  /**
   * The caller is not the founder.
   **/
  | 'NotFounder'
  /**
   * The caller is not the head.
   **/
  | 'NotHead'
  /**
   * The membership cannot be claimed as the candidate was not clearly approved.
   **/
  | 'NotApproved'
  /**
   * The candidate cannot be kicked as the candidate was not clearly rejected.
   **/
  | 'NotRejected'
  /**
   * The candidacy cannot be dropped as the candidate was clearly approved.
   **/
  | 'Approved'
  /**
   * The candidacy cannot be bestowed as the candidate was clearly rejected.
   **/
  | 'Rejected'
  /**
   * The candidacy cannot be concluded as the voting is still in progress.
   **/
  | 'InProgress'
  /**
   * The candidacy cannot be pruned until a full additional intake period has passed.
   **/
  | 'TooEarly'
  /**
   * The skeptic already voted.
   **/
  | 'Voted'
  /**
   * The skeptic need not vote on candidates from expired rounds.
   **/
  | 'Expired'
  /**
   * User is not a bidder.
   **/
  | 'NotBidder'
  /**
   * There is no defender currently.
   **/
  | 'NoDefender'
  /**
   * Group doesn't exist.
   **/
  | 'NotGroup'
  /**
   * The member is already elevated to this rank.
   **/
  | 'AlreadyElevated'
  /**
   * The skeptic has already been punished for this offence.
   **/
  | 'AlreadyPunished'
  /**
   * Funds are insufficient to pay off society debts.
   **/
  | 'InsufficientFunds'
  /**
   * The candidate/defender has no stale votes to remove.
   **/
  | 'NoVotes';

export type PalletRecoveryRecoveryConfig = {
  delayPeriod: number;
  deposit: bigint;
  friends: Array<AccountId32>;
  threshold: number;
};

export type PalletRecoveryActiveRecovery = { created: number; deposit: bigint; friends: Array<AccountId32> };

/**
 * The `Error` enum of this pallet.
 **/
export type PalletRecoveryError =
  /**
   * User is not allowed to make a call on behalf of this account
   **/
  | 'NotAllowed'
  /**
   * Threshold must be greater than zero
   **/
  | 'ZeroThreshold'
  /**
   * Friends list must be greater than zero and threshold
   **/
  | 'NotEnoughFriends'
  /**
   * Friends list must be less than max friends
   **/
  | 'MaxFriends'
  /**
   * Friends list must be sorted and free of duplicates
   **/
  | 'NotSorted'
  /**
   * This account is not set up for recovery
   **/
  | 'NotRecoverable'
  /**
   * This account is already set up for recovery
   **/
  | 'AlreadyRecoverable'
  /**
   * A recovery process has already started for this account
   **/
  | 'AlreadyStarted'
  /**
   * A recovery process has not started for this rescuer
   **/
  | 'NotStarted'
  /**
   * This account is not a friend who can vouch
   **/
  | 'NotFriend'
  /**
   * The friend must wait until the delay period to vouch for this recovery
   **/
  | 'DelayPeriod'
  /**
   * This user has already vouched for this recovery
   **/
  | 'AlreadyVouched'
  /**
   * The threshold for recovering this account has not been met
   **/
  | 'Threshold'
  /**
   * There are still active recovery attempts that need to be closed
   **/
  | 'StillActive'
  /**
   * This account is already set up for recovery
   **/
  | 'AlreadyProxy'
  /**
   * Some internal state is broken.
   **/
  | 'BadState';

export type PalletVestingReleases = 'V0' | 'V1';

/**
 * Error for the vesting pallet.
 **/
export type PalletVestingError =
  /**
   * The account given is not vesting.
   **/
  | 'NotVesting'
  /**
   * The account already has `MaxVestingSchedules` count of schedules and thus
   * cannot add another one. Consider merging existing schedules in order to add another.
   **/
  | 'AtMaxVestingSchedules'
  /**
   * Amount being transferred is too low to create a vesting schedule.
   **/
  | 'AmountLow'
  /**
   * An index was out of bounds of the vesting schedules.
   **/
  | 'ScheduleIndexOutOfBounds'
  /**
   * Failed to create a new schedule because some parameter was invalid.
   **/
  | 'InvalidScheduleParams';

export type PalletSchedulerScheduled = {
  maybeId?: FixedBytes<32> | undefined;
  priority: number;
  call: FrameSupportPreimagesBounded;
  maybePeriodic?: [number, number] | undefined;
  origin: RococoRuntimeOriginCaller;
};

export type PalletSchedulerRetryConfig = { totalRetries: number; remaining: number; period: number };

/**
 * The `Error` enum of this pallet.
 **/
export type PalletSchedulerError =
  /**
   * Failed to schedule a call
   **/
  | 'FailedToSchedule'
  /**
   * Cannot find the scheduled call.
   **/
  | 'NotFound'
  /**
   * Given target block number is in the past.
   **/
  | 'TargetBlockNumberInPast'
  /**
   * Reschedule failed because it does not change scheduled time.
   **/
  | 'RescheduleNoChange'
  /**
   * Attempt to use a non-named function on a named task.
   **/
  | 'Named';

export type PalletProxyProxyDefinition = { delegate: AccountId32; proxyType: RococoRuntimeProxyType; delay: number };

export type PalletProxyAnnouncement = { real: AccountId32; callHash: H256; height: number };

/**
 * The `Error` enum of this pallet.
 **/
export type PalletProxyError =
  /**
   * There are too many proxies registered or too many announcements pending.
   **/
  | 'TooMany'
  /**
   * Proxy registration not found.
   **/
  | 'NotFound'
  /**
   * Sender is not a proxy of the account to be proxied.
   **/
  | 'NotProxy'
  /**
   * A call which is incompatible with the proxy type's filter was attempted.
   **/
  | 'Unproxyable'
  /**
   * Account is already a proxy.
   **/
  | 'Duplicate'
  /**
   * Call may not be made by proxy because it may escalate its privileges.
   **/
  | 'NoPermission'
  /**
   * Announcement, if made at all, was made too recently.
   **/
  | 'Unannounced'
  /**
   * Cannot add self as proxy.
   **/
  | 'NoSelfProxy';

export type PalletMultisigMultisig = {
  when: PalletMultisigTimepoint;
  deposit: bigint;
  depositor: AccountId32;
  approvals: Array<AccountId32>;
};

/**
 * The `Error` enum of this pallet.
 **/
export type PalletMultisigError =
  /**
   * Threshold must be 2 or greater.
   **/
  | 'MinimumThreshold'
  /**
   * Call is already approved by this signatory.
   **/
  | 'AlreadyApproved'
  /**
   * Call doesn't need any (more) approvals.
   **/
  | 'NoApprovalsNeeded'
  /**
   * There are too few signatories in the list.
   **/
  | 'TooFewSignatories'
  /**
   * There are too many signatories in the list.
   **/
  | 'TooManySignatories'
  /**
   * The signatories were provided out of order; they should be ordered.
   **/
  | 'SignatoriesOutOfOrder'
  /**
   * The sender was contained in the other signatories; it shouldn't be.
   **/
  | 'SenderInSignatories'
  /**
   * Multisig operation not found when attempting to cancel.
   **/
  | 'NotFound'
  /**
   * Only the account that originally created the multisig is able to cancel it.
   **/
  | 'NotOwner'
  /**
   * No timepoint was given, yet the multisig operation is already underway.
   **/
  | 'NoTimepoint'
  /**
   * A different timepoint was given to the multisig operation that is underway.
   **/
  | 'WrongTimepoint'
  /**
   * A timepoint was given, yet no multisig operation is underway.
   **/
  | 'UnexpectedTimepoint'
  /**
   * The maximum weight information provided was too low.
   **/
  | 'MaxWeightTooLow'
  /**
   * The data to be stored is already stored.
   **/
  | 'AlreadyStored';

export type PalletPreimageOldRequestStatus =
  | { tag: 'Unrequested'; value: { deposit: [AccountId32, bigint]; len: number } }
  | {
      tag: 'Requested';
      value: { deposit?: [AccountId32, bigint] | undefined; count: number; len?: number | undefined };
    };

export type PalletPreimageRequestStatus =
  | { tag: 'Unrequested'; value: { ticket: [AccountId32, FrameSupportTokensFungibleHoldConsideration]; len: number } }
  | {
      tag: 'Requested';
      value: {
        maybeTicket?: [AccountId32, FrameSupportTokensFungibleHoldConsideration] | undefined;
        count: number;
        maybeLen?: number | undefined;
      };
    };

export type FrameSupportTokensFungibleHoldConsideration = bigint;

/**
 * The `Error` enum of this pallet.
 **/
export type PalletPreimageError =
  /**
   * Preimage is too large to store on-chain.
   **/
  | 'TooBig'
  /**
   * Preimage has already been noted on-chain.
   **/
  | 'AlreadyNoted'
  /**
   * The user is not authorized to perform this action.
   **/
  | 'NotAuthorized'
  /**
   * The preimage cannot be removed since it has not yet been noted.
   **/
  | 'NotNoted'
  /**
   * A preimage may not be removed when there are outstanding requests.
   **/
  | 'Requested'
  /**
   * The preimage request cannot be removed since no outstanding requests exist.
   **/
  | 'NotRequested'
  /**
   * More than `MAX_HASH_UPGRADE_BULK_COUNT` hashes were requested to be upgraded at once.
   **/
  | 'TooMany'
  /**
   * Too few hashes were requested to be upgraded (i.e. zero).
   **/
  | 'TooFew';

/**
 * The `Error` enum of this pallet.
 **/
export type PalletAssetRateError =
  /**
   * The given asset ID is unknown.
   **/
  | 'UnknownAssetKind'
  /**
   * The given asset ID already has an assigned conversion rate and cannot be re-created.
   **/
  | 'AlreadyExists'
  /**
   * Overflow ocurred when calculating the inverse rate.
   **/
  | 'Overflow';

export type PalletBountiesBounty = {
  proposer: AccountId32;
  value: bigint;
  fee: bigint;
  curatorDeposit: bigint;
  bond: bigint;
  status: PalletBountiesBountyStatus;
};

export type PalletBountiesBountyStatus =
  | { tag: 'Proposed' }
  | { tag: 'Approved' }
  | { tag: 'Funded' }
  | { tag: 'CuratorProposed'; value: { curator: AccountId32 } }
  | { tag: 'Active'; value: { curator: AccountId32; updateDue: number } }
  | { tag: 'PendingPayout'; value: { curator: AccountId32; beneficiary: AccountId32; unlockAt: number } };

/**
 * The `Error` enum of this pallet.
 **/
export type PalletBountiesError =
  /**
   * Proposer's balance is too low.
   **/
  | 'InsufficientProposersBalance'
  /**
   * No proposal or bounty at that index.
   **/
  | 'InvalidIndex'
  /**
   * The reason given is just too big.
   **/
  | 'ReasonTooBig'
  /**
   * The bounty status is unexpected.
   **/
  | 'UnexpectedStatus'
  /**
   * Require bounty curator.
   **/
  | 'RequireCurator'
  /**
   * Invalid bounty value.
   **/
  | 'InvalidValue'
  /**
   * Invalid bounty fee.
   **/
  | 'InvalidFee'
  /**
   * A bounty payout is pending.
   * To cancel the bounty, you must unassign and slash the curator.
   **/
  | 'PendingPayout'
  /**
   * The bounties cannot be claimed/closed because it's still in the countdown period.
   **/
  | 'Premature'
  /**
   * The bounty cannot be closed because it has active child bounties.
   **/
  | 'HasActiveChildBounty'
  /**
   * Too many approvals are already queued.
   **/
  | 'TooManyQueued';

export type PalletChildBountiesChildBounty = {
  parentBounty: number;
  value: bigint;
  fee: bigint;
  curatorDeposit: bigint;
  status: PalletChildBountiesChildBountyStatus;
};

export type PalletChildBountiesChildBountyStatus =
  | { tag: 'Added' }
  | { tag: 'CuratorProposed'; value: { curator: AccountId32 } }
  | { tag: 'Active'; value: { curator: AccountId32 } }
  | { tag: 'PendingPayout'; value: { curator: AccountId32; beneficiary: AccountId32; unlockAt: number } };

/**
 * The `Error` enum of this pallet.
 **/
export type PalletChildBountiesError =
  /**
   * The parent bounty is not in active state.
   **/
  | 'ParentBountyNotActive'
  /**
   * The bounty balance is not enough to add new child-bounty.
   **/
  | 'InsufficientBountyBalance'
  /**
   * Number of child bounties exceeds limit `MaxActiveChildBountyCount`.
   **/
  | 'TooManyChildBounties';

export type PalletNisBid = { amount: bigint; who: AccountId32 };

export type PalletNisSummaryRecord = {
  proportionOwed: Perquintill;
  index: number;
  thawed: Perquintill;
  lastPeriod: number;
  receiptsOnHold: bigint;
};

export type PalletNisReceiptRecord = {
  proportion: Perquintill;
  owner?: [AccountId32, bigint] | undefined;
  expiry: number;
};

/**
 * The `Error` enum of this pallet.
 **/
export type PalletNisError =
  /**
   * The duration of the bid is less than one.
   **/
  | 'DurationTooSmall'
  /**
   * The duration is the bid is greater than the number of queues.
   **/
  | 'DurationTooBig'
  /**
   * The amount of the bid is less than the minimum allowed.
   **/
  | 'AmountTooSmall'
  /**
   * The queue for the bid's duration is full and the amount bid is too low to get in
   * through replacing an existing bid.
   **/
  | 'BidTooLow'
  /**
   * Receipt index is unknown.
   **/
  | 'UnknownReceipt'
  /**
   * Not the owner of the receipt.
   **/
  | 'NotOwner'
  /**
   * Bond not yet at expiry date.
   **/
  | 'NotExpired'
  /**
   * The given bid for retraction is not found.
   **/
  | 'UnknownBid'
  /**
   * The portion supplied is beyond the value of the receipt.
   **/
  | 'PortionTooBig'
  /**
   * Not enough funds are held to pay out.
   **/
  | 'Unfunded'
  /**
   * There are enough funds for what is required.
   **/
  | 'AlreadyFunded'
  /**
   * The thaw throttle has been reached for this period.
   **/
  | 'Throttled'
  /**
   * The operation would result in a receipt worth an insignficant value.
   **/
  | 'MakesDust'
  /**
   * The receipt is already communal.
   **/
  | 'AlreadyCommunal'
  /**
   * The receipt is already private.
   **/
  | 'AlreadyPrivate';

export type PolkadotRuntimeParachainsConfigurationHostConfiguration = {
  maxCodeSize: number;
  maxHeadDataSize: number;
  maxUpwardQueueCount: number;
  maxUpwardQueueSize: number;
  maxUpwardMessageSize: number;
  maxUpwardMessageNumPerCandidate: number;
  hrmpMaxMessageNumPerCandidate: number;
  validationUpgradeCooldown: number;
  validationUpgradeDelay: number;
  asyncBackingParams: PolkadotPrimitivesV6AsyncBackingAsyncBackingParams;
  maxPovSize: number;
  maxDownwardMessageSize: number;
  hrmpMaxParachainOutboundChannels: number;
  hrmpSenderDeposit: bigint;
  hrmpRecipientDeposit: bigint;
  hrmpChannelMaxCapacity: number;
  hrmpChannelMaxTotalSize: number;
  hrmpMaxParachainInboundChannels: number;
  hrmpChannelMaxMessageSize: number;
  executorParams: PolkadotPrimitivesV6ExecutorParams;
  codeRetentionPeriod: number;
  coretimeCores: number;
  onDemandRetries: number;
  onDemandQueueMaxSize: number;
  onDemandTargetQueueUtilization: Perbill;
  onDemandFeeVariability: Perbill;
  onDemandBaseFee: bigint;
  onDemandTtl: number;
  groupRotationFrequency: number;
  parasAvailabilityPeriod: number;
  schedulingLookahead: number;
  maxValidatorsPerCore?: number | undefined;
  maxValidators?: number | undefined;
  disputePeriod: number;
  disputePostConclusionAcceptancePeriod: number;
  noShowSlots: number;
  nDelayTranches: number;
  zerothDelayTrancheWidth: number;
  neededApprovals: number;
  relayVrfModuloSamples: number;
  pvfVotingTtl: number;
  minimumValidationUpgradeDelay: number;
  minimumBackingVotes: number;
  nodeFeatures: BitSequence;
  approvalVotingParams: PolkadotPrimitivesVstagingApprovalVotingParams;
};

/**
 * The `Error` enum of this pallet.
 **/
export type PolkadotRuntimeParachainsConfigurationPalletError =
  /**
   * The new value for a configuration parameter is invalid.
   **/
  'InvalidNewValue';

export type PolkadotRuntimeParachainsSharedAllowedRelayParentsTracker = {
  buffer: Array<[H256, H256]>;
  latestNumber: number;
};

export type PolkadotRuntimeParachainsInclusionAvailabilityBitfieldRecord = {
  bitfield: PolkadotPrimitivesV6AvailabilityBitfield;
  submittedAt: number;
};

export type PolkadotRuntimeParachainsInclusionCandidatePendingAvailability = {
  core: PolkadotPrimitivesV6CoreIndex;
  hash: PolkadotCorePrimitivesCandidateHash;
  descriptor: PolkadotPrimitivesV6CandidateDescriptor;
  availabilityVotes: BitSequence;
  backers: BitSequence;
  relayParentNumber: number;
  backedInNumber: number;
  backingGroup: PolkadotPrimitivesV6GroupIndex;
};

/**
 * The `Error` enum of this pallet.
 **/
export type PolkadotRuntimeParachainsInclusionPalletError =
  /**
   * Validator indices are out of order or contains duplicates.
   **/
  | 'UnsortedOrDuplicateValidatorIndices'
  /**
   * Dispute statement sets are out of order or contain duplicates.
   **/
  | 'UnsortedOrDuplicateDisputeStatementSet'
  /**
   * Backed candidates are out of order (core index) or contain duplicates.
   **/
  | 'UnsortedOrDuplicateBackedCandidates'
  /**
   * A different relay parent was provided compared to the on-chain stored one.
   **/
  | 'UnexpectedRelayParent'
  /**
   * Availability bitfield has unexpected size.
   **/
  | 'WrongBitfieldSize'
  /**
   * Bitfield consists of zeros only.
   **/
  | 'BitfieldAllZeros'
  /**
   * Multiple bitfields submitted by same validator or validators out of order by index.
   **/
  | 'BitfieldDuplicateOrUnordered'
  /**
   * Validator index out of bounds.
   **/
  | 'ValidatorIndexOutOfBounds'
  /**
   * Invalid signature
   **/
  | 'InvalidBitfieldSignature'
  /**
   * Candidate submitted but para not scheduled.
   **/
  | 'UnscheduledCandidate'
  /**
   * Candidate scheduled despite pending candidate already existing for the para.
   **/
  | 'CandidateScheduledBeforeParaFree'
  /**
   * Scheduled cores out of order.
   **/
  | 'ScheduledOutOfOrder'
  /**
   * Head data exceeds the configured maximum.
   **/
  | 'HeadDataTooLarge'
  /**
   * Code upgrade prematurely.
   **/
  | 'PrematureCodeUpgrade'
  /**
   * Output code is too large
   **/
  | 'NewCodeTooLarge'
  /**
   * The candidate's relay-parent was not allowed. Either it was
   * not recent enough or it didn't advance based on the last parachain block.
   **/
  | 'DisallowedRelayParent'
  /**
   * Failed to compute group index for the core: either it's out of bounds
   * or the relay parent doesn't belong to the current session.
   **/
  | 'InvalidAssignment'
  /**
   * Invalid group index in core assignment.
   **/
  | 'InvalidGroupIndex'
  /**
   * Insufficient (non-majority) backing.
   **/
  | 'InsufficientBacking'
  /**
   * Invalid (bad signature, unknown validator, etc.) backing.
   **/
  | 'InvalidBacking'
  /**
   * Collator did not sign PoV.
   **/
  | 'NotCollatorSigned'
  /**
   * The validation data hash does not match expected.
   **/
  | 'ValidationDataHashMismatch'
  /**
   * The downward message queue is not processed correctly.
   **/
  | 'IncorrectDownwardMessageHandling'
  /**
   * At least one upward message sent does not pass the acceptance criteria.
   **/
  | 'InvalidUpwardMessages'
  /**
   * The candidate didn't follow the rules of HRMP watermark advancement.
   **/
  | 'HrmpWatermarkMishandling'
  /**
   * The HRMP messages sent by the candidate is not valid.
   **/
  | 'InvalidOutboundHrmp'
  /**
   * The validation code hash of the candidate is not valid.
   **/
  | 'InvalidValidationCodeHash'
  /**
   * The `para_head` hash in the candidate descriptor doesn't match the hash of the actual
   * para head in the commitments.
   **/
  | 'ParaHeadMismatch'
  /**
   * A bitfield that references a freed core,
   * either intentionally or as part of a concluded
   * invalid dispute.
   **/
  | 'BitfieldReferencesFreedCore';

export type PolkadotPrimitivesV6ScrapedOnChainVotes = {
  session: number;
  backingValidatorsPerCandidate: Array<
    [
      PolkadotPrimitivesV6CandidateReceipt,
      Array<[PolkadotPrimitivesV6ValidatorIndex, PolkadotPrimitivesV6ValidityAttestation]>,
    ]
  >;
  disputes: Array<PolkadotPrimitivesV6DisputeStatementSet>;
};

/**
 * The `Error` enum of this pallet.
 **/
export type PolkadotRuntimeParachainsParasInherentPalletError =
  /**
   * Inclusion inherent called more than once per block.
   **/
  | 'TooManyInclusionInherents'
  /**
   * The hash of the submitted parent header doesn't correspond to the saved block hash of
   * the parent.
   **/
  | 'InvalidParentHeader'
  /**
   * Disputed candidate that was concluded invalid.
   **/
  | 'CandidateConcludedInvalid'
  /**
   * The data given to the inherent will result in an overweight block.
   **/
  | 'InherentOverweight'
  /**
   * The ordering of dispute statements was invalid.
   **/
  | 'DisputeStatementsUnsortedOrDuplicates'
  /**
   * A dispute statement was invalid.
   **/
  | 'DisputeInvalid'
  /**
   * A candidate was backed by a disabled validator
   **/
  | 'BackedByDisabled'
  /**
   * A candidate was backed even though the paraid was not scheduled.
   **/
  | 'BackedOnUnscheduledCore'
  /**
   * Too many candidates supplied.
   **/
  | 'UnscheduledCandidate';

export type PolkadotRuntimeParachainsSchedulerPalletCoreOccupied =
  | { tag: 'Free' }
  | { tag: 'Paras'; value: PolkadotRuntimeParachainsSchedulerPalletParasEntry };

export type PolkadotRuntimeParachainsSchedulerPalletParasEntry = {
  assignment: PolkadotRuntimeParachainsSchedulerCommonAssignment;
  availabilityTimeouts: number;
  ttl: number;
};

export type PolkadotRuntimeParachainsSchedulerCommonAssignment =
  | {
      tag: 'Pool';
      value: { paraId: PolkadotParachainPrimitivesPrimitivesId; coreIndex: PolkadotPrimitivesV6CoreIndex };
    }
  | { tag: 'Bulk'; value: PolkadotParachainPrimitivesPrimitivesId };

export type PolkadotRuntimeParachainsParasPvfCheckActiveVoteState = {
  votesAccept: BitSequence;
  votesReject: BitSequence;
  age: number;
  createdAt: number;
  causes: Array<PolkadotRuntimeParachainsParasPvfCheckCause>;
};

export type PolkadotRuntimeParachainsParasPvfCheckCause =
  | { tag: 'Onboarding'; value: PolkadotParachainPrimitivesPrimitivesId }
  | {
      tag: 'Upgrade';
      value: {
        id: PolkadotParachainPrimitivesPrimitivesId;
        includedAt: number;
        setGoAhead: PolkadotRuntimeParachainsParasSetGoAhead;
      };
    };

export type PolkadotRuntimeParachainsParasSetGoAhead = 'Yes' | 'No';

export type PolkadotRuntimeParachainsParasParaLifecycle =
  | 'Onboarding'
  | 'Parathread'
  | 'Parachain'
  | 'UpgradingParathread'
  | 'DowngradingParachain'
  | 'OffboardingParathread'
  | 'OffboardingParachain';

export type PolkadotRuntimeParachainsParasParaPastCodeMeta = {
  upgradeTimes: Array<PolkadotRuntimeParachainsParasReplacementTimes>;
  lastPruned?: number | undefined;
};

export type PolkadotRuntimeParachainsParasReplacementTimes = { expectedAt: number; activatedAt: number };

export type PolkadotPrimitivesV6UpgradeGoAhead = 'Abort' | 'GoAhead';

export type PolkadotPrimitivesV6UpgradeRestriction = 'Present';

/**
 * The `Error` enum of this pallet.
 **/
export type PolkadotRuntimeParachainsParasPalletError =
  /**
   * Para is not registered in our system.
   **/
  | 'NotRegistered'
  /**
   * Para cannot be onboarded because it is already tracked by our system.
   **/
  | 'CannotOnboard'
  /**
   * Para cannot be offboarded at this time.
   **/
  | 'CannotOffboard'
  /**
   * Para cannot be upgraded to a lease holding parachain.
   **/
  | 'CannotUpgrade'
  /**
   * Para cannot be downgraded to an on-demand parachain.
   **/
  | 'CannotDowngrade'
  /**
   * The statement for PVF pre-checking is stale.
   **/
  | 'PvfCheckStatementStale'
  /**
   * The statement for PVF pre-checking is for a future session.
   **/
  | 'PvfCheckStatementFuture'
  /**
   * Claimed validator index is out of bounds.
   **/
  | 'PvfCheckValidatorIndexOutOfBounds'
  /**
   * The signature for the PVF pre-checking is invalid.
   **/
  | 'PvfCheckInvalidSignature'
  /**
   * The given validator already has cast a vote.
   **/
  | 'PvfCheckDoubleVote'
  /**
   * The given PVF does not exist at the moment of process a vote.
   **/
  | 'PvfCheckSubjectInvalid'
  /**
   * Parachain cannot currently schedule a code upgrade.
   **/
  | 'CannotUpgradeCode'
  /**
   * Invalid validation code size.
   **/
  | 'InvalidCode';

export type PolkadotRuntimeParachainsInitializerBufferedSessionChange = {
  validators: Array<PolkadotPrimitivesV6ValidatorAppPublic>;
  queued: Array<PolkadotPrimitivesV6ValidatorAppPublic>;
  sessionIndex: number;
};

export type PolkadotCorePrimitivesInboundDownwardMessage = { sentAt: number; msg: Bytes };

export type PolkadotRuntimeParachainsHrmpHrmpOpenChannelRequest = {
  confirmed: boolean;
  age: number;
  senderDeposit: bigint;
  maxMessageSize: number;
  maxCapacity: number;
  maxTotalSize: number;
};

export type PolkadotRuntimeParachainsHrmpHrmpChannel = {
  maxCapacity: number;
  maxTotalSize: number;
  maxMessageSize: number;
  msgCount: number;
  totalSize: number;
  mqcHead?: H256 | undefined;
  senderDeposit: bigint;
  recipientDeposit: bigint;
};

export type PolkadotCorePrimitivesInboundHrmpMessage = { sentAt: number; data: Bytes };

/**
 * The `Error` enum of this pallet.
 **/
export type PolkadotRuntimeParachainsHrmpPalletError =
  /**
   * The sender tried to open a channel to themselves.
   **/
  | 'OpenHrmpChannelToSelf'
  /**
   * The recipient is not a valid para.
   **/
  | 'OpenHrmpChannelInvalidRecipient'
  /**
   * The requested capacity is zero.
   **/
  | 'OpenHrmpChannelZeroCapacity'
  /**
   * The requested capacity exceeds the global limit.
   **/
  | 'OpenHrmpChannelCapacityExceedsLimit'
  /**
   * The requested maximum message size is 0.
   **/
  | 'OpenHrmpChannelZeroMessageSize'
  /**
   * The open request requested the message size that exceeds the global limit.
   **/
  | 'OpenHrmpChannelMessageSizeExceedsLimit'
  /**
   * The channel already exists
   **/
  | 'OpenHrmpChannelAlreadyExists'
  /**
   * There is already a request to open the same channel.
   **/
  | 'OpenHrmpChannelAlreadyRequested'
  /**
   * The sender already has the maximum number of allowed outbound channels.
   **/
  | 'OpenHrmpChannelLimitExceeded'
  /**
   * The channel from the sender to the origin doesn't exist.
   **/
  | 'AcceptHrmpChannelDoesntExist'
  /**
   * The channel is already confirmed.
   **/
  | 'AcceptHrmpChannelAlreadyConfirmed'
  /**
   * The recipient already has the maximum number of allowed inbound channels.
   **/
  | 'AcceptHrmpChannelLimitExceeded'
  /**
   * The origin tries to close a channel where it is neither the sender nor the recipient.
   **/
  | 'CloseHrmpChannelUnauthorized'
  /**
   * The channel to be closed doesn't exist.
   **/
  | 'CloseHrmpChannelDoesntExist'
  /**
   * The channel close request is already requested.
   **/
  | 'CloseHrmpChannelAlreadyUnderway'
  /**
   * Canceling is requested by neither the sender nor recipient of the open channel request.
   **/
  | 'CancelHrmpOpenChannelUnauthorized'
  /**
   * The open request doesn't exist.
   **/
  | 'OpenHrmpChannelDoesntExist'
  /**
   * Cannot cancel an HRMP open channel request because it is already confirmed.
   **/
  | 'OpenHrmpChannelAlreadyConfirmed'
  /**
   * The provided witness data is wrong.
   **/
  | 'WrongWitness'
  /**
   * The channel between these two chains cannot be authorized.
   **/
  | 'ChannelCreationNotAuthorized';

export type PolkadotPrimitivesV6SessionInfo = {
  activeValidatorIndices: Array<PolkadotPrimitivesV6ValidatorIndex>;
  randomSeed: FixedBytes<32>;
  disputePeriod: number;
  validators: PolkadotPrimitivesV6IndexedVec;
  discoveryKeys: Array<SpAuthorityDiscoveryAppPublic>;
  assignmentKeys: Array<PolkadotPrimitivesV6AssignmentAppPublic>;
  validatorGroups: PolkadotPrimitivesV6IndexedVecGroupIndex;
  nCores: number;
  zerothDelayTrancheWidth: number;
  relayVrfModuloSamples: number;
  nDelayTranches: number;
  noShowSlots: number;
  neededApprovals: number;
};

export type PolkadotPrimitivesV6IndexedVec = Array<PolkadotPrimitivesV6ValidatorAppPublic>;

export type PolkadotPrimitivesV6IndexedVecGroupIndex = Array<Array<PolkadotPrimitivesV6ValidatorIndex>>;

export type PolkadotPrimitivesV6DisputeState = {
  validatorsFor: BitSequence;
  validatorsAgainst: BitSequence;
  start: number;
  concludedAt?: number | undefined;
};

/**
 * The `Error` enum of this pallet.
 **/
export type PolkadotRuntimeParachainsDisputesPalletError =
  /**
   * Duplicate dispute statement sets provided.
   **/
  | 'DuplicateDisputeStatementSets'
  /**
   * Ancient dispute statement provided.
   **/
  | 'AncientDisputeStatement'
  /**
   * Validator index on statement is out of bounds for session.
   **/
  | 'ValidatorIndexOutOfBounds'
  /**
   * Invalid signature on statement.
   **/
  | 'InvalidSignature'
  /**
   * Validator vote submitted more than once to dispute.
   **/
  | 'DuplicateStatement'
  /**
   * A dispute where there are only votes on one side.
   **/
  | 'SingleSidedDispute'
  /**
   * A dispute vote from a malicious backer.
   **/
  | 'MaliciousBacker'
  /**
   * No backing votes were provides along dispute statements.
   **/
  | 'MissingBackingVotes'
  /**
   * Unconfirmed dispute statement sets provided.
   **/
  | 'UnconfirmedDispute';

export type PolkadotPrimitivesV6SlashingPendingSlashes = {
  keys: Array<[PolkadotPrimitivesV6ValidatorIndex, PolkadotPrimitivesV6ValidatorAppPublic]>;
  kind: PolkadotPrimitivesV6SlashingSlashingOffenceKind;
};

/**
 * The `Error` enum of this pallet.
 **/
export type PolkadotRuntimeParachainsDisputesSlashingPalletError =
  /**
   * The key ownership proof is invalid.
   **/
  | 'InvalidKeyOwnershipProof'
  /**
   * The session index is too old or invalid.
   **/
  | 'InvalidSessionIndex'
  /**
   * The candidate hash is invalid.
   **/
  | 'InvalidCandidateHash'
  /**
   * There is no pending slash for the given validator index and time
   * slot.
   **/
  | 'InvalidValidatorIndex'
  /**
   * The validator index does not match the validator id.
   **/
  | 'ValidatorIndexIdMismatch'
  /**
   * The given slashing report is valid but already previously reported.
   **/
  | 'DuplicateSlashingReport';

export type PalletMessageQueueBookState = {
  begin: number;
  end: number;
  count: number;
  readyNeighbours?: PalletMessageQueueNeighbours | undefined;
  messageCount: bigint;
  size: bigint;
};

export type PalletMessageQueueNeighbours = {
  prev: PolkadotRuntimeParachainsInclusionAggregateMessageOrigin;
  next: PolkadotRuntimeParachainsInclusionAggregateMessageOrigin;
};

export type PalletMessageQueuePage = {
  remaining: number;
  remainingSize: number;
  firstIndex: number;
  first: number;
  last: number;
  heap: Bytes;
};

/**
 * The `Error` enum of this pallet.
 **/
export type PalletMessageQueueError =
  /**
   * Page is not reapable because it has items remaining to be processed and is not old
   * enough.
   **/
  | 'NotReapable'
  /**
   * Page to be reaped does not exist.
   **/
  | 'NoPage'
  /**
   * The referenced message could not be found.
   **/
  | 'NoMessage'
  /**
   * The message was already processed and cannot be processed again.
   **/
  | 'AlreadyProcessed'
  /**
   * The message is queued for future execution.
   **/
  | 'Queued'
  /**
   * There is temporarily not enough weight to continue servicing messages.
   **/
  | 'InsufficientWeight'
  /**
   * This message is temporarily unprocessable.
   *
   * Such errors are expected, but not guaranteed, to resolve themselves eventually through
   * retrying.
   **/
  | 'TemporarilyUnprocessable'
  /**
   * The queue is paused and no message can be executed from it.
   *
   * This can change at any time and may resolve in the future by re-trying.
   **/
  | 'QueuePaused'
  /**
   * Another call is in progress and needs to finish before this call can happen.
   **/
  | 'RecursiveDisallowed';

export type PolkadotRuntimeParachainsAssignerOnDemandEnqueuedOrder = {
  paraId: PolkadotParachainPrimitivesPrimitivesId;
};

export type PolkadotRuntimeParachainsAssignerOnDemandCoreAffinityCount = {
  coreIdx: PolkadotPrimitivesV6CoreIndex;
  count: number;
};

/**
 * The `Error` enum of this pallet.
 **/
export type PolkadotRuntimeParachainsAssignerOnDemandPalletError =
  /**
   * The `ParaId` supplied to the `place_order` call is not a valid `ParaThread`, making the
   * call is invalid.
   **/
  | 'InvalidParaId'
  /**
   * The order queue is full, `place_order` will not continue.
   **/
  | 'QueueFull'
  /**
   * The current spot price is higher than the max amount specified in the `place_order`
   * call, making it invalid.
   **/
  | 'SpotPriceHigherThanMaxAmount';

export type PolkadotRuntimeParachainsAssignerCoretimeSchedule = {
  assignments: Array<
    [PalletBrokerCoretimeInterfaceCoreAssignment, PolkadotRuntimeParachainsAssignerCoretimePartsOf57600]
  >;
  endHint?: number | undefined;
  nextSchedule?: number | undefined;
};

export type PolkadotRuntimeParachainsAssignerCoretimeCoreDescriptor = {
  queue?: PolkadotRuntimeParachainsAssignerCoretimeQueueDescriptor | undefined;
  currentWork?: PolkadotRuntimeParachainsAssignerCoretimeWorkState | undefined;
};

export type PolkadotRuntimeParachainsAssignerCoretimeQueueDescriptor = { first: number; last: number };

export type PolkadotRuntimeParachainsAssignerCoretimeWorkState = {
  assignments: Array<
    [PalletBrokerCoretimeInterfaceCoreAssignment, PolkadotRuntimeParachainsAssignerCoretimeAssignmentState]
  >;
  endHint?: number | undefined;
  pos: number;
  step: PolkadotRuntimeParachainsAssignerCoretimePartsOf57600;
};

export type PolkadotRuntimeParachainsAssignerCoretimeAssignmentState = {
  ratio: PolkadotRuntimeParachainsAssignerCoretimePartsOf57600;
  remaining: PolkadotRuntimeParachainsAssignerCoretimePartsOf57600;
};

/**
 * The `Error` enum of this pallet.
 **/
export type PolkadotRuntimeParachainsAssignerCoretimePalletError =
  | 'AssignmentsEmpty'
  /**
   * Assignments together exceeded 57600.
   **/
  | 'OverScheduled'
  /**
   * Assignments together less than 57600
   **/
  | 'UnderScheduled'
  /**
   * assign_core is only allowed to append new assignments at the end of already existing
   * ones.
   **/
  | 'DisallowedInsert'
  /**
   * Tried to insert a schedule for the same core and block number as an existing schedule
   **/
  | 'DuplicateInsert'
  /**
   * Tried to add an unsorted set of assignments
   **/
  | 'AssignmentsNotSorted';

export type PolkadotRuntimeCommonParasRegistrarParaInfo = {
  manager: AccountId32;
  deposit: bigint;
  locked?: boolean | undefined;
};

/**
 * The `Error` enum of this pallet.
 **/
export type PolkadotRuntimeCommonParasRegistrarPalletError =
  /**
   * The ID is not registered.
   **/
  | 'NotRegistered'
  /**
   * The ID is already registered.
   **/
  | 'AlreadyRegistered'
  /**
   * The caller is not the owner of this Id.
   **/
  | 'NotOwner'
  /**
   * Invalid para code size.
   **/
  | 'CodeTooLarge'
  /**
   * Invalid para head data size.
   **/
  | 'HeadDataTooLarge'
  /**
   * Para is not a Parachain.
   **/
  | 'NotParachain'
  /**
   * Para is not a Parathread (on-demand parachain).
   **/
  | 'NotParathread'
  /**
   * Cannot deregister para
   **/
  | 'CannotDeregister'
  /**
   * Cannot schedule downgrade of lease holding parachain to on-demand parachain
   **/
  | 'CannotDowngrade'
  /**
   * Cannot schedule upgrade of on-demand parachain to lease holding parachain
   **/
  | 'CannotUpgrade'
  /**
   * Para is locked from manipulation by the manager. Must use parachain or relay chain
   * governance.
   **/
  | 'ParaLocked'
  /**
   * The ID given for registration has not been reserved.
   **/
  | 'NotReserved'
  /**
   * The validation code is invalid.
   **/
  | 'InvalidCode'
  /**
   * Cannot perform a parachain slot / lifecycle swap. Check that the state of both paras
   * are correct for the swap to work.
   **/
  | 'CannotSwap';

/**
 * The `Error` enum of this pallet.
 **/
export type PolkadotRuntimeCommonSlotsPalletError =
  /**
   * The parachain ID is not onboarding.
   **/
  | 'ParaNotOnboarding'
  /**
   * There was an error with the lease.
   **/
  | 'LeaseError';

/**
 * The `Error` enum of this pallet.
 **/
export type PolkadotRuntimeCommonAuctionsPalletError =
  /**
   * This auction is already in progress.
   **/
  | 'AuctionInProgress'
  /**
   * The lease period is in the past.
   **/
  | 'LeasePeriodInPast'
  /**
   * Para is not registered
   **/
  | 'ParaNotRegistered'
  /**
   * Not a current auction.
   **/
  | 'NotCurrentAuction'
  /**
   * Not an auction.
   **/
  | 'NotAuction'
  /**
   * Auction has already ended.
   **/
  | 'AuctionEnded'
  /**
   * The para is already leased out for part of this range.
   **/
  | 'AlreadyLeasedOut';

export type PolkadotRuntimeCommonCrowdloanFundInfo = {
  depositor: AccountId32;
  verifier?: SpRuntimeMultiSigner | undefined;
  deposit: bigint;
  raised: bigint;
  end: number;
  cap: bigint;
  lastContribution: PolkadotRuntimeCommonCrowdloanLastContribution;
  firstPeriod: number;
  lastPeriod: number;
  fundIndex: number;
};

export type PolkadotRuntimeCommonCrowdloanLastContribution =
  | { tag: 'Never' }
  | { tag: 'PreEnding'; value: number }
  | { tag: 'Ending'; value: number };

/**
 * The `Error` enum of this pallet.
 **/
export type PolkadotRuntimeCommonCrowdloanPalletError =
  /**
   * The current lease period is more than the first lease period.
   **/
  | 'FirstPeriodInPast'
  /**
   * The first lease period needs to at least be less than 3 `max_value`.
   **/
  | 'FirstPeriodTooFarInFuture'
  /**
   * Last lease period must be greater than first lease period.
   **/
  | 'LastPeriodBeforeFirstPeriod'
  /**
   * The last lease period cannot be more than 3 periods after the first period.
   **/
  | 'LastPeriodTooFarInFuture'
  /**
   * The campaign ends before the current block number. The end must be in the future.
   **/
  | 'CannotEndInPast'
  /**
   * The end date for this crowdloan is not sensible.
   **/
  | 'EndTooFarInFuture'
  /**
   * There was an overflow.
   **/
  | 'Overflow'
  /**
   * The contribution was below the minimum, `MinContribution`.
   **/
  | 'ContributionTooSmall'
  /**
   * Invalid fund index.
   **/
  | 'InvalidParaId'
  /**
   * Contributions exceed maximum amount.
   **/
  | 'CapExceeded'
  /**
   * The contribution period has already ended.
   **/
  | 'ContributionPeriodOver'
  /**
   * The origin of this call is invalid.
   **/
  | 'InvalidOrigin'
  /**
   * This crowdloan does not correspond to a parachain.
   **/
  | 'NotParachain'
  /**
   * This parachain lease is still active and retirement cannot yet begin.
   **/
  | 'LeaseActive'
  /**
   * This parachain's bid or lease is still active and withdraw cannot yet begin.
   **/
  | 'BidOrLeaseActive'
  /**
   * The crowdloan has not yet ended.
   **/
  | 'FundNotEnded'
  /**
   * There are no contributions stored in this crowdloan.
   **/
  | 'NoContributions'
  /**
   * The crowdloan is not ready to dissolve. Potentially still has a slot or in retirement
   * period.
   **/
  | 'NotReadyToDissolve'
  /**
   * Invalid signature.
   **/
  | 'InvalidSignature'
  /**
   * The provided memo is too large.
   **/
  | 'MemoTooLarge'
  /**
   * The fund is already in `NewRaise`
   **/
  | 'AlreadyInNewRaise'
  /**
   * No contributions allowed during the VRF delay
   **/
  | 'VrfDelayInProgress'
  /**
   * A lease period has not started yet, due to an offset in the starting block.
   **/
  | 'NoLeasePeriod';

/**
 * The `Error` enum of this pallet.
 **/
export type PolkadotRuntimeParachainsCoretimePalletError =
  /**
   * The paraid making the call is not the coretime brokerage system parachain.
   **/
  'NotBroker';

export type PalletXcmQueryStatus =
  | {
      tag: 'Pending';
      value: {
        responder: XcmVersionedLocation;
        maybeMatchQuerier?: XcmVersionedLocation | undefined;
        maybeNotify?: [number, number] | undefined;
        timeout: number;
      };
    }
  | { tag: 'VersionNotifier'; value: { origin: XcmVersionedLocation; isActive: boolean } }
  | { tag: 'Ready'; value: { response: XcmVersionedResponse; at: number } };

export type XcmVersionedResponse =
  | { tag: 'V2'; value: XcmV2Response }
  | { tag: 'V3'; value: XcmV3Response }
  | { tag: 'V4'; value: StagingXcmV4Response };

export type PalletXcmVersionMigrationStage =
  | { tag: 'MigrateSupportedVersion' }
  | { tag: 'MigrateVersionNotifiers' }
  | { tag: 'NotifyCurrentTargets'; value?: Bytes | undefined }
  | { tag: 'MigrateAndNotifyOldTargets' };

export type XcmVersionedAssetId =
  | { tag: 'V3'; value: XcmV3MultiassetAssetId }
  | { tag: 'V4'; value: StagingXcmV4AssetAssetId };

export type PalletXcmRemoteLockedFungibleRecord = {
  amount: bigint;
  owner: XcmVersionedLocation;
  locker: XcmVersionedLocation;
  consumers: Array<[[], bigint]>;
};

/**
 * The `Error` enum of this pallet.
 **/
export type PalletXcmError =
  /**
   * The desired destination was unreachable, generally because there is a no way of routing
   * to it.
   **/
  | 'Unreachable'
  /**
   * There was some other issue (i.e. not to do with routing) in sending the message.
   * Perhaps a lack of space for buffering the message.
   **/
  | 'SendFailure'
  /**
   * The message execution fails the filter.
   **/
  | 'Filtered'
  /**
   * The message's weight could not be determined.
   **/
  | 'UnweighableMessage'
  /**
   * The destination `Location` provided cannot be inverted.
   **/
  | 'DestinationNotInvertible'
  /**
   * The assets to be sent are empty.
   **/
  | 'Empty'
  /**
   * Could not re-anchor the assets to declare the fees for the destination chain.
   **/
  | 'CannotReanchor'
  /**
   * Too many assets have been attempted for transfer.
   **/
  | 'TooManyAssets'
  /**
   * Origin is invalid for sending.
   **/
  | 'InvalidOrigin'
  /**
   * The version of the `Versioned` value used is not able to be interpreted.
   **/
  | 'BadVersion'
  /**
   * The given location could not be used (e.g. because it cannot be expressed in the
   * desired version of XCM).
   **/
  | 'BadLocation'
  /**
   * The referenced subscription could not be found.
   **/
  | 'NoSubscription'
  /**
   * The location is invalid since it already has a subscription from us.
   **/
  | 'AlreadySubscribed'
  /**
   * Could not check-out the assets for teleportation to the destination chain.
   **/
  | 'CannotCheckOutTeleport'
  /**
   * The owner does not own (all) of the asset that they wish to do the operation on.
   **/
  | 'LowBalance'
  /**
   * The asset owner has too many locks on the asset.
   **/
  | 'TooManyLocks'
  /**
   * The given account is not an identifiable sovereign account for any location.
   **/
  | 'AccountNotSovereign'
  /**
   * The operation required fees to be paid which the initiator could not meet.
   **/
  | 'FeesNotMet'
  /**
   * A remote lock with the corresponding data could not be found.
   **/
  | 'LockNotFound'
  /**
   * The unlock operation cannot succeed because there are still consumers of the lock.
   **/
  | 'InUse'
  /**
   * Invalid non-concrete asset.
   **/
  | 'InvalidAssetNotConcrete'
  /**
   * Invalid asset, reserve chain could not be determined for it.
   **/
  | 'InvalidAssetUnknownReserve'
  /**
   * Invalid asset, do not support remote asset reserves with different fees reserves.
   **/
  | 'InvalidAssetUnsupportedReserve'
  /**
   * Too many assets with different reserve locations have been attempted for transfer.
   **/
  | 'TooManyReserves'
  /**
   * Local XCM execution incomplete.
   **/
  | 'LocalExecutionIncomplete';

/**
 * The `Error` enum of this pallet.
 **/
export type PalletBeefyError =
  /**
   * A key ownership proof provided as part of an equivocation report is invalid.
   **/
  | 'InvalidKeyOwnershipProof'
  /**
   * An equivocation proof provided as part of an equivocation report is invalid.
   **/
  | 'InvalidEquivocationProof'
  /**
   * A given equivocation report is valid but already previously reported.
   **/
  | 'DuplicateOffenceReport'
  /**
   * Submitted configuration is invalid.
   **/
  | 'InvalidConfiguration';

export type SpConsensusBeefyMmrBeefyAuthoritySet = { id: bigint; len: number; keysetCommitment: H256 };

/**
 * The `Error` enum of this pallet.
 **/
export type PolkadotRuntimeCommonParasSudoWrapperPalletError =
  /**
   * The specified parachain is not registered.
   **/
  | 'ParaDoesntExist'
  /**
   * The specified parachain is already registered.
   **/
  | 'ParaAlreadyExists'
  /**
   * A DMP message couldn't be sent because it exceeds the maximum size allowed for a
   * downward message.
   **/
  | 'ExceedsMaxMessageSize'
  /**
   * Could not schedule para cleanup.
   **/
  | 'CouldntCleanup'
  /**
   * Not a parathread (on-demand parachain).
   **/
  | 'NotParathread'
  /**
   * Not a lease holding parachain.
   **/
  | 'NotParachain'
  /**
   * Cannot upgrade on-demand parachain to lease holding parachain.
   **/
  | 'CannotUpgrade'
  /**
   * Cannot downgrade lease holding parachain to on-demand.
   **/
  | 'CannotDowngrade'
  /**
   * There are more cores than supported by the runtime.
   **/
  | 'TooManyCores';

export type PolkadotRuntimeCommonAssignedSlotsParachainTemporarySlot = {
  manager: AccountId32;
  periodBegin: number;
  periodCount: number;
  lastLease?: number | undefined;
  leaseCount: number;
};

/**
 * The `Error` enum of this pallet.
 **/
export type PolkadotRuntimeCommonAssignedSlotsPalletError =
  /**
   * The specified parachain is not registered.
   **/
  | 'ParaDoesntExist'
  /**
   * Not a parathread (on-demand parachain).
   **/
  | 'NotParathread'
  /**
   * Cannot upgrade on-demand parachain to lease holding
   * parachain.
   **/
  | 'CannotUpgrade'
  /**
   * Cannot downgrade lease holding parachain to
   * on-demand.
   **/
  | 'CannotDowngrade'
  /**
   * Permanent or Temporary slot already assigned.
   **/
  | 'SlotAlreadyAssigned'
  /**
   * Permanent or Temporary slot has not been assigned.
   **/
  | 'SlotNotAssigned'
  /**
   * An ongoing lease already exists.
   **/
  | 'OngoingLeaseExists'
  | 'MaxPermanentSlotsExceeded'
  | 'MaxTemporarySlotsExceeded';

/**
 * Error for the Sudo pallet.
 **/
export type PalletSudoError =
  /**
   * Sender must be the Sudo account.
   **/
  'RequireSudo';

export type FrameSystemExtensionsCheckNonZeroSender = {};

export type FrameSystemExtensionsCheckSpecVersion = {};

export type FrameSystemExtensionsCheckTxVersion = {};

export type FrameSystemExtensionsCheckGenesis = {};

export type FrameSystemExtensionsCheckMortality = Era;

export type FrameSystemExtensionsCheckNonce = number;

export type FrameSystemExtensionsCheckWeight = {};

export type PalletTransactionPaymentChargeTransactionPayment = bigint;

export type RococoRuntimeRuntime = {};

export type SpRuntimeBlock = { header: Header; extrinsics: Array<UncheckedExtrinsic> };

export type SpCoreOpaqueMetadata = Bytes;

export type SpRuntimeTransactionValidityTransactionValidityError =
  | { tag: 'Invalid'; value: SpRuntimeTransactionValidityInvalidTransaction }
  | { tag: 'Unknown'; value: SpRuntimeTransactionValidityUnknownTransaction };

export type SpRuntimeTransactionValidityInvalidTransaction =
  | { tag: 'Call' }
  | { tag: 'Payment' }
  | { tag: 'Future' }
  | { tag: 'Stale' }
  | { tag: 'BadProof' }
  | { tag: 'AncientBirthBlock' }
  | { tag: 'ExhaustsResources' }
  | { tag: 'Custom'; value: number }
  | { tag: 'BadMandatory' }
  | { tag: 'MandatoryValidation' }
  | { tag: 'BadSigner' };

export type SpRuntimeTransactionValidityUnknownTransaction =
  | { tag: 'CannotLookup' }
  | { tag: 'NoUnsignedValidator' }
  | { tag: 'Custom'; value: number };

export type SpInherentsInherentData = { data: Array<[FixedBytes<8>, Bytes]> };

export type SpInherentsCheckInherentsResult = { okay: boolean; fatalError: boolean; errors: SpInherentsInherentData };

export type SpRuntimeTransactionValidityTransactionSource = 'InBlock' | 'Local' | 'External';

export type SpRuntimeTransactionValidityValidTransaction = {
  priority: bigint;
  requires: Array<Bytes>;
  provides: Array<Bytes>;
  longevity: bigint;
  propagate: boolean;
};

export type PolkadotPrimitivesV6GroupRotationInfo = {
  sessionStartBlock: number;
  groupRotationFrequency: number;
  now: number;
};

export type PolkadotPrimitivesV6CoreState =
  | { tag: 'Occupied'; value: PolkadotPrimitivesV6OccupiedCore }
  | { tag: 'Scheduled'; value: PolkadotPrimitivesV6ScheduledCore }
  | { tag: 'Free' };

export type PolkadotPrimitivesV6OccupiedCore = {
  nextUpOnAvailable?: PolkadotPrimitivesV6ScheduledCore | undefined;
  occupiedSince: number;
  timeOutAt: number;
  nextUpOnTimeOut?: PolkadotPrimitivesV6ScheduledCore | undefined;
  availability: BitSequence;
  groupResponsible: PolkadotPrimitivesV6GroupIndex;
  candidateHash: PolkadotCorePrimitivesCandidateHash;
  candidateDescriptor: PolkadotPrimitivesV6CandidateDescriptor;
};

export type PolkadotPrimitivesV6ScheduledCore = {
  paraId: PolkadotParachainPrimitivesPrimitivesId;
  collator?: PolkadotPrimitivesV6CollatorAppPublic | undefined;
};

export type PolkadotPrimitivesV6OccupiedCoreAssumption = 'Included' | 'TimedOut' | 'Free';

export type PolkadotPrimitivesV6PersistedValidationData = {
  parentHead: PolkadotParachainPrimitivesPrimitivesHeadData;
  relayParentNumber: number;
  relayParentStorageRoot: H256;
  maxPovSize: number;
};

export type PolkadotPrimitivesV6CandidateEvent =
  | {
      tag: 'CandidateBacked';
      value: [
        PolkadotPrimitivesV6CandidateReceipt,
        PolkadotParachainPrimitivesPrimitivesHeadData,
        PolkadotPrimitivesV6CoreIndex,
        PolkadotPrimitivesV6GroupIndex,
      ];
    }
  | {
      tag: 'CandidateIncluded';
      value: [
        PolkadotPrimitivesV6CandidateReceipt,
        PolkadotParachainPrimitivesPrimitivesHeadData,
        PolkadotPrimitivesV6CoreIndex,
        PolkadotPrimitivesV6GroupIndex,
      ];
    }
  | {
      tag: 'CandidateTimedOut';
      value: [
        PolkadotPrimitivesV6CandidateReceipt,
        PolkadotParachainPrimitivesPrimitivesHeadData,
        PolkadotPrimitivesV6CoreIndex,
      ];
    };

export type PolkadotPrimitivesV6SlashingOpaqueKeyOwnershipProof = Bytes;

export type PolkadotPrimitivesV6AsyncBackingBackingState = {
  constraints: PolkadotPrimitivesV6AsyncBackingConstraints;
  pendingAvailability: Array<PolkadotPrimitivesV6AsyncBackingCandidatePendingAvailability>;
};

export type PolkadotPrimitivesV6AsyncBackingConstraints = {
  minRelayParentNumber: number;
  maxPovSize: number;
  maxCodeSize: number;
  umpRemaining: number;
  umpRemainingBytes: number;
  maxUmpNumPerCandidate: number;
  dmpRemainingMessages: Array<number>;
  hrmpInbound: PolkadotPrimitivesV6AsyncBackingInboundHrmpLimitations;
  hrmpChannelsOut: Array<
    [PolkadotParachainPrimitivesPrimitivesId, PolkadotPrimitivesV6AsyncBackingOutboundHrmpChannelLimitations]
  >;
  maxHrmpNumPerCandidate: number;
  requiredParent: PolkadotParachainPrimitivesPrimitivesHeadData;
  validationCodeHash: PolkadotParachainPrimitivesPrimitivesValidationCodeHash;
  upgradeRestriction?: PolkadotPrimitivesV6UpgradeRestriction | undefined;
  futureValidationCode?: [number, PolkadotParachainPrimitivesPrimitivesValidationCodeHash] | undefined;
};

export type PolkadotPrimitivesV6AsyncBackingInboundHrmpLimitations = { validWatermarks: Array<number> };

export type PolkadotPrimitivesV6AsyncBackingOutboundHrmpChannelLimitations = {
  bytesRemaining: number;
  messagesRemaining: number;
};

export type PolkadotPrimitivesV6AsyncBackingCandidatePendingAvailability = {
  candidateHash: PolkadotCorePrimitivesCandidateHash;
  descriptor: PolkadotPrimitivesV6CandidateDescriptor;
  commitments: PolkadotPrimitivesV6CandidateCommitments;
  relayParentNumber: number;
  maxPovSize: number;
};

export type SpConsensusBeefyValidatorSet = { validators: Array<SpConsensusBeefyEcdsaCryptoPublic>; id: bigint };

export type SpConsensusBeefyOpaqueKeyOwnershipProof = Bytes;

export type SpMmrPrimitivesError =
  | 'InvalidNumericOp'
  | 'Push'
  | 'GetRoot'
  | 'Commit'
  | 'GenerateProof'
  | 'Verify'
  | 'LeafNotFound'
  | 'PalletNotIncluded'
  | 'InvalidLeafIndex'
  | 'InvalidBestKnownBlock';

export type SpMmrPrimitivesEncodableOpaqueLeaf = Bytes;

export type SpMmrPrimitivesProof = { leafIndices: Array<bigint>; leafCount: bigint; items: Array<H256> };

export type SpConsensusGrandpaOpaqueKeyOwnershipProof = Bytes;

export type SpConsensusBabeBabeConfiguration = {
  slotDuration: bigint;
  epochLength: bigint;
  c: [bigint, bigint];
  authorities: Array<[SpConsensusBabeAppPublic, bigint]>;
  randomness: FixedBytes<32>;
  allowedSlots: SpConsensusBabeAllowedSlots;
};

export type SpConsensusBabeEpoch = {
  epochIndex: bigint;
  startSlot: SpConsensusSlotsSlot;
  duration: bigint;
  authorities: Array<[SpConsensusBabeAppPublic, bigint]>;
  randomness: FixedBytes<32>;
  config: SpConsensusBabeBabeEpochConfiguration;
};

export type SpConsensusBabeOpaqueKeyOwnershipProof = Bytes;

export type PalletTransactionPaymentRuntimeDispatchInfo = {
  weight: SpWeightsWeightV2Weight;
  class: FrameSupportDispatchDispatchClass;
  partialFee: bigint;
};

export type PalletTransactionPaymentFeeDetails = {
  inclusionFee?: PalletTransactionPaymentInclusionFee | undefined;
  tip: bigint;
};

export type PalletTransactionPaymentInclusionFee = { baseFee: bigint; lenFee: bigint; adjustedWeightFee: bigint };

export type RococoRuntimeRuntimeError =
  | { tag: 'System'; value: FrameSystemError }
  | { tag: 'Babe'; value: PalletBabeError }
  | { tag: 'Indices'; value: PalletIndicesError }
  | { tag: 'Balances'; value: PalletBalancesError }
  | { tag: 'Session'; value: PalletSessionError }
  | { tag: 'Grandpa'; value: PalletGrandpaError }
  | { tag: 'Treasury'; value: PalletTreasuryError }
  | { tag: 'ConvictionVoting'; value: PalletConvictionVotingError }
  | { tag: 'Referenda'; value: PalletReferendaError }
  | { tag: 'FellowshipCollective'; value: PalletRankedCollectiveError }
  | { tag: 'FellowshipReferenda'; value: PalletReferendaError }
  | { tag: 'Whitelist'; value: PalletWhitelistError }
  | { tag: 'Claims'; value: PolkadotRuntimeCommonClaimsPalletError }
  | { tag: 'Utility'; value: PalletUtilityError }
  | { tag: 'Identity'; value: PalletIdentityError }
  | { tag: 'Society'; value: PalletSocietyError }
  | { tag: 'Recovery'; value: PalletRecoveryError }
  | { tag: 'Vesting'; value: PalletVestingError }
  | { tag: 'Scheduler'; value: PalletSchedulerError }
  | { tag: 'Proxy'; value: PalletProxyError }
  | { tag: 'Multisig'; value: PalletMultisigError }
  | { tag: 'Preimage'; value: PalletPreimageError }
  | { tag: 'AssetRate'; value: PalletAssetRateError }
  | { tag: 'Bounties'; value: PalletBountiesError }
  | { tag: 'ChildBounties'; value: PalletChildBountiesError }
  | { tag: 'Nis'; value: PalletNisError }
  | { tag: 'NisCounterpartBalances'; value: PalletBalancesError }
  | { tag: 'Configuration'; value: PolkadotRuntimeParachainsConfigurationPalletError }
  | { tag: 'ParaInclusion'; value: PolkadotRuntimeParachainsInclusionPalletError }
  | { tag: 'ParaInherent'; value: PolkadotRuntimeParachainsParasInherentPalletError }
  | { tag: 'Paras'; value: PolkadotRuntimeParachainsParasPalletError }
  | { tag: 'Hrmp'; value: PolkadotRuntimeParachainsHrmpPalletError }
  | { tag: 'ParasDisputes'; value: PolkadotRuntimeParachainsDisputesPalletError }
  | { tag: 'ParasSlashing'; value: PolkadotRuntimeParachainsDisputesSlashingPalletError }
  | { tag: 'MessageQueue'; value: PalletMessageQueueError }
  | { tag: 'OnDemandAssignmentProvider'; value: PolkadotRuntimeParachainsAssignerOnDemandPalletError }
  | { tag: 'CoretimeAssignmentProvider'; value: PolkadotRuntimeParachainsAssignerCoretimePalletError }
  | { tag: 'Registrar'; value: PolkadotRuntimeCommonParasRegistrarPalletError }
  | { tag: 'Slots'; value: PolkadotRuntimeCommonSlotsPalletError }
  | { tag: 'Auctions'; value: PolkadotRuntimeCommonAuctionsPalletError }
  | { tag: 'Crowdloan'; value: PolkadotRuntimeCommonCrowdloanPalletError }
  | { tag: 'Coretime'; value: PolkadotRuntimeParachainsCoretimePalletError }
  | { tag: 'XcmPallet'; value: PalletXcmError }
  | { tag: 'Beefy'; value: PalletBeefyError }
  | { tag: 'ParasSudoWrapper'; value: PolkadotRuntimeCommonParasSudoWrapperPalletError }
  | { tag: 'AssignedSlots'; value: PolkadotRuntimeCommonAssignedSlotsPalletError }
  | { tag: 'StateTrieMigration'; value: PalletStateTrieMigrationError }
  | { tag: 'Sudo'; value: PalletSudoError };
