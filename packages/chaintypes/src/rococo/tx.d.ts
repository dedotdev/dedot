// Generated by @dedot/codegen

import type {
  GenericChainTx,
  GenericTxCall,
  ISubmittableExtrinsic,
  ISubmittableResult,
  IRuntimeTxCall,
} from '@dedot/types';
import type {
  MultiAddressLike,
  Extrinsic,
  BytesLike,
  H256,
  AccountId32Like,
  EthereumAddressLike,
  Data,
  FixedBytes,
  FixedU128,
  Perquintill,
  Perbill,
} from '@dedot/codecs';
import type {
  RococoRuntimeRuntimeCallLike,
  SpRuntimeMultiSignature,
  FrameSystemEventRecord,
  SpConsensusSlotsEquivocationProof,
  SpSessionMembershipProof,
  SpConsensusBabeDigestsNextConfigDescriptor,
  PalletBalancesAdjustmentDirection,
  RococoRuntimeSessionKeys,
  SpConsensusGrandpaEquivocationProof,
  PolkadotRuntimeCommonImplsVersionedLocatableAsset,
  XcmVersionedLocation,
  PalletConvictionVotingVoteAccountVote,
  PalletConvictionVotingConviction,
  RococoRuntimeOriginCaller,
  FrameSupportPreimagesBounded,
  FrameSupportScheduleDispatchTime,
  SpWeightsWeightV2Weight,
  PolkadotRuntimeCommonClaimsEcdsaSignature,
  PolkadotRuntimeCommonClaimsStatementKind,
  PalletIdentityLegacyIdentityInfo,
  PalletIdentityJudgement,
  PalletVestingVestingInfo,
  RococoRuntimeProxyType,
  PalletMultisigTimepoint,
  PolkadotPrimitivesV6AsyncBackingAsyncBackingParams,
  PolkadotPrimitivesV6ExecutorParams,
  PolkadotPrimitivesVstagingApprovalVotingParams,
  PolkadotPrimitivesV6InherentData,
  PolkadotParachainPrimitivesPrimitivesId,
  PolkadotParachainPrimitivesPrimitivesValidationCode,
  PolkadotParachainPrimitivesPrimitivesHeadData,
  PolkadotParachainPrimitivesPrimitivesValidationCodeHash,
  PolkadotPrimitivesV6PvfCheckStatement,
  PolkadotPrimitivesV6ValidatorAppSignature,
  PolkadotParachainPrimitivesPrimitivesHrmpChannelId,
  PolkadotPrimitivesV6SlashingDisputeProof,
  PolkadotRuntimeParachainsInclusionAggregateMessageOrigin,
  SpRuntimeMultiSigner,
  PalletBrokerCoretimeInterfaceCoreAssignment,
  PolkadotRuntimeParachainsAssignerCoretimePartsOf57600,
  XcmVersionedXcm,
  XcmVersionedAssets,
  StagingXcmV4Location,
  XcmV3WeightLimit,
  SpConsensusBeefyEquivocationProof,
  PolkadotRuntimeParachainsParasParaGenesisArgs,
  PolkadotRuntimeCommonAssignedSlotsSlotLeasePeriodStart,
  PalletStateTrieMigrationMigrationLimits,
  PalletStateTrieMigrationMigrationTask,
  PalletStateTrieMigrationProgress,
} from './types';

export type ChainSubmittableExtrinsic<T extends IRuntimeTxCall = RococoRuntimeRuntimeCallLike> = Extrinsic<
  MultiAddressLike,
  T,
  SpRuntimeMultiSignature,
  any[]
> &
  ISubmittableExtrinsic<ISubmittableResult<FrameSystemEventRecord>>;

export type TxCall = (...args: any[]) => ChainSubmittableExtrinsic;

export interface ChainTx extends GenericChainTx<TxCall> {
  /**
   * Pallet `System`'s transaction calls
   **/
  system: {
    /**
     * See [`Pallet::remark`].
     *
     * @param {BytesLike} remark
     **/
    remark: GenericTxCall<
      (remark: BytesLike) => ChainSubmittableExtrinsic<{
        pallet: 'System';
        palletCall: {
          name: 'Remark';
          params: { remark: BytesLike };
        };
      }>
    >;

    /**
     * See [`Pallet::set_heap_pages`].
     *
     * @param {bigint} pages
     **/
    setHeapPages: GenericTxCall<
      (pages: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'System';
        palletCall: {
          name: 'SetHeapPages';
          params: { pages: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::set_code`].
     *
     * @param {BytesLike} code
     **/
    setCode: GenericTxCall<
      (code: BytesLike) => ChainSubmittableExtrinsic<{
        pallet: 'System';
        palletCall: {
          name: 'SetCode';
          params: { code: BytesLike };
        };
      }>
    >;

    /**
     * See [`Pallet::set_code_without_checks`].
     *
     * @param {BytesLike} code
     **/
    setCodeWithoutChecks: GenericTxCall<
      (code: BytesLike) => ChainSubmittableExtrinsic<{
        pallet: 'System';
        palletCall: {
          name: 'SetCodeWithoutChecks';
          params: { code: BytesLike };
        };
      }>
    >;

    /**
     * See [`Pallet::set_storage`].
     *
     * @param {Array<[BytesLike, BytesLike]>} items
     **/
    setStorage: GenericTxCall<
      (items: Array<[BytesLike, BytesLike]>) => ChainSubmittableExtrinsic<{
        pallet: 'System';
        palletCall: {
          name: 'SetStorage';
          params: { items: Array<[BytesLike, BytesLike]> };
        };
      }>
    >;

    /**
     * See [`Pallet::kill_storage`].
     *
     * @param {Array<BytesLike>} keys
     **/
    killStorage: GenericTxCall<
      (keys: Array<BytesLike>) => ChainSubmittableExtrinsic<{
        pallet: 'System';
        palletCall: {
          name: 'KillStorage';
          params: { keys: Array<BytesLike> };
        };
      }>
    >;

    /**
     * See [`Pallet::kill_prefix`].
     *
     * @param {BytesLike} prefix
     * @param {number} subkeys
     **/
    killPrefix: GenericTxCall<
      (
        prefix: BytesLike,
        subkeys: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'System';
        palletCall: {
          name: 'KillPrefix';
          params: { prefix: BytesLike; subkeys: number };
        };
      }>
    >;

    /**
     * See [`Pallet::remark_with_event`].
     *
     * @param {BytesLike} remark
     **/
    remarkWithEvent: GenericTxCall<
      (remark: BytesLike) => ChainSubmittableExtrinsic<{
        pallet: 'System';
        palletCall: {
          name: 'RemarkWithEvent';
          params: { remark: BytesLike };
        };
      }>
    >;

    /**
     * See [`Pallet::authorize_upgrade`].
     *
     * @param {H256} codeHash
     **/
    authorizeUpgrade: GenericTxCall<
      (codeHash: H256) => ChainSubmittableExtrinsic<{
        pallet: 'System';
        palletCall: {
          name: 'AuthorizeUpgrade';
          params: { codeHash: H256 };
        };
      }>
    >;

    /**
     * See [`Pallet::authorize_upgrade_without_checks`].
     *
     * @param {H256} codeHash
     **/
    authorizeUpgradeWithoutChecks: GenericTxCall<
      (codeHash: H256) => ChainSubmittableExtrinsic<{
        pallet: 'System';
        palletCall: {
          name: 'AuthorizeUpgradeWithoutChecks';
          params: { codeHash: H256 };
        };
      }>
    >;

    /**
     * See [`Pallet::apply_authorized_upgrade`].
     *
     * @param {BytesLike} code
     **/
    applyAuthorizedUpgrade: GenericTxCall<
      (code: BytesLike) => ChainSubmittableExtrinsic<{
        pallet: 'System';
        palletCall: {
          name: 'ApplyAuthorizedUpgrade';
          params: { code: BytesLike };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `Babe`'s transaction calls
   **/
  babe: {
    /**
     * See [`Pallet::report_equivocation`].
     *
     * @param {SpConsensusSlotsEquivocationProof} equivocationProof
     * @param {SpSessionMembershipProof} keyOwnerProof
     **/
    reportEquivocation: GenericTxCall<
      (
        equivocationProof: SpConsensusSlotsEquivocationProof,
        keyOwnerProof: SpSessionMembershipProof,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Babe';
        palletCall: {
          name: 'ReportEquivocation';
          params: { equivocationProof: SpConsensusSlotsEquivocationProof; keyOwnerProof: SpSessionMembershipProof };
        };
      }>
    >;

    /**
     * See [`Pallet::report_equivocation_unsigned`].
     *
     * @param {SpConsensusSlotsEquivocationProof} equivocationProof
     * @param {SpSessionMembershipProof} keyOwnerProof
     **/
    reportEquivocationUnsigned: GenericTxCall<
      (
        equivocationProof: SpConsensusSlotsEquivocationProof,
        keyOwnerProof: SpSessionMembershipProof,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Babe';
        palletCall: {
          name: 'ReportEquivocationUnsigned';
          params: { equivocationProof: SpConsensusSlotsEquivocationProof; keyOwnerProof: SpSessionMembershipProof };
        };
      }>
    >;

    /**
     * See [`Pallet::plan_config_change`].
     *
     * @param {SpConsensusBabeDigestsNextConfigDescriptor} config
     **/
    planConfigChange: GenericTxCall<
      (config: SpConsensusBabeDigestsNextConfigDescriptor) => ChainSubmittableExtrinsic<{
        pallet: 'Babe';
        palletCall: {
          name: 'PlanConfigChange';
          params: { config: SpConsensusBabeDigestsNextConfigDescriptor };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `Timestamp`'s transaction calls
   **/
  timestamp: {
    /**
     * See [`Pallet::set`].
     *
     * @param {bigint} now
     **/
    set: GenericTxCall<
      (now: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'Timestamp';
        palletCall: {
          name: 'Set';
          params: { now: bigint };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `Indices`'s transaction calls
   **/
  indices: {
    /**
     * See [`Pallet::claim`].
     *
     * @param {number} index
     **/
    claim: GenericTxCall<
      (index: number) => ChainSubmittableExtrinsic<{
        pallet: 'Indices';
        palletCall: {
          name: 'Claim';
          params: { index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer`].
     *
     * @param {MultiAddressLike} new_
     * @param {number} index
     **/
    transfer: GenericTxCall<
      (
        new_: MultiAddressLike,
        index: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Indices';
        palletCall: {
          name: 'Transfer';
          params: { new: MultiAddressLike; index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::free`].
     *
     * @param {number} index
     **/
    free: GenericTxCall<
      (index: number) => ChainSubmittableExtrinsic<{
        pallet: 'Indices';
        palletCall: {
          name: 'Free';
          params: { index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::force_transfer`].
     *
     * @param {MultiAddressLike} new_
     * @param {number} index
     * @param {boolean} freeze
     **/
    forceTransfer: GenericTxCall<
      (
        new_: MultiAddressLike,
        index: number,
        freeze: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Indices';
        palletCall: {
          name: 'ForceTransfer';
          params: { new: MultiAddressLike; index: number; freeze: boolean };
        };
      }>
    >;

    /**
     * See [`Pallet::freeze`].
     *
     * @param {number} index
     **/
    freeze: GenericTxCall<
      (index: number) => ChainSubmittableExtrinsic<{
        pallet: 'Indices';
        palletCall: {
          name: 'Freeze';
          params: { index: number };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `Balances`'s transaction calls
   **/
  balances: {
    /**
     * See [`Pallet::transfer_allow_death`].
     *
     * @param {MultiAddressLike} dest
     * @param {bigint} value
     **/
    transferAllowDeath: GenericTxCall<
      (
        dest: MultiAddressLike,
        value: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Balances';
        palletCall: {
          name: 'TransferAllowDeath';
          params: { dest: MultiAddressLike; value: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::force_transfer`].
     *
     * @param {MultiAddressLike} source
     * @param {MultiAddressLike} dest
     * @param {bigint} value
     **/
    forceTransfer: GenericTxCall<
      (
        source: MultiAddressLike,
        dest: MultiAddressLike,
        value: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Balances';
        palletCall: {
          name: 'ForceTransfer';
          params: { source: MultiAddressLike; dest: MultiAddressLike; value: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer_keep_alive`].
     *
     * @param {MultiAddressLike} dest
     * @param {bigint} value
     **/
    transferKeepAlive: GenericTxCall<
      (
        dest: MultiAddressLike,
        value: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Balances';
        palletCall: {
          name: 'TransferKeepAlive';
          params: { dest: MultiAddressLike; value: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer_all`].
     *
     * @param {MultiAddressLike} dest
     * @param {boolean} keepAlive
     **/
    transferAll: GenericTxCall<
      (
        dest: MultiAddressLike,
        keepAlive: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Balances';
        palletCall: {
          name: 'TransferAll';
          params: { dest: MultiAddressLike; keepAlive: boolean };
        };
      }>
    >;

    /**
     * See [`Pallet::force_unreserve`].
     *
     * @param {MultiAddressLike} who
     * @param {bigint} amount
     **/
    forceUnreserve: GenericTxCall<
      (
        who: MultiAddressLike,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Balances';
        palletCall: {
          name: 'ForceUnreserve';
          params: { who: MultiAddressLike; amount: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::upgrade_accounts`].
     *
     * @param {Array<AccountId32Like>} who
     **/
    upgradeAccounts: GenericTxCall<
      (who: Array<AccountId32Like>) => ChainSubmittableExtrinsic<{
        pallet: 'Balances';
        palletCall: {
          name: 'UpgradeAccounts';
          params: { who: Array<AccountId32Like> };
        };
      }>
    >;

    /**
     * See [`Pallet::force_set_balance`].
     *
     * @param {MultiAddressLike} who
     * @param {bigint} newFree
     **/
    forceSetBalance: GenericTxCall<
      (
        who: MultiAddressLike,
        newFree: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Balances';
        palletCall: {
          name: 'ForceSetBalance';
          params: { who: MultiAddressLike; newFree: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::force_adjust_total_issuance`].
     *
     * @param {PalletBalancesAdjustmentDirection} direction
     * @param {bigint} delta
     **/
    forceAdjustTotalIssuance: GenericTxCall<
      (
        direction: PalletBalancesAdjustmentDirection,
        delta: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Balances';
        palletCall: {
          name: 'ForceAdjustTotalIssuance';
          params: { direction: PalletBalancesAdjustmentDirection; delta: bigint };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `Session`'s transaction calls
   **/
  session: {
    /**
     * See [`Pallet::set_keys`].
     *
     * @param {RococoRuntimeSessionKeys} keys
     * @param {BytesLike} proof
     **/
    setKeys: GenericTxCall<
      (
        keys: RococoRuntimeSessionKeys,
        proof: BytesLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Session';
        palletCall: {
          name: 'SetKeys';
          params: { keys: RococoRuntimeSessionKeys; proof: BytesLike };
        };
      }>
    >;

    /**
     * See [`Pallet::purge_keys`].
     *
     **/
    purgeKeys: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'Session';
        palletCall: {
          name: 'PurgeKeys';
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `Grandpa`'s transaction calls
   **/
  grandpa: {
    /**
     * See [`Pallet::report_equivocation`].
     *
     * @param {SpConsensusGrandpaEquivocationProof} equivocationProof
     * @param {SpSessionMembershipProof} keyOwnerProof
     **/
    reportEquivocation: GenericTxCall<
      (
        equivocationProof: SpConsensusGrandpaEquivocationProof,
        keyOwnerProof: SpSessionMembershipProof,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Grandpa';
        palletCall: {
          name: 'ReportEquivocation';
          params: { equivocationProof: SpConsensusGrandpaEquivocationProof; keyOwnerProof: SpSessionMembershipProof };
        };
      }>
    >;

    /**
     * See [`Pallet::report_equivocation_unsigned`].
     *
     * @param {SpConsensusGrandpaEquivocationProof} equivocationProof
     * @param {SpSessionMembershipProof} keyOwnerProof
     **/
    reportEquivocationUnsigned: GenericTxCall<
      (
        equivocationProof: SpConsensusGrandpaEquivocationProof,
        keyOwnerProof: SpSessionMembershipProof,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Grandpa';
        palletCall: {
          name: 'ReportEquivocationUnsigned';
          params: { equivocationProof: SpConsensusGrandpaEquivocationProof; keyOwnerProof: SpSessionMembershipProof };
        };
      }>
    >;

    /**
     * See [`Pallet::note_stalled`].
     *
     * @param {number} delay
     * @param {number} bestFinalizedBlockNumber
     **/
    noteStalled: GenericTxCall<
      (
        delay: number,
        bestFinalizedBlockNumber: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Grandpa';
        palletCall: {
          name: 'NoteStalled';
          params: { delay: number; bestFinalizedBlockNumber: number };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `Treasury`'s transaction calls
   **/
  treasury: {
    /**
     * See [`Pallet::propose_spend`].
     *
     * @param {bigint} value
     * @param {MultiAddressLike} beneficiary
     **/
    proposeSpend: GenericTxCall<
      (
        value: bigint,
        beneficiary: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Treasury';
        palletCall: {
          name: 'ProposeSpend';
          params: { value: bigint; beneficiary: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::reject_proposal`].
     *
     * @param {number} proposalId
     **/
    rejectProposal: GenericTxCall<
      (proposalId: number) => ChainSubmittableExtrinsic<{
        pallet: 'Treasury';
        palletCall: {
          name: 'RejectProposal';
          params: { proposalId: number };
        };
      }>
    >;

    /**
     * See [`Pallet::approve_proposal`].
     *
     * @param {number} proposalId
     **/
    approveProposal: GenericTxCall<
      (proposalId: number) => ChainSubmittableExtrinsic<{
        pallet: 'Treasury';
        palletCall: {
          name: 'ApproveProposal';
          params: { proposalId: number };
        };
      }>
    >;

    /**
     * See [`Pallet::spend_local`].
     *
     * @param {bigint} amount
     * @param {MultiAddressLike} beneficiary
     **/
    spendLocal: GenericTxCall<
      (
        amount: bigint,
        beneficiary: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Treasury';
        palletCall: {
          name: 'SpendLocal';
          params: { amount: bigint; beneficiary: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_approval`].
     *
     * @param {number} proposalId
     **/
    removeApproval: GenericTxCall<
      (proposalId: number) => ChainSubmittableExtrinsic<{
        pallet: 'Treasury';
        palletCall: {
          name: 'RemoveApproval';
          params: { proposalId: number };
        };
      }>
    >;

    /**
     * See [`Pallet::spend`].
     *
     * @param {PolkadotRuntimeCommonImplsVersionedLocatableAsset} assetKind
     * @param {bigint} amount
     * @param {XcmVersionedLocation} beneficiary
     * @param {number | undefined} validFrom
     **/
    spend: GenericTxCall<
      (
        assetKind: PolkadotRuntimeCommonImplsVersionedLocatableAsset,
        amount: bigint,
        beneficiary: XcmVersionedLocation,
        validFrom: number | undefined,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Treasury';
        palletCall: {
          name: 'Spend';
          params: {
            assetKind: PolkadotRuntimeCommonImplsVersionedLocatableAsset;
            amount: bigint;
            beneficiary: XcmVersionedLocation;
            validFrom: number | undefined;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::payout`].
     *
     * @param {number} index
     **/
    payout: GenericTxCall<
      (index: number) => ChainSubmittableExtrinsic<{
        pallet: 'Treasury';
        palletCall: {
          name: 'Payout';
          params: { index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::check_status`].
     *
     * @param {number} index
     **/
    checkStatus: GenericTxCall<
      (index: number) => ChainSubmittableExtrinsic<{
        pallet: 'Treasury';
        palletCall: {
          name: 'CheckStatus';
          params: { index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::void_spend`].
     *
     * @param {number} index
     **/
    voidSpend: GenericTxCall<
      (index: number) => ChainSubmittableExtrinsic<{
        pallet: 'Treasury';
        palletCall: {
          name: 'VoidSpend';
          params: { index: number };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `ConvictionVoting`'s transaction calls
   **/
  convictionVoting: {
    /**
     * See [`Pallet::vote`].
     *
     * @param {number} pollIndex
     * @param {PalletConvictionVotingVoteAccountVote} vote
     **/
    vote: GenericTxCall<
      (
        pollIndex: number,
        vote: PalletConvictionVotingVoteAccountVote,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ConvictionVoting';
        palletCall: {
          name: 'Vote';
          params: { pollIndex: number; vote: PalletConvictionVotingVoteAccountVote };
        };
      }>
    >;

    /**
     * See [`Pallet::delegate`].
     *
     * @param {number} class_
     * @param {MultiAddressLike} to
     * @param {PalletConvictionVotingConviction} conviction
     * @param {bigint} balance
     **/
    delegate: GenericTxCall<
      (
        class_: number,
        to: MultiAddressLike,
        conviction: PalletConvictionVotingConviction,
        balance: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ConvictionVoting';
        palletCall: {
          name: 'Delegate';
          params: {
            class: number;
            to: MultiAddressLike;
            conviction: PalletConvictionVotingConviction;
            balance: bigint;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::undelegate`].
     *
     * @param {number} class_
     **/
    undelegate: GenericTxCall<
      (class_: number) => ChainSubmittableExtrinsic<{
        pallet: 'ConvictionVoting';
        palletCall: {
          name: 'Undelegate';
          params: { class: number };
        };
      }>
    >;

    /**
     * See [`Pallet::unlock`].
     *
     * @param {number} class_
     * @param {MultiAddressLike} target
     **/
    unlock: GenericTxCall<
      (
        class_: number,
        target: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ConvictionVoting';
        palletCall: {
          name: 'Unlock';
          params: { class: number; target: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_vote`].
     *
     * @param {number | undefined} class_
     * @param {number} index
     **/
    removeVote: GenericTxCall<
      (
        class_: number | undefined,
        index: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ConvictionVoting';
        palletCall: {
          name: 'RemoveVote';
          params: { class: number | undefined; index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_other_vote`].
     *
     * @param {MultiAddressLike} target
     * @param {number} class_
     * @param {number} index
     **/
    removeOtherVote: GenericTxCall<
      (
        target: MultiAddressLike,
        class_: number,
        index: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ConvictionVoting';
        palletCall: {
          name: 'RemoveOtherVote';
          params: { target: MultiAddressLike; class: number; index: number };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `Referenda`'s transaction calls
   **/
  referenda: {
    /**
     * See [`Pallet::submit`].
     *
     * @param {RococoRuntimeOriginCaller} proposalOrigin
     * @param {FrameSupportPreimagesBounded} proposal
     * @param {FrameSupportScheduleDispatchTime} enactmentMoment
     **/
    submit: GenericTxCall<
      (
        proposalOrigin: RococoRuntimeOriginCaller,
        proposal: FrameSupportPreimagesBounded,
        enactmentMoment: FrameSupportScheduleDispatchTime,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Referenda';
        palletCall: {
          name: 'Submit';
          params: {
            proposalOrigin: RococoRuntimeOriginCaller;
            proposal: FrameSupportPreimagesBounded;
            enactmentMoment: FrameSupportScheduleDispatchTime;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::place_decision_deposit`].
     *
     * @param {number} index
     **/
    placeDecisionDeposit: GenericTxCall<
      (index: number) => ChainSubmittableExtrinsic<{
        pallet: 'Referenda';
        palletCall: {
          name: 'PlaceDecisionDeposit';
          params: { index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::refund_decision_deposit`].
     *
     * @param {number} index
     **/
    refundDecisionDeposit: GenericTxCall<
      (index: number) => ChainSubmittableExtrinsic<{
        pallet: 'Referenda';
        palletCall: {
          name: 'RefundDecisionDeposit';
          params: { index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::cancel`].
     *
     * @param {number} index
     **/
    cancel: GenericTxCall<
      (index: number) => ChainSubmittableExtrinsic<{
        pallet: 'Referenda';
        palletCall: {
          name: 'Cancel';
          params: { index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::kill`].
     *
     * @param {number} index
     **/
    kill: GenericTxCall<
      (index: number) => ChainSubmittableExtrinsic<{
        pallet: 'Referenda';
        palletCall: {
          name: 'Kill';
          params: { index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::nudge_referendum`].
     *
     * @param {number} index
     **/
    nudgeReferendum: GenericTxCall<
      (index: number) => ChainSubmittableExtrinsic<{
        pallet: 'Referenda';
        palletCall: {
          name: 'NudgeReferendum';
          params: { index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::one_fewer_deciding`].
     *
     * @param {number} track
     **/
    oneFewerDeciding: GenericTxCall<
      (track: number) => ChainSubmittableExtrinsic<{
        pallet: 'Referenda';
        palletCall: {
          name: 'OneFewerDeciding';
          params: { track: number };
        };
      }>
    >;

    /**
     * See [`Pallet::refund_submission_deposit`].
     *
     * @param {number} index
     **/
    refundSubmissionDeposit: GenericTxCall<
      (index: number) => ChainSubmittableExtrinsic<{
        pallet: 'Referenda';
        palletCall: {
          name: 'RefundSubmissionDeposit';
          params: { index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_metadata`].
     *
     * @param {number} index
     * @param {H256 | undefined} maybeHash
     **/
    setMetadata: GenericTxCall<
      (
        index: number,
        maybeHash: H256 | undefined,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Referenda';
        palletCall: {
          name: 'SetMetadata';
          params: { index: number; maybeHash: H256 | undefined };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `FellowshipCollective`'s transaction calls
   **/
  fellowshipCollective: {
    /**
     * See [`Pallet::add_member`].
     *
     * @param {MultiAddressLike} who
     **/
    addMember: GenericTxCall<
      (who: MultiAddressLike) => ChainSubmittableExtrinsic<{
        pallet: 'FellowshipCollective';
        palletCall: {
          name: 'AddMember';
          params: { who: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::promote_member`].
     *
     * @param {MultiAddressLike} who
     **/
    promoteMember: GenericTxCall<
      (who: MultiAddressLike) => ChainSubmittableExtrinsic<{
        pallet: 'FellowshipCollective';
        palletCall: {
          name: 'PromoteMember';
          params: { who: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::demote_member`].
     *
     * @param {MultiAddressLike} who
     **/
    demoteMember: GenericTxCall<
      (who: MultiAddressLike) => ChainSubmittableExtrinsic<{
        pallet: 'FellowshipCollective';
        palletCall: {
          name: 'DemoteMember';
          params: { who: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_member`].
     *
     * @param {MultiAddressLike} who
     * @param {number} minRank
     **/
    removeMember: GenericTxCall<
      (
        who: MultiAddressLike,
        minRank: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'FellowshipCollective';
        palletCall: {
          name: 'RemoveMember';
          params: { who: MultiAddressLike; minRank: number };
        };
      }>
    >;

    /**
     * See [`Pallet::vote`].
     *
     * @param {number} poll
     * @param {boolean} aye
     **/
    vote: GenericTxCall<
      (
        poll: number,
        aye: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'FellowshipCollective';
        palletCall: {
          name: 'Vote';
          params: { poll: number; aye: boolean };
        };
      }>
    >;

    /**
     * See [`Pallet::cleanup_poll`].
     *
     * @param {number} pollIndex
     * @param {number} max
     **/
    cleanupPoll: GenericTxCall<
      (
        pollIndex: number,
        max: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'FellowshipCollective';
        palletCall: {
          name: 'CleanupPoll';
          params: { pollIndex: number; max: number };
        };
      }>
    >;

    /**
     * See [`Pallet::exchange_member`].
     *
     * @param {MultiAddressLike} who
     * @param {MultiAddressLike} newWho
     **/
    exchangeMember: GenericTxCall<
      (
        who: MultiAddressLike,
        newWho: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'FellowshipCollective';
        palletCall: {
          name: 'ExchangeMember';
          params: { who: MultiAddressLike; newWho: MultiAddressLike };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `FellowshipReferenda`'s transaction calls
   **/
  fellowshipReferenda: {
    /**
     * See [`Pallet::submit`].
     *
     * @param {RococoRuntimeOriginCaller} proposalOrigin
     * @param {FrameSupportPreimagesBounded} proposal
     * @param {FrameSupportScheduleDispatchTime} enactmentMoment
     **/
    submit: GenericTxCall<
      (
        proposalOrigin: RococoRuntimeOriginCaller,
        proposal: FrameSupportPreimagesBounded,
        enactmentMoment: FrameSupportScheduleDispatchTime,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'FellowshipReferenda';
        palletCall: {
          name: 'Submit';
          params: {
            proposalOrigin: RococoRuntimeOriginCaller;
            proposal: FrameSupportPreimagesBounded;
            enactmentMoment: FrameSupportScheduleDispatchTime;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::place_decision_deposit`].
     *
     * @param {number} index
     **/
    placeDecisionDeposit: GenericTxCall<
      (index: number) => ChainSubmittableExtrinsic<{
        pallet: 'FellowshipReferenda';
        palletCall: {
          name: 'PlaceDecisionDeposit';
          params: { index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::refund_decision_deposit`].
     *
     * @param {number} index
     **/
    refundDecisionDeposit: GenericTxCall<
      (index: number) => ChainSubmittableExtrinsic<{
        pallet: 'FellowshipReferenda';
        palletCall: {
          name: 'RefundDecisionDeposit';
          params: { index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::cancel`].
     *
     * @param {number} index
     **/
    cancel: GenericTxCall<
      (index: number) => ChainSubmittableExtrinsic<{
        pallet: 'FellowshipReferenda';
        palletCall: {
          name: 'Cancel';
          params: { index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::kill`].
     *
     * @param {number} index
     **/
    kill: GenericTxCall<
      (index: number) => ChainSubmittableExtrinsic<{
        pallet: 'FellowshipReferenda';
        palletCall: {
          name: 'Kill';
          params: { index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::nudge_referendum`].
     *
     * @param {number} index
     **/
    nudgeReferendum: GenericTxCall<
      (index: number) => ChainSubmittableExtrinsic<{
        pallet: 'FellowshipReferenda';
        palletCall: {
          name: 'NudgeReferendum';
          params: { index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::one_fewer_deciding`].
     *
     * @param {number} track
     **/
    oneFewerDeciding: GenericTxCall<
      (track: number) => ChainSubmittableExtrinsic<{
        pallet: 'FellowshipReferenda';
        palletCall: {
          name: 'OneFewerDeciding';
          params: { track: number };
        };
      }>
    >;

    /**
     * See [`Pallet::refund_submission_deposit`].
     *
     * @param {number} index
     **/
    refundSubmissionDeposit: GenericTxCall<
      (index: number) => ChainSubmittableExtrinsic<{
        pallet: 'FellowshipReferenda';
        palletCall: {
          name: 'RefundSubmissionDeposit';
          params: { index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_metadata`].
     *
     * @param {number} index
     * @param {H256 | undefined} maybeHash
     **/
    setMetadata: GenericTxCall<
      (
        index: number,
        maybeHash: H256 | undefined,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'FellowshipReferenda';
        palletCall: {
          name: 'SetMetadata';
          params: { index: number; maybeHash: H256 | undefined };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `Whitelist`'s transaction calls
   **/
  whitelist: {
    /**
     * See [`Pallet::whitelist_call`].
     *
     * @param {H256} callHash
     **/
    whitelistCall: GenericTxCall<
      (callHash: H256) => ChainSubmittableExtrinsic<{
        pallet: 'Whitelist';
        palletCall: {
          name: 'WhitelistCall';
          params: { callHash: H256 };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_whitelisted_call`].
     *
     * @param {H256} callHash
     **/
    removeWhitelistedCall: GenericTxCall<
      (callHash: H256) => ChainSubmittableExtrinsic<{
        pallet: 'Whitelist';
        palletCall: {
          name: 'RemoveWhitelistedCall';
          params: { callHash: H256 };
        };
      }>
    >;

    /**
     * See [`Pallet::dispatch_whitelisted_call`].
     *
     * @param {H256} callHash
     * @param {number} callEncodedLen
     * @param {SpWeightsWeightV2Weight} callWeightWitness
     **/
    dispatchWhitelistedCall: GenericTxCall<
      (
        callHash: H256,
        callEncodedLen: number,
        callWeightWitness: SpWeightsWeightV2Weight,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Whitelist';
        palletCall: {
          name: 'DispatchWhitelistedCall';
          params: { callHash: H256; callEncodedLen: number; callWeightWitness: SpWeightsWeightV2Weight };
        };
      }>
    >;

    /**
     * See [`Pallet::dispatch_whitelisted_call_with_preimage`].
     *
     * @param {RococoRuntimeRuntimeCallLike} call
     **/
    dispatchWhitelistedCallWithPreimage: GenericTxCall<
      (call: RococoRuntimeRuntimeCallLike) => ChainSubmittableExtrinsic<{
        pallet: 'Whitelist';
        palletCall: {
          name: 'DispatchWhitelistedCallWithPreimage';
          params: { call: RococoRuntimeRuntimeCallLike };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `Claims`'s transaction calls
   **/
  claims: {
    /**
     * See [`Pallet::claim`].
     *
     * @param {AccountId32Like} dest
     * @param {PolkadotRuntimeCommonClaimsEcdsaSignature} ethereumSignature
     **/
    claim: GenericTxCall<
      (
        dest: AccountId32Like,
        ethereumSignature: PolkadotRuntimeCommonClaimsEcdsaSignature,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Claims';
        palletCall: {
          name: 'Claim';
          params: { dest: AccountId32Like; ethereumSignature: PolkadotRuntimeCommonClaimsEcdsaSignature };
        };
      }>
    >;

    /**
     * See [`Pallet::mint_claim`].
     *
     * @param {EthereumAddressLike} who
     * @param {bigint} value
     * @param {[bigint, bigint, number] | undefined} vestingSchedule
     * @param {PolkadotRuntimeCommonClaimsStatementKind | undefined} statement
     **/
    mintClaim: GenericTxCall<
      (
        who: EthereumAddressLike,
        value: bigint,
        vestingSchedule: [bigint, bigint, number] | undefined,
        statement: PolkadotRuntimeCommonClaimsStatementKind | undefined,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Claims';
        palletCall: {
          name: 'MintClaim';
          params: {
            who: EthereumAddressLike;
            value: bigint;
            vestingSchedule: [bigint, bigint, number] | undefined;
            statement: PolkadotRuntimeCommonClaimsStatementKind | undefined;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::claim_attest`].
     *
     * @param {AccountId32Like} dest
     * @param {PolkadotRuntimeCommonClaimsEcdsaSignature} ethereumSignature
     * @param {BytesLike} statement
     **/
    claimAttest: GenericTxCall<
      (
        dest: AccountId32Like,
        ethereumSignature: PolkadotRuntimeCommonClaimsEcdsaSignature,
        statement: BytesLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Claims';
        palletCall: {
          name: 'ClaimAttest';
          params: {
            dest: AccountId32Like;
            ethereumSignature: PolkadotRuntimeCommonClaimsEcdsaSignature;
            statement: BytesLike;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::attest`].
     *
     * @param {BytesLike} statement
     **/
    attest: GenericTxCall<
      (statement: BytesLike) => ChainSubmittableExtrinsic<{
        pallet: 'Claims';
        palletCall: {
          name: 'Attest';
          params: { statement: BytesLike };
        };
      }>
    >;

    /**
     * See [`Pallet::move_claim`].
     *
     * @param {EthereumAddressLike} old
     * @param {EthereumAddressLike} new_
     * @param {AccountId32Like | undefined} maybePreclaim
     **/
    moveClaim: GenericTxCall<
      (
        old: EthereumAddressLike,
        new_: EthereumAddressLike,
        maybePreclaim: AccountId32Like | undefined,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Claims';
        palletCall: {
          name: 'MoveClaim';
          params: { old: EthereumAddressLike; new: EthereumAddressLike; maybePreclaim: AccountId32Like | undefined };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `Utility`'s transaction calls
   **/
  utility: {
    /**
     * See [`Pallet::batch`].
     *
     * @param {Array<RococoRuntimeRuntimeCallLike>} calls
     **/
    batch: GenericTxCall<
      (calls: Array<RococoRuntimeRuntimeCallLike>) => ChainSubmittableExtrinsic<{
        pallet: 'Utility';
        palletCall: {
          name: 'Batch';
          params: { calls: Array<RococoRuntimeRuntimeCallLike> };
        };
      }>
    >;

    /**
     * See [`Pallet::as_derivative`].
     *
     * @param {number} index
     * @param {RococoRuntimeRuntimeCallLike} call
     **/
    asDerivative: GenericTxCall<
      (
        index: number,
        call: RococoRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Utility';
        palletCall: {
          name: 'AsDerivative';
          params: { index: number; call: RococoRuntimeRuntimeCallLike };
        };
      }>
    >;

    /**
     * See [`Pallet::batch_all`].
     *
     * @param {Array<RococoRuntimeRuntimeCallLike>} calls
     **/
    batchAll: GenericTxCall<
      (calls: Array<RococoRuntimeRuntimeCallLike>) => ChainSubmittableExtrinsic<{
        pallet: 'Utility';
        palletCall: {
          name: 'BatchAll';
          params: { calls: Array<RococoRuntimeRuntimeCallLike> };
        };
      }>
    >;

    /**
     * See [`Pallet::dispatch_as`].
     *
     * @param {RococoRuntimeOriginCaller} asOrigin
     * @param {RococoRuntimeRuntimeCallLike} call
     **/
    dispatchAs: GenericTxCall<
      (
        asOrigin: RococoRuntimeOriginCaller,
        call: RococoRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Utility';
        palletCall: {
          name: 'DispatchAs';
          params: { asOrigin: RococoRuntimeOriginCaller; call: RococoRuntimeRuntimeCallLike };
        };
      }>
    >;

    /**
     * See [`Pallet::force_batch`].
     *
     * @param {Array<RococoRuntimeRuntimeCallLike>} calls
     **/
    forceBatch: GenericTxCall<
      (calls: Array<RococoRuntimeRuntimeCallLike>) => ChainSubmittableExtrinsic<{
        pallet: 'Utility';
        palletCall: {
          name: 'ForceBatch';
          params: { calls: Array<RococoRuntimeRuntimeCallLike> };
        };
      }>
    >;

    /**
     * See [`Pallet::with_weight`].
     *
     * @param {RococoRuntimeRuntimeCallLike} call
     * @param {SpWeightsWeightV2Weight} weight
     **/
    withWeight: GenericTxCall<
      (
        call: RococoRuntimeRuntimeCallLike,
        weight: SpWeightsWeightV2Weight,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Utility';
        palletCall: {
          name: 'WithWeight';
          params: { call: RococoRuntimeRuntimeCallLike; weight: SpWeightsWeightV2Weight };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `Identity`'s transaction calls
   **/
  identity: {
    /**
     * See [`Pallet::add_registrar`].
     *
     * @param {MultiAddressLike} account
     **/
    addRegistrar: GenericTxCall<
      (account: MultiAddressLike) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'AddRegistrar';
          params: { account: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::set_identity`].
     *
     * @param {PalletIdentityLegacyIdentityInfo} info
     **/
    setIdentity: GenericTxCall<
      (info: PalletIdentityLegacyIdentityInfo) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'SetIdentity';
          params: { info: PalletIdentityLegacyIdentityInfo };
        };
      }>
    >;

    /**
     * See [`Pallet::set_subs`].
     *
     * @param {Array<[AccountId32Like, Data]>} subs
     **/
    setSubs: GenericTxCall<
      (subs: Array<[AccountId32Like, Data]>) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'SetSubs';
          params: { subs: Array<[AccountId32Like, Data]> };
        };
      }>
    >;

    /**
     * See [`Pallet::clear_identity`].
     *
     **/
    clearIdentity: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'ClearIdentity';
        };
      }>
    >;

    /**
     * See [`Pallet::request_judgement`].
     *
     * @param {number} regIndex
     * @param {bigint} maxFee
     **/
    requestJudgement: GenericTxCall<
      (
        regIndex: number,
        maxFee: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'RequestJudgement';
          params: { regIndex: number; maxFee: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::cancel_request`].
     *
     * @param {number} regIndex
     **/
    cancelRequest: GenericTxCall<
      (regIndex: number) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'CancelRequest';
          params: { regIndex: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_fee`].
     *
     * @param {number} index
     * @param {bigint} fee
     **/
    setFee: GenericTxCall<
      (
        index: number,
        fee: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'SetFee';
          params: { index: number; fee: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::set_account_id`].
     *
     * @param {number} index
     * @param {MultiAddressLike} new_
     **/
    setAccountId: GenericTxCall<
      (
        index: number,
        new_: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'SetAccountId';
          params: { index: number; new: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::set_fields`].
     *
     * @param {number} index
     * @param {bigint} fields
     **/
    setFields: GenericTxCall<
      (
        index: number,
        fields: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'SetFields';
          params: { index: number; fields: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::provide_judgement`].
     *
     * @param {number} regIndex
     * @param {MultiAddressLike} target
     * @param {PalletIdentityJudgement} judgement
     * @param {H256} identity
     **/
    provideJudgement: GenericTxCall<
      (
        regIndex: number,
        target: MultiAddressLike,
        judgement: PalletIdentityJudgement,
        identity: H256,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'ProvideJudgement';
          params: { regIndex: number; target: MultiAddressLike; judgement: PalletIdentityJudgement; identity: H256 };
        };
      }>
    >;

    /**
     * See [`Pallet::kill_identity`].
     *
     * @param {MultiAddressLike} target
     **/
    killIdentity: GenericTxCall<
      (target: MultiAddressLike) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'KillIdentity';
          params: { target: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::add_sub`].
     *
     * @param {MultiAddressLike} sub
     * @param {Data} data
     **/
    addSub: GenericTxCall<
      (
        sub: MultiAddressLike,
        data: Data,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'AddSub';
          params: { sub: MultiAddressLike; data: Data };
        };
      }>
    >;

    /**
     * See [`Pallet::rename_sub`].
     *
     * @param {MultiAddressLike} sub
     * @param {Data} data
     **/
    renameSub: GenericTxCall<
      (
        sub: MultiAddressLike,
        data: Data,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'RenameSub';
          params: { sub: MultiAddressLike; data: Data };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_sub`].
     *
     * @param {MultiAddressLike} sub
     **/
    removeSub: GenericTxCall<
      (sub: MultiAddressLike) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'RemoveSub';
          params: { sub: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::quit_sub`].
     *
     **/
    quitSub: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'QuitSub';
        };
      }>
    >;

    /**
     * See [`Pallet::add_username_authority`].
     *
     * @param {MultiAddressLike} authority
     * @param {BytesLike} suffix
     * @param {number} allocation
     **/
    addUsernameAuthority: GenericTxCall<
      (
        authority: MultiAddressLike,
        suffix: BytesLike,
        allocation: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'AddUsernameAuthority';
          params: { authority: MultiAddressLike; suffix: BytesLike; allocation: number };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_username_authority`].
     *
     * @param {MultiAddressLike} authority
     **/
    removeUsernameAuthority: GenericTxCall<
      (authority: MultiAddressLike) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'RemoveUsernameAuthority';
          params: { authority: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::set_username_for`].
     *
     * @param {MultiAddressLike} who
     * @param {BytesLike} username
     * @param {SpRuntimeMultiSignature | undefined} signature
     **/
    setUsernameFor: GenericTxCall<
      (
        who: MultiAddressLike,
        username: BytesLike,
        signature: SpRuntimeMultiSignature | undefined,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'SetUsernameFor';
          params: { who: MultiAddressLike; username: BytesLike; signature: SpRuntimeMultiSignature | undefined };
        };
      }>
    >;

    /**
     * See [`Pallet::accept_username`].
     *
     * @param {BytesLike} username
     **/
    acceptUsername: GenericTxCall<
      (username: BytesLike) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'AcceptUsername';
          params: { username: BytesLike };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_expired_approval`].
     *
     * @param {BytesLike} username
     **/
    removeExpiredApproval: GenericTxCall<
      (username: BytesLike) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'RemoveExpiredApproval';
          params: { username: BytesLike };
        };
      }>
    >;

    /**
     * See [`Pallet::set_primary_username`].
     *
     * @param {BytesLike} username
     **/
    setPrimaryUsername: GenericTxCall<
      (username: BytesLike) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'SetPrimaryUsername';
          params: { username: BytesLike };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_dangling_username`].
     *
     * @param {BytesLike} username
     **/
    removeDanglingUsername: GenericTxCall<
      (username: BytesLike) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'RemoveDanglingUsername';
          params: { username: BytesLike };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `Society`'s transaction calls
   **/
  society: {
    /**
     * See [`Pallet::bid`].
     *
     * @param {bigint} value
     **/
    bid: GenericTxCall<
      (value: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'Society';
        palletCall: {
          name: 'Bid';
          params: { value: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::unbid`].
     *
     **/
    unbid: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'Society';
        palletCall: {
          name: 'Unbid';
        };
      }>
    >;

    /**
     * See [`Pallet::vouch`].
     *
     * @param {MultiAddressLike} who
     * @param {bigint} value
     * @param {bigint} tip
     **/
    vouch: GenericTxCall<
      (
        who: MultiAddressLike,
        value: bigint,
        tip: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Society';
        palletCall: {
          name: 'Vouch';
          params: { who: MultiAddressLike; value: bigint; tip: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::unvouch`].
     *
     **/
    unvouch: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'Society';
        palletCall: {
          name: 'Unvouch';
        };
      }>
    >;

    /**
     * See [`Pallet::vote`].
     *
     * @param {MultiAddressLike} candidate
     * @param {boolean} approve
     **/
    vote: GenericTxCall<
      (
        candidate: MultiAddressLike,
        approve: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Society';
        palletCall: {
          name: 'Vote';
          params: { candidate: MultiAddressLike; approve: boolean };
        };
      }>
    >;

    /**
     * See [`Pallet::defender_vote`].
     *
     * @param {boolean} approve
     **/
    defenderVote: GenericTxCall<
      (approve: boolean) => ChainSubmittableExtrinsic<{
        pallet: 'Society';
        palletCall: {
          name: 'DefenderVote';
          params: { approve: boolean };
        };
      }>
    >;

    /**
     * See [`Pallet::payout`].
     *
     **/
    payout: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'Society';
        palletCall: {
          name: 'Payout';
        };
      }>
    >;

    /**
     * See [`Pallet::waive_repay`].
     *
     * @param {bigint} amount
     **/
    waiveRepay: GenericTxCall<
      (amount: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'Society';
        palletCall: {
          name: 'WaiveRepay';
          params: { amount: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::found_society`].
     *
     * @param {MultiAddressLike} founder
     * @param {number} maxMembers
     * @param {number} maxIntake
     * @param {number} maxStrikes
     * @param {bigint} candidateDeposit
     * @param {BytesLike} rules
     **/
    foundSociety: GenericTxCall<
      (
        founder: MultiAddressLike,
        maxMembers: number,
        maxIntake: number,
        maxStrikes: number,
        candidateDeposit: bigint,
        rules: BytesLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Society';
        palletCall: {
          name: 'FoundSociety';
          params: {
            founder: MultiAddressLike;
            maxMembers: number;
            maxIntake: number;
            maxStrikes: number;
            candidateDeposit: bigint;
            rules: BytesLike;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::dissolve`].
     *
     **/
    dissolve: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'Society';
        palletCall: {
          name: 'Dissolve';
        };
      }>
    >;

    /**
     * See [`Pallet::judge_suspended_member`].
     *
     * @param {MultiAddressLike} who
     * @param {boolean} forgive
     **/
    judgeSuspendedMember: GenericTxCall<
      (
        who: MultiAddressLike,
        forgive: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Society';
        palletCall: {
          name: 'JudgeSuspendedMember';
          params: { who: MultiAddressLike; forgive: boolean };
        };
      }>
    >;

    /**
     * See [`Pallet::set_parameters`].
     *
     * @param {number} maxMembers
     * @param {number} maxIntake
     * @param {number} maxStrikes
     * @param {bigint} candidateDeposit
     **/
    setParameters: GenericTxCall<
      (
        maxMembers: number,
        maxIntake: number,
        maxStrikes: number,
        candidateDeposit: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Society';
        palletCall: {
          name: 'SetParameters';
          params: { maxMembers: number; maxIntake: number; maxStrikes: number; candidateDeposit: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::punish_skeptic`].
     *
     **/
    punishSkeptic: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'Society';
        palletCall: {
          name: 'PunishSkeptic';
        };
      }>
    >;

    /**
     * See [`Pallet::claim_membership`].
     *
     **/
    claimMembership: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'Society';
        palletCall: {
          name: 'ClaimMembership';
        };
      }>
    >;

    /**
     * See [`Pallet::bestow_membership`].
     *
     * @param {AccountId32Like} candidate
     **/
    bestowMembership: GenericTxCall<
      (candidate: AccountId32Like) => ChainSubmittableExtrinsic<{
        pallet: 'Society';
        palletCall: {
          name: 'BestowMembership';
          params: { candidate: AccountId32Like };
        };
      }>
    >;

    /**
     * See [`Pallet::kick_candidate`].
     *
     * @param {AccountId32Like} candidate
     **/
    kickCandidate: GenericTxCall<
      (candidate: AccountId32Like) => ChainSubmittableExtrinsic<{
        pallet: 'Society';
        palletCall: {
          name: 'KickCandidate';
          params: { candidate: AccountId32Like };
        };
      }>
    >;

    /**
     * See [`Pallet::resign_candidacy`].
     *
     **/
    resignCandidacy: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'Society';
        palletCall: {
          name: 'ResignCandidacy';
        };
      }>
    >;

    /**
     * See [`Pallet::drop_candidate`].
     *
     * @param {AccountId32Like} candidate
     **/
    dropCandidate: GenericTxCall<
      (candidate: AccountId32Like) => ChainSubmittableExtrinsic<{
        pallet: 'Society';
        palletCall: {
          name: 'DropCandidate';
          params: { candidate: AccountId32Like };
        };
      }>
    >;

    /**
     * See [`Pallet::cleanup_candidacy`].
     *
     * @param {AccountId32Like} candidate
     * @param {number} max
     **/
    cleanupCandidacy: GenericTxCall<
      (
        candidate: AccountId32Like,
        max: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Society';
        palletCall: {
          name: 'CleanupCandidacy';
          params: { candidate: AccountId32Like; max: number };
        };
      }>
    >;

    /**
     * See [`Pallet::cleanup_challenge`].
     *
     * @param {number} challengeRound
     * @param {number} max
     **/
    cleanupChallenge: GenericTxCall<
      (
        challengeRound: number,
        max: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Society';
        palletCall: {
          name: 'CleanupChallenge';
          params: { challengeRound: number; max: number };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `Recovery`'s transaction calls
   **/
  recovery: {
    /**
     * See [`Pallet::as_recovered`].
     *
     * @param {MultiAddressLike} account
     * @param {RococoRuntimeRuntimeCallLike} call
     **/
    asRecovered: GenericTxCall<
      (
        account: MultiAddressLike,
        call: RococoRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Recovery';
        palletCall: {
          name: 'AsRecovered';
          params: { account: MultiAddressLike; call: RococoRuntimeRuntimeCallLike };
        };
      }>
    >;

    /**
     * See [`Pallet::set_recovered`].
     *
     * @param {MultiAddressLike} lost
     * @param {MultiAddressLike} rescuer
     **/
    setRecovered: GenericTxCall<
      (
        lost: MultiAddressLike,
        rescuer: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Recovery';
        palletCall: {
          name: 'SetRecovered';
          params: { lost: MultiAddressLike; rescuer: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::create_recovery`].
     *
     * @param {Array<AccountId32Like>} friends
     * @param {number} threshold
     * @param {number} delayPeriod
     **/
    createRecovery: GenericTxCall<
      (
        friends: Array<AccountId32Like>,
        threshold: number,
        delayPeriod: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Recovery';
        palletCall: {
          name: 'CreateRecovery';
          params: { friends: Array<AccountId32Like>; threshold: number; delayPeriod: number };
        };
      }>
    >;

    /**
     * See [`Pallet::initiate_recovery`].
     *
     * @param {MultiAddressLike} account
     **/
    initiateRecovery: GenericTxCall<
      (account: MultiAddressLike) => ChainSubmittableExtrinsic<{
        pallet: 'Recovery';
        palletCall: {
          name: 'InitiateRecovery';
          params: { account: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::vouch_recovery`].
     *
     * @param {MultiAddressLike} lost
     * @param {MultiAddressLike} rescuer
     **/
    vouchRecovery: GenericTxCall<
      (
        lost: MultiAddressLike,
        rescuer: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Recovery';
        palletCall: {
          name: 'VouchRecovery';
          params: { lost: MultiAddressLike; rescuer: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::claim_recovery`].
     *
     * @param {MultiAddressLike} account
     **/
    claimRecovery: GenericTxCall<
      (account: MultiAddressLike) => ChainSubmittableExtrinsic<{
        pallet: 'Recovery';
        palletCall: {
          name: 'ClaimRecovery';
          params: { account: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::close_recovery`].
     *
     * @param {MultiAddressLike} rescuer
     **/
    closeRecovery: GenericTxCall<
      (rescuer: MultiAddressLike) => ChainSubmittableExtrinsic<{
        pallet: 'Recovery';
        palletCall: {
          name: 'CloseRecovery';
          params: { rescuer: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_recovery`].
     *
     **/
    removeRecovery: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'Recovery';
        palletCall: {
          name: 'RemoveRecovery';
        };
      }>
    >;

    /**
     * See [`Pallet::cancel_recovered`].
     *
     * @param {MultiAddressLike} account
     **/
    cancelRecovered: GenericTxCall<
      (account: MultiAddressLike) => ChainSubmittableExtrinsic<{
        pallet: 'Recovery';
        palletCall: {
          name: 'CancelRecovered';
          params: { account: MultiAddressLike };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `Vesting`'s transaction calls
   **/
  vesting: {
    /**
     * See [`Pallet::vest`].
     *
     **/
    vest: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'Vesting';
        palletCall: {
          name: 'Vest';
        };
      }>
    >;

    /**
     * See [`Pallet::vest_other`].
     *
     * @param {MultiAddressLike} target
     **/
    vestOther: GenericTxCall<
      (target: MultiAddressLike) => ChainSubmittableExtrinsic<{
        pallet: 'Vesting';
        palletCall: {
          name: 'VestOther';
          params: { target: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::vested_transfer`].
     *
     * @param {MultiAddressLike} target
     * @param {PalletVestingVestingInfo} schedule
     **/
    vestedTransfer: GenericTxCall<
      (
        target: MultiAddressLike,
        schedule: PalletVestingVestingInfo,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Vesting';
        palletCall: {
          name: 'VestedTransfer';
          params: { target: MultiAddressLike; schedule: PalletVestingVestingInfo };
        };
      }>
    >;

    /**
     * See [`Pallet::force_vested_transfer`].
     *
     * @param {MultiAddressLike} source
     * @param {MultiAddressLike} target
     * @param {PalletVestingVestingInfo} schedule
     **/
    forceVestedTransfer: GenericTxCall<
      (
        source: MultiAddressLike,
        target: MultiAddressLike,
        schedule: PalletVestingVestingInfo,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Vesting';
        palletCall: {
          name: 'ForceVestedTransfer';
          params: { source: MultiAddressLike; target: MultiAddressLike; schedule: PalletVestingVestingInfo };
        };
      }>
    >;

    /**
     * See [`Pallet::merge_schedules`].
     *
     * @param {number} schedule1Index
     * @param {number} schedule2Index
     **/
    mergeSchedules: GenericTxCall<
      (
        schedule1Index: number,
        schedule2Index: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Vesting';
        palletCall: {
          name: 'MergeSchedules';
          params: { schedule1Index: number; schedule2Index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::force_remove_vesting_schedule`].
     *
     * @param {MultiAddressLike} target
     * @param {number} scheduleIndex
     **/
    forceRemoveVestingSchedule: GenericTxCall<
      (
        target: MultiAddressLike,
        scheduleIndex: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Vesting';
        palletCall: {
          name: 'ForceRemoveVestingSchedule';
          params: { target: MultiAddressLike; scheduleIndex: number };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `Scheduler`'s transaction calls
   **/
  scheduler: {
    /**
     * See [`Pallet::schedule`].
     *
     * @param {number} when
     * @param {[number, number] | undefined} maybePeriodic
     * @param {number} priority
     * @param {RococoRuntimeRuntimeCallLike} call
     **/
    schedule: GenericTxCall<
      (
        when: number,
        maybePeriodic: [number, number] | undefined,
        priority: number,
        call: RococoRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Scheduler';
        palletCall: {
          name: 'Schedule';
          params: {
            when: number;
            maybePeriodic: [number, number] | undefined;
            priority: number;
            call: RococoRuntimeRuntimeCallLike;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::cancel`].
     *
     * @param {number} when
     * @param {number} index
     **/
    cancel: GenericTxCall<
      (
        when: number,
        index: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Scheduler';
        palletCall: {
          name: 'Cancel';
          params: { when: number; index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::schedule_named`].
     *
     * @param {FixedBytes<32>} id
     * @param {number} when
     * @param {[number, number] | undefined} maybePeriodic
     * @param {number} priority
     * @param {RococoRuntimeRuntimeCallLike} call
     **/
    scheduleNamed: GenericTxCall<
      (
        id: FixedBytes<32>,
        when: number,
        maybePeriodic: [number, number] | undefined,
        priority: number,
        call: RococoRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Scheduler';
        palletCall: {
          name: 'ScheduleNamed';
          params: {
            id: FixedBytes<32>;
            when: number;
            maybePeriodic: [number, number] | undefined;
            priority: number;
            call: RococoRuntimeRuntimeCallLike;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::cancel_named`].
     *
     * @param {FixedBytes<32>} id
     **/
    cancelNamed: GenericTxCall<
      (id: FixedBytes<32>) => ChainSubmittableExtrinsic<{
        pallet: 'Scheduler';
        palletCall: {
          name: 'CancelNamed';
          params: { id: FixedBytes<32> };
        };
      }>
    >;

    /**
     * See [`Pallet::schedule_after`].
     *
     * @param {number} after
     * @param {[number, number] | undefined} maybePeriodic
     * @param {number} priority
     * @param {RococoRuntimeRuntimeCallLike} call
     **/
    scheduleAfter: GenericTxCall<
      (
        after: number,
        maybePeriodic: [number, number] | undefined,
        priority: number,
        call: RococoRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Scheduler';
        palletCall: {
          name: 'ScheduleAfter';
          params: {
            after: number;
            maybePeriodic: [number, number] | undefined;
            priority: number;
            call: RococoRuntimeRuntimeCallLike;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::schedule_named_after`].
     *
     * @param {FixedBytes<32>} id
     * @param {number} after
     * @param {[number, number] | undefined} maybePeriodic
     * @param {number} priority
     * @param {RococoRuntimeRuntimeCallLike} call
     **/
    scheduleNamedAfter: GenericTxCall<
      (
        id: FixedBytes<32>,
        after: number,
        maybePeriodic: [number, number] | undefined,
        priority: number,
        call: RococoRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Scheduler';
        palletCall: {
          name: 'ScheduleNamedAfter';
          params: {
            id: FixedBytes<32>;
            after: number;
            maybePeriodic: [number, number] | undefined;
            priority: number;
            call: RococoRuntimeRuntimeCallLike;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::set_retry`].
     *
     * @param {[number, number]} task
     * @param {number} retries
     * @param {number} period
     **/
    setRetry: GenericTxCall<
      (
        task: [number, number],
        retries: number,
        period: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Scheduler';
        palletCall: {
          name: 'SetRetry';
          params: { task: [number, number]; retries: number; period: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_retry_named`].
     *
     * @param {FixedBytes<32>} id
     * @param {number} retries
     * @param {number} period
     **/
    setRetryNamed: GenericTxCall<
      (
        id: FixedBytes<32>,
        retries: number,
        period: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Scheduler';
        palletCall: {
          name: 'SetRetryNamed';
          params: { id: FixedBytes<32>; retries: number; period: number };
        };
      }>
    >;

    /**
     * See [`Pallet::cancel_retry`].
     *
     * @param {[number, number]} task
     **/
    cancelRetry: GenericTxCall<
      (task: [number, number]) => ChainSubmittableExtrinsic<{
        pallet: 'Scheduler';
        palletCall: {
          name: 'CancelRetry';
          params: { task: [number, number] };
        };
      }>
    >;

    /**
     * See [`Pallet::cancel_retry_named`].
     *
     * @param {FixedBytes<32>} id
     **/
    cancelRetryNamed: GenericTxCall<
      (id: FixedBytes<32>) => ChainSubmittableExtrinsic<{
        pallet: 'Scheduler';
        palletCall: {
          name: 'CancelRetryNamed';
          params: { id: FixedBytes<32> };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `Proxy`'s transaction calls
   **/
  proxy: {
    /**
     * See [`Pallet::proxy`].
     *
     * @param {MultiAddressLike} real
     * @param {RococoRuntimeProxyType | undefined} forceProxyType
     * @param {RococoRuntimeRuntimeCallLike} call
     **/
    proxy: GenericTxCall<
      (
        real: MultiAddressLike,
        forceProxyType: RococoRuntimeProxyType | undefined,
        call: RococoRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Proxy';
        palletCall: {
          name: 'Proxy';
          params: {
            real: MultiAddressLike;
            forceProxyType: RococoRuntimeProxyType | undefined;
            call: RococoRuntimeRuntimeCallLike;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::add_proxy`].
     *
     * @param {MultiAddressLike} delegate
     * @param {RococoRuntimeProxyType} proxyType
     * @param {number} delay
     **/
    addProxy: GenericTxCall<
      (
        delegate: MultiAddressLike,
        proxyType: RococoRuntimeProxyType,
        delay: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Proxy';
        palletCall: {
          name: 'AddProxy';
          params: { delegate: MultiAddressLike; proxyType: RococoRuntimeProxyType; delay: number };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_proxy`].
     *
     * @param {MultiAddressLike} delegate
     * @param {RococoRuntimeProxyType} proxyType
     * @param {number} delay
     **/
    removeProxy: GenericTxCall<
      (
        delegate: MultiAddressLike,
        proxyType: RococoRuntimeProxyType,
        delay: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Proxy';
        palletCall: {
          name: 'RemoveProxy';
          params: { delegate: MultiAddressLike; proxyType: RococoRuntimeProxyType; delay: number };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_proxies`].
     *
     **/
    removeProxies: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'Proxy';
        palletCall: {
          name: 'RemoveProxies';
        };
      }>
    >;

    /**
     * See [`Pallet::create_pure`].
     *
     * @param {RococoRuntimeProxyType} proxyType
     * @param {number} delay
     * @param {number} index
     **/
    createPure: GenericTxCall<
      (
        proxyType: RococoRuntimeProxyType,
        delay: number,
        index: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Proxy';
        palletCall: {
          name: 'CreatePure';
          params: { proxyType: RococoRuntimeProxyType; delay: number; index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::kill_pure`].
     *
     * @param {MultiAddressLike} spawner
     * @param {RococoRuntimeProxyType} proxyType
     * @param {number} index
     * @param {number} height
     * @param {number} extIndex
     **/
    killPure: GenericTxCall<
      (
        spawner: MultiAddressLike,
        proxyType: RococoRuntimeProxyType,
        index: number,
        height: number,
        extIndex: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Proxy';
        palletCall: {
          name: 'KillPure';
          params: {
            spawner: MultiAddressLike;
            proxyType: RococoRuntimeProxyType;
            index: number;
            height: number;
            extIndex: number;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::announce`].
     *
     * @param {MultiAddressLike} real
     * @param {H256} callHash
     **/
    announce: GenericTxCall<
      (
        real: MultiAddressLike,
        callHash: H256,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Proxy';
        palletCall: {
          name: 'Announce';
          params: { real: MultiAddressLike; callHash: H256 };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_announcement`].
     *
     * @param {MultiAddressLike} real
     * @param {H256} callHash
     **/
    removeAnnouncement: GenericTxCall<
      (
        real: MultiAddressLike,
        callHash: H256,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Proxy';
        palletCall: {
          name: 'RemoveAnnouncement';
          params: { real: MultiAddressLike; callHash: H256 };
        };
      }>
    >;

    /**
     * See [`Pallet::reject_announcement`].
     *
     * @param {MultiAddressLike} delegate
     * @param {H256} callHash
     **/
    rejectAnnouncement: GenericTxCall<
      (
        delegate: MultiAddressLike,
        callHash: H256,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Proxy';
        palletCall: {
          name: 'RejectAnnouncement';
          params: { delegate: MultiAddressLike; callHash: H256 };
        };
      }>
    >;

    /**
     * See [`Pallet::proxy_announced`].
     *
     * @param {MultiAddressLike} delegate
     * @param {MultiAddressLike} real
     * @param {RococoRuntimeProxyType | undefined} forceProxyType
     * @param {RococoRuntimeRuntimeCallLike} call
     **/
    proxyAnnounced: GenericTxCall<
      (
        delegate: MultiAddressLike,
        real: MultiAddressLike,
        forceProxyType: RococoRuntimeProxyType | undefined,
        call: RococoRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Proxy';
        palletCall: {
          name: 'ProxyAnnounced';
          params: {
            delegate: MultiAddressLike;
            real: MultiAddressLike;
            forceProxyType: RococoRuntimeProxyType | undefined;
            call: RococoRuntimeRuntimeCallLike;
          };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `Multisig`'s transaction calls
   **/
  multisig: {
    /**
     * See [`Pallet::as_multi_threshold_1`].
     *
     * @param {Array<AccountId32Like>} otherSignatories
     * @param {RococoRuntimeRuntimeCallLike} call
     **/
    asMultiThreshold1: GenericTxCall<
      (
        otherSignatories: Array<AccountId32Like>,
        call: RococoRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Multisig';
        palletCall: {
          name: 'AsMultiThreshold1';
          params: { otherSignatories: Array<AccountId32Like>; call: RococoRuntimeRuntimeCallLike };
        };
      }>
    >;

    /**
     * See [`Pallet::as_multi`].
     *
     * @param {number} threshold
     * @param {Array<AccountId32Like>} otherSignatories
     * @param {PalletMultisigTimepoint | undefined} maybeTimepoint
     * @param {RococoRuntimeRuntimeCallLike} call
     * @param {SpWeightsWeightV2Weight} maxWeight
     **/
    asMulti: GenericTxCall<
      (
        threshold: number,
        otherSignatories: Array<AccountId32Like>,
        maybeTimepoint: PalletMultisigTimepoint | undefined,
        call: RococoRuntimeRuntimeCallLike,
        maxWeight: SpWeightsWeightV2Weight,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Multisig';
        palletCall: {
          name: 'AsMulti';
          params: {
            threshold: number;
            otherSignatories: Array<AccountId32Like>;
            maybeTimepoint: PalletMultisigTimepoint | undefined;
            call: RococoRuntimeRuntimeCallLike;
            maxWeight: SpWeightsWeightV2Weight;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::approve_as_multi`].
     *
     * @param {number} threshold
     * @param {Array<AccountId32Like>} otherSignatories
     * @param {PalletMultisigTimepoint | undefined} maybeTimepoint
     * @param {FixedBytes<32>} callHash
     * @param {SpWeightsWeightV2Weight} maxWeight
     **/
    approveAsMulti: GenericTxCall<
      (
        threshold: number,
        otherSignatories: Array<AccountId32Like>,
        maybeTimepoint: PalletMultisigTimepoint | undefined,
        callHash: FixedBytes<32>,
        maxWeight: SpWeightsWeightV2Weight,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Multisig';
        palletCall: {
          name: 'ApproveAsMulti';
          params: {
            threshold: number;
            otherSignatories: Array<AccountId32Like>;
            maybeTimepoint: PalletMultisigTimepoint | undefined;
            callHash: FixedBytes<32>;
            maxWeight: SpWeightsWeightV2Weight;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::cancel_as_multi`].
     *
     * @param {number} threshold
     * @param {Array<AccountId32Like>} otherSignatories
     * @param {PalletMultisigTimepoint} timepoint
     * @param {FixedBytes<32>} callHash
     **/
    cancelAsMulti: GenericTxCall<
      (
        threshold: number,
        otherSignatories: Array<AccountId32Like>,
        timepoint: PalletMultisigTimepoint,
        callHash: FixedBytes<32>,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Multisig';
        palletCall: {
          name: 'CancelAsMulti';
          params: {
            threshold: number;
            otherSignatories: Array<AccountId32Like>;
            timepoint: PalletMultisigTimepoint;
            callHash: FixedBytes<32>;
          };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `Preimage`'s transaction calls
   **/
  preimage: {
    /**
     * See [`Pallet::note_preimage`].
     *
     * @param {BytesLike} bytes
     **/
    notePreimage: GenericTxCall<
      (bytes: BytesLike) => ChainSubmittableExtrinsic<{
        pallet: 'Preimage';
        palletCall: {
          name: 'NotePreimage';
          params: { bytes: BytesLike };
        };
      }>
    >;

    /**
     * See [`Pallet::unnote_preimage`].
     *
     * @param {H256} hash
     **/
    unnotePreimage: GenericTxCall<
      (hash: H256) => ChainSubmittableExtrinsic<{
        pallet: 'Preimage';
        palletCall: {
          name: 'UnnotePreimage';
          params: { hash: H256 };
        };
      }>
    >;

    /**
     * See [`Pallet::request_preimage`].
     *
     * @param {H256} hash
     **/
    requestPreimage: GenericTxCall<
      (hash: H256) => ChainSubmittableExtrinsic<{
        pallet: 'Preimage';
        palletCall: {
          name: 'RequestPreimage';
          params: { hash: H256 };
        };
      }>
    >;

    /**
     * See [`Pallet::unrequest_preimage`].
     *
     * @param {H256} hash
     **/
    unrequestPreimage: GenericTxCall<
      (hash: H256) => ChainSubmittableExtrinsic<{
        pallet: 'Preimage';
        palletCall: {
          name: 'UnrequestPreimage';
          params: { hash: H256 };
        };
      }>
    >;

    /**
     * See [`Pallet::ensure_updated`].
     *
     * @param {Array<H256>} hashes
     **/
    ensureUpdated: GenericTxCall<
      (hashes: Array<H256>) => ChainSubmittableExtrinsic<{
        pallet: 'Preimage';
        palletCall: {
          name: 'EnsureUpdated';
          params: { hashes: Array<H256> };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `AssetRate`'s transaction calls
   **/
  assetRate: {
    /**
     * See [`Pallet::create`].
     *
     * @param {PolkadotRuntimeCommonImplsVersionedLocatableAsset} assetKind
     * @param {FixedU128} rate
     **/
    create: GenericTxCall<
      (
        assetKind: PolkadotRuntimeCommonImplsVersionedLocatableAsset,
        rate: FixedU128,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'AssetRate';
        palletCall: {
          name: 'Create';
          params: { assetKind: PolkadotRuntimeCommonImplsVersionedLocatableAsset; rate: FixedU128 };
        };
      }>
    >;

    /**
     * See [`Pallet::update`].
     *
     * @param {PolkadotRuntimeCommonImplsVersionedLocatableAsset} assetKind
     * @param {FixedU128} rate
     **/
    update: GenericTxCall<
      (
        assetKind: PolkadotRuntimeCommonImplsVersionedLocatableAsset,
        rate: FixedU128,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'AssetRate';
        palletCall: {
          name: 'Update';
          params: { assetKind: PolkadotRuntimeCommonImplsVersionedLocatableAsset; rate: FixedU128 };
        };
      }>
    >;

    /**
     * See [`Pallet::remove`].
     *
     * @param {PolkadotRuntimeCommonImplsVersionedLocatableAsset} assetKind
     **/
    remove: GenericTxCall<
      (assetKind: PolkadotRuntimeCommonImplsVersionedLocatableAsset) => ChainSubmittableExtrinsic<{
        pallet: 'AssetRate';
        palletCall: {
          name: 'Remove';
          params: { assetKind: PolkadotRuntimeCommonImplsVersionedLocatableAsset };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `Bounties`'s transaction calls
   **/
  bounties: {
    /**
     * See [`Pallet::propose_bounty`].
     *
     * @param {bigint} value
     * @param {BytesLike} description
     **/
    proposeBounty: GenericTxCall<
      (
        value: bigint,
        description: BytesLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Bounties';
        palletCall: {
          name: 'ProposeBounty';
          params: { value: bigint; description: BytesLike };
        };
      }>
    >;

    /**
     * See [`Pallet::approve_bounty`].
     *
     * @param {number} bountyId
     **/
    approveBounty: GenericTxCall<
      (bountyId: number) => ChainSubmittableExtrinsic<{
        pallet: 'Bounties';
        palletCall: {
          name: 'ApproveBounty';
          params: { bountyId: number };
        };
      }>
    >;

    /**
     * See [`Pallet::propose_curator`].
     *
     * @param {number} bountyId
     * @param {MultiAddressLike} curator
     * @param {bigint} fee
     **/
    proposeCurator: GenericTxCall<
      (
        bountyId: number,
        curator: MultiAddressLike,
        fee: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Bounties';
        palletCall: {
          name: 'ProposeCurator';
          params: { bountyId: number; curator: MultiAddressLike; fee: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::unassign_curator`].
     *
     * @param {number} bountyId
     **/
    unassignCurator: GenericTxCall<
      (bountyId: number) => ChainSubmittableExtrinsic<{
        pallet: 'Bounties';
        palletCall: {
          name: 'UnassignCurator';
          params: { bountyId: number };
        };
      }>
    >;

    /**
     * See [`Pallet::accept_curator`].
     *
     * @param {number} bountyId
     **/
    acceptCurator: GenericTxCall<
      (bountyId: number) => ChainSubmittableExtrinsic<{
        pallet: 'Bounties';
        palletCall: {
          name: 'AcceptCurator';
          params: { bountyId: number };
        };
      }>
    >;

    /**
     * See [`Pallet::award_bounty`].
     *
     * @param {number} bountyId
     * @param {MultiAddressLike} beneficiary
     **/
    awardBounty: GenericTxCall<
      (
        bountyId: number,
        beneficiary: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Bounties';
        palletCall: {
          name: 'AwardBounty';
          params: { bountyId: number; beneficiary: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::claim_bounty`].
     *
     * @param {number} bountyId
     **/
    claimBounty: GenericTxCall<
      (bountyId: number) => ChainSubmittableExtrinsic<{
        pallet: 'Bounties';
        palletCall: {
          name: 'ClaimBounty';
          params: { bountyId: number };
        };
      }>
    >;

    /**
     * See [`Pallet::close_bounty`].
     *
     * @param {number} bountyId
     **/
    closeBounty: GenericTxCall<
      (bountyId: number) => ChainSubmittableExtrinsic<{
        pallet: 'Bounties';
        palletCall: {
          name: 'CloseBounty';
          params: { bountyId: number };
        };
      }>
    >;

    /**
     * See [`Pallet::extend_bounty_expiry`].
     *
     * @param {number} bountyId
     * @param {BytesLike} remark
     **/
    extendBountyExpiry: GenericTxCall<
      (
        bountyId: number,
        remark: BytesLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Bounties';
        palletCall: {
          name: 'ExtendBountyExpiry';
          params: { bountyId: number; remark: BytesLike };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `ChildBounties`'s transaction calls
   **/
  childBounties: {
    /**
     * See [`Pallet::add_child_bounty`].
     *
     * @param {number} parentBountyId
     * @param {bigint} value
     * @param {BytesLike} description
     **/
    addChildBounty: GenericTxCall<
      (
        parentBountyId: number,
        value: bigint,
        description: BytesLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ChildBounties';
        palletCall: {
          name: 'AddChildBounty';
          params: { parentBountyId: number; value: bigint; description: BytesLike };
        };
      }>
    >;

    /**
     * See [`Pallet::propose_curator`].
     *
     * @param {number} parentBountyId
     * @param {number} childBountyId
     * @param {MultiAddressLike} curator
     * @param {bigint} fee
     **/
    proposeCurator: GenericTxCall<
      (
        parentBountyId: number,
        childBountyId: number,
        curator: MultiAddressLike,
        fee: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ChildBounties';
        palletCall: {
          name: 'ProposeCurator';
          params: { parentBountyId: number; childBountyId: number; curator: MultiAddressLike; fee: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::accept_curator`].
     *
     * @param {number} parentBountyId
     * @param {number} childBountyId
     **/
    acceptCurator: GenericTxCall<
      (
        parentBountyId: number,
        childBountyId: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ChildBounties';
        palletCall: {
          name: 'AcceptCurator';
          params: { parentBountyId: number; childBountyId: number };
        };
      }>
    >;

    /**
     * See [`Pallet::unassign_curator`].
     *
     * @param {number} parentBountyId
     * @param {number} childBountyId
     **/
    unassignCurator: GenericTxCall<
      (
        parentBountyId: number,
        childBountyId: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ChildBounties';
        palletCall: {
          name: 'UnassignCurator';
          params: { parentBountyId: number; childBountyId: number };
        };
      }>
    >;

    /**
     * See [`Pallet::award_child_bounty`].
     *
     * @param {number} parentBountyId
     * @param {number} childBountyId
     * @param {MultiAddressLike} beneficiary
     **/
    awardChildBounty: GenericTxCall<
      (
        parentBountyId: number,
        childBountyId: number,
        beneficiary: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ChildBounties';
        palletCall: {
          name: 'AwardChildBounty';
          params: { parentBountyId: number; childBountyId: number; beneficiary: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::claim_child_bounty`].
     *
     * @param {number} parentBountyId
     * @param {number} childBountyId
     **/
    claimChildBounty: GenericTxCall<
      (
        parentBountyId: number,
        childBountyId: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ChildBounties';
        palletCall: {
          name: 'ClaimChildBounty';
          params: { parentBountyId: number; childBountyId: number };
        };
      }>
    >;

    /**
     * See [`Pallet::close_child_bounty`].
     *
     * @param {number} parentBountyId
     * @param {number} childBountyId
     **/
    closeChildBounty: GenericTxCall<
      (
        parentBountyId: number,
        childBountyId: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ChildBounties';
        palletCall: {
          name: 'CloseChildBounty';
          params: { parentBountyId: number; childBountyId: number };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `Nis`'s transaction calls
   **/
  nis: {
    /**
     * See [`Pallet::place_bid`].
     *
     * @param {bigint} amount
     * @param {number} duration
     **/
    placeBid: GenericTxCall<
      (
        amount: bigint,
        duration: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nis';
        palletCall: {
          name: 'PlaceBid';
          params: { amount: bigint; duration: number };
        };
      }>
    >;

    /**
     * See [`Pallet::retract_bid`].
     *
     * @param {bigint} amount
     * @param {number} duration
     **/
    retractBid: GenericTxCall<
      (
        amount: bigint,
        duration: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nis';
        palletCall: {
          name: 'RetractBid';
          params: { amount: bigint; duration: number };
        };
      }>
    >;

    /**
     * See [`Pallet::fund_deficit`].
     *
     **/
    fundDeficit: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'Nis';
        palletCall: {
          name: 'FundDeficit';
        };
      }>
    >;

    /**
     * See [`Pallet::thaw_private`].
     *
     * @param {number} index
     * @param {Perquintill | undefined} maybeProportion
     **/
    thawPrivate: GenericTxCall<
      (
        index: number,
        maybeProportion: Perquintill | undefined,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nis';
        palletCall: {
          name: 'ThawPrivate';
          params: { index: number; maybeProportion: Perquintill | undefined };
        };
      }>
    >;

    /**
     * See [`Pallet::thaw_communal`].
     *
     * @param {number} index
     **/
    thawCommunal: GenericTxCall<
      (index: number) => ChainSubmittableExtrinsic<{
        pallet: 'Nis';
        palletCall: {
          name: 'ThawCommunal';
          params: { index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::communify`].
     *
     * @param {number} index
     **/
    communify: GenericTxCall<
      (index: number) => ChainSubmittableExtrinsic<{
        pallet: 'Nis';
        palletCall: {
          name: 'Communify';
          params: { index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::privatize`].
     *
     * @param {number} index
     **/
    privatize: GenericTxCall<
      (index: number) => ChainSubmittableExtrinsic<{
        pallet: 'Nis';
        palletCall: {
          name: 'Privatize';
          params: { index: number };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `NisCounterpartBalances`'s transaction calls
   **/
  nisCounterpartBalances: {
    /**
     * See [`Pallet::transfer_allow_death`].
     *
     * @param {MultiAddressLike} dest
     * @param {bigint} value
     **/
    transferAllowDeath: GenericTxCall<
      (
        dest: MultiAddressLike,
        value: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'NisCounterpartBalances';
        palletCall: {
          name: 'TransferAllowDeath';
          params: { dest: MultiAddressLike; value: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::force_transfer`].
     *
     * @param {MultiAddressLike} source
     * @param {MultiAddressLike} dest
     * @param {bigint} value
     **/
    forceTransfer: GenericTxCall<
      (
        source: MultiAddressLike,
        dest: MultiAddressLike,
        value: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'NisCounterpartBalances';
        palletCall: {
          name: 'ForceTransfer';
          params: { source: MultiAddressLike; dest: MultiAddressLike; value: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer_keep_alive`].
     *
     * @param {MultiAddressLike} dest
     * @param {bigint} value
     **/
    transferKeepAlive: GenericTxCall<
      (
        dest: MultiAddressLike,
        value: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'NisCounterpartBalances';
        palletCall: {
          name: 'TransferKeepAlive';
          params: { dest: MultiAddressLike; value: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer_all`].
     *
     * @param {MultiAddressLike} dest
     * @param {boolean} keepAlive
     **/
    transferAll: GenericTxCall<
      (
        dest: MultiAddressLike,
        keepAlive: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'NisCounterpartBalances';
        palletCall: {
          name: 'TransferAll';
          params: { dest: MultiAddressLike; keepAlive: boolean };
        };
      }>
    >;

    /**
     * See [`Pallet::force_unreserve`].
     *
     * @param {MultiAddressLike} who
     * @param {bigint} amount
     **/
    forceUnreserve: GenericTxCall<
      (
        who: MultiAddressLike,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'NisCounterpartBalances';
        palletCall: {
          name: 'ForceUnreserve';
          params: { who: MultiAddressLike; amount: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::upgrade_accounts`].
     *
     * @param {Array<AccountId32Like>} who
     **/
    upgradeAccounts: GenericTxCall<
      (who: Array<AccountId32Like>) => ChainSubmittableExtrinsic<{
        pallet: 'NisCounterpartBalances';
        palletCall: {
          name: 'UpgradeAccounts';
          params: { who: Array<AccountId32Like> };
        };
      }>
    >;

    /**
     * See [`Pallet::force_set_balance`].
     *
     * @param {MultiAddressLike} who
     * @param {bigint} newFree
     **/
    forceSetBalance: GenericTxCall<
      (
        who: MultiAddressLike,
        newFree: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'NisCounterpartBalances';
        palletCall: {
          name: 'ForceSetBalance';
          params: { who: MultiAddressLike; newFree: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::force_adjust_total_issuance`].
     *
     * @param {PalletBalancesAdjustmentDirection} direction
     * @param {bigint} delta
     **/
    forceAdjustTotalIssuance: GenericTxCall<
      (
        direction: PalletBalancesAdjustmentDirection,
        delta: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'NisCounterpartBalances';
        palletCall: {
          name: 'ForceAdjustTotalIssuance';
          params: { direction: PalletBalancesAdjustmentDirection; delta: bigint };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `Configuration`'s transaction calls
   **/
  configuration: {
    /**
     * See [`Pallet::set_validation_upgrade_cooldown`].
     *
     * @param {number} new_
     **/
    setValidationUpgradeCooldown: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetValidationUpgradeCooldown';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_validation_upgrade_delay`].
     *
     * @param {number} new_
     **/
    setValidationUpgradeDelay: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetValidationUpgradeDelay';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_code_retention_period`].
     *
     * @param {number} new_
     **/
    setCodeRetentionPeriod: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetCodeRetentionPeriod';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_max_code_size`].
     *
     * @param {number} new_
     **/
    setMaxCodeSize: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetMaxCodeSize';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_max_pov_size`].
     *
     * @param {number} new_
     **/
    setMaxPovSize: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetMaxPovSize';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_max_head_data_size`].
     *
     * @param {number} new_
     **/
    setMaxHeadDataSize: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetMaxHeadDataSize';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_coretime_cores`].
     *
     * @param {number} new_
     **/
    setCoretimeCores: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetCoretimeCores';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_on_demand_retries`].
     *
     * @param {number} new_
     **/
    setOnDemandRetries: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetOnDemandRetries';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_group_rotation_frequency`].
     *
     * @param {number} new_
     **/
    setGroupRotationFrequency: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetGroupRotationFrequency';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_paras_availability_period`].
     *
     * @param {number} new_
     **/
    setParasAvailabilityPeriod: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetParasAvailabilityPeriod';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_scheduling_lookahead`].
     *
     * @param {number} new_
     **/
    setSchedulingLookahead: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetSchedulingLookahead';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_max_validators_per_core`].
     *
     * @param {number | undefined} new_
     **/
    setMaxValidatorsPerCore: GenericTxCall<
      (new_: number | undefined) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetMaxValidatorsPerCore';
          params: { new: number | undefined };
        };
      }>
    >;

    /**
     * See [`Pallet::set_max_validators`].
     *
     * @param {number | undefined} new_
     **/
    setMaxValidators: GenericTxCall<
      (new_: number | undefined) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetMaxValidators';
          params: { new: number | undefined };
        };
      }>
    >;

    /**
     * See [`Pallet::set_dispute_period`].
     *
     * @param {number} new_
     **/
    setDisputePeriod: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetDisputePeriod';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_dispute_post_conclusion_acceptance_period`].
     *
     * @param {number} new_
     **/
    setDisputePostConclusionAcceptancePeriod: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetDisputePostConclusionAcceptancePeriod';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_no_show_slots`].
     *
     * @param {number} new_
     **/
    setNoShowSlots: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetNoShowSlots';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_n_delay_tranches`].
     *
     * @param {number} new_
     **/
    setNDelayTranches: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetNDelayTranches';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_zeroth_delay_tranche_width`].
     *
     * @param {number} new_
     **/
    setZerothDelayTrancheWidth: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetZerothDelayTrancheWidth';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_needed_approvals`].
     *
     * @param {number} new_
     **/
    setNeededApprovals: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetNeededApprovals';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_relay_vrf_modulo_samples`].
     *
     * @param {number} new_
     **/
    setRelayVrfModuloSamples: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetRelayVrfModuloSamples';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_max_upward_queue_count`].
     *
     * @param {number} new_
     **/
    setMaxUpwardQueueCount: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetMaxUpwardQueueCount';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_max_upward_queue_size`].
     *
     * @param {number} new_
     **/
    setMaxUpwardQueueSize: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetMaxUpwardQueueSize';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_max_downward_message_size`].
     *
     * @param {number} new_
     **/
    setMaxDownwardMessageSize: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetMaxDownwardMessageSize';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_max_upward_message_size`].
     *
     * @param {number} new_
     **/
    setMaxUpwardMessageSize: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetMaxUpwardMessageSize';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_max_upward_message_num_per_candidate`].
     *
     * @param {number} new_
     **/
    setMaxUpwardMessageNumPerCandidate: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetMaxUpwardMessageNumPerCandidate';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_hrmp_open_request_ttl`].
     *
     * @param {number} new_
     **/
    setHrmpOpenRequestTtl: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetHrmpOpenRequestTtl';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_hrmp_sender_deposit`].
     *
     * @param {bigint} new_
     **/
    setHrmpSenderDeposit: GenericTxCall<
      (new_: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetHrmpSenderDeposit';
          params: { new: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::set_hrmp_recipient_deposit`].
     *
     * @param {bigint} new_
     **/
    setHrmpRecipientDeposit: GenericTxCall<
      (new_: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetHrmpRecipientDeposit';
          params: { new: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::set_hrmp_channel_max_capacity`].
     *
     * @param {number} new_
     **/
    setHrmpChannelMaxCapacity: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetHrmpChannelMaxCapacity';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_hrmp_channel_max_total_size`].
     *
     * @param {number} new_
     **/
    setHrmpChannelMaxTotalSize: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetHrmpChannelMaxTotalSize';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_hrmp_max_parachain_inbound_channels`].
     *
     * @param {number} new_
     **/
    setHrmpMaxParachainInboundChannels: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetHrmpMaxParachainInboundChannels';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_hrmp_channel_max_message_size`].
     *
     * @param {number} new_
     **/
    setHrmpChannelMaxMessageSize: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetHrmpChannelMaxMessageSize';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_hrmp_max_parachain_outbound_channels`].
     *
     * @param {number} new_
     **/
    setHrmpMaxParachainOutboundChannels: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetHrmpMaxParachainOutboundChannels';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_hrmp_max_message_num_per_candidate`].
     *
     * @param {number} new_
     **/
    setHrmpMaxMessageNumPerCandidate: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetHrmpMaxMessageNumPerCandidate';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_pvf_voting_ttl`].
     *
     * @param {number} new_
     **/
    setPvfVotingTtl: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetPvfVotingTtl';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_minimum_validation_upgrade_delay`].
     *
     * @param {number} new_
     **/
    setMinimumValidationUpgradeDelay: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetMinimumValidationUpgradeDelay';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_bypass_consistency_check`].
     *
     * @param {boolean} new_
     **/
    setBypassConsistencyCheck: GenericTxCall<
      (new_: boolean) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetBypassConsistencyCheck';
          params: { new: boolean };
        };
      }>
    >;

    /**
     * See [`Pallet::set_async_backing_params`].
     *
     * @param {PolkadotPrimitivesV6AsyncBackingAsyncBackingParams} new_
     **/
    setAsyncBackingParams: GenericTxCall<
      (new_: PolkadotPrimitivesV6AsyncBackingAsyncBackingParams) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetAsyncBackingParams';
          params: { new: PolkadotPrimitivesV6AsyncBackingAsyncBackingParams };
        };
      }>
    >;

    /**
     * See [`Pallet::set_executor_params`].
     *
     * @param {PolkadotPrimitivesV6ExecutorParams} new_
     **/
    setExecutorParams: GenericTxCall<
      (new_: PolkadotPrimitivesV6ExecutorParams) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetExecutorParams';
          params: { new: PolkadotPrimitivesV6ExecutorParams };
        };
      }>
    >;

    /**
     * See [`Pallet::set_on_demand_base_fee`].
     *
     * @param {bigint} new_
     **/
    setOnDemandBaseFee: GenericTxCall<
      (new_: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetOnDemandBaseFee';
          params: { new: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::set_on_demand_fee_variability`].
     *
     * @param {Perbill} new_
     **/
    setOnDemandFeeVariability: GenericTxCall<
      (new_: Perbill) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetOnDemandFeeVariability';
          params: { new: Perbill };
        };
      }>
    >;

    /**
     * See [`Pallet::set_on_demand_queue_max_size`].
     *
     * @param {number} new_
     **/
    setOnDemandQueueMaxSize: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetOnDemandQueueMaxSize';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_on_demand_target_queue_utilization`].
     *
     * @param {Perbill} new_
     **/
    setOnDemandTargetQueueUtilization: GenericTxCall<
      (new_: Perbill) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetOnDemandTargetQueueUtilization';
          params: { new: Perbill };
        };
      }>
    >;

    /**
     * See [`Pallet::set_on_demand_ttl`].
     *
     * @param {number} new_
     **/
    setOnDemandTtl: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetOnDemandTtl';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_minimum_backing_votes`].
     *
     * @param {number} new_
     **/
    setMinimumBackingVotes: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetMinimumBackingVotes';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_node_feature`].
     *
     * @param {number} index
     * @param {boolean} value
     **/
    setNodeFeature: GenericTxCall<
      (
        index: number,
        value: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetNodeFeature';
          params: { index: number; value: boolean };
        };
      }>
    >;

    /**
     * See [`Pallet::set_approval_voting_params`].
     *
     * @param {PolkadotPrimitivesVstagingApprovalVotingParams} new_
     **/
    setApprovalVotingParams: GenericTxCall<
      (new_: PolkadotPrimitivesVstagingApprovalVotingParams) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetApprovalVotingParams';
          params: { new: PolkadotPrimitivesVstagingApprovalVotingParams };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `ParasShared`'s transaction calls
   **/
  parasShared: {
    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `ParaInclusion`'s transaction calls
   **/
  paraInclusion: {
    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `ParaInherent`'s transaction calls
   **/
  paraInherent: {
    /**
     * See [`Pallet::enter`].
     *
     * @param {PolkadotPrimitivesV6InherentData} data
     **/
    enter: GenericTxCall<
      (data: PolkadotPrimitivesV6InherentData) => ChainSubmittableExtrinsic<{
        pallet: 'ParaInherent';
        palletCall: {
          name: 'Enter';
          params: { data: PolkadotPrimitivesV6InherentData };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `Paras`'s transaction calls
   **/
  paras: {
    /**
     * See [`Pallet::force_set_current_code`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} para
     * @param {PolkadotParachainPrimitivesPrimitivesValidationCode} newCode
     **/
    forceSetCurrentCode: GenericTxCall<
      (
        para: PolkadotParachainPrimitivesPrimitivesId,
        newCode: PolkadotParachainPrimitivesPrimitivesValidationCode,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Paras';
        palletCall: {
          name: 'ForceSetCurrentCode';
          params: {
            para: PolkadotParachainPrimitivesPrimitivesId;
            newCode: PolkadotParachainPrimitivesPrimitivesValidationCode;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::force_set_current_head`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} para
     * @param {PolkadotParachainPrimitivesPrimitivesHeadData} newHead
     **/
    forceSetCurrentHead: GenericTxCall<
      (
        para: PolkadotParachainPrimitivesPrimitivesId,
        newHead: PolkadotParachainPrimitivesPrimitivesHeadData,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Paras';
        palletCall: {
          name: 'ForceSetCurrentHead';
          params: {
            para: PolkadotParachainPrimitivesPrimitivesId;
            newHead: PolkadotParachainPrimitivesPrimitivesHeadData;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::force_schedule_code_upgrade`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} para
     * @param {PolkadotParachainPrimitivesPrimitivesValidationCode} newCode
     * @param {number} relayParentNumber
     **/
    forceScheduleCodeUpgrade: GenericTxCall<
      (
        para: PolkadotParachainPrimitivesPrimitivesId,
        newCode: PolkadotParachainPrimitivesPrimitivesValidationCode,
        relayParentNumber: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Paras';
        palletCall: {
          name: 'ForceScheduleCodeUpgrade';
          params: {
            para: PolkadotParachainPrimitivesPrimitivesId;
            newCode: PolkadotParachainPrimitivesPrimitivesValidationCode;
            relayParentNumber: number;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::force_note_new_head`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} para
     * @param {PolkadotParachainPrimitivesPrimitivesHeadData} newHead
     **/
    forceNoteNewHead: GenericTxCall<
      (
        para: PolkadotParachainPrimitivesPrimitivesId,
        newHead: PolkadotParachainPrimitivesPrimitivesHeadData,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Paras';
        palletCall: {
          name: 'ForceNoteNewHead';
          params: {
            para: PolkadotParachainPrimitivesPrimitivesId;
            newHead: PolkadotParachainPrimitivesPrimitivesHeadData;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::force_queue_action`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} para
     **/
    forceQueueAction: GenericTxCall<
      (para: PolkadotParachainPrimitivesPrimitivesId) => ChainSubmittableExtrinsic<{
        pallet: 'Paras';
        palletCall: {
          name: 'ForceQueueAction';
          params: { para: PolkadotParachainPrimitivesPrimitivesId };
        };
      }>
    >;

    /**
     * See [`Pallet::add_trusted_validation_code`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesValidationCode} validationCode
     **/
    addTrustedValidationCode: GenericTxCall<
      (validationCode: PolkadotParachainPrimitivesPrimitivesValidationCode) => ChainSubmittableExtrinsic<{
        pallet: 'Paras';
        palletCall: {
          name: 'AddTrustedValidationCode';
          params: { validationCode: PolkadotParachainPrimitivesPrimitivesValidationCode };
        };
      }>
    >;

    /**
     * See [`Pallet::poke_unused_validation_code`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesValidationCodeHash} validationCodeHash
     **/
    pokeUnusedValidationCode: GenericTxCall<
      (validationCodeHash: PolkadotParachainPrimitivesPrimitivesValidationCodeHash) => ChainSubmittableExtrinsic<{
        pallet: 'Paras';
        palletCall: {
          name: 'PokeUnusedValidationCode';
          params: { validationCodeHash: PolkadotParachainPrimitivesPrimitivesValidationCodeHash };
        };
      }>
    >;

    /**
     * See [`Pallet::include_pvf_check_statement`].
     *
     * @param {PolkadotPrimitivesV6PvfCheckStatement} stmt
     * @param {PolkadotPrimitivesV6ValidatorAppSignature} signature
     **/
    includePvfCheckStatement: GenericTxCall<
      (
        stmt: PolkadotPrimitivesV6PvfCheckStatement,
        signature: PolkadotPrimitivesV6ValidatorAppSignature,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Paras';
        palletCall: {
          name: 'IncludePvfCheckStatement';
          params: { stmt: PolkadotPrimitivesV6PvfCheckStatement; signature: PolkadotPrimitivesV6ValidatorAppSignature };
        };
      }>
    >;

    /**
     * See [`Pallet::force_set_most_recent_context`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} para
     * @param {number} context
     **/
    forceSetMostRecentContext: GenericTxCall<
      (
        para: PolkadotParachainPrimitivesPrimitivesId,
        context: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Paras';
        palletCall: {
          name: 'ForceSetMostRecentContext';
          params: { para: PolkadotParachainPrimitivesPrimitivesId; context: number };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `Initializer`'s transaction calls
   **/
  initializer: {
    /**
     * See [`Pallet::force_approve`].
     *
     * @param {number} upTo
     **/
    forceApprove: GenericTxCall<
      (upTo: number) => ChainSubmittableExtrinsic<{
        pallet: 'Initializer';
        palletCall: {
          name: 'ForceApprove';
          params: { upTo: number };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `Hrmp`'s transaction calls
   **/
  hrmp: {
    /**
     * See [`Pallet::hrmp_init_open_channel`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} recipient
     * @param {number} proposedMaxCapacity
     * @param {number} proposedMaxMessageSize
     **/
    hrmpInitOpenChannel: GenericTxCall<
      (
        recipient: PolkadotParachainPrimitivesPrimitivesId,
        proposedMaxCapacity: number,
        proposedMaxMessageSize: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Hrmp';
        palletCall: {
          name: 'HrmpInitOpenChannel';
          params: {
            recipient: PolkadotParachainPrimitivesPrimitivesId;
            proposedMaxCapacity: number;
            proposedMaxMessageSize: number;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::hrmp_accept_open_channel`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} sender
     **/
    hrmpAcceptOpenChannel: GenericTxCall<
      (sender: PolkadotParachainPrimitivesPrimitivesId) => ChainSubmittableExtrinsic<{
        pallet: 'Hrmp';
        palletCall: {
          name: 'HrmpAcceptOpenChannel';
          params: { sender: PolkadotParachainPrimitivesPrimitivesId };
        };
      }>
    >;

    /**
     * See [`Pallet::hrmp_close_channel`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesHrmpChannelId} channelId
     **/
    hrmpCloseChannel: GenericTxCall<
      (channelId: PolkadotParachainPrimitivesPrimitivesHrmpChannelId) => ChainSubmittableExtrinsic<{
        pallet: 'Hrmp';
        palletCall: {
          name: 'HrmpCloseChannel';
          params: { channelId: PolkadotParachainPrimitivesPrimitivesHrmpChannelId };
        };
      }>
    >;

    /**
     * See [`Pallet::force_clean_hrmp`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} para
     * @param {number} numInbound
     * @param {number} numOutbound
     **/
    forceCleanHrmp: GenericTxCall<
      (
        para: PolkadotParachainPrimitivesPrimitivesId,
        numInbound: number,
        numOutbound: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Hrmp';
        palletCall: {
          name: 'ForceCleanHrmp';
          params: { para: PolkadotParachainPrimitivesPrimitivesId; numInbound: number; numOutbound: number };
        };
      }>
    >;

    /**
     * See [`Pallet::force_process_hrmp_open`].
     *
     * @param {number} channels
     **/
    forceProcessHrmpOpen: GenericTxCall<
      (channels: number) => ChainSubmittableExtrinsic<{
        pallet: 'Hrmp';
        palletCall: {
          name: 'ForceProcessHrmpOpen';
          params: { channels: number };
        };
      }>
    >;

    /**
     * See [`Pallet::force_process_hrmp_close`].
     *
     * @param {number} channels
     **/
    forceProcessHrmpClose: GenericTxCall<
      (channels: number) => ChainSubmittableExtrinsic<{
        pallet: 'Hrmp';
        palletCall: {
          name: 'ForceProcessHrmpClose';
          params: { channels: number };
        };
      }>
    >;

    /**
     * See [`Pallet::hrmp_cancel_open_request`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesHrmpChannelId} channelId
     * @param {number} openRequests
     **/
    hrmpCancelOpenRequest: GenericTxCall<
      (
        channelId: PolkadotParachainPrimitivesPrimitivesHrmpChannelId,
        openRequests: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Hrmp';
        palletCall: {
          name: 'HrmpCancelOpenRequest';
          params: { channelId: PolkadotParachainPrimitivesPrimitivesHrmpChannelId; openRequests: number };
        };
      }>
    >;

    /**
     * See [`Pallet::force_open_hrmp_channel`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} sender
     * @param {PolkadotParachainPrimitivesPrimitivesId} recipient
     * @param {number} maxCapacity
     * @param {number} maxMessageSize
     **/
    forceOpenHrmpChannel: GenericTxCall<
      (
        sender: PolkadotParachainPrimitivesPrimitivesId,
        recipient: PolkadotParachainPrimitivesPrimitivesId,
        maxCapacity: number,
        maxMessageSize: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Hrmp';
        palletCall: {
          name: 'ForceOpenHrmpChannel';
          params: {
            sender: PolkadotParachainPrimitivesPrimitivesId;
            recipient: PolkadotParachainPrimitivesPrimitivesId;
            maxCapacity: number;
            maxMessageSize: number;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::establish_system_channel`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} sender
     * @param {PolkadotParachainPrimitivesPrimitivesId} recipient
     **/
    establishSystemChannel: GenericTxCall<
      (
        sender: PolkadotParachainPrimitivesPrimitivesId,
        recipient: PolkadotParachainPrimitivesPrimitivesId,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Hrmp';
        palletCall: {
          name: 'EstablishSystemChannel';
          params: {
            sender: PolkadotParachainPrimitivesPrimitivesId;
            recipient: PolkadotParachainPrimitivesPrimitivesId;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::poke_channel_deposits`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} sender
     * @param {PolkadotParachainPrimitivesPrimitivesId} recipient
     **/
    pokeChannelDeposits: GenericTxCall<
      (
        sender: PolkadotParachainPrimitivesPrimitivesId,
        recipient: PolkadotParachainPrimitivesPrimitivesId,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Hrmp';
        palletCall: {
          name: 'PokeChannelDeposits';
          params: {
            sender: PolkadotParachainPrimitivesPrimitivesId;
            recipient: PolkadotParachainPrimitivesPrimitivesId;
          };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `ParasDisputes`'s transaction calls
   **/
  parasDisputes: {
    /**
     * See [`Pallet::force_unfreeze`].
     *
     **/
    forceUnfreeze: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'ParasDisputes';
        palletCall: 'ForceUnfreeze';
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `ParasSlashing`'s transaction calls
   **/
  parasSlashing: {
    /**
     * See [`Pallet::report_dispute_lost_unsigned`].
     *
     * @param {PolkadotPrimitivesV6SlashingDisputeProof} disputeProof
     * @param {SpSessionMembershipProof} keyOwnerProof
     **/
    reportDisputeLostUnsigned: GenericTxCall<
      (
        disputeProof: PolkadotPrimitivesV6SlashingDisputeProof,
        keyOwnerProof: SpSessionMembershipProof,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ParasSlashing';
        palletCall: {
          name: 'ReportDisputeLostUnsigned';
          params: { disputeProof: PolkadotPrimitivesV6SlashingDisputeProof; keyOwnerProof: SpSessionMembershipProof };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `MessageQueue`'s transaction calls
   **/
  messageQueue: {
    /**
     * See [`Pallet::reap_page`].
     *
     * @param {PolkadotRuntimeParachainsInclusionAggregateMessageOrigin} messageOrigin
     * @param {number} pageIndex
     **/
    reapPage: GenericTxCall<
      (
        messageOrigin: PolkadotRuntimeParachainsInclusionAggregateMessageOrigin,
        pageIndex: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'MessageQueue';
        palletCall: {
          name: 'ReapPage';
          params: { messageOrigin: PolkadotRuntimeParachainsInclusionAggregateMessageOrigin; pageIndex: number };
        };
      }>
    >;

    /**
     * See [`Pallet::execute_overweight`].
     *
     * @param {PolkadotRuntimeParachainsInclusionAggregateMessageOrigin} messageOrigin
     * @param {number} page
     * @param {number} index
     * @param {SpWeightsWeightV2Weight} weightLimit
     **/
    executeOverweight: GenericTxCall<
      (
        messageOrigin: PolkadotRuntimeParachainsInclusionAggregateMessageOrigin,
        page: number,
        index: number,
        weightLimit: SpWeightsWeightV2Weight,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'MessageQueue';
        palletCall: {
          name: 'ExecuteOverweight';
          params: {
            messageOrigin: PolkadotRuntimeParachainsInclusionAggregateMessageOrigin;
            page: number;
            index: number;
            weightLimit: SpWeightsWeightV2Weight;
          };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `OnDemandAssignmentProvider`'s transaction calls
   **/
  onDemandAssignmentProvider: {
    /**
     * See [`Pallet::place_order_allow_death`].
     *
     * @param {bigint} maxAmount
     * @param {PolkadotParachainPrimitivesPrimitivesId} paraId
     **/
    placeOrderAllowDeath: GenericTxCall<
      (
        maxAmount: bigint,
        paraId: PolkadotParachainPrimitivesPrimitivesId,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'OnDemandAssignmentProvider';
        palletCall: {
          name: 'PlaceOrderAllowDeath';
          params: { maxAmount: bigint; paraId: PolkadotParachainPrimitivesPrimitivesId };
        };
      }>
    >;

    /**
     * See [`Pallet::place_order_keep_alive`].
     *
     * @param {bigint} maxAmount
     * @param {PolkadotParachainPrimitivesPrimitivesId} paraId
     **/
    placeOrderKeepAlive: GenericTxCall<
      (
        maxAmount: bigint,
        paraId: PolkadotParachainPrimitivesPrimitivesId,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'OnDemandAssignmentProvider';
        palletCall: {
          name: 'PlaceOrderKeepAlive';
          params: { maxAmount: bigint; paraId: PolkadotParachainPrimitivesPrimitivesId };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `Registrar`'s transaction calls
   **/
  registrar: {
    /**
     * See [`Pallet::register`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} id
     * @param {PolkadotParachainPrimitivesPrimitivesHeadData} genesisHead
     * @param {PolkadotParachainPrimitivesPrimitivesValidationCode} validationCode
     **/
    register: GenericTxCall<
      (
        id: PolkadotParachainPrimitivesPrimitivesId,
        genesisHead: PolkadotParachainPrimitivesPrimitivesHeadData,
        validationCode: PolkadotParachainPrimitivesPrimitivesValidationCode,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Registrar';
        palletCall: {
          name: 'Register';
          params: {
            id: PolkadotParachainPrimitivesPrimitivesId;
            genesisHead: PolkadotParachainPrimitivesPrimitivesHeadData;
            validationCode: PolkadotParachainPrimitivesPrimitivesValidationCode;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::force_register`].
     *
     * @param {AccountId32Like} who
     * @param {bigint} deposit
     * @param {PolkadotParachainPrimitivesPrimitivesId} id
     * @param {PolkadotParachainPrimitivesPrimitivesHeadData} genesisHead
     * @param {PolkadotParachainPrimitivesPrimitivesValidationCode} validationCode
     **/
    forceRegister: GenericTxCall<
      (
        who: AccountId32Like,
        deposit: bigint,
        id: PolkadotParachainPrimitivesPrimitivesId,
        genesisHead: PolkadotParachainPrimitivesPrimitivesHeadData,
        validationCode: PolkadotParachainPrimitivesPrimitivesValidationCode,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Registrar';
        palletCall: {
          name: 'ForceRegister';
          params: {
            who: AccountId32Like;
            deposit: bigint;
            id: PolkadotParachainPrimitivesPrimitivesId;
            genesisHead: PolkadotParachainPrimitivesPrimitivesHeadData;
            validationCode: PolkadotParachainPrimitivesPrimitivesValidationCode;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::deregister`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} id
     **/
    deregister: GenericTxCall<
      (id: PolkadotParachainPrimitivesPrimitivesId) => ChainSubmittableExtrinsic<{
        pallet: 'Registrar';
        palletCall: {
          name: 'Deregister';
          params: { id: PolkadotParachainPrimitivesPrimitivesId };
        };
      }>
    >;

    /**
     * See [`Pallet::swap`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} id
     * @param {PolkadotParachainPrimitivesPrimitivesId} other
     **/
    swap: GenericTxCall<
      (
        id: PolkadotParachainPrimitivesPrimitivesId,
        other: PolkadotParachainPrimitivesPrimitivesId,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Registrar';
        palletCall: {
          name: 'Swap';
          params: { id: PolkadotParachainPrimitivesPrimitivesId; other: PolkadotParachainPrimitivesPrimitivesId };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_lock`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} para
     **/
    removeLock: GenericTxCall<
      (para: PolkadotParachainPrimitivesPrimitivesId) => ChainSubmittableExtrinsic<{
        pallet: 'Registrar';
        palletCall: {
          name: 'RemoveLock';
          params: { para: PolkadotParachainPrimitivesPrimitivesId };
        };
      }>
    >;

    /**
     * See [`Pallet::reserve`].
     *
     **/
    reserve: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'Registrar';
        palletCall: {
          name: 'Reserve';
        };
      }>
    >;

    /**
     * See [`Pallet::add_lock`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} para
     **/
    addLock: GenericTxCall<
      (para: PolkadotParachainPrimitivesPrimitivesId) => ChainSubmittableExtrinsic<{
        pallet: 'Registrar';
        palletCall: {
          name: 'AddLock';
          params: { para: PolkadotParachainPrimitivesPrimitivesId };
        };
      }>
    >;

    /**
     * See [`Pallet::schedule_code_upgrade`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} para
     * @param {PolkadotParachainPrimitivesPrimitivesValidationCode} newCode
     **/
    scheduleCodeUpgrade: GenericTxCall<
      (
        para: PolkadotParachainPrimitivesPrimitivesId,
        newCode: PolkadotParachainPrimitivesPrimitivesValidationCode,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Registrar';
        palletCall: {
          name: 'ScheduleCodeUpgrade';
          params: {
            para: PolkadotParachainPrimitivesPrimitivesId;
            newCode: PolkadotParachainPrimitivesPrimitivesValidationCode;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::set_current_head`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} para
     * @param {PolkadotParachainPrimitivesPrimitivesHeadData} newHead
     **/
    setCurrentHead: GenericTxCall<
      (
        para: PolkadotParachainPrimitivesPrimitivesId,
        newHead: PolkadotParachainPrimitivesPrimitivesHeadData,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Registrar';
        palletCall: {
          name: 'SetCurrentHead';
          params: {
            para: PolkadotParachainPrimitivesPrimitivesId;
            newHead: PolkadotParachainPrimitivesPrimitivesHeadData;
          };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `Slots`'s transaction calls
   **/
  slots: {
    /**
     * See [`Pallet::force_lease`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} para
     * @param {AccountId32Like} leaser
     * @param {bigint} amount
     * @param {number} periodBegin
     * @param {number} periodCount
     **/
    forceLease: GenericTxCall<
      (
        para: PolkadotParachainPrimitivesPrimitivesId,
        leaser: AccountId32Like,
        amount: bigint,
        periodBegin: number,
        periodCount: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Slots';
        palletCall: {
          name: 'ForceLease';
          params: {
            para: PolkadotParachainPrimitivesPrimitivesId;
            leaser: AccountId32Like;
            amount: bigint;
            periodBegin: number;
            periodCount: number;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::clear_all_leases`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} para
     **/
    clearAllLeases: GenericTxCall<
      (para: PolkadotParachainPrimitivesPrimitivesId) => ChainSubmittableExtrinsic<{
        pallet: 'Slots';
        palletCall: {
          name: 'ClearAllLeases';
          params: { para: PolkadotParachainPrimitivesPrimitivesId };
        };
      }>
    >;

    /**
     * See [`Pallet::trigger_onboard`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} para
     **/
    triggerOnboard: GenericTxCall<
      (para: PolkadotParachainPrimitivesPrimitivesId) => ChainSubmittableExtrinsic<{
        pallet: 'Slots';
        palletCall: {
          name: 'TriggerOnboard';
          params: { para: PolkadotParachainPrimitivesPrimitivesId };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `Auctions`'s transaction calls
   **/
  auctions: {
    /**
     * See [`Pallet::new_auction`].
     *
     * @param {number} duration
     * @param {number} leasePeriodIndex
     **/
    newAuction: GenericTxCall<
      (
        duration: number,
        leasePeriodIndex: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Auctions';
        palletCall: {
          name: 'NewAuction';
          params: { duration: number; leasePeriodIndex: number };
        };
      }>
    >;

    /**
     * See [`Pallet::bid`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} para
     * @param {number} auctionIndex
     * @param {number} firstSlot
     * @param {number} lastSlot
     * @param {bigint} amount
     **/
    bid: GenericTxCall<
      (
        para: PolkadotParachainPrimitivesPrimitivesId,
        auctionIndex: number,
        firstSlot: number,
        lastSlot: number,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Auctions';
        palletCall: {
          name: 'Bid';
          params: {
            para: PolkadotParachainPrimitivesPrimitivesId;
            auctionIndex: number;
            firstSlot: number;
            lastSlot: number;
            amount: bigint;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::cancel_auction`].
     *
     **/
    cancelAuction: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'Auctions';
        palletCall: {
          name: 'CancelAuction';
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `Crowdloan`'s transaction calls
   **/
  crowdloan: {
    /**
     * See [`Pallet::create`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} index
     * @param {bigint} cap
     * @param {number} firstPeriod
     * @param {number} lastPeriod
     * @param {number} end
     * @param {SpRuntimeMultiSigner | undefined} verifier
     **/
    create: GenericTxCall<
      (
        index: PolkadotParachainPrimitivesPrimitivesId,
        cap: bigint,
        firstPeriod: number,
        lastPeriod: number,
        end: number,
        verifier: SpRuntimeMultiSigner | undefined,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Crowdloan';
        palletCall: {
          name: 'Create';
          params: {
            index: PolkadotParachainPrimitivesPrimitivesId;
            cap: bigint;
            firstPeriod: number;
            lastPeriod: number;
            end: number;
            verifier: SpRuntimeMultiSigner | undefined;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::contribute`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} index
     * @param {bigint} value
     * @param {SpRuntimeMultiSignature | undefined} signature
     **/
    contribute: GenericTxCall<
      (
        index: PolkadotParachainPrimitivesPrimitivesId,
        value: bigint,
        signature: SpRuntimeMultiSignature | undefined,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Crowdloan';
        palletCall: {
          name: 'Contribute';
          params: {
            index: PolkadotParachainPrimitivesPrimitivesId;
            value: bigint;
            signature: SpRuntimeMultiSignature | undefined;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::withdraw`].
     *
     * @param {AccountId32Like} who
     * @param {PolkadotParachainPrimitivesPrimitivesId} index
     **/
    withdraw: GenericTxCall<
      (
        who: AccountId32Like,
        index: PolkadotParachainPrimitivesPrimitivesId,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Crowdloan';
        palletCall: {
          name: 'Withdraw';
          params: { who: AccountId32Like; index: PolkadotParachainPrimitivesPrimitivesId };
        };
      }>
    >;

    /**
     * See [`Pallet::refund`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} index
     **/
    refund: GenericTxCall<
      (index: PolkadotParachainPrimitivesPrimitivesId) => ChainSubmittableExtrinsic<{
        pallet: 'Crowdloan';
        palletCall: {
          name: 'Refund';
          params: { index: PolkadotParachainPrimitivesPrimitivesId };
        };
      }>
    >;

    /**
     * See [`Pallet::dissolve`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} index
     **/
    dissolve: GenericTxCall<
      (index: PolkadotParachainPrimitivesPrimitivesId) => ChainSubmittableExtrinsic<{
        pallet: 'Crowdloan';
        palletCall: {
          name: 'Dissolve';
          params: { index: PolkadotParachainPrimitivesPrimitivesId };
        };
      }>
    >;

    /**
     * See [`Pallet::edit`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} index
     * @param {bigint} cap
     * @param {number} firstPeriod
     * @param {number} lastPeriod
     * @param {number} end
     * @param {SpRuntimeMultiSigner | undefined} verifier
     **/
    edit: GenericTxCall<
      (
        index: PolkadotParachainPrimitivesPrimitivesId,
        cap: bigint,
        firstPeriod: number,
        lastPeriod: number,
        end: number,
        verifier: SpRuntimeMultiSigner | undefined,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Crowdloan';
        palletCall: {
          name: 'Edit';
          params: {
            index: PolkadotParachainPrimitivesPrimitivesId;
            cap: bigint;
            firstPeriod: number;
            lastPeriod: number;
            end: number;
            verifier: SpRuntimeMultiSigner | undefined;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::add_memo`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} index
     * @param {BytesLike} memo
     **/
    addMemo: GenericTxCall<
      (
        index: PolkadotParachainPrimitivesPrimitivesId,
        memo: BytesLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Crowdloan';
        palletCall: {
          name: 'AddMemo';
          params: { index: PolkadotParachainPrimitivesPrimitivesId; memo: BytesLike };
        };
      }>
    >;

    /**
     * See [`Pallet::poke`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} index
     **/
    poke: GenericTxCall<
      (index: PolkadotParachainPrimitivesPrimitivesId) => ChainSubmittableExtrinsic<{
        pallet: 'Crowdloan';
        palletCall: {
          name: 'Poke';
          params: { index: PolkadotParachainPrimitivesPrimitivesId };
        };
      }>
    >;

    /**
     * See [`Pallet::contribute_all`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} index
     * @param {SpRuntimeMultiSignature | undefined} signature
     **/
    contributeAll: GenericTxCall<
      (
        index: PolkadotParachainPrimitivesPrimitivesId,
        signature: SpRuntimeMultiSignature | undefined,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Crowdloan';
        palletCall: {
          name: 'ContributeAll';
          params: { index: PolkadotParachainPrimitivesPrimitivesId; signature: SpRuntimeMultiSignature | undefined };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `Coretime`'s transaction calls
   **/
  coretime: {
    /**
     * See [`Pallet::request_core_count`].
     *
     * @param {number} count
     **/
    requestCoreCount: GenericTxCall<
      (count: number) => ChainSubmittableExtrinsic<{
        pallet: 'Coretime';
        palletCall: {
          name: 'RequestCoreCount';
          params: { count: number };
        };
      }>
    >;

    /**
     * See [`Pallet::assign_core`].
     *
     * @param {number} core
     * @param {number} begin
     * @param {Array<[PalletBrokerCoretimeInterfaceCoreAssignment, PolkadotRuntimeParachainsAssignerCoretimePartsOf57600]>} assignment
     * @param {number | undefined} endHint
     **/
    assignCore: GenericTxCall<
      (
        core: number,
        begin: number,
        assignment: Array<
          [PalletBrokerCoretimeInterfaceCoreAssignment, PolkadotRuntimeParachainsAssignerCoretimePartsOf57600]
        >,
        endHint: number | undefined,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Coretime';
        palletCall: {
          name: 'AssignCore';
          params: {
            core: number;
            begin: number;
            assignment: Array<
              [PalletBrokerCoretimeInterfaceCoreAssignment, PolkadotRuntimeParachainsAssignerCoretimePartsOf57600]
            >;
            endHint: number | undefined;
          };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `XcmPallet`'s transaction calls
   **/
  xcmPallet: {
    /**
     * See [`Pallet::send`].
     *
     * @param {XcmVersionedLocation} dest
     * @param {XcmVersionedXcm} message
     **/
    send: GenericTxCall<
      (
        dest: XcmVersionedLocation,
        message: XcmVersionedXcm,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'XcmPallet';
        palletCall: {
          name: 'Send';
          params: { dest: XcmVersionedLocation; message: XcmVersionedXcm };
        };
      }>
    >;

    /**
     * See [`Pallet::teleport_assets`].
     *
     * @param {XcmVersionedLocation} dest
     * @param {XcmVersionedLocation} beneficiary
     * @param {XcmVersionedAssets} assets
     * @param {number} feeAssetItem
     **/
    teleportAssets: GenericTxCall<
      (
        dest: XcmVersionedLocation,
        beneficiary: XcmVersionedLocation,
        assets: XcmVersionedAssets,
        feeAssetItem: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'XcmPallet';
        palletCall: {
          name: 'TeleportAssets';
          params: {
            dest: XcmVersionedLocation;
            beneficiary: XcmVersionedLocation;
            assets: XcmVersionedAssets;
            feeAssetItem: number;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::reserve_transfer_assets`].
     *
     * @param {XcmVersionedLocation} dest
     * @param {XcmVersionedLocation} beneficiary
     * @param {XcmVersionedAssets} assets
     * @param {number} feeAssetItem
     **/
    reserveTransferAssets: GenericTxCall<
      (
        dest: XcmVersionedLocation,
        beneficiary: XcmVersionedLocation,
        assets: XcmVersionedAssets,
        feeAssetItem: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'XcmPallet';
        palletCall: {
          name: 'ReserveTransferAssets';
          params: {
            dest: XcmVersionedLocation;
            beneficiary: XcmVersionedLocation;
            assets: XcmVersionedAssets;
            feeAssetItem: number;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::execute`].
     *
     * @param {XcmVersionedXcm} message
     * @param {SpWeightsWeightV2Weight} maxWeight
     **/
    execute: GenericTxCall<
      (
        message: XcmVersionedXcm,
        maxWeight: SpWeightsWeightV2Weight,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'XcmPallet';
        palletCall: {
          name: 'Execute';
          params: { message: XcmVersionedXcm; maxWeight: SpWeightsWeightV2Weight };
        };
      }>
    >;

    /**
     * See [`Pallet::force_xcm_version`].
     *
     * @param {StagingXcmV4Location} location
     * @param {number} version
     **/
    forceXcmVersion: GenericTxCall<
      (
        location: StagingXcmV4Location,
        version: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'XcmPallet';
        palletCall: {
          name: 'ForceXcmVersion';
          params: { location: StagingXcmV4Location; version: number };
        };
      }>
    >;

    /**
     * See [`Pallet::force_default_xcm_version`].
     *
     * @param {number | undefined} maybeXcmVersion
     **/
    forceDefaultXcmVersion: GenericTxCall<
      (maybeXcmVersion: number | undefined) => ChainSubmittableExtrinsic<{
        pallet: 'XcmPallet';
        palletCall: {
          name: 'ForceDefaultXcmVersion';
          params: { maybeXcmVersion: number | undefined };
        };
      }>
    >;

    /**
     * See [`Pallet::force_subscribe_version_notify`].
     *
     * @param {XcmVersionedLocation} location
     **/
    forceSubscribeVersionNotify: GenericTxCall<
      (location: XcmVersionedLocation) => ChainSubmittableExtrinsic<{
        pallet: 'XcmPallet';
        palletCall: {
          name: 'ForceSubscribeVersionNotify';
          params: { location: XcmVersionedLocation };
        };
      }>
    >;

    /**
     * See [`Pallet::force_unsubscribe_version_notify`].
     *
     * @param {XcmVersionedLocation} location
     **/
    forceUnsubscribeVersionNotify: GenericTxCall<
      (location: XcmVersionedLocation) => ChainSubmittableExtrinsic<{
        pallet: 'XcmPallet';
        palletCall: {
          name: 'ForceUnsubscribeVersionNotify';
          params: { location: XcmVersionedLocation };
        };
      }>
    >;

    /**
     * See [`Pallet::limited_reserve_transfer_assets`].
     *
     * @param {XcmVersionedLocation} dest
     * @param {XcmVersionedLocation} beneficiary
     * @param {XcmVersionedAssets} assets
     * @param {number} feeAssetItem
     * @param {XcmV3WeightLimit} weightLimit
     **/
    limitedReserveTransferAssets: GenericTxCall<
      (
        dest: XcmVersionedLocation,
        beneficiary: XcmVersionedLocation,
        assets: XcmVersionedAssets,
        feeAssetItem: number,
        weightLimit: XcmV3WeightLimit,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'XcmPallet';
        palletCall: {
          name: 'LimitedReserveTransferAssets';
          params: {
            dest: XcmVersionedLocation;
            beneficiary: XcmVersionedLocation;
            assets: XcmVersionedAssets;
            feeAssetItem: number;
            weightLimit: XcmV3WeightLimit;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::limited_teleport_assets`].
     *
     * @param {XcmVersionedLocation} dest
     * @param {XcmVersionedLocation} beneficiary
     * @param {XcmVersionedAssets} assets
     * @param {number} feeAssetItem
     * @param {XcmV3WeightLimit} weightLimit
     **/
    limitedTeleportAssets: GenericTxCall<
      (
        dest: XcmVersionedLocation,
        beneficiary: XcmVersionedLocation,
        assets: XcmVersionedAssets,
        feeAssetItem: number,
        weightLimit: XcmV3WeightLimit,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'XcmPallet';
        palletCall: {
          name: 'LimitedTeleportAssets';
          params: {
            dest: XcmVersionedLocation;
            beneficiary: XcmVersionedLocation;
            assets: XcmVersionedAssets;
            feeAssetItem: number;
            weightLimit: XcmV3WeightLimit;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::force_suspension`].
     *
     * @param {boolean} suspended
     **/
    forceSuspension: GenericTxCall<
      (suspended: boolean) => ChainSubmittableExtrinsic<{
        pallet: 'XcmPallet';
        palletCall: {
          name: 'ForceSuspension';
          params: { suspended: boolean };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer_assets`].
     *
     * @param {XcmVersionedLocation} dest
     * @param {XcmVersionedLocation} beneficiary
     * @param {XcmVersionedAssets} assets
     * @param {number} feeAssetItem
     * @param {XcmV3WeightLimit} weightLimit
     **/
    transferAssets: GenericTxCall<
      (
        dest: XcmVersionedLocation,
        beneficiary: XcmVersionedLocation,
        assets: XcmVersionedAssets,
        feeAssetItem: number,
        weightLimit: XcmV3WeightLimit,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'XcmPallet';
        palletCall: {
          name: 'TransferAssets';
          params: {
            dest: XcmVersionedLocation;
            beneficiary: XcmVersionedLocation;
            assets: XcmVersionedAssets;
            feeAssetItem: number;
            weightLimit: XcmV3WeightLimit;
          };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `Beefy`'s transaction calls
   **/
  beefy: {
    /**
     * See [`Pallet::report_equivocation`].
     *
     * @param {SpConsensusBeefyEquivocationProof} equivocationProof
     * @param {SpSessionMembershipProof} keyOwnerProof
     **/
    reportEquivocation: GenericTxCall<
      (
        equivocationProof: SpConsensusBeefyEquivocationProof,
        keyOwnerProof: SpSessionMembershipProof,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Beefy';
        palletCall: {
          name: 'ReportEquivocation';
          params: { equivocationProof: SpConsensusBeefyEquivocationProof; keyOwnerProof: SpSessionMembershipProof };
        };
      }>
    >;

    /**
     * See [`Pallet::report_equivocation_unsigned`].
     *
     * @param {SpConsensusBeefyEquivocationProof} equivocationProof
     * @param {SpSessionMembershipProof} keyOwnerProof
     **/
    reportEquivocationUnsigned: GenericTxCall<
      (
        equivocationProof: SpConsensusBeefyEquivocationProof,
        keyOwnerProof: SpSessionMembershipProof,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Beefy';
        palletCall: {
          name: 'ReportEquivocationUnsigned';
          params: { equivocationProof: SpConsensusBeefyEquivocationProof; keyOwnerProof: SpSessionMembershipProof };
        };
      }>
    >;

    /**
     * See [`Pallet::set_new_genesis`].
     *
     * @param {number} delayInBlocks
     **/
    setNewGenesis: GenericTxCall<
      (delayInBlocks: number) => ChainSubmittableExtrinsic<{
        pallet: 'Beefy';
        palletCall: {
          name: 'SetNewGenesis';
          params: { delayInBlocks: number };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `IdentityMigrator`'s transaction calls
   **/
  identityMigrator: {
    /**
     * See [`Pallet::reap_identity`].
     *
     * @param {AccountId32Like} who
     **/
    reapIdentity: GenericTxCall<
      (who: AccountId32Like) => ChainSubmittableExtrinsic<{
        pallet: 'IdentityMigrator';
        palletCall: {
          name: 'ReapIdentity';
          params: { who: AccountId32Like };
        };
      }>
    >;

    /**
     * See [`Pallet::poke_deposit`].
     *
     * @param {AccountId32Like} who
     **/
    pokeDeposit: GenericTxCall<
      (who: AccountId32Like) => ChainSubmittableExtrinsic<{
        pallet: 'IdentityMigrator';
        palletCall: {
          name: 'PokeDeposit';
          params: { who: AccountId32Like };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `ParasSudoWrapper`'s transaction calls
   **/
  parasSudoWrapper: {
    /**
     * See [`Pallet::sudo_schedule_para_initialize`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} id
     * @param {PolkadotRuntimeParachainsParasParaGenesisArgs} genesis
     **/
    sudoScheduleParaInitialize: GenericTxCall<
      (
        id: PolkadotParachainPrimitivesPrimitivesId,
        genesis: PolkadotRuntimeParachainsParasParaGenesisArgs,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ParasSudoWrapper';
        palletCall: {
          name: 'SudoScheduleParaInitialize';
          params: {
            id: PolkadotParachainPrimitivesPrimitivesId;
            genesis: PolkadotRuntimeParachainsParasParaGenesisArgs;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::sudo_schedule_para_cleanup`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} id
     **/
    sudoScheduleParaCleanup: GenericTxCall<
      (id: PolkadotParachainPrimitivesPrimitivesId) => ChainSubmittableExtrinsic<{
        pallet: 'ParasSudoWrapper';
        palletCall: {
          name: 'SudoScheduleParaCleanup';
          params: { id: PolkadotParachainPrimitivesPrimitivesId };
        };
      }>
    >;

    /**
     * See [`Pallet::sudo_schedule_parathread_upgrade`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} id
     **/
    sudoScheduleParathreadUpgrade: GenericTxCall<
      (id: PolkadotParachainPrimitivesPrimitivesId) => ChainSubmittableExtrinsic<{
        pallet: 'ParasSudoWrapper';
        palletCall: {
          name: 'SudoScheduleParathreadUpgrade';
          params: { id: PolkadotParachainPrimitivesPrimitivesId };
        };
      }>
    >;

    /**
     * See [`Pallet::sudo_schedule_parachain_downgrade`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} id
     **/
    sudoScheduleParachainDowngrade: GenericTxCall<
      (id: PolkadotParachainPrimitivesPrimitivesId) => ChainSubmittableExtrinsic<{
        pallet: 'ParasSudoWrapper';
        palletCall: {
          name: 'SudoScheduleParachainDowngrade';
          params: { id: PolkadotParachainPrimitivesPrimitivesId };
        };
      }>
    >;

    /**
     * See [`Pallet::sudo_queue_downward_xcm`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} id
     * @param {XcmVersionedXcm} xcm
     **/
    sudoQueueDownwardXcm: GenericTxCall<
      (
        id: PolkadotParachainPrimitivesPrimitivesId,
        xcm: XcmVersionedXcm,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ParasSudoWrapper';
        palletCall: {
          name: 'SudoQueueDownwardXcm';
          params: { id: PolkadotParachainPrimitivesPrimitivesId; xcm: XcmVersionedXcm };
        };
      }>
    >;

    /**
     * See [`Pallet::sudo_establish_hrmp_channel`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} sender
     * @param {PolkadotParachainPrimitivesPrimitivesId} recipient
     * @param {number} maxCapacity
     * @param {number} maxMessageSize
     **/
    sudoEstablishHrmpChannel: GenericTxCall<
      (
        sender: PolkadotParachainPrimitivesPrimitivesId,
        recipient: PolkadotParachainPrimitivesPrimitivesId,
        maxCapacity: number,
        maxMessageSize: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ParasSudoWrapper';
        palletCall: {
          name: 'SudoEstablishHrmpChannel';
          params: {
            sender: PolkadotParachainPrimitivesPrimitivesId;
            recipient: PolkadotParachainPrimitivesPrimitivesId;
            maxCapacity: number;
            maxMessageSize: number;
          };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `AssignedSlots`'s transaction calls
   **/
  assignedSlots: {
    /**
     * See [`Pallet::assign_perm_parachain_slot`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} id
     **/
    assignPermParachainSlot: GenericTxCall<
      (id: PolkadotParachainPrimitivesPrimitivesId) => ChainSubmittableExtrinsic<{
        pallet: 'AssignedSlots';
        palletCall: {
          name: 'AssignPermParachainSlot';
          params: { id: PolkadotParachainPrimitivesPrimitivesId };
        };
      }>
    >;

    /**
     * See [`Pallet::assign_temp_parachain_slot`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} id
     * @param {PolkadotRuntimeCommonAssignedSlotsSlotLeasePeriodStart} leasePeriodStart
     **/
    assignTempParachainSlot: GenericTxCall<
      (
        id: PolkadotParachainPrimitivesPrimitivesId,
        leasePeriodStart: PolkadotRuntimeCommonAssignedSlotsSlotLeasePeriodStart,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'AssignedSlots';
        palletCall: {
          name: 'AssignTempParachainSlot';
          params: {
            id: PolkadotParachainPrimitivesPrimitivesId;
            leasePeriodStart: PolkadotRuntimeCommonAssignedSlotsSlotLeasePeriodStart;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::unassign_parachain_slot`].
     *
     * @param {PolkadotParachainPrimitivesPrimitivesId} id
     **/
    unassignParachainSlot: GenericTxCall<
      (id: PolkadotParachainPrimitivesPrimitivesId) => ChainSubmittableExtrinsic<{
        pallet: 'AssignedSlots';
        palletCall: {
          name: 'UnassignParachainSlot';
          params: { id: PolkadotParachainPrimitivesPrimitivesId };
        };
      }>
    >;

    /**
     * See [`Pallet::set_max_permanent_slots`].
     *
     * @param {number} slots
     **/
    setMaxPermanentSlots: GenericTxCall<
      (slots: number) => ChainSubmittableExtrinsic<{
        pallet: 'AssignedSlots';
        palletCall: {
          name: 'SetMaxPermanentSlots';
          params: { slots: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_max_temporary_slots`].
     *
     * @param {number} slots
     **/
    setMaxTemporarySlots: GenericTxCall<
      (slots: number) => ChainSubmittableExtrinsic<{
        pallet: 'AssignedSlots';
        palletCall: {
          name: 'SetMaxTemporarySlots';
          params: { slots: number };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `ValidatorManager`'s transaction calls
   **/
  validatorManager: {
    /**
     * See [`Pallet::register_validators`].
     *
     * @param {Array<AccountId32Like>} validators
     **/
    registerValidators: GenericTxCall<
      (validators: Array<AccountId32Like>) => ChainSubmittableExtrinsic<{
        pallet: 'ValidatorManager';
        palletCall: {
          name: 'RegisterValidators';
          params: { validators: Array<AccountId32Like> };
        };
      }>
    >;

    /**
     * See [`Pallet::deregister_validators`].
     *
     * @param {Array<AccountId32Like>} validators
     **/
    deregisterValidators: GenericTxCall<
      (validators: Array<AccountId32Like>) => ChainSubmittableExtrinsic<{
        pallet: 'ValidatorManager';
        palletCall: {
          name: 'DeregisterValidators';
          params: { validators: Array<AccountId32Like> };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `StateTrieMigration`'s transaction calls
   **/
  stateTrieMigration: {
    /**
     * See [`Pallet::control_auto_migration`].
     *
     * @param {PalletStateTrieMigrationMigrationLimits | undefined} maybeConfig
     **/
    controlAutoMigration: GenericTxCall<
      (maybeConfig: PalletStateTrieMigrationMigrationLimits | undefined) => ChainSubmittableExtrinsic<{
        pallet: 'StateTrieMigration';
        palletCall: {
          name: 'ControlAutoMigration';
          params: { maybeConfig: PalletStateTrieMigrationMigrationLimits | undefined };
        };
      }>
    >;

    /**
     * See [`Pallet::continue_migrate`].
     *
     * @param {PalletStateTrieMigrationMigrationLimits} limits
     * @param {number} realSizeUpper
     * @param {PalletStateTrieMigrationMigrationTask} witnessTask
     **/
    continueMigrate: GenericTxCall<
      (
        limits: PalletStateTrieMigrationMigrationLimits,
        realSizeUpper: number,
        witnessTask: PalletStateTrieMigrationMigrationTask,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'StateTrieMigration';
        palletCall: {
          name: 'ContinueMigrate';
          params: {
            limits: PalletStateTrieMigrationMigrationLimits;
            realSizeUpper: number;
            witnessTask: PalletStateTrieMigrationMigrationTask;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::migrate_custom_top`].
     *
     * @param {Array<BytesLike>} keys
     * @param {number} witnessSize
     **/
    migrateCustomTop: GenericTxCall<
      (
        keys: Array<BytesLike>,
        witnessSize: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'StateTrieMigration';
        palletCall: {
          name: 'MigrateCustomTop';
          params: { keys: Array<BytesLike>; witnessSize: number };
        };
      }>
    >;

    /**
     * See [`Pallet::migrate_custom_child`].
     *
     * @param {BytesLike} root
     * @param {Array<BytesLike>} childKeys
     * @param {number} totalSize
     **/
    migrateCustomChild: GenericTxCall<
      (
        root: BytesLike,
        childKeys: Array<BytesLike>,
        totalSize: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'StateTrieMigration';
        palletCall: {
          name: 'MigrateCustomChild';
          params: { root: BytesLike; childKeys: Array<BytesLike>; totalSize: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_signed_max_limits`].
     *
     * @param {PalletStateTrieMigrationMigrationLimits} limits
     **/
    setSignedMaxLimits: GenericTxCall<
      (limits: PalletStateTrieMigrationMigrationLimits) => ChainSubmittableExtrinsic<{
        pallet: 'StateTrieMigration';
        palletCall: {
          name: 'SetSignedMaxLimits';
          params: { limits: PalletStateTrieMigrationMigrationLimits };
        };
      }>
    >;

    /**
     * See [`Pallet::force_set_progress`].
     *
     * @param {PalletStateTrieMigrationProgress} progressTop
     * @param {PalletStateTrieMigrationProgress} progressChild
     **/
    forceSetProgress: GenericTxCall<
      (
        progressTop: PalletStateTrieMigrationProgress,
        progressChild: PalletStateTrieMigrationProgress,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'StateTrieMigration';
        palletCall: {
          name: 'ForceSetProgress';
          params: { progressTop: PalletStateTrieMigrationProgress; progressChild: PalletStateTrieMigrationProgress };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `RootTesting`'s transaction calls
   **/
  rootTesting: {
    /**
     * See `Pallet::fill_block`.
     *
     * @param {Perbill} ratio
     **/
    fillBlock: GenericTxCall<
      (ratio: Perbill) => ChainSubmittableExtrinsic<{
        pallet: 'RootTesting';
        palletCall: {
          name: 'FillBlock';
          params: { ratio: Perbill };
        };
      }>
    >;

    /**
     * See `Pallet::trigger_defensive`.
     *
     **/
    triggerDefensive: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'RootTesting';
        palletCall: {
          name: 'TriggerDefensive';
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
  /**
   * Pallet `Sudo`'s transaction calls
   **/
  sudo: {
    /**
     * See [`Pallet::sudo`].
     *
     * @param {RococoRuntimeRuntimeCallLike} call
     **/
    sudo: GenericTxCall<
      (call: RococoRuntimeRuntimeCallLike) => ChainSubmittableExtrinsic<{
        pallet: 'Sudo';
        palletCall: {
          name: 'Sudo';
          params: { call: RococoRuntimeRuntimeCallLike };
        };
      }>
    >;

    /**
     * See [`Pallet::sudo_unchecked_weight`].
     *
     * @param {RococoRuntimeRuntimeCallLike} call
     * @param {SpWeightsWeightV2Weight} weight
     **/
    sudoUncheckedWeight: GenericTxCall<
      (
        call: RococoRuntimeRuntimeCallLike,
        weight: SpWeightsWeightV2Weight,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Sudo';
        palletCall: {
          name: 'SudoUncheckedWeight';
          params: { call: RococoRuntimeRuntimeCallLike; weight: SpWeightsWeightV2Weight };
        };
      }>
    >;

    /**
     * See [`Pallet::set_key`].
     *
     * @param {MultiAddressLike} new_
     **/
    setKey: GenericTxCall<
      (new_: MultiAddressLike) => ChainSubmittableExtrinsic<{
        pallet: 'Sudo';
        palletCall: {
          name: 'SetKey';
          params: { new: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::sudo_as`].
     *
     * @param {MultiAddressLike} who
     * @param {RococoRuntimeRuntimeCallLike} call
     **/
    sudoAs: GenericTxCall<
      (
        who: MultiAddressLike,
        call: RococoRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Sudo';
        palletCall: {
          name: 'SudoAs';
          params: { who: MultiAddressLike; call: RococoRuntimeRuntimeCallLike };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_key`].
     *
     **/
    removeKey: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'Sudo';
        palletCall: {
          name: 'RemoveKey';
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<TxCall>;
  };
}
