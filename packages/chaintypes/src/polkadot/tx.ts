// Generated by @delightfuldot/codegen

import type { GenericChainTx, ISubmittableExtrinsic } from '@delightfuldot/types';
import type {
  Bytes,
  FixedBytes,
  H256,
  MultiAddressLike,
  AccountId32Like,
  Percent,
  Perbill,
  EthereumAddressLike,
  Data,
} from '@delightfuldot/codecs';
import type {
  PolkadotRuntimeRuntimeCall,
  SpConsensusSlotsEquivocationProof,
  SpSessionMembershipProof,
  SpConsensusBabeDigestsNextConfigDescriptor,
  PalletStakingRewardDestination,
  PalletStakingValidatorPrefs,
  PalletStakingPalletConfigOp,
  PalletStakingPalletConfigOpU32,
  PalletStakingPalletConfigOpPercent,
  PalletStakingPalletConfigOpPerbill,
  PolkadotRuntimeSessionKeys,
  SpConsensusGrandpaEquivocationProof,
  PalletImOnlineHeartbeat,
  PalletImOnlineSr25519AppSr25519Signature,
  PalletConvictionVotingVoteAccountVote,
  PalletConvictionVotingConviction,
  PolkadotRuntimeOriginCaller,
  FrameSupportPreimagesBounded,
  FrameSupportScheduleDispatchTime,
  SpWeightsWeightV2Weight,
  PolkadotRuntimeCommonClaimsEcdsaSignature,
  PolkadotRuntimeCommonClaimsStatementKind,
  PalletVestingVestingInfo,
  PalletIdentityIdentityInfo,
  PalletIdentityBitFlags,
  PalletIdentityJudgement,
  PolkadotRuntimeProxyType,
  PalletMultisigTimepoint,
  PalletElectionProviderMultiPhaseRawSolution,
  PalletElectionProviderMultiPhaseSolutionOrSnapshotSize,
  SpNposElectionsElectionScore,
  SpNposElectionsSupport,
  PalletNominationPoolsBondExtra,
  PalletNominationPoolsPoolState,
  PalletNominationPoolsConfigOp,
  PalletNominationPoolsConfigOpU32,
  PalletNominationPoolsConfigOpPerbill,
  PalletNominationPoolsConfigOp004,
  PalletNominationPoolsClaimPermission,
  PalletNominationPoolsCommissionChangeRate,
  PolkadotPrimitivesVstagingAsyncBackingParams,
  PolkadotPrimitivesV5ExecutorParams,
  PolkadotPrimitivesV5InherentData,
  PolkadotParachainPrimitivesPrimitivesId,
  PolkadotParachainPrimitivesPrimitivesValidationCode,
  PolkadotParachainPrimitivesPrimitivesHeadData,
  PolkadotParachainPrimitivesPrimitivesValidationCodeHash,
  PolkadotPrimitivesV5PvfCheckStatement,
  PolkadotPrimitivesV5ValidatorAppSignature,
  PolkadotParachainPrimitivesPrimitivesHrmpChannelId,
  PolkadotPrimitivesV5SlashingDisputeProof,
  SpRuntimeMultiSigner,
  SpRuntimeMultiSignature,
  XcmVersionedMultiLocation,
  XcmVersionedXcm,
  XcmVersionedMultiAssets,
  StagingXcmV3MultilocationMultiLocation,
  XcmV3WeightLimit,
  PolkadotRuntimeParachainsInclusionAggregateMessageOrigin,
} from './types';

export interface ChainTx extends GenericChainTx {
  system: {
    /**
     * See [`Pallet::remark`].
     *
     * @param remark
     **/
    remark(remark: Bytes): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_heap_pages`].
     *
     * @param pages
     **/
    setHeapPages(pages: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_code`].
     *
     * @param code
     **/
    setCode(code: Bytes): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_code_without_checks`].
     *
     * @param code
     **/
    setCodeWithoutChecks(code: Bytes): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_storage`].
     *
     * @param items
     **/
    setStorage(items: Array<[Bytes, Bytes]>): ISubmittableExtrinsic;

    /**
     * See [`Pallet::kill_storage`].
     *
     * @param keys
     **/
    killStorage(keys: Array<Bytes>): ISubmittableExtrinsic;

    /**
     * See [`Pallet::kill_prefix`].
     *
     * @param prefix
     * @param subkeys
     **/
    killPrefix(prefix: Bytes, subkeys: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::remark_with_event`].
     *
     * @param remark
     **/
    remarkWithEvent(remark: Bytes): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  scheduler: {
    /**
     * See [`Pallet::schedule`].
     *
     * @param when
     * @param maybePeriodic
     * @param priority
     * @param call
     **/
    schedule(
      when: number,
      maybePeriodic: [number, number] | undefined,
      priority: number,
      call: PolkadotRuntimeRuntimeCall,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::cancel`].
     *
     * @param when
     * @param index
     **/
    cancel(when: number, index: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::schedule_named`].
     *
     * @param id
     * @param when
     * @param maybePeriodic
     * @param priority
     * @param call
     **/
    scheduleNamed(
      id: FixedBytes<32>,
      when: number,
      maybePeriodic: [number, number] | undefined,
      priority: number,
      call: PolkadotRuntimeRuntimeCall,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::cancel_named`].
     *
     * @param id
     **/
    cancelNamed(id: FixedBytes<32>): ISubmittableExtrinsic;

    /**
     * See [`Pallet::schedule_after`].
     *
     * @param after
     * @param maybePeriodic
     * @param priority
     * @param call
     **/
    scheduleAfter(
      after: number,
      maybePeriodic: [number, number] | undefined,
      priority: number,
      call: PolkadotRuntimeRuntimeCall,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::schedule_named_after`].
     *
     * @param id
     * @param after
     * @param maybePeriodic
     * @param priority
     * @param call
     **/
    scheduleNamedAfter(
      id: FixedBytes<32>,
      after: number,
      maybePeriodic: [number, number] | undefined,
      priority: number,
      call: PolkadotRuntimeRuntimeCall,
    ): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  preimage: {
    /**
     * See [`Pallet::note_preimage`].
     *
     * @param bytes
     **/
    notePreimage(bytes: Bytes): ISubmittableExtrinsic;

    /**
     * See [`Pallet::unnote_preimage`].
     *
     * @param hash
     **/
    unnotePreimage(hash: H256): ISubmittableExtrinsic;

    /**
     * See [`Pallet::request_preimage`].
     *
     * @param hash
     **/
    requestPreimage(hash: H256): ISubmittableExtrinsic;

    /**
     * See [`Pallet::unrequest_preimage`].
     *
     * @param hash
     **/
    unrequestPreimage(hash: H256): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  babe: {
    /**
     * See [`Pallet::report_equivocation`].
     *
     * @param equivocationProof
     * @param keyOwnerProof
     **/
    reportEquivocation(
      equivocationProof: SpConsensusSlotsEquivocationProof,
      keyOwnerProof: SpSessionMembershipProof,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::report_equivocation_unsigned`].
     *
     * @param equivocationProof
     * @param keyOwnerProof
     **/
    reportEquivocationUnsigned(
      equivocationProof: SpConsensusSlotsEquivocationProof,
      keyOwnerProof: SpSessionMembershipProof,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::plan_config_change`].
     *
     * @param config
     **/
    planConfigChange(config: SpConsensusBabeDigestsNextConfigDescriptor): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  timestamp: {
    /**
     * See [`Pallet::set`].
     *
     * @param now
     **/
    set(now: bigint): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  indices: {
    /**
     * See [`Pallet::claim`].
     *
     * @param index
     **/
    claim(index: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::transfer`].
     *
     * @param new_
     * @param index
     **/
    transfer(new_: MultiAddressLike, index: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::free`].
     *
     * @param index
     **/
    free(index: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_transfer`].
     *
     * @param new_
     * @param index
     * @param freeze
     **/
    forceTransfer(new_: MultiAddressLike, index: number, freeze: boolean): ISubmittableExtrinsic;

    /**
     * See [`Pallet::freeze`].
     *
     * @param index
     **/
    freeze(index: number): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  balances: {
    /**
     * See [`Pallet::transfer_allow_death`].
     *
     * @param dest
     * @param value
     **/
    transferAllowDeath(dest: MultiAddressLike, value: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_balance_deprecated`].
     *
     * @param who
     * @param newFree
     * @param oldReserved
     **/
    setBalanceDeprecated(who: MultiAddressLike, newFree: bigint, oldReserved: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_transfer`].
     *
     * @param source
     * @param dest
     * @param value
     **/
    forceTransfer(source: MultiAddressLike, dest: MultiAddressLike, value: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::transfer_keep_alive`].
     *
     * @param dest
     * @param value
     **/
    transferKeepAlive(dest: MultiAddressLike, value: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::transfer_all`].
     *
     * @param dest
     * @param keepAlive
     **/
    transferAll(dest: MultiAddressLike, keepAlive: boolean): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_unreserve`].
     *
     * @param who
     * @param amount
     **/
    forceUnreserve(who: MultiAddressLike, amount: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::upgrade_accounts`].
     *
     * @param who
     **/
    upgradeAccounts(who: Array<AccountId32Like>): ISubmittableExtrinsic;

    /**
     * See [`Pallet::transfer`].
     *
     * @param dest
     * @param value
     **/
    transfer(dest: MultiAddressLike, value: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_set_balance`].
     *
     * @param who
     * @param newFree
     **/
    forceSetBalance(who: MultiAddressLike, newFree: bigint): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  staking: {
    /**
     * See [`Pallet::bond`].
     *
     * @param value
     * @param payee
     **/
    bond(value: bigint, payee: PalletStakingRewardDestination): ISubmittableExtrinsic;

    /**
     * See [`Pallet::bond_extra`].
     *
     * @param maxAdditional
     **/
    bondExtra(maxAdditional: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::unbond`].
     *
     * @param value
     **/
    unbond(value: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::withdraw_unbonded`].
     *
     * @param numSlashingSpans
     **/
    withdrawUnbonded(numSlashingSpans: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::validate`].
     *
     * @param prefs
     **/
    validate(prefs: PalletStakingValidatorPrefs): ISubmittableExtrinsic;

    /**
     * See [`Pallet::nominate`].
     *
     * @param targets
     **/
    nominate(targets: Array<MultiAddressLike>): ISubmittableExtrinsic;

    /**
     * See [`Pallet::chill`].
     *
     **/
    chill(): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_payee`].
     *
     * @param payee
     **/
    setPayee(payee: PalletStakingRewardDestination): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_controller`].
     *
     **/
    setController(): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_validator_count`].
     *
     * @param new_
     **/
    setValidatorCount(new_: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::increase_validator_count`].
     *
     * @param additional
     **/
    increaseValidatorCount(additional: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::scale_validator_count`].
     *
     * @param factor
     **/
    scaleValidatorCount(factor: Percent): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_no_eras`].
     *
     **/
    forceNoEras(): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_new_era`].
     *
     **/
    forceNewEra(): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_invulnerables`].
     *
     * @param invulnerables
     **/
    setInvulnerables(invulnerables: Array<AccountId32Like>): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_unstake`].
     *
     * @param stash
     * @param numSlashingSpans
     **/
    forceUnstake(stash: AccountId32Like, numSlashingSpans: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_new_era_always`].
     *
     **/
    forceNewEraAlways(): ISubmittableExtrinsic;

    /**
     * See [`Pallet::cancel_deferred_slash`].
     *
     * @param era
     * @param slashIndices
     **/
    cancelDeferredSlash(era: number, slashIndices: Array<number>): ISubmittableExtrinsic;

    /**
     * See [`Pallet::payout_stakers`].
     *
     * @param validatorStash
     * @param era
     **/
    payoutStakers(validatorStash: AccountId32Like, era: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::rebond`].
     *
     * @param value
     **/
    rebond(value: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::reap_stash`].
     *
     * @param stash
     * @param numSlashingSpans
     **/
    reapStash(stash: AccountId32Like, numSlashingSpans: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::kick`].
     *
     * @param who
     **/
    kick(who: Array<MultiAddressLike>): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_staking_configs`].
     *
     * @param minNominatorBond
     * @param minValidatorBond
     * @param maxNominatorCount
     * @param maxValidatorCount
     * @param chillThreshold
     * @param minCommission
     **/
    setStakingConfigs(
      minNominatorBond: PalletStakingPalletConfigOp,
      minValidatorBond: PalletStakingPalletConfigOp,
      maxNominatorCount: PalletStakingPalletConfigOpU32,
      maxValidatorCount: PalletStakingPalletConfigOpU32,
      chillThreshold: PalletStakingPalletConfigOpPercent,
      minCommission: PalletStakingPalletConfigOpPerbill,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::chill_other`].
     *
     * @param controller
     **/
    chillOther(controller: AccountId32Like): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_apply_min_commission`].
     *
     * @param validatorStash
     **/
    forceApplyMinCommission(validatorStash: AccountId32Like): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_min_commission`].
     *
     * @param new_
     **/
    setMinCommission(new_: Perbill): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  session: {
    /**
     * See [`Pallet::set_keys`].
     *
     * @param keys
     * @param proof
     **/
    setKeys(keys: PolkadotRuntimeSessionKeys, proof: Bytes): ISubmittableExtrinsic;

    /**
     * See [`Pallet::purge_keys`].
     *
     **/
    purgeKeys(): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  grandpa: {
    /**
     * See [`Pallet::report_equivocation`].
     *
     * @param equivocationProof
     * @param keyOwnerProof
     **/
    reportEquivocation(
      equivocationProof: SpConsensusGrandpaEquivocationProof,
      keyOwnerProof: SpSessionMembershipProof,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::report_equivocation_unsigned`].
     *
     * @param equivocationProof
     * @param keyOwnerProof
     **/
    reportEquivocationUnsigned(
      equivocationProof: SpConsensusGrandpaEquivocationProof,
      keyOwnerProof: SpSessionMembershipProof,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::note_stalled`].
     *
     * @param delay
     * @param bestFinalizedBlockNumber
     **/
    noteStalled(delay: number, bestFinalizedBlockNumber: number): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  imOnline: {
    /**
     * See [`Pallet::heartbeat`].
     *
     * @param heartbeat
     * @param signature
     **/
    heartbeat(
      heartbeat: PalletImOnlineHeartbeat,
      signature: PalletImOnlineSr25519AppSr25519Signature,
    ): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  treasury: {
    /**
     * See [`Pallet::propose_spend`].
     *
     * @param value
     * @param beneficiary
     **/
    proposeSpend(value: bigint, beneficiary: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * See [`Pallet::reject_proposal`].
     *
     * @param proposalId
     **/
    rejectProposal(proposalId: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::approve_proposal`].
     *
     * @param proposalId
     **/
    approveProposal(proposalId: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::spend`].
     *
     * @param amount
     * @param beneficiary
     **/
    spend(amount: bigint, beneficiary: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * See [`Pallet::remove_approval`].
     *
     * @param proposalId
     **/
    removeApproval(proposalId: number): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  convictionVoting: {
    /**
     * See [`Pallet::vote`].
     *
     * @param pollIndex
     * @param vote
     **/
    vote(pollIndex: number, vote: PalletConvictionVotingVoteAccountVote): ISubmittableExtrinsic;

    /**
     * See [`Pallet::delegate`].
     *
     * @param class_
     * @param to
     * @param conviction
     * @param balance
     **/
    delegate(
      class_: number,
      to: MultiAddressLike,
      conviction: PalletConvictionVotingConviction,
      balance: bigint,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::undelegate`].
     *
     * @param class_
     **/
    undelegate(class_: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::unlock`].
     *
     * @param class_
     * @param target
     **/
    unlock(class_: number, target: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * See [`Pallet::remove_vote`].
     *
     * @param class_
     * @param index
     **/
    removeVote(class_: number | undefined, index: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::remove_other_vote`].
     *
     * @param target
     * @param class_
     * @param index
     **/
    removeOtherVote(target: MultiAddressLike, class_: number, index: number): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  referenda: {
    /**
     * See [`Pallet::submit`].
     *
     * @param proposalOrigin
     * @param proposal
     * @param enactmentMoment
     **/
    submit(
      proposalOrigin: PolkadotRuntimeOriginCaller,
      proposal: FrameSupportPreimagesBounded,
      enactmentMoment: FrameSupportScheduleDispatchTime,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::place_decision_deposit`].
     *
     * @param index
     **/
    placeDecisionDeposit(index: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::refund_decision_deposit`].
     *
     * @param index
     **/
    refundDecisionDeposit(index: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::cancel`].
     *
     * @param index
     **/
    cancel(index: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::kill`].
     *
     * @param index
     **/
    kill(index: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::nudge_referendum`].
     *
     * @param index
     **/
    nudgeReferendum(index: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::one_fewer_deciding`].
     *
     * @param track
     **/
    oneFewerDeciding(track: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::refund_submission_deposit`].
     *
     * @param index
     **/
    refundSubmissionDeposit(index: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_metadata`].
     *
     * @param index
     * @param maybeHash
     **/
    setMetadata(index: number, maybeHash: H256 | undefined): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  whitelist: {
    /**
     * See [`Pallet::whitelist_call`].
     *
     * @param callHash
     **/
    whitelistCall(callHash: H256): ISubmittableExtrinsic;

    /**
     * See [`Pallet::remove_whitelisted_call`].
     *
     * @param callHash
     **/
    removeWhitelistedCall(callHash: H256): ISubmittableExtrinsic;

    /**
     * See [`Pallet::dispatch_whitelisted_call`].
     *
     * @param callHash
     * @param callEncodedLen
     * @param callWeightWitness
     **/
    dispatchWhitelistedCall(
      callHash: H256,
      callEncodedLen: number,
      callWeightWitness: SpWeightsWeightV2Weight,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::dispatch_whitelisted_call_with_preimage`].
     *
     * @param call
     **/
    dispatchWhitelistedCallWithPreimage(call: PolkadotRuntimeRuntimeCall): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  claims: {
    /**
     * See [`Pallet::claim`].
     *
     * @param dest
     * @param ethereumSignature
     **/
    claim(dest: AccountId32Like, ethereumSignature: PolkadotRuntimeCommonClaimsEcdsaSignature): ISubmittableExtrinsic;

    /**
     * See [`Pallet::mint_claim`].
     *
     * @param who
     * @param value
     * @param vestingSchedule
     * @param statement
     **/
    mintClaim(
      who: EthereumAddressLike,
      value: bigint,
      vestingSchedule: [bigint, bigint, number] | undefined,
      statement: PolkadotRuntimeCommonClaimsStatementKind | undefined,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::claim_attest`].
     *
     * @param dest
     * @param ethereumSignature
     * @param statement
     **/
    claimAttest(
      dest: AccountId32Like,
      ethereumSignature: PolkadotRuntimeCommonClaimsEcdsaSignature,
      statement: Bytes,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::attest`].
     *
     * @param statement
     **/
    attest(statement: Bytes): ISubmittableExtrinsic;

    /**
     * See [`Pallet::move_claim`].
     *
     * @param old
     * @param new_
     * @param maybePreclaim
     **/
    moveClaim(
      old: EthereumAddressLike,
      new_: EthereumAddressLike,
      maybePreclaim: AccountId32Like | undefined,
    ): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  vesting: {
    /**
     * See [`Pallet::vest`].
     *
     **/
    vest(): ISubmittableExtrinsic;

    /**
     * See [`Pallet::vest_other`].
     *
     * @param target
     **/
    vestOther(target: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * See [`Pallet::vested_transfer`].
     *
     * @param target
     * @param schedule
     **/
    vestedTransfer(target: MultiAddressLike, schedule: PalletVestingVestingInfo): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_vested_transfer`].
     *
     * @param source
     * @param target
     * @param schedule
     **/
    forceVestedTransfer(
      source: MultiAddressLike,
      target: MultiAddressLike,
      schedule: PalletVestingVestingInfo,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::merge_schedules`].
     *
     * @param schedule1Index
     * @param schedule2Index
     **/
    mergeSchedules(schedule1Index: number, schedule2Index: number): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  utility: {
    /**
     * See [`Pallet::batch`].
     *
     * @param calls
     **/
    batch(calls: Array<PolkadotRuntimeRuntimeCall>): ISubmittableExtrinsic;

    /**
     * See [`Pallet::as_derivative`].
     *
     * @param index
     * @param call
     **/
    asDerivative(index: number, call: PolkadotRuntimeRuntimeCall): ISubmittableExtrinsic;

    /**
     * See [`Pallet::batch_all`].
     *
     * @param calls
     **/
    batchAll(calls: Array<PolkadotRuntimeRuntimeCall>): ISubmittableExtrinsic;

    /**
     * See [`Pallet::dispatch_as`].
     *
     * @param asOrigin
     * @param call
     **/
    dispatchAs(asOrigin: PolkadotRuntimeOriginCaller, call: PolkadotRuntimeRuntimeCall): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_batch`].
     *
     * @param calls
     **/
    forceBatch(calls: Array<PolkadotRuntimeRuntimeCall>): ISubmittableExtrinsic;

    /**
     * See [`Pallet::with_weight`].
     *
     * @param call
     * @param weight
     **/
    withWeight(call: PolkadotRuntimeRuntimeCall, weight: SpWeightsWeightV2Weight): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  identity: {
    /**
     * See [`Pallet::add_registrar`].
     *
     * @param account
     **/
    addRegistrar(account: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_identity`].
     *
     * @param info
     **/
    setIdentity(info: PalletIdentityIdentityInfo): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_subs`].
     *
     * @param subs
     **/
    setSubs(subs: Array<[AccountId32Like, Data]>): ISubmittableExtrinsic;

    /**
     * See [`Pallet::clear_identity`].
     *
     **/
    clearIdentity(): ISubmittableExtrinsic;

    /**
     * See [`Pallet::request_judgement`].
     *
     * @param regIndex
     * @param maxFee
     **/
    requestJudgement(regIndex: number, maxFee: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::cancel_request`].
     *
     * @param regIndex
     **/
    cancelRequest(regIndex: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_fee`].
     *
     * @param index
     * @param fee
     **/
    setFee(index: number, fee: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_account_id`].
     *
     * @param index
     * @param new_
     **/
    setAccountId(index: number, new_: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_fields`].
     *
     * @param index
     * @param fields
     **/
    setFields(index: number, fields: PalletIdentityBitFlags): ISubmittableExtrinsic;

    /**
     * See [`Pallet::provide_judgement`].
     *
     * @param regIndex
     * @param target
     * @param judgement
     * @param identity
     **/
    provideJudgement(
      regIndex: number,
      target: MultiAddressLike,
      judgement: PalletIdentityJudgement,
      identity: H256,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::kill_identity`].
     *
     * @param target
     **/
    killIdentity(target: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * See [`Pallet::add_sub`].
     *
     * @param sub
     * @param data
     **/
    addSub(sub: MultiAddressLike, data: Data): ISubmittableExtrinsic;

    /**
     * See [`Pallet::rename_sub`].
     *
     * @param sub
     * @param data
     **/
    renameSub(sub: MultiAddressLike, data: Data): ISubmittableExtrinsic;

    /**
     * See [`Pallet::remove_sub`].
     *
     * @param sub
     **/
    removeSub(sub: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * See [`Pallet::quit_sub`].
     *
     **/
    quitSub(): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  proxy: {
    /**
     * See [`Pallet::proxy`].
     *
     * @param real
     * @param forceProxyType
     * @param call
     **/
    proxy(
      real: MultiAddressLike,
      forceProxyType: PolkadotRuntimeProxyType | undefined,
      call: PolkadotRuntimeRuntimeCall,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::add_proxy`].
     *
     * @param delegate
     * @param proxyType
     * @param delay
     **/
    addProxy(delegate: MultiAddressLike, proxyType: PolkadotRuntimeProxyType, delay: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::remove_proxy`].
     *
     * @param delegate
     * @param proxyType
     * @param delay
     **/
    removeProxy(delegate: MultiAddressLike, proxyType: PolkadotRuntimeProxyType, delay: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::remove_proxies`].
     *
     **/
    removeProxies(): ISubmittableExtrinsic;

    /**
     * See [`Pallet::create_pure`].
     *
     * @param proxyType
     * @param delay
     * @param index
     **/
    createPure(proxyType: PolkadotRuntimeProxyType, delay: number, index: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::kill_pure`].
     *
     * @param spawner
     * @param proxyType
     * @param index
     * @param height
     * @param extIndex
     **/
    killPure(
      spawner: MultiAddressLike,
      proxyType: PolkadotRuntimeProxyType,
      index: number,
      height: number,
      extIndex: number,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::announce`].
     *
     * @param real
     * @param callHash
     **/
    announce(real: MultiAddressLike, callHash: H256): ISubmittableExtrinsic;

    /**
     * See [`Pallet::remove_announcement`].
     *
     * @param real
     * @param callHash
     **/
    removeAnnouncement(real: MultiAddressLike, callHash: H256): ISubmittableExtrinsic;

    /**
     * See [`Pallet::reject_announcement`].
     *
     * @param delegate
     * @param callHash
     **/
    rejectAnnouncement(delegate: MultiAddressLike, callHash: H256): ISubmittableExtrinsic;

    /**
     * See [`Pallet::proxy_announced`].
     *
     * @param delegate
     * @param real
     * @param forceProxyType
     * @param call
     **/
    proxyAnnounced(
      delegate: MultiAddressLike,
      real: MultiAddressLike,
      forceProxyType: PolkadotRuntimeProxyType | undefined,
      call: PolkadotRuntimeRuntimeCall,
    ): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  multisig: {
    /**
     * See [`Pallet::as_multi_threshold_1`].
     *
     * @param otherSignatories
     * @param call
     **/
    asMultiThreshold1(
      otherSignatories: Array<AccountId32Like>,
      call: PolkadotRuntimeRuntimeCall,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::as_multi`].
     *
     * @param threshold
     * @param otherSignatories
     * @param maybeTimepoint
     * @param call
     * @param maxWeight
     **/
    asMulti(
      threshold: number,
      otherSignatories: Array<AccountId32Like>,
      maybeTimepoint: PalletMultisigTimepoint | undefined,
      call: PolkadotRuntimeRuntimeCall,
      maxWeight: SpWeightsWeightV2Weight,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::approve_as_multi`].
     *
     * @param threshold
     * @param otherSignatories
     * @param maybeTimepoint
     * @param callHash
     * @param maxWeight
     **/
    approveAsMulti(
      threshold: number,
      otherSignatories: Array<AccountId32Like>,
      maybeTimepoint: PalletMultisigTimepoint | undefined,
      callHash: FixedBytes<32>,
      maxWeight: SpWeightsWeightV2Weight,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::cancel_as_multi`].
     *
     * @param threshold
     * @param otherSignatories
     * @param timepoint
     * @param callHash
     **/
    cancelAsMulti(
      threshold: number,
      otherSignatories: Array<AccountId32Like>,
      timepoint: PalletMultisigTimepoint,
      callHash: FixedBytes<32>,
    ): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  bounties: {
    /**
     * See [`Pallet::propose_bounty`].
     *
     * @param value
     * @param description
     **/
    proposeBounty(value: bigint, description: Bytes): ISubmittableExtrinsic;

    /**
     * See [`Pallet::approve_bounty`].
     *
     * @param bountyId
     **/
    approveBounty(bountyId: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::propose_curator`].
     *
     * @param bountyId
     * @param curator
     * @param fee
     **/
    proposeCurator(bountyId: number, curator: MultiAddressLike, fee: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::unassign_curator`].
     *
     * @param bountyId
     **/
    unassignCurator(bountyId: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::accept_curator`].
     *
     * @param bountyId
     **/
    acceptCurator(bountyId: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::award_bounty`].
     *
     * @param bountyId
     * @param beneficiary
     **/
    awardBounty(bountyId: number, beneficiary: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * See [`Pallet::claim_bounty`].
     *
     * @param bountyId
     **/
    claimBounty(bountyId: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::close_bounty`].
     *
     * @param bountyId
     **/
    closeBounty(bountyId: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::extend_bounty_expiry`].
     *
     * @param bountyId
     * @param remark
     **/
    extendBountyExpiry(bountyId: number, remark: Bytes): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  childBounties: {
    /**
     * See [`Pallet::add_child_bounty`].
     *
     * @param parentBountyId
     * @param value
     * @param description
     **/
    addChildBounty(parentBountyId: number, value: bigint, description: Bytes): ISubmittableExtrinsic;

    /**
     * See [`Pallet::propose_curator`].
     *
     * @param parentBountyId
     * @param childBountyId
     * @param curator
     * @param fee
     **/
    proposeCurator(
      parentBountyId: number,
      childBountyId: number,
      curator: MultiAddressLike,
      fee: bigint,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::accept_curator`].
     *
     * @param parentBountyId
     * @param childBountyId
     **/
    acceptCurator(parentBountyId: number, childBountyId: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::unassign_curator`].
     *
     * @param parentBountyId
     * @param childBountyId
     **/
    unassignCurator(parentBountyId: number, childBountyId: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::award_child_bounty`].
     *
     * @param parentBountyId
     * @param childBountyId
     * @param beneficiary
     **/
    awardChildBounty(
      parentBountyId: number,
      childBountyId: number,
      beneficiary: MultiAddressLike,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::claim_child_bounty`].
     *
     * @param parentBountyId
     * @param childBountyId
     **/
    claimChildBounty(parentBountyId: number, childBountyId: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::close_child_bounty`].
     *
     * @param parentBountyId
     * @param childBountyId
     **/
    closeChildBounty(parentBountyId: number, childBountyId: number): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  electionProviderMultiPhase: {
    /**
     * See [`Pallet::submit_unsigned`].
     *
     * @param rawSolution
     * @param witness
     **/
    submitUnsigned(
      rawSolution: PalletElectionProviderMultiPhaseRawSolution,
      witness: PalletElectionProviderMultiPhaseSolutionOrSnapshotSize,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_minimum_untrusted_score`].
     *
     * @param maybeNextScore
     **/
    setMinimumUntrustedScore(maybeNextScore: SpNposElectionsElectionScore | undefined): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_emergency_election_result`].
     *
     * @param supports
     **/
    setEmergencyElectionResult(supports: Array<[AccountId32Like, SpNposElectionsSupport]>): ISubmittableExtrinsic;

    /**
     * See [`Pallet::submit`].
     *
     * @param rawSolution
     **/
    submit(rawSolution: PalletElectionProviderMultiPhaseRawSolution): ISubmittableExtrinsic;

    /**
     * See [`Pallet::governance_fallback`].
     *
     * @param maybeMaxVoters
     * @param maybeMaxTargets
     **/
    governanceFallback(maybeMaxVoters: number | undefined, maybeMaxTargets: number | undefined): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  voterList: {
    /**
     * See [`Pallet::rebag`].
     *
     * @param dislocated
     **/
    rebag(dislocated: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * See [`Pallet::put_in_front_of`].
     *
     * @param lighter
     **/
    putInFrontOf(lighter: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * See [`Pallet::put_in_front_of_other`].
     *
     * @param heavier
     * @param lighter
     **/
    putInFrontOfOther(heavier: MultiAddressLike, lighter: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  nominationPools: {
    /**
     * See [`Pallet::join`].
     *
     * @param amount
     * @param poolId
     **/
    join(amount: bigint, poolId: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::bond_extra`].
     *
     * @param extra
     **/
    bondExtra(extra: PalletNominationPoolsBondExtra): ISubmittableExtrinsic;

    /**
     * See [`Pallet::claim_payout`].
     *
     **/
    claimPayout(): ISubmittableExtrinsic;

    /**
     * See [`Pallet::unbond`].
     *
     * @param memberAccount
     * @param unbondingPoints
     **/
    unbond(memberAccount: MultiAddressLike, unbondingPoints: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::pool_withdraw_unbonded`].
     *
     * @param poolId
     * @param numSlashingSpans
     **/
    poolWithdrawUnbonded(poolId: number, numSlashingSpans: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::withdraw_unbonded`].
     *
     * @param memberAccount
     * @param numSlashingSpans
     **/
    withdrawUnbonded(memberAccount: MultiAddressLike, numSlashingSpans: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::create`].
     *
     * @param amount
     * @param root
     * @param nominator
     * @param bouncer
     **/
    create(
      amount: bigint,
      root: MultiAddressLike,
      nominator: MultiAddressLike,
      bouncer: MultiAddressLike,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::create_with_pool_id`].
     *
     * @param amount
     * @param root
     * @param nominator
     * @param bouncer
     * @param poolId
     **/
    createWithPoolId(
      amount: bigint,
      root: MultiAddressLike,
      nominator: MultiAddressLike,
      bouncer: MultiAddressLike,
      poolId: number,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::nominate`].
     *
     * @param poolId
     * @param validators
     **/
    nominate(poolId: number, validators: Array<AccountId32Like>): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_state`].
     *
     * @param poolId
     * @param state
     **/
    setState(poolId: number, state: PalletNominationPoolsPoolState): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_metadata`].
     *
     * @param poolId
     * @param metadata
     **/
    setMetadata(poolId: number, metadata: Bytes): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_configs`].
     *
     * @param minJoinBond
     * @param minCreateBond
     * @param maxPools
     * @param maxMembers
     * @param maxMembersPerPool
     * @param globalMaxCommission
     **/
    setConfigs(
      minJoinBond: PalletNominationPoolsConfigOp,
      minCreateBond: PalletNominationPoolsConfigOp,
      maxPools: PalletNominationPoolsConfigOpU32,
      maxMembers: PalletNominationPoolsConfigOpU32,
      maxMembersPerPool: PalletNominationPoolsConfigOpU32,
      globalMaxCommission: PalletNominationPoolsConfigOpPerbill,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::update_roles`].
     *
     * @param poolId
     * @param newRoot
     * @param newNominator
     * @param newBouncer
     **/
    updateRoles(
      poolId: number,
      newRoot: PalletNominationPoolsConfigOp004,
      newNominator: PalletNominationPoolsConfigOp004,
      newBouncer: PalletNominationPoolsConfigOp004,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::chill`].
     *
     * @param poolId
     **/
    chill(poolId: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::bond_extra_other`].
     *
     * @param member
     * @param extra
     **/
    bondExtraOther(member: MultiAddressLike, extra: PalletNominationPoolsBondExtra): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_claim_permission`].
     *
     * @param permission
     **/
    setClaimPermission(permission: PalletNominationPoolsClaimPermission): ISubmittableExtrinsic;

    /**
     * See [`Pallet::claim_payout_other`].
     *
     * @param other
     **/
    claimPayoutOther(other: AccountId32Like): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_commission`].
     *
     * @param poolId
     * @param newCommission
     **/
    setCommission(poolId: number, newCommission: [Perbill, AccountId32Like] | undefined): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_commission_max`].
     *
     * @param poolId
     * @param maxCommission
     **/
    setCommissionMax(poolId: number, maxCommission: Perbill): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_commission_change_rate`].
     *
     * @param poolId
     * @param changeRate
     **/
    setCommissionChangeRate(
      poolId: number,
      changeRate: PalletNominationPoolsCommissionChangeRate,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::claim_commission`].
     *
     * @param poolId
     **/
    claimCommission(poolId: number): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  fastUnstake: {
    /**
     * See [`Pallet::register_fast_unstake`].
     *
     **/
    registerFastUnstake(): ISubmittableExtrinsic;

    /**
     * See [`Pallet::deregister`].
     *
     **/
    deregister(): ISubmittableExtrinsic;

    /**
     * See [`Pallet::control`].
     *
     * @param erasToCheck
     **/
    control(erasToCheck: number): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  configuration: {
    /**
     * See [`Pallet::set_validation_upgrade_cooldown`].
     *
     * @param new_
     **/
    setValidationUpgradeCooldown(new_: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_validation_upgrade_delay`].
     *
     * @param new_
     **/
    setValidationUpgradeDelay(new_: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_code_retention_period`].
     *
     * @param new_
     **/
    setCodeRetentionPeriod(new_: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_max_code_size`].
     *
     * @param new_
     **/
    setMaxCodeSize(new_: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_max_pov_size`].
     *
     * @param new_
     **/
    setMaxPovSize(new_: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_max_head_data_size`].
     *
     * @param new_
     **/
    setMaxHeadDataSize(new_: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_on_demand_cores`].
     *
     * @param new_
     **/
    setOnDemandCores(new_: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_on_demand_retries`].
     *
     * @param new_
     **/
    setOnDemandRetries(new_: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_group_rotation_frequency`].
     *
     * @param new_
     **/
    setGroupRotationFrequency(new_: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_paras_availability_period`].
     *
     * @param new_
     **/
    setParasAvailabilityPeriod(new_: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_scheduling_lookahead`].
     *
     * @param new_
     **/
    setSchedulingLookahead(new_: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_max_validators_per_core`].
     *
     * @param new_
     **/
    setMaxValidatorsPerCore(new_: number | undefined): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_max_validators`].
     *
     * @param new_
     **/
    setMaxValidators(new_: number | undefined): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_dispute_period`].
     *
     * @param new_
     **/
    setDisputePeriod(new_: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_dispute_post_conclusion_acceptance_period`].
     *
     * @param new_
     **/
    setDisputePostConclusionAcceptancePeriod(new_: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_no_show_slots`].
     *
     * @param new_
     **/
    setNoShowSlots(new_: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_n_delay_tranches`].
     *
     * @param new_
     **/
    setNDelayTranches(new_: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_zeroth_delay_tranche_width`].
     *
     * @param new_
     **/
    setZerothDelayTrancheWidth(new_: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_needed_approvals`].
     *
     * @param new_
     **/
    setNeededApprovals(new_: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_relay_vrf_modulo_samples`].
     *
     * @param new_
     **/
    setRelayVrfModuloSamples(new_: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_max_upward_queue_count`].
     *
     * @param new_
     **/
    setMaxUpwardQueueCount(new_: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_max_upward_queue_size`].
     *
     * @param new_
     **/
    setMaxUpwardQueueSize(new_: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_max_downward_message_size`].
     *
     * @param new_
     **/
    setMaxDownwardMessageSize(new_: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_max_upward_message_size`].
     *
     * @param new_
     **/
    setMaxUpwardMessageSize(new_: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_max_upward_message_num_per_candidate`].
     *
     * @param new_
     **/
    setMaxUpwardMessageNumPerCandidate(new_: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_hrmp_open_request_ttl`].
     *
     * @param new_
     **/
    setHrmpOpenRequestTtl(new_: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_hrmp_sender_deposit`].
     *
     * @param new_
     **/
    setHrmpSenderDeposit(new_: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_hrmp_recipient_deposit`].
     *
     * @param new_
     **/
    setHrmpRecipientDeposit(new_: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_hrmp_channel_max_capacity`].
     *
     * @param new_
     **/
    setHrmpChannelMaxCapacity(new_: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_hrmp_channel_max_total_size`].
     *
     * @param new_
     **/
    setHrmpChannelMaxTotalSize(new_: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_hrmp_max_parachain_inbound_channels`].
     *
     * @param new_
     **/
    setHrmpMaxParachainInboundChannels(new_: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_hrmp_channel_max_message_size`].
     *
     * @param new_
     **/
    setHrmpChannelMaxMessageSize(new_: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_hrmp_max_parachain_outbound_channels`].
     *
     * @param new_
     **/
    setHrmpMaxParachainOutboundChannels(new_: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_hrmp_max_message_num_per_candidate`].
     *
     * @param new_
     **/
    setHrmpMaxMessageNumPerCandidate(new_: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_pvf_voting_ttl`].
     *
     * @param new_
     **/
    setPvfVotingTtl(new_: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_minimum_validation_upgrade_delay`].
     *
     * @param new_
     **/
    setMinimumValidationUpgradeDelay(new_: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_bypass_consistency_check`].
     *
     * @param new_
     **/
    setBypassConsistencyCheck(new_: boolean): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_async_backing_params`].
     *
     * @param new_
     **/
    setAsyncBackingParams(new_: PolkadotPrimitivesVstagingAsyncBackingParams): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_executor_params`].
     *
     * @param new_
     **/
    setExecutorParams(new_: PolkadotPrimitivesV5ExecutorParams): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_on_demand_base_fee`].
     *
     * @param new_
     **/
    setOnDemandBaseFee(new_: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_on_demand_fee_variability`].
     *
     * @param new_
     **/
    setOnDemandFeeVariability(new_: Perbill): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_on_demand_queue_max_size`].
     *
     * @param new_
     **/
    setOnDemandQueueMaxSize(new_: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_on_demand_target_queue_utilization`].
     *
     * @param new_
     **/
    setOnDemandTargetQueueUtilization(new_: Perbill): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_on_demand_ttl`].
     *
     * @param new_
     **/
    setOnDemandTtl(new_: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_minimum_backing_votes`].
     *
     * @param new_
     **/
    setMinimumBackingVotes(new_: number): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  parasShared: {
    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  paraInclusion: {
    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  paraInherent: {
    /**
     * See [`Pallet::enter`].
     *
     * @param data
     **/
    enter(data: PolkadotPrimitivesV5InherentData): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  paras: {
    /**
     * See [`Pallet::force_set_current_code`].
     *
     * @param para
     * @param newCode
     **/
    forceSetCurrentCode(
      para: PolkadotParachainPrimitivesPrimitivesId,
      newCode: PolkadotParachainPrimitivesPrimitivesValidationCode,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_set_current_head`].
     *
     * @param para
     * @param newHead
     **/
    forceSetCurrentHead(
      para: PolkadotParachainPrimitivesPrimitivesId,
      newHead: PolkadotParachainPrimitivesPrimitivesHeadData,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_schedule_code_upgrade`].
     *
     * @param para
     * @param newCode
     * @param relayParentNumber
     **/
    forceScheduleCodeUpgrade(
      para: PolkadotParachainPrimitivesPrimitivesId,
      newCode: PolkadotParachainPrimitivesPrimitivesValidationCode,
      relayParentNumber: number,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_note_new_head`].
     *
     * @param para
     * @param newHead
     **/
    forceNoteNewHead(
      para: PolkadotParachainPrimitivesPrimitivesId,
      newHead: PolkadotParachainPrimitivesPrimitivesHeadData,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_queue_action`].
     *
     * @param para
     **/
    forceQueueAction(para: PolkadotParachainPrimitivesPrimitivesId): ISubmittableExtrinsic;

    /**
     * See [`Pallet::add_trusted_validation_code`].
     *
     * @param validationCode
     **/
    addTrustedValidationCode(
      validationCode: PolkadotParachainPrimitivesPrimitivesValidationCode,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::poke_unused_validation_code`].
     *
     * @param validationCodeHash
     **/
    pokeUnusedValidationCode(
      validationCodeHash: PolkadotParachainPrimitivesPrimitivesValidationCodeHash,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::include_pvf_check_statement`].
     *
     * @param stmt
     * @param signature
     **/
    includePvfCheckStatement(
      stmt: PolkadotPrimitivesV5PvfCheckStatement,
      signature: PolkadotPrimitivesV5ValidatorAppSignature,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_set_most_recent_context`].
     *
     * @param para
     * @param context
     **/
    forceSetMostRecentContext(para: PolkadotParachainPrimitivesPrimitivesId, context: number): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  initializer: {
    /**
     * See [`Pallet::force_approve`].
     *
     * @param upTo
     **/
    forceApprove(upTo: number): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  hrmp: {
    /**
     * See [`Pallet::hrmp_init_open_channel`].
     *
     * @param recipient
     * @param proposedMaxCapacity
     * @param proposedMaxMessageSize
     **/
    hrmpInitOpenChannel(
      recipient: PolkadotParachainPrimitivesPrimitivesId,
      proposedMaxCapacity: number,
      proposedMaxMessageSize: number,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::hrmp_accept_open_channel`].
     *
     * @param sender
     **/
    hrmpAcceptOpenChannel(sender: PolkadotParachainPrimitivesPrimitivesId): ISubmittableExtrinsic;

    /**
     * See [`Pallet::hrmp_close_channel`].
     *
     * @param channelId
     **/
    hrmpCloseChannel(channelId: PolkadotParachainPrimitivesPrimitivesHrmpChannelId): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_clean_hrmp`].
     *
     * @param para
     * @param inbound
     * @param outbound
     **/
    forceCleanHrmp(
      para: PolkadotParachainPrimitivesPrimitivesId,
      inbound: number,
      outbound: number,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_process_hrmp_open`].
     *
     * @param channels
     **/
    forceProcessHrmpOpen(channels: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_process_hrmp_close`].
     *
     * @param channels
     **/
    forceProcessHrmpClose(channels: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::hrmp_cancel_open_request`].
     *
     * @param channelId
     * @param openRequests
     **/
    hrmpCancelOpenRequest(
      channelId: PolkadotParachainPrimitivesPrimitivesHrmpChannelId,
      openRequests: number,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_open_hrmp_channel`].
     *
     * @param sender
     * @param recipient
     * @param maxCapacity
     * @param maxMessageSize
     **/
    forceOpenHrmpChannel(
      sender: PolkadotParachainPrimitivesPrimitivesId,
      recipient: PolkadotParachainPrimitivesPrimitivesId,
      maxCapacity: number,
      maxMessageSize: number,
    ): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  parasDisputes: {
    /**
     * See [`Pallet::force_unfreeze`].
     *
     **/
    forceUnfreeze(): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  parasSlashing: {
    /**
     * See [`Pallet::report_dispute_lost_unsigned`].
     *
     * @param disputeProof
     * @param keyOwnerProof
     **/
    reportDisputeLostUnsigned(
      disputeProof: PolkadotPrimitivesV5SlashingDisputeProof,
      keyOwnerProof: SpSessionMembershipProof,
    ): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  registrar: {
    /**
     * See [`Pallet::register`].
     *
     * @param id
     * @param genesisHead
     * @param validationCode
     **/
    register(
      id: PolkadotParachainPrimitivesPrimitivesId,
      genesisHead: PolkadotParachainPrimitivesPrimitivesHeadData,
      validationCode: PolkadotParachainPrimitivesPrimitivesValidationCode,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_register`].
     *
     * @param who
     * @param deposit
     * @param id
     * @param genesisHead
     * @param validationCode
     **/
    forceRegister(
      who: AccountId32Like,
      deposit: bigint,
      id: PolkadotParachainPrimitivesPrimitivesId,
      genesisHead: PolkadotParachainPrimitivesPrimitivesHeadData,
      validationCode: PolkadotParachainPrimitivesPrimitivesValidationCode,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::deregister`].
     *
     * @param id
     **/
    deregister(id: PolkadotParachainPrimitivesPrimitivesId): ISubmittableExtrinsic;

    /**
     * See [`Pallet::swap`].
     *
     * @param id
     * @param other
     **/
    swap(
      id: PolkadotParachainPrimitivesPrimitivesId,
      other: PolkadotParachainPrimitivesPrimitivesId,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::remove_lock`].
     *
     * @param para
     **/
    removeLock(para: PolkadotParachainPrimitivesPrimitivesId): ISubmittableExtrinsic;

    /**
     * See [`Pallet::reserve`].
     *
     **/
    reserve(): ISubmittableExtrinsic;

    /**
     * See [`Pallet::add_lock`].
     *
     * @param para
     **/
    addLock(para: PolkadotParachainPrimitivesPrimitivesId): ISubmittableExtrinsic;

    /**
     * See [`Pallet::schedule_code_upgrade`].
     *
     * @param para
     * @param newCode
     **/
    scheduleCodeUpgrade(
      para: PolkadotParachainPrimitivesPrimitivesId,
      newCode: PolkadotParachainPrimitivesPrimitivesValidationCode,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_current_head`].
     *
     * @param para
     * @param newHead
     **/
    setCurrentHead(
      para: PolkadotParachainPrimitivesPrimitivesId,
      newHead: PolkadotParachainPrimitivesPrimitivesHeadData,
    ): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  slots: {
    /**
     * See [`Pallet::force_lease`].
     *
     * @param para
     * @param leaser
     * @param amount
     * @param periodBegin
     * @param periodCount
     **/
    forceLease(
      para: PolkadotParachainPrimitivesPrimitivesId,
      leaser: AccountId32Like,
      amount: bigint,
      periodBegin: number,
      periodCount: number,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::clear_all_leases`].
     *
     * @param para
     **/
    clearAllLeases(para: PolkadotParachainPrimitivesPrimitivesId): ISubmittableExtrinsic;

    /**
     * See [`Pallet::trigger_onboard`].
     *
     * @param para
     **/
    triggerOnboard(para: PolkadotParachainPrimitivesPrimitivesId): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  auctions: {
    /**
     * See [`Pallet::new_auction`].
     *
     * @param duration
     * @param leasePeriodIndex
     **/
    newAuction(duration: number, leasePeriodIndex: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::bid`].
     *
     * @param para
     * @param auctionIndex
     * @param firstSlot
     * @param lastSlot
     * @param amount
     **/
    bid(
      para: PolkadotParachainPrimitivesPrimitivesId,
      auctionIndex: number,
      firstSlot: number,
      lastSlot: number,
      amount: bigint,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::cancel_auction`].
     *
     **/
    cancelAuction(): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  crowdloan: {
    /**
     * See [`Pallet::create`].
     *
     * @param index
     * @param cap
     * @param firstPeriod
     * @param lastPeriod
     * @param end
     * @param verifier
     **/
    create(
      index: PolkadotParachainPrimitivesPrimitivesId,
      cap: bigint,
      firstPeriod: number,
      lastPeriod: number,
      end: number,
      verifier: SpRuntimeMultiSigner | undefined,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::contribute`].
     *
     * @param index
     * @param value
     * @param signature
     **/
    contribute(
      index: PolkadotParachainPrimitivesPrimitivesId,
      value: bigint,
      signature: SpRuntimeMultiSignature | undefined,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::withdraw`].
     *
     * @param who
     * @param index
     **/
    withdraw(who: AccountId32Like, index: PolkadotParachainPrimitivesPrimitivesId): ISubmittableExtrinsic;

    /**
     * See [`Pallet::refund`].
     *
     * @param index
     **/
    refund(index: PolkadotParachainPrimitivesPrimitivesId): ISubmittableExtrinsic;

    /**
     * See [`Pallet::dissolve`].
     *
     * @param index
     **/
    dissolve(index: PolkadotParachainPrimitivesPrimitivesId): ISubmittableExtrinsic;

    /**
     * See [`Pallet::edit`].
     *
     * @param index
     * @param cap
     * @param firstPeriod
     * @param lastPeriod
     * @param end
     * @param verifier
     **/
    edit(
      index: PolkadotParachainPrimitivesPrimitivesId,
      cap: bigint,
      firstPeriod: number,
      lastPeriod: number,
      end: number,
      verifier: SpRuntimeMultiSigner | undefined,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::add_memo`].
     *
     * @param index
     * @param memo
     **/
    addMemo(index: PolkadotParachainPrimitivesPrimitivesId, memo: Bytes): ISubmittableExtrinsic;

    /**
     * See [`Pallet::poke`].
     *
     * @param index
     **/
    poke(index: PolkadotParachainPrimitivesPrimitivesId): ISubmittableExtrinsic;

    /**
     * See [`Pallet::contribute_all`].
     *
     * @param index
     * @param signature
     **/
    contributeAll(
      index: PolkadotParachainPrimitivesPrimitivesId,
      signature: SpRuntimeMultiSignature | undefined,
    ): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  xcmPallet: {
    /**
     * See [`Pallet::send`].
     *
     * @param dest
     * @param message
     **/
    send(dest: XcmVersionedMultiLocation, message: XcmVersionedXcm): ISubmittableExtrinsic;

    /**
     * See [`Pallet::teleport_assets`].
     *
     * @param dest
     * @param beneficiary
     * @param assets
     * @param feeAssetItem
     **/
    teleportAssets(
      dest: XcmVersionedMultiLocation,
      beneficiary: XcmVersionedMultiLocation,
      assets: XcmVersionedMultiAssets,
      feeAssetItem: number,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::reserve_transfer_assets`].
     *
     * @param dest
     * @param beneficiary
     * @param assets
     * @param feeAssetItem
     **/
    reserveTransferAssets(
      dest: XcmVersionedMultiLocation,
      beneficiary: XcmVersionedMultiLocation,
      assets: XcmVersionedMultiAssets,
      feeAssetItem: number,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::execute`].
     *
     * @param message
     * @param maxWeight
     **/
    execute(message: XcmVersionedXcm, maxWeight: SpWeightsWeightV2Weight): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_xcm_version`].
     *
     * @param location
     * @param version
     **/
    forceXcmVersion(location: StagingXcmV3MultilocationMultiLocation, version: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_default_xcm_version`].
     *
     * @param maybeXcmVersion
     **/
    forceDefaultXcmVersion(maybeXcmVersion: number | undefined): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_subscribe_version_notify`].
     *
     * @param location
     **/
    forceSubscribeVersionNotify(location: XcmVersionedMultiLocation): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_unsubscribe_version_notify`].
     *
     * @param location
     **/
    forceUnsubscribeVersionNotify(location: XcmVersionedMultiLocation): ISubmittableExtrinsic;

    /**
     * See [`Pallet::limited_reserve_transfer_assets`].
     *
     * @param dest
     * @param beneficiary
     * @param assets
     * @param feeAssetItem
     * @param weightLimit
     **/
    limitedReserveTransferAssets(
      dest: XcmVersionedMultiLocation,
      beneficiary: XcmVersionedMultiLocation,
      assets: XcmVersionedMultiAssets,
      feeAssetItem: number,
      weightLimit: XcmV3WeightLimit,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::limited_teleport_assets`].
     *
     * @param dest
     * @param beneficiary
     * @param assets
     * @param feeAssetItem
     * @param weightLimit
     **/
    limitedTeleportAssets(
      dest: XcmVersionedMultiLocation,
      beneficiary: XcmVersionedMultiLocation,
      assets: XcmVersionedMultiAssets,
      feeAssetItem: number,
      weightLimit: XcmV3WeightLimit,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_suspension`].
     *
     * @param suspended
     **/
    forceSuspension(suspended: boolean): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  messageQueue: {
    /**
     * See [`Pallet::reap_page`].
     *
     * @param messageOrigin
     * @param pageIndex
     **/
    reapPage(
      messageOrigin: PolkadotRuntimeParachainsInclusionAggregateMessageOrigin,
      pageIndex: number,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::execute_overweight`].
     *
     * @param messageOrigin
     * @param page
     * @param index
     * @param weightLimit
     **/
    executeOverweight(
      messageOrigin: PolkadotRuntimeParachainsInclusionAggregateMessageOrigin,
      page: number,
      index: number,
      weightLimit: SpWeightsWeightV2Weight,
    ): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
}
