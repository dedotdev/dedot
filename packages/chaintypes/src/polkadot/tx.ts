// Generated by @delightfuldot/codegen

import type {
  GenericChainTx,
  GenericTxCall,
  ISubmittableExtrinsic,
  ISubmittableResult,
  IRuntimeTxCall,
} from '@delightfuldot/types';
import type {
  MultiAddress,
  Extrinsic,
  Bytes,
  FixedBytes,
  H256,
  MultiAddressLike,
  AccountId32Like,
  AccountId32,
  Percent,
  Perbill,
  EthereumAddressLike,
  EthereumAddress,
  Data,
} from '@delightfuldot/codecs';
import type {
  PolkadotRuntimeRuntimeCall,
  SpRuntimeMultiSignature,
  FrameSystemEventRecord,
  SpConsensusSlotsEquivocationProof,
  SpSessionMembershipProof,
  SpConsensusBabeDigestsNextConfigDescriptor,
  PalletStakingRewardDestination,
  PalletStakingValidatorPrefs,
  PalletStakingPalletConfigOp,
  PalletStakingPalletConfigOpU32,
  PalletStakingPalletConfigOpPercent,
  PalletStakingPalletConfigOpPerbill,
  PolkadotRuntimeSessionKeys,
  SpConsensusGrandpaEquivocationProof,
  PalletImOnlineHeartbeat,
  PalletImOnlineSr25519AppSr25519Signature,
  PalletConvictionVotingVoteAccountVote,
  PalletConvictionVotingConviction,
  PolkadotRuntimeOriginCaller,
  FrameSupportPreimagesBounded,
  FrameSupportScheduleDispatchTime,
  SpWeightsWeightV2Weight,
  PolkadotRuntimeCommonClaimsEcdsaSignature,
  PolkadotRuntimeCommonClaimsStatementKind,
  PalletVestingVestingInfo,
  PalletIdentityIdentityInfo,
  PalletIdentityBitFlags,
  PalletIdentityJudgement,
  PolkadotRuntimeProxyType,
  PalletMultisigTimepoint,
  PalletElectionProviderMultiPhaseRawSolution,
  PalletElectionProviderMultiPhaseSolutionOrSnapshotSize,
  SpNposElectionsElectionScore,
  SpNposElectionsSupport,
  PalletNominationPoolsBondExtra,
  PalletNominationPoolsPoolState,
  PalletNominationPoolsConfigOp,
  PalletNominationPoolsConfigOpU32,
  PalletNominationPoolsConfigOpPerbill,
  PalletNominationPoolsConfigOp004,
  PalletNominationPoolsClaimPermission,
  PalletNominationPoolsCommissionChangeRate,
  PolkadotPrimitivesVstagingAsyncBackingParams,
  PolkadotPrimitivesV5ExecutorParams,
  PolkadotPrimitivesV5InherentData,
  PolkadotParachainPrimitivesPrimitivesId,
  PolkadotParachainPrimitivesPrimitivesValidationCode,
  PolkadotParachainPrimitivesPrimitivesHeadData,
  PolkadotParachainPrimitivesPrimitivesValidationCodeHash,
  PolkadotPrimitivesV5PvfCheckStatement,
  PolkadotPrimitivesV5ValidatorAppSignature,
  PolkadotParachainPrimitivesPrimitivesHrmpChannelId,
  PolkadotPrimitivesV5SlashingDisputeProof,
  SpRuntimeMultiSigner,
  XcmVersionedMultiLocation,
  XcmVersionedXcm,
  XcmVersionedMultiAssets,
  StagingXcmV3MultilocationMultiLocation,
  XcmV3WeightLimit,
  PolkadotRuntimeParachainsInclusionAggregateMessageOrigin,
} from './types';

type ChainSubmittableExtrinsic<T extends IRuntimeTxCall = PolkadotRuntimeRuntimeCall> = Extrinsic<
  MultiAddress,
  T,
  SpRuntimeMultiSignature,
  any[]
> &
  ISubmittableExtrinsic<ISubmittableResult<FrameSystemEventRecord>>;

export interface ChainTx extends GenericChainTx {
  system: {
    /**
     * See [`Pallet::remark`].
     *
     * @param remark
     **/
    remark: GenericTxCall<
      (remark: Bytes) => ChainSubmittableExtrinsic<{
        pallet: 'System';
        palletCall: {
          name: 'Remark';
          params: { remark: Bytes };
        };
      }>
    >;

    /**
     * See [`Pallet::set_heap_pages`].
     *
     * @param pages
     **/
    setHeapPages: GenericTxCall<
      (pages: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'System';
        palletCall: {
          name: 'SetHeapPages';
          params: { pages: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::set_code`].
     *
     * @param code
     **/
    setCode: GenericTxCall<
      (code: Bytes) => ChainSubmittableExtrinsic<{
        pallet: 'System';
        palletCall: {
          name: 'SetCode';
          params: { code: Bytes };
        };
      }>
    >;

    /**
     * See [`Pallet::set_code_without_checks`].
     *
     * @param code
     **/
    setCodeWithoutChecks: GenericTxCall<
      (code: Bytes) => ChainSubmittableExtrinsic<{
        pallet: 'System';
        palletCall: {
          name: 'SetCodeWithoutChecks';
          params: { code: Bytes };
        };
      }>
    >;

    /**
     * See [`Pallet::set_storage`].
     *
     * @param items
     **/
    setStorage: GenericTxCall<
      (items: Array<[Bytes, Bytes]>) => ChainSubmittableExtrinsic<{
        pallet: 'System';
        palletCall: {
          name: 'SetStorage';
          params: { items: Array<[Bytes, Bytes]> };
        };
      }>
    >;

    /**
     * See [`Pallet::kill_storage`].
     *
     * @param keys
     **/
    killStorage: GenericTxCall<
      (keys: Array<Bytes>) => ChainSubmittableExtrinsic<{
        pallet: 'System';
        palletCall: {
          name: 'KillStorage';
          params: { keys: Array<Bytes> };
        };
      }>
    >;

    /**
     * See [`Pallet::kill_prefix`].
     *
     * @param prefix
     * @param subkeys
     **/
    killPrefix: GenericTxCall<
      (
        prefix: Bytes,
        subkeys: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'System';
        palletCall: {
          name: 'KillPrefix';
          params: { prefix: Bytes; subkeys: number };
        };
      }>
    >;

    /**
     * See [`Pallet::remark_with_event`].
     *
     * @param remark
     **/
    remarkWithEvent: GenericTxCall<
      (remark: Bytes) => ChainSubmittableExtrinsic<{
        pallet: 'System';
        palletCall: {
          name: 'RemarkWithEvent';
          params: { remark: Bytes };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  scheduler: {
    /**
     * See [`Pallet::schedule`].
     *
     * @param when
     * @param maybePeriodic
     * @param priority
     * @param call
     **/
    schedule: GenericTxCall<
      (
        when: number,
        maybePeriodic: [number, number] | undefined,
        priority: number,
        call: PolkadotRuntimeRuntimeCall,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Scheduler';
        palletCall: {
          name: 'Schedule';
          params: {
            when: number;
            maybePeriodic: [number, number] | undefined;
            priority: number;
            call: PolkadotRuntimeRuntimeCall;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::cancel`].
     *
     * @param when
     * @param index
     **/
    cancel: GenericTxCall<
      (
        when: number,
        index: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Scheduler';
        palletCall: {
          name: 'Cancel';
          params: { when: number; index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::schedule_named`].
     *
     * @param id
     * @param when
     * @param maybePeriodic
     * @param priority
     * @param call
     **/
    scheduleNamed: GenericTxCall<
      (
        id: FixedBytes<32>,
        when: number,
        maybePeriodic: [number, number] | undefined,
        priority: number,
        call: PolkadotRuntimeRuntimeCall,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Scheduler';
        palletCall: {
          name: 'ScheduleNamed';
          params: {
            id: FixedBytes<32>;
            when: number;
            maybePeriodic: [number, number] | undefined;
            priority: number;
            call: PolkadotRuntimeRuntimeCall;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::cancel_named`].
     *
     * @param id
     **/
    cancelNamed: GenericTxCall<
      (id: FixedBytes<32>) => ChainSubmittableExtrinsic<{
        pallet: 'Scheduler';
        palletCall: {
          name: 'CancelNamed';
          params: { id: FixedBytes<32> };
        };
      }>
    >;

    /**
     * See [`Pallet::schedule_after`].
     *
     * @param after
     * @param maybePeriodic
     * @param priority
     * @param call
     **/
    scheduleAfter: GenericTxCall<
      (
        after: number,
        maybePeriodic: [number, number] | undefined,
        priority: number,
        call: PolkadotRuntimeRuntimeCall,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Scheduler';
        palletCall: {
          name: 'ScheduleAfter';
          params: {
            after: number;
            maybePeriodic: [number, number] | undefined;
            priority: number;
            call: PolkadotRuntimeRuntimeCall;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::schedule_named_after`].
     *
     * @param id
     * @param after
     * @param maybePeriodic
     * @param priority
     * @param call
     **/
    scheduleNamedAfter: GenericTxCall<
      (
        id: FixedBytes<32>,
        after: number,
        maybePeriodic: [number, number] | undefined,
        priority: number,
        call: PolkadotRuntimeRuntimeCall,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Scheduler';
        palletCall: {
          name: 'ScheduleNamedAfter';
          params: {
            id: FixedBytes<32>;
            after: number;
            maybePeriodic: [number, number] | undefined;
            priority: number;
            call: PolkadotRuntimeRuntimeCall;
          };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  preimage: {
    /**
     * See [`Pallet::note_preimage`].
     *
     * @param bytes
     **/
    notePreimage: GenericTxCall<
      (bytes: Bytes) => ChainSubmittableExtrinsic<{
        pallet: 'Preimage';
        palletCall: {
          name: 'NotePreimage';
          params: { bytes: Bytes };
        };
      }>
    >;

    /**
     * See [`Pallet::unnote_preimage`].
     *
     * @param hash
     **/
    unnotePreimage: GenericTxCall<
      (hash: H256) => ChainSubmittableExtrinsic<{
        pallet: 'Preimage';
        palletCall: {
          name: 'UnnotePreimage';
          params: { hash: H256 };
        };
      }>
    >;

    /**
     * See [`Pallet::request_preimage`].
     *
     * @param hash
     **/
    requestPreimage: GenericTxCall<
      (hash: H256) => ChainSubmittableExtrinsic<{
        pallet: 'Preimage';
        palletCall: {
          name: 'RequestPreimage';
          params: { hash: H256 };
        };
      }>
    >;

    /**
     * See [`Pallet::unrequest_preimage`].
     *
     * @param hash
     **/
    unrequestPreimage: GenericTxCall<
      (hash: H256) => ChainSubmittableExtrinsic<{
        pallet: 'Preimage';
        palletCall: {
          name: 'UnrequestPreimage';
          params: { hash: H256 };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  babe: {
    /**
     * See [`Pallet::report_equivocation`].
     *
     * @param equivocationProof
     * @param keyOwnerProof
     **/
    reportEquivocation: GenericTxCall<
      (
        equivocationProof: SpConsensusSlotsEquivocationProof,
        keyOwnerProof: SpSessionMembershipProof,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Babe';
        palletCall: {
          name: 'ReportEquivocation';
          params: { equivocationProof: SpConsensusSlotsEquivocationProof; keyOwnerProof: SpSessionMembershipProof };
        };
      }>
    >;

    /**
     * See [`Pallet::report_equivocation_unsigned`].
     *
     * @param equivocationProof
     * @param keyOwnerProof
     **/
    reportEquivocationUnsigned: GenericTxCall<
      (
        equivocationProof: SpConsensusSlotsEquivocationProof,
        keyOwnerProof: SpSessionMembershipProof,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Babe';
        palletCall: {
          name: 'ReportEquivocationUnsigned';
          params: { equivocationProof: SpConsensusSlotsEquivocationProof; keyOwnerProof: SpSessionMembershipProof };
        };
      }>
    >;

    /**
     * See [`Pallet::plan_config_change`].
     *
     * @param config
     **/
    planConfigChange: GenericTxCall<
      (config: SpConsensusBabeDigestsNextConfigDescriptor) => ChainSubmittableExtrinsic<{
        pallet: 'Babe';
        palletCall: {
          name: 'PlanConfigChange';
          params: { config: SpConsensusBabeDigestsNextConfigDescriptor };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  timestamp: {
    /**
     * See [`Pallet::set`].
     *
     * @param now
     **/
    set: GenericTxCall<
      (now: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'Timestamp';
        palletCall: {
          name: 'Set';
          params: { now: bigint };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  indices: {
    /**
     * See [`Pallet::claim`].
     *
     * @param index
     **/
    claim: GenericTxCall<
      (index: number) => ChainSubmittableExtrinsic<{
        pallet: 'Indices';
        palletCall: {
          name: 'Claim';
          params: { index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer`].
     *
     * @param new_
     * @param index
     **/
    transfer: GenericTxCall<
      (
        new_: MultiAddressLike,
        index: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Indices';
        palletCall: {
          name: 'Transfer';
          params: { new: MultiAddress; index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::free`].
     *
     * @param index
     **/
    free: GenericTxCall<
      (index: number) => ChainSubmittableExtrinsic<{
        pallet: 'Indices';
        palletCall: {
          name: 'Free';
          params: { index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::force_transfer`].
     *
     * @param new_
     * @param index
     * @param freeze
     **/
    forceTransfer: GenericTxCall<
      (
        new_: MultiAddressLike,
        index: number,
        freeze: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Indices';
        palletCall: {
          name: 'ForceTransfer';
          params: { new: MultiAddress; index: number; freeze: boolean };
        };
      }>
    >;

    /**
     * See [`Pallet::freeze`].
     *
     * @param index
     **/
    freeze: GenericTxCall<
      (index: number) => ChainSubmittableExtrinsic<{
        pallet: 'Indices';
        palletCall: {
          name: 'Freeze';
          params: { index: number };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  balances: {
    /**
     * See [`Pallet::transfer_allow_death`].
     *
     * @param dest
     * @param value
     **/
    transferAllowDeath: GenericTxCall<
      (
        dest: MultiAddressLike,
        value: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Balances';
        palletCall: {
          name: 'TransferAllowDeath';
          params: { dest: MultiAddress; value: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::set_balance_deprecated`].
     *
     * @param who
     * @param newFree
     * @param oldReserved
     **/
    setBalanceDeprecated: GenericTxCall<
      (
        who: MultiAddressLike,
        newFree: bigint,
        oldReserved: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Balances';
        palletCall: {
          name: 'SetBalanceDeprecated';
          params: { who: MultiAddress; newFree: bigint; oldReserved: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::force_transfer`].
     *
     * @param source
     * @param dest
     * @param value
     **/
    forceTransfer: GenericTxCall<
      (
        source: MultiAddressLike,
        dest: MultiAddressLike,
        value: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Balances';
        palletCall: {
          name: 'ForceTransfer';
          params: { source: MultiAddress; dest: MultiAddress; value: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer_keep_alive`].
     *
     * @param dest
     * @param value
     **/
    transferKeepAlive: GenericTxCall<
      (
        dest: MultiAddressLike,
        value: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Balances';
        palletCall: {
          name: 'TransferKeepAlive';
          params: { dest: MultiAddress; value: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer_all`].
     *
     * @param dest
     * @param keepAlive
     **/
    transferAll: GenericTxCall<
      (
        dest: MultiAddressLike,
        keepAlive: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Balances';
        palletCall: {
          name: 'TransferAll';
          params: { dest: MultiAddress; keepAlive: boolean };
        };
      }>
    >;

    /**
     * See [`Pallet::force_unreserve`].
     *
     * @param who
     * @param amount
     **/
    forceUnreserve: GenericTxCall<
      (
        who: MultiAddressLike,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Balances';
        palletCall: {
          name: 'ForceUnreserve';
          params: { who: MultiAddress; amount: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::upgrade_accounts`].
     *
     * @param who
     **/
    upgradeAccounts: GenericTxCall<
      (who: Array<AccountId32Like>) => ChainSubmittableExtrinsic<{
        pallet: 'Balances';
        palletCall: {
          name: 'UpgradeAccounts';
          params: { who: Array<AccountId32> };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer`].
     *
     * @param dest
     * @param value
     **/
    transfer: GenericTxCall<
      (
        dest: MultiAddressLike,
        value: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Balances';
        palletCall: {
          name: 'Transfer';
          params: { dest: MultiAddress; value: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::force_set_balance`].
     *
     * @param who
     * @param newFree
     **/
    forceSetBalance: GenericTxCall<
      (
        who: MultiAddressLike,
        newFree: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Balances';
        palletCall: {
          name: 'ForceSetBalance';
          params: { who: MultiAddress; newFree: bigint };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  staking: {
    /**
     * See [`Pallet::bond`].
     *
     * @param value
     * @param payee
     **/
    bond: GenericTxCall<
      (
        value: bigint,
        payee: PalletStakingRewardDestination,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'Bond';
          params: { value: bigint; payee: PalletStakingRewardDestination };
        };
      }>
    >;

    /**
     * See [`Pallet::bond_extra`].
     *
     * @param maxAdditional
     **/
    bondExtra: GenericTxCall<
      (maxAdditional: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'BondExtra';
          params: { maxAdditional: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::unbond`].
     *
     * @param value
     **/
    unbond: GenericTxCall<
      (value: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'Unbond';
          params: { value: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::withdraw_unbonded`].
     *
     * @param numSlashingSpans
     **/
    withdrawUnbonded: GenericTxCall<
      (numSlashingSpans: number) => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'WithdrawUnbonded';
          params: { numSlashingSpans: number };
        };
      }>
    >;

    /**
     * See [`Pallet::validate`].
     *
     * @param prefs
     **/
    validate: GenericTxCall<
      (prefs: PalletStakingValidatorPrefs) => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'Validate';
          params: { prefs: PalletStakingValidatorPrefs };
        };
      }>
    >;

    /**
     * See [`Pallet::nominate`].
     *
     * @param targets
     **/
    nominate: GenericTxCall<
      (targets: Array<MultiAddressLike>) => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'Nominate';
          params: { targets: Array<MultiAddress> };
        };
      }>
    >;

    /**
     * See [`Pallet::chill`].
     *
     **/
    chill: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'Chill';
        };
      }>
    >;

    /**
     * See [`Pallet::set_payee`].
     *
     * @param payee
     **/
    setPayee: GenericTxCall<
      (payee: PalletStakingRewardDestination) => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'SetPayee';
          params: { payee: PalletStakingRewardDestination };
        };
      }>
    >;

    /**
     * See [`Pallet::set_controller`].
     *
     **/
    setController: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'SetController';
        };
      }>
    >;

    /**
     * See [`Pallet::set_validator_count`].
     *
     * @param new_
     **/
    setValidatorCount: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'SetValidatorCount';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::increase_validator_count`].
     *
     * @param additional
     **/
    increaseValidatorCount: GenericTxCall<
      (additional: number) => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'IncreaseValidatorCount';
          params: { additional: number };
        };
      }>
    >;

    /**
     * See [`Pallet::scale_validator_count`].
     *
     * @param factor
     **/
    scaleValidatorCount: GenericTxCall<
      (factor: Percent) => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'ScaleValidatorCount';
          params: { factor: Percent };
        };
      }>
    >;

    /**
     * See [`Pallet::force_no_eras`].
     *
     **/
    forceNoEras: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'ForceNoEras';
        };
      }>
    >;

    /**
     * See [`Pallet::force_new_era`].
     *
     **/
    forceNewEra: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'ForceNewEra';
        };
      }>
    >;

    /**
     * See [`Pallet::set_invulnerables`].
     *
     * @param invulnerables
     **/
    setInvulnerables: GenericTxCall<
      (invulnerables: Array<AccountId32Like>) => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'SetInvulnerables';
          params: { invulnerables: Array<AccountId32> };
        };
      }>
    >;

    /**
     * See [`Pallet::force_unstake`].
     *
     * @param stash
     * @param numSlashingSpans
     **/
    forceUnstake: GenericTxCall<
      (
        stash: AccountId32Like,
        numSlashingSpans: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'ForceUnstake';
          params: { stash: AccountId32; numSlashingSpans: number };
        };
      }>
    >;

    /**
     * See [`Pallet::force_new_era_always`].
     *
     **/
    forceNewEraAlways: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'ForceNewEraAlways';
        };
      }>
    >;

    /**
     * See [`Pallet::cancel_deferred_slash`].
     *
     * @param era
     * @param slashIndices
     **/
    cancelDeferredSlash: GenericTxCall<
      (
        era: number,
        slashIndices: Array<number>,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'CancelDeferredSlash';
          params: { era: number; slashIndices: Array<number> };
        };
      }>
    >;

    /**
     * See [`Pallet::payout_stakers`].
     *
     * @param validatorStash
     * @param era
     **/
    payoutStakers: GenericTxCall<
      (
        validatorStash: AccountId32Like,
        era: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'PayoutStakers';
          params: { validatorStash: AccountId32; era: number };
        };
      }>
    >;

    /**
     * See [`Pallet::rebond`].
     *
     * @param value
     **/
    rebond: GenericTxCall<
      (value: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'Rebond';
          params: { value: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::reap_stash`].
     *
     * @param stash
     * @param numSlashingSpans
     **/
    reapStash: GenericTxCall<
      (
        stash: AccountId32Like,
        numSlashingSpans: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'ReapStash';
          params: { stash: AccountId32; numSlashingSpans: number };
        };
      }>
    >;

    /**
     * See [`Pallet::kick`].
     *
     * @param who
     **/
    kick: GenericTxCall<
      (who: Array<MultiAddressLike>) => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'Kick';
          params: { who: Array<MultiAddress> };
        };
      }>
    >;

    /**
     * See [`Pallet::set_staking_configs`].
     *
     * @param minNominatorBond
     * @param minValidatorBond
     * @param maxNominatorCount
     * @param maxValidatorCount
     * @param chillThreshold
     * @param minCommission
     **/
    setStakingConfigs: GenericTxCall<
      (
        minNominatorBond: PalletStakingPalletConfigOp,
        minValidatorBond: PalletStakingPalletConfigOp,
        maxNominatorCount: PalletStakingPalletConfigOpU32,
        maxValidatorCount: PalletStakingPalletConfigOpU32,
        chillThreshold: PalletStakingPalletConfigOpPercent,
        minCommission: PalletStakingPalletConfigOpPerbill,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'SetStakingConfigs';
          params: {
            minNominatorBond: PalletStakingPalletConfigOp;
            minValidatorBond: PalletStakingPalletConfigOp;
            maxNominatorCount: PalletStakingPalletConfigOpU32;
            maxValidatorCount: PalletStakingPalletConfigOpU32;
            chillThreshold: PalletStakingPalletConfigOpPercent;
            minCommission: PalletStakingPalletConfigOpPerbill;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::chill_other`].
     *
     * @param controller
     **/
    chillOther: GenericTxCall<
      (controller: AccountId32Like) => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'ChillOther';
          params: { controller: AccountId32 };
        };
      }>
    >;

    /**
     * See [`Pallet::force_apply_min_commission`].
     *
     * @param validatorStash
     **/
    forceApplyMinCommission: GenericTxCall<
      (validatorStash: AccountId32Like) => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'ForceApplyMinCommission';
          params: { validatorStash: AccountId32 };
        };
      }>
    >;

    /**
     * See [`Pallet::set_min_commission`].
     *
     * @param new_
     **/
    setMinCommission: GenericTxCall<
      (new_: Perbill) => ChainSubmittableExtrinsic<{
        pallet: 'Staking';
        palletCall: {
          name: 'SetMinCommission';
          params: { new: Perbill };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  session: {
    /**
     * See [`Pallet::set_keys`].
     *
     * @param keys
     * @param proof
     **/
    setKeys: GenericTxCall<
      (
        keys: PolkadotRuntimeSessionKeys,
        proof: Bytes,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Session';
        palletCall: {
          name: 'SetKeys';
          params: { keys: PolkadotRuntimeSessionKeys; proof: Bytes };
        };
      }>
    >;

    /**
     * See [`Pallet::purge_keys`].
     *
     **/
    purgeKeys: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'Session';
        palletCall: {
          name: 'PurgeKeys';
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  grandpa: {
    /**
     * See [`Pallet::report_equivocation`].
     *
     * @param equivocationProof
     * @param keyOwnerProof
     **/
    reportEquivocation: GenericTxCall<
      (
        equivocationProof: SpConsensusGrandpaEquivocationProof,
        keyOwnerProof: SpSessionMembershipProof,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Grandpa';
        palletCall: {
          name: 'ReportEquivocation';
          params: { equivocationProof: SpConsensusGrandpaEquivocationProof; keyOwnerProof: SpSessionMembershipProof };
        };
      }>
    >;

    /**
     * See [`Pallet::report_equivocation_unsigned`].
     *
     * @param equivocationProof
     * @param keyOwnerProof
     **/
    reportEquivocationUnsigned: GenericTxCall<
      (
        equivocationProof: SpConsensusGrandpaEquivocationProof,
        keyOwnerProof: SpSessionMembershipProof,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Grandpa';
        palletCall: {
          name: 'ReportEquivocationUnsigned';
          params: { equivocationProof: SpConsensusGrandpaEquivocationProof; keyOwnerProof: SpSessionMembershipProof };
        };
      }>
    >;

    /**
     * See [`Pallet::note_stalled`].
     *
     * @param delay
     * @param bestFinalizedBlockNumber
     **/
    noteStalled: GenericTxCall<
      (
        delay: number,
        bestFinalizedBlockNumber: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Grandpa';
        palletCall: {
          name: 'NoteStalled';
          params: { delay: number; bestFinalizedBlockNumber: number };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  imOnline: {
    /**
     * See [`Pallet::heartbeat`].
     *
     * @param heartbeat
     * @param signature
     **/
    heartbeat: GenericTxCall<
      (
        heartbeat: PalletImOnlineHeartbeat,
        signature: PalletImOnlineSr25519AppSr25519Signature,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ImOnline';
        palletCall: {
          name: 'Heartbeat';
          params: { heartbeat: PalletImOnlineHeartbeat; signature: PalletImOnlineSr25519AppSr25519Signature };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  treasury: {
    /**
     * See [`Pallet::propose_spend`].
     *
     * @param value
     * @param beneficiary
     **/
    proposeSpend: GenericTxCall<
      (
        value: bigint,
        beneficiary: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Treasury';
        palletCall: {
          name: 'ProposeSpend';
          params: { value: bigint; beneficiary: MultiAddress };
        };
      }>
    >;

    /**
     * See [`Pallet::reject_proposal`].
     *
     * @param proposalId
     **/
    rejectProposal: GenericTxCall<
      (proposalId: number) => ChainSubmittableExtrinsic<{
        pallet: 'Treasury';
        palletCall: {
          name: 'RejectProposal';
          params: { proposalId: number };
        };
      }>
    >;

    /**
     * See [`Pallet::approve_proposal`].
     *
     * @param proposalId
     **/
    approveProposal: GenericTxCall<
      (proposalId: number) => ChainSubmittableExtrinsic<{
        pallet: 'Treasury';
        palletCall: {
          name: 'ApproveProposal';
          params: { proposalId: number };
        };
      }>
    >;

    /**
     * See [`Pallet::spend`].
     *
     * @param amount
     * @param beneficiary
     **/
    spend: GenericTxCall<
      (
        amount: bigint,
        beneficiary: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Treasury';
        palletCall: {
          name: 'Spend';
          params: { amount: bigint; beneficiary: MultiAddress };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_approval`].
     *
     * @param proposalId
     **/
    removeApproval: GenericTxCall<
      (proposalId: number) => ChainSubmittableExtrinsic<{
        pallet: 'Treasury';
        palletCall: {
          name: 'RemoveApproval';
          params: { proposalId: number };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  convictionVoting: {
    /**
     * See [`Pallet::vote`].
     *
     * @param pollIndex
     * @param vote
     **/
    vote: GenericTxCall<
      (
        pollIndex: number,
        vote: PalletConvictionVotingVoteAccountVote,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ConvictionVoting';
        palletCall: {
          name: 'Vote';
          params: { pollIndex: number; vote: PalletConvictionVotingVoteAccountVote };
        };
      }>
    >;

    /**
     * See [`Pallet::delegate`].
     *
     * @param class_
     * @param to
     * @param conviction
     * @param balance
     **/
    delegate: GenericTxCall<
      (
        class_: number,
        to: MultiAddressLike,
        conviction: PalletConvictionVotingConviction,
        balance: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ConvictionVoting';
        palletCall: {
          name: 'Delegate';
          params: { class: number; to: MultiAddress; conviction: PalletConvictionVotingConviction; balance: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::undelegate`].
     *
     * @param class_
     **/
    undelegate: GenericTxCall<
      (class_: number) => ChainSubmittableExtrinsic<{
        pallet: 'ConvictionVoting';
        palletCall: {
          name: 'Undelegate';
          params: { class: number };
        };
      }>
    >;

    /**
     * See [`Pallet::unlock`].
     *
     * @param class_
     * @param target
     **/
    unlock: GenericTxCall<
      (
        class_: number,
        target: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ConvictionVoting';
        palletCall: {
          name: 'Unlock';
          params: { class: number; target: MultiAddress };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_vote`].
     *
     * @param class_
     * @param index
     **/
    removeVote: GenericTxCall<
      (
        class_: number | undefined,
        index: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ConvictionVoting';
        palletCall: {
          name: 'RemoveVote';
          params: { class: number | undefined; index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_other_vote`].
     *
     * @param target
     * @param class_
     * @param index
     **/
    removeOtherVote: GenericTxCall<
      (
        target: MultiAddressLike,
        class_: number,
        index: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ConvictionVoting';
        palletCall: {
          name: 'RemoveOtherVote';
          params: { target: MultiAddress; class: number; index: number };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  referenda: {
    /**
     * See [`Pallet::submit`].
     *
     * @param proposalOrigin
     * @param proposal
     * @param enactmentMoment
     **/
    submit: GenericTxCall<
      (
        proposalOrigin: PolkadotRuntimeOriginCaller,
        proposal: FrameSupportPreimagesBounded,
        enactmentMoment: FrameSupportScheduleDispatchTime,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Referenda';
        palletCall: {
          name: 'Submit';
          params: {
            proposalOrigin: PolkadotRuntimeOriginCaller;
            proposal: FrameSupportPreimagesBounded;
            enactmentMoment: FrameSupportScheduleDispatchTime;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::place_decision_deposit`].
     *
     * @param index
     **/
    placeDecisionDeposit: GenericTxCall<
      (index: number) => ChainSubmittableExtrinsic<{
        pallet: 'Referenda';
        palletCall: {
          name: 'PlaceDecisionDeposit';
          params: { index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::refund_decision_deposit`].
     *
     * @param index
     **/
    refundDecisionDeposit: GenericTxCall<
      (index: number) => ChainSubmittableExtrinsic<{
        pallet: 'Referenda';
        palletCall: {
          name: 'RefundDecisionDeposit';
          params: { index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::cancel`].
     *
     * @param index
     **/
    cancel: GenericTxCall<
      (index: number) => ChainSubmittableExtrinsic<{
        pallet: 'Referenda';
        palletCall: {
          name: 'Cancel';
          params: { index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::kill`].
     *
     * @param index
     **/
    kill: GenericTxCall<
      (index: number) => ChainSubmittableExtrinsic<{
        pallet: 'Referenda';
        palletCall: {
          name: 'Kill';
          params: { index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::nudge_referendum`].
     *
     * @param index
     **/
    nudgeReferendum: GenericTxCall<
      (index: number) => ChainSubmittableExtrinsic<{
        pallet: 'Referenda';
        palletCall: {
          name: 'NudgeReferendum';
          params: { index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::one_fewer_deciding`].
     *
     * @param track
     **/
    oneFewerDeciding: GenericTxCall<
      (track: number) => ChainSubmittableExtrinsic<{
        pallet: 'Referenda';
        palletCall: {
          name: 'OneFewerDeciding';
          params: { track: number };
        };
      }>
    >;

    /**
     * See [`Pallet::refund_submission_deposit`].
     *
     * @param index
     **/
    refundSubmissionDeposit: GenericTxCall<
      (index: number) => ChainSubmittableExtrinsic<{
        pallet: 'Referenda';
        palletCall: {
          name: 'RefundSubmissionDeposit';
          params: { index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_metadata`].
     *
     * @param index
     * @param maybeHash
     **/
    setMetadata: GenericTxCall<
      (
        index: number,
        maybeHash: H256 | undefined,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Referenda';
        palletCall: {
          name: 'SetMetadata';
          params: { index: number; maybeHash: H256 | undefined };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  whitelist: {
    /**
     * See [`Pallet::whitelist_call`].
     *
     * @param callHash
     **/
    whitelistCall: GenericTxCall<
      (callHash: H256) => ChainSubmittableExtrinsic<{
        pallet: 'Whitelist';
        palletCall: {
          name: 'WhitelistCall';
          params: { callHash: H256 };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_whitelisted_call`].
     *
     * @param callHash
     **/
    removeWhitelistedCall: GenericTxCall<
      (callHash: H256) => ChainSubmittableExtrinsic<{
        pallet: 'Whitelist';
        palletCall: {
          name: 'RemoveWhitelistedCall';
          params: { callHash: H256 };
        };
      }>
    >;

    /**
     * See [`Pallet::dispatch_whitelisted_call`].
     *
     * @param callHash
     * @param callEncodedLen
     * @param callWeightWitness
     **/
    dispatchWhitelistedCall: GenericTxCall<
      (
        callHash: H256,
        callEncodedLen: number,
        callWeightWitness: SpWeightsWeightV2Weight,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Whitelist';
        palletCall: {
          name: 'DispatchWhitelistedCall';
          params: { callHash: H256; callEncodedLen: number; callWeightWitness: SpWeightsWeightV2Weight };
        };
      }>
    >;

    /**
     * See [`Pallet::dispatch_whitelisted_call_with_preimage`].
     *
     * @param call
     **/
    dispatchWhitelistedCallWithPreimage: GenericTxCall<
      (call: PolkadotRuntimeRuntimeCall) => ChainSubmittableExtrinsic<{
        pallet: 'Whitelist';
        palletCall: {
          name: 'DispatchWhitelistedCallWithPreimage';
          params: { call: PolkadotRuntimeRuntimeCall };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  claims: {
    /**
     * See [`Pallet::claim`].
     *
     * @param dest
     * @param ethereumSignature
     **/
    claim: GenericTxCall<
      (
        dest: AccountId32Like,
        ethereumSignature: PolkadotRuntimeCommonClaimsEcdsaSignature,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Claims';
        palletCall: {
          name: 'Claim';
          params: { dest: AccountId32; ethereumSignature: PolkadotRuntimeCommonClaimsEcdsaSignature };
        };
      }>
    >;

    /**
     * See [`Pallet::mint_claim`].
     *
     * @param who
     * @param value
     * @param vestingSchedule
     * @param statement
     **/
    mintClaim: GenericTxCall<
      (
        who: EthereumAddressLike,
        value: bigint,
        vestingSchedule: [bigint, bigint, number] | undefined,
        statement: PolkadotRuntimeCommonClaimsStatementKind | undefined,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Claims';
        palletCall: {
          name: 'MintClaim';
          params: {
            who: EthereumAddress;
            value: bigint;
            vestingSchedule: [bigint, bigint, number] | undefined;
            statement: PolkadotRuntimeCommonClaimsStatementKind | undefined;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::claim_attest`].
     *
     * @param dest
     * @param ethereumSignature
     * @param statement
     **/
    claimAttest: GenericTxCall<
      (
        dest: AccountId32Like,
        ethereumSignature: PolkadotRuntimeCommonClaimsEcdsaSignature,
        statement: Bytes,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Claims';
        palletCall: {
          name: 'ClaimAttest';
          params: { dest: AccountId32; ethereumSignature: PolkadotRuntimeCommonClaimsEcdsaSignature; statement: Bytes };
        };
      }>
    >;

    /**
     * See [`Pallet::attest`].
     *
     * @param statement
     **/
    attest: GenericTxCall<
      (statement: Bytes) => ChainSubmittableExtrinsic<{
        pallet: 'Claims';
        palletCall: {
          name: 'Attest';
          params: { statement: Bytes };
        };
      }>
    >;

    /**
     * See [`Pallet::move_claim`].
     *
     * @param old
     * @param new_
     * @param maybePreclaim
     **/
    moveClaim: GenericTxCall<
      (
        old: EthereumAddressLike,
        new_: EthereumAddressLike,
        maybePreclaim: AccountId32Like | undefined,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Claims';
        palletCall: {
          name: 'MoveClaim';
          params: { old: EthereumAddress; new: EthereumAddress; maybePreclaim: AccountId32 | undefined };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  vesting: {
    /**
     * See [`Pallet::vest`].
     *
     **/
    vest: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'Vesting';
        palletCall: {
          name: 'Vest';
        };
      }>
    >;

    /**
     * See [`Pallet::vest_other`].
     *
     * @param target
     **/
    vestOther: GenericTxCall<
      (target: MultiAddressLike) => ChainSubmittableExtrinsic<{
        pallet: 'Vesting';
        palletCall: {
          name: 'VestOther';
          params: { target: MultiAddress };
        };
      }>
    >;

    /**
     * See [`Pallet::vested_transfer`].
     *
     * @param target
     * @param schedule
     **/
    vestedTransfer: GenericTxCall<
      (
        target: MultiAddressLike,
        schedule: PalletVestingVestingInfo,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Vesting';
        palletCall: {
          name: 'VestedTransfer';
          params: { target: MultiAddress; schedule: PalletVestingVestingInfo };
        };
      }>
    >;

    /**
     * See [`Pallet::force_vested_transfer`].
     *
     * @param source
     * @param target
     * @param schedule
     **/
    forceVestedTransfer: GenericTxCall<
      (
        source: MultiAddressLike,
        target: MultiAddressLike,
        schedule: PalletVestingVestingInfo,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Vesting';
        palletCall: {
          name: 'ForceVestedTransfer';
          params: { source: MultiAddress; target: MultiAddress; schedule: PalletVestingVestingInfo };
        };
      }>
    >;

    /**
     * See [`Pallet::merge_schedules`].
     *
     * @param schedule1Index
     * @param schedule2Index
     **/
    mergeSchedules: GenericTxCall<
      (
        schedule1Index: number,
        schedule2Index: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Vesting';
        palletCall: {
          name: 'MergeSchedules';
          params: { schedule1Index: number; schedule2Index: number };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  utility: {
    /**
     * See [`Pallet::batch`].
     *
     * @param calls
     **/
    batch: GenericTxCall<
      (calls: Array<PolkadotRuntimeRuntimeCall>) => ChainSubmittableExtrinsic<{
        pallet: 'Utility';
        palletCall: {
          name: 'Batch';
          params: { calls: Array<PolkadotRuntimeRuntimeCall> };
        };
      }>
    >;

    /**
     * See [`Pallet::as_derivative`].
     *
     * @param index
     * @param call
     **/
    asDerivative: GenericTxCall<
      (
        index: number,
        call: PolkadotRuntimeRuntimeCall,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Utility';
        palletCall: {
          name: 'AsDerivative';
          params: { index: number; call: PolkadotRuntimeRuntimeCall };
        };
      }>
    >;

    /**
     * See [`Pallet::batch_all`].
     *
     * @param calls
     **/
    batchAll: GenericTxCall<
      (calls: Array<PolkadotRuntimeRuntimeCall>) => ChainSubmittableExtrinsic<{
        pallet: 'Utility';
        palletCall: {
          name: 'BatchAll';
          params: { calls: Array<PolkadotRuntimeRuntimeCall> };
        };
      }>
    >;

    /**
     * See [`Pallet::dispatch_as`].
     *
     * @param asOrigin
     * @param call
     **/
    dispatchAs: GenericTxCall<
      (
        asOrigin: PolkadotRuntimeOriginCaller,
        call: PolkadotRuntimeRuntimeCall,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Utility';
        palletCall: {
          name: 'DispatchAs';
          params: { asOrigin: PolkadotRuntimeOriginCaller; call: PolkadotRuntimeRuntimeCall };
        };
      }>
    >;

    /**
     * See [`Pallet::force_batch`].
     *
     * @param calls
     **/
    forceBatch: GenericTxCall<
      (calls: Array<PolkadotRuntimeRuntimeCall>) => ChainSubmittableExtrinsic<{
        pallet: 'Utility';
        palletCall: {
          name: 'ForceBatch';
          params: { calls: Array<PolkadotRuntimeRuntimeCall> };
        };
      }>
    >;

    /**
     * See [`Pallet::with_weight`].
     *
     * @param call
     * @param weight
     **/
    withWeight: GenericTxCall<
      (
        call: PolkadotRuntimeRuntimeCall,
        weight: SpWeightsWeightV2Weight,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Utility';
        palletCall: {
          name: 'WithWeight';
          params: { call: PolkadotRuntimeRuntimeCall; weight: SpWeightsWeightV2Weight };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  identity: {
    /**
     * See [`Pallet::add_registrar`].
     *
     * @param account
     **/
    addRegistrar: GenericTxCall<
      (account: MultiAddressLike) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'AddRegistrar';
          params: { account: MultiAddress };
        };
      }>
    >;

    /**
     * See [`Pallet::set_identity`].
     *
     * @param info
     **/
    setIdentity: GenericTxCall<
      (info: PalletIdentityIdentityInfo) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'SetIdentity';
          params: { info: PalletIdentityIdentityInfo };
        };
      }>
    >;

    /**
     * See [`Pallet::set_subs`].
     *
     * @param subs
     **/
    setSubs: GenericTxCall<
      (subs: Array<[AccountId32Like, Data]>) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'SetSubs';
          params: { subs: Array<[AccountId32, Data]> };
        };
      }>
    >;

    /**
     * See [`Pallet::clear_identity`].
     *
     **/
    clearIdentity: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'ClearIdentity';
        };
      }>
    >;

    /**
     * See [`Pallet::request_judgement`].
     *
     * @param regIndex
     * @param maxFee
     **/
    requestJudgement: GenericTxCall<
      (
        regIndex: number,
        maxFee: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'RequestJudgement';
          params: { regIndex: number; maxFee: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::cancel_request`].
     *
     * @param regIndex
     **/
    cancelRequest: GenericTxCall<
      (regIndex: number) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'CancelRequest';
          params: { regIndex: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_fee`].
     *
     * @param index
     * @param fee
     **/
    setFee: GenericTxCall<
      (
        index: number,
        fee: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'SetFee';
          params: { index: number; fee: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::set_account_id`].
     *
     * @param index
     * @param new_
     **/
    setAccountId: GenericTxCall<
      (
        index: number,
        new_: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'SetAccountId';
          params: { index: number; new: MultiAddress };
        };
      }>
    >;

    /**
     * See [`Pallet::set_fields`].
     *
     * @param index
     * @param fields
     **/
    setFields: GenericTxCall<
      (
        index: number,
        fields: PalletIdentityBitFlags,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'SetFields';
          params: { index: number; fields: PalletIdentityBitFlags };
        };
      }>
    >;

    /**
     * See [`Pallet::provide_judgement`].
     *
     * @param regIndex
     * @param target
     * @param judgement
     * @param identity
     **/
    provideJudgement: GenericTxCall<
      (
        regIndex: number,
        target: MultiAddressLike,
        judgement: PalletIdentityJudgement,
        identity: H256,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'ProvideJudgement';
          params: { regIndex: number; target: MultiAddress; judgement: PalletIdentityJudgement; identity: H256 };
        };
      }>
    >;

    /**
     * See [`Pallet::kill_identity`].
     *
     * @param target
     **/
    killIdentity: GenericTxCall<
      (target: MultiAddressLike) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'KillIdentity';
          params: { target: MultiAddress };
        };
      }>
    >;

    /**
     * See [`Pallet::add_sub`].
     *
     * @param sub
     * @param data
     **/
    addSub: GenericTxCall<
      (
        sub: MultiAddressLike,
        data: Data,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'AddSub';
          params: { sub: MultiAddress; data: Data };
        };
      }>
    >;

    /**
     * See [`Pallet::rename_sub`].
     *
     * @param sub
     * @param data
     **/
    renameSub: GenericTxCall<
      (
        sub: MultiAddressLike,
        data: Data,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'RenameSub';
          params: { sub: MultiAddress; data: Data };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_sub`].
     *
     * @param sub
     **/
    removeSub: GenericTxCall<
      (sub: MultiAddressLike) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'RemoveSub';
          params: { sub: MultiAddress };
        };
      }>
    >;

    /**
     * See [`Pallet::quit_sub`].
     *
     **/
    quitSub: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'QuitSub';
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  proxy: {
    /**
     * See [`Pallet::proxy`].
     *
     * @param real
     * @param forceProxyType
     * @param call
     **/
    proxy: GenericTxCall<
      (
        real: MultiAddressLike,
        forceProxyType: PolkadotRuntimeProxyType | undefined,
        call: PolkadotRuntimeRuntimeCall,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Proxy';
        palletCall: {
          name: 'Proxy';
          params: {
            real: MultiAddress;
            forceProxyType: PolkadotRuntimeProxyType | undefined;
            call: PolkadotRuntimeRuntimeCall;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::add_proxy`].
     *
     * @param delegate
     * @param proxyType
     * @param delay
     **/
    addProxy: GenericTxCall<
      (
        delegate: MultiAddressLike,
        proxyType: PolkadotRuntimeProxyType,
        delay: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Proxy';
        palletCall: {
          name: 'AddProxy';
          params: { delegate: MultiAddress; proxyType: PolkadotRuntimeProxyType; delay: number };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_proxy`].
     *
     * @param delegate
     * @param proxyType
     * @param delay
     **/
    removeProxy: GenericTxCall<
      (
        delegate: MultiAddressLike,
        proxyType: PolkadotRuntimeProxyType,
        delay: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Proxy';
        palletCall: {
          name: 'RemoveProxy';
          params: { delegate: MultiAddress; proxyType: PolkadotRuntimeProxyType; delay: number };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_proxies`].
     *
     **/
    removeProxies: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'Proxy';
        palletCall: {
          name: 'RemoveProxies';
        };
      }>
    >;

    /**
     * See [`Pallet::create_pure`].
     *
     * @param proxyType
     * @param delay
     * @param index
     **/
    createPure: GenericTxCall<
      (
        proxyType: PolkadotRuntimeProxyType,
        delay: number,
        index: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Proxy';
        palletCall: {
          name: 'CreatePure';
          params: { proxyType: PolkadotRuntimeProxyType; delay: number; index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::kill_pure`].
     *
     * @param spawner
     * @param proxyType
     * @param index
     * @param height
     * @param extIndex
     **/
    killPure: GenericTxCall<
      (
        spawner: MultiAddressLike,
        proxyType: PolkadotRuntimeProxyType,
        index: number,
        height: number,
        extIndex: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Proxy';
        palletCall: {
          name: 'KillPure';
          params: {
            spawner: MultiAddress;
            proxyType: PolkadotRuntimeProxyType;
            index: number;
            height: number;
            extIndex: number;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::announce`].
     *
     * @param real
     * @param callHash
     **/
    announce: GenericTxCall<
      (
        real: MultiAddressLike,
        callHash: H256,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Proxy';
        palletCall: {
          name: 'Announce';
          params: { real: MultiAddress; callHash: H256 };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_announcement`].
     *
     * @param real
     * @param callHash
     **/
    removeAnnouncement: GenericTxCall<
      (
        real: MultiAddressLike,
        callHash: H256,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Proxy';
        palletCall: {
          name: 'RemoveAnnouncement';
          params: { real: MultiAddress; callHash: H256 };
        };
      }>
    >;

    /**
     * See [`Pallet::reject_announcement`].
     *
     * @param delegate
     * @param callHash
     **/
    rejectAnnouncement: GenericTxCall<
      (
        delegate: MultiAddressLike,
        callHash: H256,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Proxy';
        palletCall: {
          name: 'RejectAnnouncement';
          params: { delegate: MultiAddress; callHash: H256 };
        };
      }>
    >;

    /**
     * See [`Pallet::proxy_announced`].
     *
     * @param delegate
     * @param real
     * @param forceProxyType
     * @param call
     **/
    proxyAnnounced: GenericTxCall<
      (
        delegate: MultiAddressLike,
        real: MultiAddressLike,
        forceProxyType: PolkadotRuntimeProxyType | undefined,
        call: PolkadotRuntimeRuntimeCall,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Proxy';
        palletCall: {
          name: 'ProxyAnnounced';
          params: {
            delegate: MultiAddress;
            real: MultiAddress;
            forceProxyType: PolkadotRuntimeProxyType | undefined;
            call: PolkadotRuntimeRuntimeCall;
          };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  multisig: {
    /**
     * See [`Pallet::as_multi_threshold_1`].
     *
     * @param otherSignatories
     * @param call
     **/
    asMultiThreshold1: GenericTxCall<
      (
        otherSignatories: Array<AccountId32Like>,
        call: PolkadotRuntimeRuntimeCall,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Multisig';
        palletCall: {
          name: 'AsMultiThreshold1';
          params: { otherSignatories: Array<AccountId32>; call: PolkadotRuntimeRuntimeCall };
        };
      }>
    >;

    /**
     * See [`Pallet::as_multi`].
     *
     * @param threshold
     * @param otherSignatories
     * @param maybeTimepoint
     * @param call
     * @param maxWeight
     **/
    asMulti: GenericTxCall<
      (
        threshold: number,
        otherSignatories: Array<AccountId32Like>,
        maybeTimepoint: PalletMultisigTimepoint | undefined,
        call: PolkadotRuntimeRuntimeCall,
        maxWeight: SpWeightsWeightV2Weight,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Multisig';
        palletCall: {
          name: 'AsMulti';
          params: {
            threshold: number;
            otherSignatories: Array<AccountId32>;
            maybeTimepoint: PalletMultisigTimepoint | undefined;
            call: PolkadotRuntimeRuntimeCall;
            maxWeight: SpWeightsWeightV2Weight;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::approve_as_multi`].
     *
     * @param threshold
     * @param otherSignatories
     * @param maybeTimepoint
     * @param callHash
     * @param maxWeight
     **/
    approveAsMulti: GenericTxCall<
      (
        threshold: number,
        otherSignatories: Array<AccountId32Like>,
        maybeTimepoint: PalletMultisigTimepoint | undefined,
        callHash: FixedBytes<32>,
        maxWeight: SpWeightsWeightV2Weight,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Multisig';
        palletCall: {
          name: 'ApproveAsMulti';
          params: {
            threshold: number;
            otherSignatories: Array<AccountId32>;
            maybeTimepoint: PalletMultisigTimepoint | undefined;
            callHash: FixedBytes<32>;
            maxWeight: SpWeightsWeightV2Weight;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::cancel_as_multi`].
     *
     * @param threshold
     * @param otherSignatories
     * @param timepoint
     * @param callHash
     **/
    cancelAsMulti: GenericTxCall<
      (
        threshold: number,
        otherSignatories: Array<AccountId32Like>,
        timepoint: PalletMultisigTimepoint,
        callHash: FixedBytes<32>,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Multisig';
        palletCall: {
          name: 'CancelAsMulti';
          params: {
            threshold: number;
            otherSignatories: Array<AccountId32>;
            timepoint: PalletMultisigTimepoint;
            callHash: FixedBytes<32>;
          };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  bounties: {
    /**
     * See [`Pallet::propose_bounty`].
     *
     * @param value
     * @param description
     **/
    proposeBounty: GenericTxCall<
      (
        value: bigint,
        description: Bytes,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Bounties';
        palletCall: {
          name: 'ProposeBounty';
          params: { value: bigint; description: Bytes };
        };
      }>
    >;

    /**
     * See [`Pallet::approve_bounty`].
     *
     * @param bountyId
     **/
    approveBounty: GenericTxCall<
      (bountyId: number) => ChainSubmittableExtrinsic<{
        pallet: 'Bounties';
        palletCall: {
          name: 'ApproveBounty';
          params: { bountyId: number };
        };
      }>
    >;

    /**
     * See [`Pallet::propose_curator`].
     *
     * @param bountyId
     * @param curator
     * @param fee
     **/
    proposeCurator: GenericTxCall<
      (
        bountyId: number,
        curator: MultiAddressLike,
        fee: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Bounties';
        palletCall: {
          name: 'ProposeCurator';
          params: { bountyId: number; curator: MultiAddress; fee: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::unassign_curator`].
     *
     * @param bountyId
     **/
    unassignCurator: GenericTxCall<
      (bountyId: number) => ChainSubmittableExtrinsic<{
        pallet: 'Bounties';
        palletCall: {
          name: 'UnassignCurator';
          params: { bountyId: number };
        };
      }>
    >;

    /**
     * See [`Pallet::accept_curator`].
     *
     * @param bountyId
     **/
    acceptCurator: GenericTxCall<
      (bountyId: number) => ChainSubmittableExtrinsic<{
        pallet: 'Bounties';
        palletCall: {
          name: 'AcceptCurator';
          params: { bountyId: number };
        };
      }>
    >;

    /**
     * See [`Pallet::award_bounty`].
     *
     * @param bountyId
     * @param beneficiary
     **/
    awardBounty: GenericTxCall<
      (
        bountyId: number,
        beneficiary: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Bounties';
        palletCall: {
          name: 'AwardBounty';
          params: { bountyId: number; beneficiary: MultiAddress };
        };
      }>
    >;

    /**
     * See [`Pallet::claim_bounty`].
     *
     * @param bountyId
     **/
    claimBounty: GenericTxCall<
      (bountyId: number) => ChainSubmittableExtrinsic<{
        pallet: 'Bounties';
        palletCall: {
          name: 'ClaimBounty';
          params: { bountyId: number };
        };
      }>
    >;

    /**
     * See [`Pallet::close_bounty`].
     *
     * @param bountyId
     **/
    closeBounty: GenericTxCall<
      (bountyId: number) => ChainSubmittableExtrinsic<{
        pallet: 'Bounties';
        palletCall: {
          name: 'CloseBounty';
          params: { bountyId: number };
        };
      }>
    >;

    /**
     * See [`Pallet::extend_bounty_expiry`].
     *
     * @param bountyId
     * @param remark
     **/
    extendBountyExpiry: GenericTxCall<
      (
        bountyId: number,
        remark: Bytes,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Bounties';
        palletCall: {
          name: 'ExtendBountyExpiry';
          params: { bountyId: number; remark: Bytes };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  childBounties: {
    /**
     * See [`Pallet::add_child_bounty`].
     *
     * @param parentBountyId
     * @param value
     * @param description
     **/
    addChildBounty: GenericTxCall<
      (
        parentBountyId: number,
        value: bigint,
        description: Bytes,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ChildBounties';
        palletCall: {
          name: 'AddChildBounty';
          params: { parentBountyId: number; value: bigint; description: Bytes };
        };
      }>
    >;

    /**
     * See [`Pallet::propose_curator`].
     *
     * @param parentBountyId
     * @param childBountyId
     * @param curator
     * @param fee
     **/
    proposeCurator: GenericTxCall<
      (
        parentBountyId: number,
        childBountyId: number,
        curator: MultiAddressLike,
        fee: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ChildBounties';
        palletCall: {
          name: 'ProposeCurator';
          params: { parentBountyId: number; childBountyId: number; curator: MultiAddress; fee: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::accept_curator`].
     *
     * @param parentBountyId
     * @param childBountyId
     **/
    acceptCurator: GenericTxCall<
      (
        parentBountyId: number,
        childBountyId: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ChildBounties';
        palletCall: {
          name: 'AcceptCurator';
          params: { parentBountyId: number; childBountyId: number };
        };
      }>
    >;

    /**
     * See [`Pallet::unassign_curator`].
     *
     * @param parentBountyId
     * @param childBountyId
     **/
    unassignCurator: GenericTxCall<
      (
        parentBountyId: number,
        childBountyId: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ChildBounties';
        palletCall: {
          name: 'UnassignCurator';
          params: { parentBountyId: number; childBountyId: number };
        };
      }>
    >;

    /**
     * See [`Pallet::award_child_bounty`].
     *
     * @param parentBountyId
     * @param childBountyId
     * @param beneficiary
     **/
    awardChildBounty: GenericTxCall<
      (
        parentBountyId: number,
        childBountyId: number,
        beneficiary: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ChildBounties';
        palletCall: {
          name: 'AwardChildBounty';
          params: { parentBountyId: number; childBountyId: number; beneficiary: MultiAddress };
        };
      }>
    >;

    /**
     * See [`Pallet::claim_child_bounty`].
     *
     * @param parentBountyId
     * @param childBountyId
     **/
    claimChildBounty: GenericTxCall<
      (
        parentBountyId: number,
        childBountyId: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ChildBounties';
        palletCall: {
          name: 'ClaimChildBounty';
          params: { parentBountyId: number; childBountyId: number };
        };
      }>
    >;

    /**
     * See [`Pallet::close_child_bounty`].
     *
     * @param parentBountyId
     * @param childBountyId
     **/
    closeChildBounty: GenericTxCall<
      (
        parentBountyId: number,
        childBountyId: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ChildBounties';
        palletCall: {
          name: 'CloseChildBounty';
          params: { parentBountyId: number; childBountyId: number };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  electionProviderMultiPhase: {
    /**
     * See [`Pallet::submit_unsigned`].
     *
     * @param rawSolution
     * @param witness
     **/
    submitUnsigned: GenericTxCall<
      (
        rawSolution: PalletElectionProviderMultiPhaseRawSolution,
        witness: PalletElectionProviderMultiPhaseSolutionOrSnapshotSize,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ElectionProviderMultiPhase';
        palletCall: {
          name: 'SubmitUnsigned';
          params: {
            rawSolution: PalletElectionProviderMultiPhaseRawSolution;
            witness: PalletElectionProviderMultiPhaseSolutionOrSnapshotSize;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::set_minimum_untrusted_score`].
     *
     * @param maybeNextScore
     **/
    setMinimumUntrustedScore: GenericTxCall<
      (maybeNextScore: SpNposElectionsElectionScore | undefined) => ChainSubmittableExtrinsic<{
        pallet: 'ElectionProviderMultiPhase';
        palletCall: {
          name: 'SetMinimumUntrustedScore';
          params: { maybeNextScore: SpNposElectionsElectionScore | undefined };
        };
      }>
    >;

    /**
     * See [`Pallet::set_emergency_election_result`].
     *
     * @param supports
     **/
    setEmergencyElectionResult: GenericTxCall<
      (supports: Array<[AccountId32Like, SpNposElectionsSupport]>) => ChainSubmittableExtrinsic<{
        pallet: 'ElectionProviderMultiPhase';
        palletCall: {
          name: 'SetEmergencyElectionResult';
          params: { supports: Array<[AccountId32, SpNposElectionsSupport]> };
        };
      }>
    >;

    /**
     * See [`Pallet::submit`].
     *
     * @param rawSolution
     **/
    submit: GenericTxCall<
      (rawSolution: PalletElectionProviderMultiPhaseRawSolution) => ChainSubmittableExtrinsic<{
        pallet: 'ElectionProviderMultiPhase';
        palletCall: {
          name: 'Submit';
          params: { rawSolution: PalletElectionProviderMultiPhaseRawSolution };
        };
      }>
    >;

    /**
     * See [`Pallet::governance_fallback`].
     *
     * @param maybeMaxVoters
     * @param maybeMaxTargets
     **/
    governanceFallback: GenericTxCall<
      (
        maybeMaxVoters: number | undefined,
        maybeMaxTargets: number | undefined,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ElectionProviderMultiPhase';
        palletCall: {
          name: 'GovernanceFallback';
          params: { maybeMaxVoters: number | undefined; maybeMaxTargets: number | undefined };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  voterList: {
    /**
     * See [`Pallet::rebag`].
     *
     * @param dislocated
     **/
    rebag: GenericTxCall<
      (dislocated: MultiAddressLike) => ChainSubmittableExtrinsic<{
        pallet: 'VoterList';
        palletCall: {
          name: 'Rebag';
          params: { dislocated: MultiAddress };
        };
      }>
    >;

    /**
     * See [`Pallet::put_in_front_of`].
     *
     * @param lighter
     **/
    putInFrontOf: GenericTxCall<
      (lighter: MultiAddressLike) => ChainSubmittableExtrinsic<{
        pallet: 'VoterList';
        palletCall: {
          name: 'PutInFrontOf';
          params: { lighter: MultiAddress };
        };
      }>
    >;

    /**
     * See [`Pallet::put_in_front_of_other`].
     *
     * @param heavier
     * @param lighter
     **/
    putInFrontOfOther: GenericTxCall<
      (
        heavier: MultiAddressLike,
        lighter: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'VoterList';
        palletCall: {
          name: 'PutInFrontOfOther';
          params: { heavier: MultiAddress; lighter: MultiAddress };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  nominationPools: {
    /**
     * See [`Pallet::join`].
     *
     * @param amount
     * @param poolId
     **/
    join: GenericTxCall<
      (
        amount: bigint,
        poolId: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'NominationPools';
        palletCall: {
          name: 'Join';
          params: { amount: bigint; poolId: number };
        };
      }>
    >;

    /**
     * See [`Pallet::bond_extra`].
     *
     * @param extra
     **/
    bondExtra: GenericTxCall<
      (extra: PalletNominationPoolsBondExtra) => ChainSubmittableExtrinsic<{
        pallet: 'NominationPools';
        palletCall: {
          name: 'BondExtra';
          params: { extra: PalletNominationPoolsBondExtra };
        };
      }>
    >;

    /**
     * See [`Pallet::claim_payout`].
     *
     **/
    claimPayout: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'NominationPools';
        palletCall: {
          name: 'ClaimPayout';
        };
      }>
    >;

    /**
     * See [`Pallet::unbond`].
     *
     * @param memberAccount
     * @param unbondingPoints
     **/
    unbond: GenericTxCall<
      (
        memberAccount: MultiAddressLike,
        unbondingPoints: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'NominationPools';
        palletCall: {
          name: 'Unbond';
          params: { memberAccount: MultiAddress; unbondingPoints: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::pool_withdraw_unbonded`].
     *
     * @param poolId
     * @param numSlashingSpans
     **/
    poolWithdrawUnbonded: GenericTxCall<
      (
        poolId: number,
        numSlashingSpans: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'NominationPools';
        palletCall: {
          name: 'PoolWithdrawUnbonded';
          params: { poolId: number; numSlashingSpans: number };
        };
      }>
    >;

    /**
     * See [`Pallet::withdraw_unbonded`].
     *
     * @param memberAccount
     * @param numSlashingSpans
     **/
    withdrawUnbonded: GenericTxCall<
      (
        memberAccount: MultiAddressLike,
        numSlashingSpans: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'NominationPools';
        palletCall: {
          name: 'WithdrawUnbonded';
          params: { memberAccount: MultiAddress; numSlashingSpans: number };
        };
      }>
    >;

    /**
     * See [`Pallet::create`].
     *
     * @param amount
     * @param root
     * @param nominator
     * @param bouncer
     **/
    create: GenericTxCall<
      (
        amount: bigint,
        root: MultiAddressLike,
        nominator: MultiAddressLike,
        bouncer: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'NominationPools';
        palletCall: {
          name: 'Create';
          params: { amount: bigint; root: MultiAddress; nominator: MultiAddress; bouncer: MultiAddress };
        };
      }>
    >;

    /**
     * See [`Pallet::create_with_pool_id`].
     *
     * @param amount
     * @param root
     * @param nominator
     * @param bouncer
     * @param poolId
     **/
    createWithPoolId: GenericTxCall<
      (
        amount: bigint,
        root: MultiAddressLike,
        nominator: MultiAddressLike,
        bouncer: MultiAddressLike,
        poolId: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'NominationPools';
        palletCall: {
          name: 'CreateWithPoolId';
          params: {
            amount: bigint;
            root: MultiAddress;
            nominator: MultiAddress;
            bouncer: MultiAddress;
            poolId: number;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::nominate`].
     *
     * @param poolId
     * @param validators
     **/
    nominate: GenericTxCall<
      (
        poolId: number,
        validators: Array<AccountId32Like>,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'NominationPools';
        palletCall: {
          name: 'Nominate';
          params: { poolId: number; validators: Array<AccountId32> };
        };
      }>
    >;

    /**
     * See [`Pallet::set_state`].
     *
     * @param poolId
     * @param state
     **/
    setState: GenericTxCall<
      (
        poolId: number,
        state: PalletNominationPoolsPoolState,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'NominationPools';
        palletCall: {
          name: 'SetState';
          params: { poolId: number; state: PalletNominationPoolsPoolState };
        };
      }>
    >;

    /**
     * See [`Pallet::set_metadata`].
     *
     * @param poolId
     * @param metadata
     **/
    setMetadata: GenericTxCall<
      (
        poolId: number,
        metadata: Bytes,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'NominationPools';
        palletCall: {
          name: 'SetMetadata';
          params: { poolId: number; metadata: Bytes };
        };
      }>
    >;

    /**
     * See [`Pallet::set_configs`].
     *
     * @param minJoinBond
     * @param minCreateBond
     * @param maxPools
     * @param maxMembers
     * @param maxMembersPerPool
     * @param globalMaxCommission
     **/
    setConfigs: GenericTxCall<
      (
        minJoinBond: PalletNominationPoolsConfigOp,
        minCreateBond: PalletNominationPoolsConfigOp,
        maxPools: PalletNominationPoolsConfigOpU32,
        maxMembers: PalletNominationPoolsConfigOpU32,
        maxMembersPerPool: PalletNominationPoolsConfigOpU32,
        globalMaxCommission: PalletNominationPoolsConfigOpPerbill,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'NominationPools';
        palletCall: {
          name: 'SetConfigs';
          params: {
            minJoinBond: PalletNominationPoolsConfigOp;
            minCreateBond: PalletNominationPoolsConfigOp;
            maxPools: PalletNominationPoolsConfigOpU32;
            maxMembers: PalletNominationPoolsConfigOpU32;
            maxMembersPerPool: PalletNominationPoolsConfigOpU32;
            globalMaxCommission: PalletNominationPoolsConfigOpPerbill;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::update_roles`].
     *
     * @param poolId
     * @param newRoot
     * @param newNominator
     * @param newBouncer
     **/
    updateRoles: GenericTxCall<
      (
        poolId: number,
        newRoot: PalletNominationPoolsConfigOp004,
        newNominator: PalletNominationPoolsConfigOp004,
        newBouncer: PalletNominationPoolsConfigOp004,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'NominationPools';
        palletCall: {
          name: 'UpdateRoles';
          params: {
            poolId: number;
            newRoot: PalletNominationPoolsConfigOp004;
            newNominator: PalletNominationPoolsConfigOp004;
            newBouncer: PalletNominationPoolsConfigOp004;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::chill`].
     *
     * @param poolId
     **/
    chill: GenericTxCall<
      (poolId: number) => ChainSubmittableExtrinsic<{
        pallet: 'NominationPools';
        palletCall: {
          name: 'Chill';
          params: { poolId: number };
        };
      }>
    >;

    /**
     * See [`Pallet::bond_extra_other`].
     *
     * @param member
     * @param extra
     **/
    bondExtraOther: GenericTxCall<
      (
        member: MultiAddressLike,
        extra: PalletNominationPoolsBondExtra,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'NominationPools';
        palletCall: {
          name: 'BondExtraOther';
          params: { member: MultiAddress; extra: PalletNominationPoolsBondExtra };
        };
      }>
    >;

    /**
     * See [`Pallet::set_claim_permission`].
     *
     * @param permission
     **/
    setClaimPermission: GenericTxCall<
      (permission: PalletNominationPoolsClaimPermission) => ChainSubmittableExtrinsic<{
        pallet: 'NominationPools';
        palletCall: {
          name: 'SetClaimPermission';
          params: { permission: PalletNominationPoolsClaimPermission };
        };
      }>
    >;

    /**
     * See [`Pallet::claim_payout_other`].
     *
     * @param other
     **/
    claimPayoutOther: GenericTxCall<
      (other: AccountId32Like) => ChainSubmittableExtrinsic<{
        pallet: 'NominationPools';
        palletCall: {
          name: 'ClaimPayoutOther';
          params: { other: AccountId32 };
        };
      }>
    >;

    /**
     * See [`Pallet::set_commission`].
     *
     * @param poolId
     * @param newCommission
     **/
    setCommission: GenericTxCall<
      (
        poolId: number,
        newCommission: [Perbill, AccountId32Like] | undefined,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'NominationPools';
        palletCall: {
          name: 'SetCommission';
          params: { poolId: number; newCommission: [Perbill, AccountId32] | undefined };
        };
      }>
    >;

    /**
     * See [`Pallet::set_commission_max`].
     *
     * @param poolId
     * @param maxCommission
     **/
    setCommissionMax: GenericTxCall<
      (
        poolId: number,
        maxCommission: Perbill,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'NominationPools';
        palletCall: {
          name: 'SetCommissionMax';
          params: { poolId: number; maxCommission: Perbill };
        };
      }>
    >;

    /**
     * See [`Pallet::set_commission_change_rate`].
     *
     * @param poolId
     * @param changeRate
     **/
    setCommissionChangeRate: GenericTxCall<
      (
        poolId: number,
        changeRate: PalletNominationPoolsCommissionChangeRate,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'NominationPools';
        palletCall: {
          name: 'SetCommissionChangeRate';
          params: { poolId: number; changeRate: PalletNominationPoolsCommissionChangeRate };
        };
      }>
    >;

    /**
     * See [`Pallet::claim_commission`].
     *
     * @param poolId
     **/
    claimCommission: GenericTxCall<
      (poolId: number) => ChainSubmittableExtrinsic<{
        pallet: 'NominationPools';
        palletCall: {
          name: 'ClaimCommission';
          params: { poolId: number };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  fastUnstake: {
    /**
     * See [`Pallet::register_fast_unstake`].
     *
     **/
    registerFastUnstake: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'FastUnstake';
        palletCall: {
          name: 'RegisterFastUnstake';
        };
      }>
    >;

    /**
     * See [`Pallet::deregister`].
     *
     **/
    deregister: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'FastUnstake';
        palletCall: {
          name: 'Deregister';
        };
      }>
    >;

    /**
     * See [`Pallet::control`].
     *
     * @param erasToCheck
     **/
    control: GenericTxCall<
      (erasToCheck: number) => ChainSubmittableExtrinsic<{
        pallet: 'FastUnstake';
        palletCall: {
          name: 'Control';
          params: { erasToCheck: number };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  configuration: {
    /**
     * See [`Pallet::set_validation_upgrade_cooldown`].
     *
     * @param new_
     **/
    setValidationUpgradeCooldown: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetValidationUpgradeCooldown';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_validation_upgrade_delay`].
     *
     * @param new_
     **/
    setValidationUpgradeDelay: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetValidationUpgradeDelay';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_code_retention_period`].
     *
     * @param new_
     **/
    setCodeRetentionPeriod: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetCodeRetentionPeriod';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_max_code_size`].
     *
     * @param new_
     **/
    setMaxCodeSize: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetMaxCodeSize';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_max_pov_size`].
     *
     * @param new_
     **/
    setMaxPovSize: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetMaxPovSize';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_max_head_data_size`].
     *
     * @param new_
     **/
    setMaxHeadDataSize: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetMaxHeadDataSize';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_on_demand_cores`].
     *
     * @param new_
     **/
    setOnDemandCores: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetOnDemandCores';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_on_demand_retries`].
     *
     * @param new_
     **/
    setOnDemandRetries: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetOnDemandRetries';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_group_rotation_frequency`].
     *
     * @param new_
     **/
    setGroupRotationFrequency: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetGroupRotationFrequency';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_paras_availability_period`].
     *
     * @param new_
     **/
    setParasAvailabilityPeriod: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetParasAvailabilityPeriod';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_scheduling_lookahead`].
     *
     * @param new_
     **/
    setSchedulingLookahead: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetSchedulingLookahead';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_max_validators_per_core`].
     *
     * @param new_
     **/
    setMaxValidatorsPerCore: GenericTxCall<
      (new_: number | undefined) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetMaxValidatorsPerCore';
          params: { new: number | undefined };
        };
      }>
    >;

    /**
     * See [`Pallet::set_max_validators`].
     *
     * @param new_
     **/
    setMaxValidators: GenericTxCall<
      (new_: number | undefined) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetMaxValidators';
          params: { new: number | undefined };
        };
      }>
    >;

    /**
     * See [`Pallet::set_dispute_period`].
     *
     * @param new_
     **/
    setDisputePeriod: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetDisputePeriod';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_dispute_post_conclusion_acceptance_period`].
     *
     * @param new_
     **/
    setDisputePostConclusionAcceptancePeriod: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetDisputePostConclusionAcceptancePeriod';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_no_show_slots`].
     *
     * @param new_
     **/
    setNoShowSlots: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetNoShowSlots';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_n_delay_tranches`].
     *
     * @param new_
     **/
    setNDelayTranches: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetNDelayTranches';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_zeroth_delay_tranche_width`].
     *
     * @param new_
     **/
    setZerothDelayTrancheWidth: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetZerothDelayTrancheWidth';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_needed_approvals`].
     *
     * @param new_
     **/
    setNeededApprovals: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetNeededApprovals';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_relay_vrf_modulo_samples`].
     *
     * @param new_
     **/
    setRelayVrfModuloSamples: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetRelayVrfModuloSamples';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_max_upward_queue_count`].
     *
     * @param new_
     **/
    setMaxUpwardQueueCount: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetMaxUpwardQueueCount';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_max_upward_queue_size`].
     *
     * @param new_
     **/
    setMaxUpwardQueueSize: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetMaxUpwardQueueSize';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_max_downward_message_size`].
     *
     * @param new_
     **/
    setMaxDownwardMessageSize: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetMaxDownwardMessageSize';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_max_upward_message_size`].
     *
     * @param new_
     **/
    setMaxUpwardMessageSize: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetMaxUpwardMessageSize';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_max_upward_message_num_per_candidate`].
     *
     * @param new_
     **/
    setMaxUpwardMessageNumPerCandidate: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetMaxUpwardMessageNumPerCandidate';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_hrmp_open_request_ttl`].
     *
     * @param new_
     **/
    setHrmpOpenRequestTtl: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetHrmpOpenRequestTtl';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_hrmp_sender_deposit`].
     *
     * @param new_
     **/
    setHrmpSenderDeposit: GenericTxCall<
      (new_: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetHrmpSenderDeposit';
          params: { new: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::set_hrmp_recipient_deposit`].
     *
     * @param new_
     **/
    setHrmpRecipientDeposit: GenericTxCall<
      (new_: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetHrmpRecipientDeposit';
          params: { new: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::set_hrmp_channel_max_capacity`].
     *
     * @param new_
     **/
    setHrmpChannelMaxCapacity: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetHrmpChannelMaxCapacity';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_hrmp_channel_max_total_size`].
     *
     * @param new_
     **/
    setHrmpChannelMaxTotalSize: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetHrmpChannelMaxTotalSize';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_hrmp_max_parachain_inbound_channels`].
     *
     * @param new_
     **/
    setHrmpMaxParachainInboundChannels: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetHrmpMaxParachainInboundChannels';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_hrmp_channel_max_message_size`].
     *
     * @param new_
     **/
    setHrmpChannelMaxMessageSize: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetHrmpChannelMaxMessageSize';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_hrmp_max_parachain_outbound_channels`].
     *
     * @param new_
     **/
    setHrmpMaxParachainOutboundChannels: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetHrmpMaxParachainOutboundChannels';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_hrmp_max_message_num_per_candidate`].
     *
     * @param new_
     **/
    setHrmpMaxMessageNumPerCandidate: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetHrmpMaxMessageNumPerCandidate';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_pvf_voting_ttl`].
     *
     * @param new_
     **/
    setPvfVotingTtl: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetPvfVotingTtl';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_minimum_validation_upgrade_delay`].
     *
     * @param new_
     **/
    setMinimumValidationUpgradeDelay: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetMinimumValidationUpgradeDelay';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_bypass_consistency_check`].
     *
     * @param new_
     **/
    setBypassConsistencyCheck: GenericTxCall<
      (new_: boolean) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetBypassConsistencyCheck';
          params: { new: boolean };
        };
      }>
    >;

    /**
     * See [`Pallet::set_async_backing_params`].
     *
     * @param new_
     **/
    setAsyncBackingParams: GenericTxCall<
      (new_: PolkadotPrimitivesVstagingAsyncBackingParams) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetAsyncBackingParams';
          params: { new: PolkadotPrimitivesVstagingAsyncBackingParams };
        };
      }>
    >;

    /**
     * See [`Pallet::set_executor_params`].
     *
     * @param new_
     **/
    setExecutorParams: GenericTxCall<
      (new_: PolkadotPrimitivesV5ExecutorParams) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetExecutorParams';
          params: { new: PolkadotPrimitivesV5ExecutorParams };
        };
      }>
    >;

    /**
     * See [`Pallet::set_on_demand_base_fee`].
     *
     * @param new_
     **/
    setOnDemandBaseFee: GenericTxCall<
      (new_: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetOnDemandBaseFee';
          params: { new: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::set_on_demand_fee_variability`].
     *
     * @param new_
     **/
    setOnDemandFeeVariability: GenericTxCall<
      (new_: Perbill) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetOnDemandFeeVariability';
          params: { new: Perbill };
        };
      }>
    >;

    /**
     * See [`Pallet::set_on_demand_queue_max_size`].
     *
     * @param new_
     **/
    setOnDemandQueueMaxSize: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetOnDemandQueueMaxSize';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_on_demand_target_queue_utilization`].
     *
     * @param new_
     **/
    setOnDemandTargetQueueUtilization: GenericTxCall<
      (new_: Perbill) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetOnDemandTargetQueueUtilization';
          params: { new: Perbill };
        };
      }>
    >;

    /**
     * See [`Pallet::set_on_demand_ttl`].
     *
     * @param new_
     **/
    setOnDemandTtl: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetOnDemandTtl';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_minimum_backing_votes`].
     *
     * @param new_
     **/
    setMinimumBackingVotes: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'Configuration';
        palletCall: {
          name: 'SetMinimumBackingVotes';
          params: { new: number };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  parasShared: {
    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  paraInclusion: {
    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  paraInherent: {
    /**
     * See [`Pallet::enter`].
     *
     * @param data
     **/
    enter: GenericTxCall<
      (data: PolkadotPrimitivesV5InherentData) => ChainSubmittableExtrinsic<{
        pallet: 'ParaInherent';
        palletCall: {
          name: 'Enter';
          params: { data: PolkadotPrimitivesV5InherentData };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  paras: {
    /**
     * See [`Pallet::force_set_current_code`].
     *
     * @param para
     * @param newCode
     **/
    forceSetCurrentCode: GenericTxCall<
      (
        para: PolkadotParachainPrimitivesPrimitivesId,
        newCode: PolkadotParachainPrimitivesPrimitivesValidationCode,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Paras';
        palletCall: {
          name: 'ForceSetCurrentCode';
          params: {
            para: PolkadotParachainPrimitivesPrimitivesId;
            newCode: PolkadotParachainPrimitivesPrimitivesValidationCode;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::force_set_current_head`].
     *
     * @param para
     * @param newHead
     **/
    forceSetCurrentHead: GenericTxCall<
      (
        para: PolkadotParachainPrimitivesPrimitivesId,
        newHead: PolkadotParachainPrimitivesPrimitivesHeadData,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Paras';
        palletCall: {
          name: 'ForceSetCurrentHead';
          params: {
            para: PolkadotParachainPrimitivesPrimitivesId;
            newHead: PolkadotParachainPrimitivesPrimitivesHeadData;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::force_schedule_code_upgrade`].
     *
     * @param para
     * @param newCode
     * @param relayParentNumber
     **/
    forceScheduleCodeUpgrade: GenericTxCall<
      (
        para: PolkadotParachainPrimitivesPrimitivesId,
        newCode: PolkadotParachainPrimitivesPrimitivesValidationCode,
        relayParentNumber: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Paras';
        palletCall: {
          name: 'ForceScheduleCodeUpgrade';
          params: {
            para: PolkadotParachainPrimitivesPrimitivesId;
            newCode: PolkadotParachainPrimitivesPrimitivesValidationCode;
            relayParentNumber: number;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::force_note_new_head`].
     *
     * @param para
     * @param newHead
     **/
    forceNoteNewHead: GenericTxCall<
      (
        para: PolkadotParachainPrimitivesPrimitivesId,
        newHead: PolkadotParachainPrimitivesPrimitivesHeadData,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Paras';
        palletCall: {
          name: 'ForceNoteNewHead';
          params: {
            para: PolkadotParachainPrimitivesPrimitivesId;
            newHead: PolkadotParachainPrimitivesPrimitivesHeadData;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::force_queue_action`].
     *
     * @param para
     **/
    forceQueueAction: GenericTxCall<
      (para: PolkadotParachainPrimitivesPrimitivesId) => ChainSubmittableExtrinsic<{
        pallet: 'Paras';
        palletCall: {
          name: 'ForceQueueAction';
          params: { para: PolkadotParachainPrimitivesPrimitivesId };
        };
      }>
    >;

    /**
     * See [`Pallet::add_trusted_validation_code`].
     *
     * @param validationCode
     **/
    addTrustedValidationCode: GenericTxCall<
      (validationCode: PolkadotParachainPrimitivesPrimitivesValidationCode) => ChainSubmittableExtrinsic<{
        pallet: 'Paras';
        palletCall: {
          name: 'AddTrustedValidationCode';
          params: { validationCode: PolkadotParachainPrimitivesPrimitivesValidationCode };
        };
      }>
    >;

    /**
     * See [`Pallet::poke_unused_validation_code`].
     *
     * @param validationCodeHash
     **/
    pokeUnusedValidationCode: GenericTxCall<
      (validationCodeHash: PolkadotParachainPrimitivesPrimitivesValidationCodeHash) => ChainSubmittableExtrinsic<{
        pallet: 'Paras';
        palletCall: {
          name: 'PokeUnusedValidationCode';
          params: { validationCodeHash: PolkadotParachainPrimitivesPrimitivesValidationCodeHash };
        };
      }>
    >;

    /**
     * See [`Pallet::include_pvf_check_statement`].
     *
     * @param stmt
     * @param signature
     **/
    includePvfCheckStatement: GenericTxCall<
      (
        stmt: PolkadotPrimitivesV5PvfCheckStatement,
        signature: PolkadotPrimitivesV5ValidatorAppSignature,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Paras';
        palletCall: {
          name: 'IncludePvfCheckStatement';
          params: { stmt: PolkadotPrimitivesV5PvfCheckStatement; signature: PolkadotPrimitivesV5ValidatorAppSignature };
        };
      }>
    >;

    /**
     * See [`Pallet::force_set_most_recent_context`].
     *
     * @param para
     * @param context
     **/
    forceSetMostRecentContext: GenericTxCall<
      (
        para: PolkadotParachainPrimitivesPrimitivesId,
        context: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Paras';
        palletCall: {
          name: 'ForceSetMostRecentContext';
          params: { para: PolkadotParachainPrimitivesPrimitivesId; context: number };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  initializer: {
    /**
     * See [`Pallet::force_approve`].
     *
     * @param upTo
     **/
    forceApprove: GenericTxCall<
      (upTo: number) => ChainSubmittableExtrinsic<{
        pallet: 'Initializer';
        palletCall: {
          name: 'ForceApprove';
          params: { upTo: number };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  hrmp: {
    /**
     * See [`Pallet::hrmp_init_open_channel`].
     *
     * @param recipient
     * @param proposedMaxCapacity
     * @param proposedMaxMessageSize
     **/
    hrmpInitOpenChannel: GenericTxCall<
      (
        recipient: PolkadotParachainPrimitivesPrimitivesId,
        proposedMaxCapacity: number,
        proposedMaxMessageSize: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Hrmp';
        palletCall: {
          name: 'HrmpInitOpenChannel';
          params: {
            recipient: PolkadotParachainPrimitivesPrimitivesId;
            proposedMaxCapacity: number;
            proposedMaxMessageSize: number;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::hrmp_accept_open_channel`].
     *
     * @param sender
     **/
    hrmpAcceptOpenChannel: GenericTxCall<
      (sender: PolkadotParachainPrimitivesPrimitivesId) => ChainSubmittableExtrinsic<{
        pallet: 'Hrmp';
        palletCall: {
          name: 'HrmpAcceptOpenChannel';
          params: { sender: PolkadotParachainPrimitivesPrimitivesId };
        };
      }>
    >;

    /**
     * See [`Pallet::hrmp_close_channel`].
     *
     * @param channelId
     **/
    hrmpCloseChannel: GenericTxCall<
      (channelId: PolkadotParachainPrimitivesPrimitivesHrmpChannelId) => ChainSubmittableExtrinsic<{
        pallet: 'Hrmp';
        palletCall: {
          name: 'HrmpCloseChannel';
          params: { channelId: PolkadotParachainPrimitivesPrimitivesHrmpChannelId };
        };
      }>
    >;

    /**
     * See [`Pallet::force_clean_hrmp`].
     *
     * @param para
     * @param inbound
     * @param outbound
     **/
    forceCleanHrmp: GenericTxCall<
      (
        para: PolkadotParachainPrimitivesPrimitivesId,
        inbound: number,
        outbound: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Hrmp';
        palletCall: {
          name: 'ForceCleanHrmp';
          params: { para: PolkadotParachainPrimitivesPrimitivesId; inbound: number; outbound: number };
        };
      }>
    >;

    /**
     * See [`Pallet::force_process_hrmp_open`].
     *
     * @param channels
     **/
    forceProcessHrmpOpen: GenericTxCall<
      (channels: number) => ChainSubmittableExtrinsic<{
        pallet: 'Hrmp';
        palletCall: {
          name: 'ForceProcessHrmpOpen';
          params: { channels: number };
        };
      }>
    >;

    /**
     * See [`Pallet::force_process_hrmp_close`].
     *
     * @param channels
     **/
    forceProcessHrmpClose: GenericTxCall<
      (channels: number) => ChainSubmittableExtrinsic<{
        pallet: 'Hrmp';
        palletCall: {
          name: 'ForceProcessHrmpClose';
          params: { channels: number };
        };
      }>
    >;

    /**
     * See [`Pallet::hrmp_cancel_open_request`].
     *
     * @param channelId
     * @param openRequests
     **/
    hrmpCancelOpenRequest: GenericTxCall<
      (
        channelId: PolkadotParachainPrimitivesPrimitivesHrmpChannelId,
        openRequests: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Hrmp';
        palletCall: {
          name: 'HrmpCancelOpenRequest';
          params: { channelId: PolkadotParachainPrimitivesPrimitivesHrmpChannelId; openRequests: number };
        };
      }>
    >;

    /**
     * See [`Pallet::force_open_hrmp_channel`].
     *
     * @param sender
     * @param recipient
     * @param maxCapacity
     * @param maxMessageSize
     **/
    forceOpenHrmpChannel: GenericTxCall<
      (
        sender: PolkadotParachainPrimitivesPrimitivesId,
        recipient: PolkadotParachainPrimitivesPrimitivesId,
        maxCapacity: number,
        maxMessageSize: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Hrmp';
        palletCall: {
          name: 'ForceOpenHrmpChannel';
          params: {
            sender: PolkadotParachainPrimitivesPrimitivesId;
            recipient: PolkadotParachainPrimitivesPrimitivesId;
            maxCapacity: number;
            maxMessageSize: number;
          };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  parasDisputes: {
    /**
     * See [`Pallet::force_unfreeze`].
     *
     **/
    forceUnfreeze: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'ParasDisputes';
        palletCall: 'ForceUnfreeze';
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  parasSlashing: {
    /**
     * See [`Pallet::report_dispute_lost_unsigned`].
     *
     * @param disputeProof
     * @param keyOwnerProof
     **/
    reportDisputeLostUnsigned: GenericTxCall<
      (
        disputeProof: PolkadotPrimitivesV5SlashingDisputeProof,
        keyOwnerProof: SpSessionMembershipProof,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ParasSlashing';
        palletCall: {
          name: 'ReportDisputeLostUnsigned';
          params: { disputeProof: PolkadotPrimitivesV5SlashingDisputeProof; keyOwnerProof: SpSessionMembershipProof };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  registrar: {
    /**
     * See [`Pallet::register`].
     *
     * @param id
     * @param genesisHead
     * @param validationCode
     **/
    register: GenericTxCall<
      (
        id: PolkadotParachainPrimitivesPrimitivesId,
        genesisHead: PolkadotParachainPrimitivesPrimitivesHeadData,
        validationCode: PolkadotParachainPrimitivesPrimitivesValidationCode,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Registrar';
        palletCall: {
          name: 'Register';
          params: {
            id: PolkadotParachainPrimitivesPrimitivesId;
            genesisHead: PolkadotParachainPrimitivesPrimitivesHeadData;
            validationCode: PolkadotParachainPrimitivesPrimitivesValidationCode;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::force_register`].
     *
     * @param who
     * @param deposit
     * @param id
     * @param genesisHead
     * @param validationCode
     **/
    forceRegister: GenericTxCall<
      (
        who: AccountId32Like,
        deposit: bigint,
        id: PolkadotParachainPrimitivesPrimitivesId,
        genesisHead: PolkadotParachainPrimitivesPrimitivesHeadData,
        validationCode: PolkadotParachainPrimitivesPrimitivesValidationCode,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Registrar';
        palletCall: {
          name: 'ForceRegister';
          params: {
            who: AccountId32;
            deposit: bigint;
            id: PolkadotParachainPrimitivesPrimitivesId;
            genesisHead: PolkadotParachainPrimitivesPrimitivesHeadData;
            validationCode: PolkadotParachainPrimitivesPrimitivesValidationCode;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::deregister`].
     *
     * @param id
     **/
    deregister: GenericTxCall<
      (id: PolkadotParachainPrimitivesPrimitivesId) => ChainSubmittableExtrinsic<{
        pallet: 'Registrar';
        palletCall: {
          name: 'Deregister';
          params: { id: PolkadotParachainPrimitivesPrimitivesId };
        };
      }>
    >;

    /**
     * See [`Pallet::swap`].
     *
     * @param id
     * @param other
     **/
    swap: GenericTxCall<
      (
        id: PolkadotParachainPrimitivesPrimitivesId,
        other: PolkadotParachainPrimitivesPrimitivesId,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Registrar';
        palletCall: {
          name: 'Swap';
          params: { id: PolkadotParachainPrimitivesPrimitivesId; other: PolkadotParachainPrimitivesPrimitivesId };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_lock`].
     *
     * @param para
     **/
    removeLock: GenericTxCall<
      (para: PolkadotParachainPrimitivesPrimitivesId) => ChainSubmittableExtrinsic<{
        pallet: 'Registrar';
        palletCall: {
          name: 'RemoveLock';
          params: { para: PolkadotParachainPrimitivesPrimitivesId };
        };
      }>
    >;

    /**
     * See [`Pallet::reserve`].
     *
     **/
    reserve: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'Registrar';
        palletCall: {
          name: 'Reserve';
        };
      }>
    >;

    /**
     * See [`Pallet::add_lock`].
     *
     * @param para
     **/
    addLock: GenericTxCall<
      (para: PolkadotParachainPrimitivesPrimitivesId) => ChainSubmittableExtrinsic<{
        pallet: 'Registrar';
        palletCall: {
          name: 'AddLock';
          params: { para: PolkadotParachainPrimitivesPrimitivesId };
        };
      }>
    >;

    /**
     * See [`Pallet::schedule_code_upgrade`].
     *
     * @param para
     * @param newCode
     **/
    scheduleCodeUpgrade: GenericTxCall<
      (
        para: PolkadotParachainPrimitivesPrimitivesId,
        newCode: PolkadotParachainPrimitivesPrimitivesValidationCode,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Registrar';
        palletCall: {
          name: 'ScheduleCodeUpgrade';
          params: {
            para: PolkadotParachainPrimitivesPrimitivesId;
            newCode: PolkadotParachainPrimitivesPrimitivesValidationCode;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::set_current_head`].
     *
     * @param para
     * @param newHead
     **/
    setCurrentHead: GenericTxCall<
      (
        para: PolkadotParachainPrimitivesPrimitivesId,
        newHead: PolkadotParachainPrimitivesPrimitivesHeadData,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Registrar';
        palletCall: {
          name: 'SetCurrentHead';
          params: {
            para: PolkadotParachainPrimitivesPrimitivesId;
            newHead: PolkadotParachainPrimitivesPrimitivesHeadData;
          };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  slots: {
    /**
     * See [`Pallet::force_lease`].
     *
     * @param para
     * @param leaser
     * @param amount
     * @param periodBegin
     * @param periodCount
     **/
    forceLease: GenericTxCall<
      (
        para: PolkadotParachainPrimitivesPrimitivesId,
        leaser: AccountId32Like,
        amount: bigint,
        periodBegin: number,
        periodCount: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Slots';
        palletCall: {
          name: 'ForceLease';
          params: {
            para: PolkadotParachainPrimitivesPrimitivesId;
            leaser: AccountId32;
            amount: bigint;
            periodBegin: number;
            periodCount: number;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::clear_all_leases`].
     *
     * @param para
     **/
    clearAllLeases: GenericTxCall<
      (para: PolkadotParachainPrimitivesPrimitivesId) => ChainSubmittableExtrinsic<{
        pallet: 'Slots';
        palletCall: {
          name: 'ClearAllLeases';
          params: { para: PolkadotParachainPrimitivesPrimitivesId };
        };
      }>
    >;

    /**
     * See [`Pallet::trigger_onboard`].
     *
     * @param para
     **/
    triggerOnboard: GenericTxCall<
      (para: PolkadotParachainPrimitivesPrimitivesId) => ChainSubmittableExtrinsic<{
        pallet: 'Slots';
        palletCall: {
          name: 'TriggerOnboard';
          params: { para: PolkadotParachainPrimitivesPrimitivesId };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  auctions: {
    /**
     * See [`Pallet::new_auction`].
     *
     * @param duration
     * @param leasePeriodIndex
     **/
    newAuction: GenericTxCall<
      (
        duration: number,
        leasePeriodIndex: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Auctions';
        palletCall: {
          name: 'NewAuction';
          params: { duration: number; leasePeriodIndex: number };
        };
      }>
    >;

    /**
     * See [`Pallet::bid`].
     *
     * @param para
     * @param auctionIndex
     * @param firstSlot
     * @param lastSlot
     * @param amount
     **/
    bid: GenericTxCall<
      (
        para: PolkadotParachainPrimitivesPrimitivesId,
        auctionIndex: number,
        firstSlot: number,
        lastSlot: number,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Auctions';
        palletCall: {
          name: 'Bid';
          params: {
            para: PolkadotParachainPrimitivesPrimitivesId;
            auctionIndex: number;
            firstSlot: number;
            lastSlot: number;
            amount: bigint;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::cancel_auction`].
     *
     **/
    cancelAuction: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'Auctions';
        palletCall: {
          name: 'CancelAuction';
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  crowdloan: {
    /**
     * See [`Pallet::create`].
     *
     * @param index
     * @param cap
     * @param firstPeriod
     * @param lastPeriod
     * @param end
     * @param verifier
     **/
    create: GenericTxCall<
      (
        index: PolkadotParachainPrimitivesPrimitivesId,
        cap: bigint,
        firstPeriod: number,
        lastPeriod: number,
        end: number,
        verifier: SpRuntimeMultiSigner | undefined,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Crowdloan';
        palletCall: {
          name: 'Create';
          params: {
            index: PolkadotParachainPrimitivesPrimitivesId;
            cap: bigint;
            firstPeriod: number;
            lastPeriod: number;
            end: number;
            verifier: SpRuntimeMultiSigner | undefined;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::contribute`].
     *
     * @param index
     * @param value
     * @param signature
     **/
    contribute: GenericTxCall<
      (
        index: PolkadotParachainPrimitivesPrimitivesId,
        value: bigint,
        signature: SpRuntimeMultiSignature | undefined,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Crowdloan';
        palletCall: {
          name: 'Contribute';
          params: {
            index: PolkadotParachainPrimitivesPrimitivesId;
            value: bigint;
            signature: SpRuntimeMultiSignature | undefined;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::withdraw`].
     *
     * @param who
     * @param index
     **/
    withdraw: GenericTxCall<
      (
        who: AccountId32Like,
        index: PolkadotParachainPrimitivesPrimitivesId,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Crowdloan';
        palletCall: {
          name: 'Withdraw';
          params: { who: AccountId32; index: PolkadotParachainPrimitivesPrimitivesId };
        };
      }>
    >;

    /**
     * See [`Pallet::refund`].
     *
     * @param index
     **/
    refund: GenericTxCall<
      (index: PolkadotParachainPrimitivesPrimitivesId) => ChainSubmittableExtrinsic<{
        pallet: 'Crowdloan';
        palletCall: {
          name: 'Refund';
          params: { index: PolkadotParachainPrimitivesPrimitivesId };
        };
      }>
    >;

    /**
     * See [`Pallet::dissolve`].
     *
     * @param index
     **/
    dissolve: GenericTxCall<
      (index: PolkadotParachainPrimitivesPrimitivesId) => ChainSubmittableExtrinsic<{
        pallet: 'Crowdloan';
        palletCall: {
          name: 'Dissolve';
          params: { index: PolkadotParachainPrimitivesPrimitivesId };
        };
      }>
    >;

    /**
     * See [`Pallet::edit`].
     *
     * @param index
     * @param cap
     * @param firstPeriod
     * @param lastPeriod
     * @param end
     * @param verifier
     **/
    edit: GenericTxCall<
      (
        index: PolkadotParachainPrimitivesPrimitivesId,
        cap: bigint,
        firstPeriod: number,
        lastPeriod: number,
        end: number,
        verifier: SpRuntimeMultiSigner | undefined,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Crowdloan';
        palletCall: {
          name: 'Edit';
          params: {
            index: PolkadotParachainPrimitivesPrimitivesId;
            cap: bigint;
            firstPeriod: number;
            lastPeriod: number;
            end: number;
            verifier: SpRuntimeMultiSigner | undefined;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::add_memo`].
     *
     * @param index
     * @param memo
     **/
    addMemo: GenericTxCall<
      (
        index: PolkadotParachainPrimitivesPrimitivesId,
        memo: Bytes,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Crowdloan';
        palletCall: {
          name: 'AddMemo';
          params: { index: PolkadotParachainPrimitivesPrimitivesId; memo: Bytes };
        };
      }>
    >;

    /**
     * See [`Pallet::poke`].
     *
     * @param index
     **/
    poke: GenericTxCall<
      (index: PolkadotParachainPrimitivesPrimitivesId) => ChainSubmittableExtrinsic<{
        pallet: 'Crowdloan';
        palletCall: {
          name: 'Poke';
          params: { index: PolkadotParachainPrimitivesPrimitivesId };
        };
      }>
    >;

    /**
     * See [`Pallet::contribute_all`].
     *
     * @param index
     * @param signature
     **/
    contributeAll: GenericTxCall<
      (
        index: PolkadotParachainPrimitivesPrimitivesId,
        signature: SpRuntimeMultiSignature | undefined,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Crowdloan';
        palletCall: {
          name: 'ContributeAll';
          params: { index: PolkadotParachainPrimitivesPrimitivesId; signature: SpRuntimeMultiSignature | undefined };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  xcmPallet: {
    /**
     * See [`Pallet::send`].
     *
     * @param dest
     * @param message
     **/
    send: GenericTxCall<
      (
        dest: XcmVersionedMultiLocation,
        message: XcmVersionedXcm,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'XcmPallet';
        palletCall: {
          name: 'Send';
          params: { dest: XcmVersionedMultiLocation; message: XcmVersionedXcm };
        };
      }>
    >;

    /**
     * See [`Pallet::teleport_assets`].
     *
     * @param dest
     * @param beneficiary
     * @param assets
     * @param feeAssetItem
     **/
    teleportAssets: GenericTxCall<
      (
        dest: XcmVersionedMultiLocation,
        beneficiary: XcmVersionedMultiLocation,
        assets: XcmVersionedMultiAssets,
        feeAssetItem: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'XcmPallet';
        palletCall: {
          name: 'TeleportAssets';
          params: {
            dest: XcmVersionedMultiLocation;
            beneficiary: XcmVersionedMultiLocation;
            assets: XcmVersionedMultiAssets;
            feeAssetItem: number;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::reserve_transfer_assets`].
     *
     * @param dest
     * @param beneficiary
     * @param assets
     * @param feeAssetItem
     **/
    reserveTransferAssets: GenericTxCall<
      (
        dest: XcmVersionedMultiLocation,
        beneficiary: XcmVersionedMultiLocation,
        assets: XcmVersionedMultiAssets,
        feeAssetItem: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'XcmPallet';
        palletCall: {
          name: 'ReserveTransferAssets';
          params: {
            dest: XcmVersionedMultiLocation;
            beneficiary: XcmVersionedMultiLocation;
            assets: XcmVersionedMultiAssets;
            feeAssetItem: number;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::execute`].
     *
     * @param message
     * @param maxWeight
     **/
    execute: GenericTxCall<
      (
        message: XcmVersionedXcm,
        maxWeight: SpWeightsWeightV2Weight,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'XcmPallet';
        palletCall: {
          name: 'Execute';
          params: { message: XcmVersionedXcm; maxWeight: SpWeightsWeightV2Weight };
        };
      }>
    >;

    /**
     * See [`Pallet::force_xcm_version`].
     *
     * @param location
     * @param version
     **/
    forceXcmVersion: GenericTxCall<
      (
        location: StagingXcmV3MultilocationMultiLocation,
        version: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'XcmPallet';
        palletCall: {
          name: 'ForceXcmVersion';
          params: { location: StagingXcmV3MultilocationMultiLocation; version: number };
        };
      }>
    >;

    /**
     * See [`Pallet::force_default_xcm_version`].
     *
     * @param maybeXcmVersion
     **/
    forceDefaultXcmVersion: GenericTxCall<
      (maybeXcmVersion: number | undefined) => ChainSubmittableExtrinsic<{
        pallet: 'XcmPallet';
        palletCall: {
          name: 'ForceDefaultXcmVersion';
          params: { maybeXcmVersion: number | undefined };
        };
      }>
    >;

    /**
     * See [`Pallet::force_subscribe_version_notify`].
     *
     * @param location
     **/
    forceSubscribeVersionNotify: GenericTxCall<
      (location: XcmVersionedMultiLocation) => ChainSubmittableExtrinsic<{
        pallet: 'XcmPallet';
        palletCall: {
          name: 'ForceSubscribeVersionNotify';
          params: { location: XcmVersionedMultiLocation };
        };
      }>
    >;

    /**
     * See [`Pallet::force_unsubscribe_version_notify`].
     *
     * @param location
     **/
    forceUnsubscribeVersionNotify: GenericTxCall<
      (location: XcmVersionedMultiLocation) => ChainSubmittableExtrinsic<{
        pallet: 'XcmPallet';
        palletCall: {
          name: 'ForceUnsubscribeVersionNotify';
          params: { location: XcmVersionedMultiLocation };
        };
      }>
    >;

    /**
     * See [`Pallet::limited_reserve_transfer_assets`].
     *
     * @param dest
     * @param beneficiary
     * @param assets
     * @param feeAssetItem
     * @param weightLimit
     **/
    limitedReserveTransferAssets: GenericTxCall<
      (
        dest: XcmVersionedMultiLocation,
        beneficiary: XcmVersionedMultiLocation,
        assets: XcmVersionedMultiAssets,
        feeAssetItem: number,
        weightLimit: XcmV3WeightLimit,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'XcmPallet';
        palletCall: {
          name: 'LimitedReserveTransferAssets';
          params: {
            dest: XcmVersionedMultiLocation;
            beneficiary: XcmVersionedMultiLocation;
            assets: XcmVersionedMultiAssets;
            feeAssetItem: number;
            weightLimit: XcmV3WeightLimit;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::limited_teleport_assets`].
     *
     * @param dest
     * @param beneficiary
     * @param assets
     * @param feeAssetItem
     * @param weightLimit
     **/
    limitedTeleportAssets: GenericTxCall<
      (
        dest: XcmVersionedMultiLocation,
        beneficiary: XcmVersionedMultiLocation,
        assets: XcmVersionedMultiAssets,
        feeAssetItem: number,
        weightLimit: XcmV3WeightLimit,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'XcmPallet';
        palletCall: {
          name: 'LimitedTeleportAssets';
          params: {
            dest: XcmVersionedMultiLocation;
            beneficiary: XcmVersionedMultiLocation;
            assets: XcmVersionedMultiAssets;
            feeAssetItem: number;
            weightLimit: XcmV3WeightLimit;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::force_suspension`].
     *
     * @param suspended
     **/
    forceSuspension: GenericTxCall<
      (suspended: boolean) => ChainSubmittableExtrinsic<{
        pallet: 'XcmPallet';
        palletCall: {
          name: 'ForceSuspension';
          params: { suspended: boolean };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  messageQueue: {
    /**
     * See [`Pallet::reap_page`].
     *
     * @param messageOrigin
     * @param pageIndex
     **/
    reapPage: GenericTxCall<
      (
        messageOrigin: PolkadotRuntimeParachainsInclusionAggregateMessageOrigin,
        pageIndex: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'MessageQueue';
        palletCall: {
          name: 'ReapPage';
          params: { messageOrigin: PolkadotRuntimeParachainsInclusionAggregateMessageOrigin; pageIndex: number };
        };
      }>
    >;

    /**
     * See [`Pallet::execute_overweight`].
     *
     * @param messageOrigin
     * @param page
     * @param index
     * @param weightLimit
     **/
    executeOverweight: GenericTxCall<
      (
        messageOrigin: PolkadotRuntimeParachainsInclusionAggregateMessageOrigin,
        page: number,
        index: number,
        weightLimit: SpWeightsWeightV2Weight,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'MessageQueue';
        palletCall: {
          name: 'ExecuteOverweight';
          params: {
            messageOrigin: PolkadotRuntimeParachainsInclusionAggregateMessageOrigin;
            page: number;
            index: number;
            weightLimit: SpWeightsWeightV2Weight;
          };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
}
