// Generated by @delightfuldot/codegen

import type { GenericRuntimeApis, GenericRuntimeApiMethod } from '@delightfuldot/types';
import type {
  RuntimeVersion,
  Header,
  DispatchError,
  Result,
  UncheckedExtrinsicLike,
  UncheckedExtrinsic,
  AccountId32Like,
  H256,
  Bytes,
  BytesLike,
} from '@delightfuldot/codecs';
import type {
  SpRuntimeBlock,
  SpCoreOpaqueMetadata,
  SpRuntimeTransactionValidityTransactionValidityError,
  SpInherentsInherentData,
  SpInherentsCheckInherentsResult,
  SpRuntimeTransactionValidityValidTransaction,
  SpRuntimeTransactionValidityTransactionSource,
  PolkadotPrimitivesV6ValidatorAppPublic,
  PolkadotPrimitivesV6ValidatorIndex,
  PolkadotPrimitivesV6GroupRotationInfo,
  PolkadotPrimitivesV6CoreState,
  PolkadotPrimitivesV6PersistedValidationData,
  PolkadotParachainPrimitivesPrimitivesId,
  PolkadotPrimitivesV6OccupiedCoreAssumption,
  PolkadotParachainPrimitivesPrimitivesValidationCodeHash,
  PolkadotPrimitivesV6CandidateCommitments,
  PolkadotParachainPrimitivesPrimitivesValidationCode,
  PolkadotPrimitivesV6CommittedCandidateReceipt,
  PolkadotPrimitivesV6CandidateEvent,
  PolkadotCorePrimitivesInboundDownwardMessage,
  PolkadotCorePrimitivesInboundHrmpMessage,
  PolkadotPrimitivesV6ScrapedOnChainVotes,
  PolkadotPrimitivesV6SessionInfo,
  PolkadotPrimitivesV6PvfCheckStatement,
  PolkadotPrimitivesV6ValidatorAppSignature,
  PolkadotCorePrimitivesCandidateHash,
  PolkadotPrimitivesV6DisputeState,
  PolkadotPrimitivesV6ExecutorParams,
  PolkadotPrimitivesV6SlashingPendingSlashes,
  PolkadotPrimitivesV6SlashingOpaqueKeyOwnershipProof,
  PolkadotPrimitivesV6SlashingDisputeProof,
  PolkadotPrimitivesV6AsyncBackingBackingState,
  PolkadotPrimitivesV6AsyncBackingAsyncBackingParams,
  SpConsensusBeefyValidatorSet,
  SpConsensusBeefyEquivocationProof,
  SpConsensusBeefyOpaqueKeyOwnershipProof,
  SpConsensusBeefyEcdsaCryptoPublic,
  SpMmrPrimitivesError,
  SpMmrPrimitivesEncodableOpaqueLeaf,
  SpMmrPrimitivesProof,
  SpConsensusBeefyMmrBeefyAuthoritySet,
  SpConsensusGrandpaAppPublic,
  SpConsensusGrandpaEquivocationProof,
  SpConsensusGrandpaOpaqueKeyOwnershipProof,
  SpConsensusBabeBabeConfiguration,
  SpConsensusSlotsSlot,
  SpConsensusBabeEpoch,
  SpConsensusBabeOpaqueKeyOwnershipProof,
  SpConsensusBabeAppPublic,
  SpConsensusSlotsEquivocationProof,
  SpAuthorityDiscoveryAppPublic,
  SpCoreCryptoKeyTypeId,
  PalletTransactionPaymentRuntimeDispatchInfo,
  PalletTransactionPaymentFeeDetails,
  SpWeightsWeightV2Weight,
  PolkadotRuntimeRuntimeCallLike,
} from './types';

export interface RuntimeApis extends GenericRuntimeApis {
  /**
   * @runtimeapi: Core - 0xdf6acb689907609b
   **/
  core: {
    /**
     * Returns the version of the runtime.
     *
     * @callname: Core_version
     **/
    version: GenericRuntimeApiMethod<() => Promise<RuntimeVersion>>;

    /**
     * Execute the given block.
     *
     * @callname: Core_execute_block
     * @param {SpRuntimeBlock} block
     **/
    executeBlock: GenericRuntimeApiMethod<(block: SpRuntimeBlock) => Promise<[]>>;

    /**
     * Initialize a block with the given header.
     *
     * @callname: Core_initialize_block
     * @param {Header} header
     **/
    initializeBlock: GenericRuntimeApiMethod<(header: Header) => Promise<[]>>;

    /**
     * Generic runtime api call
     **/
    [method: string]: GenericRuntimeApiMethod;
  };
  /**
   * @runtimeapi: Metadata - 0x37e397fc7c91f5e4
   **/
  metadata: {
    /**
     * Returns the metadata of a runtime.
     *
     * @callname: Metadata_metadata
     **/
    metadata: GenericRuntimeApiMethod<() => Promise<SpCoreOpaqueMetadata>>;

    /**
     * Returns the metadata at a given version.
     *
     * If the given `version` isn't supported, this will return `None`.
     * Use [`Self::metadata_versions`] to find out about supported metadata version of the runtime.
     *
     * @callname: Metadata_metadata_at_version
     * @param {number} version
     **/
    metadataAtVersion: GenericRuntimeApiMethod<(version: number) => Promise<SpCoreOpaqueMetadata | undefined>>;

    /**
     * Returns the supported metadata versions.
     *
     * This can be used to call `metadata_at_version`.
     *
     * @callname: Metadata_metadata_versions
     **/
    metadataVersions: GenericRuntimeApiMethod<() => Promise<Array<number>>>;

    /**
     * Generic runtime api call
     **/
    [method: string]: GenericRuntimeApiMethod;
  };
  /**
   * @runtimeapi: BlockBuilder - 0x40fe3ad401f8959a
   **/
  blockBuilder: {
    /**
     * Apply the given extrinsic.
     *
     * Returns an inclusion outcome which specifies if this extrinsic is included in
     * this block or not.
     *
     * @callname: BlockBuilder_apply_extrinsic
     * @param {UncheckedExtrinsicLike} extrinsic
     **/
    applyExtrinsic: GenericRuntimeApiMethod<
      (
        extrinsic: UncheckedExtrinsicLike,
      ) => Promise<Result<Result<[], DispatchError>, SpRuntimeTransactionValidityTransactionValidityError>>
    >;

    /**
     * Finish the current block.
     *
     * @callname: BlockBuilder_finalize_block
     **/
    finalizeBlock: GenericRuntimeApiMethod<() => Promise<Header>>;

    /**
     * Generate inherent extrinsics. The inherent data will vary from chain to chain.
     *
     * @callname: BlockBuilder_inherent_extrinsics
     * @param {SpInherentsInherentData} inherent
     **/
    inherentExtrinsics: GenericRuntimeApiMethod<
      (inherent: SpInherentsInherentData) => Promise<Array<UncheckedExtrinsic>>
    >;

    /**
     * Check that the inherents are valid. The inherent data will vary from chain to chain.
     *
     * @callname: BlockBuilder_check_inherents
     * @param {SpRuntimeBlock} block
     * @param {SpInherentsInherentData} data
     **/
    checkInherents: GenericRuntimeApiMethod<
      (block: SpRuntimeBlock, data: SpInherentsInherentData) => Promise<SpInherentsCheckInherentsResult>
    >;

    /**
     * Generic runtime api call
     **/
    [method: string]: GenericRuntimeApiMethod;
  };
  /**
   * @runtimeapi: NominationPoolsApi - 0x17a6bc0d0062aeb3
   **/
  nominationPoolsApi: {
    /**
     * Returns the pending rewards for the member that the AccountId was given for.
     *
     * @callname: NominationPoolsApi_pending_rewards
     * @param {AccountId32Like} who
     **/
    pendingRewards: GenericRuntimeApiMethod<(who: AccountId32Like) => Promise<bigint>>;

    /**
     * Returns the equivalent balance of `points` for a given pool.
     *
     * @callname: NominationPoolsApi_points_to_balance
     * @param {number} pool_id
     * @param {bigint} points
     **/
    pointsToBalance: GenericRuntimeApiMethod<(poolId: number, points: bigint) => Promise<bigint>>;

    /**
     * Returns the equivalent points of `new_funds` for a given pool.
     *
     * @callname: NominationPoolsApi_balance_to_points
     * @param {number} pool_id
     * @param {bigint} new_funds
     **/
    balanceToPoints: GenericRuntimeApiMethod<(poolId: number, newFunds: bigint) => Promise<bigint>>;

    /**
     * Generic runtime api call
     **/
    [method: string]: GenericRuntimeApiMethod;
  };
  /**
   * @runtimeapi: StakingApi - 0x18ef58a3b67ba770
   **/
  stakingApi: {
    /**
     * Returns the nominations quota for a nominator with a given balance.
     *
     * @callname: StakingApi_nominations_quota
     * @param {bigint} balance
     **/
    nominationsQuota: GenericRuntimeApiMethod<(balance: bigint) => Promise<number>>;

    /**
     * Generic runtime api call
     **/
    [method: string]: GenericRuntimeApiMethod;
  };
  /**
   * @runtimeapi: TaggedTransactionQueue - 0xd2bc9897eed08f15
   **/
  taggedTransactionQueue: {
    /**
     * Validate the transaction.
     *
     * This method is invoked by the transaction pool to learn details about given transaction.
     * The implementation should make sure to verify the correctness of the transaction
     * against current state. The given `block_hash` corresponds to the hash of the block
     * that is used as current state.
     *
     * Note that this call may be performed by the pool multiple times and transactions
     * might be verified in any possible order.
     *
     * @callname: TaggedTransactionQueue_validate_transaction
     * @param {SpRuntimeTransactionValidityTransactionSource} source
     * @param {UncheckedExtrinsicLike} tx
     * @param {H256} block_hash
     **/
    validateTransaction: GenericRuntimeApiMethod<
      (
        source: SpRuntimeTransactionValidityTransactionSource,
        tx: UncheckedExtrinsicLike,
        blockHash: H256,
      ) => Promise<
        Result<SpRuntimeTransactionValidityValidTransaction, SpRuntimeTransactionValidityTransactionValidityError>
      >
    >;

    /**
     * Generic runtime api call
     **/
    [method: string]: GenericRuntimeApiMethod;
  };
  /**
   * @runtimeapi: OffchainWorkerApi - 0xf78b278be53f454c
   **/
  offchainWorkerApi: {
    /**
     * Starts the off-chain task for given block header.
     *
     * @callname: OffchainWorkerApi_offchain_worker
     * @param {Header} header
     **/
    offchainWorker: GenericRuntimeApiMethod<(header: Header) => Promise<[]>>;

    /**
     * Generic runtime api call
     **/
    [method: string]: GenericRuntimeApiMethod;
  };
  /**
   * @runtimeapi: ParachainHost - 0xaf2c0297a23e6d3d
   **/
  parachainHost: {
    /**
     * Get the current validators.
     *
     * @callname: ParachainHost_validators
     **/
    validators: GenericRuntimeApiMethod<() => Promise<Array<PolkadotPrimitivesV6ValidatorAppPublic>>>;

    /**
     * Returns the validator groups and rotation info localized based on the hypothetical child
     * of a block whose state this is invoked on. Note that `now` in the `GroupRotationInfo`
     * should be the successor of the number of the block.
     *
     * @callname: ParachainHost_validator_groups
     **/
    validatorGroups: GenericRuntimeApiMethod<
      () => Promise<[Array<Array<PolkadotPrimitivesV6ValidatorIndex>>, PolkadotPrimitivesV6GroupRotationInfo]>
    >;

    /**
     * Yields information on all availability cores as relevant to the child block.
     * Cores are either free or occupied. Free cores can have paras assigned to them.
     *
     * @callname: ParachainHost_availability_cores
     **/
    availabilityCores: GenericRuntimeApiMethod<() => Promise<Array<PolkadotPrimitivesV6CoreState>>>;

    /**
     * Yields the persisted validation data for the given `ParaId` along with an assumption that
     * should be used if the para currently occupies a core.
     *
     * Returns `None` if either the para is not registered or the assumption is `Freed`
     * and the para already occupies a core.
     *
     * @callname: ParachainHost_persisted_validation_data
     * @param {PolkadotParachainPrimitivesPrimitivesId} para_id
     * @param {PolkadotPrimitivesV6OccupiedCoreAssumption} assumption
     **/
    persistedValidationData: GenericRuntimeApiMethod<
      (
        paraId: PolkadotParachainPrimitivesPrimitivesId,
        assumption: PolkadotPrimitivesV6OccupiedCoreAssumption,
      ) => Promise<PolkadotPrimitivesV6PersistedValidationData | undefined>
    >;

    /**
     * Returns the persisted validation data for the given `ParaId` along with the corresponding
     * validation code hash. Instead of accepting assumption about the para, matches the validation
     * data hash against an expected one and yields `None` if they're not equal.
     *
     * @callname: ParachainHost_assumed_validation_data
     * @param {PolkadotParachainPrimitivesPrimitivesId} para_id
     * @param {H256} expected_persisted_validation_data_hash
     **/
    assumedValidationData: GenericRuntimeApiMethod<
      (
        paraId: PolkadotParachainPrimitivesPrimitivesId,
        expectedPersistedValidationDataHash: H256,
      ) => Promise<
        | [PolkadotPrimitivesV6PersistedValidationData, PolkadotParachainPrimitivesPrimitivesValidationCodeHash]
        | undefined
      >
    >;

    /**
     * Checks if the given validation outputs pass the acceptance criteria.
     *
     * @callname: ParachainHost_check_validation_outputs
     * @param {PolkadotParachainPrimitivesPrimitivesId} para_id
     * @param {PolkadotPrimitivesV6CandidateCommitments} outputs
     **/
    checkValidationOutputs: GenericRuntimeApiMethod<
      (
        paraId: PolkadotParachainPrimitivesPrimitivesId,
        outputs: PolkadotPrimitivesV6CandidateCommitments,
      ) => Promise<boolean>
    >;

    /**
     * Returns the session index expected at a child of the block.
     *
     * This can be used to instantiate a `SigningContext`.
     *
     * @callname: ParachainHost_session_index_for_child
     **/
    sessionIndexForChild: GenericRuntimeApiMethod<() => Promise<number>>;

    /**
     * Fetch the validation code used by a para, making the given `OccupiedCoreAssumption`.
     *
     * Returns `None` if either the para is not registered or the assumption is `Freed`
     * and the para already occupies a core.
     *
     * @callname: ParachainHost_validation_code
     * @param {PolkadotParachainPrimitivesPrimitivesId} para_id
     * @param {PolkadotPrimitivesV6OccupiedCoreAssumption} assumption
     **/
    validationCode: GenericRuntimeApiMethod<
      (
        paraId: PolkadotParachainPrimitivesPrimitivesId,
        assumption: PolkadotPrimitivesV6OccupiedCoreAssumption,
      ) => Promise<PolkadotParachainPrimitivesPrimitivesValidationCode | undefined>
    >;

    /**
     * Get the receipt of a candidate pending availability. This returns `Some` for any paras
     * assigned to occupied cores in `availability_cores` and `None` otherwise.
     *
     * @callname: ParachainHost_candidate_pending_availability
     * @param {PolkadotParachainPrimitivesPrimitivesId} para_id
     **/
    candidatePendingAvailability: GenericRuntimeApiMethod<
      (
        paraId: PolkadotParachainPrimitivesPrimitivesId,
      ) => Promise<PolkadotPrimitivesV6CommittedCandidateReceipt | undefined>
    >;

    /**
     * Get a vector of events concerning candidates that occurred within a block.
     *
     * @callname: ParachainHost_candidate_events
     **/
    candidateEvents: GenericRuntimeApiMethod<() => Promise<Array<PolkadotPrimitivesV6CandidateEvent>>>;

    /**
     * Get all the pending inbound messages in the downward message queue for a para.
     *
     * @callname: ParachainHost_dmq_contents
     * @param {PolkadotParachainPrimitivesPrimitivesId} recipient
     **/
    dmqContents: GenericRuntimeApiMethod<
      (
        recipient: PolkadotParachainPrimitivesPrimitivesId,
      ) => Promise<Array<PolkadotCorePrimitivesInboundDownwardMessage>>
    >;

    /**
     * Get the contents of all channels addressed to the given recipient. Channels that have no
     * messages in them are also included.
     *
     * @callname: ParachainHost_inbound_hrmp_channels_contents
     * @param {PolkadotParachainPrimitivesPrimitivesId} recipient
     **/
    inboundHrmpChannelsContents: GenericRuntimeApiMethod<
      (
        recipient: PolkadotParachainPrimitivesPrimitivesId,
      ) => Promise<Array<[PolkadotParachainPrimitivesPrimitivesId, Array<PolkadotCorePrimitivesInboundHrmpMessage>]>>
    >;

    /**
     * Get the validation code from its hash.
     *
     * @callname: ParachainHost_validation_code_by_hash
     * @param {PolkadotParachainPrimitivesPrimitivesValidationCodeHash} hash
     **/
    validationCodeByHash: GenericRuntimeApiMethod<
      (
        hash: PolkadotParachainPrimitivesPrimitivesValidationCodeHash,
      ) => Promise<PolkadotParachainPrimitivesPrimitivesValidationCode | undefined>
    >;

    /**
     * Scrape dispute relevant from on-chain, backing votes and resolved disputes.
     *
     * @callname: ParachainHost_on_chain_votes
     **/
    onChainVotes: GenericRuntimeApiMethod<() => Promise<PolkadotPrimitivesV6ScrapedOnChainVotes | undefined>>;

    /**
     * Get the session info for the given session, if stored.
     *
     * NOTE: This function is only available since parachain host version 2.
     *
     * @callname: ParachainHost_session_info
     * @param {number} index
     **/
    sessionInfo: GenericRuntimeApiMethod<(index: number) => Promise<PolkadotPrimitivesV6SessionInfo | undefined>>;

    /**
     * Submits a PVF pre-checking statement into the transaction pool.
     *
     * NOTE: This function is only available since parachain host version 2.
     *
     * @callname: ParachainHost_submit_pvf_check_statement
     * @param {PolkadotPrimitivesV6PvfCheckStatement} stmt
     * @param {PolkadotPrimitivesV6ValidatorAppSignature} signature
     **/
    submitPvfCheckStatement: GenericRuntimeApiMethod<
      (stmt: PolkadotPrimitivesV6PvfCheckStatement, signature: PolkadotPrimitivesV6ValidatorAppSignature) => Promise<[]>
    >;

    /**
     * Returns code hashes of PVFs that require pre-checking by validators in the active set.
     *
     * NOTE: This function is only available since parachain host version 2.
     *
     * @callname: ParachainHost_pvfs_require_precheck
     **/
    pvfsRequirePrecheck: GenericRuntimeApiMethod<
      () => Promise<Array<PolkadotParachainPrimitivesPrimitivesValidationCodeHash>>
    >;

    /**
     * Fetch the hash of the validation code used by a para, making the given `OccupiedCoreAssumption`.
     *
     * NOTE: This function is only available since parachain host version 2.
     *
     * @callname: ParachainHost_validation_code_hash
     * @param {PolkadotParachainPrimitivesPrimitivesId} para_id
     * @param {PolkadotPrimitivesV6OccupiedCoreAssumption} assumption
     **/
    validationCodeHash: GenericRuntimeApiMethod<
      (
        paraId: PolkadotParachainPrimitivesPrimitivesId,
        assumption: PolkadotPrimitivesV6OccupiedCoreAssumption,
      ) => Promise<PolkadotParachainPrimitivesPrimitivesValidationCodeHash | undefined>
    >;

    /**
     * Returns all onchain disputes.
     *
     * @callname: ParachainHost_disputes
     **/
    disputes: GenericRuntimeApiMethod<
      () => Promise<Array<[number, PolkadotCorePrimitivesCandidateHash, PolkadotPrimitivesV6DisputeState]>>
    >;

    /**
     * Returns execution parameters for the session.
     *
     * @callname: ParachainHost_session_executor_params
     * @param {number} session_index
     **/
    sessionExecutorParams: GenericRuntimeApiMethod<
      (sessionIndex: number) => Promise<PolkadotPrimitivesV6ExecutorParams | undefined>
    >;

    /**
     * Returns a list of validators that lost a past session dispute and need to be slashed.
     * NOTE: This function is only available since parachain host version 5.
     *
     * @callname: ParachainHost_unapplied_slashes
     **/
    unappliedSlashes: GenericRuntimeApiMethod<
      () => Promise<Array<[number, PolkadotCorePrimitivesCandidateHash, PolkadotPrimitivesV6SlashingPendingSlashes]>>
    >;

    /**
     * Returns a merkle proof of a validator session key.
     * NOTE: This function is only available since parachain host version 5.
     *
     * @callname: ParachainHost_key_ownership_proof
     * @param {PolkadotPrimitivesV6ValidatorAppPublic} validator_id
     **/
    keyOwnershipProof: GenericRuntimeApiMethod<
      (
        validatorId: PolkadotPrimitivesV6ValidatorAppPublic,
      ) => Promise<PolkadotPrimitivesV6SlashingOpaqueKeyOwnershipProof | undefined>
    >;

    /**
     * Submit an unsigned extrinsic to slash validators who lost a dispute about
     * a candidate of a past session.
     * NOTE: This function is only available since parachain host version 5.
     *
     * @callname: ParachainHost_submit_report_dispute_lost
     * @param {PolkadotPrimitivesV6SlashingDisputeProof} dispute_proof
     * @param {PolkadotPrimitivesV6SlashingOpaqueKeyOwnershipProof} key_ownership_proof
     **/
    submitReportDisputeLost: GenericRuntimeApiMethod<
      (
        disputeProof: PolkadotPrimitivesV6SlashingDisputeProof,
        keyOwnershipProof: PolkadotPrimitivesV6SlashingOpaqueKeyOwnershipProof,
      ) => Promise<[] | undefined>
    >;

    /**
     * Get the minimum number of backing votes for a parachain candidate.
     * This is a staging method! Do not use on production runtimes!
     *
     * @callname: ParachainHost_minimum_backing_votes
     **/
    minimumBackingVotes: GenericRuntimeApiMethod<() => Promise<number>>;

    /**
     * Returns the state of parachain backing for a given para.
     *
     * @callname: ParachainHost_para_backing_state
     * @param {PolkadotParachainPrimitivesPrimitivesId} _
     **/
    paraBackingState: GenericRuntimeApiMethod<
      (
        undefined: PolkadotParachainPrimitivesPrimitivesId,
      ) => Promise<PolkadotPrimitivesV6AsyncBackingBackingState | undefined>
    >;

    /**
     * Returns candidate's acceptance limitations for asynchronous backing for a relay parent.
     *
     * @callname: ParachainHost_async_backing_params
     **/
    asyncBackingParams: GenericRuntimeApiMethod<() => Promise<PolkadotPrimitivesV6AsyncBackingAsyncBackingParams>>;

    /**
     * Returns a list of all disabled validators at the given block.
     *
     * @callname: ParachainHost_disabled_validators
     **/
    disabledValidators: GenericRuntimeApiMethod<() => Promise<Array<PolkadotPrimitivesV6ValidatorIndex>>>;

    /**
     * Generic runtime api call
     **/
    [method: string]: GenericRuntimeApiMethod;
  };
  /**
   * @runtimeapi: BeefyApi - 0x49eaaf1b548a0cb0
   **/
  beefyApi: {
    /**
     * Return the block number where BEEFY consensus is enabled/started
     *
     * @callname: BeefyApi_beefy_genesis
     **/
    beefyGenesis: GenericRuntimeApiMethod<() => Promise<number | undefined>>;

    /**
     * Return the current active BEEFY validator set
     *
     * @callname: BeefyApi_validator_set
     **/
    validatorSet: GenericRuntimeApiMethod<() => Promise<SpConsensusBeefyValidatorSet | undefined>>;

    /**
     * Submits an unsigned extrinsic to report an equivocation. The caller
     * must provide the equivocation proof and a key ownership proof
     * (should be obtained using `generate_key_ownership_proof`). The
     * extrinsic will be unsigned and should only be accepted for local
     * authorship (not to be broadcast to the network). This method returns
     * `None` when creation of the extrinsic fails, e.g. if equivocation
     * reporting is disabled for the given runtime (i.e. this method is
     * hardcoded to return `None`). Only useful in an offchain context.
     *
     * @callname: BeefyApi_submit_report_equivocation_unsigned_extrinsic
     * @param {SpConsensusBeefyEquivocationProof} equivocation_proof
     * @param {SpConsensusBeefyOpaqueKeyOwnershipProof} key_owner_proof
     **/
    submitReportEquivocationUnsignedExtrinsic: GenericRuntimeApiMethod<
      (
        equivocationProof: SpConsensusBeefyEquivocationProof,
        keyOwnerProof: SpConsensusBeefyOpaqueKeyOwnershipProof,
      ) => Promise<[] | undefined>
    >;

    /**
     * Generates a proof of key ownership for the given authority in the
     * given set. An example usage of this module is coupled with the
     * session historical module to prove that a given authority key is
     * tied to a given staking identity during a specific session. Proofs
     * of key ownership are necessary for submitting equivocation reports.
     * NOTE: even though the API takes a `set_id` as parameter the current
     * implementations ignores this parameter and instead relies on this
     * method being called at the correct block height, i.e. any point at
     * which the given set id is live on-chain. Future implementations will
     * instead use indexed data through an offchain worker, not requiring
     * older states to be available.
     *
     * @callname: BeefyApi_generate_key_ownership_proof
     * @param {bigint} set_id
     * @param {SpConsensusBeefyEcdsaCryptoPublic} authority_id
     **/
    generateKeyOwnershipProof: GenericRuntimeApiMethod<
      (
        setId: bigint,
        authorityId: SpConsensusBeefyEcdsaCryptoPublic,
      ) => Promise<SpConsensusBeefyOpaqueKeyOwnershipProof | undefined>
    >;

    /**
     * Generic runtime api call
     **/
    [method: string]: GenericRuntimeApiMethod;
  };
  /**
   * @runtimeapi: MmrApi - 0x91d5df18b0d2cf58
   **/
  mmrApi: {
    /**
     * Return the on-chain MMR root hash.
     *
     * @callname: MmrApi_mmr_root
     **/
    mmrRoot: GenericRuntimeApiMethod<() => Promise<Result<H256, SpMmrPrimitivesError>>>;

    /**
     * Return the number of MMR blocks in the chain.
     *
     * @callname: MmrApi_mmr_leaf_count
     **/
    mmrLeafCount: GenericRuntimeApiMethod<() => Promise<Result<bigint, SpMmrPrimitivesError>>>;

    /**
     * Generate MMR proof for a series of block numbers. If `best_known_block_number = Some(n)`,
     * use historical MMR state at given block height `n`. Else, use current MMR state.
     *
     * @callname: MmrApi_generate_proof
     * @param {Array<number>} block_numbers
     * @param {number | undefined} best_known_block_number
     **/
    generateProof: GenericRuntimeApiMethod<
      (
        blockNumbers: Array<number>,
        bestKnownBlockNumber?: number | undefined,
      ) => Promise<Result<[Array<SpMmrPrimitivesEncodableOpaqueLeaf>, SpMmrPrimitivesProof], SpMmrPrimitivesError>>
    >;

    /**
     * Verify MMR proof against on-chain MMR for a batch of leaves.
     *
     * Note this function will use on-chain MMR root hash and check if the proof matches the hash.
     * Note, the leaves should be sorted such that corresponding leaves and leaf indices have the
     * same position in both the `leaves` vector and the `leaf_indices` vector contained in the [Proof]
     *
     * @callname: MmrApi_verify_proof
     * @param {Array<SpMmrPrimitivesEncodableOpaqueLeaf>} leaves
     * @param {SpMmrPrimitivesProof} proof
     **/
    verifyProof: GenericRuntimeApiMethod<
      (
        leaves: Array<SpMmrPrimitivesEncodableOpaqueLeaf>,
        proof: SpMmrPrimitivesProof,
      ) => Promise<Result<[], SpMmrPrimitivesError>>
    >;

    /**
     * Verify MMR proof against given root hash for a batch of leaves.
     *
     * Note this function does not require any on-chain storage - the
     * proof is verified against given MMR root hash.
     *
     * Note, the leaves should be sorted such that corresponding leaves and leaf indices have the
     * same position in both the `leaves` vector and the `leaf_indices` vector contained in the [Proof]
     *
     * @callname: MmrApi_verify_proof_stateless
     * @param {H256} root
     * @param {Array<SpMmrPrimitivesEncodableOpaqueLeaf>} leaves
     * @param {SpMmrPrimitivesProof} proof
     **/
    verifyProofStateless: GenericRuntimeApiMethod<
      (
        root: H256,
        leaves: Array<SpMmrPrimitivesEncodableOpaqueLeaf>,
        proof: SpMmrPrimitivesProof,
      ) => Promise<Result<[], SpMmrPrimitivesError>>
    >;

    /**
     * Generic runtime api call
     **/
    [method: string]: GenericRuntimeApiMethod;
  };
  /**
   * @runtimeapi: BeefyMmrApi - 0x2a5e924655399e60
   **/
  beefyMmrApi: {
    /**
     * Return the currently active BEEFY authority set proof.
     *
     * @callname: BeefyMmrApi_authority_set_proof
     **/
    authoritySetProof: GenericRuntimeApiMethod<() => Promise<SpConsensusBeefyMmrBeefyAuthoritySet>>;

    /**
     * Return the next/queued BEEFY authority set proof.
     *
     * @callname: BeefyMmrApi_next_authority_set_proof
     **/
    nextAuthoritySetProof: GenericRuntimeApiMethod<() => Promise<SpConsensusBeefyMmrBeefyAuthoritySet>>;

    /**
     * Generic runtime api call
     **/
    [method: string]: GenericRuntimeApiMethod;
  };
  /**
   * @runtimeapi: GrandpaApi - 0xed99c5acb25eedf5
   **/
  grandpaApi: {
    /**
     * Get the current GRANDPA authorities and weights. This should not change except
     * for when changes are scheduled and the corresponding delay has passed.
     *
     * When called at block B, it will return the set of authorities that should be
     * used to finalize descendants of this block (B+1, B+2, ...). The block B itself
     * is finalized by the authorities from block B-1.
     *
     * @callname: GrandpaApi_grandpa_authorities
     **/
    grandpaAuthorities: GenericRuntimeApiMethod<() => Promise<Array<[SpConsensusGrandpaAppPublic, bigint]>>>;

    /**
     * Submits an unsigned extrinsic to report an equivocation. The caller
     * must provide the equivocation proof and a key ownership proof
     * (should be obtained using `generate_key_ownership_proof`). The
     * extrinsic will be unsigned and should only be accepted for local
     * authorship (not to be broadcast to the network). This method returns
     * `None` when creation of the extrinsic fails, e.g. if equivocation
     * reporting is disabled for the given runtime (i.e. this method is
     * hardcoded to return `None`). Only useful in an offchain context.
     *
     * @callname: GrandpaApi_submit_report_equivocation_unsigned_extrinsic
     * @param {SpConsensusGrandpaEquivocationProof} equivocation_proof
     * @param {SpConsensusGrandpaOpaqueKeyOwnershipProof} key_owner_proof
     **/
    submitReportEquivocationUnsignedExtrinsic: GenericRuntimeApiMethod<
      (
        equivocationProof: SpConsensusGrandpaEquivocationProof,
        keyOwnerProof: SpConsensusGrandpaOpaqueKeyOwnershipProof,
      ) => Promise<[] | undefined>
    >;

    /**
     * Generates a proof of key ownership for the given authority in the
     * given set. An example usage of this module is coupled with the
     * session historical module to prove that a given authority key is
     * tied to a given staking identity during a specific session. Proofs
     * of key ownership are necessary for submitting equivocation reports.
     * NOTE: even though the API takes a `set_id` as parameter the current
     * implementations ignore this parameter and instead rely on this
     * method being called at the correct block height, i.e. any point at
     * which the given set id is live on-chain. Future implementations will
     * instead use indexed data through an offchain worker, not requiring
     * older states to be available.
     *
     * @callname: GrandpaApi_generate_key_ownership_proof
     * @param {bigint} set_id
     * @param {SpConsensusGrandpaAppPublic} authority_id
     **/
    generateKeyOwnershipProof: GenericRuntimeApiMethod<
      (
        setId: bigint,
        authorityId: SpConsensusGrandpaAppPublic,
      ) => Promise<SpConsensusGrandpaOpaqueKeyOwnershipProof | undefined>
    >;

    /**
     * Get current GRANDPA authority set id.
     *
     * @callname: GrandpaApi_current_set_id
     **/
    currentSetId: GenericRuntimeApiMethod<() => Promise<bigint>>;

    /**
     * Generic runtime api call
     **/
    [method: string]: GenericRuntimeApiMethod;
  };
  /**
   * @runtimeapi: BabeApi - 0xcbca25e39f142387
   **/
  babeApi: {
    /**
     * Return the configuration for BABE.
     *
     * @callname: BabeApi_configuration
     **/
    configuration: GenericRuntimeApiMethod<() => Promise<SpConsensusBabeBabeConfiguration>>;

    /**
     * Returns the slot that started the current epoch.
     *
     * @callname: BabeApi_current_epoch_start
     **/
    currentEpochStart: GenericRuntimeApiMethod<() => Promise<SpConsensusSlotsSlot>>;

    /**
     * Returns information regarding the current epoch.
     *
     * @callname: BabeApi_current_epoch
     **/
    currentEpoch: GenericRuntimeApiMethod<() => Promise<SpConsensusBabeEpoch>>;

    /**
     * Returns information regarding the next epoch (which was already
     * previously announced).
     *
     * @callname: BabeApi_next_epoch
     **/
    nextEpoch: GenericRuntimeApiMethod<() => Promise<SpConsensusBabeEpoch>>;

    /**
     * Generates a proof of key ownership for the given authority in the
     * current epoch. An example usage of this module is coupled with the
     * session historical module to prove that a given authority key is
     * tied to a given staking identity during a specific session. Proofs
     * of key ownership are necessary for submitting equivocation reports.
     * NOTE: even though the API takes a `slot` as parameter the current
     * implementations ignores this parameter and instead relies on this
     * method being called at the correct block height, i.e. any point at
     * which the epoch for the given slot is live on-chain. Future
     * implementations will instead use indexed data through an offchain
     * worker, not requiring older states to be available.
     *
     * @callname: BabeApi_generate_key_ownership_proof
     * @param {SpConsensusSlotsSlot} slot
     * @param {SpConsensusBabeAppPublic} authority_id
     **/
    generateKeyOwnershipProof: GenericRuntimeApiMethod<
      (
        slot: SpConsensusSlotsSlot,
        authorityId: SpConsensusBabeAppPublic,
      ) => Promise<SpConsensusBabeOpaqueKeyOwnershipProof | undefined>
    >;

    /**
     * Submits an unsigned extrinsic to report an equivocation. The caller
     * must provide the equivocation proof and a key ownership proof
     * (should be obtained using `generate_key_ownership_proof`). The
     * extrinsic will be unsigned and should only be accepted for local
     * authorship (not to be broadcast to the network). This method returns
     * `None` when creation of the extrinsic fails, e.g. if equivocation
     * reporting is disabled for the given runtime (i.e. this method is
     * hardcoded to return `None`). Only useful in an offchain context.
     *
     * @callname: BabeApi_submit_report_equivocation_unsigned_extrinsic
     * @param {SpConsensusSlotsEquivocationProof} equivocation_proof
     * @param {SpConsensusBabeOpaqueKeyOwnershipProof} key_owner_proof
     **/
    submitReportEquivocationUnsignedExtrinsic: GenericRuntimeApiMethod<
      (
        equivocationProof: SpConsensusSlotsEquivocationProof,
        keyOwnerProof: SpConsensusBabeOpaqueKeyOwnershipProof,
      ) => Promise<[] | undefined>
    >;

    /**
     * Generic runtime api call
     **/
    [method: string]: GenericRuntimeApiMethod;
  };
  /**
   * @runtimeapi: AuthorityDiscoveryApi - 0x687ad44ad37f03c2
   **/
  authorityDiscoveryApi: {
    /**
     * Retrieve authority identifiers of the current and next authority set.
     *
     * @callname: AuthorityDiscoveryApi_authorities
     **/
    authorities: GenericRuntimeApiMethod<() => Promise<Array<SpAuthorityDiscoveryAppPublic>>>;

    /**
     * Generic runtime api call
     **/
    [method: string]: GenericRuntimeApiMethod;
  };
  /**
   * @runtimeapi: SessionKeys - 0xab3c0572291feb8b
   **/
  sessionKeys: {
    /**
     * Generate a set of session keys with optionally using the given seed.
     * The keys should be stored within the keystore exposed via runtime
     * externalities.
     *
     * The seed needs to be a valid `utf8` string.
     *
     * Returns the concatenated SCALE encoded public keys.
     *
     * @callname: SessionKeys_generate_session_keys
     * @param {BytesLike | undefined} seed
     **/
    generateSessionKeys: GenericRuntimeApiMethod<(seed?: BytesLike | undefined) => Promise<Bytes>>;

    /**
     * Decode the given public session keys.
     *
     * Returns the list of public raw public keys + key type.
     *
     * @callname: SessionKeys_decode_session_keys
     * @param {BytesLike} encoded
     **/
    decodeSessionKeys: GenericRuntimeApiMethod<
      (encoded: BytesLike) => Promise<Array<[Bytes, SpCoreCryptoKeyTypeId]> | undefined>
    >;

    /**
     * Generic runtime api call
     **/
    [method: string]: GenericRuntimeApiMethod;
  };
  /**
   * @runtimeapi: AccountNonceApi - 0xbc9d89904f5b923f
   **/
  accountNonceApi: {
    /**
     * Get current account nonce of given `AccountId`.
     *
     * @callname: AccountNonceApi_account_nonce
     * @param {AccountId32Like} account
     **/
    accountNonce: GenericRuntimeApiMethod<(account: AccountId32Like) => Promise<number>>;

    /**
     * Generic runtime api call
     **/
    [method: string]: GenericRuntimeApiMethod;
  };
  /**
   * @runtimeapi: TransactionPaymentApi - 0x37c8bb1350a9a2a8
   **/
  transactionPaymentApi: {
    /**
     *
     * @callname: TransactionPaymentApi_query_info
     * @param {UncheckedExtrinsicLike} uxt
     * @param {number} len
     **/
    queryInfo: GenericRuntimeApiMethod<
      (uxt: UncheckedExtrinsicLike, len: number) => Promise<PalletTransactionPaymentRuntimeDispatchInfo>
    >;

    /**
     *
     * @callname: TransactionPaymentApi_query_fee_details
     * @param {UncheckedExtrinsicLike} uxt
     * @param {number} len
     **/
    queryFeeDetails: GenericRuntimeApiMethod<
      (uxt: UncheckedExtrinsicLike, len: number) => Promise<PalletTransactionPaymentFeeDetails>
    >;

    /**
     *
     * @callname: TransactionPaymentApi_query_weight_to_fee
     * @param {SpWeightsWeightV2Weight} weight
     **/
    queryWeightToFee: GenericRuntimeApiMethod<(weight: SpWeightsWeightV2Weight) => Promise<bigint>>;

    /**
     *
     * @callname: TransactionPaymentApi_query_length_to_fee
     * @param {number} length
     **/
    queryLengthToFee: GenericRuntimeApiMethod<(length: number) => Promise<bigint>>;

    /**
     * Generic runtime api call
     **/
    [method: string]: GenericRuntimeApiMethod;
  };
  /**
   * @runtimeapi: TransactionPaymentCallApi - 0xf3ff14d5ab527059
   **/
  transactionPaymentCallApi: {
    /**
     * Query information of a dispatch class, weight, and fee of a given encoded `Call`.
     *
     * @callname: TransactionPaymentCallApi_query_call_info
     * @param {PolkadotRuntimeRuntimeCallLike} call
     * @param {number} len
     **/
    queryCallInfo: GenericRuntimeApiMethod<
      (call: PolkadotRuntimeRuntimeCallLike, len: number) => Promise<PalletTransactionPaymentRuntimeDispatchInfo>
    >;

    /**
     * Query fee details of a given encoded `Call`.
     *
     * @callname: TransactionPaymentCallApi_query_call_fee_details
     * @param {PolkadotRuntimeRuntimeCallLike} call
     * @param {number} len
     **/
    queryCallFeeDetails: GenericRuntimeApiMethod<
      (call: PolkadotRuntimeRuntimeCallLike, len: number) => Promise<PalletTransactionPaymentFeeDetails>
    >;

    /**
     * Query the output of the current `WeightToFee` given some input.
     *
     * @callname: TransactionPaymentCallApi_query_weight_to_fee
     * @param {SpWeightsWeightV2Weight} weight
     **/
    queryWeightToFee: GenericRuntimeApiMethod<(weight: SpWeightsWeightV2Weight) => Promise<bigint>>;

    /**
     * Query the output of the current `LengthToFee` given some input.
     *
     * @callname: TransactionPaymentCallApi_query_length_to_fee
     * @param {number} length
     **/
    queryLengthToFee: GenericRuntimeApiMethod<(length: number) => Promise<bigint>>;

    /**
     * Generic runtime api call
     **/
    [method: string]: GenericRuntimeApiMethod;
  };
  /**
   * @runtimeapi: GenesisBuilder - 0xfbc577b9d747efd6
   **/
  genesisBuilder: {
    /**
     * Creates the default `GenesisConfig` and returns it as a JSON blob.
     *
     * This function instantiates the default `GenesisConfig` struct for the runtime and serializes it into a JSON
     * blob. It returns a `Vec<u8>` containing the JSON representation of the default `GenesisConfig`.
     *
     * @callname: GenesisBuilder_create_default_config
     **/
    createDefaultConfig: GenericRuntimeApiMethod<() => Promise<Bytes>>;

    /**
     * Build `GenesisConfig` from a JSON blob not using any defaults and store it in the storage.
     *
     * This function deserializes the full `GenesisConfig` from the given JSON blob and puts it into the storage.
     * If the provided JSON blob is incorrect or incomplete or the deserialization fails, an error is returned.
     * It is recommended to log any errors encountered during the process.
     *
     * Please note that provided json blob must contain all `GenesisConfig` fields, no defaults will be used.
     *
     * @callname: GenesisBuilder_build_config
     * @param {BytesLike} json
     **/
    buildConfig: GenericRuntimeApiMethod<(json: BytesLike) => Promise<Result<[], string>>>;

    /**
     * Generic runtime api call
     **/
    [method: string]: GenericRuntimeApiMethod;
  };
}
