// Generated by @dedot/codegen

import type {
  Phase,
  H256,
  DispatchInfo,
  DispatchError,
  AccountId20,
  FixedBytes,
  Percent,
  Perbill,
  Result,
  Bytes,
  H160,
  BytesLike,
  AccountId20Like,
  Data,
  U256,
  FixedI64,
  Era,
  UncheckedExtrinsic,
  Header,
} from '@dedot/codecs';

export type FrameSystemAccountInfo = {
  nonce: number;
  consumers: number;
  providers: number;
  sufficients: number;
  data: PalletBalancesAccountData;
};

export type PalletBalancesAccountData = {
  free: bigint;
  reserved: bigint;
  frozen: bigint;
  flags: PalletBalancesExtraFlags;
};

export type PalletBalancesExtraFlags = bigint;

export type FrameSupportDispatchPerDispatchClass = {
  normal: SpWeightsWeightV2Weight;
  operational: SpWeightsWeightV2Weight;
  mandatory: SpWeightsWeightV2Weight;
};

export type SpWeightsWeightV2Weight = { refTime: bigint; proofSize: bigint };

export type FrameSystemEventRecord = { phase: Phase; event: MoonbeamRuntimeRuntimeEvent; topics: Array<H256> };

export type MoonbeamRuntimeRuntimeEvent =
  | { pallet: 'System'; palletEvent: FrameSystemEvent }
  | { pallet: 'ParachainSystem'; palletEvent: CumulusPalletParachainSystemEvent }
  | { pallet: 'Balances'; palletEvent: PalletBalancesEvent }
  | { pallet: 'TransactionPayment'; palletEvent: PalletTransactionPaymentEvent }
  | { pallet: 'ParachainStaking'; palletEvent: PalletParachainStakingEvent }
  | { pallet: 'AuthorFilter'; palletEvent: PalletAuthorSlotFilterEvent }
  | { pallet: 'AuthorMapping'; palletEvent: PalletAuthorMappingEvent }
  | { pallet: 'MoonbeamOrbiters'; palletEvent: PalletMoonbeamOrbitersEvent }
  | { pallet: 'Utility'; palletEvent: PalletUtilityEvent }
  | { pallet: 'Proxy'; palletEvent: PalletProxyEvent }
  | { pallet: 'MaintenanceMode'; palletEvent: PalletMaintenanceModeEvent }
  | { pallet: 'Identity'; palletEvent: PalletIdentityEvent }
  | { pallet: 'Migrations'; palletEvent: PalletMigrationsEvent }
  | { pallet: 'Multisig'; palletEvent: PalletMultisigEvent }
  | { pallet: 'Evm'; palletEvent: PalletEvmEvent }
  | { pallet: 'Ethereum'; palletEvent: PalletEthereumEvent }
  | { pallet: 'Scheduler'; palletEvent: PalletSchedulerEvent }
  | { pallet: 'Democracy'; palletEvent: PalletDemocracyEvent }
  | { pallet: 'Preimage'; palletEvent: PalletPreimageEvent }
  | { pallet: 'ConvictionVoting'; palletEvent: PalletConvictionVotingEvent }
  | { pallet: 'Referenda'; palletEvent: PalletReferendaEvent }
  | { pallet: 'Whitelist'; palletEvent: PalletWhitelistEvent }
  | { pallet: 'CouncilCollective'; palletEvent: PalletCollectiveEvent }
  | { pallet: 'TechCommitteeCollective'; palletEvent: PalletCollectiveEvent }
  | { pallet: 'TreasuryCouncilCollective'; palletEvent: PalletCollectiveEvent }
  | { pallet: 'OpenTechCommitteeCollective'; palletEvent: PalletCollectiveEvent }
  | { pallet: 'Treasury'; palletEvent: PalletTreasuryEvent }
  | { pallet: 'CrowdloanRewards'; palletEvent: PalletCrowdloanRewardsEvent }
  | { pallet: 'XcmpQueue'; palletEvent: CumulusPalletXcmpQueueEvent }
  | { pallet: 'CumulusXcm'; palletEvent: CumulusPalletXcmEvent }
  | { pallet: 'DmpQueue'; palletEvent: CumulusPalletDmpQueueEvent }
  | { pallet: 'PolkadotXcm'; palletEvent: PalletXcmEvent }
  | { pallet: 'Assets'; palletEvent: PalletAssetsEvent }
  | { pallet: 'AssetManager'; palletEvent: PalletAssetManagerEvent }
  | { pallet: 'XTokens'; palletEvent: OrmlXtokensModuleEvent }
  | { pallet: 'XcmTransactor'; palletEvent: PalletXcmTransactorEvent }
  | { pallet: 'LocalAssets'; palletEvent: PalletAssetsEvent }
  | { pallet: 'Randomness'; palletEvent: PalletRandomnessEvent };

/**
 * Event for the System pallet.
 **/
export type FrameSystemEvent =
  /**
   * An extrinsic completed successfully.
   **/
  | { name: 'ExtrinsicSuccess'; data: { dispatchInfo: DispatchInfo } }
  /**
   * An extrinsic failed.
   **/
  | { name: 'ExtrinsicFailed'; data: { dispatchError: DispatchError; dispatchInfo: DispatchInfo } }
  /**
   * `:code` was updated.
   **/
  | { name: 'CodeUpdated' }
  /**
   * A new account was created.
   **/
  | { name: 'NewAccount'; data: { account: AccountId20 } }
  /**
   * An account was reaped.
   **/
  | { name: 'KilledAccount'; data: { account: AccountId20 } }
  /**
   * On on-chain remark happened.
   **/
  | { name: 'Remarked'; data: { sender: AccountId20; hash: H256 } };

export type FrameSupportDispatchDispatchClass = 'Normal' | 'Operational' | 'Mandatory';

export type FrameSupportDispatchPays = 'Yes' | 'No';

/**
 * The `Event` enum of this pallet
 **/
export type CumulusPalletParachainSystemEvent =
  /**
   * The validation function has been scheduled to apply.
   **/
  | { name: 'ValidationFunctionStored' }
  /**
   * The validation function was applied as of the contained relay chain block number.
   **/
  | { name: 'ValidationFunctionApplied'; data: { relayChainBlockNum: number } }
  /**
   * The relay-chain aborted the upgrade process.
   **/
  | { name: 'ValidationFunctionDiscarded' }
  /**
   * An upgrade has been authorized.
   **/
  | { name: 'UpgradeAuthorized'; data: { codeHash: H256 } }
  /**
   * Some downward messages have been received and will be processed.
   **/
  | { name: 'DownwardMessagesReceived'; data: { count: number } }
  /**
   * Downward messages were processed using the given weight.
   **/
  | { name: 'DownwardMessagesProcessed'; data: { weightUsed: SpWeightsWeightV2Weight; dmqHead: H256 } }
  /**
   * An upward message was sent to the relay chain.
   **/
  | { name: 'UpwardMessageSent'; data: { messageHash?: FixedBytes<32> | undefined } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletBalancesEvent =
  /**
   * An account was created with some free balance.
   **/
  | { name: 'Endowed'; data: { account: AccountId20; freeBalance: bigint } }
  /**
   * An account was removed whose balance was non-zero but below ExistentialDeposit,
   * resulting in an outright loss.
   **/
  | { name: 'DustLost'; data: { account: AccountId20; amount: bigint } }
  /**
   * Transfer succeeded.
   **/
  | { name: 'Transfer'; data: { from: AccountId20; to: AccountId20; amount: bigint } }
  /**
   * A balance was set by root.
   **/
  | { name: 'BalanceSet'; data: { who: AccountId20; free: bigint } }
  /**
   * Some balance was reserved (moved from free to reserved).
   **/
  | { name: 'Reserved'; data: { who: AccountId20; amount: bigint } }
  /**
   * Some balance was unreserved (moved from reserved to free).
   **/
  | { name: 'Unreserved'; data: { who: AccountId20; amount: bigint } }
  /**
   * Some balance was moved from the reserve of the first account to the second account.
   * Final argument indicates the destination balance type.
   **/
  | {
      name: 'ReserveRepatriated';
      data: {
        from: AccountId20;
        to: AccountId20;
        amount: bigint;
        destinationStatus: FrameSupportTokensMiscBalanceStatus;
      };
    }
  /**
   * Some amount was deposited (e.g. for transaction fees).
   **/
  | { name: 'Deposit'; data: { who: AccountId20; amount: bigint } }
  /**
   * Some amount was withdrawn from the account (e.g. for transaction fees).
   **/
  | { name: 'Withdraw'; data: { who: AccountId20; amount: bigint } }
  /**
   * Some amount was removed from the account (e.g. for misbehavior).
   **/
  | { name: 'Slashed'; data: { who: AccountId20; amount: bigint } }
  /**
   * Some amount was minted into an account.
   **/
  | { name: 'Minted'; data: { who: AccountId20; amount: bigint } }
  /**
   * Some amount was burned from an account.
   **/
  | { name: 'Burned'; data: { who: AccountId20; amount: bigint } }
  /**
   * Some amount was suspended from an account (it can be restored later).
   **/
  | { name: 'Suspended'; data: { who: AccountId20; amount: bigint } }
  /**
   * Some amount was restored into an account.
   **/
  | { name: 'Restored'; data: { who: AccountId20; amount: bigint } }
  /**
   * An account was upgraded.
   **/
  | { name: 'Upgraded'; data: { who: AccountId20 } }
  /**
   * Total issuance was increased by `amount`, creating a credit to be balanced.
   **/
  | { name: 'Issued'; data: { amount: bigint } }
  /**
   * Total issuance was decreased by `amount`, creating a debt to be balanced.
   **/
  | { name: 'Rescinded'; data: { amount: bigint } }
  /**
   * Some balance was locked.
   **/
  | { name: 'Locked'; data: { who: AccountId20; amount: bigint } }
  /**
   * Some balance was unlocked.
   **/
  | { name: 'Unlocked'; data: { who: AccountId20; amount: bigint } }
  /**
   * Some balance was frozen.
   **/
  | { name: 'Frozen'; data: { who: AccountId20; amount: bigint } }
  /**
   * Some balance was thawed.
   **/
  | { name: 'Thawed'; data: { who: AccountId20; amount: bigint } };

export type FrameSupportTokensMiscBalanceStatus = 'Free' | 'Reserved';

/**
 * The `Event` enum of this pallet
 **/
export type PalletTransactionPaymentEvent =
  /**
   * A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,
   * has been paid by `who`.
   **/
  { name: 'TransactionFeePaid'; data: { who: AccountId20; actualFee: bigint; tip: bigint } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletParachainStakingEvent =
  /**
   * Started new round.
   **/
  | {
      name: 'NewRound';
      data: { startingBlock: number; round: number; selectedCollatorsNumber: number; totalBalance: bigint };
    }
  /**
   * Account joined the set of collator candidates.
   **/
  | {
      name: 'JoinedCollatorCandidates';
      data: { account: AccountId20; amountLocked: bigint; newTotalAmtLocked: bigint };
    }
  /**
   * Candidate selected for collators. Total Exposed Amount includes all delegations.
   **/
  | { name: 'CollatorChosen'; data: { round: number; collatorAccount: AccountId20; totalExposedAmount: bigint } }
  /**
   * Candidate requested to decrease a self bond.
   **/
  | {
      name: 'CandidateBondLessRequested';
      data: { candidate: AccountId20; amountToDecrease: bigint; executeRound: number };
    }
  /**
   * Candidate has increased a self bond.
   **/
  | { name: 'CandidateBondedMore'; data: { candidate: AccountId20; amount: bigint; newTotalBond: bigint } }
  /**
   * Candidate has decreased a self bond.
   **/
  | { name: 'CandidateBondedLess'; data: { candidate: AccountId20; amount: bigint; newBond: bigint } }
  /**
   * Candidate temporarily leave the set of collator candidates without unbonding.
   **/
  | { name: 'CandidateWentOffline'; data: { candidate: AccountId20 } }
  /**
   * Candidate rejoins the set of collator candidates.
   **/
  | { name: 'CandidateBackOnline'; data: { candidate: AccountId20 } }
  /**
   * Candidate has requested to leave the set of candidates.
   **/
  | {
      name: 'CandidateScheduledExit';
      data: { exitAllowedRound: number; candidate: AccountId20; scheduledExit: number };
    }
  /**
   * Cancelled request to leave the set of candidates.
   **/
  | { name: 'CancelledCandidateExit'; data: { candidate: AccountId20 } }
  /**
   * Cancelled request to decrease candidate's bond.
   **/
  | { name: 'CancelledCandidateBondLess'; data: { candidate: AccountId20; amount: bigint; executeRound: number } }
  /**
   * Candidate has left the set of candidates.
   **/
  | { name: 'CandidateLeft'; data: { exCandidate: AccountId20; unlockedAmount: bigint; newTotalAmtLocked: bigint } }
  /**
   * Delegator requested to decrease a bond for the collator candidate.
   **/
  | {
      name: 'DelegationDecreaseScheduled';
      data: { delegator: AccountId20; candidate: AccountId20; amountToDecrease: bigint; executeRound: number };
    }
  | {
      name: 'DelegationIncreased';
      data: { delegator: AccountId20; candidate: AccountId20; amount: bigint; inTop: boolean };
    }
  | {
      name: 'DelegationDecreased';
      data: { delegator: AccountId20; candidate: AccountId20; amount: bigint; inTop: boolean };
    }
  /**
   * Delegator requested to leave the set of delegators.
   **/
  | { name: 'DelegatorExitScheduled'; data: { round: number; delegator: AccountId20; scheduledExit: number } }
  /**
   * Delegator requested to revoke delegation.
   **/
  | {
      name: 'DelegationRevocationScheduled';
      data: { round: number; delegator: AccountId20; candidate: AccountId20; scheduledExit: number };
    }
  /**
   * Delegator has left the set of delegators.
   **/
  | { name: 'DelegatorLeft'; data: { delegator: AccountId20; unstakedAmount: bigint } }
  /**
   * Delegation revoked.
   **/
  | { name: 'DelegationRevoked'; data: { delegator: AccountId20; candidate: AccountId20; unstakedAmount: bigint } }
  /**
   * Delegation kicked.
   **/
  | { name: 'DelegationKicked'; data: { delegator: AccountId20; candidate: AccountId20; unstakedAmount: bigint } }
  /**
   * Cancelled a pending request to exit the set of delegators.
   **/
  | { name: 'DelegatorExitCancelled'; data: { delegator: AccountId20 } }
  /**
   * Cancelled request to change an existing delegation.
   **/
  | {
      name: 'CancelledDelegationRequest';
      data: {
        delegator: AccountId20;
        cancelledRequest: PalletParachainStakingDelegationRequestsCancelledScheduledRequest;
        collator: AccountId20;
      };
    }
  /**
   * New delegation (increase of the existing one).
   **/
  | {
      name: 'Delegation';
      data: {
        delegator: AccountId20;
        lockedAmount: bigint;
        candidate: AccountId20;
        delegatorPosition: PalletParachainStakingDelegatorAdded;
        autoCompound: Percent;
      };
    }
  /**
   * Delegation from candidate state has been remove.
   **/
  | {
      name: 'DelegatorLeftCandidate';
      data: { delegator: AccountId20; candidate: AccountId20; unstakedAmount: bigint; totalCandidateStaked: bigint };
    }
  /**
   * Paid the account (delegator or collator) the balance as liquid rewards.
   **/
  | { name: 'Rewarded'; data: { account: AccountId20; rewards: bigint } }
  /**
   * Transferred to account which holds funds reserved for parachain bond.
   **/
  | { name: 'ReservedForParachainBond'; data: { account: AccountId20; value: bigint } }
  /**
   * Account (re)set for parachain bond treasury.
   **/
  | { name: 'ParachainBondAccountSet'; data: { old: AccountId20; new: AccountId20 } }
  /**
   * Percent of inflation reserved for parachain bond (re)set.
   **/
  | { name: 'ParachainBondReservePercentSet'; data: { old: Percent; new: Percent } }
  /**
   * Annual inflation input (first 3) was used to derive new per-round inflation (last 3)
   **/
  | {
      name: 'InflationSet';
      data: {
        annualMin: Perbill;
        annualIdeal: Perbill;
        annualMax: Perbill;
        roundMin: Perbill;
        roundIdeal: Perbill;
        roundMax: Perbill;
      };
    }
  /**
   * Staking expectations set.
   **/
  | { name: 'StakeExpectationsSet'; data: { expectMin: bigint; expectIdeal: bigint; expectMax: bigint } }
  /**
   * Set total selected candidates to this value.
   **/
  | { name: 'TotalSelectedSet'; data: { old: number; new: number } }
  /**
   * Set collator commission to this value.
   **/
  | { name: 'CollatorCommissionSet'; data: { old: Perbill; new: Perbill } }
  /**
   * Set blocks per round
   **/
  | {
      name: 'BlocksPerRoundSet';
      data: {
        currentRound: number;
        firstBlock: number;
        old: number;
        new: number;
        newPerRoundInflationMin: Perbill;
        newPerRoundInflationIdeal: Perbill;
        newPerRoundInflationMax: Perbill;
      };
    }
  /**
   * Auto-compounding reward percent was set for a delegation.
   **/
  | { name: 'AutoCompoundSet'; data: { candidate: AccountId20; delegator: AccountId20; value: Percent } }
  /**
   * Compounded a portion of rewards towards the delegation.
   **/
  | { name: 'Compounded'; data: { candidate: AccountId20; delegator: AccountId20; amount: bigint } };

export type PalletParachainStakingDelegationRequestsCancelledScheduledRequest = {
  whenExecutable: number;
  action: PalletParachainStakingDelegationRequestsDelegationAction;
};

export type PalletParachainStakingDelegationRequestsDelegationAction =
  | { tag: 'Revoke'; value: bigint }
  | { tag: 'Decrease'; value: bigint };

export type PalletParachainStakingDelegatorAdded =
  | { tag: 'AddedToTop'; value: { newTotal: bigint } }
  | { tag: 'AddedToBottom' };

/**
 * The `Event` enum of this pallet
 **/
export type PalletAuthorSlotFilterEvent =
  /**
   * The amount of eligible authors for the filter to select has been changed.
   **/
  { name: 'EligibleUpdated'; data: PalletAuthorSlotFilterNumNonZeroU32 };

export type PalletAuthorSlotFilterNumNonZeroU32 = number;

/**
 * The `Event` enum of this pallet
 **/
export type PalletAuthorMappingEvent =
  /**
   * A NimbusId has been registered and mapped to an AccountId.
   **/
  | {
      name: 'KeysRegistered';
      data: {
        nimbusId: NimbusPrimitivesNimbusCryptoPublic;
        accountId: AccountId20;
        keys: SessionKeysPrimitivesVrfVrfCryptoPublic;
      };
    }
  /**
   * An NimbusId has been de-registered, and its AccountId mapping removed.
   **/
  | {
      name: 'KeysRemoved';
      data: {
        nimbusId: NimbusPrimitivesNimbusCryptoPublic;
        accountId: AccountId20;
        keys: SessionKeysPrimitivesVrfVrfCryptoPublic;
      };
    }
  /**
   * An NimbusId has been registered, replacing a previous registration and its mapping.
   **/
  | {
      name: 'KeysRotated';
      data: {
        newNimbusId: NimbusPrimitivesNimbusCryptoPublic;
        accountId: AccountId20;
        newKeys: SessionKeysPrimitivesVrfVrfCryptoPublic;
      };
    };

export type NimbusPrimitivesNimbusCryptoPublic = SpCoreSr25519Public;

export type SpCoreSr25519Public = FixedBytes<32>;

export type SessionKeysPrimitivesVrfVrfCryptoPublic = SpCoreSr25519Public;

/**
 * The `Event` enum of this pallet
 **/
export type PalletMoonbeamOrbitersEvent =
  /**
   * An orbiter join a collator pool
   **/
  | { name: 'OrbiterJoinCollatorPool'; data: { collator: AccountId20; orbiter: AccountId20 } }
  /**
   * An orbiter leave a collator pool
   **/
  | { name: 'OrbiterLeaveCollatorPool'; data: { collator: AccountId20; orbiter: AccountId20 } }
  /**
   * Paid the orbiter account the balance as liquid rewards.
   **/
  | { name: 'OrbiterRewarded'; data: { account: AccountId20; rewards: bigint } }
  | {
      name: 'OrbiterRotation';
      data: { collator: AccountId20; oldOrbiter?: AccountId20 | undefined; newOrbiter?: AccountId20 | undefined };
    }
  /**
   * An orbiter has registered
   **/
  | { name: 'OrbiterRegistered'; data: { account: AccountId20; deposit: bigint } }
  /**
   * An orbiter has unregistered
   **/
  | { name: 'OrbiterUnregistered'; data: { account: AccountId20 } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletUtilityEvent =
  /**
   * Batch of dispatches did not complete fully. Index of first failing dispatch given, as
   * well as the error.
   **/
  | { name: 'BatchInterrupted'; data: { index: number; error: DispatchError } }
  /**
   * Batch of dispatches completed fully with no error.
   **/
  | { name: 'BatchCompleted' }
  /**
   * Batch of dispatches completed but has errors.
   **/
  | { name: 'BatchCompletedWithErrors' }
  /**
   * A single item within a Batch of dispatches has completed with no error.
   **/
  | { name: 'ItemCompleted' }
  /**
   * A single item within a Batch of dispatches has completed with error.
   **/
  | { name: 'ItemFailed'; data: { error: DispatchError } }
  /**
   * A call was dispatched.
   **/
  | { name: 'DispatchedAs'; data: { result: Result<[], DispatchError> } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletProxyEvent =
  /**
   * A proxy was executed correctly, with the given.
   **/
  | { name: 'ProxyExecuted'; data: { result: Result<[], DispatchError> } }
  /**
   * A pure account has been created by new proxy with given
   * disambiguation index and proxy type.
   **/
  | {
      name: 'PureCreated';
      data: { pure: AccountId20; who: AccountId20; proxyType: MoonbeamRuntimeProxyType; disambiguationIndex: number };
    }
  /**
   * An announcement was placed to make a call in the future.
   **/
  | { name: 'Announced'; data: { real: AccountId20; proxy: AccountId20; callHash: H256 } }
  /**
   * A proxy was added.
   **/
  | {
      name: 'ProxyAdded';
      data: { delegator: AccountId20; delegatee: AccountId20; proxyType: MoonbeamRuntimeProxyType; delay: number };
    }
  /**
   * A proxy was removed.
   **/
  | {
      name: 'ProxyRemoved';
      data: { delegator: AccountId20; delegatee: AccountId20; proxyType: MoonbeamRuntimeProxyType; delay: number };
    };

export type MoonbeamRuntimeProxyType =
  | 'Any'
  | 'NonTransfer'
  | 'Governance'
  | 'Staking'
  | 'CancelProxy'
  | 'Balances'
  | 'AuthorMapping'
  | 'IdentityJudgement';

/**
 * The `Event` enum of this pallet
 **/
export type PalletMaintenanceModeEvent =
  /**
   * The chain was put into Maintenance Mode
   **/
  | { name: 'EnteredMaintenanceMode' }
  /**
   * The chain returned to its normal operating state
   **/
  | { name: 'NormalOperationResumed' }
  /**
   * The call to suspend on_idle XCM execution failed with inner error
   **/
  | { name: 'FailedToSuspendIdleXcmExecution'; data: { error: DispatchError } }
  /**
   * The call to resume on_idle XCM execution failed with inner error
   **/
  | { name: 'FailedToResumeIdleXcmExecution'; data: { error: DispatchError } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletIdentityEvent =
  /**
   * A name was set or reset (which will remove all judgements).
   **/
  | { name: 'IdentitySet'; data: { who: AccountId20 } }
  /**
   * A name was cleared, and the given balance returned.
   **/
  | { name: 'IdentityCleared'; data: { who: AccountId20; deposit: bigint } }
  /**
   * A name was removed and the given balance slashed.
   **/
  | { name: 'IdentityKilled'; data: { who: AccountId20; deposit: bigint } }
  /**
   * A judgement was asked from a registrar.
   **/
  | { name: 'JudgementRequested'; data: { who: AccountId20; registrarIndex: number } }
  /**
   * A judgement request was retracted.
   **/
  | { name: 'JudgementUnrequested'; data: { who: AccountId20; registrarIndex: number } }
  /**
   * A judgement was given by a registrar.
   **/
  | { name: 'JudgementGiven'; data: { target: AccountId20; registrarIndex: number } }
  /**
   * A registrar was added.
   **/
  | { name: 'RegistrarAdded'; data: { registrarIndex: number } }
  /**
   * A sub-identity was added to an identity and the deposit paid.
   **/
  | { name: 'SubIdentityAdded'; data: { sub: AccountId20; main: AccountId20; deposit: bigint } }
  /**
   * A sub-identity was removed from an identity and the deposit freed.
   **/
  | { name: 'SubIdentityRemoved'; data: { sub: AccountId20; main: AccountId20; deposit: bigint } }
  /**
   * A sub-identity was cleared, and the given deposit repatriated from the
   * main identity account to the sub-identity account.
   **/
  | { name: 'SubIdentityRevoked'; data: { sub: AccountId20; main: AccountId20; deposit: bigint } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletMigrationsEvent =
  /**
   * Runtime upgrade started
   **/
  | { name: 'RuntimeUpgradeStarted' }
  /**
   * Runtime upgrade completed
   **/
  | { name: 'RuntimeUpgradeCompleted'; data: { weight: SpWeightsWeightV2Weight } }
  /**
   * Migration started
   **/
  | { name: 'MigrationStarted'; data: { migrationName: Bytes } }
  /**
   * Migration completed
   **/
  | { name: 'MigrationCompleted'; data: { migrationName: Bytes; consumedWeight: SpWeightsWeightV2Weight } }
  /**
   * XCM execution suspension failed with inner error
   **/
  | { name: 'FailedToSuspendIdleXcmExecution'; data: { error: DispatchError } }
  /**
   * XCM execution resume failed with inner error
   **/
  | { name: 'FailedToResumeIdleXcmExecution'; data: { error: DispatchError } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletMultisigEvent =
  /**
   * A new multisig operation has begun.
   **/
  | { name: 'NewMultisig'; data: { approving: AccountId20; multisig: AccountId20; callHash: FixedBytes<32> } }
  /**
   * A multisig operation has been approved by someone.
   **/
  | {
      name: 'MultisigApproval';
      data: {
        approving: AccountId20;
        timepoint: PalletMultisigTimepoint;
        multisig: AccountId20;
        callHash: FixedBytes<32>;
      };
    }
  /**
   * A multisig operation has been executed.
   **/
  | {
      name: 'MultisigExecuted';
      data: {
        approving: AccountId20;
        timepoint: PalletMultisigTimepoint;
        multisig: AccountId20;
        callHash: FixedBytes<32>;
        result: Result<[], DispatchError>;
      };
    }
  /**
   * A multisig operation has been cancelled.
   **/
  | {
      name: 'MultisigCancelled';
      data: {
        cancelling: AccountId20;
        timepoint: PalletMultisigTimepoint;
        multisig: AccountId20;
        callHash: FixedBytes<32>;
      };
    };

export type PalletMultisigTimepoint = { height: number; index: number };

/**
 * The `Event` enum of this pallet
 **/
export type PalletEvmEvent =
  /**
   * Ethereum events from contracts.
   **/
  | { name: 'Log'; data: { log: EthereumLog } }
  /**
   * A contract has been created at given address.
   **/
  | { name: 'Created'; data: { address: H160 } }
  /**
   * A contract was attempted to be created, but the execution failed.
   **/
  | { name: 'CreatedFailed'; data: { address: H160 } }
  /**
   * A contract has been executed successfully with states applied.
   **/
  | { name: 'Executed'; data: { address: H160 } }
  /**
   * A contract has been executed with errors. States are reverted with only gas fees applied.
   **/
  | { name: 'ExecutedFailed'; data: { address: H160 } };

export type EthereumLog = { address: H160; topics: Array<H256>; data: Bytes };

/**
 * The `Event` enum of this pallet
 **/
export type PalletEthereumEvent =
  /**
   * An ethereum transaction was successfully executed.
   **/
  {
    name: 'Executed';
    data: { from: H160; to: H160; transactionHash: H256; exitReason: EvmCoreErrorExitReason; extraData: Bytes };
  };

export type EvmCoreErrorExitReason =
  | { tag: 'Succeed'; value: EvmCoreErrorExitSucceed }
  | { tag: 'Error'; value: EvmCoreErrorExitError }
  | { tag: 'Revert'; value: EvmCoreErrorExitRevert }
  | { tag: 'Fatal'; value: EvmCoreErrorExitFatal };

export type EvmCoreErrorExitSucceed = 'Stopped' | 'Returned' | 'Suicided';

export type EvmCoreErrorExitError =
  | { tag: 'StackUnderflow' }
  | { tag: 'StackOverflow' }
  | { tag: 'InvalidJump' }
  | { tag: 'InvalidRange' }
  | { tag: 'DesignatedInvalid' }
  | { tag: 'CallTooDeep' }
  | { tag: 'CreateCollision' }
  | { tag: 'CreateContractLimit' }
  | { tag: 'InvalidCode'; value: EvmCoreOpcode }
  | { tag: 'OutOfOffset' }
  | { tag: 'OutOfGas' }
  | { tag: 'OutOfFund' }
  | { tag: 'PcUnderflow' }
  | { tag: 'CreateEmpty' }
  | { tag: 'Other'; value: string }
  | { tag: 'MaxNonce' };

export type EvmCoreOpcode = number;

export type EvmCoreErrorExitRevert = 'Reverted';

export type EvmCoreErrorExitFatal =
  | { tag: 'NotSupported' }
  | { tag: 'UnhandledInterrupt' }
  | { tag: 'CallErrorAsFatal'; value: EvmCoreErrorExitError }
  | { tag: 'Other'; value: string };

/**
 * Events type.
 **/
export type PalletSchedulerEvent =
  /**
   * Scheduled some task.
   **/
  | { name: 'Scheduled'; data: { when: number; index: number } }
  /**
   * Canceled some task.
   **/
  | { name: 'Canceled'; data: { when: number; index: number } }
  /**
   * Dispatched some task.
   **/
  | {
      name: 'Dispatched';
      data: { task: [number, number]; id?: FixedBytes<32> | undefined; result: Result<[], DispatchError> };
    }
  /**
   * The call for the provided hash was not found so the task has been aborted.
   **/
  | { name: 'CallUnavailable'; data: { task: [number, number]; id?: FixedBytes<32> | undefined } }
  /**
   * The given task was unable to be renewed since the agenda is full at that block.
   **/
  | { name: 'PeriodicFailed'; data: { task: [number, number]; id?: FixedBytes<32> | undefined } }
  /**
   * The given task can never be executed since it is overweight.
   **/
  | { name: 'PermanentlyOverweight'; data: { task: [number, number]; id?: FixedBytes<32> | undefined } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletDemocracyEvent =
  /**
   * A motion has been proposed by a public account.
   **/
  | { name: 'Proposed'; data: { proposalIndex: number; deposit: bigint } }
  /**
   * A public proposal has been tabled for referendum vote.
   **/
  | { name: 'Tabled'; data: { proposalIndex: number; deposit: bigint } }
  /**
   * An external proposal has been tabled.
   **/
  | { name: 'ExternalTabled' }
  /**
   * A referendum has begun.
   **/
  | { name: 'Started'; data: { refIndex: number; threshold: PalletDemocracyVoteThreshold } }
  /**
   * A proposal has been approved by referendum.
   **/
  | { name: 'Passed'; data: { refIndex: number } }
  /**
   * A proposal has been rejected by referendum.
   **/
  | { name: 'NotPassed'; data: { refIndex: number } }
  /**
   * A referendum has been cancelled.
   **/
  | { name: 'Cancelled'; data: { refIndex: number } }
  /**
   * An account has delegated their vote to another account.
   **/
  | { name: 'Delegated'; data: { who: AccountId20; target: AccountId20 } }
  /**
   * An account has cancelled a previous delegation operation.
   **/
  | { name: 'Undelegated'; data: { account: AccountId20 } }
  /**
   * An external proposal has been vetoed.
   **/
  | { name: 'Vetoed'; data: { who: AccountId20; proposalHash: H256; until: number } }
  /**
   * A proposal_hash has been blacklisted permanently.
   **/
  | { name: 'Blacklisted'; data: { proposalHash: H256 } }
  /**
   * An account has voted in a referendum
   **/
  | { name: 'Voted'; data: { voter: AccountId20; refIndex: number; vote: PalletDemocracyVoteAccountVote } }
  /**
   * An account has secconded a proposal
   **/
  | { name: 'Seconded'; data: { seconder: AccountId20; propIndex: number } }
  /**
   * A proposal got canceled.
   **/
  | { name: 'ProposalCanceled'; data: { propIndex: number } }
  /**
   * Metadata for a proposal or a referendum has been set.
   **/
  | {
      name: 'MetadataSet';
      data: {
        /**
         * Metadata owner.
         **/
        owner: PalletDemocracyMetadataOwner;

        /**
         * Preimage hash.
         **/
        hash: H256;
      };
    }
  /**
   * Metadata for a proposal or a referendum has been cleared.
   **/
  | {
      name: 'MetadataCleared';
      data: {
        /**
         * Metadata owner.
         **/
        owner: PalletDemocracyMetadataOwner;

        /**
         * Preimage hash.
         **/
        hash: H256;
      };
    }
  /**
   * Metadata has been transferred to new owner.
   **/
  | {
      name: 'MetadataTransferred';
      data: {
        /**
         * Previous metadata owner.
         **/
        prevOwner: PalletDemocracyMetadataOwner;

        /**
         * New metadata owner.
         **/
        owner: PalletDemocracyMetadataOwner;

        /**
         * Preimage hash.
         **/
        hash: H256;
      };
    };

export type PalletDemocracyVoteThreshold = 'SuperMajorityApprove' | 'SuperMajorityAgainst' | 'SimpleMajority';

export type PalletDemocracyVoteAccountVote =
  | { tag: 'Standard'; value: { vote: PalletDemocracyVote; balance: bigint } }
  | { tag: 'Split'; value: { aye: bigint; nay: bigint } };

export type PalletDemocracyVote = number;

export type PalletDemocracyMetadataOwner =
  | { tag: 'External' }
  | { tag: 'Proposal'; value: number }
  | { tag: 'Referendum'; value: number };

/**
 * The `Event` enum of this pallet
 **/
export type PalletPreimageEvent =
  /**
   * A preimage has been noted.
   **/
  | { name: 'Noted'; data: { hash: H256 } }
  /**
   * A preimage has been requested.
   **/
  | { name: 'Requested'; data: { hash: H256 } }
  /**
   * A preimage has ben cleared.
   **/
  | { name: 'Cleared'; data: { hash: H256 } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletConvictionVotingEvent =
  /**
   * An account has delegated their vote to another account. \[who, target\]
   **/
  | { name: 'Delegated'; data: [AccountId20, AccountId20] }
  /**
   * An \[account\] has cancelled a previous delegation operation.
   **/
  | { name: 'Undelegated'; data: AccountId20 };

/**
 * The `Event` enum of this pallet
 **/
export type PalletReferendaEvent =
  /**
   * A referendum has been submitted.
   **/
  | {
      name: 'Submitted';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The track (and by extension proposal dispatch origin) of this referendum.
         **/
        track: number;

        /**
         * The proposal for the referendum.
         **/
        proposal: FrameSupportPreimagesBounded;
      };
    }
  /**
   * The decision deposit has been placed.
   **/
  | {
      name: 'DecisionDepositPlaced';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The account who placed the deposit.
         **/
        who: AccountId20;

        /**
         * The amount placed by the account.
         **/
        amount: bigint;
      };
    }
  /**
   * The decision deposit has been refunded.
   **/
  | {
      name: 'DecisionDepositRefunded';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The account who placed the deposit.
         **/
        who: AccountId20;

        /**
         * The amount placed by the account.
         **/
        amount: bigint;
      };
    }
  /**
   * A deposit has been slashaed.
   **/
  | {
      name: 'DepositSlashed';
      data: {
        /**
         * The account who placed the deposit.
         **/
        who: AccountId20;

        /**
         * The amount placed by the account.
         **/
        amount: bigint;
      };
    }
  /**
   * A referendum has moved into the deciding phase.
   **/
  | {
      name: 'DecisionStarted';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The track (and by extension proposal dispatch origin) of this referendum.
         **/
        track: number;

        /**
         * The proposal for the referendum.
         **/
        proposal: FrameSupportPreimagesBounded;

        /**
         * The current tally of votes in this referendum.
         **/
        tally: PalletConvictionVotingTally;
      };
    }
  | {
      name: 'ConfirmStarted';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;
      };
    }
  | {
      name: 'ConfirmAborted';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;
      };
    }
  /**
   * A referendum has ended its confirmation phase and is ready for approval.
   **/
  | {
      name: 'Confirmed';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The final tally of votes in this referendum.
         **/
        tally: PalletConvictionVotingTally;
      };
    }
  /**
   * A referendum has been approved and its proposal has been scheduled.
   **/
  | {
      name: 'Approved';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;
      };
    }
  /**
   * A proposal has been rejected by referendum.
   **/
  | {
      name: 'Rejected';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The final tally of votes in this referendum.
         **/
        tally: PalletConvictionVotingTally;
      };
    }
  /**
   * A referendum has been timed out without being decided.
   **/
  | {
      name: 'TimedOut';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The final tally of votes in this referendum.
         **/
        tally: PalletConvictionVotingTally;
      };
    }
  /**
   * A referendum has been cancelled.
   **/
  | {
      name: 'Cancelled';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The final tally of votes in this referendum.
         **/
        tally: PalletConvictionVotingTally;
      };
    }
  /**
   * A referendum has been killed.
   **/
  | {
      name: 'Killed';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The final tally of votes in this referendum.
         **/
        tally: PalletConvictionVotingTally;
      };
    }
  /**
   * The submission deposit has been refunded.
   **/
  | {
      name: 'SubmissionDepositRefunded';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The account who placed the deposit.
         **/
        who: AccountId20;

        /**
         * The amount placed by the account.
         **/
        amount: bigint;
      };
    }
  /**
   * Metadata for a referendum has been set.
   **/
  | {
      name: 'MetadataSet';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * Preimage hash.
         **/
        hash: H256;
      };
    }
  /**
   * Metadata for a referendum has been cleared.
   **/
  | {
      name: 'MetadataCleared';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * Preimage hash.
         **/
        hash: H256;
      };
    };

export type FrameSupportPreimagesBounded =
  | { tag: 'Legacy'; value: { hash: H256 } }
  | { tag: 'Inline'; value: Bytes }
  | { tag: 'Lookup'; value: { hash: H256; len: number } };

export type MoonbeamRuntimeRuntimeCall =
  | { pallet: 'System'; palletCall: FrameSystemCall }
  | { pallet: 'ParachainSystem'; palletCall: CumulusPalletParachainSystemCall }
  | { pallet: 'Timestamp'; palletCall: PalletTimestampCall }
  | { pallet: 'RootTesting'; palletCall: PalletRootTestingCall }
  | { pallet: 'Balances'; palletCall: PalletBalancesCall }
  | { pallet: 'ParachainStaking'; palletCall: PalletParachainStakingCall }
  | { pallet: 'AuthorInherent'; palletCall: PalletAuthorInherentCall }
  | { pallet: 'AuthorFilter'; palletCall: PalletAuthorSlotFilterCall }
  | { pallet: 'AuthorMapping'; palletCall: PalletAuthorMappingCall }
  | { pallet: 'MoonbeamOrbiters'; palletCall: PalletMoonbeamOrbitersCall }
  | { pallet: 'Utility'; palletCall: PalletUtilityCall }
  | { pallet: 'Proxy'; palletCall: PalletProxyCall }
  | { pallet: 'MaintenanceMode'; palletCall: PalletMaintenanceModeCall }
  | { pallet: 'Identity'; palletCall: PalletIdentityCall }
  | { pallet: 'Multisig'; palletCall: PalletMultisigCall }
  | { pallet: 'Evm'; palletCall: PalletEvmCall }
  | { pallet: 'Ethereum'; palletCall: PalletEthereumCall }
  | { pallet: 'Scheduler'; palletCall: PalletSchedulerCall }
  | { pallet: 'Democracy'; palletCall: PalletDemocracyCall }
  | { pallet: 'Preimage'; palletCall: PalletPreimageCall }
  | { pallet: 'ConvictionVoting'; palletCall: PalletConvictionVotingCall }
  | { pallet: 'Referenda'; palletCall: PalletReferendaCall }
  | { pallet: 'Whitelist'; palletCall: PalletWhitelistCall }
  | { pallet: 'CouncilCollective'; palletCall: PalletCollectiveCall }
  | { pallet: 'TechCommitteeCollective'; palletCall: PalletCollectiveCall }
  | { pallet: 'TreasuryCouncilCollective'; palletCall: PalletCollectiveCall }
  | { pallet: 'OpenTechCommitteeCollective'; palletCall: PalletCollectiveCall }
  | { pallet: 'Treasury'; palletCall: PalletTreasuryCall }
  | { pallet: 'CrowdloanRewards'; palletCall: PalletCrowdloanRewardsCall }
  | { pallet: 'DmpQueue'; palletCall: CumulusPalletDmpQueueCall }
  | { pallet: 'PolkadotXcm'; palletCall: PalletXcmCall }
  | { pallet: 'Assets'; palletCall: PalletAssetsCall }
  | { pallet: 'AssetManager'; palletCall: PalletAssetManagerCall }
  | { pallet: 'XTokens'; palletCall: OrmlXtokensModuleCall }
  | { pallet: 'XcmTransactor'; palletCall: PalletXcmTransactorCall }
  | { pallet: 'LocalAssets'; palletCall: PalletAssetsCall }
  | { pallet: 'EthereumXcm'; palletCall: PalletEthereumXcmCall }
  | { pallet: 'Randomness'; palletCall: PalletRandomnessCall };

export type MoonbeamRuntimeRuntimeCallLike =
  | { pallet: 'System'; palletCall: FrameSystemCallLike }
  | { pallet: 'ParachainSystem'; palletCall: CumulusPalletParachainSystemCallLike }
  | { pallet: 'Timestamp'; palletCall: PalletTimestampCallLike }
  | { pallet: 'RootTesting'; palletCall: PalletRootTestingCallLike }
  | { pallet: 'Balances'; palletCall: PalletBalancesCallLike }
  | { pallet: 'ParachainStaking'; palletCall: PalletParachainStakingCallLike }
  | { pallet: 'AuthorInherent'; palletCall: PalletAuthorInherentCallLike }
  | { pallet: 'AuthorFilter'; palletCall: PalletAuthorSlotFilterCallLike }
  | { pallet: 'AuthorMapping'; palletCall: PalletAuthorMappingCallLike }
  | { pallet: 'MoonbeamOrbiters'; palletCall: PalletMoonbeamOrbitersCallLike }
  | { pallet: 'Utility'; palletCall: PalletUtilityCallLike }
  | { pallet: 'Proxy'; palletCall: PalletProxyCallLike }
  | { pallet: 'MaintenanceMode'; palletCall: PalletMaintenanceModeCallLike }
  | { pallet: 'Identity'; palletCall: PalletIdentityCallLike }
  | { pallet: 'Multisig'; palletCall: PalletMultisigCallLike }
  | { pallet: 'Evm'; palletCall: PalletEvmCallLike }
  | { pallet: 'Ethereum'; palletCall: PalletEthereumCallLike }
  | { pallet: 'Scheduler'; palletCall: PalletSchedulerCallLike }
  | { pallet: 'Democracy'; palletCall: PalletDemocracyCallLike }
  | { pallet: 'Preimage'; palletCall: PalletPreimageCallLike }
  | { pallet: 'ConvictionVoting'; palletCall: PalletConvictionVotingCallLike }
  | { pallet: 'Referenda'; palletCall: PalletReferendaCallLike }
  | { pallet: 'Whitelist'; palletCall: PalletWhitelistCallLike }
  | { pallet: 'CouncilCollective'; palletCall: PalletCollectiveCallLike }
  | { pallet: 'TechCommitteeCollective'; palletCall: PalletCollectiveCallLike }
  | { pallet: 'TreasuryCouncilCollective'; palletCall: PalletCollectiveCallLike }
  | { pallet: 'OpenTechCommitteeCollective'; palletCall: PalletCollectiveCallLike }
  | { pallet: 'Treasury'; palletCall: PalletTreasuryCallLike }
  | { pallet: 'CrowdloanRewards'; palletCall: PalletCrowdloanRewardsCallLike }
  | { pallet: 'DmpQueue'; palletCall: CumulusPalletDmpQueueCallLike }
  | { pallet: 'PolkadotXcm'; palletCall: PalletXcmCallLike }
  | { pallet: 'Assets'; palletCall: PalletAssetsCallLike }
  | { pallet: 'AssetManager'; palletCall: PalletAssetManagerCallLike }
  | { pallet: 'XTokens'; palletCall: OrmlXtokensModuleCallLike }
  | { pallet: 'XcmTransactor'; palletCall: PalletXcmTransactorCallLike }
  | { pallet: 'LocalAssets'; palletCall: PalletAssetsCallLike }
  | { pallet: 'EthereumXcm'; palletCall: PalletEthereumXcmCallLike }
  | { pallet: 'Randomness'; palletCall: PalletRandomnessCallLike };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type FrameSystemCall =
  /**
   * See [`Pallet::remark`].
   **/
  | { name: 'Remark'; params: { remark: Bytes } }
  /**
   * See [`Pallet::set_heap_pages`].
   **/
  | { name: 'SetHeapPages'; params: { pages: bigint } }
  /**
   * See [`Pallet::set_code`].
   **/
  | { name: 'SetCode'; params: { code: Bytes } }
  /**
   * See [`Pallet::set_code_without_checks`].
   **/
  | { name: 'SetCodeWithoutChecks'; params: { code: Bytes } }
  /**
   * See [`Pallet::set_storage`].
   **/
  | { name: 'SetStorage'; params: { items: Array<[Bytes, Bytes]> } }
  /**
   * See [`Pallet::kill_storage`].
   **/
  | { name: 'KillStorage'; params: { keys: Array<Bytes> } }
  /**
   * See [`Pallet::kill_prefix`].
   **/
  | { name: 'KillPrefix'; params: { prefix: Bytes; subkeys: number } }
  /**
   * See [`Pallet::remark_with_event`].
   **/
  | { name: 'RemarkWithEvent'; params: { remark: Bytes } };

export type FrameSystemCallLike =
  /**
   * See [`Pallet::remark`].
   **/
  | { name: 'Remark'; params: { remark: BytesLike } }
  /**
   * See [`Pallet::set_heap_pages`].
   **/
  | { name: 'SetHeapPages'; params: { pages: bigint } }
  /**
   * See [`Pallet::set_code`].
   **/
  | { name: 'SetCode'; params: { code: BytesLike } }
  /**
   * See [`Pallet::set_code_without_checks`].
   **/
  | { name: 'SetCodeWithoutChecks'; params: { code: BytesLike } }
  /**
   * See [`Pallet::set_storage`].
   **/
  | { name: 'SetStorage'; params: { items: Array<[BytesLike, BytesLike]> } }
  /**
   * See [`Pallet::kill_storage`].
   **/
  | { name: 'KillStorage'; params: { keys: Array<BytesLike> } }
  /**
   * See [`Pallet::kill_prefix`].
   **/
  | { name: 'KillPrefix'; params: { prefix: BytesLike; subkeys: number } }
  /**
   * See [`Pallet::remark_with_event`].
   **/
  | { name: 'RemarkWithEvent'; params: { remark: BytesLike } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type CumulusPalletParachainSystemCall =
  /**
   * See [`Pallet::set_validation_data`].
   **/
  | { name: 'SetValidationData'; params: { data: CumulusPrimitivesParachainInherentParachainInherentData } }
  /**
   * See [`Pallet::sudo_send_upward_message`].
   **/
  | { name: 'SudoSendUpwardMessage'; params: { message: Bytes } }
  /**
   * See [`Pallet::authorize_upgrade`].
   **/
  | { name: 'AuthorizeUpgrade'; params: { codeHash: H256; checkVersion: boolean } }
  /**
   * See [`Pallet::enact_authorized_upgrade`].
   **/
  | { name: 'EnactAuthorizedUpgrade'; params: { code: Bytes } };

export type CumulusPalletParachainSystemCallLike =
  /**
   * See [`Pallet::set_validation_data`].
   **/
  | { name: 'SetValidationData'; params: { data: CumulusPrimitivesParachainInherentParachainInherentData } }
  /**
   * See [`Pallet::sudo_send_upward_message`].
   **/
  | { name: 'SudoSendUpwardMessage'; params: { message: BytesLike } }
  /**
   * See [`Pallet::authorize_upgrade`].
   **/
  | { name: 'AuthorizeUpgrade'; params: { codeHash: H256; checkVersion: boolean } }
  /**
   * See [`Pallet::enact_authorized_upgrade`].
   **/
  | { name: 'EnactAuthorizedUpgrade'; params: { code: BytesLike } };

export type CumulusPrimitivesParachainInherentParachainInherentData = {
  validationData: PolkadotPrimitivesV6PersistedValidationData;
  relayChainState: SpTrieStorageProof;
  downwardMessages: Array<PolkadotCorePrimitivesInboundDownwardMessage>;
  horizontalMessages: Array<[PolkadotParachainPrimitivesPrimitivesId, Array<PolkadotCorePrimitivesInboundHrmpMessage>]>;
};

export type PolkadotPrimitivesV6PersistedValidationData = {
  parentHead: PolkadotParachainPrimitivesPrimitivesHeadData;
  relayParentNumber: number;
  relayParentStorageRoot: H256;
  maxPovSize: number;
};

export type PolkadotParachainPrimitivesPrimitivesHeadData = Bytes;

export type SpTrieStorageProof = { trieNodes: Array<Bytes> };

export type PolkadotCorePrimitivesInboundDownwardMessage = { sentAt: number; msg: Bytes };

export type PolkadotParachainPrimitivesPrimitivesId = number;

export type PolkadotCorePrimitivesInboundHrmpMessage = { sentAt: number; data: Bytes };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletTimestampCall =
  /**
   * See [`Pallet::set`].
   **/
  { name: 'Set'; params: { now: bigint } };

export type PalletTimestampCallLike =
  /**
   * See [`Pallet::set`].
   **/
  { name: 'Set'; params: { now: bigint } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletRootTestingCall =
  /**
   * See `Pallet::fill_block`.
   **/
  { name: 'FillBlock'; params: { ratio: Perbill } };

export type PalletRootTestingCallLike =
  /**
   * See `Pallet::fill_block`.
   **/
  { name: 'FillBlock'; params: { ratio: Perbill } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletBalancesCall =
  /**
   * See [`Pallet::transfer_allow_death`].
   **/
  | { name: 'TransferAllowDeath'; params: { dest: AccountId20; value: bigint } }
  /**
   * See [`Pallet::force_transfer`].
   **/
  | { name: 'ForceTransfer'; params: { source: AccountId20; dest: AccountId20; value: bigint } }
  /**
   * See [`Pallet::transfer_keep_alive`].
   **/
  | { name: 'TransferKeepAlive'; params: { dest: AccountId20; value: bigint } }
  /**
   * See [`Pallet::transfer_all`].
   **/
  | { name: 'TransferAll'; params: { dest: AccountId20; keepAlive: boolean } }
  /**
   * See [`Pallet::force_unreserve`].
   **/
  | { name: 'ForceUnreserve'; params: { who: AccountId20; amount: bigint } }
  /**
   * See [`Pallet::upgrade_accounts`].
   **/
  | { name: 'UpgradeAccounts'; params: { who: Array<AccountId20> } }
  /**
   * See [`Pallet::force_set_balance`].
   **/
  | { name: 'ForceSetBalance'; params: { who: AccountId20; newFree: bigint } };

export type PalletBalancesCallLike =
  /**
   * See [`Pallet::transfer_allow_death`].
   **/
  | { name: 'TransferAllowDeath'; params: { dest: AccountId20Like; value: bigint } }
  /**
   * See [`Pallet::force_transfer`].
   **/
  | { name: 'ForceTransfer'; params: { source: AccountId20Like; dest: AccountId20Like; value: bigint } }
  /**
   * See [`Pallet::transfer_keep_alive`].
   **/
  | { name: 'TransferKeepAlive'; params: { dest: AccountId20Like; value: bigint } }
  /**
   * See [`Pallet::transfer_all`].
   **/
  | { name: 'TransferAll'; params: { dest: AccountId20Like; keepAlive: boolean } }
  /**
   * See [`Pallet::force_unreserve`].
   **/
  | { name: 'ForceUnreserve'; params: { who: AccountId20Like; amount: bigint } }
  /**
   * See [`Pallet::upgrade_accounts`].
   **/
  | { name: 'UpgradeAccounts'; params: { who: Array<AccountId20Like> } }
  /**
   * See [`Pallet::force_set_balance`].
   **/
  | { name: 'ForceSetBalance'; params: { who: AccountId20Like; newFree: bigint } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletParachainStakingCall =
  /**
   * See [`Pallet::set_staking_expectations`].
   **/
  | { name: 'SetStakingExpectations'; params: { expectations: { min: bigint; ideal: bigint; max: bigint } } }
  /**
   * See [`Pallet::set_inflation`].
   **/
  | { name: 'SetInflation'; params: { schedule: { min: Perbill; ideal: Perbill; max: Perbill } } }
  /**
   * See [`Pallet::set_parachain_bond_account`].
   **/
  | { name: 'SetParachainBondAccount'; params: { new: AccountId20 } }
  /**
   * See [`Pallet::set_parachain_bond_reserve_percent`].
   **/
  | { name: 'SetParachainBondReservePercent'; params: { new: Percent } }
  /**
   * See [`Pallet::set_total_selected`].
   **/
  | { name: 'SetTotalSelected'; params: { new: number } }
  /**
   * See [`Pallet::set_collator_commission`].
   **/
  | { name: 'SetCollatorCommission'; params: { new: Perbill } }
  /**
   * See [`Pallet::set_blocks_per_round`].
   **/
  | { name: 'SetBlocksPerRound'; params: { new: number } }
  /**
   * See [`Pallet::join_candidates`].
   **/
  | { name: 'JoinCandidates'; params: { bond: bigint; candidateCount: number } }
  /**
   * See [`Pallet::schedule_leave_candidates`].
   **/
  | { name: 'ScheduleLeaveCandidates'; params: { candidateCount: number } }
  /**
   * See [`Pallet::execute_leave_candidates`].
   **/
  | { name: 'ExecuteLeaveCandidates'; params: { candidate: AccountId20; candidateDelegationCount: number } }
  /**
   * See [`Pallet::cancel_leave_candidates`].
   **/
  | { name: 'CancelLeaveCandidates'; params: { candidateCount: number } }
  /**
   * See [`Pallet::go_offline`].
   **/
  | { name: 'GoOffline' }
  /**
   * See [`Pallet::go_online`].
   **/
  | { name: 'GoOnline' }
  /**
   * See [`Pallet::candidate_bond_more`].
   **/
  | { name: 'CandidateBondMore'; params: { more: bigint } }
  /**
   * See [`Pallet::schedule_candidate_bond_less`].
   **/
  | { name: 'ScheduleCandidateBondLess'; params: { less: bigint } }
  /**
   * See [`Pallet::execute_candidate_bond_less`].
   **/
  | { name: 'ExecuteCandidateBondLess'; params: { candidate: AccountId20 } }
  /**
   * See [`Pallet::cancel_candidate_bond_less`].
   **/
  | { name: 'CancelCandidateBondLess' }
  /**
   * See [`Pallet::delegate`].
   **/
  | {
      name: 'Delegate';
      params: { candidate: AccountId20; amount: bigint; candidateDelegationCount: number; delegationCount: number };
    }
  /**
   * See [`Pallet::delegate_with_auto_compound`].
   **/
  | {
      name: 'DelegateWithAutoCompound';
      params: {
        candidate: AccountId20;
        amount: bigint;
        autoCompound: Percent;
        candidateDelegationCount: number;
        candidateAutoCompoundingDelegationCount: number;
        delegationCount: number;
      };
    }
  /**
   * See [`Pallet::removed_call_19`].
   **/
  | { name: 'RemovedCall19' }
  /**
   * See [`Pallet::removed_call_20`].
   **/
  | { name: 'RemovedCall20' }
  /**
   * See [`Pallet::removed_call_21`].
   **/
  | { name: 'RemovedCall21' }
  /**
   * See [`Pallet::schedule_revoke_delegation`].
   **/
  | { name: 'ScheduleRevokeDelegation'; params: { collator: AccountId20 } }
  /**
   * See [`Pallet::delegator_bond_more`].
   **/
  | { name: 'DelegatorBondMore'; params: { candidate: AccountId20; more: bigint } }
  /**
   * See [`Pallet::schedule_delegator_bond_less`].
   **/
  | { name: 'ScheduleDelegatorBondLess'; params: { candidate: AccountId20; less: bigint } }
  /**
   * See [`Pallet::execute_delegation_request`].
   **/
  | { name: 'ExecuteDelegationRequest'; params: { delegator: AccountId20; candidate: AccountId20 } }
  /**
   * See [`Pallet::cancel_delegation_request`].
   **/
  | { name: 'CancelDelegationRequest'; params: { candidate: AccountId20 } }
  /**
   * See [`Pallet::set_auto_compound`].
   **/
  | {
      name: 'SetAutoCompound';
      params: {
        candidate: AccountId20;
        value: Percent;
        candidateAutoCompoundingDelegationCountHint: number;
        delegationCountHint: number;
      };
    }
  /**
   * See [`Pallet::hotfix_remove_delegation_requests_exited_candidates`].
   **/
  | { name: 'HotfixRemoveDelegationRequestsExitedCandidates'; params: { candidates: Array<AccountId20> } }
  /**
   * See [`Pallet::notify_inactive_collator`].
   **/
  | { name: 'NotifyInactiveCollator'; params: { collator: AccountId20 } }
  /**
   * See [`Pallet::enable_marking_offline`].
   **/
  | { name: 'EnableMarkingOffline'; params: { value: boolean } }
  /**
   * See [`Pallet::force_join_candidates`].
   **/
  | { name: 'ForceJoinCandidates'; params: { account: AccountId20; bond: bigint; candidateCount: number } };

export type PalletParachainStakingCallLike =
  /**
   * See [`Pallet::set_staking_expectations`].
   **/
  | { name: 'SetStakingExpectations'; params: { expectations: { min: bigint; ideal: bigint; max: bigint } } }
  /**
   * See [`Pallet::set_inflation`].
   **/
  | { name: 'SetInflation'; params: { schedule: { min: Perbill; ideal: Perbill; max: Perbill } } }
  /**
   * See [`Pallet::set_parachain_bond_account`].
   **/
  | { name: 'SetParachainBondAccount'; params: { new: AccountId20Like } }
  /**
   * See [`Pallet::set_parachain_bond_reserve_percent`].
   **/
  | { name: 'SetParachainBondReservePercent'; params: { new: Percent } }
  /**
   * See [`Pallet::set_total_selected`].
   **/
  | { name: 'SetTotalSelected'; params: { new: number } }
  /**
   * See [`Pallet::set_collator_commission`].
   **/
  | { name: 'SetCollatorCommission'; params: { new: Perbill } }
  /**
   * See [`Pallet::set_blocks_per_round`].
   **/
  | { name: 'SetBlocksPerRound'; params: { new: number } }
  /**
   * See [`Pallet::join_candidates`].
   **/
  | { name: 'JoinCandidates'; params: { bond: bigint; candidateCount: number } }
  /**
   * See [`Pallet::schedule_leave_candidates`].
   **/
  | { name: 'ScheduleLeaveCandidates'; params: { candidateCount: number } }
  /**
   * See [`Pallet::execute_leave_candidates`].
   **/
  | { name: 'ExecuteLeaveCandidates'; params: { candidate: AccountId20Like; candidateDelegationCount: number } }
  /**
   * See [`Pallet::cancel_leave_candidates`].
   **/
  | { name: 'CancelLeaveCandidates'; params: { candidateCount: number } }
  /**
   * See [`Pallet::go_offline`].
   **/
  | { name: 'GoOffline' }
  /**
   * See [`Pallet::go_online`].
   **/
  | { name: 'GoOnline' }
  /**
   * See [`Pallet::candidate_bond_more`].
   **/
  | { name: 'CandidateBondMore'; params: { more: bigint } }
  /**
   * See [`Pallet::schedule_candidate_bond_less`].
   **/
  | { name: 'ScheduleCandidateBondLess'; params: { less: bigint } }
  /**
   * See [`Pallet::execute_candidate_bond_less`].
   **/
  | { name: 'ExecuteCandidateBondLess'; params: { candidate: AccountId20Like } }
  /**
   * See [`Pallet::cancel_candidate_bond_less`].
   **/
  | { name: 'CancelCandidateBondLess' }
  /**
   * See [`Pallet::delegate`].
   **/
  | {
      name: 'Delegate';
      params: { candidate: AccountId20Like; amount: bigint; candidateDelegationCount: number; delegationCount: number };
    }
  /**
   * See [`Pallet::delegate_with_auto_compound`].
   **/
  | {
      name: 'DelegateWithAutoCompound';
      params: {
        candidate: AccountId20Like;
        amount: bigint;
        autoCompound: Percent;
        candidateDelegationCount: number;
        candidateAutoCompoundingDelegationCount: number;
        delegationCount: number;
      };
    }
  /**
   * See [`Pallet::removed_call_19`].
   **/
  | { name: 'RemovedCall19' }
  /**
   * See [`Pallet::removed_call_20`].
   **/
  | { name: 'RemovedCall20' }
  /**
   * See [`Pallet::removed_call_21`].
   **/
  | { name: 'RemovedCall21' }
  /**
   * See [`Pallet::schedule_revoke_delegation`].
   **/
  | { name: 'ScheduleRevokeDelegation'; params: { collator: AccountId20Like } }
  /**
   * See [`Pallet::delegator_bond_more`].
   **/
  | { name: 'DelegatorBondMore'; params: { candidate: AccountId20Like; more: bigint } }
  /**
   * See [`Pallet::schedule_delegator_bond_less`].
   **/
  | { name: 'ScheduleDelegatorBondLess'; params: { candidate: AccountId20Like; less: bigint } }
  /**
   * See [`Pallet::execute_delegation_request`].
   **/
  | { name: 'ExecuteDelegationRequest'; params: { delegator: AccountId20Like; candidate: AccountId20Like } }
  /**
   * See [`Pallet::cancel_delegation_request`].
   **/
  | { name: 'CancelDelegationRequest'; params: { candidate: AccountId20Like } }
  /**
   * See [`Pallet::set_auto_compound`].
   **/
  | {
      name: 'SetAutoCompound';
      params: {
        candidate: AccountId20Like;
        value: Percent;
        candidateAutoCompoundingDelegationCountHint: number;
        delegationCountHint: number;
      };
    }
  /**
   * See [`Pallet::hotfix_remove_delegation_requests_exited_candidates`].
   **/
  | { name: 'HotfixRemoveDelegationRequestsExitedCandidates'; params: { candidates: Array<AccountId20Like> } }
  /**
   * See [`Pallet::notify_inactive_collator`].
   **/
  | { name: 'NotifyInactiveCollator'; params: { collator: AccountId20Like } }
  /**
   * See [`Pallet::enable_marking_offline`].
   **/
  | { name: 'EnableMarkingOffline'; params: { value: boolean } }
  /**
   * See [`Pallet::force_join_candidates`].
   **/
  | { name: 'ForceJoinCandidates'; params: { account: AccountId20Like; bond: bigint; candidateCount: number } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletAuthorInherentCall =
  /**
   * See [`Pallet::kick_off_authorship_validation`].
   **/
  'KickOffAuthorshipValidation';

export type PalletAuthorInherentCallLike =
  /**
   * See [`Pallet::kick_off_authorship_validation`].
   **/
  'KickOffAuthorshipValidation';

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletAuthorSlotFilterCall =
  /**
   * See [`Pallet::set_eligible`].
   **/
  { name: 'SetEligible'; params: { new: PalletAuthorSlotFilterNumNonZeroU32 } };

export type PalletAuthorSlotFilterCallLike =
  /**
   * See [`Pallet::set_eligible`].
   **/
  { name: 'SetEligible'; params: { new: PalletAuthorSlotFilterNumNonZeroU32 } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletAuthorMappingCall =
  /**
   * See [`Pallet::add_association`].
   **/
  | { name: 'AddAssociation'; params: { nimbusId: NimbusPrimitivesNimbusCryptoPublic } }
  /**
   * See [`Pallet::update_association`].
   **/
  | {
      name: 'UpdateAssociation';
      params: { oldNimbusId: NimbusPrimitivesNimbusCryptoPublic; newNimbusId: NimbusPrimitivesNimbusCryptoPublic };
    }
  /**
   * See [`Pallet::clear_association`].
   **/
  | { name: 'ClearAssociation'; params: { nimbusId: NimbusPrimitivesNimbusCryptoPublic } }
  /**
   * See [`Pallet::remove_keys`].
   **/
  | { name: 'RemoveKeys' }
  /**
   * See [`Pallet::set_keys`].
   **/
  | { name: 'SetKeys'; params: { keys: Bytes } };

export type PalletAuthorMappingCallLike =
  /**
   * See [`Pallet::add_association`].
   **/
  | { name: 'AddAssociation'; params: { nimbusId: NimbusPrimitivesNimbusCryptoPublic } }
  /**
   * See [`Pallet::update_association`].
   **/
  | {
      name: 'UpdateAssociation';
      params: { oldNimbusId: NimbusPrimitivesNimbusCryptoPublic; newNimbusId: NimbusPrimitivesNimbusCryptoPublic };
    }
  /**
   * See [`Pallet::clear_association`].
   **/
  | { name: 'ClearAssociation'; params: { nimbusId: NimbusPrimitivesNimbusCryptoPublic } }
  /**
   * See [`Pallet::remove_keys`].
   **/
  | { name: 'RemoveKeys' }
  /**
   * See [`Pallet::set_keys`].
   **/
  | { name: 'SetKeys'; params: { keys: BytesLike } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletMoonbeamOrbitersCall =
  /**
   * See [`Pallet::collator_add_orbiter`].
   **/
  | { name: 'CollatorAddOrbiter'; params: { orbiter: AccountId20 } }
  /**
   * See [`Pallet::collator_remove_orbiter`].
   **/
  | { name: 'CollatorRemoveOrbiter'; params: { orbiter: AccountId20 } }
  /**
   * See [`Pallet::orbiter_leave_collator_pool`].
   **/
  | { name: 'OrbiterLeaveCollatorPool'; params: { collator: AccountId20 } }
  /**
   * See [`Pallet::orbiter_register`].
   **/
  | { name: 'OrbiterRegister' }
  /**
   * See [`Pallet::orbiter_unregister`].
   **/
  | { name: 'OrbiterUnregister'; params: { collatorsPoolCount: number } }
  /**
   * See [`Pallet::add_collator`].
   **/
  | { name: 'AddCollator'; params: { collator: AccountId20 } }
  /**
   * See [`Pallet::remove_collator`].
   **/
  | { name: 'RemoveCollator'; params: { collator: AccountId20 } };

export type PalletMoonbeamOrbitersCallLike =
  /**
   * See [`Pallet::collator_add_orbiter`].
   **/
  | { name: 'CollatorAddOrbiter'; params: { orbiter: AccountId20Like } }
  /**
   * See [`Pallet::collator_remove_orbiter`].
   **/
  | { name: 'CollatorRemoveOrbiter'; params: { orbiter: AccountId20Like } }
  /**
   * See [`Pallet::orbiter_leave_collator_pool`].
   **/
  | { name: 'OrbiterLeaveCollatorPool'; params: { collator: AccountId20Like } }
  /**
   * See [`Pallet::orbiter_register`].
   **/
  | { name: 'OrbiterRegister' }
  /**
   * See [`Pallet::orbiter_unregister`].
   **/
  | { name: 'OrbiterUnregister'; params: { collatorsPoolCount: number } }
  /**
   * See [`Pallet::add_collator`].
   **/
  | { name: 'AddCollator'; params: { collator: AccountId20Like } }
  /**
   * See [`Pallet::remove_collator`].
   **/
  | { name: 'RemoveCollator'; params: { collator: AccountId20Like } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletUtilityCall =
  /**
   * See [`Pallet::batch`].
   **/
  | { name: 'Batch'; params: { calls: Array<MoonbeamRuntimeRuntimeCall> } }
  /**
   * See [`Pallet::as_derivative`].
   **/
  | { name: 'AsDerivative'; params: { index: number; call: MoonbeamRuntimeRuntimeCall } }
  /**
   * See [`Pallet::batch_all`].
   **/
  | { name: 'BatchAll'; params: { calls: Array<MoonbeamRuntimeRuntimeCall> } }
  /**
   * See [`Pallet::dispatch_as`].
   **/
  | { name: 'DispatchAs'; params: { asOrigin: MoonbeamRuntimeOriginCaller; call: MoonbeamRuntimeRuntimeCall } }
  /**
   * See [`Pallet::force_batch`].
   **/
  | { name: 'ForceBatch'; params: { calls: Array<MoonbeamRuntimeRuntimeCall> } }
  /**
   * See [`Pallet::with_weight`].
   **/
  | { name: 'WithWeight'; params: { call: MoonbeamRuntimeRuntimeCall; weight: SpWeightsWeightV2Weight } };

export type PalletUtilityCallLike =
  /**
   * See [`Pallet::batch`].
   **/
  | { name: 'Batch'; params: { calls: Array<MoonbeamRuntimeRuntimeCallLike> } }
  /**
   * See [`Pallet::as_derivative`].
   **/
  | { name: 'AsDerivative'; params: { index: number; call: MoonbeamRuntimeRuntimeCallLike } }
  /**
   * See [`Pallet::batch_all`].
   **/
  | { name: 'BatchAll'; params: { calls: Array<MoonbeamRuntimeRuntimeCallLike> } }
  /**
   * See [`Pallet::dispatch_as`].
   **/
  | { name: 'DispatchAs'; params: { asOrigin: MoonbeamRuntimeOriginCaller; call: MoonbeamRuntimeRuntimeCallLike } }
  /**
   * See [`Pallet::force_batch`].
   **/
  | { name: 'ForceBatch'; params: { calls: Array<MoonbeamRuntimeRuntimeCallLike> } }
  /**
   * See [`Pallet::with_weight`].
   **/
  | { name: 'WithWeight'; params: { call: MoonbeamRuntimeRuntimeCallLike; weight: SpWeightsWeightV2Weight } };

export type MoonbeamRuntimeOriginCaller =
  | { tag: 'System'; value: FrameSupportDispatchRawOrigin }
  | { tag: 'Ethereum'; value: PalletEthereumRawOrigin }
  | { tag: 'Origins'; value: MoonbeamRuntimeGovernanceOriginsCustomOriginsOrigin }
  | { tag: 'CouncilCollective'; value: PalletCollectiveRawOrigin }
  | { tag: 'TechCommitteeCollective'; value: PalletCollectiveRawOrigin }
  | { tag: 'TreasuryCouncilCollective'; value: PalletCollectiveRawOrigin }
  | { tag: 'OpenTechCommitteeCollective'; value: PalletCollectiveRawOrigin }
  | { tag: 'CumulusXcm'; value: CumulusPalletXcmOrigin }
  | { tag: 'PolkadotXcm'; value: PalletXcmOrigin }
  | { tag: 'EthereumXcm'; value: PalletEthereumXcmRawOrigin }
  | { tag: 'Void'; value: SpCoreVoid };

export type FrameSupportDispatchRawOrigin = { tag: 'Root' } | { tag: 'Signed'; value: AccountId20 } | { tag: 'None' };

export type PalletEthereumRawOrigin = { tag: 'EthereumTransaction'; value: H160 };

export type MoonbeamRuntimeGovernanceOriginsCustomOriginsOrigin =
  | 'WhitelistedCaller'
  | 'GeneralAdmin'
  | 'ReferendumCanceller'
  | 'ReferendumKiller';

export type PalletCollectiveRawOrigin =
  | { tag: 'Members'; value: [number, number] }
  | { tag: 'Member'; value: AccountId20 }
  | { tag: 'Phantom' };

export type CumulusPalletXcmOrigin =
  | { tag: 'Relay' }
  | { tag: 'SiblingParachain'; value: PolkadotParachainPrimitivesPrimitivesId };

export type PalletXcmOrigin =
  | { tag: 'Xcm'; value: StagingXcmV3MultilocationMultiLocation }
  | { tag: 'Response'; value: StagingXcmV3MultilocationMultiLocation };

export type StagingXcmV3MultilocationMultiLocation = { parents: number; interior: XcmV3Junctions };

export type XcmV3Junctions =
  | { tag: 'Here' }
  | { tag: 'X1'; value: XcmV3Junction }
  | { tag: 'X2'; value: [XcmV3Junction, XcmV3Junction] }
  | { tag: 'X3'; value: [XcmV3Junction, XcmV3Junction, XcmV3Junction] }
  | { tag: 'X4'; value: [XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction] }
  | { tag: 'X5'; value: [XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction] }
  | { tag: 'X6'; value: [XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction] }
  | {
      tag: 'X7';
      value: [XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction];
    }
  | {
      tag: 'X8';
      value: [
        XcmV3Junction,
        XcmV3Junction,
        XcmV3Junction,
        XcmV3Junction,
        XcmV3Junction,
        XcmV3Junction,
        XcmV3Junction,
        XcmV3Junction,
      ];
    };

export type XcmV3Junction =
  | { tag: 'Parachain'; value: number }
  | { tag: 'AccountId32'; value: { network?: XcmV3JunctionNetworkId | undefined; id: FixedBytes<32> } }
  | { tag: 'AccountIndex64'; value: { network?: XcmV3JunctionNetworkId | undefined; index: bigint } }
  | { tag: 'AccountKey20'; value: { network?: XcmV3JunctionNetworkId | undefined; key: FixedBytes<20> } }
  | { tag: 'PalletInstance'; value: number }
  | { tag: 'GeneralIndex'; value: bigint }
  | { tag: 'GeneralKey'; value: { length: number; data: FixedBytes<32> } }
  | { tag: 'OnlyChild' }
  | { tag: 'Plurality'; value: { id: XcmV3JunctionBodyId; part: XcmV3JunctionBodyPart } }
  | { tag: 'GlobalConsensus'; value: XcmV3JunctionNetworkId };

export type XcmV3JunctionNetworkId =
  | { tag: 'ByGenesis'; value: FixedBytes<32> }
  | { tag: 'ByFork'; value: { blockNumber: bigint; blockHash: FixedBytes<32> } }
  | { tag: 'Polkadot' }
  | { tag: 'Kusama' }
  | { tag: 'Westend' }
  | { tag: 'Rococo' }
  | { tag: 'Wococo' }
  | { tag: 'Ethereum'; value: { chainId: bigint } }
  | { tag: 'BitcoinCore' }
  | { tag: 'BitcoinCash' };

export type XcmV3JunctionBodyId =
  | { tag: 'Unit' }
  | { tag: 'Moniker'; value: FixedBytes<4> }
  | { tag: 'Index'; value: number }
  | { tag: 'Executive' }
  | { tag: 'Technical' }
  | { tag: 'Legislative' }
  | { tag: 'Judicial' }
  | { tag: 'Defense' }
  | { tag: 'Administration' }
  | { tag: 'Treasury' };

export type XcmV3JunctionBodyPart =
  | { tag: 'Voice' }
  | { tag: 'Members'; value: { count: number } }
  | { tag: 'Fraction'; value: { nom: number; denom: number } }
  | { tag: 'AtLeastProportion'; value: { nom: number; denom: number } }
  | { tag: 'MoreThanProportion'; value: { nom: number; denom: number } };

export type PalletEthereumXcmRawOrigin = { tag: 'XcmEthereumTransaction'; value: H160 };

export type SpCoreVoid = null;

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletProxyCall =
  /**
   * See [`Pallet::proxy`].
   **/
  | {
      name: 'Proxy';
      params: {
        real: AccountId20;
        forceProxyType?: MoonbeamRuntimeProxyType | undefined;
        call: MoonbeamRuntimeRuntimeCall;
      };
    }
  /**
   * See [`Pallet::add_proxy`].
   **/
  | { name: 'AddProxy'; params: { delegate: AccountId20; proxyType: MoonbeamRuntimeProxyType; delay: number } }
  /**
   * See [`Pallet::remove_proxy`].
   **/
  | { name: 'RemoveProxy'; params: { delegate: AccountId20; proxyType: MoonbeamRuntimeProxyType; delay: number } }
  /**
   * See [`Pallet::remove_proxies`].
   **/
  | { name: 'RemoveProxies' }
  /**
   * See [`Pallet::create_pure`].
   **/
  | { name: 'CreatePure'; params: { proxyType: MoonbeamRuntimeProxyType; delay: number; index: number } }
  /**
   * See [`Pallet::kill_pure`].
   **/
  | {
      name: 'KillPure';
      params: {
        spawner: AccountId20;
        proxyType: MoonbeamRuntimeProxyType;
        index: number;
        height: number;
        extIndex: number;
      };
    }
  /**
   * See [`Pallet::announce`].
   **/
  | { name: 'Announce'; params: { real: AccountId20; callHash: H256 } }
  /**
   * See [`Pallet::remove_announcement`].
   **/
  | { name: 'RemoveAnnouncement'; params: { real: AccountId20; callHash: H256 } }
  /**
   * See [`Pallet::reject_announcement`].
   **/
  | { name: 'RejectAnnouncement'; params: { delegate: AccountId20; callHash: H256 } }
  /**
   * See [`Pallet::proxy_announced`].
   **/
  | {
      name: 'ProxyAnnounced';
      params: {
        delegate: AccountId20;
        real: AccountId20;
        forceProxyType?: MoonbeamRuntimeProxyType | undefined;
        call: MoonbeamRuntimeRuntimeCall;
      };
    };

export type PalletProxyCallLike =
  /**
   * See [`Pallet::proxy`].
   **/
  | {
      name: 'Proxy';
      params: {
        real: AccountId20Like;
        forceProxyType?: MoonbeamRuntimeProxyType | undefined;
        call: MoonbeamRuntimeRuntimeCallLike;
      };
    }
  /**
   * See [`Pallet::add_proxy`].
   **/
  | { name: 'AddProxy'; params: { delegate: AccountId20Like; proxyType: MoonbeamRuntimeProxyType; delay: number } }
  /**
   * See [`Pallet::remove_proxy`].
   **/
  | { name: 'RemoveProxy'; params: { delegate: AccountId20Like; proxyType: MoonbeamRuntimeProxyType; delay: number } }
  /**
   * See [`Pallet::remove_proxies`].
   **/
  | { name: 'RemoveProxies' }
  /**
   * See [`Pallet::create_pure`].
   **/
  | { name: 'CreatePure'; params: { proxyType: MoonbeamRuntimeProxyType; delay: number; index: number } }
  /**
   * See [`Pallet::kill_pure`].
   **/
  | {
      name: 'KillPure';
      params: {
        spawner: AccountId20Like;
        proxyType: MoonbeamRuntimeProxyType;
        index: number;
        height: number;
        extIndex: number;
      };
    }
  /**
   * See [`Pallet::announce`].
   **/
  | { name: 'Announce'; params: { real: AccountId20Like; callHash: H256 } }
  /**
   * See [`Pallet::remove_announcement`].
   **/
  | { name: 'RemoveAnnouncement'; params: { real: AccountId20Like; callHash: H256 } }
  /**
   * See [`Pallet::reject_announcement`].
   **/
  | { name: 'RejectAnnouncement'; params: { delegate: AccountId20Like; callHash: H256 } }
  /**
   * See [`Pallet::proxy_announced`].
   **/
  | {
      name: 'ProxyAnnounced';
      params: {
        delegate: AccountId20Like;
        real: AccountId20Like;
        forceProxyType?: MoonbeamRuntimeProxyType | undefined;
        call: MoonbeamRuntimeRuntimeCallLike;
      };
    };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletMaintenanceModeCall =
  /**
   * See [`Pallet::enter_maintenance_mode`].
   **/
  | 'EnterMaintenanceMode'
  /**
   * See [`Pallet::resume_normal_operation`].
   **/
  | 'ResumeNormalOperation';

export type PalletMaintenanceModeCallLike =
  /**
   * See [`Pallet::enter_maintenance_mode`].
   **/
  | 'EnterMaintenanceMode'
  /**
   * See [`Pallet::resume_normal_operation`].
   **/
  | 'ResumeNormalOperation';

/**
 * Identity pallet declaration.
 **/
export type PalletIdentityCall =
  /**
   * See [`Pallet::add_registrar`].
   **/
  | { name: 'AddRegistrar'; params: { account: AccountId20 } }
  /**
   * See [`Pallet::set_identity`].
   **/
  | { name: 'SetIdentity'; params: { info: PalletIdentitySimpleIdentityInfo } }
  /**
   * See [`Pallet::set_subs`].
   **/
  | { name: 'SetSubs'; params: { subs: Array<[AccountId20, Data]> } }
  /**
   * See [`Pallet::clear_identity`].
   **/
  | { name: 'ClearIdentity' }
  /**
   * See [`Pallet::request_judgement`].
   **/
  | { name: 'RequestJudgement'; params: { regIndex: number; maxFee: bigint } }
  /**
   * See [`Pallet::cancel_request`].
   **/
  | { name: 'CancelRequest'; params: { regIndex: number } }
  /**
   * See [`Pallet::set_fee`].
   **/
  | { name: 'SetFee'; params: { index: number; fee: bigint } }
  /**
   * See [`Pallet::set_account_id`].
   **/
  | { name: 'SetAccountId'; params: { index: number; new: AccountId20 } }
  /**
   * See [`Pallet::set_fields`].
   **/
  | { name: 'SetFields'; params: { index: number; fields: PalletIdentityBitFlags } }
  /**
   * See [`Pallet::provide_judgement`].
   **/
  | {
      name: 'ProvideJudgement';
      params: { regIndex: number; target: AccountId20; judgement: PalletIdentityJudgement; identity: H256 };
    }
  /**
   * See [`Pallet::kill_identity`].
   **/
  | { name: 'KillIdentity'; params: { target: AccountId20 } }
  /**
   * See [`Pallet::add_sub`].
   **/
  | { name: 'AddSub'; params: { sub: AccountId20; data: Data } }
  /**
   * See [`Pallet::rename_sub`].
   **/
  | { name: 'RenameSub'; params: { sub: AccountId20; data: Data } }
  /**
   * See [`Pallet::remove_sub`].
   **/
  | { name: 'RemoveSub'; params: { sub: AccountId20 } }
  /**
   * See [`Pallet::quit_sub`].
   **/
  | { name: 'QuitSub' };

export type PalletIdentityCallLike =
  /**
   * See [`Pallet::add_registrar`].
   **/
  | { name: 'AddRegistrar'; params: { account: AccountId20Like } }
  /**
   * See [`Pallet::set_identity`].
   **/
  | { name: 'SetIdentity'; params: { info: PalletIdentitySimpleIdentityInfo } }
  /**
   * See [`Pallet::set_subs`].
   **/
  | { name: 'SetSubs'; params: { subs: Array<[AccountId20Like, Data]> } }
  /**
   * See [`Pallet::clear_identity`].
   **/
  | { name: 'ClearIdentity' }
  /**
   * See [`Pallet::request_judgement`].
   **/
  | { name: 'RequestJudgement'; params: { regIndex: number; maxFee: bigint } }
  /**
   * See [`Pallet::cancel_request`].
   **/
  | { name: 'CancelRequest'; params: { regIndex: number } }
  /**
   * See [`Pallet::set_fee`].
   **/
  | { name: 'SetFee'; params: { index: number; fee: bigint } }
  /**
   * See [`Pallet::set_account_id`].
   **/
  | { name: 'SetAccountId'; params: { index: number; new: AccountId20Like } }
  /**
   * See [`Pallet::set_fields`].
   **/
  | { name: 'SetFields'; params: { index: number; fields: PalletIdentityBitFlags } }
  /**
   * See [`Pallet::provide_judgement`].
   **/
  | {
      name: 'ProvideJudgement';
      params: { regIndex: number; target: AccountId20Like; judgement: PalletIdentityJudgement; identity: H256 };
    }
  /**
   * See [`Pallet::kill_identity`].
   **/
  | { name: 'KillIdentity'; params: { target: AccountId20Like } }
  /**
   * See [`Pallet::add_sub`].
   **/
  | { name: 'AddSub'; params: { sub: AccountId20Like; data: Data } }
  /**
   * See [`Pallet::rename_sub`].
   **/
  | { name: 'RenameSub'; params: { sub: AccountId20Like; data: Data } }
  /**
   * See [`Pallet::remove_sub`].
   **/
  | { name: 'RemoveSub'; params: { sub: AccountId20Like } }
  /**
   * See [`Pallet::quit_sub`].
   **/
  | { name: 'QuitSub' };

export type PalletIdentitySimpleIdentityInfo = {
  additional: Array<[Data, Data]>;
  display: Data;
  legal: Data;
  web: Data;
  riot: Data;
  email: Data;
  pgpFingerprint?: FixedBytes<20> | undefined;
  image: Data;
  twitter: Data;
};

export type PalletIdentityBitFlags = bigint;

export type PalletIdentitySimpleIdentityField =
  | 'Display'
  | 'Legal'
  | 'Web'
  | 'Riot'
  | 'Email'
  | 'PgpFingerprint'
  | 'Image'
  | 'Twitter';

export type PalletIdentityJudgement =
  | { tag: 'Unknown' }
  | { tag: 'FeePaid'; value: bigint }
  | { tag: 'Reasonable' }
  | { tag: 'KnownGood' }
  | { tag: 'OutOfDate' }
  | { tag: 'LowQuality' }
  | { tag: 'Erroneous' };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletMultisigCall =
  /**
   * See [`Pallet::as_multi_threshold_1`].
   **/
  | { name: 'AsMultiThreshold1'; params: { otherSignatories: Array<AccountId20>; call: MoonbeamRuntimeRuntimeCall } }
  /**
   * See [`Pallet::as_multi`].
   **/
  | {
      name: 'AsMulti';
      params: {
        threshold: number;
        otherSignatories: Array<AccountId20>;
        maybeTimepoint?: PalletMultisigTimepoint | undefined;
        call: MoonbeamRuntimeRuntimeCall;
        maxWeight: SpWeightsWeightV2Weight;
      };
    }
  /**
   * See [`Pallet::approve_as_multi`].
   **/
  | {
      name: 'ApproveAsMulti';
      params: {
        threshold: number;
        otherSignatories: Array<AccountId20>;
        maybeTimepoint?: PalletMultisigTimepoint | undefined;
        callHash: FixedBytes<32>;
        maxWeight: SpWeightsWeightV2Weight;
      };
    }
  /**
   * See [`Pallet::cancel_as_multi`].
   **/
  | {
      name: 'CancelAsMulti';
      params: {
        threshold: number;
        otherSignatories: Array<AccountId20>;
        timepoint: PalletMultisigTimepoint;
        callHash: FixedBytes<32>;
      };
    };

export type PalletMultisigCallLike =
  /**
   * See [`Pallet::as_multi_threshold_1`].
   **/
  | {
      name: 'AsMultiThreshold1';
      params: { otherSignatories: Array<AccountId20Like>; call: MoonbeamRuntimeRuntimeCallLike };
    }
  /**
   * See [`Pallet::as_multi`].
   **/
  | {
      name: 'AsMulti';
      params: {
        threshold: number;
        otherSignatories: Array<AccountId20Like>;
        maybeTimepoint?: PalletMultisigTimepoint | undefined;
        call: MoonbeamRuntimeRuntimeCallLike;
        maxWeight: SpWeightsWeightV2Weight;
      };
    }
  /**
   * See [`Pallet::approve_as_multi`].
   **/
  | {
      name: 'ApproveAsMulti';
      params: {
        threshold: number;
        otherSignatories: Array<AccountId20Like>;
        maybeTimepoint?: PalletMultisigTimepoint | undefined;
        callHash: FixedBytes<32>;
        maxWeight: SpWeightsWeightV2Weight;
      };
    }
  /**
   * See [`Pallet::cancel_as_multi`].
   **/
  | {
      name: 'CancelAsMulti';
      params: {
        threshold: number;
        otherSignatories: Array<AccountId20Like>;
        timepoint: PalletMultisigTimepoint;
        callHash: FixedBytes<32>;
      };
    };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletEvmCall =
  /**
   * See [`Pallet::withdraw`].
   **/
  | { name: 'Withdraw'; params: { address: H160; value: bigint } }
  /**
   * See [`Pallet::call`].
   **/
  | {
      name: 'Call';
      params: {
        source: H160;
        target: H160;
        input: Bytes;
        value: U256;
        gasLimit: bigint;
        maxFeePerGas: U256;
        maxPriorityFeePerGas?: U256 | undefined;
        nonce?: U256 | undefined;
        accessList: Array<[H160, Array<H256>]>;
      };
    }
  /**
   * See [`Pallet::create`].
   **/
  | {
      name: 'Create';
      params: {
        source: H160;
        init: Bytes;
        value: U256;
        gasLimit: bigint;
        maxFeePerGas: U256;
        maxPriorityFeePerGas?: U256 | undefined;
        nonce?: U256 | undefined;
        accessList: Array<[H160, Array<H256>]>;
      };
    }
  /**
   * See [`Pallet::create2`].
   **/
  | {
      name: 'Create2';
      params: {
        source: H160;
        init: Bytes;
        salt: H256;
        value: U256;
        gasLimit: bigint;
        maxFeePerGas: U256;
        maxPriorityFeePerGas?: U256 | undefined;
        nonce?: U256 | undefined;
        accessList: Array<[H160, Array<H256>]>;
      };
    };

export type PalletEvmCallLike =
  /**
   * See [`Pallet::withdraw`].
   **/
  | { name: 'Withdraw'; params: { address: H160; value: bigint } }
  /**
   * See [`Pallet::call`].
   **/
  | {
      name: 'Call';
      params: {
        source: H160;
        target: H160;
        input: BytesLike;
        value: U256;
        gasLimit: bigint;
        maxFeePerGas: U256;
        maxPriorityFeePerGas?: U256 | undefined;
        nonce?: U256 | undefined;
        accessList: Array<[H160, Array<H256>]>;
      };
    }
  /**
   * See [`Pallet::create`].
   **/
  | {
      name: 'Create';
      params: {
        source: H160;
        init: BytesLike;
        value: U256;
        gasLimit: bigint;
        maxFeePerGas: U256;
        maxPriorityFeePerGas?: U256 | undefined;
        nonce?: U256 | undefined;
        accessList: Array<[H160, Array<H256>]>;
      };
    }
  /**
   * See [`Pallet::create2`].
   **/
  | {
      name: 'Create2';
      params: {
        source: H160;
        init: BytesLike;
        salt: H256;
        value: U256;
        gasLimit: bigint;
        maxFeePerGas: U256;
        maxPriorityFeePerGas?: U256 | undefined;
        nonce?: U256 | undefined;
        accessList: Array<[H160, Array<H256>]>;
      };
    };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletEthereumCall =
  /**
   * See [`Pallet::transact`].
   **/
  { name: 'Transact'; params: { transaction: EthereumTransactionTransactionV2 } };

export type PalletEthereumCallLike =
  /**
   * See [`Pallet::transact`].
   **/
  { name: 'Transact'; params: { transaction: EthereumTransactionTransactionV2 } };

export type EthereumTransactionTransactionV2 =
  | { tag: 'Legacy'; value: EthereumTransactionLegacyTransaction }
  | { tag: 'Eip2930'; value: EthereumTransactionEip2930Transaction }
  | { tag: 'Eip1559'; value: EthereumTransactionEip1559Transaction };

export type EthereumTransactionLegacyTransaction = {
  nonce: U256;
  gasPrice: U256;
  gasLimit: U256;
  action: EthereumTransactionTransactionAction;
  value: U256;
  input: Bytes;
  signature: EthereumTransactionTransactionSignature;
};

export type EthereumTransactionTransactionAction = { tag: 'Call'; value: H160 } | { tag: 'Create' };

export type EthereumTransactionTransactionSignature = { v: EthereumTransactionTransactionRecoveryId; r: H256; s: H256 };

export type EthereumTransactionTransactionRecoveryId = bigint;

export type EthereumTransactionEip2930Transaction = {
  chainId: bigint;
  nonce: U256;
  gasPrice: U256;
  gasLimit: U256;
  action: EthereumTransactionTransactionAction;
  value: U256;
  input: Bytes;
  accessList: Array<EthereumTransactionAccessListItem>;
  oddYParity: boolean;
  r: H256;
  s: H256;
};

export type EthereumTransactionAccessListItem = { address: H160; storageKeys: Array<H256> };

export type EthereumTransactionEip1559Transaction = {
  chainId: bigint;
  nonce: U256;
  maxPriorityFeePerGas: U256;
  maxFeePerGas: U256;
  gasLimit: U256;
  action: EthereumTransactionTransactionAction;
  value: U256;
  input: Bytes;
  accessList: Array<EthereumTransactionAccessListItem>;
  oddYParity: boolean;
  r: H256;
  s: H256;
};

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletSchedulerCall =
  /**
   * See [`Pallet::schedule`].
   **/
  | {
      name: 'Schedule';
      params: {
        when: number;
        maybePeriodic?: [number, number] | undefined;
        priority: number;
        call: MoonbeamRuntimeRuntimeCall;
      };
    }
  /**
   * See [`Pallet::cancel`].
   **/
  | { name: 'Cancel'; params: { when: number; index: number } }
  /**
   * See [`Pallet::schedule_named`].
   **/
  | {
      name: 'ScheduleNamed';
      params: {
        id: FixedBytes<32>;
        when: number;
        maybePeriodic?: [number, number] | undefined;
        priority: number;
        call: MoonbeamRuntimeRuntimeCall;
      };
    }
  /**
   * See [`Pallet::cancel_named`].
   **/
  | { name: 'CancelNamed'; params: { id: FixedBytes<32> } }
  /**
   * See [`Pallet::schedule_after`].
   **/
  | {
      name: 'ScheduleAfter';
      params: {
        after: number;
        maybePeriodic?: [number, number] | undefined;
        priority: number;
        call: MoonbeamRuntimeRuntimeCall;
      };
    }
  /**
   * See [`Pallet::schedule_named_after`].
   **/
  | {
      name: 'ScheduleNamedAfter';
      params: {
        id: FixedBytes<32>;
        after: number;
        maybePeriodic?: [number, number] | undefined;
        priority: number;
        call: MoonbeamRuntimeRuntimeCall;
      };
    };

export type PalletSchedulerCallLike =
  /**
   * See [`Pallet::schedule`].
   **/
  | {
      name: 'Schedule';
      params: {
        when: number;
        maybePeriodic?: [number, number] | undefined;
        priority: number;
        call: MoonbeamRuntimeRuntimeCallLike;
      };
    }
  /**
   * See [`Pallet::cancel`].
   **/
  | { name: 'Cancel'; params: { when: number; index: number } }
  /**
   * See [`Pallet::schedule_named`].
   **/
  | {
      name: 'ScheduleNamed';
      params: {
        id: FixedBytes<32>;
        when: number;
        maybePeriodic?: [number, number] | undefined;
        priority: number;
        call: MoonbeamRuntimeRuntimeCallLike;
      };
    }
  /**
   * See [`Pallet::cancel_named`].
   **/
  | { name: 'CancelNamed'; params: { id: FixedBytes<32> } }
  /**
   * See [`Pallet::schedule_after`].
   **/
  | {
      name: 'ScheduleAfter';
      params: {
        after: number;
        maybePeriodic?: [number, number] | undefined;
        priority: number;
        call: MoonbeamRuntimeRuntimeCallLike;
      };
    }
  /**
   * See [`Pallet::schedule_named_after`].
   **/
  | {
      name: 'ScheduleNamedAfter';
      params: {
        id: FixedBytes<32>;
        after: number;
        maybePeriodic?: [number, number] | undefined;
        priority: number;
        call: MoonbeamRuntimeRuntimeCallLike;
      };
    };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletDemocracyCall =
  /**
   * See [`Pallet::propose`].
   **/
  | { name: 'Propose'; params: { proposal: FrameSupportPreimagesBounded; value: bigint } }
  /**
   * See [`Pallet::second`].
   **/
  | { name: 'Second'; params: { proposal: number } }
  /**
   * See [`Pallet::vote`].
   **/
  | { name: 'Vote'; params: { refIndex: number; vote: PalletDemocracyVoteAccountVote } }
  /**
   * See [`Pallet::emergency_cancel`].
   **/
  | { name: 'EmergencyCancel'; params: { refIndex: number } }
  /**
   * See [`Pallet::external_propose`].
   **/
  | { name: 'ExternalPropose'; params: { proposal: FrameSupportPreimagesBounded } }
  /**
   * See [`Pallet::external_propose_majority`].
   **/
  | { name: 'ExternalProposeMajority'; params: { proposal: FrameSupportPreimagesBounded } }
  /**
   * See [`Pallet::external_propose_default`].
   **/
  | { name: 'ExternalProposeDefault'; params: { proposal: FrameSupportPreimagesBounded } }
  /**
   * See [`Pallet::fast_track`].
   **/
  | { name: 'FastTrack'; params: { proposalHash: H256; votingPeriod: number; delay: number } }
  /**
   * See [`Pallet::veto_external`].
   **/
  | { name: 'VetoExternal'; params: { proposalHash: H256 } }
  /**
   * See [`Pallet::cancel_referendum`].
   **/
  | { name: 'CancelReferendum'; params: { refIndex: number } }
  /**
   * See [`Pallet::delegate`].
   **/
  | { name: 'Delegate'; params: { to: AccountId20; conviction: PalletDemocracyConviction; balance: bigint } }
  /**
   * See [`Pallet::undelegate`].
   **/
  | { name: 'Undelegate' }
  /**
   * See [`Pallet::clear_public_proposals`].
   **/
  | { name: 'ClearPublicProposals' }
  /**
   * See [`Pallet::unlock`].
   **/
  | { name: 'Unlock'; params: { target: AccountId20 } }
  /**
   * See [`Pallet::remove_vote`].
   **/
  | { name: 'RemoveVote'; params: { index: number } }
  /**
   * See [`Pallet::remove_other_vote`].
   **/
  | { name: 'RemoveOtherVote'; params: { target: AccountId20; index: number } }
  /**
   * See [`Pallet::blacklist`].
   **/
  | { name: 'Blacklist'; params: { proposalHash: H256; maybeRefIndex?: number | undefined } }
  /**
   * See [`Pallet::cancel_proposal`].
   **/
  | { name: 'CancelProposal'; params: { propIndex: number } }
  /**
   * See [`Pallet::set_metadata`].
   **/
  | { name: 'SetMetadata'; params: { owner: PalletDemocracyMetadataOwner; maybeHash?: H256 | undefined } };

export type PalletDemocracyCallLike =
  /**
   * See [`Pallet::propose`].
   **/
  | { name: 'Propose'; params: { proposal: FrameSupportPreimagesBounded; value: bigint } }
  /**
   * See [`Pallet::second`].
   **/
  | { name: 'Second'; params: { proposal: number } }
  /**
   * See [`Pallet::vote`].
   **/
  | { name: 'Vote'; params: { refIndex: number; vote: PalletDemocracyVoteAccountVote } }
  /**
   * See [`Pallet::emergency_cancel`].
   **/
  | { name: 'EmergencyCancel'; params: { refIndex: number } }
  /**
   * See [`Pallet::external_propose`].
   **/
  | { name: 'ExternalPropose'; params: { proposal: FrameSupportPreimagesBounded } }
  /**
   * See [`Pallet::external_propose_majority`].
   **/
  | { name: 'ExternalProposeMajority'; params: { proposal: FrameSupportPreimagesBounded } }
  /**
   * See [`Pallet::external_propose_default`].
   **/
  | { name: 'ExternalProposeDefault'; params: { proposal: FrameSupportPreimagesBounded } }
  /**
   * See [`Pallet::fast_track`].
   **/
  | { name: 'FastTrack'; params: { proposalHash: H256; votingPeriod: number; delay: number } }
  /**
   * See [`Pallet::veto_external`].
   **/
  | { name: 'VetoExternal'; params: { proposalHash: H256 } }
  /**
   * See [`Pallet::cancel_referendum`].
   **/
  | { name: 'CancelReferendum'; params: { refIndex: number } }
  /**
   * See [`Pallet::delegate`].
   **/
  | { name: 'Delegate'; params: { to: AccountId20Like; conviction: PalletDemocracyConviction; balance: bigint } }
  /**
   * See [`Pallet::undelegate`].
   **/
  | { name: 'Undelegate' }
  /**
   * See [`Pallet::clear_public_proposals`].
   **/
  | { name: 'ClearPublicProposals' }
  /**
   * See [`Pallet::unlock`].
   **/
  | { name: 'Unlock'; params: { target: AccountId20Like } }
  /**
   * See [`Pallet::remove_vote`].
   **/
  | { name: 'RemoveVote'; params: { index: number } }
  /**
   * See [`Pallet::remove_other_vote`].
   **/
  | { name: 'RemoveOtherVote'; params: { target: AccountId20Like; index: number } }
  /**
   * See [`Pallet::blacklist`].
   **/
  | { name: 'Blacklist'; params: { proposalHash: H256; maybeRefIndex?: number | undefined } }
  /**
   * See [`Pallet::cancel_proposal`].
   **/
  | { name: 'CancelProposal'; params: { propIndex: number } }
  /**
   * See [`Pallet::set_metadata`].
   **/
  | { name: 'SetMetadata'; params: { owner: PalletDemocracyMetadataOwner; maybeHash?: H256 | undefined } };

export type PalletDemocracyConviction =
  | 'None'
  | 'Locked1x'
  | 'Locked2x'
  | 'Locked3x'
  | 'Locked4x'
  | 'Locked5x'
  | 'Locked6x';

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletPreimageCall =
  /**
   * See [`Pallet::note_preimage`].
   **/
  | { name: 'NotePreimage'; params: { bytes: Bytes } }
  /**
   * See [`Pallet::unnote_preimage`].
   **/
  | { name: 'UnnotePreimage'; params: { hash: H256 } }
  /**
   * See [`Pallet::request_preimage`].
   **/
  | { name: 'RequestPreimage'; params: { hash: H256 } }
  /**
   * See [`Pallet::unrequest_preimage`].
   **/
  | { name: 'UnrequestPreimage'; params: { hash: H256 } }
  /**
   * See [`Pallet::ensure_updated`].
   **/
  | { name: 'EnsureUpdated'; params: { hashes: Array<H256> } };

export type PalletPreimageCallLike =
  /**
   * See [`Pallet::note_preimage`].
   **/
  | { name: 'NotePreimage'; params: { bytes: BytesLike } }
  /**
   * See [`Pallet::unnote_preimage`].
   **/
  | { name: 'UnnotePreimage'; params: { hash: H256 } }
  /**
   * See [`Pallet::request_preimage`].
   **/
  | { name: 'RequestPreimage'; params: { hash: H256 } }
  /**
   * See [`Pallet::unrequest_preimage`].
   **/
  | { name: 'UnrequestPreimage'; params: { hash: H256 } }
  /**
   * See [`Pallet::ensure_updated`].
   **/
  | { name: 'EnsureUpdated'; params: { hashes: Array<H256> } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletConvictionVotingCall =
  /**
   * See [`Pallet::vote`].
   **/
  | { name: 'Vote'; params: { pollIndex: number; vote: PalletConvictionVotingVoteAccountVote } }
  /**
   * See [`Pallet::delegate`].
   **/
  | {
      name: 'Delegate';
      params: { class: number; to: AccountId20; conviction: PalletConvictionVotingConviction; balance: bigint };
    }
  /**
   * See [`Pallet::undelegate`].
   **/
  | { name: 'Undelegate'; params: { class: number } }
  /**
   * See [`Pallet::unlock`].
   **/
  | { name: 'Unlock'; params: { class: number; target: AccountId20 } }
  /**
   * See [`Pallet::remove_vote`].
   **/
  | { name: 'RemoveVote'; params: { class?: number | undefined; index: number } }
  /**
   * See [`Pallet::remove_other_vote`].
   **/
  | { name: 'RemoveOtherVote'; params: { target: AccountId20; class: number; index: number } };

export type PalletConvictionVotingCallLike =
  /**
   * See [`Pallet::vote`].
   **/
  | { name: 'Vote'; params: { pollIndex: number; vote: PalletConvictionVotingVoteAccountVote } }
  /**
   * See [`Pallet::delegate`].
   **/
  | {
      name: 'Delegate';
      params: { class: number; to: AccountId20Like; conviction: PalletConvictionVotingConviction; balance: bigint };
    }
  /**
   * See [`Pallet::undelegate`].
   **/
  | { name: 'Undelegate'; params: { class: number } }
  /**
   * See [`Pallet::unlock`].
   **/
  | { name: 'Unlock'; params: { class: number; target: AccountId20Like } }
  /**
   * See [`Pallet::remove_vote`].
   **/
  | { name: 'RemoveVote'; params: { class?: number | undefined; index: number } }
  /**
   * See [`Pallet::remove_other_vote`].
   **/
  | { name: 'RemoveOtherVote'; params: { target: AccountId20Like; class: number; index: number } };

export type PalletConvictionVotingVoteAccountVote =
  | { tag: 'Standard'; value: { vote: PalletConvictionVotingVote; balance: bigint } }
  | { tag: 'Split'; value: { aye: bigint; nay: bigint } }
  | { tag: 'SplitAbstain'; value: { aye: bigint; nay: bigint; abstain: bigint } };

export type PalletConvictionVotingVote = number;

export type PalletConvictionVotingConviction =
  | 'None'
  | 'Locked1x'
  | 'Locked2x'
  | 'Locked3x'
  | 'Locked4x'
  | 'Locked5x'
  | 'Locked6x';

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletReferendaCall =
  /**
   * See [`Pallet::submit`].
   **/
  | {
      name: 'Submit';
      params: {
        proposalOrigin: MoonbeamRuntimeOriginCaller;
        proposal: FrameSupportPreimagesBounded;
        enactmentMoment: FrameSupportScheduleDispatchTime;
      };
    }
  /**
   * See [`Pallet::place_decision_deposit`].
   **/
  | { name: 'PlaceDecisionDeposit'; params: { index: number } }
  /**
   * See [`Pallet::refund_decision_deposit`].
   **/
  | { name: 'RefundDecisionDeposit'; params: { index: number } }
  /**
   * See [`Pallet::cancel`].
   **/
  | { name: 'Cancel'; params: { index: number } }
  /**
   * See [`Pallet::kill`].
   **/
  | { name: 'Kill'; params: { index: number } }
  /**
   * See [`Pallet::nudge_referendum`].
   **/
  | { name: 'NudgeReferendum'; params: { index: number } }
  /**
   * See [`Pallet::one_fewer_deciding`].
   **/
  | { name: 'OneFewerDeciding'; params: { track: number } }
  /**
   * See [`Pallet::refund_submission_deposit`].
   **/
  | { name: 'RefundSubmissionDeposit'; params: { index: number } }
  /**
   * See [`Pallet::set_metadata`].
   **/
  | { name: 'SetMetadata'; params: { index: number; maybeHash?: H256 | undefined } };

export type PalletReferendaCallLike =
  /**
   * See [`Pallet::submit`].
   **/
  | {
      name: 'Submit';
      params: {
        proposalOrigin: MoonbeamRuntimeOriginCaller;
        proposal: FrameSupportPreimagesBounded;
        enactmentMoment: FrameSupportScheduleDispatchTime;
      };
    }
  /**
   * See [`Pallet::place_decision_deposit`].
   **/
  | { name: 'PlaceDecisionDeposit'; params: { index: number } }
  /**
   * See [`Pallet::refund_decision_deposit`].
   **/
  | { name: 'RefundDecisionDeposit'; params: { index: number } }
  /**
   * See [`Pallet::cancel`].
   **/
  | { name: 'Cancel'; params: { index: number } }
  /**
   * See [`Pallet::kill`].
   **/
  | { name: 'Kill'; params: { index: number } }
  /**
   * See [`Pallet::nudge_referendum`].
   **/
  | { name: 'NudgeReferendum'; params: { index: number } }
  /**
   * See [`Pallet::one_fewer_deciding`].
   **/
  | { name: 'OneFewerDeciding'; params: { track: number } }
  /**
   * See [`Pallet::refund_submission_deposit`].
   **/
  | { name: 'RefundSubmissionDeposit'; params: { index: number } }
  /**
   * See [`Pallet::set_metadata`].
   **/
  | { name: 'SetMetadata'; params: { index: number; maybeHash?: H256 | undefined } };

export type FrameSupportScheduleDispatchTime = { tag: 'At'; value: number } | { tag: 'After'; value: number };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletWhitelistCall =
  /**
   * See [`Pallet::whitelist_call`].
   **/
  | { name: 'WhitelistCall'; params: { callHash: H256 } }
  /**
   * See [`Pallet::remove_whitelisted_call`].
   **/
  | { name: 'RemoveWhitelistedCall'; params: { callHash: H256 } }
  /**
   * See [`Pallet::dispatch_whitelisted_call`].
   **/
  | {
      name: 'DispatchWhitelistedCall';
      params: { callHash: H256; callEncodedLen: number; callWeightWitness: SpWeightsWeightV2Weight };
    }
  /**
   * See [`Pallet::dispatch_whitelisted_call_with_preimage`].
   **/
  | { name: 'DispatchWhitelistedCallWithPreimage'; params: { call: MoonbeamRuntimeRuntimeCall } };

export type PalletWhitelistCallLike =
  /**
   * See [`Pallet::whitelist_call`].
   **/
  | { name: 'WhitelistCall'; params: { callHash: H256 } }
  /**
   * See [`Pallet::remove_whitelisted_call`].
   **/
  | { name: 'RemoveWhitelistedCall'; params: { callHash: H256 } }
  /**
   * See [`Pallet::dispatch_whitelisted_call`].
   **/
  | {
      name: 'DispatchWhitelistedCall';
      params: { callHash: H256; callEncodedLen: number; callWeightWitness: SpWeightsWeightV2Weight };
    }
  /**
   * See [`Pallet::dispatch_whitelisted_call_with_preimage`].
   **/
  | { name: 'DispatchWhitelistedCallWithPreimage'; params: { call: MoonbeamRuntimeRuntimeCallLike } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletCollectiveCall =
  /**
   * See [`Pallet::set_members`].
   **/
  | {
      name: 'SetMembers';
      params: { newMembers: Array<AccountId20>; prime?: AccountId20 | undefined; oldCount: number };
    }
  /**
   * See [`Pallet::execute`].
   **/
  | { name: 'Execute'; params: { proposal: MoonbeamRuntimeRuntimeCall; lengthBound: number } }
  /**
   * See [`Pallet::propose`].
   **/
  | { name: 'Propose'; params: { threshold: number; proposal: MoonbeamRuntimeRuntimeCall; lengthBound: number } }
  /**
   * See [`Pallet::vote`].
   **/
  | { name: 'Vote'; params: { proposal: H256; index: number; approve: boolean } }
  /**
   * See [`Pallet::disapprove_proposal`].
   **/
  | { name: 'DisapproveProposal'; params: { proposalHash: H256 } }
  /**
   * See [`Pallet::close`].
   **/
  | {
      name: 'Close';
      params: { proposalHash: H256; index: number; proposalWeightBound: SpWeightsWeightV2Weight; lengthBound: number };
    };

export type PalletCollectiveCallLike =
  /**
   * See [`Pallet::set_members`].
   **/
  | {
      name: 'SetMembers';
      params: { newMembers: Array<AccountId20Like>; prime?: AccountId20Like | undefined; oldCount: number };
    }
  /**
   * See [`Pallet::execute`].
   **/
  | { name: 'Execute'; params: { proposal: MoonbeamRuntimeRuntimeCallLike; lengthBound: number } }
  /**
   * See [`Pallet::propose`].
   **/
  | { name: 'Propose'; params: { threshold: number; proposal: MoonbeamRuntimeRuntimeCallLike; lengthBound: number } }
  /**
   * See [`Pallet::vote`].
   **/
  | { name: 'Vote'; params: { proposal: H256; index: number; approve: boolean } }
  /**
   * See [`Pallet::disapprove_proposal`].
   **/
  | { name: 'DisapproveProposal'; params: { proposalHash: H256 } }
  /**
   * See [`Pallet::close`].
   **/
  | {
      name: 'Close';
      params: { proposalHash: H256; index: number; proposalWeightBound: SpWeightsWeightV2Weight; lengthBound: number };
    };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletTreasuryCall =
  /**
   * See [`Pallet::propose_spend`].
   **/
  | { name: 'ProposeSpend'; params: { value: bigint; beneficiary: AccountId20 } }
  /**
   * See [`Pallet::reject_proposal`].
   **/
  | { name: 'RejectProposal'; params: { proposalId: number } }
  /**
   * See [`Pallet::approve_proposal`].
   **/
  | { name: 'ApproveProposal'; params: { proposalId: number } }
  /**
   * See [`Pallet::spend_local`].
   **/
  | { name: 'SpendLocal'; params: { amount: bigint; beneficiary: AccountId20 } }
  /**
   * See [`Pallet::remove_approval`].
   **/
  | { name: 'RemoveApproval'; params: { proposalId: number } }
  /**
   * See [`Pallet::spend`].
   **/
  | {
      name: 'Spend';
      params: { assetKind: []; amount: bigint; beneficiary: AccountId20; validFrom?: number | undefined };
    }
  /**
   * See [`Pallet::payout`].
   **/
  | { name: 'Payout'; params: { index: number } }
  /**
   * See [`Pallet::check_status`].
   **/
  | { name: 'CheckStatus'; params: { index: number } }
  /**
   * See [`Pallet::void_spend`].
   **/
  | { name: 'VoidSpend'; params: { index: number } };

export type PalletTreasuryCallLike =
  /**
   * See [`Pallet::propose_spend`].
   **/
  | { name: 'ProposeSpend'; params: { value: bigint; beneficiary: AccountId20Like } }
  /**
   * See [`Pallet::reject_proposal`].
   **/
  | { name: 'RejectProposal'; params: { proposalId: number } }
  /**
   * See [`Pallet::approve_proposal`].
   **/
  | { name: 'ApproveProposal'; params: { proposalId: number } }
  /**
   * See [`Pallet::spend_local`].
   **/
  | { name: 'SpendLocal'; params: { amount: bigint; beneficiary: AccountId20Like } }
  /**
   * See [`Pallet::remove_approval`].
   **/
  | { name: 'RemoveApproval'; params: { proposalId: number } }
  /**
   * See [`Pallet::spend`].
   **/
  | {
      name: 'Spend';
      params: { assetKind: []; amount: bigint; beneficiary: AccountId20Like; validFrom?: number | undefined };
    }
  /**
   * See [`Pallet::payout`].
   **/
  | { name: 'Payout'; params: { index: number } }
  /**
   * See [`Pallet::check_status`].
   **/
  | { name: 'CheckStatus'; params: { index: number } }
  /**
   * See [`Pallet::void_spend`].
   **/
  | { name: 'VoidSpend'; params: { index: number } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletCrowdloanRewardsCall =
  /**
   * See [`Pallet::associate_native_identity`].
   **/
  | {
      name: 'AssociateNativeIdentity';
      params: { rewardAccount: AccountId20; relayAccount: FixedBytes<32>; proof: SpRuntimeMultiSignature };
    }
  /**
   * See [`Pallet::change_association_with_relay_keys`].
   **/
  | {
      name: 'ChangeAssociationWithRelayKeys';
      params: {
        rewardAccount: AccountId20;
        previousAccount: AccountId20;
        proofs: Array<[FixedBytes<32>, SpRuntimeMultiSignature]>;
      };
    }
  /**
   * See [`Pallet::claim`].
   **/
  | { name: 'Claim' }
  /**
   * See [`Pallet::update_reward_address`].
   **/
  | { name: 'UpdateRewardAddress'; params: { newRewardAccount: AccountId20 } }
  /**
   * See [`Pallet::complete_initialization`].
   **/
  | { name: 'CompleteInitialization'; params: { leaseEndingBlock: number } }
  /**
   * See [`Pallet::initialize_reward_vec`].
   **/
  | { name: 'InitializeRewardVec'; params: { rewards: Array<[FixedBytes<32>, AccountId20 | undefined, bigint]> } };

export type PalletCrowdloanRewardsCallLike =
  /**
   * See [`Pallet::associate_native_identity`].
   **/
  | {
      name: 'AssociateNativeIdentity';
      params: { rewardAccount: AccountId20Like; relayAccount: FixedBytes<32>; proof: SpRuntimeMultiSignature };
    }
  /**
   * See [`Pallet::change_association_with_relay_keys`].
   **/
  | {
      name: 'ChangeAssociationWithRelayKeys';
      params: {
        rewardAccount: AccountId20Like;
        previousAccount: AccountId20Like;
        proofs: Array<[FixedBytes<32>, SpRuntimeMultiSignature]>;
      };
    }
  /**
   * See [`Pallet::claim`].
   **/
  | { name: 'Claim' }
  /**
   * See [`Pallet::update_reward_address`].
   **/
  | { name: 'UpdateRewardAddress'; params: { newRewardAccount: AccountId20Like } }
  /**
   * See [`Pallet::complete_initialization`].
   **/
  | { name: 'CompleteInitialization'; params: { leaseEndingBlock: number } }
  /**
   * See [`Pallet::initialize_reward_vec`].
   **/
  | { name: 'InitializeRewardVec'; params: { rewards: Array<[FixedBytes<32>, AccountId20Like | undefined, bigint]> } };

export type SpRuntimeMultiSignature =
  | { tag: 'Ed25519'; value: SpCoreEd25519Signature }
  | { tag: 'Sr25519'; value: SpCoreSr25519Signature }
  | { tag: 'Ecdsa'; value: SpCoreEcdsaSignature };

export type SpCoreEd25519Signature = FixedBytes<64>;

export type SpCoreSr25519Signature = FixedBytes<64>;

export type SpCoreEcdsaSignature = FixedBytes<65>;

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type CumulusPalletDmpQueueCall =
  /**
   * See [`Pallet::service_overweight`].
   **/
  { name: 'ServiceOverweight'; params: { index: bigint; weightLimit: SpWeightsWeightV2Weight } };

export type CumulusPalletDmpQueueCallLike =
  /**
   * See [`Pallet::service_overweight`].
   **/
  { name: 'ServiceOverweight'; params: { index: bigint; weightLimit: SpWeightsWeightV2Weight } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletXcmCall =
  /**
   * See [`Pallet::send`].
   **/
  | { name: 'Send'; params: { dest: XcmVersionedMultiLocation; message: XcmVersionedXcm } }
  /**
   * See [`Pallet::teleport_assets`].
   **/
  | {
      name: 'TeleportAssets';
      params: {
        dest: XcmVersionedMultiLocation;
        beneficiary: XcmVersionedMultiLocation;
        assets: XcmVersionedMultiAssets;
        feeAssetItem: number;
      };
    }
  /**
   * See [`Pallet::reserve_transfer_assets`].
   **/
  | {
      name: 'ReserveTransferAssets';
      params: {
        dest: XcmVersionedMultiLocation;
        beneficiary: XcmVersionedMultiLocation;
        assets: XcmVersionedMultiAssets;
        feeAssetItem: number;
      };
    }
  /**
   * See [`Pallet::execute`].
   **/
  | { name: 'Execute'; params: { message: XcmVersionedXcm; maxWeight: SpWeightsWeightV2Weight } }
  /**
   * See [`Pallet::force_xcm_version`].
   **/
  | { name: 'ForceXcmVersion'; params: { location: StagingXcmV3MultilocationMultiLocation; version: number } }
  /**
   * See [`Pallet::force_default_xcm_version`].
   **/
  | { name: 'ForceDefaultXcmVersion'; params: { maybeXcmVersion?: number | undefined } }
  /**
   * See [`Pallet::force_subscribe_version_notify`].
   **/
  | { name: 'ForceSubscribeVersionNotify'; params: { location: XcmVersionedMultiLocation } }
  /**
   * See [`Pallet::force_unsubscribe_version_notify`].
   **/
  | { name: 'ForceUnsubscribeVersionNotify'; params: { location: XcmVersionedMultiLocation } }
  /**
   * See [`Pallet::limited_reserve_transfer_assets`].
   **/
  | {
      name: 'LimitedReserveTransferAssets';
      params: {
        dest: XcmVersionedMultiLocation;
        beneficiary: XcmVersionedMultiLocation;
        assets: XcmVersionedMultiAssets;
        feeAssetItem: number;
        weightLimit: XcmV3WeightLimit;
      };
    }
  /**
   * See [`Pallet::limited_teleport_assets`].
   **/
  | {
      name: 'LimitedTeleportAssets';
      params: {
        dest: XcmVersionedMultiLocation;
        beneficiary: XcmVersionedMultiLocation;
        assets: XcmVersionedMultiAssets;
        feeAssetItem: number;
        weightLimit: XcmV3WeightLimit;
      };
    }
  /**
   * See [`Pallet::force_suspension`].
   **/
  | { name: 'ForceSuspension'; params: { suspended: boolean } };

export type PalletXcmCallLike =
  /**
   * See [`Pallet::send`].
   **/
  | { name: 'Send'; params: { dest: XcmVersionedMultiLocation; message: XcmVersionedXcm } }
  /**
   * See [`Pallet::teleport_assets`].
   **/
  | {
      name: 'TeleportAssets';
      params: {
        dest: XcmVersionedMultiLocation;
        beneficiary: XcmVersionedMultiLocation;
        assets: XcmVersionedMultiAssets;
        feeAssetItem: number;
      };
    }
  /**
   * See [`Pallet::reserve_transfer_assets`].
   **/
  | {
      name: 'ReserveTransferAssets';
      params: {
        dest: XcmVersionedMultiLocation;
        beneficiary: XcmVersionedMultiLocation;
        assets: XcmVersionedMultiAssets;
        feeAssetItem: number;
      };
    }
  /**
   * See [`Pallet::execute`].
   **/
  | { name: 'Execute'; params: { message: XcmVersionedXcm; maxWeight: SpWeightsWeightV2Weight } }
  /**
   * See [`Pallet::force_xcm_version`].
   **/
  | { name: 'ForceXcmVersion'; params: { location: StagingXcmV3MultilocationMultiLocation; version: number } }
  /**
   * See [`Pallet::force_default_xcm_version`].
   **/
  | { name: 'ForceDefaultXcmVersion'; params: { maybeXcmVersion?: number | undefined } }
  /**
   * See [`Pallet::force_subscribe_version_notify`].
   **/
  | { name: 'ForceSubscribeVersionNotify'; params: { location: XcmVersionedMultiLocation } }
  /**
   * See [`Pallet::force_unsubscribe_version_notify`].
   **/
  | { name: 'ForceUnsubscribeVersionNotify'; params: { location: XcmVersionedMultiLocation } }
  /**
   * See [`Pallet::limited_reserve_transfer_assets`].
   **/
  | {
      name: 'LimitedReserveTransferAssets';
      params: {
        dest: XcmVersionedMultiLocation;
        beneficiary: XcmVersionedMultiLocation;
        assets: XcmVersionedMultiAssets;
        feeAssetItem: number;
        weightLimit: XcmV3WeightLimit;
      };
    }
  /**
   * See [`Pallet::limited_teleport_assets`].
   **/
  | {
      name: 'LimitedTeleportAssets';
      params: {
        dest: XcmVersionedMultiLocation;
        beneficiary: XcmVersionedMultiLocation;
        assets: XcmVersionedMultiAssets;
        feeAssetItem: number;
        weightLimit: XcmV3WeightLimit;
      };
    }
  /**
   * See [`Pallet::force_suspension`].
   **/
  | { name: 'ForceSuspension'; params: { suspended: boolean } };

export type XcmVersionedMultiLocation =
  | { tag: 'V2'; value: XcmV2MultilocationMultiLocation }
  | { tag: 'V3'; value: StagingXcmV3MultilocationMultiLocation };

export type XcmV2MultilocationMultiLocation = { parents: number; interior: XcmV2MultilocationJunctions };

export type XcmV2MultilocationJunctions =
  | { tag: 'Here' }
  | { tag: 'X1'; value: XcmV2Junction }
  | { tag: 'X2'; value: [XcmV2Junction, XcmV2Junction] }
  | { tag: 'X3'; value: [XcmV2Junction, XcmV2Junction, XcmV2Junction] }
  | { tag: 'X4'; value: [XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction] }
  | { tag: 'X5'; value: [XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction] }
  | { tag: 'X6'; value: [XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction] }
  | {
      tag: 'X7';
      value: [XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction];
    }
  | {
      tag: 'X8';
      value: [
        XcmV2Junction,
        XcmV2Junction,
        XcmV2Junction,
        XcmV2Junction,
        XcmV2Junction,
        XcmV2Junction,
        XcmV2Junction,
        XcmV2Junction,
      ];
    };

export type XcmV2Junction =
  | { tag: 'Parachain'; value: number }
  | { tag: 'AccountId32'; value: { network: XcmV2NetworkId; id: FixedBytes<32> } }
  | { tag: 'AccountIndex64'; value: { network: XcmV2NetworkId; index: bigint } }
  | { tag: 'AccountKey20'; value: { network: XcmV2NetworkId; key: FixedBytes<20> } }
  | { tag: 'PalletInstance'; value: number }
  | { tag: 'GeneralIndex'; value: bigint }
  | { tag: 'GeneralKey'; value: Bytes }
  | { tag: 'OnlyChild' }
  | { tag: 'Plurality'; value: { id: XcmV2BodyId; part: XcmV2BodyPart } };

export type XcmV2NetworkId = { tag: 'Any' } | { tag: 'Named'; value: Bytes } | { tag: 'Polkadot' } | { tag: 'Kusama' };

export type XcmV2BodyId =
  | { tag: 'Unit' }
  | { tag: 'Named'; value: Bytes }
  | { tag: 'Index'; value: number }
  | { tag: 'Executive' }
  | { tag: 'Technical' }
  | { tag: 'Legislative' }
  | { tag: 'Judicial' }
  | { tag: 'Defense' }
  | { tag: 'Administration' }
  | { tag: 'Treasury' };

export type XcmV2BodyPart =
  | { tag: 'Voice' }
  | { tag: 'Members'; value: { count: number } }
  | { tag: 'Fraction'; value: { nom: number; denom: number } }
  | { tag: 'AtLeastProportion'; value: { nom: number; denom: number } }
  | { tag: 'MoreThanProportion'; value: { nom: number; denom: number } };

export type XcmVersionedXcm = { tag: 'V2'; value: XcmV2Xcm } | { tag: 'V3'; value: XcmV3Xcm };

export type XcmV2Xcm = Array<XcmV2Instruction>;

export type XcmV2Instruction =
  | { tag: 'WithdrawAsset'; value: XcmV2MultiassetMultiAssets }
  | { tag: 'ReserveAssetDeposited'; value: XcmV2MultiassetMultiAssets }
  | { tag: 'ReceiveTeleportedAsset'; value: XcmV2MultiassetMultiAssets }
  | { tag: 'QueryResponse'; value: { queryId: bigint; response: XcmV2Response; maxWeight: bigint } }
  | {
      tag: 'TransferAsset';
      value: { assets: XcmV2MultiassetMultiAssets; beneficiary: XcmV2MultilocationMultiLocation };
    }
  | {
      tag: 'TransferReserveAsset';
      value: { assets: XcmV2MultiassetMultiAssets; dest: XcmV2MultilocationMultiLocation; xcm: XcmV2Xcm };
    }
  | { tag: 'Transact'; value: { originType: XcmV2OriginKind; requireWeightAtMost: bigint; call: XcmDoubleEncoded } }
  | { tag: 'HrmpNewChannelOpenRequest'; value: { sender: number; maxMessageSize: number; maxCapacity: number } }
  | { tag: 'HrmpChannelAccepted'; value: { recipient: number } }
  | { tag: 'HrmpChannelClosing'; value: { initiator: number; sender: number; recipient: number } }
  | { tag: 'ClearOrigin' }
  | { tag: 'DescendOrigin'; value: XcmV2MultilocationJunctions }
  | { tag: 'ReportError'; value: { queryId: bigint; dest: XcmV2MultilocationMultiLocation; maxResponseWeight: bigint } }
  | {
      tag: 'DepositAsset';
      value: {
        assets: XcmV2MultiassetMultiAssetFilter;
        maxAssets: number;
        beneficiary: XcmV2MultilocationMultiLocation;
      };
    }
  | {
      tag: 'DepositReserveAsset';
      value: {
        assets: XcmV2MultiassetMultiAssetFilter;
        maxAssets: number;
        dest: XcmV2MultilocationMultiLocation;
        xcm: XcmV2Xcm;
      };
    }
  | { tag: 'ExchangeAsset'; value: { give: XcmV2MultiassetMultiAssetFilter; receive: XcmV2MultiassetMultiAssets } }
  | {
      tag: 'InitiateReserveWithdraw';
      value: { assets: XcmV2MultiassetMultiAssetFilter; reserve: XcmV2MultilocationMultiLocation; xcm: XcmV2Xcm };
    }
  | {
      tag: 'InitiateTeleport';
      value: { assets: XcmV2MultiassetMultiAssetFilter; dest: XcmV2MultilocationMultiLocation; xcm: XcmV2Xcm };
    }
  | {
      tag: 'QueryHolding';
      value: {
        queryId: bigint;
        dest: XcmV2MultilocationMultiLocation;
        assets: XcmV2MultiassetMultiAssetFilter;
        maxResponseWeight: bigint;
      };
    }
  | { tag: 'BuyExecution'; value: { fees: XcmV2MultiassetMultiAsset; weightLimit: XcmV2WeightLimit } }
  | { tag: 'RefundSurplus' }
  | { tag: 'SetErrorHandler'; value: XcmV2Xcm }
  | { tag: 'SetAppendix'; value: XcmV2Xcm }
  | { tag: 'ClearError' }
  | { tag: 'ClaimAsset'; value: { assets: XcmV2MultiassetMultiAssets; ticket: XcmV2MultilocationMultiLocation } }
  | { tag: 'Trap'; value: bigint }
  | { tag: 'SubscribeVersion'; value: { queryId: bigint; maxResponseWeight: bigint } }
  | { tag: 'UnsubscribeVersion' };

export type XcmV2MultiassetMultiAssets = Array<XcmV2MultiassetMultiAsset>;

export type XcmV2MultiassetMultiAsset = { id: XcmV2MultiassetAssetId; fun: XcmV2MultiassetFungibility };

export type XcmV2MultiassetAssetId =
  | { tag: 'Concrete'; value: XcmV2MultilocationMultiLocation }
  | { tag: 'Abstract'; value: Bytes };

export type XcmV2MultiassetFungibility =
  | { tag: 'Fungible'; value: bigint }
  | { tag: 'NonFungible'; value: XcmV2MultiassetAssetInstance };

export type XcmV2MultiassetAssetInstance =
  | { tag: 'Undefined' }
  | { tag: 'Index'; value: bigint }
  | { tag: 'Array4'; value: FixedBytes<4> }
  | { tag: 'Array8'; value: FixedBytes<8> }
  | { tag: 'Array16'; value: FixedBytes<16> }
  | { tag: 'Array32'; value: FixedBytes<32> }
  | { tag: 'Blob'; value: Bytes };

export type XcmV2Response =
  | { tag: 'Null' }
  | { tag: 'Assets'; value: XcmV2MultiassetMultiAssets }
  | { tag: 'ExecutionResult'; value?: [number, XcmV2TraitsError] | undefined }
  | { tag: 'Version'; value: number };

export type XcmV2TraitsError =
  | { tag: 'Overflow' }
  | { tag: 'Unimplemented' }
  | { tag: 'UntrustedReserveLocation' }
  | { tag: 'UntrustedTeleportLocation' }
  | { tag: 'MultiLocationFull' }
  | { tag: 'MultiLocationNotInvertible' }
  | { tag: 'BadOrigin' }
  | { tag: 'InvalidLocation' }
  | { tag: 'AssetNotFound' }
  | { tag: 'FailedToTransactAsset' }
  | { tag: 'NotWithdrawable' }
  | { tag: 'LocationCannotHold' }
  | { tag: 'ExceedsMaxMessageSize' }
  | { tag: 'DestinationUnsupported' }
  | { tag: 'Transport' }
  | { tag: 'Unroutable' }
  | { tag: 'UnknownClaim' }
  | { tag: 'FailedToDecode' }
  | { tag: 'MaxWeightInvalid' }
  | { tag: 'NotHoldingFees' }
  | { tag: 'TooExpensive' }
  | { tag: 'Trap'; value: bigint }
  | { tag: 'UnhandledXcmVersion' }
  | { tag: 'WeightLimitReached'; value: bigint }
  | { tag: 'Barrier' }
  | { tag: 'WeightNotComputable' };

export type XcmV2OriginKind = 'Native' | 'SovereignAccount' | 'Superuser' | 'Xcm';

export type XcmDoubleEncoded = { encoded: Bytes };

export type XcmV2MultiassetMultiAssetFilter =
  | { tag: 'Definite'; value: XcmV2MultiassetMultiAssets }
  | { tag: 'Wild'; value: XcmV2MultiassetWildMultiAsset };

export type XcmV2MultiassetWildMultiAsset =
  | { tag: 'All' }
  | { tag: 'AllOf'; value: { id: XcmV2MultiassetAssetId; fun: XcmV2MultiassetWildFungibility } };

export type XcmV2MultiassetWildFungibility = 'Fungible' | 'NonFungible';

export type XcmV2WeightLimit = { tag: 'Unlimited' } | { tag: 'Limited'; value: bigint };

export type XcmV3Xcm = Array<XcmV3Instruction>;

export type XcmV3Instruction =
  | { tag: 'WithdrawAsset'; value: XcmV3MultiassetMultiAssets }
  | { tag: 'ReserveAssetDeposited'; value: XcmV3MultiassetMultiAssets }
  | { tag: 'ReceiveTeleportedAsset'; value: XcmV3MultiassetMultiAssets }
  | {
      tag: 'QueryResponse';
      value: {
        queryId: bigint;
        response: XcmV3Response;
        maxWeight: SpWeightsWeightV2Weight;
        querier?: StagingXcmV3MultilocationMultiLocation | undefined;
      };
    }
  | {
      tag: 'TransferAsset';
      value: { assets: XcmV3MultiassetMultiAssets; beneficiary: StagingXcmV3MultilocationMultiLocation };
    }
  | {
      tag: 'TransferReserveAsset';
      value: { assets: XcmV3MultiassetMultiAssets; dest: StagingXcmV3MultilocationMultiLocation; xcm: XcmV3Xcm };
    }
  | {
      tag: 'Transact';
      value: { originKind: XcmV2OriginKind; requireWeightAtMost: SpWeightsWeightV2Weight; call: XcmDoubleEncoded };
    }
  | { tag: 'HrmpNewChannelOpenRequest'; value: { sender: number; maxMessageSize: number; maxCapacity: number } }
  | { tag: 'HrmpChannelAccepted'; value: { recipient: number } }
  | { tag: 'HrmpChannelClosing'; value: { initiator: number; sender: number; recipient: number } }
  | { tag: 'ClearOrigin' }
  | { tag: 'DescendOrigin'; value: XcmV3Junctions }
  | { tag: 'ReportError'; value: XcmV3QueryResponseInfo }
  | {
      tag: 'DepositAsset';
      value: { assets: XcmV3MultiassetMultiAssetFilter; beneficiary: StagingXcmV3MultilocationMultiLocation };
    }
  | {
      tag: 'DepositReserveAsset';
      value: { assets: XcmV3MultiassetMultiAssetFilter; dest: StagingXcmV3MultilocationMultiLocation; xcm: XcmV3Xcm };
    }
  | {
      tag: 'ExchangeAsset';
      value: { give: XcmV3MultiassetMultiAssetFilter; want: XcmV3MultiassetMultiAssets; maximal: boolean };
    }
  | {
      tag: 'InitiateReserveWithdraw';
      value: {
        assets: XcmV3MultiassetMultiAssetFilter;
        reserve: StagingXcmV3MultilocationMultiLocation;
        xcm: XcmV3Xcm;
      };
    }
  | {
      tag: 'InitiateTeleport';
      value: { assets: XcmV3MultiassetMultiAssetFilter; dest: StagingXcmV3MultilocationMultiLocation; xcm: XcmV3Xcm };
    }
  | { tag: 'ReportHolding'; value: { responseInfo: XcmV3QueryResponseInfo; assets: XcmV3MultiassetMultiAssetFilter } }
  | { tag: 'BuyExecution'; value: { fees: XcmV3MultiassetMultiAsset; weightLimit: XcmV3WeightLimit } }
  | { tag: 'RefundSurplus' }
  | { tag: 'SetErrorHandler'; value: XcmV3Xcm }
  | { tag: 'SetAppendix'; value: XcmV3Xcm }
  | { tag: 'ClearError' }
  | { tag: 'ClaimAsset'; value: { assets: XcmV3MultiassetMultiAssets; ticket: StagingXcmV3MultilocationMultiLocation } }
  | { tag: 'Trap'; value: bigint }
  | { tag: 'SubscribeVersion'; value: { queryId: bigint; maxResponseWeight: SpWeightsWeightV2Weight } }
  | { tag: 'UnsubscribeVersion' }
  | { tag: 'BurnAsset'; value: XcmV3MultiassetMultiAssets }
  | { tag: 'ExpectAsset'; value: XcmV3MultiassetMultiAssets }
  | { tag: 'ExpectOrigin'; value?: StagingXcmV3MultilocationMultiLocation | undefined }
  | { tag: 'ExpectError'; value?: [number, XcmV3TraitsError] | undefined }
  | { tag: 'ExpectTransactStatus'; value: XcmV3MaybeErrorCode }
  | { tag: 'QueryPallet'; value: { moduleName: Bytes; responseInfo: XcmV3QueryResponseInfo } }
  | {
      tag: 'ExpectPallet';
      value: { index: number; name: Bytes; moduleName: Bytes; crateMajor: number; minCrateMinor: number };
    }
  | { tag: 'ReportTransactStatus'; value: XcmV3QueryResponseInfo }
  | { tag: 'ClearTransactStatus' }
  | { tag: 'UniversalOrigin'; value: XcmV3Junction }
  | { tag: 'ExportMessage'; value: { network: XcmV3JunctionNetworkId; destination: XcmV3Junctions; xcm: XcmV3Xcm } }
  | { tag: 'LockAsset'; value: { asset: XcmV3MultiassetMultiAsset; unlocker: StagingXcmV3MultilocationMultiLocation } }
  | { tag: 'UnlockAsset'; value: { asset: XcmV3MultiassetMultiAsset; target: StagingXcmV3MultilocationMultiLocation } }
  | {
      tag: 'NoteUnlockable';
      value: { asset: XcmV3MultiassetMultiAsset; owner: StagingXcmV3MultilocationMultiLocation };
    }
  | {
      tag: 'RequestUnlock';
      value: { asset: XcmV3MultiassetMultiAsset; locker: StagingXcmV3MultilocationMultiLocation };
    }
  | { tag: 'SetFeesMode'; value: { jitWithdraw: boolean } }
  | { tag: 'SetTopic'; value: FixedBytes<32> }
  | { tag: 'ClearTopic' }
  | { tag: 'AliasOrigin'; value: StagingXcmV3MultilocationMultiLocation }
  | {
      tag: 'UnpaidExecution';
      value: { weightLimit: XcmV3WeightLimit; checkOrigin?: StagingXcmV3MultilocationMultiLocation | undefined };
    };

export type XcmV3MultiassetMultiAssets = Array<XcmV3MultiassetMultiAsset>;

export type XcmV3MultiassetMultiAsset = { id: XcmV3MultiassetAssetId; fun: XcmV3MultiassetFungibility };

export type XcmV3MultiassetAssetId =
  | { tag: 'Concrete'; value: StagingXcmV3MultilocationMultiLocation }
  | { tag: 'Abstract'; value: FixedBytes<32> };

export type XcmV3MultiassetFungibility =
  | { tag: 'Fungible'; value: bigint }
  | { tag: 'NonFungible'; value: XcmV3MultiassetAssetInstance };

export type XcmV3MultiassetAssetInstance =
  | { tag: 'Undefined' }
  | { tag: 'Index'; value: bigint }
  | { tag: 'Array4'; value: FixedBytes<4> }
  | { tag: 'Array8'; value: FixedBytes<8> }
  | { tag: 'Array16'; value: FixedBytes<16> }
  | { tag: 'Array32'; value: FixedBytes<32> };

export type XcmV3Response =
  | { tag: 'Null' }
  | { tag: 'Assets'; value: XcmV3MultiassetMultiAssets }
  | { tag: 'ExecutionResult'; value?: [number, XcmV3TraitsError] | undefined }
  | { tag: 'Version'; value: number }
  | { tag: 'PalletsInfo'; value: Array<XcmV3PalletInfo> }
  | { tag: 'DispatchResult'; value: XcmV3MaybeErrorCode };

export type XcmV3TraitsError =
  | { tag: 'Overflow' }
  | { tag: 'Unimplemented' }
  | { tag: 'UntrustedReserveLocation' }
  | { tag: 'UntrustedTeleportLocation' }
  | { tag: 'LocationFull' }
  | { tag: 'LocationNotInvertible' }
  | { tag: 'BadOrigin' }
  | { tag: 'InvalidLocation' }
  | { tag: 'AssetNotFound' }
  | { tag: 'FailedToTransactAsset' }
  | { tag: 'NotWithdrawable' }
  | { tag: 'LocationCannotHold' }
  | { tag: 'ExceedsMaxMessageSize' }
  | { tag: 'DestinationUnsupported' }
  | { tag: 'Transport' }
  | { tag: 'Unroutable' }
  | { tag: 'UnknownClaim' }
  | { tag: 'FailedToDecode' }
  | { tag: 'MaxWeightInvalid' }
  | { tag: 'NotHoldingFees' }
  | { tag: 'TooExpensive' }
  | { tag: 'Trap'; value: bigint }
  | { tag: 'ExpectationFalse' }
  | { tag: 'PalletNotFound' }
  | { tag: 'NameMismatch' }
  | { tag: 'VersionIncompatible' }
  | { tag: 'HoldingWouldOverflow' }
  | { tag: 'ExportError' }
  | { tag: 'ReanchorFailed' }
  | { tag: 'NoDeal' }
  | { tag: 'FeesNotMet' }
  | { tag: 'LockError' }
  | { tag: 'NoPermission' }
  | { tag: 'Unanchored' }
  | { tag: 'NotDepositable' }
  | { tag: 'UnhandledXcmVersion' }
  | { tag: 'WeightLimitReached'; value: SpWeightsWeightV2Weight }
  | { tag: 'Barrier' }
  | { tag: 'WeightNotComputable' }
  | { tag: 'ExceedsStackLimit' };

export type XcmV3PalletInfo = {
  index: number;
  name: Bytes;
  moduleName: Bytes;
  major: number;
  minor: number;
  patch: number;
};

export type XcmV3MaybeErrorCode =
  | { tag: 'Success' }
  | { tag: 'Error'; value: Bytes }
  | { tag: 'TruncatedError'; value: Bytes };

export type XcmV3QueryResponseInfo = {
  destination: StagingXcmV3MultilocationMultiLocation;
  queryId: bigint;
  maxWeight: SpWeightsWeightV2Weight;
};

export type XcmV3MultiassetMultiAssetFilter =
  | { tag: 'Definite'; value: XcmV3MultiassetMultiAssets }
  | { tag: 'Wild'; value: XcmV3MultiassetWildMultiAsset };

export type XcmV3MultiassetWildMultiAsset =
  | { tag: 'All' }
  | { tag: 'AllOf'; value: { id: XcmV3MultiassetAssetId; fun: XcmV3MultiassetWildFungibility } }
  | { tag: 'AllCounted'; value: number }
  | { tag: 'AllOfCounted'; value: { id: XcmV3MultiassetAssetId; fun: XcmV3MultiassetWildFungibility; count: number } };

export type XcmV3MultiassetWildFungibility = 'Fungible' | 'NonFungible';

export type XcmV3WeightLimit = { tag: 'Unlimited' } | { tag: 'Limited'; value: SpWeightsWeightV2Weight };

export type XcmVersionedMultiAssets =
  | { tag: 'V2'; value: XcmV2MultiassetMultiAssets }
  | { tag: 'V3'; value: XcmV3MultiassetMultiAssets };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletAssetsCall =
  /**
   * See [`Pallet::create`].
   **/
  | { name: 'Create'; params: { id: bigint; admin: AccountId20; minBalance: bigint } }
  /**
   * See [`Pallet::force_create`].
   **/
  | { name: 'ForceCreate'; params: { id: bigint; owner: AccountId20; isSufficient: boolean; minBalance: bigint } }
  /**
   * See [`Pallet::start_destroy`].
   **/
  | { name: 'StartDestroy'; params: { id: bigint } }
  /**
   * See [`Pallet::destroy_accounts`].
   **/
  | { name: 'DestroyAccounts'; params: { id: bigint } }
  /**
   * See [`Pallet::destroy_approvals`].
   **/
  | { name: 'DestroyApprovals'; params: { id: bigint } }
  /**
   * See [`Pallet::finish_destroy`].
   **/
  | { name: 'FinishDestroy'; params: { id: bigint } }
  /**
   * See [`Pallet::mint`].
   **/
  | { name: 'Mint'; params: { id: bigint; beneficiary: AccountId20; amount: bigint } }
  /**
   * See [`Pallet::burn`].
   **/
  | { name: 'Burn'; params: { id: bigint; who: AccountId20; amount: bigint } }
  /**
   * See [`Pallet::transfer`].
   **/
  | { name: 'Transfer'; params: { id: bigint; target: AccountId20; amount: bigint } }
  /**
   * See [`Pallet::transfer_keep_alive`].
   **/
  | { name: 'TransferKeepAlive'; params: { id: bigint; target: AccountId20; amount: bigint } }
  /**
   * See [`Pallet::force_transfer`].
   **/
  | { name: 'ForceTransfer'; params: { id: bigint; source: AccountId20; dest: AccountId20; amount: bigint } }
  /**
   * See [`Pallet::freeze`].
   **/
  | { name: 'Freeze'; params: { id: bigint; who: AccountId20 } }
  /**
   * See [`Pallet::thaw`].
   **/
  | { name: 'Thaw'; params: { id: bigint; who: AccountId20 } }
  /**
   * See [`Pallet::freeze_asset`].
   **/
  | { name: 'FreezeAsset'; params: { id: bigint } }
  /**
   * See [`Pallet::thaw_asset`].
   **/
  | { name: 'ThawAsset'; params: { id: bigint } }
  /**
   * See [`Pallet::transfer_ownership`].
   **/
  | { name: 'TransferOwnership'; params: { id: bigint; owner: AccountId20 } }
  /**
   * See [`Pallet::set_team`].
   **/
  | { name: 'SetTeam'; params: { id: bigint; issuer: AccountId20; admin: AccountId20; freezer: AccountId20 } }
  /**
   * See [`Pallet::set_metadata`].
   **/
  | { name: 'SetMetadata'; params: { id: bigint; name: Bytes; symbol: Bytes; decimals: number } }
  /**
   * See [`Pallet::clear_metadata`].
   **/
  | { name: 'ClearMetadata'; params: { id: bigint } }
  /**
   * See [`Pallet::force_set_metadata`].
   **/
  | {
      name: 'ForceSetMetadata';
      params: { id: bigint; name: Bytes; symbol: Bytes; decimals: number; isFrozen: boolean };
    }
  /**
   * See [`Pallet::force_clear_metadata`].
   **/
  | { name: 'ForceClearMetadata'; params: { id: bigint } }
  /**
   * See [`Pallet::force_asset_status`].
   **/
  | {
      name: 'ForceAssetStatus';
      params: {
        id: bigint;
        owner: AccountId20;
        issuer: AccountId20;
        admin: AccountId20;
        freezer: AccountId20;
        minBalance: bigint;
        isSufficient: boolean;
        isFrozen: boolean;
      };
    }
  /**
   * See [`Pallet::approve_transfer`].
   **/
  | { name: 'ApproveTransfer'; params: { id: bigint; delegate: AccountId20; amount: bigint } }
  /**
   * See [`Pallet::cancel_approval`].
   **/
  | { name: 'CancelApproval'; params: { id: bigint; delegate: AccountId20 } }
  /**
   * See [`Pallet::force_cancel_approval`].
   **/
  | { name: 'ForceCancelApproval'; params: { id: bigint; owner: AccountId20; delegate: AccountId20 } }
  /**
   * See [`Pallet::transfer_approved`].
   **/
  | { name: 'TransferApproved'; params: { id: bigint; owner: AccountId20; destination: AccountId20; amount: bigint } }
  /**
   * See [`Pallet::touch`].
   **/
  | { name: 'Touch'; params: { id: bigint } }
  /**
   * See [`Pallet::refund`].
   **/
  | { name: 'Refund'; params: { id: bigint; allowBurn: boolean } }
  /**
   * See [`Pallet::set_min_balance`].
   **/
  | { name: 'SetMinBalance'; params: { id: bigint; minBalance: bigint } }
  /**
   * See [`Pallet::touch_other`].
   **/
  | { name: 'TouchOther'; params: { id: bigint; who: AccountId20 } }
  /**
   * See [`Pallet::refund_other`].
   **/
  | { name: 'RefundOther'; params: { id: bigint; who: AccountId20 } }
  /**
   * See [`Pallet::block`].
   **/
  | { name: 'Block'; params: { id: bigint; who: AccountId20 } };

export type PalletAssetsCallLike =
  /**
   * See [`Pallet::create`].
   **/
  | { name: 'Create'; params: { id: bigint; admin: AccountId20Like; minBalance: bigint } }
  /**
   * See [`Pallet::force_create`].
   **/
  | { name: 'ForceCreate'; params: { id: bigint; owner: AccountId20Like; isSufficient: boolean; minBalance: bigint } }
  /**
   * See [`Pallet::start_destroy`].
   **/
  | { name: 'StartDestroy'; params: { id: bigint } }
  /**
   * See [`Pallet::destroy_accounts`].
   **/
  | { name: 'DestroyAccounts'; params: { id: bigint } }
  /**
   * See [`Pallet::destroy_approvals`].
   **/
  | { name: 'DestroyApprovals'; params: { id: bigint } }
  /**
   * See [`Pallet::finish_destroy`].
   **/
  | { name: 'FinishDestroy'; params: { id: bigint } }
  /**
   * See [`Pallet::mint`].
   **/
  | { name: 'Mint'; params: { id: bigint; beneficiary: AccountId20Like; amount: bigint } }
  /**
   * See [`Pallet::burn`].
   **/
  | { name: 'Burn'; params: { id: bigint; who: AccountId20Like; amount: bigint } }
  /**
   * See [`Pallet::transfer`].
   **/
  | { name: 'Transfer'; params: { id: bigint; target: AccountId20Like; amount: bigint } }
  /**
   * See [`Pallet::transfer_keep_alive`].
   **/
  | { name: 'TransferKeepAlive'; params: { id: bigint; target: AccountId20Like; amount: bigint } }
  /**
   * See [`Pallet::force_transfer`].
   **/
  | { name: 'ForceTransfer'; params: { id: bigint; source: AccountId20Like; dest: AccountId20Like; amount: bigint } }
  /**
   * See [`Pallet::freeze`].
   **/
  | { name: 'Freeze'; params: { id: bigint; who: AccountId20Like } }
  /**
   * See [`Pallet::thaw`].
   **/
  | { name: 'Thaw'; params: { id: bigint; who: AccountId20Like } }
  /**
   * See [`Pallet::freeze_asset`].
   **/
  | { name: 'FreezeAsset'; params: { id: bigint } }
  /**
   * See [`Pallet::thaw_asset`].
   **/
  | { name: 'ThawAsset'; params: { id: bigint } }
  /**
   * See [`Pallet::transfer_ownership`].
   **/
  | { name: 'TransferOwnership'; params: { id: bigint; owner: AccountId20Like } }
  /**
   * See [`Pallet::set_team`].
   **/
  | {
      name: 'SetTeam';
      params: { id: bigint; issuer: AccountId20Like; admin: AccountId20Like; freezer: AccountId20Like };
    }
  /**
   * See [`Pallet::set_metadata`].
   **/
  | { name: 'SetMetadata'; params: { id: bigint; name: BytesLike; symbol: BytesLike; decimals: number } }
  /**
   * See [`Pallet::clear_metadata`].
   **/
  | { name: 'ClearMetadata'; params: { id: bigint } }
  /**
   * See [`Pallet::force_set_metadata`].
   **/
  | {
      name: 'ForceSetMetadata';
      params: { id: bigint; name: BytesLike; symbol: BytesLike; decimals: number; isFrozen: boolean };
    }
  /**
   * See [`Pallet::force_clear_metadata`].
   **/
  | { name: 'ForceClearMetadata'; params: { id: bigint } }
  /**
   * See [`Pallet::force_asset_status`].
   **/
  | {
      name: 'ForceAssetStatus';
      params: {
        id: bigint;
        owner: AccountId20Like;
        issuer: AccountId20Like;
        admin: AccountId20Like;
        freezer: AccountId20Like;
        minBalance: bigint;
        isSufficient: boolean;
        isFrozen: boolean;
      };
    }
  /**
   * See [`Pallet::approve_transfer`].
   **/
  | { name: 'ApproveTransfer'; params: { id: bigint; delegate: AccountId20Like; amount: bigint } }
  /**
   * See [`Pallet::cancel_approval`].
   **/
  | { name: 'CancelApproval'; params: { id: bigint; delegate: AccountId20Like } }
  /**
   * See [`Pallet::force_cancel_approval`].
   **/
  | { name: 'ForceCancelApproval'; params: { id: bigint; owner: AccountId20Like; delegate: AccountId20Like } }
  /**
   * See [`Pallet::transfer_approved`].
   **/
  | {
      name: 'TransferApproved';
      params: { id: bigint; owner: AccountId20Like; destination: AccountId20Like; amount: bigint };
    }
  /**
   * See [`Pallet::touch`].
   **/
  | { name: 'Touch'; params: { id: bigint } }
  /**
   * See [`Pallet::refund`].
   **/
  | { name: 'Refund'; params: { id: bigint; allowBurn: boolean } }
  /**
   * See [`Pallet::set_min_balance`].
   **/
  | { name: 'SetMinBalance'; params: { id: bigint; minBalance: bigint } }
  /**
   * See [`Pallet::touch_other`].
   **/
  | { name: 'TouchOther'; params: { id: bigint; who: AccountId20Like } }
  /**
   * See [`Pallet::refund_other`].
   **/
  | { name: 'RefundOther'; params: { id: bigint; who: AccountId20Like } }
  /**
   * See [`Pallet::block`].
   **/
  | { name: 'Block'; params: { id: bigint; who: AccountId20Like } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletAssetManagerCall =
  /**
   * See [`Pallet::register_foreign_asset`].
   **/
  | {
      name: 'RegisterForeignAsset';
      params: {
        asset: MoonbeamRuntimeXcmConfigAssetType;
        metadata: MoonbeamRuntimeAssetConfigAssetRegistrarMetadata;
        minAmount: bigint;
        isSufficient: boolean;
      };
    }
  /**
   * See [`Pallet::set_asset_units_per_second`].
   **/
  | {
      name: 'SetAssetUnitsPerSecond';
      params: { assetType: MoonbeamRuntimeXcmConfigAssetType; unitsPerSecond: bigint; numAssetsWeightHint: number };
    }
  /**
   * See [`Pallet::change_existing_asset_type`].
   **/
  | {
      name: 'ChangeExistingAssetType';
      params: { assetId: bigint; newAssetType: MoonbeamRuntimeXcmConfigAssetType; numAssetsWeightHint: number };
    }
  /**
   * See [`Pallet::remove_supported_asset`].
   **/
  | {
      name: 'RemoveSupportedAsset';
      params: { assetType: MoonbeamRuntimeXcmConfigAssetType; numAssetsWeightHint: number };
    }
  /**
   * See [`Pallet::remove_existing_asset_type`].
   **/
  | { name: 'RemoveExistingAssetType'; params: { assetId: bigint; numAssetsWeightHint: number } }
  /**
   * See [`Pallet::register_local_asset`].
   **/
  | {
      name: 'RegisterLocalAsset';
      params: { creator: AccountId20; owner: AccountId20; isSufficient: boolean; minBalance: bigint };
    }
  /**
   * See [`Pallet::destroy_foreign_asset`].
   **/
  | { name: 'DestroyForeignAsset'; params: { assetId: bigint; numAssetsWeightHint: number } }
  /**
   * See [`Pallet::destroy_local_asset`].
   **/
  | { name: 'DestroyLocalAsset'; params: { assetId: bigint } };

export type PalletAssetManagerCallLike =
  /**
   * See [`Pallet::register_foreign_asset`].
   **/
  | {
      name: 'RegisterForeignAsset';
      params: {
        asset: MoonbeamRuntimeXcmConfigAssetType;
        metadata: MoonbeamRuntimeAssetConfigAssetRegistrarMetadata;
        minAmount: bigint;
        isSufficient: boolean;
      };
    }
  /**
   * See [`Pallet::set_asset_units_per_second`].
   **/
  | {
      name: 'SetAssetUnitsPerSecond';
      params: { assetType: MoonbeamRuntimeXcmConfigAssetType; unitsPerSecond: bigint; numAssetsWeightHint: number };
    }
  /**
   * See [`Pallet::change_existing_asset_type`].
   **/
  | {
      name: 'ChangeExistingAssetType';
      params: { assetId: bigint; newAssetType: MoonbeamRuntimeXcmConfigAssetType; numAssetsWeightHint: number };
    }
  /**
   * See [`Pallet::remove_supported_asset`].
   **/
  | {
      name: 'RemoveSupportedAsset';
      params: { assetType: MoonbeamRuntimeXcmConfigAssetType; numAssetsWeightHint: number };
    }
  /**
   * See [`Pallet::remove_existing_asset_type`].
   **/
  | { name: 'RemoveExistingAssetType'; params: { assetId: bigint; numAssetsWeightHint: number } }
  /**
   * See [`Pallet::register_local_asset`].
   **/
  | {
      name: 'RegisterLocalAsset';
      params: { creator: AccountId20Like; owner: AccountId20Like; isSufficient: boolean; minBalance: bigint };
    }
  /**
   * See [`Pallet::destroy_foreign_asset`].
   **/
  | { name: 'DestroyForeignAsset'; params: { assetId: bigint; numAssetsWeightHint: number } }
  /**
   * See [`Pallet::destroy_local_asset`].
   **/
  | { name: 'DestroyLocalAsset'; params: { assetId: bigint } };

export type MoonbeamRuntimeXcmConfigAssetType = { tag: 'Xcm'; value: StagingXcmV3MultilocationMultiLocation };

export type MoonbeamRuntimeAssetConfigAssetRegistrarMetadata = {
  name: Bytes;
  symbol: Bytes;
  decimals: number;
  isFrozen: boolean;
};

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type OrmlXtokensModuleCall =
  /**
   * See [`Pallet::transfer`].
   **/
  | {
      name: 'Transfer';
      params: {
        currencyId: MoonbeamRuntimeXcmConfigCurrencyId;
        amount: bigint;
        dest: XcmVersionedMultiLocation;
        destWeightLimit: XcmV3WeightLimit;
      };
    }
  /**
   * See [`Pallet::transfer_multiasset`].
   **/
  | {
      name: 'TransferMultiasset';
      params: { asset: XcmVersionedMultiAsset; dest: XcmVersionedMultiLocation; destWeightLimit: XcmV3WeightLimit };
    }
  /**
   * See [`Pallet::transfer_with_fee`].
   **/
  | {
      name: 'TransferWithFee';
      params: {
        currencyId: MoonbeamRuntimeXcmConfigCurrencyId;
        amount: bigint;
        fee: bigint;
        dest: XcmVersionedMultiLocation;
        destWeightLimit: XcmV3WeightLimit;
      };
    }
  /**
   * See [`Pallet::transfer_multiasset_with_fee`].
   **/
  | {
      name: 'TransferMultiassetWithFee';
      params: {
        asset: XcmVersionedMultiAsset;
        fee: XcmVersionedMultiAsset;
        dest: XcmVersionedMultiLocation;
        destWeightLimit: XcmV3WeightLimit;
      };
    }
  /**
   * See [`Pallet::transfer_multicurrencies`].
   **/
  | {
      name: 'TransferMulticurrencies';
      params: {
        currencies: Array<[MoonbeamRuntimeXcmConfigCurrencyId, bigint]>;
        feeItem: number;
        dest: XcmVersionedMultiLocation;
        destWeightLimit: XcmV3WeightLimit;
      };
    }
  /**
   * See [`Pallet::transfer_multiassets`].
   **/
  | {
      name: 'TransferMultiassets';
      params: {
        assets: XcmVersionedMultiAssets;
        feeItem: number;
        dest: XcmVersionedMultiLocation;
        destWeightLimit: XcmV3WeightLimit;
      };
    };

export type OrmlXtokensModuleCallLike =
  /**
   * See [`Pallet::transfer`].
   **/
  | {
      name: 'Transfer';
      params: {
        currencyId: MoonbeamRuntimeXcmConfigCurrencyId;
        amount: bigint;
        dest: XcmVersionedMultiLocation;
        destWeightLimit: XcmV3WeightLimit;
      };
    }
  /**
   * See [`Pallet::transfer_multiasset`].
   **/
  | {
      name: 'TransferMultiasset';
      params: { asset: XcmVersionedMultiAsset; dest: XcmVersionedMultiLocation; destWeightLimit: XcmV3WeightLimit };
    }
  /**
   * See [`Pallet::transfer_with_fee`].
   **/
  | {
      name: 'TransferWithFee';
      params: {
        currencyId: MoonbeamRuntimeXcmConfigCurrencyId;
        amount: bigint;
        fee: bigint;
        dest: XcmVersionedMultiLocation;
        destWeightLimit: XcmV3WeightLimit;
      };
    }
  /**
   * See [`Pallet::transfer_multiasset_with_fee`].
   **/
  | {
      name: 'TransferMultiassetWithFee';
      params: {
        asset: XcmVersionedMultiAsset;
        fee: XcmVersionedMultiAsset;
        dest: XcmVersionedMultiLocation;
        destWeightLimit: XcmV3WeightLimit;
      };
    }
  /**
   * See [`Pallet::transfer_multicurrencies`].
   **/
  | {
      name: 'TransferMulticurrencies';
      params: {
        currencies: Array<[MoonbeamRuntimeXcmConfigCurrencyId, bigint]>;
        feeItem: number;
        dest: XcmVersionedMultiLocation;
        destWeightLimit: XcmV3WeightLimit;
      };
    }
  /**
   * See [`Pallet::transfer_multiassets`].
   **/
  | {
      name: 'TransferMultiassets';
      params: {
        assets: XcmVersionedMultiAssets;
        feeItem: number;
        dest: XcmVersionedMultiLocation;
        destWeightLimit: XcmV3WeightLimit;
      };
    };

export type MoonbeamRuntimeXcmConfigCurrencyId =
  | { tag: 'SelfReserve' }
  | { tag: 'ForeignAsset'; value: bigint }
  | { tag: 'LocalAssetReserve'; value: bigint }
  | { tag: 'Erc20'; value: { contractAddress: H160 } };

export type XcmVersionedMultiAsset =
  | { tag: 'V2'; value: XcmV2MultiassetMultiAsset }
  | { tag: 'V3'; value: XcmV3MultiassetMultiAsset };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletXcmTransactorCall =
  /**
   * See [`Pallet::register`].
   **/
  | { name: 'Register'; params: { who: AccountId20; index: number } }
  /**
   * See [`Pallet::deregister`].
   **/
  | { name: 'Deregister'; params: { index: number } }
  /**
   * See [`Pallet::transact_through_derivative`].
   **/
  | {
      name: 'TransactThroughDerivative';
      params: {
        dest: MoonbeamRuntimeXcmConfigTransactors;
        index: number;
        fee: PalletXcmTransactorCurrencyPayment;
        innerCall: Bytes;
        weightInfo: PalletXcmTransactorTransactWeights;
        refund: boolean;
      };
    }
  /**
   * See [`Pallet::transact_through_sovereign`].
   **/
  | {
      name: 'TransactThroughSovereign';
      params: {
        dest: XcmVersionedMultiLocation;
        feePayer: AccountId20;
        fee: PalletXcmTransactorCurrencyPayment;
        call: Bytes;
        originKind: XcmV2OriginKind;
        weightInfo: PalletXcmTransactorTransactWeights;
        refund: boolean;
      };
    }
  /**
   * See [`Pallet::set_transact_info`].
   **/
  | {
      name: 'SetTransactInfo';
      params: {
        location: XcmVersionedMultiLocation;
        transactExtraWeight: SpWeightsWeightV2Weight;
        maxWeight: SpWeightsWeightV2Weight;
        transactExtraWeightSigned?: SpWeightsWeightV2Weight | undefined;
      };
    }
  /**
   * See [`Pallet::remove_transact_info`].
   **/
  | { name: 'RemoveTransactInfo'; params: { location: XcmVersionedMultiLocation } }
  /**
   * See [`Pallet::transact_through_signed`].
   **/
  | {
      name: 'TransactThroughSigned';
      params: {
        dest: XcmVersionedMultiLocation;
        fee: PalletXcmTransactorCurrencyPayment;
        call: Bytes;
        weightInfo: PalletXcmTransactorTransactWeights;
        refund: boolean;
      };
    }
  /**
   * See [`Pallet::set_fee_per_second`].
   **/
  | { name: 'SetFeePerSecond'; params: { assetLocation: XcmVersionedMultiLocation; feePerSecond: bigint } }
  /**
   * See [`Pallet::remove_fee_per_second`].
   **/
  | { name: 'RemoveFeePerSecond'; params: { assetLocation: XcmVersionedMultiLocation } }
  /**
   * See [`Pallet::hrmp_manage`].
   **/
  | {
      name: 'HrmpManage';
      params: {
        action: PalletXcmTransactorHrmpOperation;
        fee: PalletXcmTransactorCurrencyPayment;
        weightInfo: PalletXcmTransactorTransactWeights;
      };
    };

export type PalletXcmTransactorCallLike =
  /**
   * See [`Pallet::register`].
   **/
  | { name: 'Register'; params: { who: AccountId20Like; index: number } }
  /**
   * See [`Pallet::deregister`].
   **/
  | { name: 'Deregister'; params: { index: number } }
  /**
   * See [`Pallet::transact_through_derivative`].
   **/
  | {
      name: 'TransactThroughDerivative';
      params: {
        dest: MoonbeamRuntimeXcmConfigTransactors;
        index: number;
        fee: PalletXcmTransactorCurrencyPayment;
        innerCall: BytesLike;
        weightInfo: PalletXcmTransactorTransactWeights;
        refund: boolean;
      };
    }
  /**
   * See [`Pallet::transact_through_sovereign`].
   **/
  | {
      name: 'TransactThroughSovereign';
      params: {
        dest: XcmVersionedMultiLocation;
        feePayer: AccountId20Like;
        fee: PalletXcmTransactorCurrencyPayment;
        call: BytesLike;
        originKind: XcmV2OriginKind;
        weightInfo: PalletXcmTransactorTransactWeights;
        refund: boolean;
      };
    }
  /**
   * See [`Pallet::set_transact_info`].
   **/
  | {
      name: 'SetTransactInfo';
      params: {
        location: XcmVersionedMultiLocation;
        transactExtraWeight: SpWeightsWeightV2Weight;
        maxWeight: SpWeightsWeightV2Weight;
        transactExtraWeightSigned?: SpWeightsWeightV2Weight | undefined;
      };
    }
  /**
   * See [`Pallet::remove_transact_info`].
   **/
  | { name: 'RemoveTransactInfo'; params: { location: XcmVersionedMultiLocation } }
  /**
   * See [`Pallet::transact_through_signed`].
   **/
  | {
      name: 'TransactThroughSigned';
      params: {
        dest: XcmVersionedMultiLocation;
        fee: PalletXcmTransactorCurrencyPayment;
        call: BytesLike;
        weightInfo: PalletXcmTransactorTransactWeights;
        refund: boolean;
      };
    }
  /**
   * See [`Pallet::set_fee_per_second`].
   **/
  | { name: 'SetFeePerSecond'; params: { assetLocation: XcmVersionedMultiLocation; feePerSecond: bigint } }
  /**
   * See [`Pallet::remove_fee_per_second`].
   **/
  | { name: 'RemoveFeePerSecond'; params: { assetLocation: XcmVersionedMultiLocation } }
  /**
   * See [`Pallet::hrmp_manage`].
   **/
  | {
      name: 'HrmpManage';
      params: {
        action: PalletXcmTransactorHrmpOperation;
        fee: PalletXcmTransactorCurrencyPayment;
        weightInfo: PalletXcmTransactorTransactWeights;
      };
    };

export type MoonbeamRuntimeXcmConfigTransactors = 'Relay';

export type PalletXcmTransactorCurrencyPayment = {
  currency: PalletXcmTransactorCurrency;
  feeAmount?: bigint | undefined;
};

export type PalletXcmTransactorCurrency =
  | { tag: 'AsCurrencyId'; value: MoonbeamRuntimeXcmConfigCurrencyId }
  | { tag: 'AsMultiLocation'; value: XcmVersionedMultiLocation };

export type PalletXcmTransactorTransactWeights = {
  transactRequiredWeightAtMost: SpWeightsWeightV2Weight;
  overallWeight?: XcmV3WeightLimit | undefined;
};

export type PalletXcmTransactorHrmpOperation =
  | { tag: 'InitOpen'; value: PalletXcmTransactorHrmpInitParams }
  | { tag: 'Accept'; value: { paraId: PolkadotParachainPrimitivesPrimitivesId } }
  | { tag: 'Close'; value: PolkadotParachainPrimitivesPrimitivesHrmpChannelId }
  | { tag: 'Cancel'; value: { channelId: PolkadotParachainPrimitivesPrimitivesHrmpChannelId; openRequests: number } };

export type PalletXcmTransactorHrmpInitParams = {
  paraId: PolkadotParachainPrimitivesPrimitivesId;
  proposedMaxCapacity: number;
  proposedMaxMessageSize: number;
};

export type PolkadotParachainPrimitivesPrimitivesHrmpChannelId = {
  sender: PolkadotParachainPrimitivesPrimitivesId;
  recipient: PolkadotParachainPrimitivesPrimitivesId;
};

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletEthereumXcmCall =
  /**
   * See `Pallet::transact`.
   **/
  | { name: 'Transact'; params: { xcmTransaction: XcmPrimitivesEthereumXcmEthereumXcmTransaction } }
  /**
   * See `Pallet::transact_through_proxy`.
   **/
  | {
      name: 'TransactThroughProxy';
      params: { transactAs: H160; xcmTransaction: XcmPrimitivesEthereumXcmEthereumXcmTransaction };
    }
  /**
   * See `Pallet::suspend_ethereum_xcm_execution`.
   **/
  | { name: 'SuspendEthereumXcmExecution' }
  /**
   * See `Pallet::resume_ethereum_xcm_execution`.
   **/
  | { name: 'ResumeEthereumXcmExecution' };

export type PalletEthereumXcmCallLike =
  /**
   * See `Pallet::transact`.
   **/
  | { name: 'Transact'; params: { xcmTransaction: XcmPrimitivesEthereumXcmEthereumXcmTransaction } }
  /**
   * See `Pallet::transact_through_proxy`.
   **/
  | {
      name: 'TransactThroughProxy';
      params: { transactAs: H160; xcmTransaction: XcmPrimitivesEthereumXcmEthereumXcmTransaction };
    }
  /**
   * See `Pallet::suspend_ethereum_xcm_execution`.
   **/
  | { name: 'SuspendEthereumXcmExecution' }
  /**
   * See `Pallet::resume_ethereum_xcm_execution`.
   **/
  | { name: 'ResumeEthereumXcmExecution' };

export type XcmPrimitivesEthereumXcmEthereumXcmTransaction =
  | { tag: 'V1'; value: XcmPrimitivesEthereumXcmEthereumXcmTransactionV1 }
  | { tag: 'V2'; value: XcmPrimitivesEthereumXcmEthereumXcmTransactionV2 };

export type XcmPrimitivesEthereumXcmEthereumXcmTransactionV1 = {
  gasLimit: U256;
  feePayment: XcmPrimitivesEthereumXcmEthereumXcmFee;
  action: EthereumTransactionTransactionAction;
  value: U256;
  input: Bytes;
  accessList?: Array<[H160, Array<H256>]> | undefined;
};

export type XcmPrimitivesEthereumXcmEthereumXcmFee =
  | { tag: 'Manual'; value: XcmPrimitivesEthereumXcmManualEthereumXcmFee }
  | { tag: 'Auto' };

export type XcmPrimitivesEthereumXcmManualEthereumXcmFee = {
  gasPrice?: U256 | undefined;
  maxFeePerGas?: U256 | undefined;
};

export type XcmPrimitivesEthereumXcmEthereumXcmTransactionV2 = {
  gasLimit: U256;
  action: EthereumTransactionTransactionAction;
  value: U256;
  input: Bytes;
  accessList?: Array<[H160, Array<H256>]> | undefined;
};

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletRandomnessCall =
  /**
   * See [`Pallet::set_babe_randomness_results`].
   **/
  'SetBabeRandomnessResults';

export type PalletRandomnessCallLike =
  /**
   * See [`Pallet::set_babe_randomness_results`].
   **/
  'SetBabeRandomnessResults';

export type SpRuntimeBlakeTwo256 = {};

export type PalletConvictionVotingTally = { ayes: bigint; nays: bigint; support: bigint };

/**
 * The `Event` enum of this pallet
 **/
export type PalletWhitelistEvent =
  | { name: 'CallWhitelisted'; data: { callHash: H256 } }
  | { name: 'WhitelistedCallRemoved'; data: { callHash: H256 } }
  | {
      name: 'WhitelistedCallDispatched';
      data: {
        callHash: H256;
        result: Result<FrameSupportDispatchPostDispatchInfo, SpRuntimeDispatchErrorWithPostInfo>;
      };
    };

export type FrameSupportDispatchPostDispatchInfo = {
  actualWeight?: SpWeightsWeightV2Weight | undefined;
  paysFee: FrameSupportDispatchPays;
};

export type SpRuntimeDispatchErrorWithPostInfo = {
  postInfo: FrameSupportDispatchPostDispatchInfo;
  error: DispatchError;
};

/**
 * The `Event` enum of this pallet
 **/
export type PalletCollectiveEvent =
  /**
   * A motion (given hash) has been proposed (by given account) with a threshold (given
   * `MemberCount`).
   **/
  | { name: 'Proposed'; data: { account: AccountId20; proposalIndex: number; proposalHash: H256; threshold: number } }
  /**
   * A motion (given hash) has been voted on by given account, leaving
   * a tally (yes votes and no votes given respectively as `MemberCount`).
   **/
  | { name: 'Voted'; data: { account: AccountId20; proposalHash: H256; voted: boolean; yes: number; no: number } }
  /**
   * A motion was approved by the required threshold.
   **/
  | { name: 'Approved'; data: { proposalHash: H256 } }
  /**
   * A motion was not approved by the required threshold.
   **/
  | { name: 'Disapproved'; data: { proposalHash: H256 } }
  /**
   * A motion was executed; result will be `Ok` if it returned without error.
   **/
  | { name: 'Executed'; data: { proposalHash: H256; result: Result<[], DispatchError> } }
  /**
   * A single member did some action; result will be `Ok` if it returned without error.
   **/
  | { name: 'MemberExecuted'; data: { proposalHash: H256; result: Result<[], DispatchError> } }
  /**
   * A proposal was closed because its threshold was reached or after its duration was up.
   **/
  | { name: 'Closed'; data: { proposalHash: H256; yes: number; no: number } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletTreasuryEvent =
  /**
   * New proposal.
   **/
  | { name: 'Proposed'; data: { proposalIndex: number } }
  /**
   * We have ended a spend period and will now allocate funds.
   **/
  | { name: 'Spending'; data: { budgetRemaining: bigint } }
  /**
   * Some funds have been allocated.
   **/
  | { name: 'Awarded'; data: { proposalIndex: number; award: bigint; account: AccountId20 } }
  /**
   * A proposal was rejected; funds were slashed.
   **/
  | { name: 'Rejected'; data: { proposalIndex: number; slashed: bigint } }
  /**
   * Some of our funds have been burnt.
   **/
  | { name: 'Burnt'; data: { burntFunds: bigint } }
  /**
   * Spending has finished; this is the amount that rolls over until next spend.
   **/
  | { name: 'Rollover'; data: { rolloverBalance: bigint } }
  /**
   * Some funds have been deposited.
   **/
  | { name: 'Deposit'; data: { value: bigint } }
  /**
   * A new spend proposal has been approved.
   **/
  | { name: 'SpendApproved'; data: { proposalIndex: number; amount: bigint; beneficiary: AccountId20 } }
  /**
   * The inactive funds of the pallet have been updated.
   **/
  | { name: 'UpdatedInactive'; data: { reactivated: bigint; deactivated: bigint } }
  /**
   * A new asset spend proposal has been approved.
   **/
  | {
      name: 'AssetSpendApproved';
      data: {
        index: number;
        assetKind: [];
        amount: bigint;
        beneficiary: AccountId20;
        validFrom: number;
        expireAt: number;
      };
    }
  /**
   * An approved spend was voided.
   **/
  | { name: 'AssetSpendVoided'; data: { index: number } }
  /**
   * A payment happened.
   **/
  | { name: 'Paid'; data: { index: number; paymentId: [] } }
  /**
   * A payment failed and can be retried.
   **/
  | { name: 'PaymentFailed'; data: { index: number; paymentId: [] } }
  /**
   * A spend was processed and removed from the storage. It might have been successfully
   * paid or it may have expired.
   **/
  | { name: 'SpendProcessed'; data: { index: number } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletCrowdloanRewardsEvent =
  /**
   * The initial payment of InitializationPayment % was paid
   **/
  | { name: 'InitialPaymentMade'; data: [AccountId20, bigint] }
  /**
   * Someone has proven they made a contribution and associated a native identity with it.
   * Data is the relay account, native account and the total amount of _rewards_ that will be paid
   **/
  | { name: 'NativeIdentityAssociated'; data: [FixedBytes<32>, AccountId20, bigint] }
  /**
   * A contributor has claimed some rewards.
   * Data is the account getting paid and the amount of rewards paid.
   **/
  | { name: 'RewardsPaid'; data: [AccountId20, bigint] }
  /**
   * A contributor has updated the reward address.
   **/
  | { name: 'RewardAddressUpdated'; data: [AccountId20, AccountId20] }
  /**
   * When initializing the reward vec an already initialized account was found
   **/
  | { name: 'InitializedAlreadyInitializedAccount'; data: [FixedBytes<32>, AccountId20 | undefined, bigint] }
  /**
   * When initializing the reward vec an already initialized account was found
   **/
  | { name: 'InitializedAccountWithNotEnoughContribution'; data: [FixedBytes<32>, AccountId20 | undefined, bigint] };

/**
 * The `Event` enum of this pallet
 **/
export type CumulusPalletXcmpQueueEvent =
  /**
   * Some XCM was executed ok.
   **/
  | {
      name: 'Success';
      data: { messageHash: FixedBytes<32>; messageId: FixedBytes<32>; weight: SpWeightsWeightV2Weight };
    }
  /**
   * Some XCM failed.
   **/
  | {
      name: 'Fail';
      data: {
        messageHash: FixedBytes<32>;
        messageId: FixedBytes<32>;
        error: XcmV3TraitsError;
        weight: SpWeightsWeightV2Weight;
      };
    }
  /**
   * Bad XCM version used.
   **/
  | { name: 'BadVersion'; data: { messageHash: FixedBytes<32> } }
  /**
   * Bad XCM format used.
   **/
  | { name: 'BadFormat'; data: { messageHash: FixedBytes<32> } }
  /**
   * An HRMP message was sent to a sibling parachain.
   **/
  | { name: 'XcmpMessageSent'; data: { messageHash: FixedBytes<32> } }
  /**
   * An XCM exceeded the individual message weight budget.
   **/
  | {
      name: 'OverweightEnqueued';
      data: {
        sender: PolkadotParachainPrimitivesPrimitivesId;
        sentAt: number;
        index: bigint;
        required: SpWeightsWeightV2Weight;
      };
    }
  /**
   * An XCM from the overweight queue was executed with the given actual weight used.
   **/
  | { name: 'OverweightServiced'; data: { index: bigint; used: SpWeightsWeightV2Weight } };

/**
 * The `Event` enum of this pallet
 **/
export type CumulusPalletXcmEvent =
  /**
   * Downward message is invalid XCM.
   * \[ id \]
   **/
  | { name: 'InvalidFormat'; data: FixedBytes<32> }
  /**
   * Downward message is unsupported version of XCM.
   * \[ id \]
   **/
  | { name: 'UnsupportedVersion'; data: FixedBytes<32> }
  /**
   * Downward message executed with the given outcome.
   * \[ id, outcome \]
   **/
  | { name: 'ExecutedDownward'; data: [FixedBytes<32>, XcmV3TraitsOutcome] };

export type XcmV3TraitsOutcome =
  | { tag: 'Complete'; value: SpWeightsWeightV2Weight }
  | { tag: 'Incomplete'; value: [SpWeightsWeightV2Weight, XcmV3TraitsError] }
  | { tag: 'Error'; value: XcmV3TraitsError };

/**
 * The `Event` enum of this pallet
 **/
export type CumulusPalletDmpQueueEvent =
  /**
   * Downward message is invalid XCM.
   **/
  | { name: 'InvalidFormat'; data: { messageHash: FixedBytes<32> } }
  /**
   * Downward message is unsupported version of XCM.
   **/
  | { name: 'UnsupportedVersion'; data: { messageHash: FixedBytes<32> } }
  /**
   * Downward message executed with the given outcome.
   **/
  | {
      name: 'ExecutedDownward';
      data: { messageHash: FixedBytes<32>; messageId: FixedBytes<32>; outcome: XcmV3TraitsOutcome };
    }
  /**
   * The weight limit for handling downward messages was reached.
   **/
  | {
      name: 'WeightExhausted';
      data: {
        messageHash: FixedBytes<32>;
        messageId: FixedBytes<32>;
        remainingWeight: SpWeightsWeightV2Weight;
        requiredWeight: SpWeightsWeightV2Weight;
      };
    }
  /**
   * Downward message is overweight and was placed in the overweight queue.
   **/
  | {
      name: 'OverweightEnqueued';
      data: {
        messageHash: FixedBytes<32>;
        messageId: FixedBytes<32>;
        overweightIndex: bigint;
        requiredWeight: SpWeightsWeightV2Weight;
      };
    }
  /**
   * Downward message from the overweight queue was executed.
   **/
  | { name: 'OverweightServiced'; data: { overweightIndex: bigint; weightUsed: SpWeightsWeightV2Weight } }
  /**
   * The maximum number of downward messages was reached.
   **/
  | { name: 'MaxMessagesExhausted'; data: { messageHash: FixedBytes<32> } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletXcmEvent =
  /**
   * Execution of an XCM message was attempted.
   **/
  | { name: 'Attempted'; data: { outcome: XcmV3TraitsOutcome } }
  /**
   * A XCM message was sent.
   **/
  | {
      name: 'Sent';
      data: {
        origin: StagingXcmV3MultilocationMultiLocation;
        destination: StagingXcmV3MultilocationMultiLocation;
        message: XcmV3Xcm;
        messageId: FixedBytes<32>;
      };
    }
  /**
   * Query response received which does not match a registered query. This may be because a
   * matching query was never registered, it may be because it is a duplicate response, or
   * because the query timed out.
   **/
  | { name: 'UnexpectedResponse'; data: { origin: StagingXcmV3MultilocationMultiLocation; queryId: bigint } }
  /**
   * Query response has been received and is ready for taking with `take_response`. There is
   * no registered notification call.
   **/
  | { name: 'ResponseReady'; data: { queryId: bigint; response: XcmV3Response } }
  /**
   * Query response has been received and query is removed. The registered notification has
   * been dispatched and executed successfully.
   **/
  | { name: 'Notified'; data: { queryId: bigint; palletIndex: number; callIndex: number } }
  /**
   * Query response has been received and query is removed. The registered notification
   * could not be dispatched because the dispatch weight is greater than the maximum weight
   * originally budgeted by this runtime for the query result.
   **/
  | {
      name: 'NotifyOverweight';
      data: {
        queryId: bigint;
        palletIndex: number;
        callIndex: number;
        actualWeight: SpWeightsWeightV2Weight;
        maxBudgetedWeight: SpWeightsWeightV2Weight;
      };
    }
  /**
   * Query response has been received and query is removed. There was a general error with
   * dispatching the notification call.
   **/
  | { name: 'NotifyDispatchError'; data: { queryId: bigint; palletIndex: number; callIndex: number } }
  /**
   * Query response has been received and query is removed. The dispatch was unable to be
   * decoded into a `Call`; this might be due to dispatch function having a signature which
   * is not `(origin, QueryId, Response)`.
   **/
  | { name: 'NotifyDecodeFailed'; data: { queryId: bigint; palletIndex: number; callIndex: number } }
  /**
   * Expected query response has been received but the origin location of the response does
   * not match that expected. The query remains registered for a later, valid, response to
   * be received and acted upon.
   **/
  | {
      name: 'InvalidResponder';
      data: {
        origin: StagingXcmV3MultilocationMultiLocation;
        queryId: bigint;
        expectedLocation?: StagingXcmV3MultilocationMultiLocation | undefined;
      };
    }
  /**
   * Expected query response has been received but the expected origin location placed in
   * storage by this runtime previously cannot be decoded. The query remains registered.
   *
   * This is unexpected (since a location placed in storage in a previously executing
   * runtime should be readable prior to query timeout) and dangerous since the possibly
   * valid response will be dropped. Manual governance intervention is probably going to be
   * needed.
   **/
  | { name: 'InvalidResponderVersion'; data: { origin: StagingXcmV3MultilocationMultiLocation; queryId: bigint } }
  /**
   * Received query response has been read and removed.
   **/
  | { name: 'ResponseTaken'; data: { queryId: bigint } }
  /**
   * Some assets have been placed in an asset trap.
   **/
  | {
      name: 'AssetsTrapped';
      data: { hash: H256; origin: StagingXcmV3MultilocationMultiLocation; assets: XcmVersionedMultiAssets };
    }
  /**
   * An XCM version change notification message has been attempted to be sent.
   *
   * The cost of sending it (borne by the chain) is included.
   **/
  | {
      name: 'VersionChangeNotified';
      data: {
        destination: StagingXcmV3MultilocationMultiLocation;
        result: number;
        cost: XcmV3MultiassetMultiAssets;
        messageId: FixedBytes<32>;
      };
    }
  /**
   * The supported version of a location has been changed. This might be through an
   * automatic notification or a manual intervention.
   **/
  | { name: 'SupportedVersionChanged'; data: { location: StagingXcmV3MultilocationMultiLocation; version: number } }
  /**
   * A given location which had a version change subscription was dropped owing to an error
   * sending the notification to it.
   **/
  | {
      name: 'NotifyTargetSendFail';
      data: { location: StagingXcmV3MultilocationMultiLocation; queryId: bigint; error: XcmV3TraitsError };
    }
  /**
   * A given location which had a version change subscription was dropped owing to an error
   * migrating the location to our new XCM format.
   **/
  | { name: 'NotifyTargetMigrationFail'; data: { location: XcmVersionedMultiLocation; queryId: bigint } }
  /**
   * Expected query response has been received but the expected querier location placed in
   * storage by this runtime previously cannot be decoded. The query remains registered.
   *
   * This is unexpected (since a location placed in storage in a previously executing
   * runtime should be readable prior to query timeout) and dangerous since the possibly
   * valid response will be dropped. Manual governance intervention is probably going to be
   * needed.
   **/
  | { name: 'InvalidQuerierVersion'; data: { origin: StagingXcmV3MultilocationMultiLocation; queryId: bigint } }
  /**
   * Expected query response has been received but the querier location of the response does
   * not match the expected. The query remains registered for a later, valid, response to
   * be received and acted upon.
   **/
  | {
      name: 'InvalidQuerier';
      data: {
        origin: StagingXcmV3MultilocationMultiLocation;
        queryId: bigint;
        expectedQuerier: StagingXcmV3MultilocationMultiLocation;
        maybeActualQuerier?: StagingXcmV3MultilocationMultiLocation | undefined;
      };
    }
  /**
   * A remote has requested XCM version change notification from us and we have honored it.
   * A version information message is sent to them and its cost is included.
   **/
  | {
      name: 'VersionNotifyStarted';
      data: {
        destination: StagingXcmV3MultilocationMultiLocation;
        cost: XcmV3MultiassetMultiAssets;
        messageId: FixedBytes<32>;
      };
    }
  /**
   * We have requested that a remote chain send us XCM version change notifications.
   **/
  | {
      name: 'VersionNotifyRequested';
      data: {
        destination: StagingXcmV3MultilocationMultiLocation;
        cost: XcmV3MultiassetMultiAssets;
        messageId: FixedBytes<32>;
      };
    }
  /**
   * We have requested that a remote chain stops sending us XCM version change
   * notifications.
   **/
  | {
      name: 'VersionNotifyUnrequested';
      data: {
        destination: StagingXcmV3MultilocationMultiLocation;
        cost: XcmV3MultiassetMultiAssets;
        messageId: FixedBytes<32>;
      };
    }
  /**
   * Fees were paid from a location for an operation (often for using `SendXcm`).
   **/
  | { name: 'FeesPaid'; data: { paying: StagingXcmV3MultilocationMultiLocation; fees: XcmV3MultiassetMultiAssets } }
  /**
   * Some assets have been claimed from an asset trap
   **/
  | {
      name: 'AssetsClaimed';
      data: { hash: H256; origin: StagingXcmV3MultilocationMultiLocation; assets: XcmVersionedMultiAssets };
    };

/**
 * The `Event` enum of this pallet
 **/
export type PalletAssetsEvent =
  /**
   * Some asset class was created.
   **/
  | { name: 'Created'; data: { assetId: bigint; creator: AccountId20; owner: AccountId20 } }
  /**
   * Some assets were issued.
   **/
  | { name: 'Issued'; data: { assetId: bigint; owner: AccountId20; amount: bigint } }
  /**
   * Some assets were transferred.
   **/
  | { name: 'Transferred'; data: { assetId: bigint; from: AccountId20; to: AccountId20; amount: bigint } }
  /**
   * Some assets were destroyed.
   **/
  | { name: 'Burned'; data: { assetId: bigint; owner: AccountId20; balance: bigint } }
  /**
   * The management team changed.
   **/
  | { name: 'TeamChanged'; data: { assetId: bigint; issuer: AccountId20; admin: AccountId20; freezer: AccountId20 } }
  /**
   * The owner changed.
   **/
  | { name: 'OwnerChanged'; data: { assetId: bigint; owner: AccountId20 } }
  /**
   * Some account `who` was frozen.
   **/
  | { name: 'Frozen'; data: { assetId: bigint; who: AccountId20 } }
  /**
   * Some account `who` was thawed.
   **/
  | { name: 'Thawed'; data: { assetId: bigint; who: AccountId20 } }
  /**
   * Some asset `asset_id` was frozen.
   **/
  | { name: 'AssetFrozen'; data: { assetId: bigint } }
  /**
   * Some asset `asset_id` was thawed.
   **/
  | { name: 'AssetThawed'; data: { assetId: bigint } }
  /**
   * Accounts were destroyed for given asset.
   **/
  | { name: 'AccountsDestroyed'; data: { assetId: bigint; accountsDestroyed: number; accountsRemaining: number } }
  /**
   * Approvals were destroyed for given asset.
   **/
  | { name: 'ApprovalsDestroyed'; data: { assetId: bigint; approvalsDestroyed: number; approvalsRemaining: number } }
  /**
   * An asset class is in the process of being destroyed.
   **/
  | { name: 'DestructionStarted'; data: { assetId: bigint } }
  /**
   * An asset class was destroyed.
   **/
  | { name: 'Destroyed'; data: { assetId: bigint } }
  /**
   * Some asset class was force-created.
   **/
  | { name: 'ForceCreated'; data: { assetId: bigint; owner: AccountId20 } }
  /**
   * New metadata has been set for an asset.
   **/
  | { name: 'MetadataSet'; data: { assetId: bigint; name: Bytes; symbol: Bytes; decimals: number; isFrozen: boolean } }
  /**
   * Metadata has been cleared for an asset.
   **/
  | { name: 'MetadataCleared'; data: { assetId: bigint } }
  /**
   * (Additional) funds have been approved for transfer to a destination account.
   **/
  | { name: 'ApprovedTransfer'; data: { assetId: bigint; source: AccountId20; delegate: AccountId20; amount: bigint } }
  /**
   * An approval for account `delegate` was cancelled by `owner`.
   **/
  | { name: 'ApprovalCancelled'; data: { assetId: bigint; owner: AccountId20; delegate: AccountId20 } }
  /**
   * An `amount` was transferred in its entirety from `owner` to `destination` by
   * the approved `delegate`.
   **/
  | {
      name: 'TransferredApproved';
      data: { assetId: bigint; owner: AccountId20; delegate: AccountId20; destination: AccountId20; amount: bigint };
    }
  /**
   * An asset has had its attributes changed by the `Force` origin.
   **/
  | { name: 'AssetStatusChanged'; data: { assetId: bigint } }
  /**
   * The min_balance of an asset has been updated by the asset owner.
   **/
  | { name: 'AssetMinBalanceChanged'; data: { assetId: bigint; newMinBalance: bigint } }
  /**
   * Some account `who` was created with a deposit from `depositor`.
   **/
  | { name: 'Touched'; data: { assetId: bigint; who: AccountId20; depositor: AccountId20 } }
  /**
   * Some account `who` was blocked.
   **/
  | { name: 'Blocked'; data: { assetId: bigint; who: AccountId20 } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletAssetManagerEvent =
  /**
   * New asset with the asset manager is registered
   **/
  | {
      name: 'ForeignAssetRegistered';
      data: {
        assetId: bigint;
        asset: MoonbeamRuntimeXcmConfigAssetType;
        metadata: MoonbeamRuntimeAssetConfigAssetRegistrarMetadata;
      };
    }
  /**
   * Changed the amount of units we are charging per execution second for a given asset
   **/
  | { name: 'UnitsPerSecondChanged'; data: { assetType: MoonbeamRuntimeXcmConfigAssetType; unitsPerSecond: bigint } }
  /**
   * Changed the xcm type mapping for a given asset id
   **/
  | { name: 'ForeignAssetTypeChanged'; data: { assetId: bigint; newAssetType: MoonbeamRuntimeXcmConfigAssetType } }
  /**
   * Removed all information related to an assetId
   **/
  | { name: 'ForeignAssetRemoved'; data: { assetId: bigint; assetType: MoonbeamRuntimeXcmConfigAssetType } }
  /**
   * Supported asset type for fee payment removed
   **/
  | { name: 'SupportedAssetRemoved'; data: { assetType: MoonbeamRuntimeXcmConfigAssetType } }
  /**
   * Local asset was created
   **/
  | { name: 'LocalAssetRegistered'; data: { assetId: bigint; creator: AccountId20; owner: AccountId20 } }
  /**
   * Removed all information related to an assetId and destroyed asset
   **/
  | { name: 'ForeignAssetDestroyed'; data: { assetId: bigint; assetType: MoonbeamRuntimeXcmConfigAssetType } }
  /**
   * Removed all information related to an assetId and destroyed asset
   **/
  | { name: 'LocalAssetDestroyed'; data: { assetId: bigint } };

/**
 * The `Event` enum of this pallet
 **/
export type OrmlXtokensModuleEvent =
  /**
   * Transferred `MultiAsset` with fee.
   **/
  {
    name: 'TransferredMultiAssets';
    data: {
      sender: AccountId20;
      assets: XcmV3MultiassetMultiAssets;
      fee: XcmV3MultiassetMultiAsset;
      dest: StagingXcmV3MultilocationMultiLocation;
    };
  };

/**
 * The `Event` enum of this pallet
 **/
export type PalletXcmTransactorEvent =
  /**
   * Transacted the inner call through a derivative account in a destination chain.
   **/
  | {
      name: 'TransactedDerivative';
      data: { accountId: AccountId20; dest: StagingXcmV3MultilocationMultiLocation; call: Bytes; index: number };
    }
  /**
   * Transacted the call through the sovereign account in a destination chain.
   **/
  | {
      name: 'TransactedSovereign';
      data: { feePayer: AccountId20; dest: StagingXcmV3MultilocationMultiLocation; call: Bytes };
    }
  /**
   * Transacted the call through a signed account in a destination chain.
   **/
  | {
      name: 'TransactedSigned';
      data: { feePayer: AccountId20; dest: StagingXcmV3MultilocationMultiLocation; call: Bytes };
    }
  /**
   * Registered a derivative index for an account id.
   **/
  | { name: 'RegisteredDerivative'; data: { accountId: AccountId20; index: number } }
  | { name: 'DeRegisteredDerivative'; data: { index: number } }
  /**
   * Transact failed
   **/
  | { name: 'TransactFailed'; data: { error: XcmV3TraitsError } }
  /**
   * Changed the transact info of a location
   **/
  | {
      name: 'TransactInfoChanged';
      data: {
        location: StagingXcmV3MultilocationMultiLocation;
        remoteInfo: PalletXcmTransactorRemoteTransactInfoWithMaxWeight;
      };
    }
  /**
   * Removed the transact info of a location
   **/
  | { name: 'TransactInfoRemoved'; data: { location: StagingXcmV3MultilocationMultiLocation } }
  /**
   * Set dest fee per second
   **/
  | {
      name: 'DestFeePerSecondChanged';
      data: { location: StagingXcmV3MultilocationMultiLocation; feePerSecond: bigint };
    }
  /**
   * Remove dest fee per second
   **/
  | { name: 'DestFeePerSecondRemoved'; data: { location: StagingXcmV3MultilocationMultiLocation } }
  /**
   * HRMP manage action succesfully sent
   **/
  | { name: 'HrmpManagementSent'; data: { action: PalletXcmTransactorHrmpOperation } };

export type PalletXcmTransactorRemoteTransactInfoWithMaxWeight = {
  transactExtraWeight: SpWeightsWeightV2Weight;
  maxWeight: SpWeightsWeightV2Weight;
  transactExtraWeightSigned?: SpWeightsWeightV2Weight | undefined;
};

/**
 * The `Event` enum of this pallet
 **/
export type PalletRandomnessEvent =
  | {
      name: 'RandomnessRequestedBabeEpoch';
      data: {
        id: bigint;
        refundAddress: H160;
        contractAddress: H160;
        fee: bigint;
        gasLimit: bigint;
        numWords: number;
        salt: H256;
        earliestEpoch: bigint;
      };
    }
  | {
      name: 'RandomnessRequestedLocal';
      data: {
        id: bigint;
        refundAddress: H160;
        contractAddress: H160;
        fee: bigint;
        gasLimit: bigint;
        numWords: number;
        salt: H256;
        earliestBlock: number;
      };
    }
  | { name: 'RequestFulfilled'; data: { id: bigint } }
  | { name: 'RequestFeeIncreased'; data: { id: bigint; newFee: bigint } }
  | { name: 'RequestExpirationExecuted'; data: { id: bigint } };

export type FrameSystemLastRuntimeUpgradeInfo = { specVersion: number; specName: string };

export type FrameSystemLimitsBlockWeights = {
  baseBlock: SpWeightsWeightV2Weight;
  maxBlock: SpWeightsWeightV2Weight;
  perClass: FrameSupportDispatchPerDispatchClassWeightsPerClass;
};

export type FrameSupportDispatchPerDispatchClassWeightsPerClass = {
  normal: FrameSystemLimitsWeightsPerClass;
  operational: FrameSystemLimitsWeightsPerClass;
  mandatory: FrameSystemLimitsWeightsPerClass;
};

export type FrameSystemLimitsWeightsPerClass = {
  baseExtrinsic: SpWeightsWeightV2Weight;
  maxExtrinsic?: SpWeightsWeightV2Weight | undefined;
  maxTotal?: SpWeightsWeightV2Weight | undefined;
  reserved?: SpWeightsWeightV2Weight | undefined;
};

export type FrameSystemLimitsBlockLength = { max: FrameSupportDispatchPerDispatchClassU32 };

export type FrameSupportDispatchPerDispatchClassU32 = { normal: number; operational: number; mandatory: number };

export type SpWeightsRuntimeDbWeight = { read: bigint; write: bigint };

/**
 * Error for the System pallet
 **/
export type FrameSystemError =
  /**
   * The name of specification does not match between the current runtime
   * and the new runtime.
   **/
  | 'InvalidSpecName'
  /**
   * The specification version is not allowed to decrease between the current runtime
   * and the new runtime.
   **/
  | 'SpecVersionNeedsToIncrease'
  /**
   * Failed to extract the runtime version from the new runtime.
   *
   * Either calling `Core_version` or decoding `RuntimeVersion` failed.
   **/
  | 'FailedToExtractRuntimeVersion'
  /**
   * Suicide called when the account has non-default composite data.
   **/
  | 'NonDefaultComposite'
  /**
   * There is a non-zero reference count preventing the account from being purged.
   **/
  | 'NonZeroRefCount'
  /**
   * The origin filter prevent the call to be dispatched.
   **/
  | 'CallFiltered';

export type CumulusPalletParachainSystemUnincludedSegmentAncestor = {
  usedBandwidth: CumulusPalletParachainSystemUnincludedSegmentUsedBandwidth;
  paraHeadHash?: H256 | undefined;
  consumedGoAheadSignal?: PolkadotPrimitivesV6UpgradeGoAhead | undefined;
};

export type CumulusPalletParachainSystemUnincludedSegmentUsedBandwidth = {
  umpMsgCount: number;
  umpTotalBytes: number;
  hrmpOutgoing: Array<
    [PolkadotParachainPrimitivesPrimitivesId, CumulusPalletParachainSystemUnincludedSegmentHrmpChannelUpdate]
  >;
};

export type CumulusPalletParachainSystemUnincludedSegmentHrmpChannelUpdate = { msgCount: number; totalBytes: number };

export type PolkadotPrimitivesV6UpgradeGoAhead = 'Abort' | 'GoAhead';

export type CumulusPalletParachainSystemUnincludedSegmentSegmentTracker = {
  usedBandwidth: CumulusPalletParachainSystemUnincludedSegmentUsedBandwidth;
  hrmpWatermark?: number | undefined;
  consumedGoAheadSignal?: PolkadotPrimitivesV6UpgradeGoAhead | undefined;
};

export type PolkadotPrimitivesV6UpgradeRestriction = 'Present';

export type CumulusPalletParachainSystemRelayStateSnapshotMessagingStateSnapshot = {
  dmqMqcHead: H256;
  relayDispatchQueueRemainingCapacity: CumulusPalletParachainSystemRelayStateSnapshotRelayDispatchQueueRemainingCapacity;
  ingressChannels: Array<[PolkadotParachainPrimitivesPrimitivesId, PolkadotPrimitivesV6AbridgedHrmpChannel]>;
  egressChannels: Array<[PolkadotParachainPrimitivesPrimitivesId, PolkadotPrimitivesV6AbridgedHrmpChannel]>;
};

export type CumulusPalletParachainSystemRelayStateSnapshotRelayDispatchQueueRemainingCapacity = {
  remainingCount: number;
  remainingSize: number;
};

export type PolkadotPrimitivesV6AbridgedHrmpChannel = {
  maxCapacity: number;
  maxTotalSize: number;
  maxMessageSize: number;
  msgCount: number;
  totalSize: number;
  mqcHead?: H256 | undefined;
};

export type PolkadotPrimitivesV6AbridgedHostConfiguration = {
  maxCodeSize: number;
  maxHeadDataSize: number;
  maxUpwardQueueCount: number;
  maxUpwardQueueSize: number;
  maxUpwardMessageSize: number;
  maxUpwardMessageNumPerCandidate: number;
  hrmpMaxMessageNumPerCandidate: number;
  validationUpgradeCooldown: number;
  validationUpgradeDelay: number;
  asyncBackingParams: PolkadotPrimitivesV6AsyncBackingAsyncBackingParams;
};

export type PolkadotPrimitivesV6AsyncBackingAsyncBackingParams = {
  maxCandidateDepth: number;
  allowedAncestryLen: number;
};

export type CumulusPrimitivesParachainInherentMessageQueueChain = H256;

export type PolkadotCorePrimitivesOutboundHrmpMessage = {
  recipient: PolkadotParachainPrimitivesPrimitivesId;
  data: Bytes;
};

export type CumulusPalletParachainSystemCodeUpgradeAuthorization = { codeHash: H256; checkVersion: boolean };

/**
 * The `Error` enum of this pallet.
 **/
export type CumulusPalletParachainSystemError =
  /**
   * Attempt to upgrade validation function while existing upgrade pending.
   **/
  | 'OverlappingUpgrades'
  /**
   * Polkadot currently prohibits this parachain from upgrading its validation function.
   **/
  | 'ProhibitedByPolkadot'
  /**
   * The supplied validation function has compiled into a blob larger than Polkadot is
   * willing to run.
   **/
  | 'TooBig'
  /**
   * The inherent which supplies the validation data did not run this block.
   **/
  | 'ValidationDataNotAvailable'
  /**
   * The inherent which supplies the host configuration did not run this block.
   **/
  | 'HostConfigurationNotAvailable'
  /**
   * No validation function upgrade is currently scheduled.
   **/
  | 'NotScheduled'
  /**
   * No code upgrade has been authorized.
   **/
  | 'NothingAuthorized'
  /**
   * The given code upgrade has not been authorized.
   **/
  | 'Unauthorized';

export type PalletBalancesBalanceLock = { id: FixedBytes<8>; amount: bigint; reasons: PalletBalancesReasons };

export type PalletBalancesReasons = 'Fee' | 'Misc' | 'All';

export type PalletBalancesReserveData = { id: FixedBytes<4>; amount: bigint };

export type PalletBalancesIdAmount = { id: MoonbeamRuntimeRuntimeHoldReason; amount: bigint };

export type MoonbeamRuntimeRuntimeHoldReason = { tag: 'Preimage'; value: PalletPreimageHoldReason };

export type PalletPreimageHoldReason = 'Preimage';

export type PalletBalancesIdAmount002 = { id: []; amount: bigint };

/**
 * The `Error` enum of this pallet.
 **/
export type PalletBalancesError =
  /**
   * Vesting balance too high to send value.
   **/
  | 'VestingBalance'
  /**
   * Account liquidity restrictions prevent withdrawal.
   **/
  | 'LiquidityRestrictions'
  /**
   * Balance too low to send value.
   **/
  | 'InsufficientBalance'
  /**
   * Value too low to create account due to existential deposit.
   **/
  | 'ExistentialDeposit'
  /**
   * Transfer/payment would kill account.
   **/
  | 'Expendability'
  /**
   * A vesting schedule already exists for this account.
   **/
  | 'ExistingVestingSchedule'
  /**
   * Beneficiary account must pre-exist.
   **/
  | 'DeadAccount'
  /**
   * Number of named reserves exceed `MaxReserves`.
   **/
  | 'TooManyReserves'
  /**
   * Number of holds exceed `MaxHolds`.
   **/
  | 'TooManyHolds'
  /**
   * Number of freezes exceed `MaxFreezes`.
   **/
  | 'TooManyFreezes';

export type PalletTransactionPaymentReleases = 'V1Ancient' | 'V2';

export type PalletParachainStakingParachainBondConfig = { account: AccountId20; percent: Percent };

export type PalletParachainStakingRoundInfo = { current: number; first: number; length: number };

export type PalletParachainStakingDelegator = {
  id: AccountId20;
  delegations: PalletParachainStakingSetOrderedSet;
  total: bigint;
  lessTotal: bigint;
  status: PalletParachainStakingDelegatorStatus;
};

export type PalletParachainStakingSetOrderedSet = Array<PalletParachainStakingBond>;

export type PalletParachainStakingBond = { owner: AccountId20; amount: bigint };

export type PalletParachainStakingDelegatorStatus = { tag: 'Active' } | { tag: 'Leaving'; value: number };

export type PalletParachainStakingCandidateMetadata = {
  bond: bigint;
  delegationCount: number;
  totalCounted: bigint;
  lowestTopDelegationAmount: bigint;
  highestBottomDelegationAmount: bigint;
  lowestBottomDelegationAmount: bigint;
  topCapacity: PalletParachainStakingCapacityStatus;
  bottomCapacity: PalletParachainStakingCapacityStatus;
  request?: PalletParachainStakingCandidateBondLessRequest | undefined;
  status: PalletParachainStakingCollatorStatus;
};

export type PalletParachainStakingCapacityStatus = 'Full' | 'Empty' | 'Partial';

export type PalletParachainStakingCandidateBondLessRequest = { amount: bigint; whenExecutable: number };

export type PalletParachainStakingCollatorStatus =
  | { tag: 'Active' }
  | { tag: 'Idle' }
  | { tag: 'Leaving'; value: number };

export type PalletParachainStakingDelegationRequestsScheduledRequest = {
  delegator: AccountId20;
  whenExecutable: number;
  action: PalletParachainStakingDelegationRequestsDelegationAction;
};

export type PalletParachainStakingAutoCompoundAutoCompoundConfig = { delegator: AccountId20; value: Percent };

export type PalletParachainStakingDelegations = { delegations: Array<PalletParachainStakingBond>; total: bigint };

export type PalletParachainStakingSetBoundedOrderedSet = Array<PalletParachainStakingBond>;

export type PalletParachainStakingCollatorSnapshot = {
  bond: bigint;
  delegations: Array<PalletParachainStakingBondWithAutoCompound>;
  total: bigint;
};

export type PalletParachainStakingBondWithAutoCompound = { owner: AccountId20; amount: bigint; autoCompound: Percent };

export type PalletParachainStakingDelayedPayout = {
  roundIssuance: bigint;
  totalStakingReward: bigint;
  collatorCommission: Perbill;
};

export type PalletParachainStakingInflationInflationInfo = {
  expect: { min: bigint; ideal: bigint; max: bigint };
  annual: { min: Perbill; ideal: Perbill; max: Perbill };
  round: { min: Perbill; ideal: Perbill; max: Perbill };
};

/**
 * The `Error` enum of this pallet.
 **/
export type PalletParachainStakingError =
  | 'DelegatorDNE'
  | 'DelegatorDNEinTopNorBottom'
  | 'DelegatorDNEInDelegatorSet'
  | 'CandidateDNE'
  | 'DelegationDNE'
  | 'DelegatorExists'
  | 'CandidateExists'
  | 'CandidateBondBelowMin'
  | 'InsufficientBalance'
  | 'DelegatorBondBelowMin'
  | 'DelegationBelowMin'
  | 'AlreadyOffline'
  | 'AlreadyActive'
  | 'DelegatorAlreadyLeaving'
  | 'DelegatorNotLeaving'
  | 'DelegatorCannotLeaveYet'
  | 'CannotDelegateIfLeaving'
  | 'CandidateAlreadyLeaving'
  | 'CandidateNotLeaving'
  | 'CandidateCannotLeaveYet'
  | 'CannotGoOnlineIfLeaving'
  | 'ExceedMaxDelegationsPerDelegator'
  | 'AlreadyDelegatedCandidate'
  | 'InvalidSchedule'
  | 'CannotSetBelowMin'
  | 'RoundLengthMustBeGreaterThanTotalSelectedCollators'
  | 'NoWritingSameValue'
  | 'TooLowCandidateCountWeightHintJoinCandidates'
  | 'TooLowCandidateCountWeightHintCancelLeaveCandidates'
  | 'TooLowCandidateCountToLeaveCandidates'
  | 'TooLowDelegationCountToDelegate'
  | 'TooLowCandidateDelegationCountToDelegate'
  | 'TooLowCandidateDelegationCountToLeaveCandidates'
  | 'TooLowDelegationCountToLeaveDelegators'
  | 'PendingCandidateRequestsDNE'
  | 'PendingCandidateRequestAlreadyExists'
  | 'PendingCandidateRequestNotDueYet'
  | 'PendingDelegationRequestDNE'
  | 'PendingDelegationRequestAlreadyExists'
  | 'PendingDelegationRequestNotDueYet'
  | 'CannotDelegateLessThanOrEqualToLowestBottomWhenFull'
  | 'PendingDelegationRevoke'
  | 'TooLowDelegationCountToAutoCompound'
  | 'TooLowCandidateAutoCompoundingDelegationCountToAutoCompound'
  | 'TooLowCandidateAutoCompoundingDelegationCountToDelegate'
  | 'TooLowCollatorCountToNotifyAsInactive'
  | 'CannotBeNotifiedAsInactive'
  | 'TooLowCandidateAutoCompoundingDelegationCountToLeaveCandidates'
  | 'TooLowCandidateCountWeightHint'
  | 'TooLowCandidateCountWeightHintGoOffline'
  | 'CandidateLimitReached'
  | 'CannotSetAboveMaxCandidates'
  | 'RemovedCall'
  | 'MarkingOfflineNotEnabled'
  | 'CurrentRoundTooLow';

/**
 * The `Error` enum of this pallet.
 **/
export type PalletAuthorInherentError =
  /**
   * Author already set in block.
   **/
  | 'AuthorAlreadySet'
  /**
   * No AccountId was found to be associated with this author
   **/
  | 'NoAccountId'
  /**
   * The author in the inherent is not an eligible author.
   **/
  | 'CannotBeAuthor';

export type PalletAuthorMappingRegistrationInfo = {
  account: AccountId20;
  deposit: bigint;
  keys: SessionKeysPrimitivesVrfVrfCryptoPublic;
};

/**
 * An error that can occur while executing the mapping pallet's logic.
 **/
export type PalletAuthorMappingError =
  /**
   * The association can't be cleared because it is not found.
   **/
  | 'AssociationNotFound'
  /**
   * The association can't be cleared because it belongs to another account.
   **/
  | 'NotYourAssociation'
  /**
   * This account cannot set an author because it cannon afford the security deposit
   **/
  | 'CannotAffordSecurityDeposit'
  /**
   * The NimbusId in question is already associated and cannot be overwritten
   **/
  | 'AlreadyAssociated'
  /**
   * No existing NimbusId can be found for the account
   **/
  | 'OldAuthorIdNotFound'
  /**
   * Keys have wrong size
   **/
  | 'WrongKeySize'
  /**
   * Failed to decode NimbusId for `set_keys`
   **/
  | 'DecodeNimbusFailed'
  /**
   * Failed to decode T::Keys for `set_keys`
   **/
  | 'DecodeKeysFailed';

export type PalletMoonbeamOrbitersCollatorPoolInfo = {
  orbiters: Array<AccountId20>;
  maybeCurrentOrbiter?: PalletMoonbeamOrbitersCurrentOrbiter | undefined;
  nextOrbiter: number;
};

export type PalletMoonbeamOrbitersCurrentOrbiter = { accountId: AccountId20; removed: boolean };

/**
 * An error that can occur while executing this pallet's extrinsics.
 **/
export type PalletMoonbeamOrbitersError =
  /**
   * The collator is already added in orbiters program.
   **/
  | 'CollatorAlreadyAdded'
  /**
   * This collator is not in orbiters program.
   **/
  | 'CollatorNotFound'
  /**
   * There are already too many orbiters associated with this collator.
   **/
  | 'CollatorPoolTooLarge'
  /**
   * There are more collator pools than the number specified in the parameter.
   **/
  | 'CollatorsPoolCountTooLow'
  /**
   * The minimum deposit required to register as an orbiter has not yet been included in the
   * onchain storage
   **/
  | 'MinOrbiterDepositNotSet'
  /**
   * This orbiter is already associated with this collator.
   **/
  | 'OrbiterAlreadyInPool'
  /**
   * This orbiter has not made a deposit
   **/
  | 'OrbiterDepositNotFound'
  /**
   * This orbiter is not found
   **/
  | 'OrbiterNotFound'
  /**
   * The orbiter is still at least in one pool
   **/
  | 'OrbiterStillInAPool';

/**
 * The `Error` enum of this pallet.
 **/
export type PalletUtilityError =
  /**
   * Too many calls batched.
   **/
  'TooManyCalls';

export type PalletProxyProxyDefinition = { delegate: AccountId20; proxyType: MoonbeamRuntimeProxyType; delay: number };

export type PalletProxyAnnouncement = { real: AccountId20; callHash: H256; height: number };

/**
 * The `Error` enum of this pallet.
 **/
export type PalletProxyError =
  /**
   * There are too many proxies registered or too many announcements pending.
   **/
  | 'TooMany'
  /**
   * Proxy registration not found.
   **/
  | 'NotFound'
  /**
   * Sender is not a proxy of the account to be proxied.
   **/
  | 'NotProxy'
  /**
   * A call which is incompatible with the proxy type's filter was attempted.
   **/
  | 'Unproxyable'
  /**
   * Account is already a proxy.
   **/
  | 'Duplicate'
  /**
   * Call may not be made by proxy because it may escalate its privileges.
   **/
  | 'NoPermission'
  /**
   * Announcement, if made at all, was made too recently.
   **/
  | 'Unannounced'
  /**
   * Cannot add self as proxy.
   **/
  | 'NoSelfProxy';

/**
 * An error that can occur while executing this pallet's extrinsics.
 **/
export type PalletMaintenanceModeError =
  /**
   * The chain cannot enter maintenance mode because it is already in maintenance mode
   **/
  | 'AlreadyInMaintenanceMode'
  /**
   * The chain cannot resume normal operation because it is not in maintenance mode
   **/
  | 'NotInMaintenanceMode';

export type PalletIdentityRegistration = {
  judgements: Array<[number, PalletIdentityJudgement]>;
  deposit: bigint;
  info: PalletIdentitySimpleIdentityInfo;
};

export type PalletIdentityRegistrarInfo = { account: AccountId20; fee: bigint; fields: PalletIdentityBitFlags };

/**
 * The `Error` enum of this pallet.
 **/
export type PalletIdentityError =
  /**
   * Too many subs-accounts.
   **/
  | 'TooManySubAccounts'
  /**
   * Account isn't found.
   **/
  | 'NotFound'
  /**
   * Account isn't named.
   **/
  | 'NotNamed'
  /**
   * Empty index.
   **/
  | 'EmptyIndex'
  /**
   * Fee is changed.
   **/
  | 'FeeChanged'
  /**
   * No identity found.
   **/
  | 'NoIdentity'
  /**
   * Sticky judgement.
   **/
  | 'StickyJudgement'
  /**
   * Judgement given.
   **/
  | 'JudgementGiven'
  /**
   * Invalid judgement.
   **/
  | 'InvalidJudgement'
  /**
   * The index is invalid.
   **/
  | 'InvalidIndex'
  /**
   * The target is invalid.
   **/
  | 'InvalidTarget'
  /**
   * Too many additional fields.
   **/
  | 'TooManyFields'
  /**
   * Maximum amount of registrars reached. Cannot add any more.
   **/
  | 'TooManyRegistrars'
  /**
   * Account ID is already named.
   **/
  | 'AlreadyClaimed'
  /**
   * Sender is not a sub-account.
   **/
  | 'NotSub'
  /**
   * Sub-account isn't owned by sender.
   **/
  | 'NotOwned'
  /**
   * The provided judgement was for a different identity.
   **/
  | 'JudgementForDifferentIdentity'
  /**
   * Error that occurs when there is an issue paying for judgement.
   **/
  | 'JudgementPaymentFailed';

/**
 * The `Error` enum of this pallet.
 **/
export type PalletMigrationsError =
  /**
   * Missing preimage in original democracy storage
   **/
  | 'PreimageMissing'
  /**
   * Provided upper bound is too low.
   **/
  | 'WrongUpperBound'
  /**
   * Preimage is larger than the new max size.
   **/
  | 'PreimageIsTooBig'
  /**
   * Preimage already exists in the new storage.
   **/
  | 'PreimageAlreadyExists';

export type PalletMultisigMultisig = {
  when: PalletMultisigTimepoint;
  deposit: bigint;
  depositor: AccountId20;
  approvals: Array<AccountId20>;
};

/**
 * The `Error` enum of this pallet.
 **/
export type PalletMultisigError =
  /**
   * Threshold must be 2 or greater.
   **/
  | 'MinimumThreshold'
  /**
   * Call is already approved by this signatory.
   **/
  | 'AlreadyApproved'
  /**
   * Call doesn't need any (more) approvals.
   **/
  | 'NoApprovalsNeeded'
  /**
   * There are too few signatories in the list.
   **/
  | 'TooFewSignatories'
  /**
   * There are too many signatories in the list.
   **/
  | 'TooManySignatories'
  /**
   * The signatories were provided out of order; they should be ordered.
   **/
  | 'SignatoriesOutOfOrder'
  /**
   * The sender was contained in the other signatories; it shouldn't be.
   **/
  | 'SenderInSignatories'
  /**
   * Multisig operation not found when attempting to cancel.
   **/
  | 'NotFound'
  /**
   * Only the account that originally created the multisig is able to cancel it.
   **/
  | 'NotOwner'
  /**
   * No timepoint was given, yet the multisig operation is already underway.
   **/
  | 'NoTimepoint'
  /**
   * A different timepoint was given to the multisig operation that is underway.
   **/
  | 'WrongTimepoint'
  /**
   * A timepoint was given, yet no multisig operation is underway.
   **/
  | 'UnexpectedTimepoint'
  /**
   * The maximum weight information provided was too low.
   **/
  | 'MaxWeightTooLow'
  /**
   * The data to be stored is already stored.
   **/
  | 'AlreadyStored';

export type PalletEvmCodeMetadata = { size: bigint; hash: H256 };

/**
 * The `Error` enum of this pallet.
 **/
export type PalletEvmError =
  /**
   * Not enough balance to perform action
   **/
  | 'BalanceLow'
  /**
   * Calculating total fee overflowed
   **/
  | 'FeeOverflow'
  /**
   * Calculating total payment overflowed
   **/
  | 'PaymentOverflow'
  /**
   * Withdraw fee failed
   **/
  | 'WithdrawFailed'
  /**
   * Gas price is too low.
   **/
  | 'GasPriceTooLow'
  /**
   * Nonce is invalid
   **/
  | 'InvalidNonce'
  /**
   * Gas limit is too low.
   **/
  | 'GasLimitTooLow'
  /**
   * Gas limit is too high.
   **/
  | 'GasLimitTooHigh'
  /**
   * The chain id is invalid.
   **/
  | 'InvalidChainId'
  /**
   * the signature is invalid.
   **/
  | 'InvalidSignature'
  /**
   * EVM reentrancy
   **/
  | 'Reentrancy'
  /**
   * EIP-3607,
   **/
  | 'TransactionMustComeFromEOA'
  /**
   * Undefined error.
   **/
  | 'Undefined';

export type FpRpcTransactionStatus = {
  transactionHash: H256;
  transactionIndex: number;
  from: H160;
  to?: H160 | undefined;
  contractAddress?: H160 | undefined;
  logs: Array<EthereumLog>;
  logsBloom: EthbloomBloom;
};

export type EthbloomBloom = FixedBytes<256>;

export type EthereumReceiptReceiptV3 =
  | { tag: 'Legacy'; value: EthereumReceiptEip658ReceiptData }
  | { tag: 'Eip2930'; value: EthereumReceiptEip658ReceiptData }
  | { tag: 'Eip1559'; value: EthereumReceiptEip658ReceiptData };

export type EthereumReceiptEip658ReceiptData = {
  statusCode: number;
  usedGas: U256;
  logsBloom: EthbloomBloom;
  logs: Array<EthereumLog>;
};

export type EthereumBlock = {
  header: EthereumHeader;
  transactions: Array<EthereumTransactionTransactionV2>;
  ommers: Array<EthereumHeader>;
};

export type EthereumHeader = {
  parentHash: H256;
  ommersHash: H256;
  beneficiary: H160;
  stateRoot: H256;
  transactionsRoot: H256;
  receiptsRoot: H256;
  logsBloom: EthbloomBloom;
  difficulty: U256;
  number: U256;
  gasLimit: U256;
  gasUsed: U256;
  timestamp: bigint;
  extraData: Bytes;
  mixHash: H256;
  nonce: EthereumTypesHashH64;
};

export type EthereumTypesHashH64 = FixedBytes<8>;

/**
 * The `Error` enum of this pallet.
 **/
export type PalletEthereumError =
  /**
   * Signature is invalid.
   **/
  | 'InvalidSignature'
  /**
   * Pre-log is present, therefore transact is not allowed.
   **/
  | 'PreLogExists';

export type PalletSchedulerScheduled = {
  maybeId?: FixedBytes<32> | undefined;
  priority: number;
  call: FrameSupportPreimagesBounded;
  maybePeriodic?: [number, number] | undefined;
  origin: MoonbeamRuntimeOriginCaller;
};

/**
 * The `Error` enum of this pallet.
 **/
export type PalletSchedulerError =
  /**
   * Failed to schedule a call
   **/
  | 'FailedToSchedule'
  /**
   * Cannot find the scheduled call.
   **/
  | 'NotFound'
  /**
   * Given target block number is in the past.
   **/
  | 'TargetBlockNumberInPast'
  /**
   * Reschedule failed because it does not change scheduled time.
   **/
  | 'RescheduleNoChange'
  /**
   * Attempt to use a non-named function on a named task.
   **/
  | 'Named';

export type PalletDemocracyReferendumInfo =
  | { tag: 'Ongoing'; value: PalletDemocracyReferendumStatus }
  | { tag: 'Finished'; value: { approved: boolean; end: number } };

export type PalletDemocracyReferendumStatus = {
  end: number;
  proposal: FrameSupportPreimagesBounded;
  threshold: PalletDemocracyVoteThreshold;
  delay: number;
  tally: PalletDemocracyTally;
};

export type PalletDemocracyTally = { ayes: bigint; nays: bigint; turnout: bigint };

export type PalletDemocracyVoteVoting =
  | {
      tag: 'Direct';
      value: {
        votes: Array<[number, PalletDemocracyVoteAccountVote]>;
        delegations: PalletDemocracyDelegations;
        prior: PalletDemocracyVotePriorLock;
      };
    }
  | {
      tag: 'Delegating';
      value: {
        balance: bigint;
        target: AccountId20;
        conviction: PalletDemocracyConviction;
        delegations: PalletDemocracyDelegations;
        prior: PalletDemocracyVotePriorLock;
      };
    };

export type PalletDemocracyDelegations = { votes: bigint; capital: bigint };

export type PalletDemocracyVotePriorLock = [number, bigint];

/**
 * The `Error` enum of this pallet.
 **/
export type PalletDemocracyError =
  /**
   * Value too low
   **/
  | 'ValueLow'
  /**
   * Proposal does not exist
   **/
  | 'ProposalMissing'
  /**
   * Cannot cancel the same proposal twice
   **/
  | 'AlreadyCanceled'
  /**
   * Proposal already made
   **/
  | 'DuplicateProposal'
  /**
   * Proposal still blacklisted
   **/
  | 'ProposalBlacklisted'
  /**
   * Next external proposal not simple majority
   **/
  | 'NotSimpleMajority'
  /**
   * Invalid hash
   **/
  | 'InvalidHash'
  /**
   * No external proposal
   **/
  | 'NoProposal'
  /**
   * Identity may not veto a proposal twice
   **/
  | 'AlreadyVetoed'
  /**
   * Vote given for invalid referendum
   **/
  | 'ReferendumInvalid'
  /**
   * No proposals waiting
   **/
  | 'NoneWaiting'
  /**
   * The given account did not vote on the referendum.
   **/
  | 'NotVoter'
  /**
   * The actor has no permission to conduct the action.
   **/
  | 'NoPermission'
  /**
   * The account is already delegating.
   **/
  | 'AlreadyDelegating'
  /**
   * Too high a balance was provided that the account cannot afford.
   **/
  | 'InsufficientFunds'
  /**
   * The account is not currently delegating.
   **/
  | 'NotDelegating'
  /**
   * The account currently has votes attached to it and the operation cannot succeed until
   * these are removed, either through `unvote` or `reap_vote`.
   **/
  | 'VotesExist'
  /**
   * The instant referendum origin is currently disallowed.
   **/
  | 'InstantNotAllowed'
  /**
   * Delegation to oneself makes no sense.
   **/
  | 'Nonsense'
  /**
   * Invalid upper bound.
   **/
  | 'WrongUpperBound'
  /**
   * Maximum number of votes reached.
   **/
  | 'MaxVotesReached'
  /**
   * Maximum number of items reached.
   **/
  | 'TooMany'
  /**
   * Voting period too low
   **/
  | 'VotingPeriodLow'
  /**
   * The preimage does not exist.
   **/
  | 'PreimageNotExist';

export type PalletPreimageOldRequestStatus =
  | { tag: 'Unrequested'; value: { deposit: [AccountId20, bigint]; len: number } }
  | {
      tag: 'Requested';
      value: { deposit?: [AccountId20, bigint] | undefined; count: number; len?: number | undefined };
    };

export type PalletPreimageRequestStatus =
  | { tag: 'Unrequested'; value: { ticket: [AccountId20, FrameSupportTokensFungibleHoldConsideration]; len: number } }
  | {
      tag: 'Requested';
      value: {
        maybeTicket?: [AccountId20, FrameSupportTokensFungibleHoldConsideration] | undefined;
        count: number;
        maybeLen?: number | undefined;
      };
    };

export type FrameSupportTokensFungibleHoldConsideration = bigint;

/**
 * The `Error` enum of this pallet.
 **/
export type PalletPreimageError =
  /**
   * Preimage is too large to store on-chain.
   **/
  | 'TooBig'
  /**
   * Preimage has already been noted on-chain.
   **/
  | 'AlreadyNoted'
  /**
   * The user is not authorized to perform this action.
   **/
  | 'NotAuthorized'
  /**
   * The preimage cannot be removed since it has not yet been noted.
   **/
  | 'NotNoted'
  /**
   * A preimage may not be removed when there are outstanding requests.
   **/
  | 'Requested'
  /**
   * The preimage request cannot be removed since no outstanding requests exist.
   **/
  | 'NotRequested'
  /**
   * More than `MAX_HASH_UPGRADE_BULK_COUNT` hashes were requested to be upgraded at once.
   **/
  | 'TooMany'
  /**
   * Too few hashes were requested to be upgraded (i.e. zero).
   **/
  | 'TooFew';

export type PalletConvictionVotingVoteVoting =
  | { tag: 'Casting'; value: PalletConvictionVotingVoteCasting }
  | { tag: 'Delegating'; value: PalletConvictionVotingVoteDelegating };

export type PalletConvictionVotingVoteCasting = {
  votes: Array<[number, PalletConvictionVotingVoteAccountVote]>;
  delegations: PalletConvictionVotingDelegations;
  prior: PalletConvictionVotingVotePriorLock;
};

export type PalletConvictionVotingDelegations = { votes: bigint; capital: bigint };

export type PalletConvictionVotingVotePriorLock = [number, bigint];

export type PalletConvictionVotingVoteDelegating = {
  balance: bigint;
  target: AccountId20;
  conviction: PalletConvictionVotingConviction;
  delegations: PalletConvictionVotingDelegations;
  prior: PalletConvictionVotingVotePriorLock;
};

/**
 * The `Error` enum of this pallet.
 **/
export type PalletConvictionVotingError =
  /**
   * Poll is not ongoing.
   **/
  | 'NotOngoing'
  /**
   * The given account did not vote on the poll.
   **/
  | 'NotVoter'
  /**
   * The actor has no permission to conduct the action.
   **/
  | 'NoPermission'
  /**
   * The actor has no permission to conduct the action right now but will do in the future.
   **/
  | 'NoPermissionYet'
  /**
   * The account is already delegating.
   **/
  | 'AlreadyDelegating'
  /**
   * The account currently has votes attached to it and the operation cannot succeed until
   * these are removed, either through `unvote` or `reap_vote`.
   **/
  | 'AlreadyVoting'
  /**
   * Too high a balance was provided that the account cannot afford.
   **/
  | 'InsufficientFunds'
  /**
   * The account is not currently delegating.
   **/
  | 'NotDelegating'
  /**
   * Delegation to oneself makes no sense.
   **/
  | 'Nonsense'
  /**
   * Maximum number of votes reached.
   **/
  | 'MaxVotesReached'
  /**
   * The class must be supplied since it is not easily determinable from the state.
   **/
  | 'ClassNeeded'
  /**
   * The class ID supplied is invalid.
   **/
  | 'BadClass';

export type PalletReferendaReferendumInfo =
  | { tag: 'Ongoing'; value: PalletReferendaReferendumStatus }
  | { tag: 'Approved'; value: [number, PalletReferendaDeposit | undefined, PalletReferendaDeposit | undefined] }
  | { tag: 'Rejected'; value: [number, PalletReferendaDeposit | undefined, PalletReferendaDeposit | undefined] }
  | { tag: 'Cancelled'; value: [number, PalletReferendaDeposit | undefined, PalletReferendaDeposit | undefined] }
  | { tag: 'TimedOut'; value: [number, PalletReferendaDeposit | undefined, PalletReferendaDeposit | undefined] }
  | { tag: 'Killed'; value: number };

export type PalletReferendaReferendumStatus = {
  track: number;
  origin: MoonbeamRuntimeOriginCaller;
  proposal: FrameSupportPreimagesBounded;
  enactment: FrameSupportScheduleDispatchTime;
  submitted: number;
  submissionDeposit: PalletReferendaDeposit;
  decisionDeposit?: PalletReferendaDeposit | undefined;
  deciding?: PalletReferendaDecidingStatus | undefined;
  tally: PalletConvictionVotingTally;
  inQueue: boolean;
  alarm?: [number, [number, number]] | undefined;
};

export type PalletReferendaDeposit = { who: AccountId20; amount: bigint };

export type PalletReferendaDecidingStatus = { since: number; confirming?: number | undefined };

export type PalletReferendaTrackInfo = {
  name: string;
  maxDeciding: number;
  decisionDeposit: bigint;
  preparePeriod: number;
  decisionPeriod: number;
  confirmPeriod: number;
  minEnactmentPeriod: number;
  minApproval: PalletReferendaCurve;
  minSupport: PalletReferendaCurve;
};

export type PalletReferendaCurve =
  | { tag: 'LinearDecreasing'; value: { length: Perbill; floor: Perbill; ceil: Perbill } }
  | { tag: 'SteppedDecreasing'; value: { begin: Perbill; end: Perbill; step: Perbill; period: Perbill } }
  | { tag: 'Reciprocal'; value: { factor: FixedI64; xOffset: FixedI64; yOffset: FixedI64 } };

/**
 * The `Error` enum of this pallet.
 **/
export type PalletReferendaError =
  /**
   * Referendum is not ongoing.
   **/
  | 'NotOngoing'
  /**
   * Referendum's decision deposit is already paid.
   **/
  | 'HasDeposit'
  /**
   * The track identifier given was invalid.
   **/
  | 'BadTrack'
  /**
   * There are already a full complement of referenda in progress for this track.
   **/
  | 'Full'
  /**
   * The queue of the track is empty.
   **/
  | 'QueueEmpty'
  /**
   * The referendum index provided is invalid in this context.
   **/
  | 'BadReferendum'
  /**
   * There was nothing to do in the advancement.
   **/
  | 'NothingToDo'
  /**
   * No track exists for the proposal origin.
   **/
  | 'NoTrack'
  /**
   * Any deposit cannot be refunded until after the decision is over.
   **/
  | 'Unfinished'
  /**
   * The deposit refunder is not the depositor.
   **/
  | 'NoPermission'
  /**
   * The deposit cannot be refunded since none was made.
   **/
  | 'NoDeposit'
  /**
   * The referendum status is invalid for this operation.
   **/
  | 'BadStatus'
  /**
   * The preimage does not exist.
   **/
  | 'PreimageNotExist';

/**
 * The `Error` enum of this pallet.
 **/
export type PalletWhitelistError =
  /**
   * The preimage of the call hash could not be loaded.
   **/
  | 'UnavailablePreImage'
  /**
   * The call could not be decoded.
   **/
  | 'UndecodableCall'
  /**
   * The weight of the decoded call was higher than the witness.
   **/
  | 'InvalidCallWeightWitness'
  /**
   * The call was not whitelisted.
   **/
  | 'CallIsNotWhitelisted'
  /**
   * The call was already whitelisted; No-Op.
   **/
  | 'CallAlreadyWhitelisted';

export type PalletCollectiveVotes = {
  index: number;
  threshold: number;
  ayes: Array<AccountId20>;
  nays: Array<AccountId20>;
  end: number;
};

/**
 * The `Error` enum of this pallet.
 **/
export type PalletCollectiveError =
  /**
   * Account is not a member
   **/
  | 'NotMember'
  /**
   * Duplicate proposals not allowed
   **/
  | 'DuplicateProposal'
  /**
   * Proposal must exist
   **/
  | 'ProposalMissing'
  /**
   * Mismatched index
   **/
  | 'WrongIndex'
  /**
   * Duplicate vote ignored
   **/
  | 'DuplicateVote'
  /**
   * Members are already initialized!
   **/
  | 'AlreadyInitialized'
  /**
   * The close call was made too early, before the end of the voting.
   **/
  | 'TooEarly'
  /**
   * There can only be a maximum of `MaxProposals` active proposals.
   **/
  | 'TooManyProposals'
  /**
   * The given weight bound for the proposal was too low.
   **/
  | 'WrongProposalWeight'
  /**
   * The given length bound for the proposal was too low.
   **/
  | 'WrongProposalLength'
  /**
   * Prime account is not a member
   **/
  | 'PrimeAccountNotMember';

export type PalletTreasuryProposal = { proposer: AccountId20; value: bigint; beneficiary: AccountId20; bond: bigint };

export type PalletTreasurySpendStatus = {
  assetKind: [];
  amount: bigint;
  beneficiary: AccountId20;
  validFrom: number;
  expireAt: number;
  status: PalletTreasuryPaymentState;
};

export type PalletTreasuryPaymentState =
  | { tag: 'Pending' }
  | { tag: 'Attempted'; value: { id: [] } }
  | { tag: 'Failed' };

export type FrameSupportPalletId = FixedBytes<8>;

/**
 * Error for the treasury pallet.
 **/
export type PalletTreasuryError =
  /**
   * Proposer's balance is too low.
   **/
  | 'InsufficientProposersBalance'
  /**
   * No proposal, bounty or spend at that index.
   **/
  | 'InvalidIndex'
  /**
   * Too many approvals in the queue.
   **/
  | 'TooManyApprovals'
  /**
   * The spend origin is valid but the amount it is allowed to spend is lower than the
   * amount to be spent.
   **/
  | 'InsufficientPermission'
  /**
   * Proposal has not been approved.
   **/
  | 'ProposalNotApproved'
  /**
   * The balance of the asset kind is not convertible to the balance of the native asset.
   **/
  | 'FailedToConvertBalance'
  /**
   * The spend has expired and cannot be claimed.
   **/
  | 'SpendExpired'
  /**
   * The spend is not yet eligible for payout.
   **/
  | 'EarlyPayout'
  /**
   * The payment has already been attempted.
   **/
  | 'AlreadyAttempted'
  /**
   * There was some issue with the mechanism of payment.
   **/
  | 'PayoutError'
  /**
   * The payout was not yet attempted/claimed.
   **/
  | 'NotAttempted'
  /**
   * The payment has neither failed nor succeeded yet.
   **/
  | 'Inconclusive';

export type PalletCrowdloanRewardsRewardInfo = {
  totalReward: bigint;
  claimedReward: bigint;
  contributedRelayAddresses: Array<FixedBytes<32>>;
};

/**
 * The `Error` enum of this pallet.
 **/
export type PalletCrowdloanRewardsError =
  /**
   * User trying to associate a native identity with a relay chain identity for posterior
   * reward claiming provided an already associated relay chain identity
   **/
  | 'AlreadyAssociated'
  /**
   * Trying to introduce a batch that goes beyond the limits of the funds
   **/
  | 'BatchBeyondFundPot'
  /**
   * First claim already done
   **/
  | 'FirstClaimAlreadyDone'
  /**
   * The contribution is not high enough to be eligible for rewards
   **/
  | 'RewardNotHighEnough'
  /**
   * User trying to associate a native identity with a relay chain identity for posterior
   * reward claiming provided a wrong signature
   **/
  | 'InvalidClaimSignature'
  /**
   * User trying to claim the first free reward provided the wrong signature
   **/
  | 'InvalidFreeClaimSignature'
  /**
   * User trying to claim an award did not have an claim associated with it. This may mean
   * they did not contribute to the crowdloan, or they have not yet associated a native id
   * with their contribution
   **/
  | 'NoAssociatedClaim'
  /**
   * User trying to claim rewards has already claimed all rewards associated with its
   * identity and contribution
   **/
  | 'RewardsAlreadyClaimed'
  /**
   * Reward vec has already been initialized
   **/
  | 'RewardVecAlreadyInitialized'
  /**
   * Reward vec has not yet been fully initialized
   **/
  | 'RewardVecNotFullyInitializedYet'
  /**
   * Rewards should match funds of the pallet
   **/
  | 'RewardsDoNotMatchFund'
  /**
   * Initialize_reward_vec received too many contributors
   **/
  | 'TooManyContributors'
  /**
   * Provided vesting period is not valid
   **/
  | 'VestingPeriodNonValid'
  /**
   * User provided a signature from a non-contributor relay account
   **/
  | 'NonContributedAddressProvided'
  /**
   * User submitted an unsifficient number of proofs to change the reward address
   **/
  | 'InsufficientNumberOfValidProofs';

export type CumulusPalletXcmpQueueInboundChannelDetails = {
  sender: PolkadotParachainPrimitivesPrimitivesId;
  state: CumulusPalletXcmpQueueInboundState;
  messageMetadata: Array<[number, PolkadotParachainPrimitivesPrimitivesXcmpMessageFormat]>;
};

export type CumulusPalletXcmpQueueInboundState = 'Ok' | 'Suspended';

export type PolkadotParachainPrimitivesPrimitivesXcmpMessageFormat =
  | 'ConcatenatedVersionedXcm'
  | 'ConcatenatedEncodedBlob'
  | 'Signals';

export type CumulusPalletXcmpQueueOutboundChannelDetails = {
  recipient: PolkadotParachainPrimitivesPrimitivesId;
  state: CumulusPalletXcmpQueueOutboundState;
  signalsExist: boolean;
  firstIndex: number;
  lastIndex: number;
};

export type CumulusPalletXcmpQueueOutboundState = 'Ok' | 'Suspended';

export type CumulusPalletXcmpQueueQueueConfigData = {
  suspendThreshold: number;
  dropThreshold: number;
  resumeThreshold: number;
  thresholdWeight: SpWeightsWeightV2Weight;
  weightRestrictDecay: SpWeightsWeightV2Weight;
  xcmpMaxIndividualWeight: SpWeightsWeightV2Weight;
};

/**
 * The `Error` enum of this pallet.
 **/
export type CumulusPalletXcmpQueueError =
  /**
   * Failed to send XCM message.
   **/
  | 'FailedToSend'
  /**
   * Bad XCM origin.
   **/
  | 'BadXcmOrigin'
  /**
   * Bad XCM data.
   **/
  | 'BadXcm'
  /**
   * Bad overweight index.
   **/
  | 'BadOverweightIndex'
  /**
   * Provided weight is possibly not enough to execute the message.
   **/
  | 'WeightOverLimit';

/**
 * The `Error` enum of this pallet.
 **/
export type CumulusPalletXcmError = null;

export type CumulusPalletDmpQueueConfigData = { maxIndividual: SpWeightsWeightV2Weight };

export type CumulusPalletDmpQueuePageIndexData = { beginUsed: number; endUsed: number; overweightCount: bigint };

/**
 * The `Error` enum of this pallet.
 **/
export type CumulusPalletDmpQueueError =
  /**
   * The message index given is unknown.
   **/
  | 'Unknown'
  /**
   * The amount of weight given is possibly not enough for executing the message.
   **/
  | 'OverLimit';

export type PalletXcmQueryStatus =
  | {
      tag: 'Pending';
      value: {
        responder: XcmVersionedMultiLocation;
        maybeMatchQuerier?: XcmVersionedMultiLocation | undefined;
        maybeNotify?: [number, number] | undefined;
        timeout: number;
      };
    }
  | { tag: 'VersionNotifier'; value: { origin: XcmVersionedMultiLocation; isActive: boolean } }
  | { tag: 'Ready'; value: { response: XcmVersionedResponse; at: number } };

export type XcmVersionedResponse = { tag: 'V2'; value: XcmV2Response } | { tag: 'V3'; value: XcmV3Response };

export type PalletXcmVersionMigrationStage =
  | { tag: 'MigrateSupportedVersion' }
  | { tag: 'MigrateVersionNotifiers' }
  | { tag: 'NotifyCurrentTargets'; value?: Bytes | undefined }
  | { tag: 'MigrateAndNotifyOldTargets' };

export type XcmVersionedAssetId = { tag: 'V3'; value: XcmV3MultiassetAssetId };

export type PalletXcmRemoteLockedFungibleRecord = {
  amount: bigint;
  owner: XcmVersionedMultiLocation;
  locker: XcmVersionedMultiLocation;
  consumers: Array<[[], bigint]>;
};

/**
 * The `Error` enum of this pallet.
 **/
export type PalletXcmError =
  /**
   * The desired destination was unreachable, generally because there is a no way of routing
   * to it.
   **/
  | 'Unreachable'
  /**
   * There was some other issue (i.e. not to do with routing) in sending the message.
   * Perhaps a lack of space for buffering the message.
   **/
  | 'SendFailure'
  /**
   * The message execution fails the filter.
   **/
  | 'Filtered'
  /**
   * The message's weight could not be determined.
   **/
  | 'UnweighableMessage'
  /**
   * The destination `MultiLocation` provided cannot be inverted.
   **/
  | 'DestinationNotInvertible'
  /**
   * The assets to be sent are empty.
   **/
  | 'Empty'
  /**
   * Could not re-anchor the assets to declare the fees for the destination chain.
   **/
  | 'CannotReanchor'
  /**
   * Too many assets have been attempted for transfer.
   **/
  | 'TooManyAssets'
  /**
   * Origin is invalid for sending.
   **/
  | 'InvalidOrigin'
  /**
   * The version of the `Versioned` value used is not able to be interpreted.
   **/
  | 'BadVersion'
  /**
   * The given location could not be used (e.g. because it cannot be expressed in the
   * desired version of XCM).
   **/
  | 'BadLocation'
  /**
   * The referenced subscription could not be found.
   **/
  | 'NoSubscription'
  /**
   * The location is invalid since it already has a subscription from us.
   **/
  | 'AlreadySubscribed'
  /**
   * Invalid asset for the operation.
   **/
  | 'InvalidAsset'
  /**
   * The owner does not own (all) of the asset that they wish to do the operation on.
   **/
  | 'LowBalance'
  /**
   * The asset owner has too many locks on the asset.
   **/
  | 'TooManyLocks'
  /**
   * The given account is not an identifiable sovereign account for any location.
   **/
  | 'AccountNotSovereign'
  /**
   * The operation required fees to be paid which the initiator could not meet.
   **/
  | 'FeesNotMet'
  /**
   * A remote lock with the corresponding data could not be found.
   **/
  | 'LockNotFound'
  /**
   * The unlock operation cannot succeed because there are still consumers of the lock.
   **/
  | 'InUse';

export type PalletAssetsAssetDetails = {
  owner: AccountId20;
  issuer: AccountId20;
  admin: AccountId20;
  freezer: AccountId20;
  supply: bigint;
  deposit: bigint;
  minBalance: bigint;
  isSufficient: boolean;
  accounts: number;
  sufficients: number;
  approvals: number;
  status: PalletAssetsAssetStatus;
};

export type PalletAssetsAssetStatus = 'Live' | 'Frozen' | 'Destroying';

export type PalletAssetsAssetAccount = {
  balance: bigint;
  status: PalletAssetsAccountStatus;
  reason: PalletAssetsExistenceReason;
  extra: [];
};

export type PalletAssetsAccountStatus = 'Liquid' | 'Frozen' | 'Blocked';

export type PalletAssetsExistenceReason =
  | { tag: 'Consumer' }
  | { tag: 'Sufficient' }
  | { tag: 'DepositHeld'; value: bigint }
  | { tag: 'DepositRefunded' }
  | { tag: 'DepositFrom'; value: [AccountId20, bigint] };

export type PalletAssetsApproval = { amount: bigint; deposit: bigint };

export type PalletAssetsAssetMetadata = {
  deposit: bigint;
  name: Bytes;
  symbol: Bytes;
  decimals: number;
  isFrozen: boolean;
};

/**
 * The `Error` enum of this pallet.
 **/
export type PalletAssetsError =
  /**
   * Account balance must be greater than or equal to the transfer amount.
   **/
  | 'BalanceLow'
  /**
   * The account to alter does not exist.
   **/
  | 'NoAccount'
  /**
   * The signing account has no permission to do the operation.
   **/
  | 'NoPermission'
  /**
   * The given asset ID is unknown.
   **/
  | 'Unknown'
  /**
   * The origin account is frozen.
   **/
  | 'Frozen'
  /**
   * The asset ID is already taken.
   **/
  | 'InUse'
  /**
   * Invalid witness data given.
   **/
  | 'BadWitness'
  /**
   * Minimum balance should be non-zero.
   **/
  | 'MinBalanceZero'
  /**
   * Unable to increment the consumer reference counters on the account. Either no provider
   * reference exists to allow a non-zero balance of a non-self-sufficient asset, or one
   * fewer then the maximum number of consumers has been reached.
   **/
  | 'UnavailableConsumer'
  /**
   * Invalid metadata given.
   **/
  | 'BadMetadata'
  /**
   * No approval exists that would allow the transfer.
   **/
  | 'Unapproved'
  /**
   * The source account would not survive the transfer and it needs to stay alive.
   **/
  | 'WouldDie'
  /**
   * The asset-account already exists.
   **/
  | 'AlreadyExists'
  /**
   * The asset-account doesn't have an associated deposit.
   **/
  | 'NoDeposit'
  /**
   * The operation would result in funds being burned.
   **/
  | 'WouldBurn'
  /**
   * The asset is a live asset and is actively being used. Usually emit for operations such
   * as `start_destroy` which require the asset to be in a destroying state.
   **/
  | 'LiveAsset'
  /**
   * The asset is not live, and likely being destroyed.
   **/
  | 'AssetNotLive'
  /**
   * The asset status is not the expected status.
   **/
  | 'IncorrectStatus'
  /**
   * The asset should be frozen before the given operation.
   **/
  | 'NotFrozen'
  /**
   * Callback action resulted in error
   **/
  | 'CallbackFailed';

export type PalletAssetManagerAssetInfo = { creator: AccountId20; deposit: bigint };

/**
 * An error that can occur while executing the mapping pallet's logic.
 **/
export type PalletAssetManagerError =
  | 'ErrorCreatingAsset'
  | 'AssetAlreadyExists'
  | 'AssetDoesNotExist'
  | 'TooLowNumAssetsWeightHint'
  | 'LocalAssetLimitReached'
  | 'ErrorDestroyingAsset'
  | 'NotSufficientDeposit'
  | 'NonExistentLocalAsset';

/**
 * The `Error` enum of this pallet.
 **/
export type OrmlXtokensModuleError =
  /**
   * Asset has no reserve location.
   **/
  | 'AssetHasNoReserve'
  /**
   * Not cross-chain transfer.
   **/
  | 'NotCrossChainTransfer'
  /**
   * Invalid transfer destination.
   **/
  | 'InvalidDest'
  /**
   * Currency is not cross-chain transferable.
   **/
  | 'NotCrossChainTransferableCurrency'
  /**
   * The message's weight could not be determined.
   **/
  | 'UnweighableMessage'
  /**
   * XCM execution failed.
   **/
  | 'XcmExecutionFailed'
  /**
   * Could not re-anchor the assets to declare the fees for the
   * destination chain.
   **/
  | 'CannotReanchor'
  /**
   * Could not get ancestry of asset reserve location.
   **/
  | 'InvalidAncestry'
  /**
   * The MultiAsset is invalid.
   **/
  | 'InvalidAsset'
  /**
   * The destination `MultiLocation` provided cannot be inverted.
   **/
  | 'DestinationNotInvertible'
  /**
   * The version of the `Versioned` value used is not able to be
   * interpreted.
   **/
  | 'BadVersion'
  /**
   * We tried sending distinct asset and fee but they have different
   * reserve chains.
   **/
  | 'DistinctReserveForAssetAndFee'
  /**
   * The fee is zero.
   **/
  | 'ZeroFee'
  /**
   * The transfering asset amount is zero.
   **/
  | 'ZeroAmount'
  /**
   * The number of assets to be sent is over the maximum.
   **/
  | 'TooManyAssetsBeingSent'
  /**
   * The specified index does not exist in a MultiAssets struct.
   **/
  | 'AssetIndexNonExistent'
  /**
   * Fee is not enough.
   **/
  | 'FeeNotEnough'
  /**
   * Not supported MultiLocation
   **/
  | 'NotSupportedMultiLocation'
  /**
   * MinXcmFee not registered for certain reserve location
   **/
  | 'MinXcmFeeNotDefined';

export type PalletXcmTransactorRelayIndicesRelayChainIndices = {
  staking: number;
  utility: number;
  hrmp: number;
  bond: number;
  bondExtra: number;
  unbond: number;
  withdrawUnbonded: number;
  validate: number;
  nominate: number;
  chill: number;
  setPayee: number;
  setController: number;
  rebond: number;
  asDerivative: number;
  initOpenChannel: number;
  acceptOpenChannel: number;
  closeChannel: number;
  cancelOpenRequest: number;
};

/**
 * An error that can occur while executing the mapping pallet's logic.
 **/
export type PalletXcmTransactorError =
  | 'IndexAlreadyClaimed'
  | 'UnclaimedIndex'
  | 'NotOwner'
  | 'UnweighableMessage'
  | 'CannotReanchor'
  | 'AssetHasNoReserve'
  | 'InvalidDest'
  | 'NotCrossChainTransfer'
  | 'AssetIsNotReserveInDestination'
  | 'DestinationNotInvertible'
  | 'ErrorDelivering'
  | 'DispatchWeightBiggerThanTotalWeight'
  | 'WeightOverflow'
  | 'AmountOverflow'
  | 'TransactorInfoNotSet'
  | 'NotCrossChainTransferableCurrency'
  | 'XcmExecuteError'
  | 'BadVersion'
  | 'MaxWeightTransactReached'
  | 'UnableToWithdrawAsset'
  | 'FeePerSecondNotSet'
  | 'SignedTransactNotAllowedForDestination'
  | 'FailedMultiLocationToJunction'
  | 'HrmpHandlerNotImplemented'
  | 'TooMuchFeeUsed'
  | 'ErrorValidating'
  | 'RefundNotSupportedWithTransactInfo';

/**
 * The `Error` enum of this pallet.
 **/
export type PalletEthereumXcmError =
  /**
   * Xcm to Ethereum execution is suspended
   **/
  'EthereumXcmExecutionSuspended';

export type PalletRandomnessRequestState = { request: PalletRandomnessRequest; deposit: bigint };

export type PalletRandomnessRequest = {
  refundAddress: H160;
  contractAddress: H160;
  fee: bigint;
  gasLimit: bigint;
  numWords: number;
  salt: H256;
  info: PalletRandomnessRequestInfo;
};

export type PalletRandomnessRequestInfo =
  | { tag: 'BabeEpoch'; value: [bigint, bigint] }
  | { tag: 'Local'; value: [number, number] };

export type PalletRandomnessRequestType = { tag: 'BabeEpoch'; value: bigint } | { tag: 'Local'; value: number };

export type PalletRandomnessRandomnessResult = { randomness?: H256 | undefined; requestCount: bigint };

/**
 * The `Error` enum of this pallet.
 **/
export type PalletRandomnessError =
  | 'RequestCounterOverflowed'
  | 'RequestFeeOverflowed'
  | 'MustRequestAtLeastOneWord'
  | 'CannotRequestMoreWordsThanMax'
  | 'CannotRequestRandomnessAfterMaxDelay'
  | 'CannotRequestRandomnessBeforeMinDelay'
  | 'RequestDNE'
  | 'RequestCannotYetBeFulfilled'
  | 'OnlyRequesterCanIncreaseFee'
  | 'RequestHasNotExpired'
  | 'RandomnessResultDNE'
  | 'RandomnessResultNotFilled';

export type AccountEthereumSignature = SpCoreEcdsaSignature;

export type FrameSystemExtensionsCheckNonZeroSender = {};

export type FrameSystemExtensionsCheckSpecVersion = {};

export type FrameSystemExtensionsCheckTxVersion = {};

export type FrameSystemExtensionsCheckGenesis = {};

export type FrameSystemExtensionsCheckMortality = Era;

export type FrameSystemExtensionsCheckNonce = number;

export type FrameSystemExtensionsCheckWeight = {};

export type PalletTransactionPaymentChargeTransactionPayment = bigint;

export type MoonbeamRuntimeRuntime = {};

export type SpRuntimeTransactionValidityTransactionSource = 'InBlock' | 'Local' | 'External';

export type FpSelfContainedUncheckedExtrinsic = UncheckedExtrinsic;

export type SpRuntimeTransactionValidityValidTransaction = {
  priority: bigint;
  requires: Array<Bytes>;
  provides: Array<Bytes>;
  longevity: bigint;
  propagate: boolean;
};

export type SpRuntimeTransactionValidityTransactionValidityError =
  | { tag: 'Invalid'; value: SpRuntimeTransactionValidityInvalidTransaction }
  | { tag: 'Unknown'; value: SpRuntimeTransactionValidityUnknownTransaction };

export type SpRuntimeTransactionValidityInvalidTransaction =
  | { tag: 'Call' }
  | { tag: 'Payment' }
  | { tag: 'Future' }
  | { tag: 'Stale' }
  | { tag: 'BadProof' }
  | { tag: 'AncientBirthBlock' }
  | { tag: 'ExhaustsResources' }
  | { tag: 'Custom'; value: number }
  | { tag: 'BadMandatory' }
  | { tag: 'MandatoryValidation' }
  | { tag: 'BadSigner' };

export type SpRuntimeTransactionValidityUnknownTransaction =
  | { tag: 'CannotLookup' }
  | { tag: 'NoUnsignedValidator' }
  | { tag: 'Custom'; value: number };

export type SpConsensusSlotsSlot = bigint;

export type SpRuntimeBlock = { header: Header; extrinsics: Array<FpSelfContainedUncheckedExtrinsic> };

export type SpCoreOpaqueMetadata = Bytes;

export type SpInherentsInherentData = { data: Array<[FixedBytes<8>, Bytes]> };

export type SpInherentsCheckInherentsResult = { okay: boolean; fatalError: boolean; errors: SpInherentsInherentData };

export type SpCoreCryptoKeyTypeId = FixedBytes<4>;

export type MoonbeamRpcPrimitivesTxpoolTxPoolResponse = {
  ready: Array<EthereumTransactionTransactionV2>;
  future: Array<EthereumTransactionTransactionV2>;
};

export type EvmBackendBasic = { balance: U256; nonce: U256 };

export type FpEvmExecutionInfoV2 = {
  exitReason: EvmCoreErrorExitReason;
  value: Bytes;
  usedGas: FpEvmUsedGas;
  weightInfo?: FpEvmWeightInfo | undefined;
  logs: Array<EthereumLog>;
};

export type FpEvmUsedGas = { standard: U256; effective: U256 };

export type FpEvmWeightInfo = {
  refTimeLimit?: bigint | undefined;
  proofSizeLimit?: bigint | undefined;
  refTimeUsage?: bigint | undefined;
  proofSizeUsage?: bigint | undefined;
};

export type FpEvmExecutionInfoV2H160 = {
  exitReason: EvmCoreErrorExitReason;
  value: H160;
  usedGas: FpEvmUsedGas;
  weightInfo?: FpEvmWeightInfo | undefined;
  logs: Array<EthereumLog>;
};

export type PalletTransactionPaymentRuntimeDispatchInfo = {
  weight: SpWeightsWeightV2Weight;
  class: FrameSupportDispatchDispatchClass;
  partialFee: bigint;
};

export type PalletTransactionPaymentFeeDetails = {
  inclusionFee?: PalletTransactionPaymentInclusionFee | undefined;
  tip: bigint;
};

export type PalletTransactionPaymentInclusionFee = { baseFee: bigint; lenFee: bigint; adjustedWeightFee: bigint };

export type CumulusPrimitivesCoreCollationInfo = {
  upwardMessages: Array<Bytes>;
  horizontalMessages: Array<PolkadotCorePrimitivesOutboundHrmpMessage>;
  newValidationCode?: PolkadotParachainPrimitivesPrimitivesValidationCode | undefined;
  processedDownwardMessages: number;
  hrmpWatermark: number;
  headData: PolkadotParachainPrimitivesPrimitivesHeadData;
};

export type PolkadotParachainPrimitivesPrimitivesValidationCode = Bytes;

export type MoonbeamRuntimeRuntimeError =
  | { tag: 'System'; value: FrameSystemError }
  | { tag: 'ParachainSystem'; value: CumulusPalletParachainSystemError }
  | { tag: 'Balances'; value: PalletBalancesError }
  | { tag: 'ParachainStaking'; value: PalletParachainStakingError }
  | { tag: 'AuthorInherent'; value: PalletAuthorInherentError }
  | { tag: 'AuthorMapping'; value: PalletAuthorMappingError }
  | { tag: 'MoonbeamOrbiters'; value: PalletMoonbeamOrbitersError }
  | { tag: 'Utility'; value: PalletUtilityError }
  | { tag: 'Proxy'; value: PalletProxyError }
  | { tag: 'MaintenanceMode'; value: PalletMaintenanceModeError }
  | { tag: 'Identity'; value: PalletIdentityError }
  | { tag: 'Migrations'; value: PalletMigrationsError }
  | { tag: 'Multisig'; value: PalletMultisigError }
  | { tag: 'Evm'; value: PalletEvmError }
  | { tag: 'Ethereum'; value: PalletEthereumError }
  | { tag: 'Scheduler'; value: PalletSchedulerError }
  | { tag: 'Democracy'; value: PalletDemocracyError }
  | { tag: 'Preimage'; value: PalletPreimageError }
  | { tag: 'ConvictionVoting'; value: PalletConvictionVotingError }
  | { tag: 'Referenda'; value: PalletReferendaError }
  | { tag: 'Whitelist'; value: PalletWhitelistError }
  | { tag: 'CouncilCollective'; value: PalletCollectiveError }
  | { tag: 'TechCommitteeCollective'; value: PalletCollectiveError }
  | { tag: 'TreasuryCouncilCollective'; value: PalletCollectiveError }
  | { tag: 'OpenTechCommitteeCollective'; value: PalletCollectiveError }
  | { tag: 'Treasury'; value: PalletTreasuryError }
  | { tag: 'CrowdloanRewards'; value: PalletCrowdloanRewardsError }
  | { tag: 'XcmpQueue'; value: CumulusPalletXcmpQueueError }
  | { tag: 'CumulusXcm'; value: CumulusPalletXcmError }
  | { tag: 'DmpQueue'; value: CumulusPalletDmpQueueError }
  | { tag: 'PolkadotXcm'; value: PalletXcmError }
  | { tag: 'Assets'; value: PalletAssetsError }
  | { tag: 'AssetManager'; value: PalletAssetManagerError }
  | { tag: 'XTokens'; value: OrmlXtokensModuleError }
  | { tag: 'XcmTransactor'; value: PalletXcmTransactorError }
  | { tag: 'LocalAssets'; value: PalletAssetsError }
  | { tag: 'EthereumXcm'; value: PalletEthereumXcmError }
  | { tag: 'Randomness'; value: PalletRandomnessError };
