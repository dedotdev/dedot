// Generated by @delightfuldot/codegen

import type { GenericChainTx, ISubmittableExtrinsic } from '@delightfuldot/types';
import type {
  Bytes,
  H256,
  Perbill,
  AccountId20Like,
  Percent,
  Data,
  FixedBytes,
  H160,
  U256,
} from '@delightfuldot/codecs';
import type {
  CumulusPrimitivesParachainInherentParachainInherentData,
  PalletAuthorSlotFilterNumNonZeroU32,
  NimbusPrimitivesNimbusCryptoPublic,
  MoonbeamRuntimeRuntimeCall,
  MoonbeamRuntimeOriginCaller,
  SpWeightsWeightV2Weight,
  MoonbeamRuntimeProxyType,
  PalletIdentityIdentityInfo,
  PalletIdentityBitFlags,
  PalletIdentityJudgement,
  PalletMultisigTimepoint,
  EthereumTransactionTransactionV2,
  FrameSupportPreimagesBounded,
  PalletDemocracyVoteAccountVote,
  PalletDemocracyConviction,
  PalletDemocracyMetadataOwner,
  PalletConvictionVotingVoteAccountVote,
  PalletConvictionVotingConviction,
  FrameSupportScheduleDispatchTime,
  SpRuntimeMultiSignature,
  StagingXcmVersionedMultiLocation,
  StagingXcmVersionedXcm,
  StagingXcmVersionedMultiAssets,
  StagingXcmV3MultilocationMultiLocation,
  StagingXcmV3WeightLimit,
  MoonbeamRuntimeXcmConfigAssetType,
  MoonbeamRuntimeAssetConfigAssetRegistrarMetadata,
  MoonbeamRuntimeXcmConfigCurrencyId,
  StagingXcmVersionedMultiAsset,
  MoonbeamRuntimeXcmConfigTransactors,
  PalletXcmTransactorCurrencyPayment,
  PalletXcmTransactorTransactWeights,
  StagingXcmV2OriginKind,
  PalletXcmTransactorHrmpOperation,
  XcmPrimitivesEthereumXcmEthereumXcmTransaction,
} from './types';

export interface ChainTx extends GenericChainTx {
  system: {
    /**
     * See [`Pallet::remark`].
     *
     * @param remark
     **/
    remark(remark: Bytes): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_heap_pages`].
     *
     * @param pages
     **/
    setHeapPages(pages: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_code`].
     *
     * @param code
     **/
    setCode(code: Bytes): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_code_without_checks`].
     *
     * @param code
     **/
    setCodeWithoutChecks(code: Bytes): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_storage`].
     *
     * @param items
     **/
    setStorage(items: Array<[Bytes, Bytes]>): ISubmittableExtrinsic;

    /**
     * See [`Pallet::kill_storage`].
     *
     * @param keys
     **/
    killStorage(keys: Array<Bytes>): ISubmittableExtrinsic;

    /**
     * See [`Pallet::kill_prefix`].
     *
     * @param prefix
     * @param subkeys
     **/
    killPrefix(prefix: Bytes, subkeys: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::remark_with_event`].
     *
     * @param remark
     **/
    remarkWithEvent(remark: Bytes): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  parachainSystem: {
    /**
     * See [`Pallet::set_validation_data`].
     *
     * @param data
     **/
    setValidationData(data: CumulusPrimitivesParachainInherentParachainInherentData): ISubmittableExtrinsic;

    /**
     * See [`Pallet::sudo_send_upward_message`].
     *
     * @param message
     **/
    sudoSendUpwardMessage(message: Bytes): ISubmittableExtrinsic;

    /**
     * See [`Pallet::authorize_upgrade`].
     *
     * @param codeHash
     * @param checkVersion
     **/
    authorizeUpgrade(codeHash: H256, checkVersion: boolean): ISubmittableExtrinsic;

    /**
     * See [`Pallet::enact_authorized_upgrade`].
     *
     * @param code
     **/
    enactAuthorizedUpgrade(code: Bytes): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  timestamp: {
    /**
     * See [`Pallet::set`].
     *
     * @param now
     **/
    set(now: bigint): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  rootTesting: {
    /**
     * See [`Pallet::fill_block`].
     *
     * @param ratio
     **/
    fillBlock(ratio: Perbill): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  balances: {
    /**
     * See [`Pallet::transfer_allow_death`].
     *
     * @param dest
     * @param value
     **/
    transferAllowDeath(dest: AccountId20Like, value: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_balance_deprecated`].
     *
     * @param who
     * @param newFree
     * @param oldReserved
     **/
    setBalanceDeprecated(who: AccountId20Like, newFree: bigint, oldReserved: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_transfer`].
     *
     * @param source
     * @param dest
     * @param value
     **/
    forceTransfer(source: AccountId20Like, dest: AccountId20Like, value: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::transfer_keep_alive`].
     *
     * @param dest
     * @param value
     **/
    transferKeepAlive(dest: AccountId20Like, value: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::transfer_all`].
     *
     * @param dest
     * @param keepAlive
     **/
    transferAll(dest: AccountId20Like, keepAlive: boolean): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_unreserve`].
     *
     * @param who
     * @param amount
     **/
    forceUnreserve(who: AccountId20Like, amount: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::upgrade_accounts`].
     *
     * @param who
     **/
    upgradeAccounts(who: Array<AccountId20Like>): ISubmittableExtrinsic;

    /**
     * See [`Pallet::transfer`].
     *
     * @param dest
     * @param value
     **/
    transfer(dest: AccountId20Like, value: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_set_balance`].
     *
     * @param who
     * @param newFree
     **/
    forceSetBalance(who: AccountId20Like, newFree: bigint): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  parachainStaking: {
    /**
     * See [`Pallet::set_staking_expectations`].
     *
     * @param expectations
     **/
    setStakingExpectations(expectations: { min: bigint; ideal: bigint; max: bigint }): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_inflation`].
     *
     * @param schedule
     **/
    setInflation(schedule: { min: Perbill; ideal: Perbill; max: Perbill }): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_parachain_bond_account`].
     *
     * @param new_
     **/
    setParachainBondAccount(new_: AccountId20Like): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_parachain_bond_reserve_percent`].
     *
     * @param new_
     **/
    setParachainBondReservePercent(new_: Percent): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_total_selected`].
     *
     * @param new_
     **/
    setTotalSelected(new_: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_collator_commission`].
     *
     * @param new_
     **/
    setCollatorCommission(new_: Perbill): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_blocks_per_round`].
     *
     * @param new_
     **/
    setBlocksPerRound(new_: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::join_candidates`].
     *
     * @param bond
     * @param candidateCount
     **/
    joinCandidates(bond: bigint, candidateCount: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::schedule_leave_candidates`].
     *
     * @param candidateCount
     **/
    scheduleLeaveCandidates(candidateCount: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::execute_leave_candidates`].
     *
     * @param candidate
     * @param candidateDelegationCount
     **/
    executeLeaveCandidates(candidate: AccountId20Like, candidateDelegationCount: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::cancel_leave_candidates`].
     *
     * @param candidateCount
     **/
    cancelLeaveCandidates(candidateCount: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::go_offline`].
     *
     **/
    goOffline(): ISubmittableExtrinsic;

    /**
     * See [`Pallet::go_online`].
     *
     **/
    goOnline(): ISubmittableExtrinsic;

    /**
     * See [`Pallet::candidate_bond_more`].
     *
     * @param more
     **/
    candidateBondMore(more: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::schedule_candidate_bond_less`].
     *
     * @param less
     **/
    scheduleCandidateBondLess(less: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::execute_candidate_bond_less`].
     *
     * @param candidate
     **/
    executeCandidateBondLess(candidate: AccountId20Like): ISubmittableExtrinsic;

    /**
     * See [`Pallet::cancel_candidate_bond_less`].
     *
     **/
    cancelCandidateBondLess(): ISubmittableExtrinsic;

    /**
     * See [`Pallet::delegate`].
     *
     * @param candidate
     * @param amount
     * @param candidateDelegationCount
     * @param delegationCount
     **/
    delegate(
      candidate: AccountId20Like,
      amount: bigint,
      candidateDelegationCount: number,
      delegationCount: number,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::delegate_with_auto_compound`].
     *
     * @param candidate
     * @param amount
     * @param autoCompound
     * @param candidateDelegationCount
     * @param candidateAutoCompoundingDelegationCount
     * @param delegationCount
     **/
    delegateWithAutoCompound(
      candidate: AccountId20Like,
      amount: bigint,
      autoCompound: Percent,
      candidateDelegationCount: number,
      candidateAutoCompoundingDelegationCount: number,
      delegationCount: number,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::removed_call_19`].
     *
     **/
    removedCall19(): ISubmittableExtrinsic;

    /**
     * See [`Pallet::removed_call_20`].
     *
     **/
    removedCall20(): ISubmittableExtrinsic;

    /**
     * See [`Pallet::removed_call_21`].
     *
     **/
    removedCall21(): ISubmittableExtrinsic;

    /**
     * See [`Pallet::schedule_revoke_delegation`].
     *
     * @param collator
     **/
    scheduleRevokeDelegation(collator: AccountId20Like): ISubmittableExtrinsic;

    /**
     * See [`Pallet::delegator_bond_more`].
     *
     * @param candidate
     * @param more
     **/
    delegatorBondMore(candidate: AccountId20Like, more: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::schedule_delegator_bond_less`].
     *
     * @param candidate
     * @param less
     **/
    scheduleDelegatorBondLess(candidate: AccountId20Like, less: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::execute_delegation_request`].
     *
     * @param delegator
     * @param candidate
     **/
    executeDelegationRequest(delegator: AccountId20Like, candidate: AccountId20Like): ISubmittableExtrinsic;

    /**
     * See [`Pallet::cancel_delegation_request`].
     *
     * @param candidate
     **/
    cancelDelegationRequest(candidate: AccountId20Like): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_auto_compound`].
     *
     * @param candidate
     * @param value
     * @param candidateAutoCompoundingDelegationCountHint
     * @param delegationCountHint
     **/
    setAutoCompound(
      candidate: AccountId20Like,
      value: Percent,
      candidateAutoCompoundingDelegationCountHint: number,
      delegationCountHint: number,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::hotfix_remove_delegation_requests_exited_candidates`].
     *
     * @param candidates
     **/
    hotfixRemoveDelegationRequestsExitedCandidates(candidates: Array<AccountId20Like>): ISubmittableExtrinsic;

    /**
     * See [`Pallet::notify_inactive_collator`].
     *
     * @param collator
     **/
    notifyInactiveCollator(collator: AccountId20Like): ISubmittableExtrinsic;

    /**
     * See [`Pallet::enable_marking_offline`].
     *
     * @param value
     **/
    enableMarkingOffline(value: boolean): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_join_candidates`].
     *
     * @param account
     * @param bond
     * @param candidateCount
     **/
    forceJoinCandidates(account: AccountId20Like, bond: bigint, candidateCount: number): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  authorInherent: {
    /**
     * See [`Pallet::kick_off_authorship_validation`].
     *
     **/
    kickOffAuthorshipValidation(): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  authorFilter: {
    /**
     * See [`Pallet::set_eligible`].
     *
     * @param new_
     **/
    setEligible(new_: PalletAuthorSlotFilterNumNonZeroU32): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  authorMapping: {
    /**
     * See [`Pallet::add_association`].
     *
     * @param nimbusId
     **/
    addAssociation(nimbusId: NimbusPrimitivesNimbusCryptoPublic): ISubmittableExtrinsic;

    /**
     * See [`Pallet::update_association`].
     *
     * @param oldNimbusId
     * @param newNimbusId
     **/
    updateAssociation(
      oldNimbusId: NimbusPrimitivesNimbusCryptoPublic,
      newNimbusId: NimbusPrimitivesNimbusCryptoPublic,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::clear_association`].
     *
     * @param nimbusId
     **/
    clearAssociation(nimbusId: NimbusPrimitivesNimbusCryptoPublic): ISubmittableExtrinsic;

    /**
     * See [`Pallet::remove_keys`].
     *
     **/
    removeKeys(): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_keys`].
     *
     * @param keys
     **/
    setKeys(keys: Bytes): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  moonbeamOrbiters: {
    /**
     * See [`Pallet::collator_add_orbiter`].
     *
     * @param orbiter
     **/
    collatorAddOrbiter(orbiter: AccountId20Like): ISubmittableExtrinsic;

    /**
     * See [`Pallet::collator_remove_orbiter`].
     *
     * @param orbiter
     **/
    collatorRemoveOrbiter(orbiter: AccountId20Like): ISubmittableExtrinsic;

    /**
     * See [`Pallet::orbiter_leave_collator_pool`].
     *
     * @param collator
     **/
    orbiterLeaveCollatorPool(collator: AccountId20Like): ISubmittableExtrinsic;

    /**
     * See [`Pallet::orbiter_register`].
     *
     **/
    orbiterRegister(): ISubmittableExtrinsic;

    /**
     * See [`Pallet::orbiter_unregister`].
     *
     * @param collatorsPoolCount
     **/
    orbiterUnregister(collatorsPoolCount: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::add_collator`].
     *
     * @param collator
     **/
    addCollator(collator: AccountId20Like): ISubmittableExtrinsic;

    /**
     * See [`Pallet::remove_collator`].
     *
     * @param collator
     **/
    removeCollator(collator: AccountId20Like): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  utility: {
    /**
     * See [`Pallet::batch`].
     *
     * @param calls
     **/
    batch(calls: Array<MoonbeamRuntimeRuntimeCall>): ISubmittableExtrinsic;

    /**
     * See [`Pallet::as_derivative`].
     *
     * @param index
     * @param call
     **/
    asDerivative(index: number, call: MoonbeamRuntimeRuntimeCall): ISubmittableExtrinsic;

    /**
     * See [`Pallet::batch_all`].
     *
     * @param calls
     **/
    batchAll(calls: Array<MoonbeamRuntimeRuntimeCall>): ISubmittableExtrinsic;

    /**
     * See [`Pallet::dispatch_as`].
     *
     * @param asOrigin
     * @param call
     **/
    dispatchAs(asOrigin: MoonbeamRuntimeOriginCaller, call: MoonbeamRuntimeRuntimeCall): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_batch`].
     *
     * @param calls
     **/
    forceBatch(calls: Array<MoonbeamRuntimeRuntimeCall>): ISubmittableExtrinsic;

    /**
     * See [`Pallet::with_weight`].
     *
     * @param call
     * @param weight
     **/
    withWeight(call: MoonbeamRuntimeRuntimeCall, weight: SpWeightsWeightV2Weight): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  proxy: {
    /**
     * See [`Pallet::proxy`].
     *
     * @param real
     * @param forceProxyType
     * @param call
     **/
    proxy(
      real: AccountId20Like,
      forceProxyType: MoonbeamRuntimeProxyType | undefined,
      call: MoonbeamRuntimeRuntimeCall,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::add_proxy`].
     *
     * @param delegate
     * @param proxyType
     * @param delay
     **/
    addProxy(delegate: AccountId20Like, proxyType: MoonbeamRuntimeProxyType, delay: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::remove_proxy`].
     *
     * @param delegate
     * @param proxyType
     * @param delay
     **/
    removeProxy(delegate: AccountId20Like, proxyType: MoonbeamRuntimeProxyType, delay: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::remove_proxies`].
     *
     **/
    removeProxies(): ISubmittableExtrinsic;

    /**
     * See [`Pallet::create_pure`].
     *
     * @param proxyType
     * @param delay
     * @param index
     **/
    createPure(proxyType: MoonbeamRuntimeProxyType, delay: number, index: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::kill_pure`].
     *
     * @param spawner
     * @param proxyType
     * @param index
     * @param height
     * @param extIndex
     **/
    killPure(
      spawner: AccountId20Like,
      proxyType: MoonbeamRuntimeProxyType,
      index: number,
      height: number,
      extIndex: number,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::announce`].
     *
     * @param real
     * @param callHash
     **/
    announce(real: AccountId20Like, callHash: H256): ISubmittableExtrinsic;

    /**
     * See [`Pallet::remove_announcement`].
     *
     * @param real
     * @param callHash
     **/
    removeAnnouncement(real: AccountId20Like, callHash: H256): ISubmittableExtrinsic;

    /**
     * See [`Pallet::reject_announcement`].
     *
     * @param delegate
     * @param callHash
     **/
    rejectAnnouncement(delegate: AccountId20Like, callHash: H256): ISubmittableExtrinsic;

    /**
     * See [`Pallet::proxy_announced`].
     *
     * @param delegate
     * @param real
     * @param forceProxyType
     * @param call
     **/
    proxyAnnounced(
      delegate: AccountId20Like,
      real: AccountId20Like,
      forceProxyType: MoonbeamRuntimeProxyType | undefined,
      call: MoonbeamRuntimeRuntimeCall,
    ): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  maintenanceMode: {
    /**
     * See [`Pallet::enter_maintenance_mode`].
     *
     **/
    enterMaintenanceMode(): ISubmittableExtrinsic;

    /**
     * See [`Pallet::resume_normal_operation`].
     *
     **/
    resumeNormalOperation(): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  identity: {
    /**
     * See [`Pallet::add_registrar`].
     *
     * @param account
     **/
    addRegistrar(account: AccountId20Like): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_identity`].
     *
     * @param info
     **/
    setIdentity(info: PalletIdentityIdentityInfo): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_subs`].
     *
     * @param subs
     **/
    setSubs(subs: Array<[AccountId20Like, Data]>): ISubmittableExtrinsic;

    /**
     * See [`Pallet::clear_identity`].
     *
     **/
    clearIdentity(): ISubmittableExtrinsic;

    /**
     * See [`Pallet::request_judgement`].
     *
     * @param regIndex
     * @param maxFee
     **/
    requestJudgement(regIndex: number, maxFee: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::cancel_request`].
     *
     * @param regIndex
     **/
    cancelRequest(regIndex: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_fee`].
     *
     * @param index
     * @param fee
     **/
    setFee(index: number, fee: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_account_id`].
     *
     * @param index
     * @param new_
     **/
    setAccountId(index: number, new_: AccountId20Like): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_fields`].
     *
     * @param index
     * @param fields
     **/
    setFields(index: number, fields: PalletIdentityBitFlags): ISubmittableExtrinsic;

    /**
     * See [`Pallet::provide_judgement`].
     *
     * @param regIndex
     * @param target
     * @param judgement
     * @param identity
     **/
    provideJudgement(
      regIndex: number,
      target: AccountId20Like,
      judgement: PalletIdentityJudgement,
      identity: H256,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::kill_identity`].
     *
     * @param target
     **/
    killIdentity(target: AccountId20Like): ISubmittableExtrinsic;

    /**
     * See [`Pallet::add_sub`].
     *
     * @param sub
     * @param data
     **/
    addSub(sub: AccountId20Like, data: Data): ISubmittableExtrinsic;

    /**
     * See [`Pallet::rename_sub`].
     *
     * @param sub
     * @param data
     **/
    renameSub(sub: AccountId20Like, data: Data): ISubmittableExtrinsic;

    /**
     * See [`Pallet::remove_sub`].
     *
     * @param sub
     **/
    removeSub(sub: AccountId20Like): ISubmittableExtrinsic;

    /**
     * See [`Pallet::quit_sub`].
     *
     **/
    quitSub(): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  multisig: {
    /**
     * See [`Pallet::as_multi_threshold_1`].
     *
     * @param otherSignatories
     * @param call
     **/
    asMultiThreshold1(
      otherSignatories: Array<AccountId20Like>,
      call: MoonbeamRuntimeRuntimeCall,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::as_multi`].
     *
     * @param threshold
     * @param otherSignatories
     * @param maybeTimepoint
     * @param call
     * @param maxWeight
     **/
    asMulti(
      threshold: number,
      otherSignatories: Array<AccountId20Like>,
      maybeTimepoint: PalletMultisigTimepoint | undefined,
      call: MoonbeamRuntimeRuntimeCall,
      maxWeight: SpWeightsWeightV2Weight,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::approve_as_multi`].
     *
     * @param threshold
     * @param otherSignatories
     * @param maybeTimepoint
     * @param callHash
     * @param maxWeight
     **/
    approveAsMulti(
      threshold: number,
      otherSignatories: Array<AccountId20Like>,
      maybeTimepoint: PalletMultisigTimepoint | undefined,
      callHash: FixedBytes<32>,
      maxWeight: SpWeightsWeightV2Weight,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::cancel_as_multi`].
     *
     * @param threshold
     * @param otherSignatories
     * @param timepoint
     * @param callHash
     **/
    cancelAsMulti(
      threshold: number,
      otherSignatories: Array<AccountId20Like>,
      timepoint: PalletMultisigTimepoint,
      callHash: FixedBytes<32>,
    ): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  evm: {
    /**
     * See [`Pallet::withdraw`].
     *
     * @param address
     * @param value
     **/
    withdraw(address: H160, value: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::call`].
     *
     * @param source
     * @param target
     * @param input
     * @param value
     * @param gasLimit
     * @param maxFeePerGas
     * @param maxPriorityFeePerGas
     * @param nonce
     * @param accessList
     **/
    call(
      source: H160,
      target: H160,
      input: Bytes,
      value: U256,
      gasLimit: bigint,
      maxFeePerGas: U256,
      maxPriorityFeePerGas: U256 | undefined,
      nonce: U256 | undefined,
      accessList: Array<[H160, Array<H256>]>,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::create`].
     *
     * @param source
     * @param init
     * @param value
     * @param gasLimit
     * @param maxFeePerGas
     * @param maxPriorityFeePerGas
     * @param nonce
     * @param accessList
     **/
    create(
      source: H160,
      init: Bytes,
      value: U256,
      gasLimit: bigint,
      maxFeePerGas: U256,
      maxPriorityFeePerGas: U256 | undefined,
      nonce: U256 | undefined,
      accessList: Array<[H160, Array<H256>]>,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::create2`].
     *
     * @param source
     * @param init
     * @param salt
     * @param value
     * @param gasLimit
     * @param maxFeePerGas
     * @param maxPriorityFeePerGas
     * @param nonce
     * @param accessList
     **/
    create2(
      source: H160,
      init: Bytes,
      salt: H256,
      value: U256,
      gasLimit: bigint,
      maxFeePerGas: U256,
      maxPriorityFeePerGas: U256 | undefined,
      nonce: U256 | undefined,
      accessList: Array<[H160, Array<H256>]>,
    ): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  ethereum: {
    /**
     * See [`Pallet::transact`].
     *
     * @param transaction
     **/
    transact(transaction: EthereumTransactionTransactionV2): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  scheduler: {
    /**
     * See [`Pallet::schedule`].
     *
     * @param when
     * @param maybePeriodic
     * @param priority
     * @param call
     **/
    schedule(
      when: number,
      maybePeriodic: [number, number] | undefined,
      priority: number,
      call: MoonbeamRuntimeRuntimeCall,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::cancel`].
     *
     * @param when
     * @param index
     **/
    cancel(when: number, index: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::schedule_named`].
     *
     * @param id
     * @param when
     * @param maybePeriodic
     * @param priority
     * @param call
     **/
    scheduleNamed(
      id: FixedBytes<32>,
      when: number,
      maybePeriodic: [number, number] | undefined,
      priority: number,
      call: MoonbeamRuntimeRuntimeCall,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::cancel_named`].
     *
     * @param id
     **/
    cancelNamed(id: FixedBytes<32>): ISubmittableExtrinsic;

    /**
     * See [`Pallet::schedule_after`].
     *
     * @param after
     * @param maybePeriodic
     * @param priority
     * @param call
     **/
    scheduleAfter(
      after: number,
      maybePeriodic: [number, number] | undefined,
      priority: number,
      call: MoonbeamRuntimeRuntimeCall,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::schedule_named_after`].
     *
     * @param id
     * @param after
     * @param maybePeriodic
     * @param priority
     * @param call
     **/
    scheduleNamedAfter(
      id: FixedBytes<32>,
      after: number,
      maybePeriodic: [number, number] | undefined,
      priority: number,
      call: MoonbeamRuntimeRuntimeCall,
    ): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  democracy: {
    /**
     * See [`Pallet::propose`].
     *
     * @param proposal
     * @param value
     **/
    propose(proposal: FrameSupportPreimagesBounded, value: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::second`].
     *
     * @param proposal
     **/
    second(proposal: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::vote`].
     *
     * @param refIndex
     * @param vote
     **/
    vote(refIndex: number, vote: PalletDemocracyVoteAccountVote): ISubmittableExtrinsic;

    /**
     * See [`Pallet::emergency_cancel`].
     *
     * @param refIndex
     **/
    emergencyCancel(refIndex: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::external_propose`].
     *
     * @param proposal
     **/
    externalPropose(proposal: FrameSupportPreimagesBounded): ISubmittableExtrinsic;

    /**
     * See [`Pallet::external_propose_majority`].
     *
     * @param proposal
     **/
    externalProposeMajority(proposal: FrameSupportPreimagesBounded): ISubmittableExtrinsic;

    /**
     * See [`Pallet::external_propose_default`].
     *
     * @param proposal
     **/
    externalProposeDefault(proposal: FrameSupportPreimagesBounded): ISubmittableExtrinsic;

    /**
     * See [`Pallet::fast_track`].
     *
     * @param proposalHash
     * @param votingPeriod
     * @param delay
     **/
    fastTrack(proposalHash: H256, votingPeriod: number, delay: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::veto_external`].
     *
     * @param proposalHash
     **/
    vetoExternal(proposalHash: H256): ISubmittableExtrinsic;

    /**
     * See [`Pallet::cancel_referendum`].
     *
     * @param refIndex
     **/
    cancelReferendum(refIndex: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::delegate`].
     *
     * @param to
     * @param conviction
     * @param balance
     **/
    delegate(to: AccountId20Like, conviction: PalletDemocracyConviction, balance: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::undelegate`].
     *
     **/
    undelegate(): ISubmittableExtrinsic;

    /**
     * See [`Pallet::clear_public_proposals`].
     *
     **/
    clearPublicProposals(): ISubmittableExtrinsic;

    /**
     * See [`Pallet::unlock`].
     *
     * @param target
     **/
    unlock(target: AccountId20Like): ISubmittableExtrinsic;

    /**
     * See [`Pallet::remove_vote`].
     *
     * @param index
     **/
    removeVote(index: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::remove_other_vote`].
     *
     * @param target
     * @param index
     **/
    removeOtherVote(target: AccountId20Like, index: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::blacklist`].
     *
     * @param proposalHash
     * @param maybeRefIndex
     **/
    blacklist(proposalHash: H256, maybeRefIndex: number | undefined): ISubmittableExtrinsic;

    /**
     * See [`Pallet::cancel_proposal`].
     *
     * @param propIndex
     **/
    cancelProposal(propIndex: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_metadata`].
     *
     * @param owner
     * @param maybeHash
     **/
    setMetadata(owner: PalletDemocracyMetadataOwner, maybeHash: H256 | undefined): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  preimage: {
    /**
     * See [`Pallet::note_preimage`].
     *
     * @param bytes
     **/
    notePreimage(bytes: Bytes): ISubmittableExtrinsic;

    /**
     * See [`Pallet::unnote_preimage`].
     *
     * @param hash
     **/
    unnotePreimage(hash: H256): ISubmittableExtrinsic;

    /**
     * See [`Pallet::request_preimage`].
     *
     * @param hash
     **/
    requestPreimage(hash: H256): ISubmittableExtrinsic;

    /**
     * See [`Pallet::unrequest_preimage`].
     *
     * @param hash
     **/
    unrequestPreimage(hash: H256): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  convictionVoting: {
    /**
     * See [`Pallet::vote`].
     *
     * @param pollIndex
     * @param vote
     **/
    vote(pollIndex: number, vote: PalletConvictionVotingVoteAccountVote): ISubmittableExtrinsic;

    /**
     * See [`Pallet::delegate`].
     *
     * @param class_
     * @param to
     * @param conviction
     * @param balance
     **/
    delegate(
      class_: number,
      to: AccountId20Like,
      conviction: PalletConvictionVotingConviction,
      balance: bigint,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::undelegate`].
     *
     * @param class_
     **/
    undelegate(class_: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::unlock`].
     *
     * @param class_
     * @param target
     **/
    unlock(class_: number, target: AccountId20Like): ISubmittableExtrinsic;

    /**
     * See [`Pallet::remove_vote`].
     *
     * @param class_
     * @param index
     **/
    removeVote(class_: number | undefined, index: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::remove_other_vote`].
     *
     * @param target
     * @param class_
     * @param index
     **/
    removeOtherVote(target: AccountId20Like, class_: number, index: number): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  referenda: {
    /**
     * See [`Pallet::submit`].
     *
     * @param proposalOrigin
     * @param proposal
     * @param enactmentMoment
     **/
    submit(
      proposalOrigin: MoonbeamRuntimeOriginCaller,
      proposal: FrameSupportPreimagesBounded,
      enactmentMoment: FrameSupportScheduleDispatchTime,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::place_decision_deposit`].
     *
     * @param index
     **/
    placeDecisionDeposit(index: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::refund_decision_deposit`].
     *
     * @param index
     **/
    refundDecisionDeposit(index: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::cancel`].
     *
     * @param index
     **/
    cancel(index: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::kill`].
     *
     * @param index
     **/
    kill(index: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::nudge_referendum`].
     *
     * @param index
     **/
    nudgeReferendum(index: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::one_fewer_deciding`].
     *
     * @param track
     **/
    oneFewerDeciding(track: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::refund_submission_deposit`].
     *
     * @param index
     **/
    refundSubmissionDeposit(index: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_metadata`].
     *
     * @param index
     * @param maybeHash
     **/
    setMetadata(index: number, maybeHash: H256 | undefined): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  whitelist: {
    /**
     * See [`Pallet::whitelist_call`].
     *
     * @param callHash
     **/
    whitelistCall(callHash: H256): ISubmittableExtrinsic;

    /**
     * See [`Pallet::remove_whitelisted_call`].
     *
     * @param callHash
     **/
    removeWhitelistedCall(callHash: H256): ISubmittableExtrinsic;

    /**
     * See [`Pallet::dispatch_whitelisted_call`].
     *
     * @param callHash
     * @param callEncodedLen
     * @param callWeightWitness
     **/
    dispatchWhitelistedCall(
      callHash: H256,
      callEncodedLen: number,
      callWeightWitness: SpWeightsWeightV2Weight,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::dispatch_whitelisted_call_with_preimage`].
     *
     * @param call
     **/
    dispatchWhitelistedCallWithPreimage(call: MoonbeamRuntimeRuntimeCall): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  councilCollective: {
    /**
     * See [`Pallet::set_members`].
     *
     * @param newMembers
     * @param prime
     * @param oldCount
     **/
    setMembers(
      newMembers: Array<AccountId20Like>,
      prime: AccountId20Like | undefined,
      oldCount: number,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::execute`].
     *
     * @param proposal
     * @param lengthBound
     **/
    execute(proposal: MoonbeamRuntimeRuntimeCall, lengthBound: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::propose`].
     *
     * @param threshold
     * @param proposal
     * @param lengthBound
     **/
    propose(threshold: number, proposal: MoonbeamRuntimeRuntimeCall, lengthBound: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::vote`].
     *
     * @param proposal
     * @param index
     * @param approve
     **/
    vote(proposal: H256, index: number, approve: boolean): ISubmittableExtrinsic;

    /**
     * See [`Pallet::disapprove_proposal`].
     *
     * @param proposalHash
     **/
    disapproveProposal(proposalHash: H256): ISubmittableExtrinsic;

    /**
     * See [`Pallet::close`].
     *
     * @param proposalHash
     * @param index
     * @param proposalWeightBound
     * @param lengthBound
     **/
    close(
      proposalHash: H256,
      index: number,
      proposalWeightBound: SpWeightsWeightV2Weight,
      lengthBound: number,
    ): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  techCommitteeCollective: {
    /**
     * See [`Pallet::set_members`].
     *
     * @param newMembers
     * @param prime
     * @param oldCount
     **/
    setMembers(
      newMembers: Array<AccountId20Like>,
      prime: AccountId20Like | undefined,
      oldCount: number,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::execute`].
     *
     * @param proposal
     * @param lengthBound
     **/
    execute(proposal: MoonbeamRuntimeRuntimeCall, lengthBound: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::propose`].
     *
     * @param threshold
     * @param proposal
     * @param lengthBound
     **/
    propose(threshold: number, proposal: MoonbeamRuntimeRuntimeCall, lengthBound: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::vote`].
     *
     * @param proposal
     * @param index
     * @param approve
     **/
    vote(proposal: H256, index: number, approve: boolean): ISubmittableExtrinsic;

    /**
     * See [`Pallet::disapprove_proposal`].
     *
     * @param proposalHash
     **/
    disapproveProposal(proposalHash: H256): ISubmittableExtrinsic;

    /**
     * See [`Pallet::close`].
     *
     * @param proposalHash
     * @param index
     * @param proposalWeightBound
     * @param lengthBound
     **/
    close(
      proposalHash: H256,
      index: number,
      proposalWeightBound: SpWeightsWeightV2Weight,
      lengthBound: number,
    ): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  treasuryCouncilCollective: {
    /**
     * See [`Pallet::set_members`].
     *
     * @param newMembers
     * @param prime
     * @param oldCount
     **/
    setMembers(
      newMembers: Array<AccountId20Like>,
      prime: AccountId20Like | undefined,
      oldCount: number,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::execute`].
     *
     * @param proposal
     * @param lengthBound
     **/
    execute(proposal: MoonbeamRuntimeRuntimeCall, lengthBound: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::propose`].
     *
     * @param threshold
     * @param proposal
     * @param lengthBound
     **/
    propose(threshold: number, proposal: MoonbeamRuntimeRuntimeCall, lengthBound: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::vote`].
     *
     * @param proposal
     * @param index
     * @param approve
     **/
    vote(proposal: H256, index: number, approve: boolean): ISubmittableExtrinsic;

    /**
     * See [`Pallet::disapprove_proposal`].
     *
     * @param proposalHash
     **/
    disapproveProposal(proposalHash: H256): ISubmittableExtrinsic;

    /**
     * See [`Pallet::close`].
     *
     * @param proposalHash
     * @param index
     * @param proposalWeightBound
     * @param lengthBound
     **/
    close(
      proposalHash: H256,
      index: number,
      proposalWeightBound: SpWeightsWeightV2Weight,
      lengthBound: number,
    ): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  openTechCommitteeCollective: {
    /**
     * See [`Pallet::set_members`].
     *
     * @param newMembers
     * @param prime
     * @param oldCount
     **/
    setMembers(
      newMembers: Array<AccountId20Like>,
      prime: AccountId20Like | undefined,
      oldCount: number,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::execute`].
     *
     * @param proposal
     * @param lengthBound
     **/
    execute(proposal: MoonbeamRuntimeRuntimeCall, lengthBound: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::propose`].
     *
     * @param threshold
     * @param proposal
     * @param lengthBound
     **/
    propose(threshold: number, proposal: MoonbeamRuntimeRuntimeCall, lengthBound: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::vote`].
     *
     * @param proposal
     * @param index
     * @param approve
     **/
    vote(proposal: H256, index: number, approve: boolean): ISubmittableExtrinsic;

    /**
     * See [`Pallet::disapprove_proposal`].
     *
     * @param proposalHash
     **/
    disapproveProposal(proposalHash: H256): ISubmittableExtrinsic;

    /**
     * See [`Pallet::close`].
     *
     * @param proposalHash
     * @param index
     * @param proposalWeightBound
     * @param lengthBound
     **/
    close(
      proposalHash: H256,
      index: number,
      proposalWeightBound: SpWeightsWeightV2Weight,
      lengthBound: number,
    ): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  treasury: {
    /**
     * See [`Pallet::propose_spend`].
     *
     * @param value
     * @param beneficiary
     **/
    proposeSpend(value: bigint, beneficiary: AccountId20Like): ISubmittableExtrinsic;

    /**
     * See [`Pallet::reject_proposal`].
     *
     * @param proposalId
     **/
    rejectProposal(proposalId: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::approve_proposal`].
     *
     * @param proposalId
     **/
    approveProposal(proposalId: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::spend`].
     *
     * @param amount
     * @param beneficiary
     **/
    spend(amount: bigint, beneficiary: AccountId20Like): ISubmittableExtrinsic;

    /**
     * See [`Pallet::remove_approval`].
     *
     * @param proposalId
     **/
    removeApproval(proposalId: number): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  crowdloanRewards: {
    /**
     * See [`Pallet::associate_native_identity`].
     *
     * @param rewardAccount
     * @param relayAccount
     * @param proof
     **/
    associateNativeIdentity(
      rewardAccount: AccountId20Like,
      relayAccount: FixedBytes<32>,
      proof: SpRuntimeMultiSignature,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::change_association_with_relay_keys`].
     *
     * @param rewardAccount
     * @param previousAccount
     * @param proofs
     **/
    changeAssociationWithRelayKeys(
      rewardAccount: AccountId20Like,
      previousAccount: AccountId20Like,
      proofs: Array<[FixedBytes<32>, SpRuntimeMultiSignature]>,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::claim`].
     *
     **/
    claim(): ISubmittableExtrinsic;

    /**
     * See [`Pallet::update_reward_address`].
     *
     * @param newRewardAccount
     **/
    updateRewardAddress(newRewardAccount: AccountId20Like): ISubmittableExtrinsic;

    /**
     * See [`Pallet::complete_initialization`].
     *
     * @param leaseEndingBlock
     **/
    completeInitialization(leaseEndingBlock: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::initialize_reward_vec`].
     *
     * @param rewards
     **/
    initializeRewardVec(rewards: Array<[FixedBytes<32>, AccountId20Like | undefined, bigint]>): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  dmpQueue: {
    /**
     * See [`Pallet::service_overweight`].
     *
     * @param index
     * @param weightLimit
     **/
    serviceOverweight(index: bigint, weightLimit: SpWeightsWeightV2Weight): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  polkadotXcm: {
    /**
     * See [`Pallet::send`].
     *
     * @param dest
     * @param message
     **/
    send(dest: StagingXcmVersionedMultiLocation, message: StagingXcmVersionedXcm): ISubmittableExtrinsic;

    /**
     * See [`Pallet::teleport_assets`].
     *
     * @param dest
     * @param beneficiary
     * @param assets
     * @param feeAssetItem
     **/
    teleportAssets(
      dest: StagingXcmVersionedMultiLocation,
      beneficiary: StagingXcmVersionedMultiLocation,
      assets: StagingXcmVersionedMultiAssets,
      feeAssetItem: number,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::reserve_transfer_assets`].
     *
     * @param dest
     * @param beneficiary
     * @param assets
     * @param feeAssetItem
     **/
    reserveTransferAssets(
      dest: StagingXcmVersionedMultiLocation,
      beneficiary: StagingXcmVersionedMultiLocation,
      assets: StagingXcmVersionedMultiAssets,
      feeAssetItem: number,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::execute`].
     *
     * @param message
     * @param maxWeight
     **/
    execute(message: StagingXcmVersionedXcm, maxWeight: SpWeightsWeightV2Weight): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_xcm_version`].
     *
     * @param location
     * @param version
     **/
    forceXcmVersion(location: StagingXcmV3MultilocationMultiLocation, version: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_default_xcm_version`].
     *
     * @param maybeXcmVersion
     **/
    forceDefaultXcmVersion(maybeXcmVersion: number | undefined): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_subscribe_version_notify`].
     *
     * @param location
     **/
    forceSubscribeVersionNotify(location: StagingXcmVersionedMultiLocation): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_unsubscribe_version_notify`].
     *
     * @param location
     **/
    forceUnsubscribeVersionNotify(location: StagingXcmVersionedMultiLocation): ISubmittableExtrinsic;

    /**
     * See [`Pallet::limited_reserve_transfer_assets`].
     *
     * @param dest
     * @param beneficiary
     * @param assets
     * @param feeAssetItem
     * @param weightLimit
     **/
    limitedReserveTransferAssets(
      dest: StagingXcmVersionedMultiLocation,
      beneficiary: StagingXcmVersionedMultiLocation,
      assets: StagingXcmVersionedMultiAssets,
      feeAssetItem: number,
      weightLimit: StagingXcmV3WeightLimit,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::limited_teleport_assets`].
     *
     * @param dest
     * @param beneficiary
     * @param assets
     * @param feeAssetItem
     * @param weightLimit
     **/
    limitedTeleportAssets(
      dest: StagingXcmVersionedMultiLocation,
      beneficiary: StagingXcmVersionedMultiLocation,
      assets: StagingXcmVersionedMultiAssets,
      feeAssetItem: number,
      weightLimit: StagingXcmV3WeightLimit,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_suspension`].
     *
     * @param suspended
     **/
    forceSuspension(suspended: boolean): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  assets: {
    /**
     * See [`Pallet::create`].
     *
     * @param id
     * @param admin
     * @param minBalance
     **/
    create(id: bigint, admin: AccountId20Like, minBalance: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_create`].
     *
     * @param id
     * @param owner
     * @param isSufficient
     * @param minBalance
     **/
    forceCreate(id: bigint, owner: AccountId20Like, isSufficient: boolean, minBalance: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::start_destroy`].
     *
     * @param id
     **/
    startDestroy(id: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::destroy_accounts`].
     *
     * @param id
     **/
    destroyAccounts(id: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::destroy_approvals`].
     *
     * @param id
     **/
    destroyApprovals(id: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::finish_destroy`].
     *
     * @param id
     **/
    finishDestroy(id: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::mint`].
     *
     * @param id
     * @param beneficiary
     * @param amount
     **/
    mint(id: bigint, beneficiary: AccountId20Like, amount: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::burn`].
     *
     * @param id
     * @param who
     * @param amount
     **/
    burn(id: bigint, who: AccountId20Like, amount: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::transfer`].
     *
     * @param id
     * @param target
     * @param amount
     **/
    transfer(id: bigint, target: AccountId20Like, amount: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::transfer_keep_alive`].
     *
     * @param id
     * @param target
     * @param amount
     **/
    transferKeepAlive(id: bigint, target: AccountId20Like, amount: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_transfer`].
     *
     * @param id
     * @param source
     * @param dest
     * @param amount
     **/
    forceTransfer(id: bigint, source: AccountId20Like, dest: AccountId20Like, amount: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::freeze`].
     *
     * @param id
     * @param who
     **/
    freeze(id: bigint, who: AccountId20Like): ISubmittableExtrinsic;

    /**
     * See [`Pallet::thaw`].
     *
     * @param id
     * @param who
     **/
    thaw(id: bigint, who: AccountId20Like): ISubmittableExtrinsic;

    /**
     * See [`Pallet::freeze_asset`].
     *
     * @param id
     **/
    freezeAsset(id: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::thaw_asset`].
     *
     * @param id
     **/
    thawAsset(id: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::transfer_ownership`].
     *
     * @param id
     * @param owner
     **/
    transferOwnership(id: bigint, owner: AccountId20Like): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_team`].
     *
     * @param id
     * @param issuer
     * @param admin
     * @param freezer
     **/
    setTeam(
      id: bigint,
      issuer: AccountId20Like,
      admin: AccountId20Like,
      freezer: AccountId20Like,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_metadata`].
     *
     * @param id
     * @param name
     * @param symbol
     * @param decimals
     **/
    setMetadata(id: bigint, name: Bytes, symbol: Bytes, decimals: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::clear_metadata`].
     *
     * @param id
     **/
    clearMetadata(id: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_set_metadata`].
     *
     * @param id
     * @param name
     * @param symbol
     * @param decimals
     * @param isFrozen
     **/
    forceSetMetadata(
      id: bigint,
      name: Bytes,
      symbol: Bytes,
      decimals: number,
      isFrozen: boolean,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_clear_metadata`].
     *
     * @param id
     **/
    forceClearMetadata(id: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_asset_status`].
     *
     * @param id
     * @param owner
     * @param issuer
     * @param admin
     * @param freezer
     * @param minBalance
     * @param isSufficient
     * @param isFrozen
     **/
    forceAssetStatus(
      id: bigint,
      owner: AccountId20Like,
      issuer: AccountId20Like,
      admin: AccountId20Like,
      freezer: AccountId20Like,
      minBalance: bigint,
      isSufficient: boolean,
      isFrozen: boolean,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::approve_transfer`].
     *
     * @param id
     * @param delegate
     * @param amount
     **/
    approveTransfer(id: bigint, delegate: AccountId20Like, amount: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::cancel_approval`].
     *
     * @param id
     * @param delegate
     **/
    cancelApproval(id: bigint, delegate: AccountId20Like): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_cancel_approval`].
     *
     * @param id
     * @param owner
     * @param delegate
     **/
    forceCancelApproval(id: bigint, owner: AccountId20Like, delegate: AccountId20Like): ISubmittableExtrinsic;

    /**
     * See [`Pallet::transfer_approved`].
     *
     * @param id
     * @param owner
     * @param destination
     * @param amount
     **/
    transferApproved(
      id: bigint,
      owner: AccountId20Like,
      destination: AccountId20Like,
      amount: bigint,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::touch`].
     *
     * @param id
     **/
    touch(id: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::refund`].
     *
     * @param id
     * @param allowBurn
     **/
    refund(id: bigint, allowBurn: boolean): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_min_balance`].
     *
     * @param id
     * @param minBalance
     **/
    setMinBalance(id: bigint, minBalance: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::touch_other`].
     *
     * @param id
     * @param who
     **/
    touchOther(id: bigint, who: AccountId20Like): ISubmittableExtrinsic;

    /**
     * See [`Pallet::refund_other`].
     *
     * @param id
     * @param who
     **/
    refundOther(id: bigint, who: AccountId20Like): ISubmittableExtrinsic;

    /**
     * See [`Pallet::block`].
     *
     * @param id
     * @param who
     **/
    block(id: bigint, who: AccountId20Like): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  assetManager: {
    /**
     * See [`Pallet::register_foreign_asset`].
     *
     * @param asset
     * @param metadata
     * @param minAmount
     * @param isSufficient
     **/
    registerForeignAsset(
      asset: MoonbeamRuntimeXcmConfigAssetType,
      metadata: MoonbeamRuntimeAssetConfigAssetRegistrarMetadata,
      minAmount: bigint,
      isSufficient: boolean,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_asset_units_per_second`].
     *
     * @param assetType
     * @param unitsPerSecond
     * @param numAssetsWeightHint
     **/
    setAssetUnitsPerSecond(
      assetType: MoonbeamRuntimeXcmConfigAssetType,
      unitsPerSecond: bigint,
      numAssetsWeightHint: number,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::change_existing_asset_type`].
     *
     * @param assetId
     * @param newAssetType
     * @param numAssetsWeightHint
     **/
    changeExistingAssetType(
      assetId: bigint,
      newAssetType: MoonbeamRuntimeXcmConfigAssetType,
      numAssetsWeightHint: number,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::remove_supported_asset`].
     *
     * @param assetType
     * @param numAssetsWeightHint
     **/
    removeSupportedAsset(
      assetType: MoonbeamRuntimeXcmConfigAssetType,
      numAssetsWeightHint: number,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::remove_existing_asset_type`].
     *
     * @param assetId
     * @param numAssetsWeightHint
     **/
    removeExistingAssetType(assetId: bigint, numAssetsWeightHint: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::register_local_asset`].
     *
     * @param creator
     * @param owner
     * @param isSufficient
     * @param minBalance
     **/
    registerLocalAsset(
      creator: AccountId20Like,
      owner: AccountId20Like,
      isSufficient: boolean,
      minBalance: bigint,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::destroy_foreign_asset`].
     *
     * @param assetId
     * @param numAssetsWeightHint
     **/
    destroyForeignAsset(assetId: bigint, numAssetsWeightHint: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::destroy_local_asset`].
     *
     * @param assetId
     **/
    destroyLocalAsset(assetId: bigint): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  xTokens: {
    /**
     * See [`Pallet::transfer`].
     *
     * @param currencyId
     * @param amount
     * @param dest
     * @param destWeightLimit
     **/
    transfer(
      currencyId: MoonbeamRuntimeXcmConfigCurrencyId,
      amount: bigint,
      dest: StagingXcmVersionedMultiLocation,
      destWeightLimit: StagingXcmV3WeightLimit,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::transfer_multiasset`].
     *
     * @param asset
     * @param dest
     * @param destWeightLimit
     **/
    transferMultiasset(
      asset: StagingXcmVersionedMultiAsset,
      dest: StagingXcmVersionedMultiLocation,
      destWeightLimit: StagingXcmV3WeightLimit,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::transfer_with_fee`].
     *
     * @param currencyId
     * @param amount
     * @param fee
     * @param dest
     * @param destWeightLimit
     **/
    transferWithFee(
      currencyId: MoonbeamRuntimeXcmConfigCurrencyId,
      amount: bigint,
      fee: bigint,
      dest: StagingXcmVersionedMultiLocation,
      destWeightLimit: StagingXcmV3WeightLimit,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::transfer_multiasset_with_fee`].
     *
     * @param asset
     * @param fee
     * @param dest
     * @param destWeightLimit
     **/
    transferMultiassetWithFee(
      asset: StagingXcmVersionedMultiAsset,
      fee: StagingXcmVersionedMultiAsset,
      dest: StagingXcmVersionedMultiLocation,
      destWeightLimit: StagingXcmV3WeightLimit,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::transfer_multicurrencies`].
     *
     * @param currencies
     * @param feeItem
     * @param dest
     * @param destWeightLimit
     **/
    transferMulticurrencies(
      currencies: Array<[MoonbeamRuntimeXcmConfigCurrencyId, bigint]>,
      feeItem: number,
      dest: StagingXcmVersionedMultiLocation,
      destWeightLimit: StagingXcmV3WeightLimit,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::transfer_multiassets`].
     *
     * @param assets
     * @param feeItem
     * @param dest
     * @param destWeightLimit
     **/
    transferMultiassets(
      assets: StagingXcmVersionedMultiAssets,
      feeItem: number,
      dest: StagingXcmVersionedMultiLocation,
      destWeightLimit: StagingXcmV3WeightLimit,
    ): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  xcmTransactor: {
    /**
     * See [`Pallet::register`].
     *
     * @param who
     * @param index
     **/
    register(who: AccountId20Like, index: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::deregister`].
     *
     * @param index
     **/
    deregister(index: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::transact_through_derivative`].
     *
     * @param dest
     * @param index
     * @param fee
     * @param innerCall
     * @param weightInfo
     * @param refund
     **/
    transactThroughDerivative(
      dest: MoonbeamRuntimeXcmConfigTransactors,
      index: number,
      fee: PalletXcmTransactorCurrencyPayment,
      innerCall: Bytes,
      weightInfo: PalletXcmTransactorTransactWeights,
      refund: boolean,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::transact_through_sovereign`].
     *
     * @param dest
     * @param feePayer
     * @param fee
     * @param call
     * @param originKind
     * @param weightInfo
     * @param refund
     **/
    transactThroughSovereign(
      dest: StagingXcmVersionedMultiLocation,
      feePayer: AccountId20Like,
      fee: PalletXcmTransactorCurrencyPayment,
      call: Bytes,
      originKind: StagingXcmV2OriginKind,
      weightInfo: PalletXcmTransactorTransactWeights,
      refund: boolean,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_transact_info`].
     *
     * @param location
     * @param transactExtraWeight
     * @param maxWeight
     * @param transactExtraWeightSigned
     **/
    setTransactInfo(
      location: StagingXcmVersionedMultiLocation,
      transactExtraWeight: SpWeightsWeightV2Weight,
      maxWeight: SpWeightsWeightV2Weight,
      transactExtraWeightSigned: SpWeightsWeightV2Weight | undefined,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::remove_transact_info`].
     *
     * @param location
     **/
    removeTransactInfo(location: StagingXcmVersionedMultiLocation): ISubmittableExtrinsic;

    /**
     * See [`Pallet::transact_through_signed`].
     *
     * @param dest
     * @param fee
     * @param call
     * @param weightInfo
     * @param refund
     **/
    transactThroughSigned(
      dest: StagingXcmVersionedMultiLocation,
      fee: PalletXcmTransactorCurrencyPayment,
      call: Bytes,
      weightInfo: PalletXcmTransactorTransactWeights,
      refund: boolean,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_fee_per_second`].
     *
     * @param assetLocation
     * @param feePerSecond
     **/
    setFeePerSecond(assetLocation: StagingXcmVersionedMultiLocation, feePerSecond: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::remove_fee_per_second`].
     *
     * @param assetLocation
     **/
    removeFeePerSecond(assetLocation: StagingXcmVersionedMultiLocation): ISubmittableExtrinsic;

    /**
     * See [`Pallet::hrmp_manage`].
     *
     * @param action
     * @param fee
     * @param weightInfo
     **/
    hrmpManage(
      action: PalletXcmTransactorHrmpOperation,
      fee: PalletXcmTransactorCurrencyPayment,
      weightInfo: PalletXcmTransactorTransactWeights,
    ): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  localAssets: {
    /**
     * See [`Pallet::create`].
     *
     * @param id
     * @param admin
     * @param minBalance
     **/
    create(id: bigint, admin: AccountId20Like, minBalance: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_create`].
     *
     * @param id
     * @param owner
     * @param isSufficient
     * @param minBalance
     **/
    forceCreate(id: bigint, owner: AccountId20Like, isSufficient: boolean, minBalance: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::start_destroy`].
     *
     * @param id
     **/
    startDestroy(id: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::destroy_accounts`].
     *
     * @param id
     **/
    destroyAccounts(id: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::destroy_approvals`].
     *
     * @param id
     **/
    destroyApprovals(id: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::finish_destroy`].
     *
     * @param id
     **/
    finishDestroy(id: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::mint`].
     *
     * @param id
     * @param beneficiary
     * @param amount
     **/
    mint(id: bigint, beneficiary: AccountId20Like, amount: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::burn`].
     *
     * @param id
     * @param who
     * @param amount
     **/
    burn(id: bigint, who: AccountId20Like, amount: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::transfer`].
     *
     * @param id
     * @param target
     * @param amount
     **/
    transfer(id: bigint, target: AccountId20Like, amount: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::transfer_keep_alive`].
     *
     * @param id
     * @param target
     * @param amount
     **/
    transferKeepAlive(id: bigint, target: AccountId20Like, amount: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_transfer`].
     *
     * @param id
     * @param source
     * @param dest
     * @param amount
     **/
    forceTransfer(id: bigint, source: AccountId20Like, dest: AccountId20Like, amount: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::freeze`].
     *
     * @param id
     * @param who
     **/
    freeze(id: bigint, who: AccountId20Like): ISubmittableExtrinsic;

    /**
     * See [`Pallet::thaw`].
     *
     * @param id
     * @param who
     **/
    thaw(id: bigint, who: AccountId20Like): ISubmittableExtrinsic;

    /**
     * See [`Pallet::freeze_asset`].
     *
     * @param id
     **/
    freezeAsset(id: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::thaw_asset`].
     *
     * @param id
     **/
    thawAsset(id: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::transfer_ownership`].
     *
     * @param id
     * @param owner
     **/
    transferOwnership(id: bigint, owner: AccountId20Like): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_team`].
     *
     * @param id
     * @param issuer
     * @param admin
     * @param freezer
     **/
    setTeam(
      id: bigint,
      issuer: AccountId20Like,
      admin: AccountId20Like,
      freezer: AccountId20Like,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_metadata`].
     *
     * @param id
     * @param name
     * @param symbol
     * @param decimals
     **/
    setMetadata(id: bigint, name: Bytes, symbol: Bytes, decimals: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::clear_metadata`].
     *
     * @param id
     **/
    clearMetadata(id: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_set_metadata`].
     *
     * @param id
     * @param name
     * @param symbol
     * @param decimals
     * @param isFrozen
     **/
    forceSetMetadata(
      id: bigint,
      name: Bytes,
      symbol: Bytes,
      decimals: number,
      isFrozen: boolean,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_clear_metadata`].
     *
     * @param id
     **/
    forceClearMetadata(id: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_asset_status`].
     *
     * @param id
     * @param owner
     * @param issuer
     * @param admin
     * @param freezer
     * @param minBalance
     * @param isSufficient
     * @param isFrozen
     **/
    forceAssetStatus(
      id: bigint,
      owner: AccountId20Like,
      issuer: AccountId20Like,
      admin: AccountId20Like,
      freezer: AccountId20Like,
      minBalance: bigint,
      isSufficient: boolean,
      isFrozen: boolean,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::approve_transfer`].
     *
     * @param id
     * @param delegate
     * @param amount
     **/
    approveTransfer(id: bigint, delegate: AccountId20Like, amount: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::cancel_approval`].
     *
     * @param id
     * @param delegate
     **/
    cancelApproval(id: bigint, delegate: AccountId20Like): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_cancel_approval`].
     *
     * @param id
     * @param owner
     * @param delegate
     **/
    forceCancelApproval(id: bigint, owner: AccountId20Like, delegate: AccountId20Like): ISubmittableExtrinsic;

    /**
     * See [`Pallet::transfer_approved`].
     *
     * @param id
     * @param owner
     * @param destination
     * @param amount
     **/
    transferApproved(
      id: bigint,
      owner: AccountId20Like,
      destination: AccountId20Like,
      amount: bigint,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::touch`].
     *
     * @param id
     **/
    touch(id: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::refund`].
     *
     * @param id
     * @param allowBurn
     **/
    refund(id: bigint, allowBurn: boolean): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_min_balance`].
     *
     * @param id
     * @param minBalance
     **/
    setMinBalance(id: bigint, minBalance: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::touch_other`].
     *
     * @param id
     * @param who
     **/
    touchOther(id: bigint, who: AccountId20Like): ISubmittableExtrinsic;

    /**
     * See [`Pallet::refund_other`].
     *
     * @param id
     * @param who
     **/
    refundOther(id: bigint, who: AccountId20Like): ISubmittableExtrinsic;

    /**
     * See [`Pallet::block`].
     *
     * @param id
     * @param who
     **/
    block(id: bigint, who: AccountId20Like): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  ethereumXcm: {
    /**
     * See `Pallet::transact`.
     *
     * @param xcmTransaction
     **/
    transact(xcmTransaction: XcmPrimitivesEthereumXcmEthereumXcmTransaction): ISubmittableExtrinsic;

    /**
     * See `Pallet::transact_through_proxy`.
     *
     * @param transactAs
     * @param xcmTransaction
     **/
    transactThroughProxy(
      transactAs: H160,
      xcmTransaction: XcmPrimitivesEthereumXcmEthereumXcmTransaction,
    ): ISubmittableExtrinsic;

    /**
     * See `Pallet::suspend_ethereum_xcm_execution`.
     *
     **/
    suspendEthereumXcmExecution(): ISubmittableExtrinsic;

    /**
     * See `Pallet::resume_ethereum_xcm_execution`.
     *
     **/
    resumeEthereumXcmExecution(): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  randomness: {
    /**
     * See [`Pallet::set_babe_randomness_results`].
     *
     **/
    setBabeRandomnessResults(): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
}
