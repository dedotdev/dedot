// Generated by @delightfuldot/codegen

import type {
  GenericChainTx,
  GenericTxCall,
  ISubmittableExtrinsic,
  ISubmittableResult,
  IRuntimeTxCall,
} from '@delightfuldot/types';
import type {
  AccountId20Like,
  Extrinsic,
  BytesLike,
  H256,
  Perbill,
  Percent,
  Data,
  FixedBytes,
  H160,
  U256,
} from '@delightfuldot/codecs';
import type {
  MoonbeamRuntimeRuntimeCallLike,
  AccountEthereumSignature,
  FrameSystemEventRecord,
  CumulusPrimitivesParachainInherentParachainInherentData,
  PalletAuthorSlotFilterNumNonZeroU32,
  NimbusPrimitivesNimbusCryptoPublic,
  MoonbeamRuntimeOriginCaller,
  SpWeightsWeightV2Weight,
  MoonbeamRuntimeProxyType,
  PalletIdentitySimpleIdentityInfo,
  PalletIdentityBitFlags,
  PalletIdentityJudgement,
  PalletMultisigTimepoint,
  EthereumTransactionTransactionV2,
  FrameSupportPreimagesBounded,
  PalletDemocracyVoteAccountVote,
  PalletDemocracyConviction,
  PalletDemocracyMetadataOwner,
  PalletConvictionVotingVoteAccountVote,
  PalletConvictionVotingConviction,
  FrameSupportScheduleDispatchTime,
  SpRuntimeMultiSignature,
  XcmVersionedMultiLocation,
  XcmVersionedXcm,
  XcmVersionedMultiAssets,
  StagingXcmV3MultilocationMultiLocation,
  XcmV3WeightLimit,
  MoonbeamRuntimeXcmConfigAssetType,
  MoonbeamRuntimeAssetConfigAssetRegistrarMetadata,
  MoonbeamRuntimeXcmConfigCurrencyId,
  XcmVersionedMultiAsset,
  MoonbeamRuntimeXcmConfigTransactors,
  PalletXcmTransactorCurrencyPayment,
  PalletXcmTransactorTransactWeights,
  XcmV2OriginKind,
  PalletXcmTransactorHrmpOperation,
  XcmPrimitivesEthereumXcmEthereumXcmTransaction,
} from './types';

type ChainSubmittableExtrinsic<T extends IRuntimeTxCall = MoonbeamRuntimeRuntimeCallLike> = Extrinsic<
  AccountId20Like,
  T,
  AccountEthereumSignature,
  any[]
> &
  ISubmittableExtrinsic<ISubmittableResult<FrameSystemEventRecord>>;

export interface ChainTx extends GenericChainTx {
  /**
   * Pallet `System`'s transaction calls
   **/
  system: {
    /**
     * See [`Pallet::remark`].
     *
     * @param {BytesLike} remark
     **/
    remark: GenericTxCall<
      (remark: BytesLike) => ChainSubmittableExtrinsic<{
        pallet: 'System';
        palletCall: {
          name: 'Remark';
          params: { remark: BytesLike };
        };
      }>
    >;

    /**
     * See [`Pallet::set_heap_pages`].
     *
     * @param {bigint} pages
     **/
    setHeapPages: GenericTxCall<
      (pages: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'System';
        palletCall: {
          name: 'SetHeapPages';
          params: { pages: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::set_code`].
     *
     * @param {BytesLike} code
     **/
    setCode: GenericTxCall<
      (code: BytesLike) => ChainSubmittableExtrinsic<{
        pallet: 'System';
        palletCall: {
          name: 'SetCode';
          params: { code: BytesLike };
        };
      }>
    >;

    /**
     * See [`Pallet::set_code_without_checks`].
     *
     * @param {BytesLike} code
     **/
    setCodeWithoutChecks: GenericTxCall<
      (code: BytesLike) => ChainSubmittableExtrinsic<{
        pallet: 'System';
        palletCall: {
          name: 'SetCodeWithoutChecks';
          params: { code: BytesLike };
        };
      }>
    >;

    /**
     * See [`Pallet::set_storage`].
     *
     * @param {Array<[BytesLike, BytesLike]>} items
     **/
    setStorage: GenericTxCall<
      (items: Array<[BytesLike, BytesLike]>) => ChainSubmittableExtrinsic<{
        pallet: 'System';
        palletCall: {
          name: 'SetStorage';
          params: { items: Array<[BytesLike, BytesLike]> };
        };
      }>
    >;

    /**
     * See [`Pallet::kill_storage`].
     *
     * @param {Array<BytesLike>} keys
     **/
    killStorage: GenericTxCall<
      (keys: Array<BytesLike>) => ChainSubmittableExtrinsic<{
        pallet: 'System';
        palletCall: {
          name: 'KillStorage';
          params: { keys: Array<BytesLike> };
        };
      }>
    >;

    /**
     * See [`Pallet::kill_prefix`].
     *
     * @param {BytesLike} prefix
     * @param {number} subkeys
     **/
    killPrefix: GenericTxCall<
      (
        prefix: BytesLike,
        subkeys: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'System';
        palletCall: {
          name: 'KillPrefix';
          params: { prefix: BytesLike; subkeys: number };
        };
      }>
    >;

    /**
     * See [`Pallet::remark_with_event`].
     *
     * @param {BytesLike} remark
     **/
    remarkWithEvent: GenericTxCall<
      (remark: BytesLike) => ChainSubmittableExtrinsic<{
        pallet: 'System';
        palletCall: {
          name: 'RemarkWithEvent';
          params: { remark: BytesLike };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  /**
   * Pallet `ParachainSystem`'s transaction calls
   **/
  parachainSystem: {
    /**
     * See [`Pallet::set_validation_data`].
     *
     * @param {CumulusPrimitivesParachainInherentParachainInherentData} data
     **/
    setValidationData: GenericTxCall<
      (data: CumulusPrimitivesParachainInherentParachainInherentData) => ChainSubmittableExtrinsic<{
        pallet: 'ParachainSystem';
        palletCall: {
          name: 'SetValidationData';
          params: { data: CumulusPrimitivesParachainInherentParachainInherentData };
        };
      }>
    >;

    /**
     * See [`Pallet::sudo_send_upward_message`].
     *
     * @param {BytesLike} message
     **/
    sudoSendUpwardMessage: GenericTxCall<
      (message: BytesLike) => ChainSubmittableExtrinsic<{
        pallet: 'ParachainSystem';
        palletCall: {
          name: 'SudoSendUpwardMessage';
          params: { message: BytesLike };
        };
      }>
    >;

    /**
     * See [`Pallet::authorize_upgrade`].
     *
     * @param {H256} codeHash
     * @param {boolean} checkVersion
     **/
    authorizeUpgrade: GenericTxCall<
      (
        codeHash: H256,
        checkVersion: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ParachainSystem';
        palletCall: {
          name: 'AuthorizeUpgrade';
          params: { codeHash: H256; checkVersion: boolean };
        };
      }>
    >;

    /**
     * See [`Pallet::enact_authorized_upgrade`].
     *
     * @param {BytesLike} code
     **/
    enactAuthorizedUpgrade: GenericTxCall<
      (code: BytesLike) => ChainSubmittableExtrinsic<{
        pallet: 'ParachainSystem';
        palletCall: {
          name: 'EnactAuthorizedUpgrade';
          params: { code: BytesLike };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  /**
   * Pallet `Timestamp`'s transaction calls
   **/
  timestamp: {
    /**
     * See [`Pallet::set`].
     *
     * @param {bigint} now
     **/
    set: GenericTxCall<
      (now: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'Timestamp';
        palletCall: {
          name: 'Set';
          params: { now: bigint };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  /**
   * Pallet `RootTesting`'s transaction calls
   **/
  rootTesting: {
    /**
     * See `Pallet::fill_block`.
     *
     * @param {Perbill} ratio
     **/
    fillBlock: GenericTxCall<
      (ratio: Perbill) => ChainSubmittableExtrinsic<{
        pallet: 'RootTesting';
        palletCall: {
          name: 'FillBlock';
          params: { ratio: Perbill };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  /**
   * Pallet `Balances`'s transaction calls
   **/
  balances: {
    /**
     * See [`Pallet::transfer_allow_death`].
     *
     * @param {AccountId20Like} dest
     * @param {bigint} value
     **/
    transferAllowDeath: GenericTxCall<
      (
        dest: AccountId20Like,
        value: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Balances';
        palletCall: {
          name: 'TransferAllowDeath';
          params: { dest: AccountId20Like; value: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::force_transfer`].
     *
     * @param {AccountId20Like} source
     * @param {AccountId20Like} dest
     * @param {bigint} value
     **/
    forceTransfer: GenericTxCall<
      (
        source: AccountId20Like,
        dest: AccountId20Like,
        value: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Balances';
        palletCall: {
          name: 'ForceTransfer';
          params: { source: AccountId20Like; dest: AccountId20Like; value: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer_keep_alive`].
     *
     * @param {AccountId20Like} dest
     * @param {bigint} value
     **/
    transferKeepAlive: GenericTxCall<
      (
        dest: AccountId20Like,
        value: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Balances';
        palletCall: {
          name: 'TransferKeepAlive';
          params: { dest: AccountId20Like; value: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer_all`].
     *
     * @param {AccountId20Like} dest
     * @param {boolean} keepAlive
     **/
    transferAll: GenericTxCall<
      (
        dest: AccountId20Like,
        keepAlive: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Balances';
        palletCall: {
          name: 'TransferAll';
          params: { dest: AccountId20Like; keepAlive: boolean };
        };
      }>
    >;

    /**
     * See [`Pallet::force_unreserve`].
     *
     * @param {AccountId20Like} who
     * @param {bigint} amount
     **/
    forceUnreserve: GenericTxCall<
      (
        who: AccountId20Like,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Balances';
        palletCall: {
          name: 'ForceUnreserve';
          params: { who: AccountId20Like; amount: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::upgrade_accounts`].
     *
     * @param {Array<AccountId20Like>} who
     **/
    upgradeAccounts: GenericTxCall<
      (who: Array<AccountId20Like>) => ChainSubmittableExtrinsic<{
        pallet: 'Balances';
        palletCall: {
          name: 'UpgradeAccounts';
          params: { who: Array<AccountId20Like> };
        };
      }>
    >;

    /**
     * See [`Pallet::force_set_balance`].
     *
     * @param {AccountId20Like} who
     * @param {bigint} newFree
     **/
    forceSetBalance: GenericTxCall<
      (
        who: AccountId20Like,
        newFree: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Balances';
        palletCall: {
          name: 'ForceSetBalance';
          params: { who: AccountId20Like; newFree: bigint };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  /**
   * Pallet `ParachainStaking`'s transaction calls
   **/
  parachainStaking: {
    /**
     * See [`Pallet::set_staking_expectations`].
     *
     * @param {{min: bigint, ideal: bigint, max: bigint}} expectations
     **/
    setStakingExpectations: GenericTxCall<
      (expectations: { min: bigint; ideal: bigint; max: bigint }) => ChainSubmittableExtrinsic<{
        pallet: 'ParachainStaking';
        palletCall: {
          name: 'SetStakingExpectations';
          params: { expectations: { min: bigint; ideal: bigint; max: bigint } };
        };
      }>
    >;

    /**
     * See [`Pallet::set_inflation`].
     *
     * @param {{min: Perbill, ideal: Perbill, max: Perbill}} schedule
     **/
    setInflation: GenericTxCall<
      (schedule: { min: Perbill; ideal: Perbill; max: Perbill }) => ChainSubmittableExtrinsic<{
        pallet: 'ParachainStaking';
        palletCall: {
          name: 'SetInflation';
          params: { schedule: { min: Perbill; ideal: Perbill; max: Perbill } };
        };
      }>
    >;

    /**
     * See [`Pallet::set_parachain_bond_account`].
     *
     * @param {AccountId20Like} new_
     **/
    setParachainBondAccount: GenericTxCall<
      (new_: AccountId20Like) => ChainSubmittableExtrinsic<{
        pallet: 'ParachainStaking';
        palletCall: {
          name: 'SetParachainBondAccount';
          params: { new: AccountId20Like };
        };
      }>
    >;

    /**
     * See [`Pallet::set_parachain_bond_reserve_percent`].
     *
     * @param {Percent} new_
     **/
    setParachainBondReservePercent: GenericTxCall<
      (new_: Percent) => ChainSubmittableExtrinsic<{
        pallet: 'ParachainStaking';
        palletCall: {
          name: 'SetParachainBondReservePercent';
          params: { new: Percent };
        };
      }>
    >;

    /**
     * See [`Pallet::set_total_selected`].
     *
     * @param {number} new_
     **/
    setTotalSelected: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'ParachainStaking';
        palletCall: {
          name: 'SetTotalSelected';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_collator_commission`].
     *
     * @param {Perbill} new_
     **/
    setCollatorCommission: GenericTxCall<
      (new_: Perbill) => ChainSubmittableExtrinsic<{
        pallet: 'ParachainStaking';
        palletCall: {
          name: 'SetCollatorCommission';
          params: { new: Perbill };
        };
      }>
    >;

    /**
     * See [`Pallet::set_blocks_per_round`].
     *
     * @param {number} new_
     **/
    setBlocksPerRound: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'ParachainStaking';
        palletCall: {
          name: 'SetBlocksPerRound';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::join_candidates`].
     *
     * @param {bigint} bond
     * @param {number} candidateCount
     **/
    joinCandidates: GenericTxCall<
      (
        bond: bigint,
        candidateCount: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ParachainStaking';
        palletCall: {
          name: 'JoinCandidates';
          params: { bond: bigint; candidateCount: number };
        };
      }>
    >;

    /**
     * See [`Pallet::schedule_leave_candidates`].
     *
     * @param {number} candidateCount
     **/
    scheduleLeaveCandidates: GenericTxCall<
      (candidateCount: number) => ChainSubmittableExtrinsic<{
        pallet: 'ParachainStaking';
        palletCall: {
          name: 'ScheduleLeaveCandidates';
          params: { candidateCount: number };
        };
      }>
    >;

    /**
     * See [`Pallet::execute_leave_candidates`].
     *
     * @param {AccountId20Like} candidate
     * @param {number} candidateDelegationCount
     **/
    executeLeaveCandidates: GenericTxCall<
      (
        candidate: AccountId20Like,
        candidateDelegationCount: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ParachainStaking';
        palletCall: {
          name: 'ExecuteLeaveCandidates';
          params: { candidate: AccountId20Like; candidateDelegationCount: number };
        };
      }>
    >;

    /**
     * See [`Pallet::cancel_leave_candidates`].
     *
     * @param {number} candidateCount
     **/
    cancelLeaveCandidates: GenericTxCall<
      (candidateCount: number) => ChainSubmittableExtrinsic<{
        pallet: 'ParachainStaking';
        palletCall: {
          name: 'CancelLeaveCandidates';
          params: { candidateCount: number };
        };
      }>
    >;

    /**
     * See [`Pallet::go_offline`].
     *
     **/
    goOffline: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'ParachainStaking';
        palletCall: {
          name: 'GoOffline';
        };
      }>
    >;

    /**
     * See [`Pallet::go_online`].
     *
     **/
    goOnline: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'ParachainStaking';
        palletCall: {
          name: 'GoOnline';
        };
      }>
    >;

    /**
     * See [`Pallet::candidate_bond_more`].
     *
     * @param {bigint} more
     **/
    candidateBondMore: GenericTxCall<
      (more: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'ParachainStaking';
        palletCall: {
          name: 'CandidateBondMore';
          params: { more: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::schedule_candidate_bond_less`].
     *
     * @param {bigint} less
     **/
    scheduleCandidateBondLess: GenericTxCall<
      (less: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'ParachainStaking';
        palletCall: {
          name: 'ScheduleCandidateBondLess';
          params: { less: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::execute_candidate_bond_less`].
     *
     * @param {AccountId20Like} candidate
     **/
    executeCandidateBondLess: GenericTxCall<
      (candidate: AccountId20Like) => ChainSubmittableExtrinsic<{
        pallet: 'ParachainStaking';
        palletCall: {
          name: 'ExecuteCandidateBondLess';
          params: { candidate: AccountId20Like };
        };
      }>
    >;

    /**
     * See [`Pallet::cancel_candidate_bond_less`].
     *
     **/
    cancelCandidateBondLess: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'ParachainStaking';
        palletCall: {
          name: 'CancelCandidateBondLess';
        };
      }>
    >;

    /**
     * See [`Pallet::delegate`].
     *
     * @param {AccountId20Like} candidate
     * @param {bigint} amount
     * @param {number} candidateDelegationCount
     * @param {number} delegationCount
     **/
    delegate: GenericTxCall<
      (
        candidate: AccountId20Like,
        amount: bigint,
        candidateDelegationCount: number,
        delegationCount: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ParachainStaking';
        palletCall: {
          name: 'Delegate';
          params: {
            candidate: AccountId20Like;
            amount: bigint;
            candidateDelegationCount: number;
            delegationCount: number;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::delegate_with_auto_compound`].
     *
     * @param {AccountId20Like} candidate
     * @param {bigint} amount
     * @param {Percent} autoCompound
     * @param {number} candidateDelegationCount
     * @param {number} candidateAutoCompoundingDelegationCount
     * @param {number} delegationCount
     **/
    delegateWithAutoCompound: GenericTxCall<
      (
        candidate: AccountId20Like,
        amount: bigint,
        autoCompound: Percent,
        candidateDelegationCount: number,
        candidateAutoCompoundingDelegationCount: number,
        delegationCount: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ParachainStaking';
        palletCall: {
          name: 'DelegateWithAutoCompound';
          params: {
            candidate: AccountId20Like;
            amount: bigint;
            autoCompound: Percent;
            candidateDelegationCount: number;
            candidateAutoCompoundingDelegationCount: number;
            delegationCount: number;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::removed_call_19`].
     *
     **/
    removedCall19: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'ParachainStaking';
        palletCall: {
          name: 'RemovedCall19';
        };
      }>
    >;

    /**
     * See [`Pallet::removed_call_20`].
     *
     **/
    removedCall20: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'ParachainStaking';
        palletCall: {
          name: 'RemovedCall20';
        };
      }>
    >;

    /**
     * See [`Pallet::removed_call_21`].
     *
     **/
    removedCall21: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'ParachainStaking';
        palletCall: {
          name: 'RemovedCall21';
        };
      }>
    >;

    /**
     * See [`Pallet::schedule_revoke_delegation`].
     *
     * @param {AccountId20Like} collator
     **/
    scheduleRevokeDelegation: GenericTxCall<
      (collator: AccountId20Like) => ChainSubmittableExtrinsic<{
        pallet: 'ParachainStaking';
        palletCall: {
          name: 'ScheduleRevokeDelegation';
          params: { collator: AccountId20Like };
        };
      }>
    >;

    /**
     * See [`Pallet::delegator_bond_more`].
     *
     * @param {AccountId20Like} candidate
     * @param {bigint} more
     **/
    delegatorBondMore: GenericTxCall<
      (
        candidate: AccountId20Like,
        more: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ParachainStaking';
        palletCall: {
          name: 'DelegatorBondMore';
          params: { candidate: AccountId20Like; more: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::schedule_delegator_bond_less`].
     *
     * @param {AccountId20Like} candidate
     * @param {bigint} less
     **/
    scheduleDelegatorBondLess: GenericTxCall<
      (
        candidate: AccountId20Like,
        less: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ParachainStaking';
        palletCall: {
          name: 'ScheduleDelegatorBondLess';
          params: { candidate: AccountId20Like; less: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::execute_delegation_request`].
     *
     * @param {AccountId20Like} delegator
     * @param {AccountId20Like} candidate
     **/
    executeDelegationRequest: GenericTxCall<
      (
        delegator: AccountId20Like,
        candidate: AccountId20Like,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ParachainStaking';
        palletCall: {
          name: 'ExecuteDelegationRequest';
          params: { delegator: AccountId20Like; candidate: AccountId20Like };
        };
      }>
    >;

    /**
     * See [`Pallet::cancel_delegation_request`].
     *
     * @param {AccountId20Like} candidate
     **/
    cancelDelegationRequest: GenericTxCall<
      (candidate: AccountId20Like) => ChainSubmittableExtrinsic<{
        pallet: 'ParachainStaking';
        palletCall: {
          name: 'CancelDelegationRequest';
          params: { candidate: AccountId20Like };
        };
      }>
    >;

    /**
     * See [`Pallet::set_auto_compound`].
     *
     * @param {AccountId20Like} candidate
     * @param {Percent} value
     * @param {number} candidateAutoCompoundingDelegationCountHint
     * @param {number} delegationCountHint
     **/
    setAutoCompound: GenericTxCall<
      (
        candidate: AccountId20Like,
        value: Percent,
        candidateAutoCompoundingDelegationCountHint: number,
        delegationCountHint: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ParachainStaking';
        palletCall: {
          name: 'SetAutoCompound';
          params: {
            candidate: AccountId20Like;
            value: Percent;
            candidateAutoCompoundingDelegationCountHint: number;
            delegationCountHint: number;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::hotfix_remove_delegation_requests_exited_candidates`].
     *
     * @param {Array<AccountId20Like>} candidates
     **/
    hotfixRemoveDelegationRequestsExitedCandidates: GenericTxCall<
      (candidates: Array<AccountId20Like>) => ChainSubmittableExtrinsic<{
        pallet: 'ParachainStaking';
        palletCall: {
          name: 'HotfixRemoveDelegationRequestsExitedCandidates';
          params: { candidates: Array<AccountId20Like> };
        };
      }>
    >;

    /**
     * See [`Pallet::notify_inactive_collator`].
     *
     * @param {AccountId20Like} collator
     **/
    notifyInactiveCollator: GenericTxCall<
      (collator: AccountId20Like) => ChainSubmittableExtrinsic<{
        pallet: 'ParachainStaking';
        palletCall: {
          name: 'NotifyInactiveCollator';
          params: { collator: AccountId20Like };
        };
      }>
    >;

    /**
     * See [`Pallet::enable_marking_offline`].
     *
     * @param {boolean} value
     **/
    enableMarkingOffline: GenericTxCall<
      (value: boolean) => ChainSubmittableExtrinsic<{
        pallet: 'ParachainStaking';
        palletCall: {
          name: 'EnableMarkingOffline';
          params: { value: boolean };
        };
      }>
    >;

    /**
     * See [`Pallet::force_join_candidates`].
     *
     * @param {AccountId20Like} account
     * @param {bigint} bond
     * @param {number} candidateCount
     **/
    forceJoinCandidates: GenericTxCall<
      (
        account: AccountId20Like,
        bond: bigint,
        candidateCount: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ParachainStaking';
        palletCall: {
          name: 'ForceJoinCandidates';
          params: { account: AccountId20Like; bond: bigint; candidateCount: number };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  /**
   * Pallet `AuthorInherent`'s transaction calls
   **/
  authorInherent: {
    /**
     * See [`Pallet::kick_off_authorship_validation`].
     *
     **/
    kickOffAuthorshipValidation: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'AuthorInherent';
        palletCall: 'KickOffAuthorshipValidation';
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  /**
   * Pallet `AuthorFilter`'s transaction calls
   **/
  authorFilter: {
    /**
     * See [`Pallet::set_eligible`].
     *
     * @param {PalletAuthorSlotFilterNumNonZeroU32} new_
     **/
    setEligible: GenericTxCall<
      (new_: PalletAuthorSlotFilterNumNonZeroU32) => ChainSubmittableExtrinsic<{
        pallet: 'AuthorFilter';
        palletCall: {
          name: 'SetEligible';
          params: { new: PalletAuthorSlotFilterNumNonZeroU32 };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  /**
   * Pallet `AuthorMapping`'s transaction calls
   **/
  authorMapping: {
    /**
     * See [`Pallet::add_association`].
     *
     * @param {NimbusPrimitivesNimbusCryptoPublic} nimbusId
     **/
    addAssociation: GenericTxCall<
      (nimbusId: NimbusPrimitivesNimbusCryptoPublic) => ChainSubmittableExtrinsic<{
        pallet: 'AuthorMapping';
        palletCall: {
          name: 'AddAssociation';
          params: { nimbusId: NimbusPrimitivesNimbusCryptoPublic };
        };
      }>
    >;

    /**
     * See [`Pallet::update_association`].
     *
     * @param {NimbusPrimitivesNimbusCryptoPublic} oldNimbusId
     * @param {NimbusPrimitivesNimbusCryptoPublic} newNimbusId
     **/
    updateAssociation: GenericTxCall<
      (
        oldNimbusId: NimbusPrimitivesNimbusCryptoPublic,
        newNimbusId: NimbusPrimitivesNimbusCryptoPublic,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'AuthorMapping';
        palletCall: {
          name: 'UpdateAssociation';
          params: { oldNimbusId: NimbusPrimitivesNimbusCryptoPublic; newNimbusId: NimbusPrimitivesNimbusCryptoPublic };
        };
      }>
    >;

    /**
     * See [`Pallet::clear_association`].
     *
     * @param {NimbusPrimitivesNimbusCryptoPublic} nimbusId
     **/
    clearAssociation: GenericTxCall<
      (nimbusId: NimbusPrimitivesNimbusCryptoPublic) => ChainSubmittableExtrinsic<{
        pallet: 'AuthorMapping';
        palletCall: {
          name: 'ClearAssociation';
          params: { nimbusId: NimbusPrimitivesNimbusCryptoPublic };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_keys`].
     *
     **/
    removeKeys: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'AuthorMapping';
        palletCall: {
          name: 'RemoveKeys';
        };
      }>
    >;

    /**
     * See [`Pallet::set_keys`].
     *
     * @param {BytesLike} keys
     **/
    setKeys: GenericTxCall<
      (keys: BytesLike) => ChainSubmittableExtrinsic<{
        pallet: 'AuthorMapping';
        palletCall: {
          name: 'SetKeys';
          params: { keys: BytesLike };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  /**
   * Pallet `MoonbeamOrbiters`'s transaction calls
   **/
  moonbeamOrbiters: {
    /**
     * See [`Pallet::collator_add_orbiter`].
     *
     * @param {AccountId20Like} orbiter
     **/
    collatorAddOrbiter: GenericTxCall<
      (orbiter: AccountId20Like) => ChainSubmittableExtrinsic<{
        pallet: 'MoonbeamOrbiters';
        palletCall: {
          name: 'CollatorAddOrbiter';
          params: { orbiter: AccountId20Like };
        };
      }>
    >;

    /**
     * See [`Pallet::collator_remove_orbiter`].
     *
     * @param {AccountId20Like} orbiter
     **/
    collatorRemoveOrbiter: GenericTxCall<
      (orbiter: AccountId20Like) => ChainSubmittableExtrinsic<{
        pallet: 'MoonbeamOrbiters';
        palletCall: {
          name: 'CollatorRemoveOrbiter';
          params: { orbiter: AccountId20Like };
        };
      }>
    >;

    /**
     * See [`Pallet::orbiter_leave_collator_pool`].
     *
     * @param {AccountId20Like} collator
     **/
    orbiterLeaveCollatorPool: GenericTxCall<
      (collator: AccountId20Like) => ChainSubmittableExtrinsic<{
        pallet: 'MoonbeamOrbiters';
        palletCall: {
          name: 'OrbiterLeaveCollatorPool';
          params: { collator: AccountId20Like };
        };
      }>
    >;

    /**
     * See [`Pallet::orbiter_register`].
     *
     **/
    orbiterRegister: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'MoonbeamOrbiters';
        palletCall: {
          name: 'OrbiterRegister';
        };
      }>
    >;

    /**
     * See [`Pallet::orbiter_unregister`].
     *
     * @param {number} collatorsPoolCount
     **/
    orbiterUnregister: GenericTxCall<
      (collatorsPoolCount: number) => ChainSubmittableExtrinsic<{
        pallet: 'MoonbeamOrbiters';
        palletCall: {
          name: 'OrbiterUnregister';
          params: { collatorsPoolCount: number };
        };
      }>
    >;

    /**
     * See [`Pallet::add_collator`].
     *
     * @param {AccountId20Like} collator
     **/
    addCollator: GenericTxCall<
      (collator: AccountId20Like) => ChainSubmittableExtrinsic<{
        pallet: 'MoonbeamOrbiters';
        palletCall: {
          name: 'AddCollator';
          params: { collator: AccountId20Like };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_collator`].
     *
     * @param {AccountId20Like} collator
     **/
    removeCollator: GenericTxCall<
      (collator: AccountId20Like) => ChainSubmittableExtrinsic<{
        pallet: 'MoonbeamOrbiters';
        palletCall: {
          name: 'RemoveCollator';
          params: { collator: AccountId20Like };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  /**
   * Pallet `Utility`'s transaction calls
   **/
  utility: {
    /**
     * See [`Pallet::batch`].
     *
     * @param {Array<MoonbeamRuntimeRuntimeCallLike>} calls
     **/
    batch: GenericTxCall<
      (calls: Array<MoonbeamRuntimeRuntimeCallLike>) => ChainSubmittableExtrinsic<{
        pallet: 'Utility';
        palletCall: {
          name: 'Batch';
          params: { calls: Array<MoonbeamRuntimeRuntimeCallLike> };
        };
      }>
    >;

    /**
     * See [`Pallet::as_derivative`].
     *
     * @param {number} index
     * @param {MoonbeamRuntimeRuntimeCallLike} call
     **/
    asDerivative: GenericTxCall<
      (
        index: number,
        call: MoonbeamRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Utility';
        palletCall: {
          name: 'AsDerivative';
          params: { index: number; call: MoonbeamRuntimeRuntimeCallLike };
        };
      }>
    >;

    /**
     * See [`Pallet::batch_all`].
     *
     * @param {Array<MoonbeamRuntimeRuntimeCallLike>} calls
     **/
    batchAll: GenericTxCall<
      (calls: Array<MoonbeamRuntimeRuntimeCallLike>) => ChainSubmittableExtrinsic<{
        pallet: 'Utility';
        palletCall: {
          name: 'BatchAll';
          params: { calls: Array<MoonbeamRuntimeRuntimeCallLike> };
        };
      }>
    >;

    /**
     * See [`Pallet::dispatch_as`].
     *
     * @param {MoonbeamRuntimeOriginCaller} asOrigin
     * @param {MoonbeamRuntimeRuntimeCallLike} call
     **/
    dispatchAs: GenericTxCall<
      (
        asOrigin: MoonbeamRuntimeOriginCaller,
        call: MoonbeamRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Utility';
        palletCall: {
          name: 'DispatchAs';
          params: { asOrigin: MoonbeamRuntimeOriginCaller; call: MoonbeamRuntimeRuntimeCallLike };
        };
      }>
    >;

    /**
     * See [`Pallet::force_batch`].
     *
     * @param {Array<MoonbeamRuntimeRuntimeCallLike>} calls
     **/
    forceBatch: GenericTxCall<
      (calls: Array<MoonbeamRuntimeRuntimeCallLike>) => ChainSubmittableExtrinsic<{
        pallet: 'Utility';
        palletCall: {
          name: 'ForceBatch';
          params: { calls: Array<MoonbeamRuntimeRuntimeCallLike> };
        };
      }>
    >;

    /**
     * See [`Pallet::with_weight`].
     *
     * @param {MoonbeamRuntimeRuntimeCallLike} call
     * @param {SpWeightsWeightV2Weight} weight
     **/
    withWeight: GenericTxCall<
      (
        call: MoonbeamRuntimeRuntimeCallLike,
        weight: SpWeightsWeightV2Weight,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Utility';
        palletCall: {
          name: 'WithWeight';
          params: { call: MoonbeamRuntimeRuntimeCallLike; weight: SpWeightsWeightV2Weight };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  /**
   * Pallet `Proxy`'s transaction calls
   **/
  proxy: {
    /**
     * See [`Pallet::proxy`].
     *
     * @param {AccountId20Like} real
     * @param {MoonbeamRuntimeProxyType | undefined} forceProxyType
     * @param {MoonbeamRuntimeRuntimeCallLike} call
     **/
    proxy: GenericTxCall<
      (
        real: AccountId20Like,
        forceProxyType: MoonbeamRuntimeProxyType | undefined,
        call: MoonbeamRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Proxy';
        palletCall: {
          name: 'Proxy';
          params: {
            real: AccountId20Like;
            forceProxyType: MoonbeamRuntimeProxyType | undefined;
            call: MoonbeamRuntimeRuntimeCallLike;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::add_proxy`].
     *
     * @param {AccountId20Like} delegate
     * @param {MoonbeamRuntimeProxyType} proxyType
     * @param {number} delay
     **/
    addProxy: GenericTxCall<
      (
        delegate: AccountId20Like,
        proxyType: MoonbeamRuntimeProxyType,
        delay: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Proxy';
        palletCall: {
          name: 'AddProxy';
          params: { delegate: AccountId20Like; proxyType: MoonbeamRuntimeProxyType; delay: number };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_proxy`].
     *
     * @param {AccountId20Like} delegate
     * @param {MoonbeamRuntimeProxyType} proxyType
     * @param {number} delay
     **/
    removeProxy: GenericTxCall<
      (
        delegate: AccountId20Like,
        proxyType: MoonbeamRuntimeProxyType,
        delay: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Proxy';
        palletCall: {
          name: 'RemoveProxy';
          params: { delegate: AccountId20Like; proxyType: MoonbeamRuntimeProxyType; delay: number };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_proxies`].
     *
     **/
    removeProxies: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'Proxy';
        palletCall: {
          name: 'RemoveProxies';
        };
      }>
    >;

    /**
     * See [`Pallet::create_pure`].
     *
     * @param {MoonbeamRuntimeProxyType} proxyType
     * @param {number} delay
     * @param {number} index
     **/
    createPure: GenericTxCall<
      (
        proxyType: MoonbeamRuntimeProxyType,
        delay: number,
        index: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Proxy';
        palletCall: {
          name: 'CreatePure';
          params: { proxyType: MoonbeamRuntimeProxyType; delay: number; index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::kill_pure`].
     *
     * @param {AccountId20Like} spawner
     * @param {MoonbeamRuntimeProxyType} proxyType
     * @param {number} index
     * @param {number} height
     * @param {number} extIndex
     **/
    killPure: GenericTxCall<
      (
        spawner: AccountId20Like,
        proxyType: MoonbeamRuntimeProxyType,
        index: number,
        height: number,
        extIndex: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Proxy';
        palletCall: {
          name: 'KillPure';
          params: {
            spawner: AccountId20Like;
            proxyType: MoonbeamRuntimeProxyType;
            index: number;
            height: number;
            extIndex: number;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::announce`].
     *
     * @param {AccountId20Like} real
     * @param {H256} callHash
     **/
    announce: GenericTxCall<
      (
        real: AccountId20Like,
        callHash: H256,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Proxy';
        palletCall: {
          name: 'Announce';
          params: { real: AccountId20Like; callHash: H256 };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_announcement`].
     *
     * @param {AccountId20Like} real
     * @param {H256} callHash
     **/
    removeAnnouncement: GenericTxCall<
      (
        real: AccountId20Like,
        callHash: H256,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Proxy';
        palletCall: {
          name: 'RemoveAnnouncement';
          params: { real: AccountId20Like; callHash: H256 };
        };
      }>
    >;

    /**
     * See [`Pallet::reject_announcement`].
     *
     * @param {AccountId20Like} delegate
     * @param {H256} callHash
     **/
    rejectAnnouncement: GenericTxCall<
      (
        delegate: AccountId20Like,
        callHash: H256,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Proxy';
        palletCall: {
          name: 'RejectAnnouncement';
          params: { delegate: AccountId20Like; callHash: H256 };
        };
      }>
    >;

    /**
     * See [`Pallet::proxy_announced`].
     *
     * @param {AccountId20Like} delegate
     * @param {AccountId20Like} real
     * @param {MoonbeamRuntimeProxyType | undefined} forceProxyType
     * @param {MoonbeamRuntimeRuntimeCallLike} call
     **/
    proxyAnnounced: GenericTxCall<
      (
        delegate: AccountId20Like,
        real: AccountId20Like,
        forceProxyType: MoonbeamRuntimeProxyType | undefined,
        call: MoonbeamRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Proxy';
        palletCall: {
          name: 'ProxyAnnounced';
          params: {
            delegate: AccountId20Like;
            real: AccountId20Like;
            forceProxyType: MoonbeamRuntimeProxyType | undefined;
            call: MoonbeamRuntimeRuntimeCallLike;
          };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  /**
   * Pallet `MaintenanceMode`'s transaction calls
   **/
  maintenanceMode: {
    /**
     * See [`Pallet::enter_maintenance_mode`].
     *
     **/
    enterMaintenanceMode: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'MaintenanceMode';
        palletCall: 'EnterMaintenanceMode';
      }>
    >;

    /**
     * See [`Pallet::resume_normal_operation`].
     *
     **/
    resumeNormalOperation: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'MaintenanceMode';
        palletCall: 'ResumeNormalOperation';
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  /**
   * Pallet `Identity`'s transaction calls
   **/
  identity: {
    /**
     * See [`Pallet::add_registrar`].
     *
     * @param {AccountId20Like} account
     **/
    addRegistrar: GenericTxCall<
      (account: AccountId20Like) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'AddRegistrar';
          params: { account: AccountId20Like };
        };
      }>
    >;

    /**
     * See [`Pallet::set_identity`].
     *
     * @param {PalletIdentitySimpleIdentityInfo} info
     **/
    setIdentity: GenericTxCall<
      (info: PalletIdentitySimpleIdentityInfo) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'SetIdentity';
          params: { info: PalletIdentitySimpleIdentityInfo };
        };
      }>
    >;

    /**
     * See [`Pallet::set_subs`].
     *
     * @param {Array<[AccountId20Like, Data]>} subs
     **/
    setSubs: GenericTxCall<
      (subs: Array<[AccountId20Like, Data]>) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'SetSubs';
          params: { subs: Array<[AccountId20Like, Data]> };
        };
      }>
    >;

    /**
     * See [`Pallet::clear_identity`].
     *
     **/
    clearIdentity: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'ClearIdentity';
        };
      }>
    >;

    /**
     * See [`Pallet::request_judgement`].
     *
     * @param {number} regIndex
     * @param {bigint} maxFee
     **/
    requestJudgement: GenericTxCall<
      (
        regIndex: number,
        maxFee: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'RequestJudgement';
          params: { regIndex: number; maxFee: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::cancel_request`].
     *
     * @param {number} regIndex
     **/
    cancelRequest: GenericTxCall<
      (regIndex: number) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'CancelRequest';
          params: { regIndex: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_fee`].
     *
     * @param {number} index
     * @param {bigint} fee
     **/
    setFee: GenericTxCall<
      (
        index: number,
        fee: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'SetFee';
          params: { index: number; fee: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::set_account_id`].
     *
     * @param {number} index
     * @param {AccountId20Like} new_
     **/
    setAccountId: GenericTxCall<
      (
        index: number,
        new_: AccountId20Like,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'SetAccountId';
          params: { index: number; new: AccountId20Like };
        };
      }>
    >;

    /**
     * See [`Pallet::set_fields`].
     *
     * @param {number} index
     * @param {PalletIdentityBitFlags} fields
     **/
    setFields: GenericTxCall<
      (
        index: number,
        fields: PalletIdentityBitFlags,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'SetFields';
          params: { index: number; fields: PalletIdentityBitFlags };
        };
      }>
    >;

    /**
     * See [`Pallet::provide_judgement`].
     *
     * @param {number} regIndex
     * @param {AccountId20Like} target
     * @param {PalletIdentityJudgement} judgement
     * @param {H256} identity
     **/
    provideJudgement: GenericTxCall<
      (
        regIndex: number,
        target: AccountId20Like,
        judgement: PalletIdentityJudgement,
        identity: H256,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'ProvideJudgement';
          params: { regIndex: number; target: AccountId20Like; judgement: PalletIdentityJudgement; identity: H256 };
        };
      }>
    >;

    /**
     * See [`Pallet::kill_identity`].
     *
     * @param {AccountId20Like} target
     **/
    killIdentity: GenericTxCall<
      (target: AccountId20Like) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'KillIdentity';
          params: { target: AccountId20Like };
        };
      }>
    >;

    /**
     * See [`Pallet::add_sub`].
     *
     * @param {AccountId20Like} sub
     * @param {Data} data
     **/
    addSub: GenericTxCall<
      (
        sub: AccountId20Like,
        data: Data,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'AddSub';
          params: { sub: AccountId20Like; data: Data };
        };
      }>
    >;

    /**
     * See [`Pallet::rename_sub`].
     *
     * @param {AccountId20Like} sub
     * @param {Data} data
     **/
    renameSub: GenericTxCall<
      (
        sub: AccountId20Like,
        data: Data,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'RenameSub';
          params: { sub: AccountId20Like; data: Data };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_sub`].
     *
     * @param {AccountId20Like} sub
     **/
    removeSub: GenericTxCall<
      (sub: AccountId20Like) => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'RemoveSub';
          params: { sub: AccountId20Like };
        };
      }>
    >;

    /**
     * See [`Pallet::quit_sub`].
     *
     **/
    quitSub: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'Identity';
        palletCall: {
          name: 'QuitSub';
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  /**
   * Pallet `Multisig`'s transaction calls
   **/
  multisig: {
    /**
     * See [`Pallet::as_multi_threshold_1`].
     *
     * @param {Array<AccountId20Like>} otherSignatories
     * @param {MoonbeamRuntimeRuntimeCallLike} call
     **/
    asMultiThreshold1: GenericTxCall<
      (
        otherSignatories: Array<AccountId20Like>,
        call: MoonbeamRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Multisig';
        palletCall: {
          name: 'AsMultiThreshold1';
          params: { otherSignatories: Array<AccountId20Like>; call: MoonbeamRuntimeRuntimeCallLike };
        };
      }>
    >;

    /**
     * See [`Pallet::as_multi`].
     *
     * @param {number} threshold
     * @param {Array<AccountId20Like>} otherSignatories
     * @param {PalletMultisigTimepoint | undefined} maybeTimepoint
     * @param {MoonbeamRuntimeRuntimeCallLike} call
     * @param {SpWeightsWeightV2Weight} maxWeight
     **/
    asMulti: GenericTxCall<
      (
        threshold: number,
        otherSignatories: Array<AccountId20Like>,
        maybeTimepoint: PalletMultisigTimepoint | undefined,
        call: MoonbeamRuntimeRuntimeCallLike,
        maxWeight: SpWeightsWeightV2Weight,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Multisig';
        palletCall: {
          name: 'AsMulti';
          params: {
            threshold: number;
            otherSignatories: Array<AccountId20Like>;
            maybeTimepoint: PalletMultisigTimepoint | undefined;
            call: MoonbeamRuntimeRuntimeCallLike;
            maxWeight: SpWeightsWeightV2Weight;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::approve_as_multi`].
     *
     * @param {number} threshold
     * @param {Array<AccountId20Like>} otherSignatories
     * @param {PalletMultisigTimepoint | undefined} maybeTimepoint
     * @param {FixedBytes<32>} callHash
     * @param {SpWeightsWeightV2Weight} maxWeight
     **/
    approveAsMulti: GenericTxCall<
      (
        threshold: number,
        otherSignatories: Array<AccountId20Like>,
        maybeTimepoint: PalletMultisigTimepoint | undefined,
        callHash: FixedBytes<32>,
        maxWeight: SpWeightsWeightV2Weight,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Multisig';
        palletCall: {
          name: 'ApproveAsMulti';
          params: {
            threshold: number;
            otherSignatories: Array<AccountId20Like>;
            maybeTimepoint: PalletMultisigTimepoint | undefined;
            callHash: FixedBytes<32>;
            maxWeight: SpWeightsWeightV2Weight;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::cancel_as_multi`].
     *
     * @param {number} threshold
     * @param {Array<AccountId20Like>} otherSignatories
     * @param {PalletMultisigTimepoint} timepoint
     * @param {FixedBytes<32>} callHash
     **/
    cancelAsMulti: GenericTxCall<
      (
        threshold: number,
        otherSignatories: Array<AccountId20Like>,
        timepoint: PalletMultisigTimepoint,
        callHash: FixedBytes<32>,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Multisig';
        palletCall: {
          name: 'CancelAsMulti';
          params: {
            threshold: number;
            otherSignatories: Array<AccountId20Like>;
            timepoint: PalletMultisigTimepoint;
            callHash: FixedBytes<32>;
          };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  /**
   * Pallet `EVM`'s transaction calls
   **/
  evm: {
    /**
     * See [`Pallet::withdraw`].
     *
     * @param {H160} address
     * @param {bigint} value
     **/
    withdraw: GenericTxCall<
      (
        address: H160,
        value: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Evm';
        palletCall: {
          name: 'Withdraw';
          params: { address: H160; value: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::call`].
     *
     * @param {H160} source
     * @param {H160} target
     * @param {BytesLike} input
     * @param {U256} value
     * @param {bigint} gasLimit
     * @param {U256} maxFeePerGas
     * @param {U256 | undefined} maxPriorityFeePerGas
     * @param {U256 | undefined} nonce
     * @param {Array<[H160, Array<H256>]>} accessList
     **/
    call: GenericTxCall<
      (
        source: H160,
        target: H160,
        input: BytesLike,
        value: U256,
        gasLimit: bigint,
        maxFeePerGas: U256,
        maxPriorityFeePerGas: U256 | undefined,
        nonce: U256 | undefined,
        accessList: Array<[H160, Array<H256>]>,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Evm';
        palletCall: {
          name: 'Call';
          params: {
            source: H160;
            target: H160;
            input: BytesLike;
            value: U256;
            gasLimit: bigint;
            maxFeePerGas: U256;
            maxPriorityFeePerGas: U256 | undefined;
            nonce: U256 | undefined;
            accessList: Array<[H160, Array<H256>]>;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::create`].
     *
     * @param {H160} source
     * @param {BytesLike} init
     * @param {U256} value
     * @param {bigint} gasLimit
     * @param {U256} maxFeePerGas
     * @param {U256 | undefined} maxPriorityFeePerGas
     * @param {U256 | undefined} nonce
     * @param {Array<[H160, Array<H256>]>} accessList
     **/
    create: GenericTxCall<
      (
        source: H160,
        init: BytesLike,
        value: U256,
        gasLimit: bigint,
        maxFeePerGas: U256,
        maxPriorityFeePerGas: U256 | undefined,
        nonce: U256 | undefined,
        accessList: Array<[H160, Array<H256>]>,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Evm';
        palletCall: {
          name: 'Create';
          params: {
            source: H160;
            init: BytesLike;
            value: U256;
            gasLimit: bigint;
            maxFeePerGas: U256;
            maxPriorityFeePerGas: U256 | undefined;
            nonce: U256 | undefined;
            accessList: Array<[H160, Array<H256>]>;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::create2`].
     *
     * @param {H160} source
     * @param {BytesLike} init
     * @param {H256} salt
     * @param {U256} value
     * @param {bigint} gasLimit
     * @param {U256} maxFeePerGas
     * @param {U256 | undefined} maxPriorityFeePerGas
     * @param {U256 | undefined} nonce
     * @param {Array<[H160, Array<H256>]>} accessList
     **/
    create2: GenericTxCall<
      (
        source: H160,
        init: BytesLike,
        salt: H256,
        value: U256,
        gasLimit: bigint,
        maxFeePerGas: U256,
        maxPriorityFeePerGas: U256 | undefined,
        nonce: U256 | undefined,
        accessList: Array<[H160, Array<H256>]>,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Evm';
        palletCall: {
          name: 'Create2';
          params: {
            source: H160;
            init: BytesLike;
            salt: H256;
            value: U256;
            gasLimit: bigint;
            maxFeePerGas: U256;
            maxPriorityFeePerGas: U256 | undefined;
            nonce: U256 | undefined;
            accessList: Array<[H160, Array<H256>]>;
          };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  /**
   * Pallet `Ethereum`'s transaction calls
   **/
  ethereum: {
    /**
     * See [`Pallet::transact`].
     *
     * @param {EthereumTransactionTransactionV2} transaction
     **/
    transact: GenericTxCall<
      (transaction: EthereumTransactionTransactionV2) => ChainSubmittableExtrinsic<{
        pallet: 'Ethereum';
        palletCall: {
          name: 'Transact';
          params: { transaction: EthereumTransactionTransactionV2 };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  /**
   * Pallet `Scheduler`'s transaction calls
   **/
  scheduler: {
    /**
     * See [`Pallet::schedule`].
     *
     * @param {number} when
     * @param {[number, number] | undefined} maybePeriodic
     * @param {number} priority
     * @param {MoonbeamRuntimeRuntimeCallLike} call
     **/
    schedule: GenericTxCall<
      (
        when: number,
        maybePeriodic: [number, number] | undefined,
        priority: number,
        call: MoonbeamRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Scheduler';
        palletCall: {
          name: 'Schedule';
          params: {
            when: number;
            maybePeriodic: [number, number] | undefined;
            priority: number;
            call: MoonbeamRuntimeRuntimeCallLike;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::cancel`].
     *
     * @param {number} when
     * @param {number} index
     **/
    cancel: GenericTxCall<
      (
        when: number,
        index: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Scheduler';
        palletCall: {
          name: 'Cancel';
          params: { when: number; index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::schedule_named`].
     *
     * @param {FixedBytes<32>} id
     * @param {number} when
     * @param {[number, number] | undefined} maybePeriodic
     * @param {number} priority
     * @param {MoonbeamRuntimeRuntimeCallLike} call
     **/
    scheduleNamed: GenericTxCall<
      (
        id: FixedBytes<32>,
        when: number,
        maybePeriodic: [number, number] | undefined,
        priority: number,
        call: MoonbeamRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Scheduler';
        palletCall: {
          name: 'ScheduleNamed';
          params: {
            id: FixedBytes<32>;
            when: number;
            maybePeriodic: [number, number] | undefined;
            priority: number;
            call: MoonbeamRuntimeRuntimeCallLike;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::cancel_named`].
     *
     * @param {FixedBytes<32>} id
     **/
    cancelNamed: GenericTxCall<
      (id: FixedBytes<32>) => ChainSubmittableExtrinsic<{
        pallet: 'Scheduler';
        palletCall: {
          name: 'CancelNamed';
          params: { id: FixedBytes<32> };
        };
      }>
    >;

    /**
     * See [`Pallet::schedule_after`].
     *
     * @param {number} after
     * @param {[number, number] | undefined} maybePeriodic
     * @param {number} priority
     * @param {MoonbeamRuntimeRuntimeCallLike} call
     **/
    scheduleAfter: GenericTxCall<
      (
        after: number,
        maybePeriodic: [number, number] | undefined,
        priority: number,
        call: MoonbeamRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Scheduler';
        palletCall: {
          name: 'ScheduleAfter';
          params: {
            after: number;
            maybePeriodic: [number, number] | undefined;
            priority: number;
            call: MoonbeamRuntimeRuntimeCallLike;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::schedule_named_after`].
     *
     * @param {FixedBytes<32>} id
     * @param {number} after
     * @param {[number, number] | undefined} maybePeriodic
     * @param {number} priority
     * @param {MoonbeamRuntimeRuntimeCallLike} call
     **/
    scheduleNamedAfter: GenericTxCall<
      (
        id: FixedBytes<32>,
        after: number,
        maybePeriodic: [number, number] | undefined,
        priority: number,
        call: MoonbeamRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Scheduler';
        palletCall: {
          name: 'ScheduleNamedAfter';
          params: {
            id: FixedBytes<32>;
            after: number;
            maybePeriodic: [number, number] | undefined;
            priority: number;
            call: MoonbeamRuntimeRuntimeCallLike;
          };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  /**
   * Pallet `Democracy`'s transaction calls
   **/
  democracy: {
    /**
     * See [`Pallet::propose`].
     *
     * @param {FrameSupportPreimagesBounded} proposal
     * @param {bigint} value
     **/
    propose: GenericTxCall<
      (
        proposal: FrameSupportPreimagesBounded,
        value: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Democracy';
        palletCall: {
          name: 'Propose';
          params: { proposal: FrameSupportPreimagesBounded; value: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::second`].
     *
     * @param {number} proposal
     **/
    second: GenericTxCall<
      (proposal: number) => ChainSubmittableExtrinsic<{
        pallet: 'Democracy';
        palletCall: {
          name: 'Second';
          params: { proposal: number };
        };
      }>
    >;

    /**
     * See [`Pallet::vote`].
     *
     * @param {number} refIndex
     * @param {PalletDemocracyVoteAccountVote} vote
     **/
    vote: GenericTxCall<
      (
        refIndex: number,
        vote: PalletDemocracyVoteAccountVote,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Democracy';
        palletCall: {
          name: 'Vote';
          params: { refIndex: number; vote: PalletDemocracyVoteAccountVote };
        };
      }>
    >;

    /**
     * See [`Pallet::emergency_cancel`].
     *
     * @param {number} refIndex
     **/
    emergencyCancel: GenericTxCall<
      (refIndex: number) => ChainSubmittableExtrinsic<{
        pallet: 'Democracy';
        palletCall: {
          name: 'EmergencyCancel';
          params: { refIndex: number };
        };
      }>
    >;

    /**
     * See [`Pallet::external_propose`].
     *
     * @param {FrameSupportPreimagesBounded} proposal
     **/
    externalPropose: GenericTxCall<
      (proposal: FrameSupportPreimagesBounded) => ChainSubmittableExtrinsic<{
        pallet: 'Democracy';
        palletCall: {
          name: 'ExternalPropose';
          params: { proposal: FrameSupportPreimagesBounded };
        };
      }>
    >;

    /**
     * See [`Pallet::external_propose_majority`].
     *
     * @param {FrameSupportPreimagesBounded} proposal
     **/
    externalProposeMajority: GenericTxCall<
      (proposal: FrameSupportPreimagesBounded) => ChainSubmittableExtrinsic<{
        pallet: 'Democracy';
        palletCall: {
          name: 'ExternalProposeMajority';
          params: { proposal: FrameSupportPreimagesBounded };
        };
      }>
    >;

    /**
     * See [`Pallet::external_propose_default`].
     *
     * @param {FrameSupportPreimagesBounded} proposal
     **/
    externalProposeDefault: GenericTxCall<
      (proposal: FrameSupportPreimagesBounded) => ChainSubmittableExtrinsic<{
        pallet: 'Democracy';
        palletCall: {
          name: 'ExternalProposeDefault';
          params: { proposal: FrameSupportPreimagesBounded };
        };
      }>
    >;

    /**
     * See [`Pallet::fast_track`].
     *
     * @param {H256} proposalHash
     * @param {number} votingPeriod
     * @param {number} delay
     **/
    fastTrack: GenericTxCall<
      (
        proposalHash: H256,
        votingPeriod: number,
        delay: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Democracy';
        palletCall: {
          name: 'FastTrack';
          params: { proposalHash: H256; votingPeriod: number; delay: number };
        };
      }>
    >;

    /**
     * See [`Pallet::veto_external`].
     *
     * @param {H256} proposalHash
     **/
    vetoExternal: GenericTxCall<
      (proposalHash: H256) => ChainSubmittableExtrinsic<{
        pallet: 'Democracy';
        palletCall: {
          name: 'VetoExternal';
          params: { proposalHash: H256 };
        };
      }>
    >;

    /**
     * See [`Pallet::cancel_referendum`].
     *
     * @param {number} refIndex
     **/
    cancelReferendum: GenericTxCall<
      (refIndex: number) => ChainSubmittableExtrinsic<{
        pallet: 'Democracy';
        palletCall: {
          name: 'CancelReferendum';
          params: { refIndex: number };
        };
      }>
    >;

    /**
     * See [`Pallet::delegate`].
     *
     * @param {AccountId20Like} to
     * @param {PalletDemocracyConviction} conviction
     * @param {bigint} balance
     **/
    delegate: GenericTxCall<
      (
        to: AccountId20Like,
        conviction: PalletDemocracyConviction,
        balance: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Democracy';
        palletCall: {
          name: 'Delegate';
          params: { to: AccountId20Like; conviction: PalletDemocracyConviction; balance: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::undelegate`].
     *
     **/
    undelegate: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'Democracy';
        palletCall: {
          name: 'Undelegate';
        };
      }>
    >;

    /**
     * See [`Pallet::clear_public_proposals`].
     *
     **/
    clearPublicProposals: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'Democracy';
        palletCall: {
          name: 'ClearPublicProposals';
        };
      }>
    >;

    /**
     * See [`Pallet::unlock`].
     *
     * @param {AccountId20Like} target
     **/
    unlock: GenericTxCall<
      (target: AccountId20Like) => ChainSubmittableExtrinsic<{
        pallet: 'Democracy';
        palletCall: {
          name: 'Unlock';
          params: { target: AccountId20Like };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_vote`].
     *
     * @param {number} index
     **/
    removeVote: GenericTxCall<
      (index: number) => ChainSubmittableExtrinsic<{
        pallet: 'Democracy';
        palletCall: {
          name: 'RemoveVote';
          params: { index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_other_vote`].
     *
     * @param {AccountId20Like} target
     * @param {number} index
     **/
    removeOtherVote: GenericTxCall<
      (
        target: AccountId20Like,
        index: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Democracy';
        palletCall: {
          name: 'RemoveOtherVote';
          params: { target: AccountId20Like; index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::blacklist`].
     *
     * @param {H256} proposalHash
     * @param {number | undefined} maybeRefIndex
     **/
    blacklist: GenericTxCall<
      (
        proposalHash: H256,
        maybeRefIndex: number | undefined,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Democracy';
        palletCall: {
          name: 'Blacklist';
          params: { proposalHash: H256; maybeRefIndex: number | undefined };
        };
      }>
    >;

    /**
     * See [`Pallet::cancel_proposal`].
     *
     * @param {number} propIndex
     **/
    cancelProposal: GenericTxCall<
      (propIndex: number) => ChainSubmittableExtrinsic<{
        pallet: 'Democracy';
        palletCall: {
          name: 'CancelProposal';
          params: { propIndex: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_metadata`].
     *
     * @param {PalletDemocracyMetadataOwner} owner
     * @param {H256 | undefined} maybeHash
     **/
    setMetadata: GenericTxCall<
      (
        owner: PalletDemocracyMetadataOwner,
        maybeHash: H256 | undefined,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Democracy';
        palletCall: {
          name: 'SetMetadata';
          params: { owner: PalletDemocracyMetadataOwner; maybeHash: H256 | undefined };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  /**
   * Pallet `Preimage`'s transaction calls
   **/
  preimage: {
    /**
     * See [`Pallet::note_preimage`].
     *
     * @param {BytesLike} bytes
     **/
    notePreimage: GenericTxCall<
      (bytes: BytesLike) => ChainSubmittableExtrinsic<{
        pallet: 'Preimage';
        palletCall: {
          name: 'NotePreimage';
          params: { bytes: BytesLike };
        };
      }>
    >;

    /**
     * See [`Pallet::unnote_preimage`].
     *
     * @param {H256} hash
     **/
    unnotePreimage: GenericTxCall<
      (hash: H256) => ChainSubmittableExtrinsic<{
        pallet: 'Preimage';
        palletCall: {
          name: 'UnnotePreimage';
          params: { hash: H256 };
        };
      }>
    >;

    /**
     * See [`Pallet::request_preimage`].
     *
     * @param {H256} hash
     **/
    requestPreimage: GenericTxCall<
      (hash: H256) => ChainSubmittableExtrinsic<{
        pallet: 'Preimage';
        palletCall: {
          name: 'RequestPreimage';
          params: { hash: H256 };
        };
      }>
    >;

    /**
     * See [`Pallet::unrequest_preimage`].
     *
     * @param {H256} hash
     **/
    unrequestPreimage: GenericTxCall<
      (hash: H256) => ChainSubmittableExtrinsic<{
        pallet: 'Preimage';
        palletCall: {
          name: 'UnrequestPreimage';
          params: { hash: H256 };
        };
      }>
    >;

    /**
     * See [`Pallet::ensure_updated`].
     *
     * @param {Array<H256>} hashes
     **/
    ensureUpdated: GenericTxCall<
      (hashes: Array<H256>) => ChainSubmittableExtrinsic<{
        pallet: 'Preimage';
        palletCall: {
          name: 'EnsureUpdated';
          params: { hashes: Array<H256> };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  /**
   * Pallet `ConvictionVoting`'s transaction calls
   **/
  convictionVoting: {
    /**
     * See [`Pallet::vote`].
     *
     * @param {number} pollIndex
     * @param {PalletConvictionVotingVoteAccountVote} vote
     **/
    vote: GenericTxCall<
      (
        pollIndex: number,
        vote: PalletConvictionVotingVoteAccountVote,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ConvictionVoting';
        palletCall: {
          name: 'Vote';
          params: { pollIndex: number; vote: PalletConvictionVotingVoteAccountVote };
        };
      }>
    >;

    /**
     * See [`Pallet::delegate`].
     *
     * @param {number} class_
     * @param {AccountId20Like} to
     * @param {PalletConvictionVotingConviction} conviction
     * @param {bigint} balance
     **/
    delegate: GenericTxCall<
      (
        class_: number,
        to: AccountId20Like,
        conviction: PalletConvictionVotingConviction,
        balance: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ConvictionVoting';
        palletCall: {
          name: 'Delegate';
          params: { class: number; to: AccountId20Like; conviction: PalletConvictionVotingConviction; balance: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::undelegate`].
     *
     * @param {number} class_
     **/
    undelegate: GenericTxCall<
      (class_: number) => ChainSubmittableExtrinsic<{
        pallet: 'ConvictionVoting';
        palletCall: {
          name: 'Undelegate';
          params: { class: number };
        };
      }>
    >;

    /**
     * See [`Pallet::unlock`].
     *
     * @param {number} class_
     * @param {AccountId20Like} target
     **/
    unlock: GenericTxCall<
      (
        class_: number,
        target: AccountId20Like,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ConvictionVoting';
        palletCall: {
          name: 'Unlock';
          params: { class: number; target: AccountId20Like };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_vote`].
     *
     * @param {number | undefined} class_
     * @param {number} index
     **/
    removeVote: GenericTxCall<
      (
        class_: number | undefined,
        index: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ConvictionVoting';
        palletCall: {
          name: 'RemoveVote';
          params: { class: number | undefined; index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_other_vote`].
     *
     * @param {AccountId20Like} target
     * @param {number} class_
     * @param {number} index
     **/
    removeOtherVote: GenericTxCall<
      (
        target: AccountId20Like,
        class_: number,
        index: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ConvictionVoting';
        palletCall: {
          name: 'RemoveOtherVote';
          params: { target: AccountId20Like; class: number; index: number };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  /**
   * Pallet `Referenda`'s transaction calls
   **/
  referenda: {
    /**
     * See [`Pallet::submit`].
     *
     * @param {MoonbeamRuntimeOriginCaller} proposalOrigin
     * @param {FrameSupportPreimagesBounded} proposal
     * @param {FrameSupportScheduleDispatchTime} enactmentMoment
     **/
    submit: GenericTxCall<
      (
        proposalOrigin: MoonbeamRuntimeOriginCaller,
        proposal: FrameSupportPreimagesBounded,
        enactmentMoment: FrameSupportScheduleDispatchTime,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Referenda';
        palletCall: {
          name: 'Submit';
          params: {
            proposalOrigin: MoonbeamRuntimeOriginCaller;
            proposal: FrameSupportPreimagesBounded;
            enactmentMoment: FrameSupportScheduleDispatchTime;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::place_decision_deposit`].
     *
     * @param {number} index
     **/
    placeDecisionDeposit: GenericTxCall<
      (index: number) => ChainSubmittableExtrinsic<{
        pallet: 'Referenda';
        palletCall: {
          name: 'PlaceDecisionDeposit';
          params: { index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::refund_decision_deposit`].
     *
     * @param {number} index
     **/
    refundDecisionDeposit: GenericTxCall<
      (index: number) => ChainSubmittableExtrinsic<{
        pallet: 'Referenda';
        palletCall: {
          name: 'RefundDecisionDeposit';
          params: { index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::cancel`].
     *
     * @param {number} index
     **/
    cancel: GenericTxCall<
      (index: number) => ChainSubmittableExtrinsic<{
        pallet: 'Referenda';
        palletCall: {
          name: 'Cancel';
          params: { index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::kill`].
     *
     * @param {number} index
     **/
    kill: GenericTxCall<
      (index: number) => ChainSubmittableExtrinsic<{
        pallet: 'Referenda';
        palletCall: {
          name: 'Kill';
          params: { index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::nudge_referendum`].
     *
     * @param {number} index
     **/
    nudgeReferendum: GenericTxCall<
      (index: number) => ChainSubmittableExtrinsic<{
        pallet: 'Referenda';
        palletCall: {
          name: 'NudgeReferendum';
          params: { index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::one_fewer_deciding`].
     *
     * @param {number} track
     **/
    oneFewerDeciding: GenericTxCall<
      (track: number) => ChainSubmittableExtrinsic<{
        pallet: 'Referenda';
        palletCall: {
          name: 'OneFewerDeciding';
          params: { track: number };
        };
      }>
    >;

    /**
     * See [`Pallet::refund_submission_deposit`].
     *
     * @param {number} index
     **/
    refundSubmissionDeposit: GenericTxCall<
      (index: number) => ChainSubmittableExtrinsic<{
        pallet: 'Referenda';
        palletCall: {
          name: 'RefundSubmissionDeposit';
          params: { index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_metadata`].
     *
     * @param {number} index
     * @param {H256 | undefined} maybeHash
     **/
    setMetadata: GenericTxCall<
      (
        index: number,
        maybeHash: H256 | undefined,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Referenda';
        palletCall: {
          name: 'SetMetadata';
          params: { index: number; maybeHash: H256 | undefined };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  /**
   * Pallet `Whitelist`'s transaction calls
   **/
  whitelist: {
    /**
     * See [`Pallet::whitelist_call`].
     *
     * @param {H256} callHash
     **/
    whitelistCall: GenericTxCall<
      (callHash: H256) => ChainSubmittableExtrinsic<{
        pallet: 'Whitelist';
        palletCall: {
          name: 'WhitelistCall';
          params: { callHash: H256 };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_whitelisted_call`].
     *
     * @param {H256} callHash
     **/
    removeWhitelistedCall: GenericTxCall<
      (callHash: H256) => ChainSubmittableExtrinsic<{
        pallet: 'Whitelist';
        palletCall: {
          name: 'RemoveWhitelistedCall';
          params: { callHash: H256 };
        };
      }>
    >;

    /**
     * See [`Pallet::dispatch_whitelisted_call`].
     *
     * @param {H256} callHash
     * @param {number} callEncodedLen
     * @param {SpWeightsWeightV2Weight} callWeightWitness
     **/
    dispatchWhitelistedCall: GenericTxCall<
      (
        callHash: H256,
        callEncodedLen: number,
        callWeightWitness: SpWeightsWeightV2Weight,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Whitelist';
        palletCall: {
          name: 'DispatchWhitelistedCall';
          params: { callHash: H256; callEncodedLen: number; callWeightWitness: SpWeightsWeightV2Weight };
        };
      }>
    >;

    /**
     * See [`Pallet::dispatch_whitelisted_call_with_preimage`].
     *
     * @param {MoonbeamRuntimeRuntimeCallLike} call
     **/
    dispatchWhitelistedCallWithPreimage: GenericTxCall<
      (call: MoonbeamRuntimeRuntimeCallLike) => ChainSubmittableExtrinsic<{
        pallet: 'Whitelist';
        palletCall: {
          name: 'DispatchWhitelistedCallWithPreimage';
          params: { call: MoonbeamRuntimeRuntimeCallLike };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  /**
   * Pallet `CouncilCollective`'s transaction calls
   **/
  councilCollective: {
    /**
     * See [`Pallet::set_members`].
     *
     * @param {Array<AccountId20Like>} newMembers
     * @param {AccountId20Like | undefined} prime
     * @param {number} oldCount
     **/
    setMembers: GenericTxCall<
      (
        newMembers: Array<AccountId20Like>,
        prime: AccountId20Like | undefined,
        oldCount: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'CouncilCollective';
        palletCall: {
          name: 'SetMembers';
          params: { newMembers: Array<AccountId20Like>; prime: AccountId20Like | undefined; oldCount: number };
        };
      }>
    >;

    /**
     * See [`Pallet::execute`].
     *
     * @param {MoonbeamRuntimeRuntimeCallLike} proposal
     * @param {number} lengthBound
     **/
    execute: GenericTxCall<
      (
        proposal: MoonbeamRuntimeRuntimeCallLike,
        lengthBound: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'CouncilCollective';
        palletCall: {
          name: 'Execute';
          params: { proposal: MoonbeamRuntimeRuntimeCallLike; lengthBound: number };
        };
      }>
    >;

    /**
     * See [`Pallet::propose`].
     *
     * @param {number} threshold
     * @param {MoonbeamRuntimeRuntimeCallLike} proposal
     * @param {number} lengthBound
     **/
    propose: GenericTxCall<
      (
        threshold: number,
        proposal: MoonbeamRuntimeRuntimeCallLike,
        lengthBound: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'CouncilCollective';
        palletCall: {
          name: 'Propose';
          params: { threshold: number; proposal: MoonbeamRuntimeRuntimeCallLike; lengthBound: number };
        };
      }>
    >;

    /**
     * See [`Pallet::vote`].
     *
     * @param {H256} proposal
     * @param {number} index
     * @param {boolean} approve
     **/
    vote: GenericTxCall<
      (
        proposal: H256,
        index: number,
        approve: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'CouncilCollective';
        palletCall: {
          name: 'Vote';
          params: { proposal: H256; index: number; approve: boolean };
        };
      }>
    >;

    /**
     * See [`Pallet::disapprove_proposal`].
     *
     * @param {H256} proposalHash
     **/
    disapproveProposal: GenericTxCall<
      (proposalHash: H256) => ChainSubmittableExtrinsic<{
        pallet: 'CouncilCollective';
        palletCall: {
          name: 'DisapproveProposal';
          params: { proposalHash: H256 };
        };
      }>
    >;

    /**
     * See [`Pallet::close`].
     *
     * @param {H256} proposalHash
     * @param {number} index
     * @param {SpWeightsWeightV2Weight} proposalWeightBound
     * @param {number} lengthBound
     **/
    close: GenericTxCall<
      (
        proposalHash: H256,
        index: number,
        proposalWeightBound: SpWeightsWeightV2Weight,
        lengthBound: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'CouncilCollective';
        palletCall: {
          name: 'Close';
          params: {
            proposalHash: H256;
            index: number;
            proposalWeightBound: SpWeightsWeightV2Weight;
            lengthBound: number;
          };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  /**
   * Pallet `TechCommitteeCollective`'s transaction calls
   **/
  techCommitteeCollective: {
    /**
     * See [`Pallet::set_members`].
     *
     * @param {Array<AccountId20Like>} newMembers
     * @param {AccountId20Like | undefined} prime
     * @param {number} oldCount
     **/
    setMembers: GenericTxCall<
      (
        newMembers: Array<AccountId20Like>,
        prime: AccountId20Like | undefined,
        oldCount: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'TechCommitteeCollective';
        palletCall: {
          name: 'SetMembers';
          params: { newMembers: Array<AccountId20Like>; prime: AccountId20Like | undefined; oldCount: number };
        };
      }>
    >;

    /**
     * See [`Pallet::execute`].
     *
     * @param {MoonbeamRuntimeRuntimeCallLike} proposal
     * @param {number} lengthBound
     **/
    execute: GenericTxCall<
      (
        proposal: MoonbeamRuntimeRuntimeCallLike,
        lengthBound: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'TechCommitteeCollective';
        palletCall: {
          name: 'Execute';
          params: { proposal: MoonbeamRuntimeRuntimeCallLike; lengthBound: number };
        };
      }>
    >;

    /**
     * See [`Pallet::propose`].
     *
     * @param {number} threshold
     * @param {MoonbeamRuntimeRuntimeCallLike} proposal
     * @param {number} lengthBound
     **/
    propose: GenericTxCall<
      (
        threshold: number,
        proposal: MoonbeamRuntimeRuntimeCallLike,
        lengthBound: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'TechCommitteeCollective';
        palletCall: {
          name: 'Propose';
          params: { threshold: number; proposal: MoonbeamRuntimeRuntimeCallLike; lengthBound: number };
        };
      }>
    >;

    /**
     * See [`Pallet::vote`].
     *
     * @param {H256} proposal
     * @param {number} index
     * @param {boolean} approve
     **/
    vote: GenericTxCall<
      (
        proposal: H256,
        index: number,
        approve: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'TechCommitteeCollective';
        palletCall: {
          name: 'Vote';
          params: { proposal: H256; index: number; approve: boolean };
        };
      }>
    >;

    /**
     * See [`Pallet::disapprove_proposal`].
     *
     * @param {H256} proposalHash
     **/
    disapproveProposal: GenericTxCall<
      (proposalHash: H256) => ChainSubmittableExtrinsic<{
        pallet: 'TechCommitteeCollective';
        palletCall: {
          name: 'DisapproveProposal';
          params: { proposalHash: H256 };
        };
      }>
    >;

    /**
     * See [`Pallet::close`].
     *
     * @param {H256} proposalHash
     * @param {number} index
     * @param {SpWeightsWeightV2Weight} proposalWeightBound
     * @param {number} lengthBound
     **/
    close: GenericTxCall<
      (
        proposalHash: H256,
        index: number,
        proposalWeightBound: SpWeightsWeightV2Weight,
        lengthBound: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'TechCommitteeCollective';
        palletCall: {
          name: 'Close';
          params: {
            proposalHash: H256;
            index: number;
            proposalWeightBound: SpWeightsWeightV2Weight;
            lengthBound: number;
          };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  /**
   * Pallet `TreasuryCouncilCollective`'s transaction calls
   **/
  treasuryCouncilCollective: {
    /**
     * See [`Pallet::set_members`].
     *
     * @param {Array<AccountId20Like>} newMembers
     * @param {AccountId20Like | undefined} prime
     * @param {number} oldCount
     **/
    setMembers: GenericTxCall<
      (
        newMembers: Array<AccountId20Like>,
        prime: AccountId20Like | undefined,
        oldCount: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'TreasuryCouncilCollective';
        palletCall: {
          name: 'SetMembers';
          params: { newMembers: Array<AccountId20Like>; prime: AccountId20Like | undefined; oldCount: number };
        };
      }>
    >;

    /**
     * See [`Pallet::execute`].
     *
     * @param {MoonbeamRuntimeRuntimeCallLike} proposal
     * @param {number} lengthBound
     **/
    execute: GenericTxCall<
      (
        proposal: MoonbeamRuntimeRuntimeCallLike,
        lengthBound: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'TreasuryCouncilCollective';
        palletCall: {
          name: 'Execute';
          params: { proposal: MoonbeamRuntimeRuntimeCallLike; lengthBound: number };
        };
      }>
    >;

    /**
     * See [`Pallet::propose`].
     *
     * @param {number} threshold
     * @param {MoonbeamRuntimeRuntimeCallLike} proposal
     * @param {number} lengthBound
     **/
    propose: GenericTxCall<
      (
        threshold: number,
        proposal: MoonbeamRuntimeRuntimeCallLike,
        lengthBound: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'TreasuryCouncilCollective';
        palletCall: {
          name: 'Propose';
          params: { threshold: number; proposal: MoonbeamRuntimeRuntimeCallLike; lengthBound: number };
        };
      }>
    >;

    /**
     * See [`Pallet::vote`].
     *
     * @param {H256} proposal
     * @param {number} index
     * @param {boolean} approve
     **/
    vote: GenericTxCall<
      (
        proposal: H256,
        index: number,
        approve: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'TreasuryCouncilCollective';
        palletCall: {
          name: 'Vote';
          params: { proposal: H256; index: number; approve: boolean };
        };
      }>
    >;

    /**
     * See [`Pallet::disapprove_proposal`].
     *
     * @param {H256} proposalHash
     **/
    disapproveProposal: GenericTxCall<
      (proposalHash: H256) => ChainSubmittableExtrinsic<{
        pallet: 'TreasuryCouncilCollective';
        palletCall: {
          name: 'DisapproveProposal';
          params: { proposalHash: H256 };
        };
      }>
    >;

    /**
     * See [`Pallet::close`].
     *
     * @param {H256} proposalHash
     * @param {number} index
     * @param {SpWeightsWeightV2Weight} proposalWeightBound
     * @param {number} lengthBound
     **/
    close: GenericTxCall<
      (
        proposalHash: H256,
        index: number,
        proposalWeightBound: SpWeightsWeightV2Weight,
        lengthBound: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'TreasuryCouncilCollective';
        palletCall: {
          name: 'Close';
          params: {
            proposalHash: H256;
            index: number;
            proposalWeightBound: SpWeightsWeightV2Weight;
            lengthBound: number;
          };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  /**
   * Pallet `OpenTechCommitteeCollective`'s transaction calls
   **/
  openTechCommitteeCollective: {
    /**
     * See [`Pallet::set_members`].
     *
     * @param {Array<AccountId20Like>} newMembers
     * @param {AccountId20Like | undefined} prime
     * @param {number} oldCount
     **/
    setMembers: GenericTxCall<
      (
        newMembers: Array<AccountId20Like>,
        prime: AccountId20Like | undefined,
        oldCount: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'OpenTechCommitteeCollective';
        palletCall: {
          name: 'SetMembers';
          params: { newMembers: Array<AccountId20Like>; prime: AccountId20Like | undefined; oldCount: number };
        };
      }>
    >;

    /**
     * See [`Pallet::execute`].
     *
     * @param {MoonbeamRuntimeRuntimeCallLike} proposal
     * @param {number} lengthBound
     **/
    execute: GenericTxCall<
      (
        proposal: MoonbeamRuntimeRuntimeCallLike,
        lengthBound: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'OpenTechCommitteeCollective';
        palletCall: {
          name: 'Execute';
          params: { proposal: MoonbeamRuntimeRuntimeCallLike; lengthBound: number };
        };
      }>
    >;

    /**
     * See [`Pallet::propose`].
     *
     * @param {number} threshold
     * @param {MoonbeamRuntimeRuntimeCallLike} proposal
     * @param {number} lengthBound
     **/
    propose: GenericTxCall<
      (
        threshold: number,
        proposal: MoonbeamRuntimeRuntimeCallLike,
        lengthBound: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'OpenTechCommitteeCollective';
        palletCall: {
          name: 'Propose';
          params: { threshold: number; proposal: MoonbeamRuntimeRuntimeCallLike; lengthBound: number };
        };
      }>
    >;

    /**
     * See [`Pallet::vote`].
     *
     * @param {H256} proposal
     * @param {number} index
     * @param {boolean} approve
     **/
    vote: GenericTxCall<
      (
        proposal: H256,
        index: number,
        approve: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'OpenTechCommitteeCollective';
        palletCall: {
          name: 'Vote';
          params: { proposal: H256; index: number; approve: boolean };
        };
      }>
    >;

    /**
     * See [`Pallet::disapprove_proposal`].
     *
     * @param {H256} proposalHash
     **/
    disapproveProposal: GenericTxCall<
      (proposalHash: H256) => ChainSubmittableExtrinsic<{
        pallet: 'OpenTechCommitteeCollective';
        palletCall: {
          name: 'DisapproveProposal';
          params: { proposalHash: H256 };
        };
      }>
    >;

    /**
     * See [`Pallet::close`].
     *
     * @param {H256} proposalHash
     * @param {number} index
     * @param {SpWeightsWeightV2Weight} proposalWeightBound
     * @param {number} lengthBound
     **/
    close: GenericTxCall<
      (
        proposalHash: H256,
        index: number,
        proposalWeightBound: SpWeightsWeightV2Weight,
        lengthBound: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'OpenTechCommitteeCollective';
        palletCall: {
          name: 'Close';
          params: {
            proposalHash: H256;
            index: number;
            proposalWeightBound: SpWeightsWeightV2Weight;
            lengthBound: number;
          };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  /**
   * Pallet `Treasury`'s transaction calls
   **/
  treasury: {
    /**
     * See [`Pallet::propose_spend`].
     *
     * @param {bigint} value
     * @param {AccountId20Like} beneficiary
     **/
    proposeSpend: GenericTxCall<
      (
        value: bigint,
        beneficiary: AccountId20Like,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Treasury';
        palletCall: {
          name: 'ProposeSpend';
          params: { value: bigint; beneficiary: AccountId20Like };
        };
      }>
    >;

    /**
     * See [`Pallet::reject_proposal`].
     *
     * @param {number} proposalId
     **/
    rejectProposal: GenericTxCall<
      (proposalId: number) => ChainSubmittableExtrinsic<{
        pallet: 'Treasury';
        palletCall: {
          name: 'RejectProposal';
          params: { proposalId: number };
        };
      }>
    >;

    /**
     * See [`Pallet::approve_proposal`].
     *
     * @param {number} proposalId
     **/
    approveProposal: GenericTxCall<
      (proposalId: number) => ChainSubmittableExtrinsic<{
        pallet: 'Treasury';
        palletCall: {
          name: 'ApproveProposal';
          params: { proposalId: number };
        };
      }>
    >;

    /**
     * See [`Pallet::spend_local`].
     *
     * @param {bigint} amount
     * @param {AccountId20Like} beneficiary
     **/
    spendLocal: GenericTxCall<
      (
        amount: bigint,
        beneficiary: AccountId20Like,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Treasury';
        palletCall: {
          name: 'SpendLocal';
          params: { amount: bigint; beneficiary: AccountId20Like };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_approval`].
     *
     * @param {number} proposalId
     **/
    removeApproval: GenericTxCall<
      (proposalId: number) => ChainSubmittableExtrinsic<{
        pallet: 'Treasury';
        palletCall: {
          name: 'RemoveApproval';
          params: { proposalId: number };
        };
      }>
    >;

    /**
     * See [`Pallet::spend`].
     *
     * @param {[]} assetKind
     * @param {bigint} amount
     * @param {AccountId20Like} beneficiary
     * @param {number | undefined} validFrom
     **/
    spend: GenericTxCall<
      (
        assetKind: [],
        amount: bigint,
        beneficiary: AccountId20Like,
        validFrom: number | undefined,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Treasury';
        palletCall: {
          name: 'Spend';
          params: { assetKind: []; amount: bigint; beneficiary: AccountId20Like; validFrom: number | undefined };
        };
      }>
    >;

    /**
     * See [`Pallet::payout`].
     *
     * @param {number} index
     **/
    payout: GenericTxCall<
      (index: number) => ChainSubmittableExtrinsic<{
        pallet: 'Treasury';
        palletCall: {
          name: 'Payout';
          params: { index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::check_status`].
     *
     * @param {number} index
     **/
    checkStatus: GenericTxCall<
      (index: number) => ChainSubmittableExtrinsic<{
        pallet: 'Treasury';
        palletCall: {
          name: 'CheckStatus';
          params: { index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::void_spend`].
     *
     * @param {number} index
     **/
    voidSpend: GenericTxCall<
      (index: number) => ChainSubmittableExtrinsic<{
        pallet: 'Treasury';
        palletCall: {
          name: 'VoidSpend';
          params: { index: number };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  /**
   * Pallet `CrowdloanRewards`'s transaction calls
   **/
  crowdloanRewards: {
    /**
     * See [`Pallet::associate_native_identity`].
     *
     * @param {AccountId20Like} rewardAccount
     * @param {FixedBytes<32>} relayAccount
     * @param {SpRuntimeMultiSignature} proof
     **/
    associateNativeIdentity: GenericTxCall<
      (
        rewardAccount: AccountId20Like,
        relayAccount: FixedBytes<32>,
        proof: SpRuntimeMultiSignature,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'CrowdloanRewards';
        palletCall: {
          name: 'AssociateNativeIdentity';
          params: { rewardAccount: AccountId20Like; relayAccount: FixedBytes<32>; proof: SpRuntimeMultiSignature };
        };
      }>
    >;

    /**
     * See [`Pallet::change_association_with_relay_keys`].
     *
     * @param {AccountId20Like} rewardAccount
     * @param {AccountId20Like} previousAccount
     * @param {Array<[FixedBytes<32>, SpRuntimeMultiSignature]>} proofs
     **/
    changeAssociationWithRelayKeys: GenericTxCall<
      (
        rewardAccount: AccountId20Like,
        previousAccount: AccountId20Like,
        proofs: Array<[FixedBytes<32>, SpRuntimeMultiSignature]>,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'CrowdloanRewards';
        palletCall: {
          name: 'ChangeAssociationWithRelayKeys';
          params: {
            rewardAccount: AccountId20Like;
            previousAccount: AccountId20Like;
            proofs: Array<[FixedBytes<32>, SpRuntimeMultiSignature]>;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::claim`].
     *
     **/
    claim: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'CrowdloanRewards';
        palletCall: {
          name: 'Claim';
        };
      }>
    >;

    /**
     * See [`Pallet::update_reward_address`].
     *
     * @param {AccountId20Like} newRewardAccount
     **/
    updateRewardAddress: GenericTxCall<
      (newRewardAccount: AccountId20Like) => ChainSubmittableExtrinsic<{
        pallet: 'CrowdloanRewards';
        palletCall: {
          name: 'UpdateRewardAddress';
          params: { newRewardAccount: AccountId20Like };
        };
      }>
    >;

    /**
     * See [`Pallet::complete_initialization`].
     *
     * @param {number} leaseEndingBlock
     **/
    completeInitialization: GenericTxCall<
      (leaseEndingBlock: number) => ChainSubmittableExtrinsic<{
        pallet: 'CrowdloanRewards';
        palletCall: {
          name: 'CompleteInitialization';
          params: { leaseEndingBlock: number };
        };
      }>
    >;

    /**
     * See [`Pallet::initialize_reward_vec`].
     *
     * @param {Array<[FixedBytes<32>, AccountId20Like | undefined, bigint]>} rewards
     **/
    initializeRewardVec: GenericTxCall<
      (rewards: Array<[FixedBytes<32>, AccountId20Like | undefined, bigint]>) => ChainSubmittableExtrinsic<{
        pallet: 'CrowdloanRewards';
        palletCall: {
          name: 'InitializeRewardVec';
          params: { rewards: Array<[FixedBytes<32>, AccountId20Like | undefined, bigint]> };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  /**
   * Pallet `DmpQueue`'s transaction calls
   **/
  dmpQueue: {
    /**
     * See [`Pallet::service_overweight`].
     *
     * @param {bigint} index
     * @param {SpWeightsWeightV2Weight} weightLimit
     **/
    serviceOverweight: GenericTxCall<
      (
        index: bigint,
        weightLimit: SpWeightsWeightV2Weight,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'DmpQueue';
        palletCall: {
          name: 'ServiceOverweight';
          params: { index: bigint; weightLimit: SpWeightsWeightV2Weight };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  /**
   * Pallet `PolkadotXcm`'s transaction calls
   **/
  polkadotXcm: {
    /**
     * See [`Pallet::send`].
     *
     * @param {XcmVersionedMultiLocation} dest
     * @param {XcmVersionedXcm} message
     **/
    send: GenericTxCall<
      (
        dest: XcmVersionedMultiLocation,
        message: XcmVersionedXcm,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'PolkadotXcm';
        palletCall: {
          name: 'Send';
          params: { dest: XcmVersionedMultiLocation; message: XcmVersionedXcm };
        };
      }>
    >;

    /**
     * See [`Pallet::teleport_assets`].
     *
     * @param {XcmVersionedMultiLocation} dest
     * @param {XcmVersionedMultiLocation} beneficiary
     * @param {XcmVersionedMultiAssets} assets
     * @param {number} feeAssetItem
     **/
    teleportAssets: GenericTxCall<
      (
        dest: XcmVersionedMultiLocation,
        beneficiary: XcmVersionedMultiLocation,
        assets: XcmVersionedMultiAssets,
        feeAssetItem: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'PolkadotXcm';
        palletCall: {
          name: 'TeleportAssets';
          params: {
            dest: XcmVersionedMultiLocation;
            beneficiary: XcmVersionedMultiLocation;
            assets: XcmVersionedMultiAssets;
            feeAssetItem: number;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::reserve_transfer_assets`].
     *
     * @param {XcmVersionedMultiLocation} dest
     * @param {XcmVersionedMultiLocation} beneficiary
     * @param {XcmVersionedMultiAssets} assets
     * @param {number} feeAssetItem
     **/
    reserveTransferAssets: GenericTxCall<
      (
        dest: XcmVersionedMultiLocation,
        beneficiary: XcmVersionedMultiLocation,
        assets: XcmVersionedMultiAssets,
        feeAssetItem: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'PolkadotXcm';
        palletCall: {
          name: 'ReserveTransferAssets';
          params: {
            dest: XcmVersionedMultiLocation;
            beneficiary: XcmVersionedMultiLocation;
            assets: XcmVersionedMultiAssets;
            feeAssetItem: number;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::execute`].
     *
     * @param {XcmVersionedXcm} message
     * @param {SpWeightsWeightV2Weight} maxWeight
     **/
    execute: GenericTxCall<
      (
        message: XcmVersionedXcm,
        maxWeight: SpWeightsWeightV2Weight,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'PolkadotXcm';
        palletCall: {
          name: 'Execute';
          params: { message: XcmVersionedXcm; maxWeight: SpWeightsWeightV2Weight };
        };
      }>
    >;

    /**
     * See [`Pallet::force_xcm_version`].
     *
     * @param {StagingXcmV3MultilocationMultiLocation} location
     * @param {number} version
     **/
    forceXcmVersion: GenericTxCall<
      (
        location: StagingXcmV3MultilocationMultiLocation,
        version: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'PolkadotXcm';
        palletCall: {
          name: 'ForceXcmVersion';
          params: { location: StagingXcmV3MultilocationMultiLocation; version: number };
        };
      }>
    >;

    /**
     * See [`Pallet::force_default_xcm_version`].
     *
     * @param {number | undefined} maybeXcmVersion
     **/
    forceDefaultXcmVersion: GenericTxCall<
      (maybeXcmVersion: number | undefined) => ChainSubmittableExtrinsic<{
        pallet: 'PolkadotXcm';
        palletCall: {
          name: 'ForceDefaultXcmVersion';
          params: { maybeXcmVersion: number | undefined };
        };
      }>
    >;

    /**
     * See [`Pallet::force_subscribe_version_notify`].
     *
     * @param {XcmVersionedMultiLocation} location
     **/
    forceSubscribeVersionNotify: GenericTxCall<
      (location: XcmVersionedMultiLocation) => ChainSubmittableExtrinsic<{
        pallet: 'PolkadotXcm';
        palletCall: {
          name: 'ForceSubscribeVersionNotify';
          params: { location: XcmVersionedMultiLocation };
        };
      }>
    >;

    /**
     * See [`Pallet::force_unsubscribe_version_notify`].
     *
     * @param {XcmVersionedMultiLocation} location
     **/
    forceUnsubscribeVersionNotify: GenericTxCall<
      (location: XcmVersionedMultiLocation) => ChainSubmittableExtrinsic<{
        pallet: 'PolkadotXcm';
        palletCall: {
          name: 'ForceUnsubscribeVersionNotify';
          params: { location: XcmVersionedMultiLocation };
        };
      }>
    >;

    /**
     * See [`Pallet::limited_reserve_transfer_assets`].
     *
     * @param {XcmVersionedMultiLocation} dest
     * @param {XcmVersionedMultiLocation} beneficiary
     * @param {XcmVersionedMultiAssets} assets
     * @param {number} feeAssetItem
     * @param {XcmV3WeightLimit} weightLimit
     **/
    limitedReserveTransferAssets: GenericTxCall<
      (
        dest: XcmVersionedMultiLocation,
        beneficiary: XcmVersionedMultiLocation,
        assets: XcmVersionedMultiAssets,
        feeAssetItem: number,
        weightLimit: XcmV3WeightLimit,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'PolkadotXcm';
        palletCall: {
          name: 'LimitedReserveTransferAssets';
          params: {
            dest: XcmVersionedMultiLocation;
            beneficiary: XcmVersionedMultiLocation;
            assets: XcmVersionedMultiAssets;
            feeAssetItem: number;
            weightLimit: XcmV3WeightLimit;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::limited_teleport_assets`].
     *
     * @param {XcmVersionedMultiLocation} dest
     * @param {XcmVersionedMultiLocation} beneficiary
     * @param {XcmVersionedMultiAssets} assets
     * @param {number} feeAssetItem
     * @param {XcmV3WeightLimit} weightLimit
     **/
    limitedTeleportAssets: GenericTxCall<
      (
        dest: XcmVersionedMultiLocation,
        beneficiary: XcmVersionedMultiLocation,
        assets: XcmVersionedMultiAssets,
        feeAssetItem: number,
        weightLimit: XcmV3WeightLimit,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'PolkadotXcm';
        palletCall: {
          name: 'LimitedTeleportAssets';
          params: {
            dest: XcmVersionedMultiLocation;
            beneficiary: XcmVersionedMultiLocation;
            assets: XcmVersionedMultiAssets;
            feeAssetItem: number;
            weightLimit: XcmV3WeightLimit;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::force_suspension`].
     *
     * @param {boolean} suspended
     **/
    forceSuspension: GenericTxCall<
      (suspended: boolean) => ChainSubmittableExtrinsic<{
        pallet: 'PolkadotXcm';
        palletCall: {
          name: 'ForceSuspension';
          params: { suspended: boolean };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  /**
   * Pallet `Assets`'s transaction calls
   **/
  assets: {
    /**
     * See [`Pallet::create`].
     *
     * @param {bigint} id
     * @param {AccountId20Like} admin
     * @param {bigint} minBalance
     **/
    create: GenericTxCall<
      (
        id: bigint,
        admin: AccountId20Like,
        minBalance: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'Create';
          params: { id: bigint; admin: AccountId20Like; minBalance: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::force_create`].
     *
     * @param {bigint} id
     * @param {AccountId20Like} owner
     * @param {boolean} isSufficient
     * @param {bigint} minBalance
     **/
    forceCreate: GenericTxCall<
      (
        id: bigint,
        owner: AccountId20Like,
        isSufficient: boolean,
        minBalance: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'ForceCreate';
          params: { id: bigint; owner: AccountId20Like; isSufficient: boolean; minBalance: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::start_destroy`].
     *
     * @param {bigint} id
     **/
    startDestroy: GenericTxCall<
      (id: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'StartDestroy';
          params: { id: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::destroy_accounts`].
     *
     * @param {bigint} id
     **/
    destroyAccounts: GenericTxCall<
      (id: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'DestroyAccounts';
          params: { id: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::destroy_approvals`].
     *
     * @param {bigint} id
     **/
    destroyApprovals: GenericTxCall<
      (id: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'DestroyApprovals';
          params: { id: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::finish_destroy`].
     *
     * @param {bigint} id
     **/
    finishDestroy: GenericTxCall<
      (id: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'FinishDestroy';
          params: { id: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::mint`].
     *
     * @param {bigint} id
     * @param {AccountId20Like} beneficiary
     * @param {bigint} amount
     **/
    mint: GenericTxCall<
      (
        id: bigint,
        beneficiary: AccountId20Like,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'Mint';
          params: { id: bigint; beneficiary: AccountId20Like; amount: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::burn`].
     *
     * @param {bigint} id
     * @param {AccountId20Like} who
     * @param {bigint} amount
     **/
    burn: GenericTxCall<
      (
        id: bigint,
        who: AccountId20Like,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'Burn';
          params: { id: bigint; who: AccountId20Like; amount: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer`].
     *
     * @param {bigint} id
     * @param {AccountId20Like} target
     * @param {bigint} amount
     **/
    transfer: GenericTxCall<
      (
        id: bigint,
        target: AccountId20Like,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'Transfer';
          params: { id: bigint; target: AccountId20Like; amount: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer_keep_alive`].
     *
     * @param {bigint} id
     * @param {AccountId20Like} target
     * @param {bigint} amount
     **/
    transferKeepAlive: GenericTxCall<
      (
        id: bigint,
        target: AccountId20Like,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'TransferKeepAlive';
          params: { id: bigint; target: AccountId20Like; amount: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::force_transfer`].
     *
     * @param {bigint} id
     * @param {AccountId20Like} source
     * @param {AccountId20Like} dest
     * @param {bigint} amount
     **/
    forceTransfer: GenericTxCall<
      (
        id: bigint,
        source: AccountId20Like,
        dest: AccountId20Like,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'ForceTransfer';
          params: { id: bigint; source: AccountId20Like; dest: AccountId20Like; amount: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::freeze`].
     *
     * @param {bigint} id
     * @param {AccountId20Like} who
     **/
    freeze: GenericTxCall<
      (
        id: bigint,
        who: AccountId20Like,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'Freeze';
          params: { id: bigint; who: AccountId20Like };
        };
      }>
    >;

    /**
     * See [`Pallet::thaw`].
     *
     * @param {bigint} id
     * @param {AccountId20Like} who
     **/
    thaw: GenericTxCall<
      (
        id: bigint,
        who: AccountId20Like,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'Thaw';
          params: { id: bigint; who: AccountId20Like };
        };
      }>
    >;

    /**
     * See [`Pallet::freeze_asset`].
     *
     * @param {bigint} id
     **/
    freezeAsset: GenericTxCall<
      (id: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'FreezeAsset';
          params: { id: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::thaw_asset`].
     *
     * @param {bigint} id
     **/
    thawAsset: GenericTxCall<
      (id: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'ThawAsset';
          params: { id: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer_ownership`].
     *
     * @param {bigint} id
     * @param {AccountId20Like} owner
     **/
    transferOwnership: GenericTxCall<
      (
        id: bigint,
        owner: AccountId20Like,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'TransferOwnership';
          params: { id: bigint; owner: AccountId20Like };
        };
      }>
    >;

    /**
     * See [`Pallet::set_team`].
     *
     * @param {bigint} id
     * @param {AccountId20Like} issuer
     * @param {AccountId20Like} admin
     * @param {AccountId20Like} freezer
     **/
    setTeam: GenericTxCall<
      (
        id: bigint,
        issuer: AccountId20Like,
        admin: AccountId20Like,
        freezer: AccountId20Like,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'SetTeam';
          params: { id: bigint; issuer: AccountId20Like; admin: AccountId20Like; freezer: AccountId20Like };
        };
      }>
    >;

    /**
     * See [`Pallet::set_metadata`].
     *
     * @param {bigint} id
     * @param {BytesLike} name
     * @param {BytesLike} symbol
     * @param {number} decimals
     **/
    setMetadata: GenericTxCall<
      (
        id: bigint,
        name: BytesLike,
        symbol: BytesLike,
        decimals: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'SetMetadata';
          params: { id: bigint; name: BytesLike; symbol: BytesLike; decimals: number };
        };
      }>
    >;

    /**
     * See [`Pallet::clear_metadata`].
     *
     * @param {bigint} id
     **/
    clearMetadata: GenericTxCall<
      (id: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'ClearMetadata';
          params: { id: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::force_set_metadata`].
     *
     * @param {bigint} id
     * @param {BytesLike} name
     * @param {BytesLike} symbol
     * @param {number} decimals
     * @param {boolean} isFrozen
     **/
    forceSetMetadata: GenericTxCall<
      (
        id: bigint,
        name: BytesLike,
        symbol: BytesLike,
        decimals: number,
        isFrozen: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'ForceSetMetadata';
          params: { id: bigint; name: BytesLike; symbol: BytesLike; decimals: number; isFrozen: boolean };
        };
      }>
    >;

    /**
     * See [`Pallet::force_clear_metadata`].
     *
     * @param {bigint} id
     **/
    forceClearMetadata: GenericTxCall<
      (id: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'ForceClearMetadata';
          params: { id: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::force_asset_status`].
     *
     * @param {bigint} id
     * @param {AccountId20Like} owner
     * @param {AccountId20Like} issuer
     * @param {AccountId20Like} admin
     * @param {AccountId20Like} freezer
     * @param {bigint} minBalance
     * @param {boolean} isSufficient
     * @param {boolean} isFrozen
     **/
    forceAssetStatus: GenericTxCall<
      (
        id: bigint,
        owner: AccountId20Like,
        issuer: AccountId20Like,
        admin: AccountId20Like,
        freezer: AccountId20Like,
        minBalance: bigint,
        isSufficient: boolean,
        isFrozen: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'ForceAssetStatus';
          params: {
            id: bigint;
            owner: AccountId20Like;
            issuer: AccountId20Like;
            admin: AccountId20Like;
            freezer: AccountId20Like;
            minBalance: bigint;
            isSufficient: boolean;
            isFrozen: boolean;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::approve_transfer`].
     *
     * @param {bigint} id
     * @param {AccountId20Like} delegate
     * @param {bigint} amount
     **/
    approveTransfer: GenericTxCall<
      (
        id: bigint,
        delegate: AccountId20Like,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'ApproveTransfer';
          params: { id: bigint; delegate: AccountId20Like; amount: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::cancel_approval`].
     *
     * @param {bigint} id
     * @param {AccountId20Like} delegate
     **/
    cancelApproval: GenericTxCall<
      (
        id: bigint,
        delegate: AccountId20Like,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'CancelApproval';
          params: { id: bigint; delegate: AccountId20Like };
        };
      }>
    >;

    /**
     * See [`Pallet::force_cancel_approval`].
     *
     * @param {bigint} id
     * @param {AccountId20Like} owner
     * @param {AccountId20Like} delegate
     **/
    forceCancelApproval: GenericTxCall<
      (
        id: bigint,
        owner: AccountId20Like,
        delegate: AccountId20Like,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'ForceCancelApproval';
          params: { id: bigint; owner: AccountId20Like; delegate: AccountId20Like };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer_approved`].
     *
     * @param {bigint} id
     * @param {AccountId20Like} owner
     * @param {AccountId20Like} destination
     * @param {bigint} amount
     **/
    transferApproved: GenericTxCall<
      (
        id: bigint,
        owner: AccountId20Like,
        destination: AccountId20Like,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'TransferApproved';
          params: { id: bigint; owner: AccountId20Like; destination: AccountId20Like; amount: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::touch`].
     *
     * @param {bigint} id
     **/
    touch: GenericTxCall<
      (id: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'Touch';
          params: { id: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::refund`].
     *
     * @param {bigint} id
     * @param {boolean} allowBurn
     **/
    refund: GenericTxCall<
      (
        id: bigint,
        allowBurn: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'Refund';
          params: { id: bigint; allowBurn: boolean };
        };
      }>
    >;

    /**
     * See [`Pallet::set_min_balance`].
     *
     * @param {bigint} id
     * @param {bigint} minBalance
     **/
    setMinBalance: GenericTxCall<
      (
        id: bigint,
        minBalance: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'SetMinBalance';
          params: { id: bigint; minBalance: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::touch_other`].
     *
     * @param {bigint} id
     * @param {AccountId20Like} who
     **/
    touchOther: GenericTxCall<
      (
        id: bigint,
        who: AccountId20Like,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'TouchOther';
          params: { id: bigint; who: AccountId20Like };
        };
      }>
    >;

    /**
     * See [`Pallet::refund_other`].
     *
     * @param {bigint} id
     * @param {AccountId20Like} who
     **/
    refundOther: GenericTxCall<
      (
        id: bigint,
        who: AccountId20Like,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'RefundOther';
          params: { id: bigint; who: AccountId20Like };
        };
      }>
    >;

    /**
     * See [`Pallet::block`].
     *
     * @param {bigint} id
     * @param {AccountId20Like} who
     **/
    block: GenericTxCall<
      (
        id: bigint,
        who: AccountId20Like,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'Block';
          params: { id: bigint; who: AccountId20Like };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  /**
   * Pallet `AssetManager`'s transaction calls
   **/
  assetManager: {
    /**
     * See [`Pallet::register_foreign_asset`].
     *
     * @param {MoonbeamRuntimeXcmConfigAssetType} asset
     * @param {MoonbeamRuntimeAssetConfigAssetRegistrarMetadata} metadata
     * @param {bigint} minAmount
     * @param {boolean} isSufficient
     **/
    registerForeignAsset: GenericTxCall<
      (
        asset: MoonbeamRuntimeXcmConfigAssetType,
        metadata: MoonbeamRuntimeAssetConfigAssetRegistrarMetadata,
        minAmount: bigint,
        isSufficient: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'AssetManager';
        palletCall: {
          name: 'RegisterForeignAsset';
          params: {
            asset: MoonbeamRuntimeXcmConfigAssetType;
            metadata: MoonbeamRuntimeAssetConfigAssetRegistrarMetadata;
            minAmount: bigint;
            isSufficient: boolean;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::set_asset_units_per_second`].
     *
     * @param {MoonbeamRuntimeXcmConfigAssetType} assetType
     * @param {bigint} unitsPerSecond
     * @param {number} numAssetsWeightHint
     **/
    setAssetUnitsPerSecond: GenericTxCall<
      (
        assetType: MoonbeamRuntimeXcmConfigAssetType,
        unitsPerSecond: bigint,
        numAssetsWeightHint: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'AssetManager';
        palletCall: {
          name: 'SetAssetUnitsPerSecond';
          params: { assetType: MoonbeamRuntimeXcmConfigAssetType; unitsPerSecond: bigint; numAssetsWeightHint: number };
        };
      }>
    >;

    /**
     * See [`Pallet::change_existing_asset_type`].
     *
     * @param {bigint} assetId
     * @param {MoonbeamRuntimeXcmConfigAssetType} newAssetType
     * @param {number} numAssetsWeightHint
     **/
    changeExistingAssetType: GenericTxCall<
      (
        assetId: bigint,
        newAssetType: MoonbeamRuntimeXcmConfigAssetType,
        numAssetsWeightHint: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'AssetManager';
        palletCall: {
          name: 'ChangeExistingAssetType';
          params: { assetId: bigint; newAssetType: MoonbeamRuntimeXcmConfigAssetType; numAssetsWeightHint: number };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_supported_asset`].
     *
     * @param {MoonbeamRuntimeXcmConfigAssetType} assetType
     * @param {number} numAssetsWeightHint
     **/
    removeSupportedAsset: GenericTxCall<
      (
        assetType: MoonbeamRuntimeXcmConfigAssetType,
        numAssetsWeightHint: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'AssetManager';
        palletCall: {
          name: 'RemoveSupportedAsset';
          params: { assetType: MoonbeamRuntimeXcmConfigAssetType; numAssetsWeightHint: number };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_existing_asset_type`].
     *
     * @param {bigint} assetId
     * @param {number} numAssetsWeightHint
     **/
    removeExistingAssetType: GenericTxCall<
      (
        assetId: bigint,
        numAssetsWeightHint: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'AssetManager';
        palletCall: {
          name: 'RemoveExistingAssetType';
          params: { assetId: bigint; numAssetsWeightHint: number };
        };
      }>
    >;

    /**
     * See [`Pallet::register_local_asset`].
     *
     * @param {AccountId20Like} creator
     * @param {AccountId20Like} owner
     * @param {boolean} isSufficient
     * @param {bigint} minBalance
     **/
    registerLocalAsset: GenericTxCall<
      (
        creator: AccountId20Like,
        owner: AccountId20Like,
        isSufficient: boolean,
        minBalance: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'AssetManager';
        palletCall: {
          name: 'RegisterLocalAsset';
          params: { creator: AccountId20Like; owner: AccountId20Like; isSufficient: boolean; minBalance: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::destroy_foreign_asset`].
     *
     * @param {bigint} assetId
     * @param {number} numAssetsWeightHint
     **/
    destroyForeignAsset: GenericTxCall<
      (
        assetId: bigint,
        numAssetsWeightHint: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'AssetManager';
        palletCall: {
          name: 'DestroyForeignAsset';
          params: { assetId: bigint; numAssetsWeightHint: number };
        };
      }>
    >;

    /**
     * See [`Pallet::destroy_local_asset`].
     *
     * @param {bigint} assetId
     **/
    destroyLocalAsset: GenericTxCall<
      (assetId: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'AssetManager';
        palletCall: {
          name: 'DestroyLocalAsset';
          params: { assetId: bigint };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  /**
   * Pallet `XTokens`'s transaction calls
   **/
  xTokens: {
    /**
     * See [`Pallet::transfer`].
     *
     * @param {MoonbeamRuntimeXcmConfigCurrencyId} currencyId
     * @param {bigint} amount
     * @param {XcmVersionedMultiLocation} dest
     * @param {XcmV3WeightLimit} destWeightLimit
     **/
    transfer: GenericTxCall<
      (
        currencyId: MoonbeamRuntimeXcmConfigCurrencyId,
        amount: bigint,
        dest: XcmVersionedMultiLocation,
        destWeightLimit: XcmV3WeightLimit,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'XTokens';
        palletCall: {
          name: 'Transfer';
          params: {
            currencyId: MoonbeamRuntimeXcmConfigCurrencyId;
            amount: bigint;
            dest: XcmVersionedMultiLocation;
            destWeightLimit: XcmV3WeightLimit;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer_multiasset`].
     *
     * @param {XcmVersionedMultiAsset} asset
     * @param {XcmVersionedMultiLocation} dest
     * @param {XcmV3WeightLimit} destWeightLimit
     **/
    transferMultiasset: GenericTxCall<
      (
        asset: XcmVersionedMultiAsset,
        dest: XcmVersionedMultiLocation,
        destWeightLimit: XcmV3WeightLimit,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'XTokens';
        palletCall: {
          name: 'TransferMultiasset';
          params: { asset: XcmVersionedMultiAsset; dest: XcmVersionedMultiLocation; destWeightLimit: XcmV3WeightLimit };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer_with_fee`].
     *
     * @param {MoonbeamRuntimeXcmConfigCurrencyId} currencyId
     * @param {bigint} amount
     * @param {bigint} fee
     * @param {XcmVersionedMultiLocation} dest
     * @param {XcmV3WeightLimit} destWeightLimit
     **/
    transferWithFee: GenericTxCall<
      (
        currencyId: MoonbeamRuntimeXcmConfigCurrencyId,
        amount: bigint,
        fee: bigint,
        dest: XcmVersionedMultiLocation,
        destWeightLimit: XcmV3WeightLimit,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'XTokens';
        palletCall: {
          name: 'TransferWithFee';
          params: {
            currencyId: MoonbeamRuntimeXcmConfigCurrencyId;
            amount: bigint;
            fee: bigint;
            dest: XcmVersionedMultiLocation;
            destWeightLimit: XcmV3WeightLimit;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer_multiasset_with_fee`].
     *
     * @param {XcmVersionedMultiAsset} asset
     * @param {XcmVersionedMultiAsset} fee
     * @param {XcmVersionedMultiLocation} dest
     * @param {XcmV3WeightLimit} destWeightLimit
     **/
    transferMultiassetWithFee: GenericTxCall<
      (
        asset: XcmVersionedMultiAsset,
        fee: XcmVersionedMultiAsset,
        dest: XcmVersionedMultiLocation,
        destWeightLimit: XcmV3WeightLimit,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'XTokens';
        palletCall: {
          name: 'TransferMultiassetWithFee';
          params: {
            asset: XcmVersionedMultiAsset;
            fee: XcmVersionedMultiAsset;
            dest: XcmVersionedMultiLocation;
            destWeightLimit: XcmV3WeightLimit;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer_multicurrencies`].
     *
     * @param {Array<[MoonbeamRuntimeXcmConfigCurrencyId, bigint]>} currencies
     * @param {number} feeItem
     * @param {XcmVersionedMultiLocation} dest
     * @param {XcmV3WeightLimit} destWeightLimit
     **/
    transferMulticurrencies: GenericTxCall<
      (
        currencies: Array<[MoonbeamRuntimeXcmConfigCurrencyId, bigint]>,
        feeItem: number,
        dest: XcmVersionedMultiLocation,
        destWeightLimit: XcmV3WeightLimit,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'XTokens';
        palletCall: {
          name: 'TransferMulticurrencies';
          params: {
            currencies: Array<[MoonbeamRuntimeXcmConfigCurrencyId, bigint]>;
            feeItem: number;
            dest: XcmVersionedMultiLocation;
            destWeightLimit: XcmV3WeightLimit;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer_multiassets`].
     *
     * @param {XcmVersionedMultiAssets} assets
     * @param {number} feeItem
     * @param {XcmVersionedMultiLocation} dest
     * @param {XcmV3WeightLimit} destWeightLimit
     **/
    transferMultiassets: GenericTxCall<
      (
        assets: XcmVersionedMultiAssets,
        feeItem: number,
        dest: XcmVersionedMultiLocation,
        destWeightLimit: XcmV3WeightLimit,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'XTokens';
        palletCall: {
          name: 'TransferMultiassets';
          params: {
            assets: XcmVersionedMultiAssets;
            feeItem: number;
            dest: XcmVersionedMultiLocation;
            destWeightLimit: XcmV3WeightLimit;
          };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  /**
   * Pallet `XcmTransactor`'s transaction calls
   **/
  xcmTransactor: {
    /**
     * See [`Pallet::register`].
     *
     * @param {AccountId20Like} who
     * @param {number} index
     **/
    register: GenericTxCall<
      (
        who: AccountId20Like,
        index: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'XcmTransactor';
        palletCall: {
          name: 'Register';
          params: { who: AccountId20Like; index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::deregister`].
     *
     * @param {number} index
     **/
    deregister: GenericTxCall<
      (index: number) => ChainSubmittableExtrinsic<{
        pallet: 'XcmTransactor';
        palletCall: {
          name: 'Deregister';
          params: { index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::transact_through_derivative`].
     *
     * @param {MoonbeamRuntimeXcmConfigTransactors} dest
     * @param {number} index
     * @param {PalletXcmTransactorCurrencyPayment} fee
     * @param {BytesLike} innerCall
     * @param {PalletXcmTransactorTransactWeights} weightInfo
     * @param {boolean} refund
     **/
    transactThroughDerivative: GenericTxCall<
      (
        dest: MoonbeamRuntimeXcmConfigTransactors,
        index: number,
        fee: PalletXcmTransactorCurrencyPayment,
        innerCall: BytesLike,
        weightInfo: PalletXcmTransactorTransactWeights,
        refund: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'XcmTransactor';
        palletCall: {
          name: 'TransactThroughDerivative';
          params: {
            dest: MoonbeamRuntimeXcmConfigTransactors;
            index: number;
            fee: PalletXcmTransactorCurrencyPayment;
            innerCall: BytesLike;
            weightInfo: PalletXcmTransactorTransactWeights;
            refund: boolean;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::transact_through_sovereign`].
     *
     * @param {XcmVersionedMultiLocation} dest
     * @param {AccountId20Like} feePayer
     * @param {PalletXcmTransactorCurrencyPayment} fee
     * @param {BytesLike} call
     * @param {XcmV2OriginKind} originKind
     * @param {PalletXcmTransactorTransactWeights} weightInfo
     * @param {boolean} refund
     **/
    transactThroughSovereign: GenericTxCall<
      (
        dest: XcmVersionedMultiLocation,
        feePayer: AccountId20Like,
        fee: PalletXcmTransactorCurrencyPayment,
        call: BytesLike,
        originKind: XcmV2OriginKind,
        weightInfo: PalletXcmTransactorTransactWeights,
        refund: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'XcmTransactor';
        palletCall: {
          name: 'TransactThroughSovereign';
          params: {
            dest: XcmVersionedMultiLocation;
            feePayer: AccountId20Like;
            fee: PalletXcmTransactorCurrencyPayment;
            call: BytesLike;
            originKind: XcmV2OriginKind;
            weightInfo: PalletXcmTransactorTransactWeights;
            refund: boolean;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::set_transact_info`].
     *
     * @param {XcmVersionedMultiLocation} location
     * @param {SpWeightsWeightV2Weight} transactExtraWeight
     * @param {SpWeightsWeightV2Weight} maxWeight
     * @param {SpWeightsWeightV2Weight | undefined} transactExtraWeightSigned
     **/
    setTransactInfo: GenericTxCall<
      (
        location: XcmVersionedMultiLocation,
        transactExtraWeight: SpWeightsWeightV2Weight,
        maxWeight: SpWeightsWeightV2Weight,
        transactExtraWeightSigned: SpWeightsWeightV2Weight | undefined,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'XcmTransactor';
        palletCall: {
          name: 'SetTransactInfo';
          params: {
            location: XcmVersionedMultiLocation;
            transactExtraWeight: SpWeightsWeightV2Weight;
            maxWeight: SpWeightsWeightV2Weight;
            transactExtraWeightSigned: SpWeightsWeightV2Weight | undefined;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_transact_info`].
     *
     * @param {XcmVersionedMultiLocation} location
     **/
    removeTransactInfo: GenericTxCall<
      (location: XcmVersionedMultiLocation) => ChainSubmittableExtrinsic<{
        pallet: 'XcmTransactor';
        palletCall: {
          name: 'RemoveTransactInfo';
          params: { location: XcmVersionedMultiLocation };
        };
      }>
    >;

    /**
     * See [`Pallet::transact_through_signed`].
     *
     * @param {XcmVersionedMultiLocation} dest
     * @param {PalletXcmTransactorCurrencyPayment} fee
     * @param {BytesLike} call
     * @param {PalletXcmTransactorTransactWeights} weightInfo
     * @param {boolean} refund
     **/
    transactThroughSigned: GenericTxCall<
      (
        dest: XcmVersionedMultiLocation,
        fee: PalletXcmTransactorCurrencyPayment,
        call: BytesLike,
        weightInfo: PalletXcmTransactorTransactWeights,
        refund: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'XcmTransactor';
        palletCall: {
          name: 'TransactThroughSigned';
          params: {
            dest: XcmVersionedMultiLocation;
            fee: PalletXcmTransactorCurrencyPayment;
            call: BytesLike;
            weightInfo: PalletXcmTransactorTransactWeights;
            refund: boolean;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::set_fee_per_second`].
     *
     * @param {XcmVersionedMultiLocation} assetLocation
     * @param {bigint} feePerSecond
     **/
    setFeePerSecond: GenericTxCall<
      (
        assetLocation: XcmVersionedMultiLocation,
        feePerSecond: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'XcmTransactor';
        palletCall: {
          name: 'SetFeePerSecond';
          params: { assetLocation: XcmVersionedMultiLocation; feePerSecond: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_fee_per_second`].
     *
     * @param {XcmVersionedMultiLocation} assetLocation
     **/
    removeFeePerSecond: GenericTxCall<
      (assetLocation: XcmVersionedMultiLocation) => ChainSubmittableExtrinsic<{
        pallet: 'XcmTransactor';
        palletCall: {
          name: 'RemoveFeePerSecond';
          params: { assetLocation: XcmVersionedMultiLocation };
        };
      }>
    >;

    /**
     * See [`Pallet::hrmp_manage`].
     *
     * @param {PalletXcmTransactorHrmpOperation} action
     * @param {PalletXcmTransactorCurrencyPayment} fee
     * @param {PalletXcmTransactorTransactWeights} weightInfo
     **/
    hrmpManage: GenericTxCall<
      (
        action: PalletXcmTransactorHrmpOperation,
        fee: PalletXcmTransactorCurrencyPayment,
        weightInfo: PalletXcmTransactorTransactWeights,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'XcmTransactor';
        palletCall: {
          name: 'HrmpManage';
          params: {
            action: PalletXcmTransactorHrmpOperation;
            fee: PalletXcmTransactorCurrencyPayment;
            weightInfo: PalletXcmTransactorTransactWeights;
          };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  /**
   * Pallet `LocalAssets`'s transaction calls
   **/
  localAssets: {
    /**
     * See [`Pallet::create`].
     *
     * @param {bigint} id
     * @param {AccountId20Like} admin
     * @param {bigint} minBalance
     **/
    create: GenericTxCall<
      (
        id: bigint,
        admin: AccountId20Like,
        minBalance: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'LocalAssets';
        palletCall: {
          name: 'Create';
          params: { id: bigint; admin: AccountId20Like; minBalance: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::force_create`].
     *
     * @param {bigint} id
     * @param {AccountId20Like} owner
     * @param {boolean} isSufficient
     * @param {bigint} minBalance
     **/
    forceCreate: GenericTxCall<
      (
        id: bigint,
        owner: AccountId20Like,
        isSufficient: boolean,
        minBalance: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'LocalAssets';
        palletCall: {
          name: 'ForceCreate';
          params: { id: bigint; owner: AccountId20Like; isSufficient: boolean; minBalance: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::start_destroy`].
     *
     * @param {bigint} id
     **/
    startDestroy: GenericTxCall<
      (id: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'LocalAssets';
        palletCall: {
          name: 'StartDestroy';
          params: { id: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::destroy_accounts`].
     *
     * @param {bigint} id
     **/
    destroyAccounts: GenericTxCall<
      (id: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'LocalAssets';
        palletCall: {
          name: 'DestroyAccounts';
          params: { id: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::destroy_approvals`].
     *
     * @param {bigint} id
     **/
    destroyApprovals: GenericTxCall<
      (id: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'LocalAssets';
        palletCall: {
          name: 'DestroyApprovals';
          params: { id: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::finish_destroy`].
     *
     * @param {bigint} id
     **/
    finishDestroy: GenericTxCall<
      (id: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'LocalAssets';
        palletCall: {
          name: 'FinishDestroy';
          params: { id: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::mint`].
     *
     * @param {bigint} id
     * @param {AccountId20Like} beneficiary
     * @param {bigint} amount
     **/
    mint: GenericTxCall<
      (
        id: bigint,
        beneficiary: AccountId20Like,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'LocalAssets';
        palletCall: {
          name: 'Mint';
          params: { id: bigint; beneficiary: AccountId20Like; amount: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::burn`].
     *
     * @param {bigint} id
     * @param {AccountId20Like} who
     * @param {bigint} amount
     **/
    burn: GenericTxCall<
      (
        id: bigint,
        who: AccountId20Like,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'LocalAssets';
        palletCall: {
          name: 'Burn';
          params: { id: bigint; who: AccountId20Like; amount: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer`].
     *
     * @param {bigint} id
     * @param {AccountId20Like} target
     * @param {bigint} amount
     **/
    transfer: GenericTxCall<
      (
        id: bigint,
        target: AccountId20Like,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'LocalAssets';
        palletCall: {
          name: 'Transfer';
          params: { id: bigint; target: AccountId20Like; amount: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer_keep_alive`].
     *
     * @param {bigint} id
     * @param {AccountId20Like} target
     * @param {bigint} amount
     **/
    transferKeepAlive: GenericTxCall<
      (
        id: bigint,
        target: AccountId20Like,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'LocalAssets';
        palletCall: {
          name: 'TransferKeepAlive';
          params: { id: bigint; target: AccountId20Like; amount: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::force_transfer`].
     *
     * @param {bigint} id
     * @param {AccountId20Like} source
     * @param {AccountId20Like} dest
     * @param {bigint} amount
     **/
    forceTransfer: GenericTxCall<
      (
        id: bigint,
        source: AccountId20Like,
        dest: AccountId20Like,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'LocalAssets';
        palletCall: {
          name: 'ForceTransfer';
          params: { id: bigint; source: AccountId20Like; dest: AccountId20Like; amount: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::freeze`].
     *
     * @param {bigint} id
     * @param {AccountId20Like} who
     **/
    freeze: GenericTxCall<
      (
        id: bigint,
        who: AccountId20Like,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'LocalAssets';
        palletCall: {
          name: 'Freeze';
          params: { id: bigint; who: AccountId20Like };
        };
      }>
    >;

    /**
     * See [`Pallet::thaw`].
     *
     * @param {bigint} id
     * @param {AccountId20Like} who
     **/
    thaw: GenericTxCall<
      (
        id: bigint,
        who: AccountId20Like,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'LocalAssets';
        palletCall: {
          name: 'Thaw';
          params: { id: bigint; who: AccountId20Like };
        };
      }>
    >;

    /**
     * See [`Pallet::freeze_asset`].
     *
     * @param {bigint} id
     **/
    freezeAsset: GenericTxCall<
      (id: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'LocalAssets';
        palletCall: {
          name: 'FreezeAsset';
          params: { id: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::thaw_asset`].
     *
     * @param {bigint} id
     **/
    thawAsset: GenericTxCall<
      (id: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'LocalAssets';
        palletCall: {
          name: 'ThawAsset';
          params: { id: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer_ownership`].
     *
     * @param {bigint} id
     * @param {AccountId20Like} owner
     **/
    transferOwnership: GenericTxCall<
      (
        id: bigint,
        owner: AccountId20Like,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'LocalAssets';
        palletCall: {
          name: 'TransferOwnership';
          params: { id: bigint; owner: AccountId20Like };
        };
      }>
    >;

    /**
     * See [`Pallet::set_team`].
     *
     * @param {bigint} id
     * @param {AccountId20Like} issuer
     * @param {AccountId20Like} admin
     * @param {AccountId20Like} freezer
     **/
    setTeam: GenericTxCall<
      (
        id: bigint,
        issuer: AccountId20Like,
        admin: AccountId20Like,
        freezer: AccountId20Like,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'LocalAssets';
        palletCall: {
          name: 'SetTeam';
          params: { id: bigint; issuer: AccountId20Like; admin: AccountId20Like; freezer: AccountId20Like };
        };
      }>
    >;

    /**
     * See [`Pallet::set_metadata`].
     *
     * @param {bigint} id
     * @param {BytesLike} name
     * @param {BytesLike} symbol
     * @param {number} decimals
     **/
    setMetadata: GenericTxCall<
      (
        id: bigint,
        name: BytesLike,
        symbol: BytesLike,
        decimals: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'LocalAssets';
        palletCall: {
          name: 'SetMetadata';
          params: { id: bigint; name: BytesLike; symbol: BytesLike; decimals: number };
        };
      }>
    >;

    /**
     * See [`Pallet::clear_metadata`].
     *
     * @param {bigint} id
     **/
    clearMetadata: GenericTxCall<
      (id: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'LocalAssets';
        palletCall: {
          name: 'ClearMetadata';
          params: { id: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::force_set_metadata`].
     *
     * @param {bigint} id
     * @param {BytesLike} name
     * @param {BytesLike} symbol
     * @param {number} decimals
     * @param {boolean} isFrozen
     **/
    forceSetMetadata: GenericTxCall<
      (
        id: bigint,
        name: BytesLike,
        symbol: BytesLike,
        decimals: number,
        isFrozen: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'LocalAssets';
        palletCall: {
          name: 'ForceSetMetadata';
          params: { id: bigint; name: BytesLike; symbol: BytesLike; decimals: number; isFrozen: boolean };
        };
      }>
    >;

    /**
     * See [`Pallet::force_clear_metadata`].
     *
     * @param {bigint} id
     **/
    forceClearMetadata: GenericTxCall<
      (id: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'LocalAssets';
        palletCall: {
          name: 'ForceClearMetadata';
          params: { id: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::force_asset_status`].
     *
     * @param {bigint} id
     * @param {AccountId20Like} owner
     * @param {AccountId20Like} issuer
     * @param {AccountId20Like} admin
     * @param {AccountId20Like} freezer
     * @param {bigint} minBalance
     * @param {boolean} isSufficient
     * @param {boolean} isFrozen
     **/
    forceAssetStatus: GenericTxCall<
      (
        id: bigint,
        owner: AccountId20Like,
        issuer: AccountId20Like,
        admin: AccountId20Like,
        freezer: AccountId20Like,
        minBalance: bigint,
        isSufficient: boolean,
        isFrozen: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'LocalAssets';
        palletCall: {
          name: 'ForceAssetStatus';
          params: {
            id: bigint;
            owner: AccountId20Like;
            issuer: AccountId20Like;
            admin: AccountId20Like;
            freezer: AccountId20Like;
            minBalance: bigint;
            isSufficient: boolean;
            isFrozen: boolean;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::approve_transfer`].
     *
     * @param {bigint} id
     * @param {AccountId20Like} delegate
     * @param {bigint} amount
     **/
    approveTransfer: GenericTxCall<
      (
        id: bigint,
        delegate: AccountId20Like,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'LocalAssets';
        palletCall: {
          name: 'ApproveTransfer';
          params: { id: bigint; delegate: AccountId20Like; amount: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::cancel_approval`].
     *
     * @param {bigint} id
     * @param {AccountId20Like} delegate
     **/
    cancelApproval: GenericTxCall<
      (
        id: bigint,
        delegate: AccountId20Like,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'LocalAssets';
        palletCall: {
          name: 'CancelApproval';
          params: { id: bigint; delegate: AccountId20Like };
        };
      }>
    >;

    /**
     * See [`Pallet::force_cancel_approval`].
     *
     * @param {bigint} id
     * @param {AccountId20Like} owner
     * @param {AccountId20Like} delegate
     **/
    forceCancelApproval: GenericTxCall<
      (
        id: bigint,
        owner: AccountId20Like,
        delegate: AccountId20Like,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'LocalAssets';
        palletCall: {
          name: 'ForceCancelApproval';
          params: { id: bigint; owner: AccountId20Like; delegate: AccountId20Like };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer_approved`].
     *
     * @param {bigint} id
     * @param {AccountId20Like} owner
     * @param {AccountId20Like} destination
     * @param {bigint} amount
     **/
    transferApproved: GenericTxCall<
      (
        id: bigint,
        owner: AccountId20Like,
        destination: AccountId20Like,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'LocalAssets';
        palletCall: {
          name: 'TransferApproved';
          params: { id: bigint; owner: AccountId20Like; destination: AccountId20Like; amount: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::touch`].
     *
     * @param {bigint} id
     **/
    touch: GenericTxCall<
      (id: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'LocalAssets';
        palletCall: {
          name: 'Touch';
          params: { id: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::refund`].
     *
     * @param {bigint} id
     * @param {boolean} allowBurn
     **/
    refund: GenericTxCall<
      (
        id: bigint,
        allowBurn: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'LocalAssets';
        palletCall: {
          name: 'Refund';
          params: { id: bigint; allowBurn: boolean };
        };
      }>
    >;

    /**
     * See [`Pallet::set_min_balance`].
     *
     * @param {bigint} id
     * @param {bigint} minBalance
     **/
    setMinBalance: GenericTxCall<
      (
        id: bigint,
        minBalance: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'LocalAssets';
        palletCall: {
          name: 'SetMinBalance';
          params: { id: bigint; minBalance: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::touch_other`].
     *
     * @param {bigint} id
     * @param {AccountId20Like} who
     **/
    touchOther: GenericTxCall<
      (
        id: bigint,
        who: AccountId20Like,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'LocalAssets';
        palletCall: {
          name: 'TouchOther';
          params: { id: bigint; who: AccountId20Like };
        };
      }>
    >;

    /**
     * See [`Pallet::refund_other`].
     *
     * @param {bigint} id
     * @param {AccountId20Like} who
     **/
    refundOther: GenericTxCall<
      (
        id: bigint,
        who: AccountId20Like,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'LocalAssets';
        palletCall: {
          name: 'RefundOther';
          params: { id: bigint; who: AccountId20Like };
        };
      }>
    >;

    /**
     * See [`Pallet::block`].
     *
     * @param {bigint} id
     * @param {AccountId20Like} who
     **/
    block: GenericTxCall<
      (
        id: bigint,
        who: AccountId20Like,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'LocalAssets';
        palletCall: {
          name: 'Block';
          params: { id: bigint; who: AccountId20Like };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  /**
   * Pallet `EthereumXcm`'s transaction calls
   **/
  ethereumXcm: {
    /**
     * See `Pallet::transact`.
     *
     * @param {XcmPrimitivesEthereumXcmEthereumXcmTransaction} xcmTransaction
     **/
    transact: GenericTxCall<
      (xcmTransaction: XcmPrimitivesEthereumXcmEthereumXcmTransaction) => ChainSubmittableExtrinsic<{
        pallet: 'EthereumXcm';
        palletCall: {
          name: 'Transact';
          params: { xcmTransaction: XcmPrimitivesEthereumXcmEthereumXcmTransaction };
        };
      }>
    >;

    /**
     * See `Pallet::transact_through_proxy`.
     *
     * @param {H160} transactAs
     * @param {XcmPrimitivesEthereumXcmEthereumXcmTransaction} xcmTransaction
     **/
    transactThroughProxy: GenericTxCall<
      (
        transactAs: H160,
        xcmTransaction: XcmPrimitivesEthereumXcmEthereumXcmTransaction,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'EthereumXcm';
        palletCall: {
          name: 'TransactThroughProxy';
          params: { transactAs: H160; xcmTransaction: XcmPrimitivesEthereumXcmEthereumXcmTransaction };
        };
      }>
    >;

    /**
     * See `Pallet::suspend_ethereum_xcm_execution`.
     *
     **/
    suspendEthereumXcmExecution: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'EthereumXcm';
        palletCall: {
          name: 'SuspendEthereumXcmExecution';
        };
      }>
    >;

    /**
     * See `Pallet::resume_ethereum_xcm_execution`.
     *
     **/
    resumeEthereumXcmExecution: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'EthereumXcm';
        palletCall: {
          name: 'ResumeEthereumXcmExecution';
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  /**
   * Pallet `Randomness`'s transaction calls
   **/
  randomness: {
    /**
     * See [`Pallet::set_babe_randomness_results`].
     *
     **/
    setBabeRandomnessResults: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'Randomness';
        palletCall: 'SetBabeRandomnessResults';
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
}
