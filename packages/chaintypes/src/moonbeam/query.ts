// Generated by @delightfuldot/codegen

import type { GenericChainStorage, GenericStorageQuery } from '@delightfuldot/types';
import type {
  AccountId20Like,
  H256,
  Bytes,
  Digest,
  Phase,
  FixedU128,
  Perbill,
  AccountId20,
  Percent,
  Data,
  BytesLike,
  FixedBytes,
  H160,
  U256,
} from '@delightfuldot/codecs';
import type {
  FrameSystemAccountInfo,
  FrameSupportDispatchPerDispatchClass,
  FrameSystemEventRecord,
  FrameSystemLastRuntimeUpgradeInfo,
  CumulusPalletParachainSystemUnincludedSegmentAncestor,
  CumulusPalletParachainSystemUnincludedSegmentSegmentTracker,
  PolkadotPrimitivesV6PersistedValidationData,
  PolkadotPrimitivesV6UpgradeRestriction,
  PolkadotPrimitivesV6UpgradeGoAhead,
  SpTrieStorageProof,
  CumulusPalletParachainSystemRelayStateSnapshotMessagingStateSnapshot,
  PolkadotPrimitivesV6AbridgedHostConfiguration,
  CumulusPrimitivesParachainInherentMessageQueueChain,
  PolkadotParachainPrimitivesPrimitivesId,
  PolkadotCorePrimitivesOutboundHrmpMessage,
  SpWeightsWeightV2Weight,
  CumulusPalletParachainSystemCodeUpgradeAuthorization,
  PalletBalancesAccountData,
  PalletBalancesBalanceLock,
  PalletBalancesReserveData,
  PalletBalancesIdAmount,
  PalletBalancesIdAmount002,
  PalletTransactionPaymentReleases,
  PalletParachainStakingParachainBondConfig,
  PalletParachainStakingRoundInfo,
  PalletParachainStakingDelegator,
  PalletParachainStakingCandidateMetadata,
  PalletParachainStakingDelegationRequestsScheduledRequest,
  PalletParachainStakingAutoCompoundAutoCompoundConfig,
  PalletParachainStakingDelegations,
  PalletParachainStakingSetBoundedOrderedSet,
  PalletParachainStakingCollatorSnapshot,
  PalletParachainStakingDelayedPayout,
  PalletParachainStakingInflationInflationInfo,
  PalletAuthorSlotFilterNumNonZeroU32,
  PalletAuthorMappingRegistrationInfo,
  NimbusPrimitivesNimbusCryptoPublic,
  PalletMoonbeamOrbitersCollatorPoolInfo,
  PalletProxyProxyDefinition,
  PalletProxyAnnouncement,
  PalletIdentityRegistration,
  PalletIdentityRegistrarInfo,
  PalletMultisigMultisig,
  PalletEvmCodeMetadata,
  EthereumTransactionTransactionV2,
  FpRpcTransactionStatus,
  EthereumReceiptReceiptV3,
  EthereumBlock,
  PalletSchedulerScheduled,
  FrameSupportPreimagesBounded,
  PalletDemocracyReferendumInfo,
  PalletDemocracyVoteVoting,
  PalletDemocracyVoteThreshold,
  PalletDemocracyMetadataOwner,
  PalletPreimageOldRequestStatus,
  PalletPreimageRequestStatus,
  PalletConvictionVotingVoteVoting,
  PalletReferendaReferendumInfo,
  MoonbeamRuntimeRuntimeCall,
  PalletCollectiveVotes,
  PalletTreasuryProposal,
  PalletTreasurySpendStatus,
  PalletCrowdloanRewardsRewardInfo,
  CumulusPalletXcmpQueueInboundChannelDetails,
  CumulusPalletXcmpQueueOutboundChannelDetails,
  CumulusPalletXcmpQueueQueueConfigData,
  CumulusPalletDmpQueueConfigData,
  CumulusPalletDmpQueuePageIndexData,
  PalletXcmQueryStatus,
  XcmVersionedMultiLocation,
  PalletXcmVersionMigrationStage,
  PalletXcmRemoteLockedFungibleRecord,
  XcmVersionedAssetId,
  PalletAssetsAssetDetails,
  PalletAssetsAssetAccount,
  PalletAssetsApproval,
  PalletAssetsAssetMetadata,
  MoonbeamRuntimeXcmConfigAssetType,
  PalletAssetManagerAssetInfo,
  PalletXcmTransactorRemoteTransactInfoWithMaxWeight,
  StagingXcmV3MultilocationMultiLocation,
  PalletXcmTransactorRelayIndicesRelayChainIndices,
  PalletRandomnessRequestState,
  PalletRandomnessRandomnessResult,
  PalletRandomnessRequestType,
} from './types';

export interface ChainStorage extends GenericChainStorage {
  system: {
    /**
     * The full account information for a particular account ID.
     **/
    account: GenericStorageQuery<(arg: AccountId20Like) => FrameSystemAccountInfo>;

    /**
     * Total extrinsics count for the current block.
     **/
    extrinsicCount: GenericStorageQuery<() => number | undefined>;

    /**
     * The current weight for the block.
     **/
    blockWeight: GenericStorageQuery<() => FrameSupportDispatchPerDispatchClass>;

    /**
     * Total length (in bytes) for all extrinsics put together, for the current block.
     **/
    allExtrinsicsLen: GenericStorageQuery<() => number | undefined>;

    /**
     * Map of block numbers to block hashes.
     **/
    blockHash: GenericStorageQuery<(arg: number) => H256>;

    /**
     * Extrinsics data for the current block (maps an extrinsic's index to its data).
     **/
    extrinsicData: GenericStorageQuery<(arg: number) => Bytes>;

    /**
     * The current block number being processed. Set by `execute_block`.
     **/
    number: GenericStorageQuery<() => number>;

    /**
     * Hash of the previous block.
     **/
    parentHash: GenericStorageQuery<() => H256>;

    /**
     * Digest of the current block, also part of the block header.
     **/
    digest: GenericStorageQuery<() => Digest>;

    /**
     * Events deposited for the current block.
     *
     * NOTE: The item is unbound and should therefore never be read on chain.
     * It could otherwise inflate the PoV size of a block.
     *
     * Events have a large in-memory size. Box the events to not go out-of-memory
     * just in case someone still reads them from within the runtime.
     **/
    events: GenericStorageQuery<() => Array<FrameSystemEventRecord>>;

    /**
     * The number of events in the `Events<T>` list.
     **/
    eventCount: GenericStorageQuery<() => number>;

    /**
     * Mapping between a topic (represented by T::Hash) and a vector of indexes
     * of events in the `<Events<T>>` list.
     *
     * All topic vectors have deterministic storage locations depending on the topic. This
     * allows light-clients to leverage the changes trie storage tracking mechanism and
     * in case of changes fetch the list of events of interest.
     *
     * The value has the type `(BlockNumberFor<T>, EventIndex)` because if we used only just
     * the `EventIndex` then in case if the topic has the same contents on the next block
     * no notification will be triggered thus the event might be lost.
     **/
    eventTopics: GenericStorageQuery<(arg: H256) => Array<[number, number]>>;

    /**
     * Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened.
     **/
    lastRuntimeUpgrade: GenericStorageQuery<() => FrameSystemLastRuntimeUpgradeInfo | undefined>;

    /**
     * True if we have upgraded so that `type RefCount` is `u32`. False (default) if not.
     **/
    upgradedToU32RefCount: GenericStorageQuery<() => boolean>;

    /**
     * True if we have upgraded so that AccountInfo contains three types of `RefCount`. False
     * (default) if not.
     **/
    upgradedToTripleRefCount: GenericStorageQuery<() => boolean>;

    /**
     * The execution phase of the block.
     **/
    executionPhase: GenericStorageQuery<() => Phase | undefined>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery;
  };
  parachainSystem: {
    /**
     * Latest included block descendants the runtime accepted. In other words, these are
     * ancestors of the currently executing block which have not been included in the observed
     * relay-chain state.
     *
     * The segment length is limited by the capacity returned from the [`ConsensusHook`] configured
     * in the pallet.
     **/
    unincludedSegment: GenericStorageQuery<() => Array<CumulusPalletParachainSystemUnincludedSegmentAncestor>>;

    /**
     * Storage field that keeps track of bandwidth used by the unincluded segment along with the
     * latest HRMP watermark. Used for limiting the acceptance of new blocks with
     * respect to relay chain constraints.
     **/
    aggregatedUnincludedSegment: GenericStorageQuery<
      () => CumulusPalletParachainSystemUnincludedSegmentSegmentTracker | undefined
    >;

    /**
     * In case of a scheduled upgrade, this storage field contains the validation code to be
     * applied.
     *
     * As soon as the relay chain gives us the go-ahead signal, we will overwrite the
     * [`:code`][sp_core::storage::well_known_keys::CODE] which will result the next block process
     * with the new validation code. This concludes the upgrade process.
     **/
    pendingValidationCode: GenericStorageQuery<() => Bytes>;

    /**
     * Validation code that is set by the parachain and is to be communicated to collator and
     * consequently the relay-chain.
     *
     * This will be cleared in `on_initialize` of each new block if no other pallet already set
     * the value.
     **/
    newValidationCode: GenericStorageQuery<() => Bytes | undefined>;

    /**
     * The [`PersistedValidationData`] set for this block.
     * This value is expected to be set only once per block and it's never stored
     * in the trie.
     **/
    validationData: GenericStorageQuery<() => PolkadotPrimitivesV6PersistedValidationData | undefined>;

    /**
     * Were the validation data set to notify the relay chain?
     **/
    didSetValidationCode: GenericStorageQuery<() => boolean>;

    /**
     * The relay chain block number associated with the last parachain block.
     *
     * This is updated in `on_finalize`.
     **/
    lastRelayChainBlockNumber: GenericStorageQuery<() => number>;

    /**
     * An option which indicates if the relay-chain restricts signalling a validation code upgrade.
     * In other words, if this is `Some` and [`NewValidationCode`] is `Some` then the produced
     * candidate will be invalid.
     *
     * This storage item is a mirror of the corresponding value for the current parachain from the
     * relay-chain. This value is ephemeral which means it doesn't hit the storage. This value is
     * set after the inherent.
     **/
    upgradeRestrictionSignal: GenericStorageQuery<() => PolkadotPrimitivesV6UpgradeRestriction | undefined>;

    /**
     * Optional upgrade go-ahead signal from the relay-chain.
     *
     * This storage item is a mirror of the corresponding value for the current parachain from the
     * relay-chain. This value is ephemeral which means it doesn't hit the storage. This value is
     * set after the inherent.
     **/
    upgradeGoAhead: GenericStorageQuery<() => PolkadotPrimitivesV6UpgradeGoAhead | undefined>;

    /**
     * The state proof for the last relay parent block.
     *
     * This field is meant to be updated each block with the validation data inherent. Therefore,
     * before processing of the inherent, e.g. in `on_initialize` this data may be stale.
     *
     * This data is also absent from the genesis.
     **/
    relayStateProof: GenericStorageQuery<() => SpTrieStorageProof | undefined>;

    /**
     * The snapshot of some state related to messaging relevant to the current parachain as per
     * the relay parent.
     *
     * This field is meant to be updated each block with the validation data inherent. Therefore,
     * before processing of the inherent, e.g. in `on_initialize` this data may be stale.
     *
     * This data is also absent from the genesis.
     **/
    relevantMessagingState: GenericStorageQuery<
      () => CumulusPalletParachainSystemRelayStateSnapshotMessagingStateSnapshot | undefined
    >;

    /**
     * The parachain host configuration that was obtained from the relay parent.
     *
     * This field is meant to be updated each block with the validation data inherent. Therefore,
     * before processing of the inherent, e.g. in `on_initialize` this data may be stale.
     *
     * This data is also absent from the genesis.
     **/
    hostConfiguration: GenericStorageQuery<() => PolkadotPrimitivesV6AbridgedHostConfiguration | undefined>;

    /**
     * The last downward message queue chain head we have observed.
     *
     * This value is loaded before and saved after processing inbound downward messages carried
     * by the system inherent.
     **/
    lastDmqMqcHead: GenericStorageQuery<() => CumulusPrimitivesParachainInherentMessageQueueChain>;

    /**
     * The message queue chain heads we have observed per each channel incoming channel.
     *
     * This value is loaded before and saved after processing inbound downward messages carried
     * by the system inherent.
     **/
    lastHrmpMqcHeads: GenericStorageQuery<
      () => Array<[PolkadotParachainPrimitivesPrimitivesId, CumulusPrimitivesParachainInherentMessageQueueChain]>
    >;

    /**
     * Number of downward messages processed in a block.
     *
     * This will be cleared in `on_initialize` of each new block.
     **/
    processedDownwardMessages: GenericStorageQuery<() => number>;

    /**
     * HRMP watermark that was set in a block.
     *
     * This will be cleared in `on_initialize` of each new block.
     **/
    hrmpWatermark: GenericStorageQuery<() => number>;

    /**
     * HRMP messages that were sent in a block.
     *
     * This will be cleared in `on_initialize` of each new block.
     **/
    hrmpOutboundMessages: GenericStorageQuery<() => Array<PolkadotCorePrimitivesOutboundHrmpMessage>>;

    /**
     * Upward messages that were sent in a block.
     *
     * This will be cleared in `on_initialize` of each new block.
     **/
    upwardMessages: GenericStorageQuery<() => Array<Bytes>>;

    /**
     * Upward messages that are still pending and not yet send to the relay chain.
     **/
    pendingUpwardMessages: GenericStorageQuery<() => Array<Bytes>>;

    /**
     * The factor to multiply the base delivery fee by for UMP.
     **/
    upwardDeliveryFeeFactor: GenericStorageQuery<() => FixedU128>;

    /**
     * The number of HRMP messages we observed in `on_initialize` and thus used that number for
     * announcing the weight of `on_initialize` and `on_finalize`.
     **/
    announcedHrmpMessagesPerCandidate: GenericStorageQuery<() => number>;

    /**
     * The weight we reserve at the beginning of the block for processing XCMP messages. This
     * overrides the amount set in the Config trait.
     **/
    reservedXcmpWeightOverride: GenericStorageQuery<() => SpWeightsWeightV2Weight | undefined>;

    /**
     * The weight we reserve at the beginning of the block for processing DMP messages. This
     * overrides the amount set in the Config trait.
     **/
    reservedDmpWeightOverride: GenericStorageQuery<() => SpWeightsWeightV2Weight | undefined>;

    /**
     * The next authorized upgrade, if there is one.
     **/
    authorizedUpgrade: GenericStorageQuery<() => CumulusPalletParachainSystemCodeUpgradeAuthorization | undefined>;

    /**
     * A custom head data that should be returned as result of `validate_block`.
     *
     * See `Pallet::set_custom_validation_head_data` for more information.
     **/
    customValidationHeadData: GenericStorageQuery<() => Bytes | undefined>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery;
  };
  timestamp: {
    /**
     * The current time for the current block.
     **/
    now: GenericStorageQuery<() => bigint>;

    /**
     * Whether the timestamp has been updated in this block.
     *
     * This value is updated to `true` upon successful submission of a timestamp by a node.
     * It is then checked at the end of each block execution in the `on_finalize` hook.
     **/
    didUpdate: GenericStorageQuery<() => boolean>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery;
  };
  parachainInfo: {
    parachainId: GenericStorageQuery<() => PolkadotParachainPrimitivesPrimitivesId>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery;
  };
  rootTesting: {
    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery;
  };
  balances: {
    /**
     * The total units issued in the system.
     **/
    totalIssuance: GenericStorageQuery<() => bigint>;

    /**
     * The total units of outstanding deactivated balance in the system.
     **/
    inactiveIssuance: GenericStorageQuery<() => bigint>;

    /**
     * The Balances pallet example of storing the balance of an account.
     *
     * # Example
     *
     * ```nocompile
     * impl pallet_balances::Config for Runtime {
     * type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>
     * }
     * ```
     *
     * You can also store the balance of an account in the `System` pallet.
     *
     * # Example
     *
     * ```nocompile
     * impl pallet_balances::Config for Runtime {
     * type AccountStore = System
     * }
     * ```
     *
     * But this comes with tradeoffs, storing account balances in the system pallet stores
     * `frame_system` data alongside the account data contrary to storing account balances in the
     * `Balances` pallet, which uses a `StorageMap` to store balances data only.
     * NOTE: This is only used in the case that this pallet is used to store balances.
     **/
    account: GenericStorageQuery<(arg: AccountId20Like) => PalletBalancesAccountData>;

    /**
     * Any liquidity locks on some account balances.
     * NOTE: Should only be accessed when setting, changing and freeing a lock.
     **/
    locks: GenericStorageQuery<(arg: AccountId20Like) => Array<PalletBalancesBalanceLock>>;

    /**
     * Named reserves on some account balances.
     **/
    reserves: GenericStorageQuery<(arg: AccountId20Like) => Array<PalletBalancesReserveData>>;

    /**
     * Holds on account balances.
     **/
    holds: GenericStorageQuery<(arg: AccountId20Like) => Array<PalletBalancesIdAmount>>;

    /**
     * Freeze locks on account balances.
     **/
    freezes: GenericStorageQuery<(arg: AccountId20Like) => Array<PalletBalancesIdAmount002>>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery;
  };
  transactionPayment: {
    nextFeeMultiplier: GenericStorageQuery<() => FixedU128>;
    storageVersion: GenericStorageQuery<() => PalletTransactionPaymentReleases>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery;
  };
  parachainStaking: {
    /**
     * Commission percent taken off of rewards for all collators
     **/
    collatorCommission: GenericStorageQuery<() => Perbill>;

    /**
     * The total candidates selected every round
     **/
    totalSelected: GenericStorageQuery<() => number>;

    /**
     * Parachain bond config info { account, percent_of_inflation }
     **/
    parachainBondInfo: GenericStorageQuery<() => PalletParachainStakingParachainBondConfig>;

    /**
     * Current round index and next round scheduled transition
     **/
    round: GenericStorageQuery<() => PalletParachainStakingRoundInfo>;

    /**
     * Get delegator state associated with an account if account is delegating else None
     **/
    delegatorState: GenericStorageQuery<(arg: AccountId20Like) => PalletParachainStakingDelegator | undefined>;

    /**
     * Get collator candidate info associated with an account if account is candidate else None
     **/
    candidateInfo: GenericStorageQuery<(arg: AccountId20Like) => PalletParachainStakingCandidateMetadata | undefined>;

    /**
     * Stores outstanding delegation requests per collator.
     **/
    delegationScheduledRequests: GenericStorageQuery<
      (arg: AccountId20Like) => Array<PalletParachainStakingDelegationRequestsScheduledRequest>
    >;

    /**
     * Stores auto-compounding configuration per collator.
     **/
    autoCompoundingDelegations: GenericStorageQuery<
      (arg: AccountId20Like) => Array<PalletParachainStakingAutoCompoundAutoCompoundConfig>
    >;

    /**
     * Top delegations for collator candidate
     **/
    topDelegations: GenericStorageQuery<(arg: AccountId20Like) => PalletParachainStakingDelegations | undefined>;

    /**
     * Bottom delegations for collator candidate
     **/
    bottomDelegations: GenericStorageQuery<(arg: AccountId20Like) => PalletParachainStakingDelegations | undefined>;

    /**
     * The collator candidates selected for the current round
     **/
    selectedCandidates: GenericStorageQuery<() => Array<AccountId20>>;

    /**
     * Total capital locked by this staking pallet
     **/
    total: GenericStorageQuery<() => bigint>;

    /**
     * The pool of collator candidates, each with their total backing stake
     **/
    candidatePool: GenericStorageQuery<() => PalletParachainStakingSetBoundedOrderedSet>;

    /**
     * Snapshot of collator delegation stake at the start of the round
     **/
    atStake: GenericStorageQuery<
      (arg: [number, AccountId20Like]) => PalletParachainStakingCollatorSnapshot | undefined
    >;

    /**
     * Delayed payouts
     **/
    delayedPayouts: GenericStorageQuery<(arg: number) => PalletParachainStakingDelayedPayout | undefined>;

    /**
     * Total counted stake for selected candidates in the round
     **/
    staked: GenericStorageQuery<(arg: number) => bigint>;

    /**
     * Inflation configuration
     **/
    inflationConfig: GenericStorageQuery<() => PalletParachainStakingInflationInflationInfo>;

    /**
     * Total points awarded to collators for block production in the round
     **/
    points: GenericStorageQuery<(arg: number) => number>;

    /**
     * Points for each collator per round
     **/
    awardedPts: GenericStorageQuery<(arg: [number, AccountId20Like]) => number>;

    /**
     * Killswitch to enable/disable marking offline feature.
     **/
    enableMarkingOffline: GenericStorageQuery<() => boolean>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery;
  };
  authorInherent: {
    /**
     * Author of current block.
     **/
    author: GenericStorageQuery<() => AccountId20 | undefined>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery;
  };
  authorFilter: {
    eligibleRatio: GenericStorageQuery<() => Percent>;

    /**
     * The number of active authors that will be eligible at each height.
     **/
    eligibleCount: GenericStorageQuery<() => PalletAuthorSlotFilterNumNonZeroU32>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery;
  };
  authorMapping: {
    /**
     * We maintain a mapping from the NimbusIds used in the consensus layer
     * to the AccountIds runtime.
     **/
    mappingWithDeposit: GenericStorageQuery<
      (arg: NimbusPrimitivesNimbusCryptoPublic) => PalletAuthorMappingRegistrationInfo | undefined
    >;

    /**
     * We maintain a reverse mapping from AccountIds to NimbusIDS
     **/
    nimbusLookup: GenericStorageQuery<(arg: AccountId20Like) => NimbusPrimitivesNimbusCryptoPublic | undefined>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery;
  };
  moonbeamOrbiters: {
    /**
     * Account lookup override
     **/
    accountLookupOverride: GenericStorageQuery<(arg: AccountId20Like) => AccountId20 | undefined | undefined>;

    /**
     * Current orbiters, with their "parent" collator
     **/
    collatorsPool: GenericStorageQuery<(arg: AccountId20Like) => PalletMoonbeamOrbitersCollatorPoolInfo | undefined>;

    /**
     * Counter for the related counted storage map
     **/
    counterForCollatorsPool: GenericStorageQuery<() => number>;

    /**
     * Current round index
     **/
    currentRound: GenericStorageQuery<() => number>;

    /**
     * If true, it forces the rotation at the next round.
     * A use case: when changing RotatePeriod, you need a migration code that sets this value to
     * true to avoid holes in OrbiterPerRound.
     **/
    forceRotation: GenericStorageQuery<() => boolean>;

    /**
     * Minimum deposit required to be registered as an orbiter
     **/
    minOrbiterDeposit: GenericStorageQuery<() => bigint | undefined>;

    /**
     * Store active orbiter per round and per parent collator
     **/
    orbiterPerRound: GenericStorageQuery<(arg: [number, AccountId20Like]) => AccountId20 | undefined>;

    /**
     * Check if account is an orbiter
     **/
    registeredOrbiter: GenericStorageQuery<(arg: AccountId20Like) => boolean | undefined>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery;
  };
  proxy: {
    /**
     * The set of account proxies. Maps the account which has delegated to the accounts
     * which are being delegated to, together with the amount held on deposit.
     **/
    proxies: GenericStorageQuery<(arg: AccountId20Like) => [Array<PalletProxyProxyDefinition>, bigint]>;

    /**
     * The announcements made by the proxy (key).
     **/
    announcements: GenericStorageQuery<(arg: AccountId20Like) => [Array<PalletProxyAnnouncement>, bigint]>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery;
  };
  maintenanceMode: {
    /**
     * Whether the site is in maintenance mode
     **/
    maintenanceMode: GenericStorageQuery<() => boolean>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery;
  };
  identity: {
    /**
     * Information that is pertinent to identify the entity behind an account.
     *
     * TWOX-NOTE: OK ― `AccountId` is a secure hash.
     **/
    identityOf: GenericStorageQuery<(arg: AccountId20Like) => PalletIdentityRegistration | undefined>;

    /**
     * The super-identity of an alternative "sub" identity together with its name, within that
     * context. If the account is not some other account's sub-identity, then just `None`.
     **/
    superOf: GenericStorageQuery<(arg: AccountId20Like) => [AccountId20, Data] | undefined>;

    /**
     * Alternative "sub" identities of this account.
     *
     * The first item is the deposit, the second is a vector of the accounts.
     *
     * TWOX-NOTE: OK ― `AccountId` is a secure hash.
     **/
    subsOf: GenericStorageQuery<(arg: AccountId20Like) => [bigint, Array<AccountId20>]>;

    /**
     * The set of registrars. Not expected to get very big as can only be added through a
     * special origin (likely a council motion).
     *
     * The index into this can be cast to `RegistrarIndex` to get a valid value.
     **/
    registrars: GenericStorageQuery<() => Array<PalletIdentityRegistrarInfo | undefined>>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery;
  };
  migrations: {
    /**
     * True if all required migrations have completed
     **/
    fullyUpgraded: GenericStorageQuery<() => boolean>;

    /**
     * MigrationState tracks the progress of a migration.
     * Maps name (Vec<u8>) -> whether or not migration has been completed (bool)
     **/
    migrationState: GenericStorageQuery<(arg: BytesLike) => boolean>;

    /**
     * Temporary value that is set to true at the beginning of the block during which the execution
     * of xcm messages must be paused.
     **/
    shouldPauseXcm: GenericStorageQuery<() => boolean>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery;
  };
  multisig: {
    /**
     * The set of open multisig operations.
     **/
    multisigs: GenericStorageQuery<(arg: [AccountId20Like, FixedBytes<32>]) => PalletMultisigMultisig | undefined>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery;
  };
  ethereumChainId: {
    /**
     * The EVM chain ID.
     **/
    chainId: GenericStorageQuery<() => bigint>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery;
  };
  eVM: {
    accountCodes: GenericStorageQuery<(arg: H160) => Bytes>;
    accountCodesMetadata: GenericStorageQuery<(arg: H160) => PalletEvmCodeMetadata | undefined>;
    accountStorages: GenericStorageQuery<(arg: [H160, H256]) => H256>;
    suicided: GenericStorageQuery<(arg: H160) => [] | undefined>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery;
  };
  ethereum: {
    /**
     * Current building block's transactions and receipts.
     **/
    pending: GenericStorageQuery<
      () => Array<[EthereumTransactionTransactionV2, FpRpcTransactionStatus, EthereumReceiptReceiptV3]>
    >;

    /**
     * The current Ethereum block.
     **/
    currentBlock: GenericStorageQuery<() => EthereumBlock | undefined>;

    /**
     * The current Ethereum receipts.
     **/
    currentReceipts: GenericStorageQuery<() => Array<EthereumReceiptReceiptV3> | undefined>;

    /**
     * The current transaction statuses.
     **/
    currentTransactionStatuses: GenericStorageQuery<() => Array<FpRpcTransactionStatus> | undefined>;
    blockHash: GenericStorageQuery<(arg: U256) => H256>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery;
  };
  scheduler: {
    incompleteSince: GenericStorageQuery<() => number | undefined>;

    /**
     * Items to be executed, indexed by the block number that they should be executed on.
     **/
    agenda: GenericStorageQuery<(arg: number) => Array<PalletSchedulerScheduled | undefined>>;

    /**
     * Lookup from a name to the block number and index of the task.
     *
     * For v3 -> v4 the previously unbounded identities are Blake2-256 hashed to form the v4
     * identities.
     **/
    lookup: GenericStorageQuery<(arg: FixedBytes<32>) => [number, number] | undefined>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery;
  };
  democracy: {
    /**
     * The number of (public) proposals that have been made so far.
     **/
    publicPropCount: GenericStorageQuery<() => number>;

    /**
     * The public proposals. Unsorted. The second item is the proposal.
     **/
    publicProps: GenericStorageQuery<() => Array<[number, FrameSupportPreimagesBounded, AccountId20]>>;

    /**
     * Those who have locked a deposit.
     *
     * TWOX-NOTE: Safe, as increasing integer keys are safe.
     **/
    depositOf: GenericStorageQuery<(arg: number) => [Array<AccountId20>, bigint] | undefined>;

    /**
     * The next free referendum index, aka the number of referenda started so far.
     **/
    referendumCount: GenericStorageQuery<() => number>;

    /**
     * The lowest referendum index representing an unbaked referendum. Equal to
     * `ReferendumCount` if there isn't a unbaked referendum.
     **/
    lowestUnbaked: GenericStorageQuery<() => number>;

    /**
     * Information concerning any given referendum.
     *
     * TWOX-NOTE: SAFE as indexes are not under an attacker’s control.
     **/
    referendumInfoOf: GenericStorageQuery<(arg: number) => PalletDemocracyReferendumInfo | undefined>;

    /**
     * All votes for a particular voter. We store the balance for the number of votes that we
     * have recorded. The second item is the total amount of delegations, that will be added.
     *
     * TWOX-NOTE: SAFE as `AccountId`s are crypto hashes anyway.
     **/
    votingOf: GenericStorageQuery<(arg: AccountId20Like) => PalletDemocracyVoteVoting>;

    /**
     * True if the last referendum tabled was submitted externally. False if it was a public
     * proposal.
     **/
    lastTabledWasExternal: GenericStorageQuery<() => boolean>;

    /**
     * The referendum to be tabled whenever it would be valid to table an external proposal.
     * This happens when a referendum needs to be tabled and one of two conditions are met:
     * - `LastTabledWasExternal` is `false`; or
     * - `PublicProps` is empty.
     **/
    nextExternal: GenericStorageQuery<() => [FrameSupportPreimagesBounded, PalletDemocracyVoteThreshold] | undefined>;

    /**
     * A record of who vetoed what. Maps proposal hash to a possible existent block number
     * (until when it may not be resubmitted) and who vetoed it.
     **/
    blacklist: GenericStorageQuery<(arg: H256) => [number, Array<AccountId20>] | undefined>;

    /**
     * Record of all proposals that have been subject to emergency cancellation.
     **/
    cancellations: GenericStorageQuery<(arg: H256) => boolean>;

    /**
     * General information concerning any proposal or referendum.
     * The `Hash` refers to the preimage of the `Preimages` provider which can be a JSON
     * dump or IPFS hash of a JSON file.
     *
     * Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)
     * large preimages.
     **/
    metadataOf: GenericStorageQuery<(arg: PalletDemocracyMetadataOwner) => H256 | undefined>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery;
  };
  preimage: {
    /**
     * The request status of a given hash.
     **/
    statusFor: GenericStorageQuery<(arg: H256) => PalletPreimageOldRequestStatus | undefined>;

    /**
     * The request status of a given hash.
     **/
    requestStatusFor: GenericStorageQuery<(arg: H256) => PalletPreimageRequestStatus | undefined>;
    preimageFor: GenericStorageQuery<(arg: [H256, number]) => Bytes | undefined>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery;
  };
  convictionVoting: {
    /**
     * All voting for a particular voter in a particular voting class. We store the balance for the
     * number of votes that we have recorded.
     **/
    votingFor: GenericStorageQuery<(arg: [AccountId20Like, number]) => PalletConvictionVotingVoteVoting>;

    /**
     * The voting classes which have a non-zero lock requirement and the lock amounts which they
     * require. The actual amount locked on behalf of this pallet should always be the maximum of
     * this list.
     **/
    classLocksFor: GenericStorageQuery<(arg: AccountId20Like) => Array<[number, bigint]>>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery;
  };
  referenda: {
    /**
     * The next free referendum index, aka the number of referenda started so far.
     **/
    referendumCount: GenericStorageQuery<() => number>;

    /**
     * Information concerning any given referendum.
     **/
    referendumInfoFor: GenericStorageQuery<(arg: number) => PalletReferendaReferendumInfo | undefined>;

    /**
     * The sorted list of referenda ready to be decided but not yet being decided, ordered by
     * conviction-weighted approvals.
     *
     * This should be empty if `DecidingCount` is less than `TrackInfo::max_deciding`.
     **/
    trackQueue: GenericStorageQuery<(arg: number) => Array<[number, bigint]>>;

    /**
     * The number of referenda being decided currently.
     **/
    decidingCount: GenericStorageQuery<(arg: number) => number>;

    /**
     * The metadata is a general information concerning the referendum.
     * The `Hash` refers to the preimage of the `Preimages` provider which can be a JSON
     * dump or IPFS hash of a JSON file.
     *
     * Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)
     * large preimages.
     **/
    metadataOf: GenericStorageQuery<(arg: number) => H256 | undefined>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery;
  };
  whitelist: {
    whitelistedCall: GenericStorageQuery<(arg: H256) => [] | undefined>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery;
  };
  councilCollective: {
    /**
     * The hashes of the active proposals.
     **/
    proposals: GenericStorageQuery<() => Array<H256>>;

    /**
     * Actual proposal for a given hash, if it's current.
     **/
    proposalOf: GenericStorageQuery<(arg: H256) => MoonbeamRuntimeRuntimeCall | undefined>;

    /**
     * Votes on a given proposal, if it is ongoing.
     **/
    voting: GenericStorageQuery<(arg: H256) => PalletCollectiveVotes | undefined>;

    /**
     * Proposals so far.
     **/
    proposalCount: GenericStorageQuery<() => number>;

    /**
     * The current members of the collective. This is stored sorted (just by value).
     **/
    members: GenericStorageQuery<() => Array<AccountId20>>;

    /**
     * The prime member that helps determine the default vote behavior in case of absentations.
     **/
    prime: GenericStorageQuery<() => AccountId20 | undefined>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery;
  };
  techCommitteeCollective: {
    /**
     * The hashes of the active proposals.
     **/
    proposals: GenericStorageQuery<() => Array<H256>>;

    /**
     * Actual proposal for a given hash, if it's current.
     **/
    proposalOf: GenericStorageQuery<(arg: H256) => MoonbeamRuntimeRuntimeCall | undefined>;

    /**
     * Votes on a given proposal, if it is ongoing.
     **/
    voting: GenericStorageQuery<(arg: H256) => PalletCollectiveVotes | undefined>;

    /**
     * Proposals so far.
     **/
    proposalCount: GenericStorageQuery<() => number>;

    /**
     * The current members of the collective. This is stored sorted (just by value).
     **/
    members: GenericStorageQuery<() => Array<AccountId20>>;

    /**
     * The prime member that helps determine the default vote behavior in case of absentations.
     **/
    prime: GenericStorageQuery<() => AccountId20 | undefined>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery;
  };
  treasuryCouncilCollective: {
    /**
     * The hashes of the active proposals.
     **/
    proposals: GenericStorageQuery<() => Array<H256>>;

    /**
     * Actual proposal for a given hash, if it's current.
     **/
    proposalOf: GenericStorageQuery<(arg: H256) => MoonbeamRuntimeRuntimeCall | undefined>;

    /**
     * Votes on a given proposal, if it is ongoing.
     **/
    voting: GenericStorageQuery<(arg: H256) => PalletCollectiveVotes | undefined>;

    /**
     * Proposals so far.
     **/
    proposalCount: GenericStorageQuery<() => number>;

    /**
     * The current members of the collective. This is stored sorted (just by value).
     **/
    members: GenericStorageQuery<() => Array<AccountId20>>;

    /**
     * The prime member that helps determine the default vote behavior in case of absentations.
     **/
    prime: GenericStorageQuery<() => AccountId20 | undefined>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery;
  };
  openTechCommitteeCollective: {
    /**
     * The hashes of the active proposals.
     **/
    proposals: GenericStorageQuery<() => Array<H256>>;

    /**
     * Actual proposal for a given hash, if it's current.
     **/
    proposalOf: GenericStorageQuery<(arg: H256) => MoonbeamRuntimeRuntimeCall | undefined>;

    /**
     * Votes on a given proposal, if it is ongoing.
     **/
    voting: GenericStorageQuery<(arg: H256) => PalletCollectiveVotes | undefined>;

    /**
     * Proposals so far.
     **/
    proposalCount: GenericStorageQuery<() => number>;

    /**
     * The current members of the collective. This is stored sorted (just by value).
     **/
    members: GenericStorageQuery<() => Array<AccountId20>>;

    /**
     * The prime member that helps determine the default vote behavior in case of absentations.
     **/
    prime: GenericStorageQuery<() => AccountId20 | undefined>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery;
  };
  treasury: {
    /**
     * Number of proposals that have been made.
     **/
    proposalCount: GenericStorageQuery<() => number>;

    /**
     * Proposals that have been made.
     **/
    proposals: GenericStorageQuery<(arg: number) => PalletTreasuryProposal | undefined>;

    /**
     * The amount which has been reported as inactive to Currency.
     **/
    deactivated: GenericStorageQuery<() => bigint>;

    /**
     * Proposal indices that have been approved but not yet awarded.
     **/
    approvals: GenericStorageQuery<() => Array<number>>;

    /**
     * The count of spends that have been made.
     **/
    spendCount: GenericStorageQuery<() => number>;

    /**
     * Spends that have been approved and being processed.
     **/
    spends: GenericStorageQuery<(arg: number) => PalletTreasurySpendStatus | undefined>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery;
  };
  crowdloanRewards: {
    accountsPayable: GenericStorageQuery<(arg: AccountId20Like) => PalletCrowdloanRewardsRewardInfo | undefined>;
    claimedRelayChainIds: GenericStorageQuery<(arg: FixedBytes<32>) => [] | undefined>;
    unassociatedContributions: GenericStorageQuery<
      (arg: FixedBytes<32>) => PalletCrowdloanRewardsRewardInfo | undefined
    >;
    initialized: GenericStorageQuery<() => boolean>;

    /**
     * Vesting block height at the initialization of the pallet
     **/
    initRelayBlock: GenericStorageQuery<() => number>;

    /**
     * Vesting block height at the initialization of the pallet
     **/
    endRelayBlock: GenericStorageQuery<() => number>;

    /**
     * Total initialized amount so far. We store this to make pallet funds == contributors reward
     * check easier and more efficient
     **/
    initializedRewardAmount: GenericStorageQuery<() => bigint>;

    /**
     * Total number of contributors to aid hinting benchmarking
     **/
    totalContributors: GenericStorageQuery<() => number>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery;
  };
  xcmpQueue: {
    /**
     * Status of the inbound XCMP channels.
     **/
    inboundXcmpStatus: GenericStorageQuery<() => Array<CumulusPalletXcmpQueueInboundChannelDetails>>;

    /**
     * Inbound aggregate XCMP messages. It can only be one per ParaId/block.
     **/
    inboundXcmpMessages: GenericStorageQuery<(arg: [PolkadotParachainPrimitivesPrimitivesId, number]) => Bytes>;

    /**
     * The non-empty XCMP channels in order of becoming non-empty, and the index of the first
     * and last outbound message. If the two indices are equal, then it indicates an empty
     * queue and there must be a non-`Ok` `OutboundStatus`. We assume queues grow no greater
     * than 65535 items. Queue indices for normal messages begin at one; zero is reserved in
     * case of the need to send a high-priority signal message this block.
     * The bool is true if there is a signal message waiting to be sent.
     **/
    outboundXcmpStatus: GenericStorageQuery<() => Array<CumulusPalletXcmpQueueOutboundChannelDetails>>;

    /**
     * The messages outbound in a given XCMP channel.
     **/
    outboundXcmpMessages: GenericStorageQuery<(arg: [PolkadotParachainPrimitivesPrimitivesId, number]) => Bytes>;

    /**
     * Any signal messages waiting to be sent.
     **/
    signalMessages: GenericStorageQuery<(arg: PolkadotParachainPrimitivesPrimitivesId) => Bytes>;

    /**
     * The configuration which controls the dynamics of the outbound queue.
     **/
    queueConfig: GenericStorageQuery<() => CumulusPalletXcmpQueueQueueConfigData>;

    /**
     * The messages that exceeded max individual message weight budget.
     *
     * These message stay in this storage map until they are manually dispatched via
     * `service_overweight`.
     **/
    overweight: GenericStorageQuery<
      (arg: bigint) => [PolkadotParachainPrimitivesPrimitivesId, number, Bytes] | undefined
    >;

    /**
     * Counter for the related counted storage map
     **/
    counterForOverweight: GenericStorageQuery<() => number>;

    /**
     * The number of overweight messages ever recorded in `Overweight`. Also doubles as the next
     * available free overweight index.
     **/
    overweightCount: GenericStorageQuery<() => bigint>;

    /**
     * Whether or not the XCMP queue is suspended from executing incoming XCMs or not.
     **/
    queueSuspended: GenericStorageQuery<() => boolean>;

    /**
     * The factor to multiply the base delivery fee by.
     **/
    deliveryFeeFactor: GenericStorageQuery<(arg: PolkadotParachainPrimitivesPrimitivesId) => FixedU128>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery;
  };
  dmpQueue: {
    /**
     * The configuration.
     **/
    configuration: GenericStorageQuery<() => CumulusPalletDmpQueueConfigData>;

    /**
     * The page index.
     **/
    pageIndex: GenericStorageQuery<() => CumulusPalletDmpQueuePageIndexData>;

    /**
     * The queue pages.
     **/
    pages: GenericStorageQuery<(arg: number) => Array<[number, Bytes]>>;

    /**
     * The overweight messages.
     **/
    overweight: GenericStorageQuery<(arg: bigint) => [number, Bytes] | undefined>;

    /**
     * Counter for the related counted storage map
     **/
    counterForOverweight: GenericStorageQuery<() => number>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery;
  };
  polkadotXcm: {
    /**
     * The latest available query index.
     **/
    queryCounter: GenericStorageQuery<() => bigint>;

    /**
     * The ongoing queries.
     **/
    queries: GenericStorageQuery<(arg: bigint) => PalletXcmQueryStatus | undefined>;

    /**
     * The existing asset traps.
     *
     * Key is the blake2 256 hash of (origin, versioned `MultiAssets`) pair. Value is the number of
     * times this pair has been trapped (usually just 1 if it exists at all).
     **/
    assetTraps: GenericStorageQuery<(arg: H256) => number>;

    /**
     * Default version to encode XCM when latest version of destination is unknown. If `None`,
     * then the destinations whose XCM version is unknown are considered unreachable.
     **/
    safeXcmVersion: GenericStorageQuery<() => number | undefined>;

    /**
     * The Latest versions that we know various locations support.
     **/
    supportedVersion: GenericStorageQuery<(arg: [number, XcmVersionedMultiLocation]) => number | undefined>;

    /**
     * All locations that we have requested version notifications from.
     **/
    versionNotifiers: GenericStorageQuery<(arg: [number, XcmVersionedMultiLocation]) => bigint | undefined>;

    /**
     * The target locations that are subscribed to our version changes, as well as the most recent
     * of our versions we informed them of.
     **/
    versionNotifyTargets: GenericStorageQuery<
      (arg: [number, XcmVersionedMultiLocation]) => [bigint, SpWeightsWeightV2Weight, number] | undefined
    >;

    /**
     * Destinations whose latest XCM version we would like to know. Duplicates not allowed, and
     * the `u32` counter is the number of times that a send to the destination has been attempted,
     * which is used as a prioritization.
     **/
    versionDiscoveryQueue: GenericStorageQuery<() => Array<[XcmVersionedMultiLocation, number]>>;

    /**
     * The current migration's stage, if any.
     **/
    currentMigration: GenericStorageQuery<() => PalletXcmVersionMigrationStage | undefined>;

    /**
     * Fungible assets which we know are locked on a remote chain.
     **/
    remoteLockedFungibles: GenericStorageQuery<
      (arg: [number, AccountId20Like, XcmVersionedAssetId]) => PalletXcmRemoteLockedFungibleRecord | undefined
    >;

    /**
     * Fungible assets which we know are locked on this chain.
     **/
    lockedFungibles: GenericStorageQuery<
      (arg: AccountId20Like) => Array<[bigint, XcmVersionedMultiLocation]> | undefined
    >;

    /**
     * Global suspension state of the XCM executor.
     **/
    xcmExecutionSuspended: GenericStorageQuery<() => boolean>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery;
  };
  assets: {
    /**
     * Details of an asset.
     **/
    asset: GenericStorageQuery<(arg: bigint) => PalletAssetsAssetDetails | undefined>;

    /**
     * The holdings of a specific account for a specific asset.
     **/
    account: GenericStorageQuery<(arg: [bigint, AccountId20Like]) => PalletAssetsAssetAccount | undefined>;

    /**
     * Approved balance transfers. First balance is the amount approved for transfer. Second
     * is the amount of `T::Currency` reserved for storing this.
     * First key is the asset ID, second key is the owner and third key is the delegate.
     **/
    approvals: GenericStorageQuery<
      (arg: [bigint, AccountId20Like, AccountId20Like]) => PalletAssetsApproval | undefined
    >;

    /**
     * Metadata of an asset.
     **/
    metadata: GenericStorageQuery<(arg: bigint) => PalletAssetsAssetMetadata>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery;
  };
  assetManager: {
    /**
     * Mapping from an asset id to asset type.
     * This is mostly used when receiving transaction specifying an asset directly,
     * like transferring an asset from this chain to another.
     **/
    assetIdType: GenericStorageQuery<(arg: bigint) => MoonbeamRuntimeXcmConfigAssetType | undefined>;

    /**
     * Reverse mapping of AssetIdType. Mapping from an asset type to an asset id.
     * This is mostly used when receiving a multilocation XCM message to retrieve
     * the corresponding asset in which tokens should me minted.
     **/
    assetTypeId: GenericStorageQuery<(arg: MoonbeamRuntimeXcmConfigAssetType) => bigint | undefined>;

    /**
     * Stores the units per second for local execution for a AssetType.
     * This is used to know how to charge for XCM execution in a particular
     * asset
     * Not all assets might contain units per second, hence the different storage
     **/
    assetTypeUnitsPerSecond: GenericStorageQuery<(arg: MoonbeamRuntimeXcmConfigAssetType) => bigint | undefined>;

    /**
     * Stores the counter of the number of local assets that have been
     * created so far
     * This value can be used to salt the creation of an assetId, e.g.,
     * by hashing it. This is particularly useful for cases like moonbeam
     * where letting users choose their assetId would result in collision
     * in the evm side.
     **/
    localAssetCounter: GenericStorageQuery<() => bigint>;

    /**
     * Local asset deposits, a mapping from assetId to a struct
     * holding the creator (from which the deposit was reserved) and
     * the deposit amount
     **/
    localAssetDeposit: GenericStorageQuery<(arg: bigint) => PalletAssetManagerAssetInfo | undefined>;
    supportedFeePaymentAssets: GenericStorageQuery<() => Array<MoonbeamRuntimeXcmConfigAssetType>>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery;
  };
  xTokens: {
    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery;
  };
  xcmTransactor: {
    /**
     * Since we are using pallet-utility for account derivation (through AsDerivative),
     * we need to provide an index for the account derivation. This storage item stores the index
     * assigned for a given local account. These indices are usable as derivative in the relay chain
     **/
    indexToAccount: GenericStorageQuery<(arg: number) => AccountId20 | undefined>;

    /**
     * Stores the transact info of a MultiLocation. This defines how much extra weight we need to
     * add when we want to transact in the destination chain and maximum amount of weight allowed
     * by the destination chain
     **/
    transactInfoWithWeightLimit: GenericStorageQuery<
      (arg: StagingXcmV3MultilocationMultiLocation) => PalletXcmTransactorRemoteTransactInfoWithMaxWeight | undefined
    >;

    /**
     * Stores the fee per second for an asset in its reserve chain. This allows us to convert
     * from weight to fee
     **/
    destinationAssetFeePerSecond: GenericStorageQuery<
      (arg: StagingXcmV3MultilocationMultiLocation) => bigint | undefined
    >;

    /**
     * Stores the indices of relay chain pallets
     **/
    relayIndices: GenericStorageQuery<() => PalletXcmTransactorRelayIndicesRelayChainIndices>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery;
  };
  localAssets: {
    /**
     * Details of an asset.
     **/
    asset: GenericStorageQuery<(arg: bigint) => PalletAssetsAssetDetails | undefined>;

    /**
     * The holdings of a specific account for a specific asset.
     **/
    account: GenericStorageQuery<(arg: [bigint, AccountId20Like]) => PalletAssetsAssetAccount | undefined>;

    /**
     * Approved balance transfers. First balance is the amount approved for transfer. Second
     * is the amount of `T::Currency` reserved for storing this.
     * First key is the asset ID, second key is the owner and third key is the delegate.
     **/
    approvals: GenericStorageQuery<
      (arg: [bigint, AccountId20Like, AccountId20Like]) => PalletAssetsApproval | undefined
    >;

    /**
     * Metadata of an asset.
     **/
    metadata: GenericStorageQuery<(arg: bigint) => PalletAssetsAssetMetadata>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery;
  };
  ethereumXcm: {
    /**
     * Global nonce used for building Ethereum transaction payload.
     **/
    nonce: GenericStorageQuery<() => U256>;

    /**
     * Whether or not Ethereum-XCM is suspended from executing
     **/
    ethereumXcmSuspended: GenericStorageQuery<() => boolean>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery;
  };
  randomness: {
    /**
     * Randomness requests not yet fulfilled or purged
     **/
    requests: GenericStorageQuery<(arg: bigint) => PalletRandomnessRequestState | undefined>;

    /**
     * Number of randomness requests made so far, used to generate the next request's uid
     **/
    requestCount: GenericStorageQuery<() => bigint>;

    /**
     * Current local per-block VRF randomness
     * Set in `on_initialize`
     **/
    localVrfOutput: GenericStorageQuery<() => H256 | undefined>;

    /**
     * Relay epoch
     **/
    relayEpoch: GenericStorageQuery<() => bigint>;

    /**
     * Ensures the mandatory inherent was included in the block
     **/
    inherentIncluded: GenericStorageQuery<() => [] | undefined>;

    /**
     * Records whether this is the first block (genesis or runtime upgrade)
     **/
    notFirstBlock: GenericStorageQuery<() => [] | undefined>;

    /**
     * Snapshot of randomness to fulfill all requests that are for the same raw randomness
     * Removed once $value.request_count == 0
     **/
    randomnessResults: GenericStorageQuery<
      (arg: PalletRandomnessRequestType) => PalletRandomnessRandomnessResult | undefined
    >;

    /**
     * Previous local per-block VRF randomness
     * Set in `on_finalize` of last block
     **/
    previousLocalVrfOutput: GenericStorageQuery<() => H256>;

    /**
     * Generic pallet storage query
     **/
    [storage: string]: GenericStorageQuery;
  };
}
