// Generated by @delightfuldot/codegen

import type {
  Phase,
  H256,
  DispatchInfo,
  DispatchError,
  AccountId32,
  Result,
  Perbill,
  FixedBytes,
  FixedU128,
  Bytes,
  FixedU64,
  Perquintill,
  FixedArray,
  BytesLike,
  Header,
  MultiAddress,
  MultiAddressLike,
  AccountId32Like,
  PerU16,
  Percent,
  Data,
  Permill,
  FixedI64,
  Era,
} from '@delightfuldot/codecs';

export type FrameSystemAccountInfo = {
  nonce: number;
  consumers: number;
  providers: number;
  sufficients: number;
  data: PalletBalancesAccountData;
};

export type PalletBalancesAccountData = {
  free: bigint;
  reserved: bigint;
  frozen: bigint;
  flags: PalletBalancesExtraFlags;
};

export type PalletBalancesExtraFlags = bigint;

export type FrameSupportDispatchPerDispatchClass = {
  normal: SpWeightsWeightV2Weight;
  operational: SpWeightsWeightV2Weight;
  mandatory: SpWeightsWeightV2Weight;
};

export type SpWeightsWeightV2Weight = { refTime: bigint; proofSize: bigint };

export type FrameSystemEventRecord = { phase: Phase; event: KitchensinkRuntimeRuntimeEvent; topics: Array<H256> };

export type KitchensinkRuntimeRuntimeEvent =
  | { pallet: 'System'; palletEvent: FrameSystemEvent }
  | { pallet: 'Utility'; palletEvent: PalletUtilityEvent }
  | { pallet: 'Indices'; palletEvent: PalletIndicesEvent }
  | { pallet: 'Balances'; palletEvent: PalletBalancesEvent }
  | { pallet: 'TransactionPayment'; palletEvent: PalletTransactionPaymentEvent }
  | { pallet: 'AssetTxPayment'; palletEvent: PalletAssetTxPaymentEvent }
  | { pallet: 'AssetConversionTxPayment'; palletEvent: PalletAssetConversionTxPaymentEvent }
  | { pallet: 'ElectionProviderMultiPhase'; palletEvent: PalletElectionProviderMultiPhaseEvent }
  | { pallet: 'Staking'; palletEvent: PalletStakingPalletEvent }
  | { pallet: 'Session'; palletEvent: PalletSessionEvent }
  | { pallet: 'Democracy'; palletEvent: PalletDemocracyEvent }
  | { pallet: 'Council'; palletEvent: PalletCollectiveEvent }
  | { pallet: 'TechnicalCommittee'; palletEvent: PalletCollectiveEvent }
  | { pallet: 'Elections'; palletEvent: PalletElectionsPhragmenEvent }
  | { pallet: 'TechnicalMembership'; palletEvent: PalletMembershipEvent }
  | { pallet: 'Grandpa'; palletEvent: PalletGrandpaEvent }
  | { pallet: 'Treasury'; palletEvent: PalletTreasuryEvent }
  | { pallet: 'AssetRate'; palletEvent: PalletAssetRateEvent }
  | { pallet: 'Contracts'; palletEvent: PalletContractsEvent }
  | { pallet: 'Sudo'; palletEvent: PalletSudoEvent }
  | { pallet: 'ImOnline'; palletEvent: PalletImOnlineEvent }
  | { pallet: 'Offences'; palletEvent: PalletOffencesEvent }
  | { pallet: 'Identity'; palletEvent: PalletIdentityEvent }
  | { pallet: 'Society'; palletEvent: PalletSocietyEvent }
  | { pallet: 'Recovery'; palletEvent: PalletRecoveryEvent }
  | { pallet: 'Vesting'; palletEvent: PalletVestingEvent }
  | { pallet: 'Scheduler'; palletEvent: PalletSchedulerEvent }
  | { pallet: 'Glutton'; palletEvent: PalletGluttonEvent }
  | { pallet: 'Preimage'; palletEvent: PalletPreimageEvent }
  | { pallet: 'Proxy'; palletEvent: PalletProxyEvent }
  | { pallet: 'Multisig'; palletEvent: PalletMultisigEvent }
  | { pallet: 'Bounties'; palletEvent: PalletBountiesEvent }
  | { pallet: 'Tips'; palletEvent: PalletTipsEvent }
  | { pallet: 'Assets'; palletEvent: PalletAssetsEvent }
  | { pallet: 'PoolAssets'; palletEvent: PalletAssetsEvent }
  | { pallet: 'Lottery'; palletEvent: PalletLotteryEvent }
  | { pallet: 'Nis'; palletEvent: PalletNisEvent }
  | { pallet: 'Uniques'; palletEvent: PalletUniquesEvent }
  | { pallet: 'Nfts'; palletEvent: PalletNftsEvent }
  | { pallet: 'NftFractionalization'; palletEvent: PalletNftFractionalizationEvent }
  | { pallet: 'Salary'; palletEvent: PalletSalaryEvent }
  | { pallet: 'CoreFellowship'; palletEvent: PalletCoreFellowshipEvent }
  | { pallet: 'TransactionStorage'; palletEvent: PalletTransactionStorageEvent }
  | { pallet: 'VoterList'; palletEvent: PalletBagsListEvent }
  | { pallet: 'StateTrieMigration'; palletEvent: PalletStateTrieMigrationEvent }
  | { pallet: 'ChildBounties'; palletEvent: PalletChildBountiesEvent }
  | { pallet: 'Referenda'; palletEvent: PalletReferendaEvent }
  | { pallet: 'Remark'; palletEvent: PalletRemarkEvent }
  | { pallet: 'ConvictionVoting'; palletEvent: PalletConvictionVotingEvent }
  | { pallet: 'Whitelist'; palletEvent: PalletWhitelistEvent }
  | { pallet: 'AllianceMotion'; palletEvent: PalletCollectiveEvent }
  | { pallet: 'Alliance'; palletEvent: PalletAllianceEvent }
  | { pallet: 'NominationPools'; palletEvent: PalletNominationPoolsEvent }
  | { pallet: 'RankedPolls'; palletEvent: PalletReferendaEvent002 }
  | { pallet: 'RankedCollective'; palletEvent: PalletRankedCollectiveEvent }
  | { pallet: 'AssetConversion'; palletEvent: PalletAssetConversionEvent }
  | { pallet: 'FastUnstake'; palletEvent: PalletFastUnstakeEvent }
  | { pallet: 'MessageQueue'; palletEvent: PalletMessageQueueEvent }
  | { pallet: 'Pov'; palletEvent: FrameBenchmarkingPalletPovEvent }
  | { pallet: 'TxPause'; palletEvent: PalletTxPauseEvent }
  | { pallet: 'SafeMode'; palletEvent: PalletSafeModeEvent }
  | { pallet: 'Statement'; palletEvent: PalletStatementEvent }
  | { pallet: 'Broker'; palletEvent: PalletBrokerEvent };

/**
 * Event for the System pallet.
 **/
export type FrameSystemEvent =
  /**
   * An extrinsic completed successfully.
   **/
  | { name: 'ExtrinsicSuccess'; data: { dispatchInfo: DispatchInfo } }
  /**
   * An extrinsic failed.
   **/
  | { name: 'ExtrinsicFailed'; data: { dispatchError: DispatchError; dispatchInfo: DispatchInfo } }
  /**
   * `:code` was updated.
   **/
  | { name: 'CodeUpdated' }
  /**
   * A new account was created.
   **/
  | { name: 'NewAccount'; data: { account: AccountId32 } }
  /**
   * An account was reaped.
   **/
  | { name: 'KilledAccount'; data: { account: AccountId32 } }
  /**
   * On on-chain remark happened.
   **/
  | { name: 'Remarked'; data: { sender: AccountId32; hash: H256 } };

export type FrameSupportDispatchDispatchClass = 'Normal' | 'Operational' | 'Mandatory';

export type FrameSupportDispatchPays = 'Yes' | 'No';

/**
 * The `Event` enum of this pallet
 **/
export type PalletUtilityEvent =
  /**
   * Batch of dispatches did not complete fully. Index of first failing dispatch given, as
   * well as the error.
   **/
  | { name: 'BatchInterrupted'; data: { index: number; error: DispatchError } }
  /**
   * Batch of dispatches completed fully with no error.
   **/
  | { name: 'BatchCompleted' }
  /**
   * Batch of dispatches completed but has errors.
   **/
  | { name: 'BatchCompletedWithErrors' }
  /**
   * A single item within a Batch of dispatches has completed with no error.
   **/
  | { name: 'ItemCompleted' }
  /**
   * A single item within a Batch of dispatches has completed with error.
   **/
  | { name: 'ItemFailed'; data: { error: DispatchError } }
  /**
   * A call was dispatched.
   **/
  | { name: 'DispatchedAs'; data: { result: Result<[], DispatchError> } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletIndicesEvent =
  /**
   * A account index was assigned.
   **/
  | { name: 'IndexAssigned'; data: { who: AccountId32; index: number } }
  /**
   * A account index has been freed up (unassigned).
   **/
  | { name: 'IndexFreed'; data: { index: number } }
  /**
   * A account index has been frozen to its current account ID.
   **/
  | { name: 'IndexFrozen'; data: { index: number; who: AccountId32 } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletBalancesEvent =
  /**
   * An account was created with some free balance.
   **/
  | { name: 'Endowed'; data: { account: AccountId32; freeBalance: bigint } }
  /**
   * An account was removed whose balance was non-zero but below ExistentialDeposit,
   * resulting in an outright loss.
   **/
  | { name: 'DustLost'; data: { account: AccountId32; amount: bigint } }
  /**
   * Transfer succeeded.
   **/
  | { name: 'Transfer'; data: { from: AccountId32; to: AccountId32; amount: bigint } }
  /**
   * A balance was set by root.
   **/
  | { name: 'BalanceSet'; data: { who: AccountId32; free: bigint } }
  /**
   * Some balance was reserved (moved from free to reserved).
   **/
  | { name: 'Reserved'; data: { who: AccountId32; amount: bigint } }
  /**
   * Some balance was unreserved (moved from reserved to free).
   **/
  | { name: 'Unreserved'; data: { who: AccountId32; amount: bigint } }
  /**
   * Some balance was moved from the reserve of the first account to the second account.
   * Final argument indicates the destination balance type.
   **/
  | {
      name: 'ReserveRepatriated';
      data: {
        from: AccountId32;
        to: AccountId32;
        amount: bigint;
        destinationStatus: FrameSupportTokensMiscBalanceStatus;
      };
    }
  /**
   * Some amount was deposited (e.g. for transaction fees).
   **/
  | { name: 'Deposit'; data: { who: AccountId32; amount: bigint } }
  /**
   * Some amount was withdrawn from the account (e.g. for transaction fees).
   **/
  | { name: 'Withdraw'; data: { who: AccountId32; amount: bigint } }
  /**
   * Some amount was removed from the account (e.g. for misbehavior).
   **/
  | { name: 'Slashed'; data: { who: AccountId32; amount: bigint } }
  /**
   * Some amount was minted into an account.
   **/
  | { name: 'Minted'; data: { who: AccountId32; amount: bigint } }
  /**
   * Some amount was burned from an account.
   **/
  | { name: 'Burned'; data: { who: AccountId32; amount: bigint } }
  /**
   * Some amount was suspended from an account (it can be restored later).
   **/
  | { name: 'Suspended'; data: { who: AccountId32; amount: bigint } }
  /**
   * Some amount was restored into an account.
   **/
  | { name: 'Restored'; data: { who: AccountId32; amount: bigint } }
  /**
   * An account was upgraded.
   **/
  | { name: 'Upgraded'; data: { who: AccountId32 } }
  /**
   * Total issuance was increased by `amount`, creating a credit to be balanced.
   **/
  | { name: 'Issued'; data: { amount: bigint } }
  /**
   * Total issuance was decreased by `amount`, creating a debt to be balanced.
   **/
  | { name: 'Rescinded'; data: { amount: bigint } }
  /**
   * Some balance was locked.
   **/
  | { name: 'Locked'; data: { who: AccountId32; amount: bigint } }
  /**
   * Some balance was unlocked.
   **/
  | { name: 'Unlocked'; data: { who: AccountId32; amount: bigint } }
  /**
   * Some balance was frozen.
   **/
  | { name: 'Frozen'; data: { who: AccountId32; amount: bigint } }
  /**
   * Some balance was thawed.
   **/
  | { name: 'Thawed'; data: { who: AccountId32; amount: bigint } };

export type FrameSupportTokensMiscBalanceStatus = 'Free' | 'Reserved';

/**
 * The `Event` enum of this pallet
 **/
export type PalletTransactionPaymentEvent =
  /**
   * A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,
   * has been paid by `who`.
   **/
  { name: 'TransactionFeePaid'; data: { who: AccountId32; actualFee: bigint; tip: bigint } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletAssetTxPaymentEvent =
  /**
   * A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,
   * has been paid by `who` in an asset `asset_id`.
   **/
  { name: 'AssetTxFeePaid'; data: { who: AccountId32; actualFee: bigint; tip: bigint; assetId?: number | undefined } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletAssetConversionTxPaymentEvent =
  /**
   * A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,
   * has been paid by `who` in an asset `asset_id`.
   **/
  | { name: 'AssetTxFeePaid'; data: { who: AccountId32; actualFee: bigint; tip: bigint; assetId: number } }
  /**
   * A swap of the refund in native currency back to asset failed.
   **/
  | { name: 'AssetRefundFailed'; data: { nativeAmountKept: bigint } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletElectionProviderMultiPhaseEvent =
  /**
   * A solution was stored with the given compute.
   *
   * The `origin` indicates the origin of the solution. If `origin` is `Some(AccountId)`,
   * the stored solution was submited in the signed phase by a miner with the `AccountId`.
   * Otherwise, the solution was stored either during the unsigned phase or by
   * `T::ForceOrigin`. The `bool` is `true` when a previous solution was ejected to make
   * room for this one.
   **/
  | {
      name: 'SolutionStored';
      data: {
        compute: PalletElectionProviderMultiPhaseElectionCompute;
        origin?: AccountId32 | undefined;
        prevEjected: boolean;
      };
    }
  /**
   * The election has been finalized, with the given computation and score.
   **/
  | {
      name: 'ElectionFinalized';
      data: { compute: PalletElectionProviderMultiPhaseElectionCompute; score: SpNposElectionsElectionScore };
    }
  /**
   * An election failed.
   *
   * Not much can be said about which computes failed in the process.
   **/
  | { name: 'ElectionFailed' }
  /**
   * An account has been rewarded for their signed submission being finalized.
   **/
  | { name: 'Rewarded'; data: { account: AccountId32; value: bigint } }
  /**
   * An account has been slashed for submitting an invalid signed submission.
   **/
  | { name: 'Slashed'; data: { account: AccountId32; value: bigint } }
  /**
   * There was a phase transition in a given round.
   **/
  | {
      name: 'PhaseTransitioned';
      data: { from: PalletElectionProviderMultiPhasePhase; to: PalletElectionProviderMultiPhasePhase; round: number };
    };

export type PalletElectionProviderMultiPhaseElectionCompute =
  | 'OnChain'
  | 'Signed'
  | 'Unsigned'
  | 'Fallback'
  | 'Emergency';

export type SpNposElectionsElectionScore = { minimalStake: bigint; sumStake: bigint; sumStakeSquared: bigint };

export type PalletElectionProviderMultiPhasePhase =
  | { tag: 'Off' }
  | { tag: 'Signed' }
  | { tag: 'Unsigned'; value: [boolean, number] }
  | { tag: 'Emergency' };

/**
 * The `Event` enum of this pallet
 **/
export type PalletStakingPalletEvent =
  /**
   * The era payout has been set; the first balance is the validator-payout; the second is
   * the remainder from the maximum amount of reward.
   **/
  | { name: 'EraPaid'; data: { eraIndex: number; validatorPayout: bigint; remainder: bigint } }
  /**
   * The nominator has been rewarded by this amount.
   **/
  | { name: 'Rewarded'; data: { stash: AccountId32; amount: bigint } }
  /**
   * A staker (validator or nominator) has been slashed by the given amount.
   **/
  | { name: 'Slashed'; data: { staker: AccountId32; amount: bigint } }
  /**
   * A slash for the given validator, for the given percentage of their stake, at the given
   * era as been reported.
   **/
  | { name: 'SlashReported'; data: { validator: AccountId32; fraction: Perbill; slashEra: number } }
  /**
   * An old slashing report from a prior era was discarded because it could
   * not be processed.
   **/
  | { name: 'OldSlashingReportDiscarded'; data: { sessionIndex: number } }
  /**
   * A new set of stakers was elected.
   **/
  | { name: 'StakersElected' }
  /**
   * An account has bonded this amount. \[stash, amount\]
   *
   * NOTE: This event is only emitted when funds are bonded via a dispatchable. Notably,
   * it will not be emitted for staking rewards when they are added to stake.
   **/
  | { name: 'Bonded'; data: { stash: AccountId32; amount: bigint } }
  /**
   * An account has unbonded this amount.
   **/
  | { name: 'Unbonded'; data: { stash: AccountId32; amount: bigint } }
  /**
   * An account has called `withdraw_unbonded` and removed unbonding chunks worth `Balance`
   * from the unlocking queue.
   **/
  | { name: 'Withdrawn'; data: { stash: AccountId32; amount: bigint } }
  /**
   * A nominator has been kicked from a validator.
   **/
  | { name: 'Kicked'; data: { nominator: AccountId32; stash: AccountId32 } }
  /**
   * The election failed. No new era is planned.
   **/
  | { name: 'StakingElectionFailed' }
  /**
   * An account has stopped participating as either a validator or nominator.
   **/
  | { name: 'Chilled'; data: { stash: AccountId32 } }
  /**
   * The stakers' rewards are getting paid.
   **/
  | { name: 'PayoutStarted'; data: { eraIndex: number; validatorStash: AccountId32 } }
  /**
   * A validator has set their preferences.
   **/
  | { name: 'ValidatorPrefsSet'; data: { stash: AccountId32; prefs: PalletStakingValidatorPrefs } }
  /**
   * Voters size limit reached.
   **/
  | { name: 'SnapshotVotersSizeExceeded'; data: { size: number } }
  /**
   * Targets size limit reached.
   **/
  | { name: 'SnapshotTargetsSizeExceeded'; data: { size: number } }
  /**
   * A new force era mode was set.
   **/
  | { name: 'ForceEra'; data: { mode: PalletStakingForcing } };

export type PalletStakingValidatorPrefs = { commission: Perbill; blocked: boolean };

export type PalletStakingForcing = 'NotForcing' | 'ForceNew' | 'ForceNone' | 'ForceAlways';

/**
 * The `Event` enum of this pallet
 **/
export type PalletSessionEvent =
  /**
   * New session has happened. Note that the argument is the session index, not the
   * block number as the type might suggest.
   **/
  { name: 'NewSession'; data: { sessionIndex: number } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletDemocracyEvent =
  /**
   * A motion has been proposed by a public account.
   **/
  | { name: 'Proposed'; data: { proposalIndex: number; deposit: bigint } }
  /**
   * A public proposal has been tabled for referendum vote.
   **/
  | { name: 'Tabled'; data: { proposalIndex: number; deposit: bigint } }
  /**
   * An external proposal has been tabled.
   **/
  | { name: 'ExternalTabled' }
  /**
   * A referendum has begun.
   **/
  | { name: 'Started'; data: { refIndex: number; threshold: PalletDemocracyVoteThreshold } }
  /**
   * A proposal has been approved by referendum.
   **/
  | { name: 'Passed'; data: { refIndex: number } }
  /**
   * A proposal has been rejected by referendum.
   **/
  | { name: 'NotPassed'; data: { refIndex: number } }
  /**
   * A referendum has been cancelled.
   **/
  | { name: 'Cancelled'; data: { refIndex: number } }
  /**
   * An account has delegated their vote to another account.
   **/
  | { name: 'Delegated'; data: { who: AccountId32; target: AccountId32 } }
  /**
   * An account has cancelled a previous delegation operation.
   **/
  | { name: 'Undelegated'; data: { account: AccountId32 } }
  /**
   * An external proposal has been vetoed.
   **/
  | { name: 'Vetoed'; data: { who: AccountId32; proposalHash: H256; until: number } }
  /**
   * A proposal_hash has been blacklisted permanently.
   **/
  | { name: 'Blacklisted'; data: { proposalHash: H256 } }
  /**
   * An account has voted in a referendum
   **/
  | { name: 'Voted'; data: { voter: AccountId32; refIndex: number; vote: PalletDemocracyVoteAccountVote } }
  /**
   * An account has secconded a proposal
   **/
  | { name: 'Seconded'; data: { seconder: AccountId32; propIndex: number } }
  /**
   * A proposal got canceled.
   **/
  | { name: 'ProposalCanceled'; data: { propIndex: number } }
  /**
   * Metadata for a proposal or a referendum has been set.
   **/
  | {
      name: 'MetadataSet';
      data: {
        /**
         * Metadata owner.
         **/
        owner: PalletDemocracyMetadataOwner;

        /**
         * Preimage hash.
         **/
        hash: H256;
      };
    }
  /**
   * Metadata for a proposal or a referendum has been cleared.
   **/
  | {
      name: 'MetadataCleared';
      data: {
        /**
         * Metadata owner.
         **/
        owner: PalletDemocracyMetadataOwner;

        /**
         * Preimage hash.
         **/
        hash: H256;
      };
    }
  /**
   * Metadata has been transferred to new owner.
   **/
  | {
      name: 'MetadataTransferred';
      data: {
        /**
         * Previous metadata owner.
         **/
        prevOwner: PalletDemocracyMetadataOwner;

        /**
         * New metadata owner.
         **/
        owner: PalletDemocracyMetadataOwner;

        /**
         * Preimage hash.
         **/
        hash: H256;
      };
    };

export type PalletDemocracyVoteThreshold = 'SuperMajorityApprove' | 'SuperMajorityAgainst' | 'SimpleMajority';

export type PalletDemocracyVoteAccountVote =
  | { tag: 'Standard'; value: { vote: PalletDemocracyVote; balance: bigint } }
  | { tag: 'Split'; value: { aye: bigint; nay: bigint } };

export type PalletDemocracyVote = number;

export type PalletDemocracyMetadataOwner =
  | { tag: 'External' }
  | { tag: 'Proposal'; value: number }
  | { tag: 'Referendum'; value: number };

/**
 * The `Event` enum of this pallet
 **/
export type PalletCollectiveEvent =
  /**
   * A motion (given hash) has been proposed (by given account) with a threshold (given
   * `MemberCount`).
   **/
  | { name: 'Proposed'; data: { account: AccountId32; proposalIndex: number; proposalHash: H256; threshold: number } }
  /**
   * A motion (given hash) has been voted on by given account, leaving
   * a tally (yes votes and no votes given respectively as `MemberCount`).
   **/
  | { name: 'Voted'; data: { account: AccountId32; proposalHash: H256; voted: boolean; yes: number; no: number } }
  /**
   * A motion was approved by the required threshold.
   **/
  | { name: 'Approved'; data: { proposalHash: H256 } }
  /**
   * A motion was not approved by the required threshold.
   **/
  | { name: 'Disapproved'; data: { proposalHash: H256 } }
  /**
   * A motion was executed; result will be `Ok` if it returned without error.
   **/
  | { name: 'Executed'; data: { proposalHash: H256; result: Result<[], DispatchError> } }
  /**
   * A single member did some action; result will be `Ok` if it returned without error.
   **/
  | { name: 'MemberExecuted'; data: { proposalHash: H256; result: Result<[], DispatchError> } }
  /**
   * A proposal was closed because its threshold was reached or after its duration was up.
   **/
  | { name: 'Closed'; data: { proposalHash: H256; yes: number; no: number } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletElectionsPhragmenEvent =
  /**
   * A new term with new_members. This indicates that enough candidates existed to run
   * the election, not that enough have has been elected. The inner value must be examined
   * for this purpose. A `NewTerm(\[\])` indicates that some candidates got their bond
   * slashed and none were elected, whilst `EmptyTerm` means that no candidates existed to
   * begin with.
   **/
  | { name: 'NewTerm'; data: { newMembers: Array<[AccountId32, bigint]> } }
  /**
   * No (or not enough) candidates existed for this round. This is different from
   * `NewTerm(\[\])`. See the description of `NewTerm`.
   **/
  | { name: 'EmptyTerm' }
  /**
   * Internal error happened while trying to perform election.
   **/
  | { name: 'ElectionError' }
  /**
   * A member has been removed. This should always be followed by either `NewTerm` or
   * `EmptyTerm`.
   **/
  | { name: 'MemberKicked'; data: { member: AccountId32 } }
  /**
   * Someone has renounced their candidacy.
   **/
  | { name: 'Renounced'; data: { candidate: AccountId32 } }
  /**
   * A candidate was slashed by amount due to failing to obtain a seat as member or
   * runner-up.
   *
   * Note that old members and runners-up are also candidates.
   **/
  | { name: 'CandidateSlashed'; data: { candidate: AccountId32; amount: bigint } }
  /**
   * A seat holder was slashed by amount by being forcefully removed from the set.
   **/
  | { name: 'SeatHolderSlashed'; data: { seatHolder: AccountId32; amount: bigint } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletMembershipEvent =
  /**
   * The given member was added; see the transaction for who.
   **/
  | 'MemberAdded'
  /**
   * The given member was removed; see the transaction for who.
   **/
  | 'MemberRemoved'
  /**
   * Two members were swapped; see the transaction for who.
   **/
  | 'MembersSwapped'
  /**
   * The membership was reset; see the transaction for who the new set is.
   **/
  | 'MembersReset'
  /**
   * One of the members' keys changed.
   **/
  | 'KeyChanged'
  /**
   * Phantom member, never used.
   **/
  | 'Dummy';

/**
 * The `Event` enum of this pallet
 **/
export type PalletGrandpaEvent =
  /**
   * New authority set has been applied.
   **/
  | { name: 'NewAuthorities'; data: { authoritySet: Array<[SpConsensusGrandpaAppPublic, bigint]> } }
  /**
   * Current authority set has been paused.
   **/
  | { name: 'Paused' }
  /**
   * Current authority set has been resumed.
   **/
  | { name: 'Resumed' };

export type SpConsensusGrandpaAppPublic = SpCoreEd25519Public;

export type SpCoreEd25519Public = FixedBytes<32>;

/**
 * The `Event` enum of this pallet
 **/
export type PalletTreasuryEvent =
  /**
   * New proposal.
   **/
  | { name: 'Proposed'; data: { proposalIndex: number } }
  /**
   * We have ended a spend period and will now allocate funds.
   **/
  | { name: 'Spending'; data: { budgetRemaining: bigint } }
  /**
   * Some funds have been allocated.
   **/
  | { name: 'Awarded'; data: { proposalIndex: number; award: bigint; account: AccountId32 } }
  /**
   * A proposal was rejected; funds were slashed.
   **/
  | { name: 'Rejected'; data: { proposalIndex: number; slashed: bigint } }
  /**
   * Some of our funds have been burnt.
   **/
  | { name: 'Burnt'; data: { burntFunds: bigint } }
  /**
   * Spending has finished; this is the amount that rolls over until next spend.
   **/
  | { name: 'Rollover'; data: { rolloverBalance: bigint } }
  /**
   * Some funds have been deposited.
   **/
  | { name: 'Deposit'; data: { value: bigint } }
  /**
   * A new spend proposal has been approved.
   **/
  | { name: 'SpendApproved'; data: { proposalIndex: number; amount: bigint; beneficiary: AccountId32 } }
  /**
   * The inactive funds of the pallet have been updated.
   **/
  | { name: 'UpdatedInactive'; data: { reactivated: bigint; deactivated: bigint } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletAssetRateEvent =
  | { name: 'AssetRateCreated'; data: { assetKind: number; rate: FixedU128 } }
  | { name: 'AssetRateRemoved'; data: { assetKind: number } }
  | { name: 'AssetRateUpdated'; data: { assetKind: number; old: FixedU128; new: FixedU128 } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletContractsEvent =
  /**
   * Contract deployed by address at the specified address.
   **/
  | { name: 'Instantiated'; data: { deployer: AccountId32; contract: AccountId32 } }
  /**
   * Contract has been removed.
   *
   * # Note
   *
   * The only way for a contract to be removed and emitting this event is by calling
   * `seal_terminate`.
   **/
  | {
      name: 'Terminated';
      data: {
        /**
         * The contract that was terminated.
         **/
        contract: AccountId32;

        /**
         * The account that received the contracts remaining balance
         **/
        beneficiary: AccountId32;
      };
    }
  /**
   * Code with the specified hash has been stored.
   **/
  | { name: 'CodeStored'; data: { codeHash: H256; depositHeld: bigint; uploader: AccountId32 } }
  /**
   * A custom event emitted by the contract.
   **/
  | {
      name: 'ContractEmitted';
      data: {
        /**
         * The contract that emitted the event.
         **/
        contract: AccountId32;

        /**
         * Data supplied by the contract. Metadata generated during contract compilation
         * is needed to decode it.
         **/
        data: Bytes;
      };
    }
  /**
   * A code with the specified hash was removed.
   **/
  | { name: 'CodeRemoved'; data: { codeHash: H256; depositReleased: bigint; remover: AccountId32 } }
  /**
   * A contract's code was updated.
   **/
  | {
      name: 'ContractCodeUpdated';
      data: {
        /**
         * The contract that has been updated.
         **/
        contract: AccountId32;

        /**
         * New code hash that was set for the contract.
         **/
        newCodeHash: H256;

        /**
         * Previous code hash of the contract.
         **/
        oldCodeHash: H256;
      };
    }
  /**
   * A contract was called either by a plain account or another contract.
   *
   * # Note
   *
   * Please keep in mind that like all events this is only emitted for successful
   * calls. This is because on failure all storage changes including events are
   * rolled back.
   **/
  | {
      name: 'Called';
      data: {
        /**
         * The caller of the `contract`.
         **/
        caller: PalletContractsOrigin;

        /**
         * The contract that was called.
         **/
        contract: AccountId32;
      };
    }
  /**
   * A contract delegate called a code hash.
   *
   * # Note
   *
   * Please keep in mind that like all events this is only emitted for successful
   * calls. This is because on failure all storage changes including events are
   * rolled back.
   **/
  | {
      name: 'DelegateCalled';
      data: {
        /**
         * The contract that performed the delegate call and hence in whose context
         * the `code_hash` is executed.
         **/
        contract: AccountId32;

        /**
         * The code hash that was delegate called.
         **/
        codeHash: H256;
      };
    }
  /**
   * Some funds have been transferred and held as storage deposit.
   **/
  | { name: 'StorageDepositTransferredAndHeld'; data: { from: AccountId32; to: AccountId32; amount: bigint } }
  /**
   * Some storage deposit funds have been transferred and released.
   **/
  | { name: 'StorageDepositTransferredAndReleased'; data: { from: AccountId32; to: AccountId32; amount: bigint } };

export type PalletContractsOrigin = { tag: 'Root' } | { tag: 'Signed'; value: AccountId32 };

export type KitchensinkRuntimeRuntime = {};

/**
 * The `Event` enum of this pallet
 **/
export type PalletSudoEvent =
  /**
   * A sudo just took place. \[result\]
   **/
  | { name: 'Sudid'; data: { sudoResult: Result<[], DispatchError> } }
  /**
   * The \[sudoer\] just switched identity; the old key is supplied if one existed.
   **/
  | { name: 'KeyChanged'; data: { oldSudoer?: AccountId32 | undefined } }
  /**
   * A sudo just took place. \[result\]
   **/
  | { name: 'SudoAsDone'; data: { sudoResult: Result<[], DispatchError> } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletImOnlineEvent =
  /**
   * A new heartbeat was received from `AuthorityId`.
   **/
  | { name: 'HeartbeatReceived'; data: { authorityId: PalletImOnlineSr25519AppSr25519Public } }
  /**
   * At the end of the session, no offence was committed.
   **/
  | { name: 'AllGood' }
  /**
   * At the end of the session, at least one validator was found to be offline.
   **/
  | { name: 'SomeOffline'; data: { offline: Array<[AccountId32, PalletStakingExposure]> } };

export type PalletImOnlineSr25519AppSr25519Public = SpCoreSr25519Public;

export type SpCoreSr25519Public = FixedBytes<32>;

export type PalletStakingExposure = { total: bigint; own: bigint; others: Array<PalletStakingIndividualExposure> };

export type PalletStakingIndividualExposure = { who: AccountId32; value: bigint };

/**
 * Events type.
 **/
export type PalletOffencesEvent =
  /**
   * There is an offence reported of the given `kind` happened at the `session_index` and
   * (kind-specific) time slot. This event is not deposited for duplicate slashes.
   * \[kind, timeslot\].
   **/
  { name: 'Offence'; data: { kind: FixedBytes<16>; timeslot: Bytes } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletIdentityEvent =
  /**
   * A name was set or reset (which will remove all judgements).
   **/
  | { name: 'IdentitySet'; data: { who: AccountId32 } }
  /**
   * A name was cleared, and the given balance returned.
   **/
  | { name: 'IdentityCleared'; data: { who: AccountId32; deposit: bigint } }
  /**
   * A name was removed and the given balance slashed.
   **/
  | { name: 'IdentityKilled'; data: { who: AccountId32; deposit: bigint } }
  /**
   * A judgement was asked from a registrar.
   **/
  | { name: 'JudgementRequested'; data: { who: AccountId32; registrarIndex: number } }
  /**
   * A judgement request was retracted.
   **/
  | { name: 'JudgementUnrequested'; data: { who: AccountId32; registrarIndex: number } }
  /**
   * A judgement was given by a registrar.
   **/
  | { name: 'JudgementGiven'; data: { target: AccountId32; registrarIndex: number } }
  /**
   * A registrar was added.
   **/
  | { name: 'RegistrarAdded'; data: { registrarIndex: number } }
  /**
   * A sub-identity was added to an identity and the deposit paid.
   **/
  | { name: 'SubIdentityAdded'; data: { sub: AccountId32; main: AccountId32; deposit: bigint } }
  /**
   * A sub-identity was removed from an identity and the deposit freed.
   **/
  | { name: 'SubIdentityRemoved'; data: { sub: AccountId32; main: AccountId32; deposit: bigint } }
  /**
   * A sub-identity was cleared, and the given deposit repatriated from the
   * main identity account to the sub-identity account.
   **/
  | { name: 'SubIdentityRevoked'; data: { sub: AccountId32; main: AccountId32; deposit: bigint } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletSocietyEvent =
  /**
   * The society is founded by the given identity.
   **/
  | { name: 'Founded'; data: { founder: AccountId32 } }
  /**
   * A membership bid just happened. The given account is the candidate's ID and their offer
   * is the second.
   **/
  | { name: 'Bid'; data: { candidateId: AccountId32; offer: bigint } }
  /**
   * A membership bid just happened by vouching. The given account is the candidate's ID and
   * their offer is the second. The vouching party is the third.
   **/
  | { name: 'Vouch'; data: { candidateId: AccountId32; offer: bigint; vouching: AccountId32 } }
  /**
   * A candidate was dropped (due to an excess of bids in the system).
   **/
  | { name: 'AutoUnbid'; data: { candidate: AccountId32 } }
  /**
   * A candidate was dropped (by their request).
   **/
  | { name: 'Unbid'; data: { candidate: AccountId32 } }
  /**
   * A candidate was dropped (by request of who vouched for them).
   **/
  | { name: 'Unvouch'; data: { candidate: AccountId32 } }
  /**
   * A group of candidates have been inducted. The batch's primary is the first value, the
   * batch in full is the second.
   **/
  | { name: 'Inducted'; data: { primary: AccountId32; candidates: Array<AccountId32> } }
  /**
   * A suspended member has been judged.
   **/
  | { name: 'SuspendedMemberJudgement'; data: { who: AccountId32; judged: boolean } }
  /**
   * A candidate has been suspended
   **/
  | { name: 'CandidateSuspended'; data: { candidate: AccountId32 } }
  /**
   * A member has been suspended
   **/
  | { name: 'MemberSuspended'; data: { member: AccountId32 } }
  /**
   * A member has been challenged
   **/
  | { name: 'Challenged'; data: { member: AccountId32 } }
  /**
   * A vote has been placed
   **/
  | { name: 'Vote'; data: { candidate: AccountId32; voter: AccountId32; vote: boolean } }
  /**
   * A vote has been placed for a defending member
   **/
  | { name: 'DefenderVote'; data: { voter: AccountId32; vote: boolean } }
  /**
   * A new set of \[params\] has been set for the group.
   **/
  | { name: 'NewParams'; data: { params: PalletSocietyGroupParams } }
  /**
   * Society is unfounded.
   **/
  | { name: 'Unfounded'; data: { founder: AccountId32 } }
  /**
   * Some funds were deposited into the society account.
   **/
  | { name: 'Deposit'; data: { value: bigint } }
  /**
   * A \[member\] got elevated to \[rank\].
   **/
  | { name: 'Elevated'; data: { member: AccountId32; rank: number } };

export type PalletSocietyGroupParams = {
  maxMembers: number;
  maxIntake: number;
  maxStrikes: number;
  candidateDeposit: bigint;
};

/**
 * Events type.
 **/
export type PalletRecoveryEvent =
  /**
   * A recovery process has been set up for an account.
   **/
  | { name: 'RecoveryCreated'; data: { account: AccountId32 } }
  /**
   * A recovery process has been initiated for lost account by rescuer account.
   **/
  | { name: 'RecoveryInitiated'; data: { lostAccount: AccountId32; rescuerAccount: AccountId32 } }
  /**
   * A recovery process for lost account by rescuer account has been vouched for by sender.
   **/
  | { name: 'RecoveryVouched'; data: { lostAccount: AccountId32; rescuerAccount: AccountId32; sender: AccountId32 } }
  /**
   * A recovery process for lost account by rescuer account has been closed.
   **/
  | { name: 'RecoveryClosed'; data: { lostAccount: AccountId32; rescuerAccount: AccountId32 } }
  /**
   * Lost account has been successfully recovered by rescuer account.
   **/
  | { name: 'AccountRecovered'; data: { lostAccount: AccountId32; rescuerAccount: AccountId32 } }
  /**
   * A recovery process has been removed for an account.
   **/
  | { name: 'RecoveryRemoved'; data: { lostAccount: AccountId32 } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletVestingEvent =
  /**
   * The amount vested has been updated. This could indicate a change in funds available.
   * The balance given is the amount which is left unvested (and thus locked).
   **/
  | { name: 'VestingUpdated'; data: { account: AccountId32; unvested: bigint } }
  /**
   * An \[account\] has become fully vested.
   **/
  | { name: 'VestingCompleted'; data: { account: AccountId32 } };

/**
 * Events type.
 **/
export type PalletSchedulerEvent =
  /**
   * Scheduled some task.
   **/
  | { name: 'Scheduled'; data: { when: number; index: number } }
  /**
   * Canceled some task.
   **/
  | { name: 'Canceled'; data: { when: number; index: number } }
  /**
   * Dispatched some task.
   **/
  | {
      name: 'Dispatched';
      data: { task: [number, number]; id?: FixedBytes<32> | undefined; result: Result<[], DispatchError> };
    }
  /**
   * The call for the provided hash was not found so the task has been aborted.
   **/
  | { name: 'CallUnavailable'; data: { task: [number, number]; id?: FixedBytes<32> | undefined } }
  /**
   * The given task was unable to be renewed since the agenda is full at that block.
   **/
  | { name: 'PeriodicFailed'; data: { task: [number, number]; id?: FixedBytes<32> | undefined } }
  /**
   * The given task can never be executed since it is overweight.
   **/
  | { name: 'PermanentlyOverweight'; data: { task: [number, number]; id?: FixedBytes<32> | undefined } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletGluttonEvent =
  /**
   * The pallet has been (re)initialized.
   **/
  | {
      name: 'PalletInitialized';
      data: {
        /**
         * Whether the pallet has been re-initialized.
         **/
        reinit: boolean;
      };
    }
  /**
   * The computation limit has been updated.
   **/
  | {
      name: 'ComputationLimitSet';
      data: {
        /**
         * The computation limit.
         **/
        compute: FixedU64;
      };
    }
  /**
   * The storage limit has been updated.
   **/
  | {
      name: 'StorageLimitSet';
      data: {
        /**
         * The storage limit.
         **/
        storage: FixedU64;
      };
    };

/**
 * The `Event` enum of this pallet
 **/
export type PalletPreimageEvent =
  /**
   * A preimage has been noted.
   **/
  | { name: 'Noted'; data: { hash: H256 } }
  /**
   * A preimage has been requested.
   **/
  | { name: 'Requested'; data: { hash: H256 } }
  /**
   * A preimage has ben cleared.
   **/
  | { name: 'Cleared'; data: { hash: H256 } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletProxyEvent =
  /**
   * A proxy was executed correctly, with the given.
   **/
  | { name: 'ProxyExecuted'; data: { result: Result<[], DispatchError> } }
  /**
   * A pure account has been created by new proxy with given
   * disambiguation index and proxy type.
   **/
  | {
      name: 'PureCreated';
      data: {
        pure: AccountId32;
        who: AccountId32;
        proxyType: KitchensinkRuntimeProxyType;
        disambiguationIndex: number;
      };
    }
  /**
   * An announcement was placed to make a call in the future.
   **/
  | { name: 'Announced'; data: { real: AccountId32; proxy: AccountId32; callHash: H256 } }
  /**
   * A proxy was added.
   **/
  | {
      name: 'ProxyAdded';
      data: { delegator: AccountId32; delegatee: AccountId32; proxyType: KitchensinkRuntimeProxyType; delay: number };
    }
  /**
   * A proxy was removed.
   **/
  | {
      name: 'ProxyRemoved';
      data: { delegator: AccountId32; delegatee: AccountId32; proxyType: KitchensinkRuntimeProxyType; delay: number };
    };

export type KitchensinkRuntimeProxyType = 'Any' | 'NonTransfer' | 'Governance' | 'Staking';

/**
 * The `Event` enum of this pallet
 **/
export type PalletMultisigEvent =
  /**
   * A new multisig operation has begun.
   **/
  | { name: 'NewMultisig'; data: { approving: AccountId32; multisig: AccountId32; callHash: FixedBytes<32> } }
  /**
   * A multisig operation has been approved by someone.
   **/
  | {
      name: 'MultisigApproval';
      data: {
        approving: AccountId32;
        timepoint: PalletMultisigTimepoint;
        multisig: AccountId32;
        callHash: FixedBytes<32>;
      };
    }
  /**
   * A multisig operation has been executed.
   **/
  | {
      name: 'MultisigExecuted';
      data: {
        approving: AccountId32;
        timepoint: PalletMultisigTimepoint;
        multisig: AccountId32;
        callHash: FixedBytes<32>;
        result: Result<[], DispatchError>;
      };
    }
  /**
   * A multisig operation has been cancelled.
   **/
  | {
      name: 'MultisigCancelled';
      data: {
        cancelling: AccountId32;
        timepoint: PalletMultisigTimepoint;
        multisig: AccountId32;
        callHash: FixedBytes<32>;
      };
    };

export type PalletMultisigTimepoint = { height: number; index: number };

/**
 * The `Event` enum of this pallet
 **/
export type PalletBountiesEvent =
  /**
   * New bounty proposal.
   **/
  | { name: 'BountyProposed'; data: { index: number } }
  /**
   * A bounty proposal was rejected; funds were slashed.
   **/
  | { name: 'BountyRejected'; data: { index: number; bond: bigint } }
  /**
   * A bounty proposal is funded and became active.
   **/
  | { name: 'BountyBecameActive'; data: { index: number } }
  /**
   * A bounty is awarded to a beneficiary.
   **/
  | { name: 'BountyAwarded'; data: { index: number; beneficiary: AccountId32 } }
  /**
   * A bounty is claimed by beneficiary.
   **/
  | { name: 'BountyClaimed'; data: { index: number; payout: bigint; beneficiary: AccountId32 } }
  /**
   * A bounty is cancelled.
   **/
  | { name: 'BountyCanceled'; data: { index: number } }
  /**
   * A bounty expiry is extended.
   **/
  | { name: 'BountyExtended'; data: { index: number } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletTipsEvent =
  /**
   * A new tip suggestion has been opened.
   **/
  | { name: 'NewTip'; data: { tipHash: H256 } }
  /**
   * A tip suggestion has reached threshold and is closing.
   **/
  | { name: 'TipClosing'; data: { tipHash: H256 } }
  /**
   * A tip suggestion has been closed.
   **/
  | { name: 'TipClosed'; data: { tipHash: H256; who: AccountId32; payout: bigint } }
  /**
   * A tip suggestion has been retracted.
   **/
  | { name: 'TipRetracted'; data: { tipHash: H256 } }
  /**
   * A tip suggestion has been slashed.
   **/
  | { name: 'TipSlashed'; data: { tipHash: H256; finder: AccountId32; deposit: bigint } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletAssetsEvent =
  /**
   * Some asset class was created.
   **/
  | { name: 'Created'; data: { assetId: number; creator: AccountId32; owner: AccountId32 } }
  /**
   * Some assets were issued.
   **/
  | { name: 'Issued'; data: { assetId: number; owner: AccountId32; amount: bigint } }
  /**
   * Some assets were transferred.
   **/
  | { name: 'Transferred'; data: { assetId: number; from: AccountId32; to: AccountId32; amount: bigint } }
  /**
   * Some assets were destroyed.
   **/
  | { name: 'Burned'; data: { assetId: number; owner: AccountId32; balance: bigint } }
  /**
   * The management team changed.
   **/
  | { name: 'TeamChanged'; data: { assetId: number; issuer: AccountId32; admin: AccountId32; freezer: AccountId32 } }
  /**
   * The owner changed.
   **/
  | { name: 'OwnerChanged'; data: { assetId: number; owner: AccountId32 } }
  /**
   * Some account `who` was frozen.
   **/
  | { name: 'Frozen'; data: { assetId: number; who: AccountId32 } }
  /**
   * Some account `who` was thawed.
   **/
  | { name: 'Thawed'; data: { assetId: number; who: AccountId32 } }
  /**
   * Some asset `asset_id` was frozen.
   **/
  | { name: 'AssetFrozen'; data: { assetId: number } }
  /**
   * Some asset `asset_id` was thawed.
   **/
  | { name: 'AssetThawed'; data: { assetId: number } }
  /**
   * Accounts were destroyed for given asset.
   **/
  | { name: 'AccountsDestroyed'; data: { assetId: number; accountsDestroyed: number; accountsRemaining: number } }
  /**
   * Approvals were destroyed for given asset.
   **/
  | { name: 'ApprovalsDestroyed'; data: { assetId: number; approvalsDestroyed: number; approvalsRemaining: number } }
  /**
   * An asset class is in the process of being destroyed.
   **/
  | { name: 'DestructionStarted'; data: { assetId: number } }
  /**
   * An asset class was destroyed.
   **/
  | { name: 'Destroyed'; data: { assetId: number } }
  /**
   * Some asset class was force-created.
   **/
  | { name: 'ForceCreated'; data: { assetId: number; owner: AccountId32 } }
  /**
   * New metadata has been set for an asset.
   **/
  | { name: 'MetadataSet'; data: { assetId: number; name: Bytes; symbol: Bytes; decimals: number; isFrozen: boolean } }
  /**
   * Metadata has been cleared for an asset.
   **/
  | { name: 'MetadataCleared'; data: { assetId: number } }
  /**
   * (Additional) funds have been approved for transfer to a destination account.
   **/
  | { name: 'ApprovedTransfer'; data: { assetId: number; source: AccountId32; delegate: AccountId32; amount: bigint } }
  /**
   * An approval for account `delegate` was cancelled by `owner`.
   **/
  | { name: 'ApprovalCancelled'; data: { assetId: number; owner: AccountId32; delegate: AccountId32 } }
  /**
   * An `amount` was transferred in its entirety from `owner` to `destination` by
   * the approved `delegate`.
   **/
  | {
      name: 'TransferredApproved';
      data: { assetId: number; owner: AccountId32; delegate: AccountId32; destination: AccountId32; amount: bigint };
    }
  /**
   * An asset has had its attributes changed by the `Force` origin.
   **/
  | { name: 'AssetStatusChanged'; data: { assetId: number } }
  /**
   * The min_balance of an asset has been updated by the asset owner.
   **/
  | { name: 'AssetMinBalanceChanged'; data: { assetId: number; newMinBalance: bigint } }
  /**
   * Some account `who` was created with a deposit from `depositor`.
   **/
  | { name: 'Touched'; data: { assetId: number; who: AccountId32; depositor: AccountId32 } }
  /**
   * Some account `who` was blocked.
   **/
  | { name: 'Blocked'; data: { assetId: number; who: AccountId32 } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletLotteryEvent =
  /**
   * A lottery has been started!
   **/
  | { name: 'LotteryStarted' }
  /**
   * A new set of calls have been set!
   **/
  | { name: 'CallsUpdated' }
  /**
   * A winner has been chosen!
   **/
  | { name: 'Winner'; data: { winner: AccountId32; lotteryBalance: bigint } }
  /**
   * A ticket has been bought!
   **/
  | { name: 'TicketBought'; data: { who: AccountId32; callIndex: [number, number] } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletNisEvent =
  /**
   * A bid was successfully placed.
   **/
  | { name: 'BidPlaced'; data: { who: AccountId32; amount: bigint; duration: number } }
  /**
   * A bid was successfully removed (before being accepted).
   **/
  | { name: 'BidRetracted'; data: { who: AccountId32; amount: bigint; duration: number } }
  /**
   * A bid was dropped from a queue because of another, more substantial, bid was present.
   **/
  | { name: 'BidDropped'; data: { who: AccountId32; amount: bigint; duration: number } }
  /**
   * A bid was accepted. The balance may not be released until expiry.
   **/
  | {
      name: 'Issued';
      data: {
        /**
         * The identity of the receipt.
         **/
        index: number;

        /**
         * The block number at which the receipt may be thawed.
         **/
        expiry: number;

        /**
         * The owner of the receipt.
         **/
        who: AccountId32;

        /**
         * The proportion of the effective total issuance which the receipt represents.
         **/
        proportion: Perquintill;

        /**
         * The amount of funds which were debited from the owner.
         **/
        amount: bigint;
      };
    }
  /**
   * An receipt has been (at least partially) thawed.
   **/
  | {
      name: 'Thawed';
      data: {
        /**
         * The identity of the receipt.
         **/
        index: number;

        /**
         * The owner.
         **/
        who: AccountId32;

        /**
         * The proportion of the effective total issuance by which the owner was debited.
         **/
        proportion: Perquintill;

        /**
         * The amount by which the owner was credited.
         **/
        amount: bigint;

        /**
         * If `true` then the receipt is done.
         **/
        dropped: boolean;
      };
    }
  /**
   * An automatic funding of the deficit was made.
   **/
  | { name: 'Funded'; data: { deficit: bigint } }
  /**
   * A receipt was transfered.
   **/
  | { name: 'Transferred'; data: { from: AccountId32; to: AccountId32; index: number } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletUniquesEvent =
  /**
   * A `collection` was created.
   **/
  | { name: 'Created'; data: { collection: number; creator: AccountId32; owner: AccountId32 } }
  /**
   * A `collection` was force-created.
   **/
  | { name: 'ForceCreated'; data: { collection: number; owner: AccountId32 } }
  /**
   * A `collection` was destroyed.
   **/
  | { name: 'Destroyed'; data: { collection: number } }
  /**
   * An `item` was issued.
   **/
  | { name: 'Issued'; data: { collection: number; item: number; owner: AccountId32 } }
  /**
   * An `item` was transferred.
   **/
  | { name: 'Transferred'; data: { collection: number; item: number; from: AccountId32; to: AccountId32 } }
  /**
   * An `item` was destroyed.
   **/
  | { name: 'Burned'; data: { collection: number; item: number; owner: AccountId32 } }
  /**
   * Some `item` was frozen.
   **/
  | { name: 'Frozen'; data: { collection: number; item: number } }
  /**
   * Some `item` was thawed.
   **/
  | { name: 'Thawed'; data: { collection: number; item: number } }
  /**
   * Some `collection` was frozen.
   **/
  | { name: 'CollectionFrozen'; data: { collection: number } }
  /**
   * Some `collection` was thawed.
   **/
  | { name: 'CollectionThawed'; data: { collection: number } }
  /**
   * The owner changed.
   **/
  | { name: 'OwnerChanged'; data: { collection: number; newOwner: AccountId32 } }
  /**
   * The management team changed.
   **/
  | { name: 'TeamChanged'; data: { collection: number; issuer: AccountId32; admin: AccountId32; freezer: AccountId32 } }
  /**
   * An `item` of a `collection` has been approved by the `owner` for transfer by
   * a `delegate`.
   **/
  | { name: 'ApprovedTransfer'; data: { collection: number; item: number; owner: AccountId32; delegate: AccountId32 } }
  /**
   * An approval for a `delegate` account to transfer the `item` of an item
   * `collection` was cancelled by its `owner`.
   **/
  | { name: 'ApprovalCancelled'; data: { collection: number; item: number; owner: AccountId32; delegate: AccountId32 } }
  /**
   * A `collection` has had its attributes changed by the `Force` origin.
   **/
  | { name: 'ItemStatusChanged'; data: { collection: number } }
  /**
   * New metadata has been set for a `collection`.
   **/
  | { name: 'CollectionMetadataSet'; data: { collection: number; data: Bytes; isFrozen: boolean } }
  /**
   * Metadata has been cleared for a `collection`.
   **/
  | { name: 'CollectionMetadataCleared'; data: { collection: number } }
  /**
   * New metadata has been set for an item.
   **/
  | { name: 'MetadataSet'; data: { collection: number; item: number; data: Bytes; isFrozen: boolean } }
  /**
   * Metadata has been cleared for an item.
   **/
  | { name: 'MetadataCleared'; data: { collection: number; item: number } }
  /**
   * Metadata has been cleared for an item.
   **/
  | { name: 'Redeposited'; data: { collection: number; successfulItems: Array<number> } }
  /**
   * New attribute metadata has been set for a `collection` or `item`.
   **/
  | { name: 'AttributeSet'; data: { collection: number; maybeItem?: number | undefined; key: Bytes; value: Bytes } }
  /**
   * Attribute metadata has been cleared for a `collection` or `item`.
   **/
  | { name: 'AttributeCleared'; data: { collection: number; maybeItem?: number | undefined; key: Bytes } }
  /**
   * Ownership acceptance has changed for an account.
   **/
  | { name: 'OwnershipAcceptanceChanged'; data: { who: AccountId32; maybeCollection?: number | undefined } }
  /**
   * Max supply has been set for a collection.
   **/
  | { name: 'CollectionMaxSupplySet'; data: { collection: number; maxSupply: number } }
  /**
   * The price was set for the instance.
   **/
  | {
      name: 'ItemPriceSet';
      data: { collection: number; item: number; price: bigint; whitelistedBuyer?: AccountId32 | undefined };
    }
  /**
   * The price for the instance was removed.
   **/
  | { name: 'ItemPriceRemoved'; data: { collection: number; item: number } }
  /**
   * An item was bought.
   **/
  | {
      name: 'ItemBought';
      data: { collection: number; item: number; price: bigint; seller: AccountId32; buyer: AccountId32 };
    };

/**
 * The `Event` enum of this pallet
 **/
export type PalletNftsEvent =
  /**
   * A `collection` was created.
   **/
  | { name: 'Created'; data: { collection: number; creator: AccountId32; owner: AccountId32 } }
  /**
   * A `collection` was force-created.
   **/
  | { name: 'ForceCreated'; data: { collection: number; owner: AccountId32 } }
  /**
   * A `collection` was destroyed.
   **/
  | { name: 'Destroyed'; data: { collection: number } }
  /**
   * An `item` was issued.
   **/
  | { name: 'Issued'; data: { collection: number; item: number; owner: AccountId32 } }
  /**
   * An `item` was transferred.
   **/
  | { name: 'Transferred'; data: { collection: number; item: number; from: AccountId32; to: AccountId32 } }
  /**
   * An `item` was destroyed.
   **/
  | { name: 'Burned'; data: { collection: number; item: number; owner: AccountId32 } }
  /**
   * An `item` became non-transferable.
   **/
  | { name: 'ItemTransferLocked'; data: { collection: number; item: number } }
  /**
   * An `item` became transferable.
   **/
  | { name: 'ItemTransferUnlocked'; data: { collection: number; item: number } }
  /**
   * `item` metadata or attributes were locked.
   **/
  | {
      name: 'ItemPropertiesLocked';
      data: { collection: number; item: number; lockMetadata: boolean; lockAttributes: boolean };
    }
  /**
   * Some `collection` was locked.
   **/
  | { name: 'CollectionLocked'; data: { collection: number } }
  /**
   * The owner changed.
   **/
  | { name: 'OwnerChanged'; data: { collection: number; newOwner: AccountId32 } }
  /**
   * The management team changed.
   **/
  | {
      name: 'TeamChanged';
      data: {
        collection: number;
        issuer?: AccountId32 | undefined;
        admin?: AccountId32 | undefined;
        freezer?: AccountId32 | undefined;
      };
    }
  /**
   * An `item` of a `collection` has been approved by the `owner` for transfer by
   * a `delegate`.
   **/
  | {
      name: 'TransferApproved';
      data: {
        collection: number;
        item: number;
        owner: AccountId32;
        delegate: AccountId32;
        deadline?: number | undefined;
      };
    }
  /**
   * An approval for a `delegate` account to transfer the `item` of an item
   * `collection` was cancelled by its `owner`.
   **/
  | { name: 'ApprovalCancelled'; data: { collection: number; item: number; owner: AccountId32; delegate: AccountId32 } }
  /**
   * All approvals of an item got cancelled.
   **/
  | { name: 'AllApprovalsCancelled'; data: { collection: number; item: number; owner: AccountId32 } }
  /**
   * A `collection` has had its config changed by the `Force` origin.
   **/
  | { name: 'CollectionConfigChanged'; data: { collection: number } }
  /**
   * New metadata has been set for a `collection`.
   **/
  | { name: 'CollectionMetadataSet'; data: { collection: number; data: Bytes } }
  /**
   * Metadata has been cleared for a `collection`.
   **/
  | { name: 'CollectionMetadataCleared'; data: { collection: number } }
  /**
   * New metadata has been set for an item.
   **/
  | { name: 'ItemMetadataSet'; data: { collection: number; item: number; data: Bytes } }
  /**
   * Metadata has been cleared for an item.
   **/
  | { name: 'ItemMetadataCleared'; data: { collection: number; item: number } }
  /**
   * The deposit for a set of `item`s within a `collection` has been updated.
   **/
  | { name: 'Redeposited'; data: { collection: number; successfulItems: Array<number> } }
  /**
   * New attribute metadata has been set for a `collection` or `item`.
   **/
  | {
      name: 'AttributeSet';
      data: {
        collection: number;
        maybeItem?: number | undefined;
        key: Bytes;
        value: Bytes;
        namespace: PalletNftsAttributeNamespace;
      };
    }
  /**
   * Attribute metadata has been cleared for a `collection` or `item`.
   **/
  | {
      name: 'AttributeCleared';
      data: { collection: number; maybeItem?: number | undefined; key: Bytes; namespace: PalletNftsAttributeNamespace };
    }
  /**
   * A new approval to modify item attributes was added.
   **/
  | { name: 'ItemAttributesApprovalAdded'; data: { collection: number; item: number; delegate: AccountId32 } }
  /**
   * A new approval to modify item attributes was removed.
   **/
  | { name: 'ItemAttributesApprovalRemoved'; data: { collection: number; item: number; delegate: AccountId32 } }
  /**
   * Ownership acceptance has changed for an account.
   **/
  | { name: 'OwnershipAcceptanceChanged'; data: { who: AccountId32; maybeCollection?: number | undefined } }
  /**
   * Max supply has been set for a collection.
   **/
  | { name: 'CollectionMaxSupplySet'; data: { collection: number; maxSupply: number } }
  /**
   * Mint settings for a collection had changed.
   **/
  | { name: 'CollectionMintSettingsUpdated'; data: { collection: number } }
  /**
   * Event gets emitted when the `NextCollectionId` gets incremented.
   **/
  | { name: 'NextCollectionIdIncremented'; data: { nextId?: number | undefined } }
  /**
   * The price was set for the item.
   **/
  | {
      name: 'ItemPriceSet';
      data: { collection: number; item: number; price: bigint; whitelistedBuyer?: AccountId32 | undefined };
    }
  /**
   * The price for the item was removed.
   **/
  | { name: 'ItemPriceRemoved'; data: { collection: number; item: number } }
  /**
   * An item was bought.
   **/
  | {
      name: 'ItemBought';
      data: { collection: number; item: number; price: bigint; seller: AccountId32; buyer: AccountId32 };
    }
  /**
   * A tip was sent.
   **/
  | {
      name: 'TipSent';
      data: { collection: number; item: number; sender: AccountId32; receiver: AccountId32; amount: bigint };
    }
  /**
   * An `item` swap intent was created.
   **/
  | {
      name: 'SwapCreated';
      data: {
        offeredCollection: number;
        offeredItem: number;
        desiredCollection: number;
        desiredItem?: number | undefined;
        price?: PalletNftsPriceWithDirection | undefined;
        deadline: number;
      };
    }
  /**
   * The swap was cancelled.
   **/
  | {
      name: 'SwapCancelled';
      data: {
        offeredCollection: number;
        offeredItem: number;
        desiredCollection: number;
        desiredItem?: number | undefined;
        price?: PalletNftsPriceWithDirection | undefined;
        deadline: number;
      };
    }
  /**
   * The swap has been claimed.
   **/
  | {
      name: 'SwapClaimed';
      data: {
        sentCollection: number;
        sentItem: number;
        sentItemOwner: AccountId32;
        receivedCollection: number;
        receivedItem: number;
        receivedItemOwner: AccountId32;
        price?: PalletNftsPriceWithDirection | undefined;
        deadline: number;
      };
    }
  /**
   * New attributes have been set for an `item` of the `collection`.
   **/
  | {
      name: 'PreSignedAttributesSet';
      data: { collection: number; item: number; namespace: PalletNftsAttributeNamespace };
    }
  /**
   * A new attribute in the `Pallet` namespace was set for the `collection` or an `item`
   * within that `collection`.
   **/
  | {
      name: 'PalletAttributeSet';
      data: { collection: number; item?: number | undefined; attribute: PalletNftsPalletAttributes; value: Bytes };
    };

export type PalletNftsAttributeNamespace =
  | { tag: 'Pallet' }
  | { tag: 'CollectionOwner' }
  | { tag: 'ItemOwner' }
  | { tag: 'Account'; value: AccountId32 };

export type PalletNftsPriceWithDirection = { amount: bigint; direction: PalletNftsPriceDirection };

export type PalletNftsPriceDirection = 'Send' | 'Receive';

export type PalletNftsPalletAttributes = { tag: 'UsedToClaim'; value: number } | { tag: 'TransferDisabled' };

/**
 * The `Event` enum of this pallet
 **/
export type PalletNftFractionalizationEvent =
  /**
   * An NFT was successfully fractionalized.
   **/
  | {
      name: 'NftFractionalized';
      data: { nftCollection: number; nft: number; fractions: bigint; asset: number; beneficiary: AccountId32 };
    }
  /**
   * An NFT was successfully returned back.
   **/
  | { name: 'NftUnified'; data: { nftCollection: number; nft: number; asset: number; beneficiary: AccountId32 } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletSalaryEvent =
  /**
   * A member is inducted into the payroll.
   **/
  | { name: 'Inducted'; data: { who: AccountId32 } }
  /**
   * A member registered for a payout.
   **/
  | { name: 'Registered'; data: { who: AccountId32; amount: bigint } }
  /**
   * A payment happened.
   **/
  | { name: 'Paid'; data: { who: AccountId32; beneficiary: AccountId32; amount: bigint; id: [] } }
  /**
   * The next cycle begins.
   **/
  | { name: 'CycleStarted'; data: { index: number } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletCoreFellowshipEvent =
  /**
   * Parameters for the pallet have changed.
   **/
  | { name: 'ParamsChanged'; data: { params: PalletCoreFellowshipParamsType } }
  /**
   * Member activity flag has been set.
   **/
  | { name: 'ActiveChanged'; data: { who: AccountId32; isActive: boolean } }
  /**
   * Member has begun being tracked in this pallet.
   **/
  | { name: 'Inducted'; data: { who: AccountId32 } }
  /**
   * Member has been removed from being tracked in this pallet (i.e. because rank is now
   * zero).
   **/
  | { name: 'Offboarded'; data: { who: AccountId32 } }
  /**
   * Member has been promoted to the given rank.
   **/
  | { name: 'Promoted'; data: { who: AccountId32; toRank: number } }
  /**
   * Member has been demoted to the given (non-zero) rank.
   **/
  | { name: 'Demoted'; data: { who: AccountId32; toRank: number } }
  /**
   * Member has been proven at their current rank, postponing auto-demotion.
   **/
  | { name: 'Proven'; data: { who: AccountId32; atRank: number } }
  /**
   * Member has stated evidence of their efforts their request for rank.
   **/
  | { name: 'Requested'; data: { who: AccountId32; wish: PalletCoreFellowshipWish } }
  /**
   * Some submitted evidence was judged and removed. There may or may not have been a change
   * to the rank, but in any case, `last_proof` is reset.
   **/
  | {
      name: 'EvidenceJudged';
      data: {
        /**
         * The member/candidate.
         **/
        who: AccountId32;

        /**
         * The desired outcome for which the evidence was presented.
         **/
        wish: PalletCoreFellowshipWish;

        /**
         * The evidence of efforts.
         **/
        evidence: Bytes;

        /**
         * The old rank, prior to this change.
         **/
        oldRank: number;

        /**
         * New rank. If `None` then candidate record was removed entirely.
         **/
        newRank?: number | undefined;
      };
    }
  /**
   * Pre-ranked account has been inducted at their current rank.
   **/
  | { name: 'Imported'; data: { who: AccountId32; rank: number } };

export type PalletCoreFellowshipParamsType = {
  activeSalary: FixedArray<bigint, 9>;
  passiveSalary: FixedArray<bigint, 9>;
  demotionPeriod: FixedArray<number, 9>;
  minPromotionPeriod: FixedArray<number, 9>;
  offboardTimeout: number;
};

export type PalletCoreFellowshipWish = 'Retention' | 'Promotion';

/**
 * The `Event` enum of this pallet
 **/
export type PalletTransactionStorageEvent =
  /**
   * Stored data under specified index.
   **/
  | { name: 'Stored'; data: { index: number } }
  /**
   * Renewed data under specified index.
   **/
  | { name: 'Renewed'; data: { index: number } }
  /**
   * Storage proof was successfully checked.
   **/
  | { name: 'ProofChecked' };

/**
 * The `Event` enum of this pallet
 **/
export type PalletBagsListEvent =
  /**
   * Moved an account from one bag to another.
   **/
  | { name: 'Rebagged'; data: { who: AccountId32; from: bigint; to: bigint } }
  /**
   * Updated the score of some account to the given amount.
   **/
  | { name: 'ScoreUpdated'; data: { who: AccountId32; newScore: bigint } };

/**
 * Inner events of this pallet.
 **/
export type PalletStateTrieMigrationEvent =
  /**
   * Given number of `(top, child)` keys were migrated respectively, with the given
   * `compute`.
   **/
  | { name: 'Migrated'; data: { top: number; child: number; compute: PalletStateTrieMigrationMigrationCompute } }
  /**
   * Some account got slashed by the given amount.
   **/
  | { name: 'Slashed'; data: { who: AccountId32; amount: bigint } }
  /**
   * The auto migration task finished.
   **/
  | { name: 'AutoMigrationFinished' }
  /**
   * Migration got halted due to an error or miss-configuration.
   **/
  | { name: 'Halted'; data: { error: PalletStateTrieMigrationError } };

export type PalletStateTrieMigrationMigrationCompute = 'Signed' | 'Auto';

/**
 * The `Error` enum of this pallet.
 **/
export type PalletStateTrieMigrationError =
  /**
   * Max signed limits not respected.
   **/
  | 'MaxSignedLimits'
  /**
   * A key was longer than the configured maximum.
   *
   * This means that the migration halted at the current [`Progress`] and
   * can be resumed with a larger [`crate::Config::MaxKeyLen`] value.
   * Retrying with the same [`crate::Config::MaxKeyLen`] value will not work.
   * The value should only be increased to avoid a storage migration for the currently
   * stored [`crate::Progress::LastKey`].
   **/
  | 'KeyTooLong'
  /**
   * submitter does not have enough funds.
   **/
  | 'NotEnoughFunds'
  /**
   * Bad witness data provided.
   **/
  | 'BadWitness'
  /**
   * Signed migration is not allowed because the maximum limit is not set yet.
   **/
  | 'SignedMigrationNotAllowed'
  /**
   * Bad child root provided.
   **/
  | 'BadChildRoot';

/**
 * The `Event` enum of this pallet
 **/
export type PalletChildBountiesEvent =
  /**
   * A child-bounty is added.
   **/
  | { name: 'Added'; data: { index: number; childIndex: number } }
  /**
   * A child-bounty is awarded to a beneficiary.
   **/
  | { name: 'Awarded'; data: { index: number; childIndex: number; beneficiary: AccountId32 } }
  /**
   * A child-bounty is claimed by beneficiary.
   **/
  | { name: 'Claimed'; data: { index: number; childIndex: number; payout: bigint; beneficiary: AccountId32 } }
  /**
   * A child-bounty is cancelled.
   **/
  | { name: 'Canceled'; data: { index: number; childIndex: number } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletReferendaEvent =
  /**
   * A referendum has been submitted.
   **/
  | {
      name: 'Submitted';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The track (and by extension proposal dispatch origin) of this referendum.
         **/
        track: number;

        /**
         * The proposal for the referendum.
         **/
        proposal: FrameSupportPreimagesBounded;
      };
    }
  /**
   * The decision deposit has been placed.
   **/
  | {
      name: 'DecisionDepositPlaced';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The account who placed the deposit.
         **/
        who: AccountId32;

        /**
         * The amount placed by the account.
         **/
        amount: bigint;
      };
    }
  /**
   * The decision deposit has been refunded.
   **/
  | {
      name: 'DecisionDepositRefunded';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The account who placed the deposit.
         **/
        who: AccountId32;

        /**
         * The amount placed by the account.
         **/
        amount: bigint;
      };
    }
  /**
   * A deposit has been slashaed.
   **/
  | {
      name: 'DepositSlashed';
      data: {
        /**
         * The account who placed the deposit.
         **/
        who: AccountId32;

        /**
         * The amount placed by the account.
         **/
        amount: bigint;
      };
    }
  /**
   * A referendum has moved into the deciding phase.
   **/
  | {
      name: 'DecisionStarted';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The track (and by extension proposal dispatch origin) of this referendum.
         **/
        track: number;

        /**
         * The proposal for the referendum.
         **/
        proposal: FrameSupportPreimagesBounded;

        /**
         * The current tally of votes in this referendum.
         **/
        tally: PalletConvictionVotingTally;
      };
    }
  | {
      name: 'ConfirmStarted';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;
      };
    }
  | {
      name: 'ConfirmAborted';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;
      };
    }
  /**
   * A referendum has ended its confirmation phase and is ready for approval.
   **/
  | {
      name: 'Confirmed';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The final tally of votes in this referendum.
         **/
        tally: PalletConvictionVotingTally;
      };
    }
  /**
   * A referendum has been approved and its proposal has been scheduled.
   **/
  | {
      name: 'Approved';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;
      };
    }
  /**
   * A proposal has been rejected by referendum.
   **/
  | {
      name: 'Rejected';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The final tally of votes in this referendum.
         **/
        tally: PalletConvictionVotingTally;
      };
    }
  /**
   * A referendum has been timed out without being decided.
   **/
  | {
      name: 'TimedOut';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The final tally of votes in this referendum.
         **/
        tally: PalletConvictionVotingTally;
      };
    }
  /**
   * A referendum has been cancelled.
   **/
  | {
      name: 'Cancelled';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The final tally of votes in this referendum.
         **/
        tally: PalletConvictionVotingTally;
      };
    }
  /**
   * A referendum has been killed.
   **/
  | {
      name: 'Killed';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The final tally of votes in this referendum.
         **/
        tally: PalletConvictionVotingTally;
      };
    }
  /**
   * The submission deposit has been refunded.
   **/
  | {
      name: 'SubmissionDepositRefunded';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The account who placed the deposit.
         **/
        who: AccountId32;

        /**
         * The amount placed by the account.
         **/
        amount: bigint;
      };
    }
  /**
   * Metadata for a referendum has been set.
   **/
  | {
      name: 'MetadataSet';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * Preimage hash.
         **/
        hash: H256;
      };
    }
  /**
   * Metadata for a referendum has been cleared.
   **/
  | {
      name: 'MetadataCleared';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * Preimage hash.
         **/
        hash: H256;
      };
    };

export type FrameSupportPreimagesBounded =
  | { tag: 'Legacy'; value: { hash: H256 } }
  | { tag: 'Inline'; value: Bytes }
  | { tag: 'Lookup'; value: { hash: H256; len: number } };

export type KitchensinkRuntimeRuntimeCall =
  | { pallet: 'System'; palletCall: FrameSystemCall }
  | { pallet: 'Utility'; palletCall: PalletUtilityCall }
  | { pallet: 'Babe'; palletCall: PalletBabeCall }
  | { pallet: 'Timestamp'; palletCall: PalletTimestampCall }
  | { pallet: 'Indices'; palletCall: PalletIndicesCall }
  | { pallet: 'Balances'; palletCall: PalletBalancesCall }
  | { pallet: 'ElectionProviderMultiPhase'; palletCall: PalletElectionProviderMultiPhaseCall }
  | { pallet: 'Staking'; palletCall: PalletStakingPalletCall }
  | { pallet: 'Session'; palletCall: PalletSessionCall }
  | { pallet: 'Democracy'; palletCall: PalletDemocracyCall }
  | { pallet: 'Council'; palletCall: PalletCollectiveCall }
  | { pallet: 'TechnicalCommittee'; palletCall: PalletCollectiveCall }
  | { pallet: 'Elections'; palletCall: PalletElectionsPhragmenCall }
  | { pallet: 'TechnicalMembership'; palletCall: PalletMembershipCall }
  | { pallet: 'Grandpa'; palletCall: PalletGrandpaCall }
  | { pallet: 'Treasury'; palletCall: PalletTreasuryCall }
  | { pallet: 'AssetRate'; palletCall: PalletAssetRateCall }
  | { pallet: 'Contracts'; palletCall: PalletContractsCall }
  | { pallet: 'Sudo'; palletCall: PalletSudoCall }
  | { pallet: 'ImOnline'; palletCall: PalletImOnlineCall }
  | { pallet: 'Identity'; palletCall: PalletIdentityCall }
  | { pallet: 'Society'; palletCall: PalletSocietyCall }
  | { pallet: 'Recovery'; palletCall: PalletRecoveryCall }
  | { pallet: 'Vesting'; palletCall: PalletVestingCall }
  | { pallet: 'Scheduler'; palletCall: PalletSchedulerCall }
  | { pallet: 'Glutton'; palletCall: PalletGluttonCall }
  | { pallet: 'Preimage'; palletCall: PalletPreimageCall }
  | { pallet: 'Proxy'; palletCall: PalletProxyCall }
  | { pallet: 'Multisig'; palletCall: PalletMultisigCall }
  | { pallet: 'Bounties'; palletCall: PalletBountiesCall }
  | { pallet: 'Tips'; palletCall: PalletTipsCall }
  | { pallet: 'Assets'; palletCall: PalletAssetsCall }
  | { pallet: 'PoolAssets'; palletCall: PalletAssetsCall }
  | { pallet: 'Lottery'; palletCall: PalletLotteryCall }
  | { pallet: 'Nis'; palletCall: PalletNisCall }
  | { pallet: 'Uniques'; palletCall: PalletUniquesCall }
  | { pallet: 'Nfts'; palletCall: PalletNftsCall }
  | { pallet: 'NftFractionalization'; palletCall: PalletNftFractionalizationCall }
  | { pallet: 'Salary'; palletCall: PalletSalaryCall }
  | { pallet: 'CoreFellowship'; palletCall: PalletCoreFellowshipCall }
  | { pallet: 'TransactionStorage'; palletCall: PalletTransactionStorageCall }
  | { pallet: 'VoterList'; palletCall: PalletBagsListCall }
  | { pallet: 'StateTrieMigration'; palletCall: PalletStateTrieMigrationCall }
  | { pallet: 'ChildBounties'; palletCall: PalletChildBountiesCall }
  | { pallet: 'Referenda'; palletCall: PalletReferendaCall }
  | { pallet: 'Remark'; palletCall: PalletRemarkCall }
  | { pallet: 'RootTesting'; palletCall: PalletRootTestingCall }
  | { pallet: 'ConvictionVoting'; palletCall: PalletConvictionVotingCall }
  | { pallet: 'Whitelist'; palletCall: PalletWhitelistCall }
  | { pallet: 'AllianceMotion'; palletCall: PalletCollectiveCall }
  | { pallet: 'Alliance'; palletCall: PalletAllianceCall }
  | { pallet: 'NominationPools'; palletCall: PalletNominationPoolsCall }
  | { pallet: 'RankedPolls'; palletCall: PalletReferendaCall }
  | { pallet: 'RankedCollective'; palletCall: PalletRankedCollectiveCall }
  | { pallet: 'AssetConversion'; palletCall: PalletAssetConversionCall }
  | { pallet: 'FastUnstake'; palletCall: PalletFastUnstakeCall }
  | { pallet: 'MessageQueue'; palletCall: PalletMessageQueueCall }
  | { pallet: 'Pov'; palletCall: FrameBenchmarkingPalletPovCall }
  | { pallet: 'TxPause'; palletCall: PalletTxPauseCall }
  | { pallet: 'SafeMode'; palletCall: PalletSafeModeCall }
  | { pallet: 'Broker'; palletCall: PalletBrokerCall };

export type KitchensinkRuntimeRuntimeCallLike =
  | { pallet: 'System'; palletCall: FrameSystemCallLike }
  | { pallet: 'Utility'; palletCall: PalletUtilityCallLike }
  | { pallet: 'Babe'; palletCall: PalletBabeCallLike }
  | { pallet: 'Timestamp'; palletCall: PalletTimestampCallLike }
  | { pallet: 'Indices'; palletCall: PalletIndicesCallLike }
  | { pallet: 'Balances'; palletCall: PalletBalancesCallLike }
  | { pallet: 'ElectionProviderMultiPhase'; palletCall: PalletElectionProviderMultiPhaseCallLike }
  | { pallet: 'Staking'; palletCall: PalletStakingPalletCallLike }
  | { pallet: 'Session'; palletCall: PalletSessionCallLike }
  | { pallet: 'Democracy'; palletCall: PalletDemocracyCallLike }
  | { pallet: 'Council'; palletCall: PalletCollectiveCallLike }
  | { pallet: 'TechnicalCommittee'; palletCall: PalletCollectiveCallLike }
  | { pallet: 'Elections'; palletCall: PalletElectionsPhragmenCallLike }
  | { pallet: 'TechnicalMembership'; palletCall: PalletMembershipCallLike }
  | { pallet: 'Grandpa'; palletCall: PalletGrandpaCallLike }
  | { pallet: 'Treasury'; palletCall: PalletTreasuryCallLike }
  | { pallet: 'AssetRate'; palletCall: PalletAssetRateCallLike }
  | { pallet: 'Contracts'; palletCall: PalletContractsCallLike }
  | { pallet: 'Sudo'; palletCall: PalletSudoCallLike }
  | { pallet: 'ImOnline'; palletCall: PalletImOnlineCallLike }
  | { pallet: 'Identity'; palletCall: PalletIdentityCallLike }
  | { pallet: 'Society'; palletCall: PalletSocietyCallLike }
  | { pallet: 'Recovery'; palletCall: PalletRecoveryCallLike }
  | { pallet: 'Vesting'; palletCall: PalletVestingCallLike }
  | { pallet: 'Scheduler'; palletCall: PalletSchedulerCallLike }
  | { pallet: 'Glutton'; palletCall: PalletGluttonCallLike }
  | { pallet: 'Preimage'; palletCall: PalletPreimageCallLike }
  | { pallet: 'Proxy'; palletCall: PalletProxyCallLike }
  | { pallet: 'Multisig'; palletCall: PalletMultisigCallLike }
  | { pallet: 'Bounties'; palletCall: PalletBountiesCallLike }
  | { pallet: 'Tips'; palletCall: PalletTipsCallLike }
  | { pallet: 'Assets'; palletCall: PalletAssetsCallLike }
  | { pallet: 'PoolAssets'; palletCall: PalletAssetsCallLike }
  | { pallet: 'Lottery'; palletCall: PalletLotteryCallLike }
  | { pallet: 'Nis'; palletCall: PalletNisCallLike }
  | { pallet: 'Uniques'; palletCall: PalletUniquesCallLike }
  | { pallet: 'Nfts'; palletCall: PalletNftsCallLike }
  | { pallet: 'NftFractionalization'; palletCall: PalletNftFractionalizationCallLike }
  | { pallet: 'Salary'; palletCall: PalletSalaryCallLike }
  | { pallet: 'CoreFellowship'; palletCall: PalletCoreFellowshipCallLike }
  | { pallet: 'TransactionStorage'; palletCall: PalletTransactionStorageCallLike }
  | { pallet: 'VoterList'; palletCall: PalletBagsListCallLike }
  | { pallet: 'StateTrieMigration'; palletCall: PalletStateTrieMigrationCallLike }
  | { pallet: 'ChildBounties'; palletCall: PalletChildBountiesCallLike }
  | { pallet: 'Referenda'; palletCall: PalletReferendaCallLike }
  | { pallet: 'Remark'; palletCall: PalletRemarkCallLike }
  | { pallet: 'RootTesting'; palletCall: PalletRootTestingCallLike }
  | { pallet: 'ConvictionVoting'; palletCall: PalletConvictionVotingCallLike }
  | { pallet: 'Whitelist'; palletCall: PalletWhitelistCallLike }
  | { pallet: 'AllianceMotion'; palletCall: PalletCollectiveCallLike }
  | { pallet: 'Alliance'; palletCall: PalletAllianceCallLike }
  | { pallet: 'NominationPools'; palletCall: PalletNominationPoolsCallLike }
  | { pallet: 'RankedPolls'; palletCall: PalletReferendaCallLike }
  | { pallet: 'RankedCollective'; palletCall: PalletRankedCollectiveCallLike }
  | { pallet: 'AssetConversion'; palletCall: PalletAssetConversionCallLike }
  | { pallet: 'FastUnstake'; palletCall: PalletFastUnstakeCallLike }
  | { pallet: 'MessageQueue'; palletCall: PalletMessageQueueCallLike }
  | { pallet: 'Pov'; palletCall: FrameBenchmarkingPalletPovCallLike }
  | { pallet: 'TxPause'; palletCall: PalletTxPauseCallLike }
  | { pallet: 'SafeMode'; palletCall: PalletSafeModeCallLike }
  | { pallet: 'Broker'; palletCall: PalletBrokerCallLike };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type FrameSystemCall =
  /**
   * See [`Pallet::remark`].
   **/
  | { name: 'Remark'; params: { remark: Bytes } }
  /**
   * See [`Pallet::set_heap_pages`].
   **/
  | { name: 'SetHeapPages'; params: { pages: bigint } }
  /**
   * See [`Pallet::set_code`].
   **/
  | { name: 'SetCode'; params: { code: Bytes } }
  /**
   * See [`Pallet::set_code_without_checks`].
   **/
  | { name: 'SetCodeWithoutChecks'; params: { code: Bytes } }
  /**
   * See [`Pallet::set_storage`].
   **/
  | { name: 'SetStorage'; params: { items: Array<[Bytes, Bytes]> } }
  /**
   * See [`Pallet::kill_storage`].
   **/
  | { name: 'KillStorage'; params: { keys: Array<Bytes> } }
  /**
   * See [`Pallet::kill_prefix`].
   **/
  | { name: 'KillPrefix'; params: { prefix: Bytes; subkeys: number } }
  /**
   * See [`Pallet::remark_with_event`].
   **/
  | { name: 'RemarkWithEvent'; params: { remark: Bytes } };

export type FrameSystemCallLike =
  /**
   * See [`Pallet::remark`].
   **/
  | { name: 'Remark'; params: { remark: BytesLike } }
  /**
   * See [`Pallet::set_heap_pages`].
   **/
  | { name: 'SetHeapPages'; params: { pages: bigint } }
  /**
   * See [`Pallet::set_code`].
   **/
  | { name: 'SetCode'; params: { code: BytesLike } }
  /**
   * See [`Pallet::set_code_without_checks`].
   **/
  | { name: 'SetCodeWithoutChecks'; params: { code: BytesLike } }
  /**
   * See [`Pallet::set_storage`].
   **/
  | { name: 'SetStorage'; params: { items: Array<[BytesLike, BytesLike]> } }
  /**
   * See [`Pallet::kill_storage`].
   **/
  | { name: 'KillStorage'; params: { keys: Array<BytesLike> } }
  /**
   * See [`Pallet::kill_prefix`].
   **/
  | { name: 'KillPrefix'; params: { prefix: BytesLike; subkeys: number } }
  /**
   * See [`Pallet::remark_with_event`].
   **/
  | { name: 'RemarkWithEvent'; params: { remark: BytesLike } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletUtilityCall =
  /**
   * See [`Pallet::batch`].
   **/
  | { name: 'Batch'; params: { calls: Array<KitchensinkRuntimeRuntimeCall> } }
  /**
   * See [`Pallet::as_derivative`].
   **/
  | { name: 'AsDerivative'; params: { index: number; call: KitchensinkRuntimeRuntimeCall } }
  /**
   * See [`Pallet::batch_all`].
   **/
  | { name: 'BatchAll'; params: { calls: Array<KitchensinkRuntimeRuntimeCall> } }
  /**
   * See [`Pallet::dispatch_as`].
   **/
  | { name: 'DispatchAs'; params: { asOrigin: KitchensinkRuntimeOriginCaller; call: KitchensinkRuntimeRuntimeCall } }
  /**
   * See [`Pallet::force_batch`].
   **/
  | { name: 'ForceBatch'; params: { calls: Array<KitchensinkRuntimeRuntimeCall> } }
  /**
   * See [`Pallet::with_weight`].
   **/
  | { name: 'WithWeight'; params: { call: KitchensinkRuntimeRuntimeCall; weight: SpWeightsWeightV2Weight } };

export type PalletUtilityCallLike =
  /**
   * See [`Pallet::batch`].
   **/
  | { name: 'Batch'; params: { calls: Array<KitchensinkRuntimeRuntimeCallLike> } }
  /**
   * See [`Pallet::as_derivative`].
   **/
  | { name: 'AsDerivative'; params: { index: number; call: KitchensinkRuntimeRuntimeCallLike } }
  /**
   * See [`Pallet::batch_all`].
   **/
  | { name: 'BatchAll'; params: { calls: Array<KitchensinkRuntimeRuntimeCallLike> } }
  /**
   * See [`Pallet::dispatch_as`].
   **/
  | {
      name: 'DispatchAs';
      params: { asOrigin: KitchensinkRuntimeOriginCaller; call: KitchensinkRuntimeRuntimeCallLike };
    }
  /**
   * See [`Pallet::force_batch`].
   **/
  | { name: 'ForceBatch'; params: { calls: Array<KitchensinkRuntimeRuntimeCallLike> } }
  /**
   * See [`Pallet::with_weight`].
   **/
  | { name: 'WithWeight'; params: { call: KitchensinkRuntimeRuntimeCallLike; weight: SpWeightsWeightV2Weight } };

export type KitchensinkRuntimeOriginCaller =
  | { tag: 'System'; value: FrameSupportDispatchRawOrigin }
  | { tag: 'Council'; value: PalletCollectiveRawOrigin }
  | { tag: 'TechnicalCommittee'; value: PalletCollectiveRawOrigin }
  | { tag: 'AllianceMotion'; value: PalletCollectiveRawOrigin }
  | { tag: 'Void'; value: SpCoreVoid };

export type FrameSupportDispatchRawOrigin = { tag: 'Root' } | { tag: 'Signed'; value: AccountId32 } | { tag: 'None' };

export type PalletCollectiveRawOrigin =
  | { tag: 'Members'; value: [number, number] }
  | { tag: 'Member'; value: AccountId32 }
  | { tag: 'Phantom' };

export type SpCoreVoid = null;

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletBabeCall =
  /**
   * See [`Pallet::report_equivocation`].
   **/
  | {
      name: 'ReportEquivocation';
      params: { equivocationProof: SpConsensusSlotsEquivocationProof; keyOwnerProof: SpSessionMembershipProof };
    }
  /**
   * See [`Pallet::report_equivocation_unsigned`].
   **/
  | {
      name: 'ReportEquivocationUnsigned';
      params: { equivocationProof: SpConsensusSlotsEquivocationProof; keyOwnerProof: SpSessionMembershipProof };
    }
  /**
   * See [`Pallet::plan_config_change`].
   **/
  | { name: 'PlanConfigChange'; params: { config: SpConsensusBabeDigestsNextConfigDescriptor } };

export type PalletBabeCallLike =
  /**
   * See [`Pallet::report_equivocation`].
   **/
  | {
      name: 'ReportEquivocation';
      params: { equivocationProof: SpConsensusSlotsEquivocationProof; keyOwnerProof: SpSessionMembershipProof };
    }
  /**
   * See [`Pallet::report_equivocation_unsigned`].
   **/
  | {
      name: 'ReportEquivocationUnsigned';
      params: { equivocationProof: SpConsensusSlotsEquivocationProof; keyOwnerProof: SpSessionMembershipProof };
    }
  /**
   * See [`Pallet::plan_config_change`].
   **/
  | { name: 'PlanConfigChange'; params: { config: SpConsensusBabeDigestsNextConfigDescriptor } };

export type SpConsensusSlotsEquivocationProof = {
  offender: SpConsensusBabeAppPublic;
  slot: SpConsensusSlotsSlot;
  firstHeader: Header;
  secondHeader: Header;
};

export type SpConsensusBabeAppPublic = SpCoreSr25519Public;

export type SpConsensusSlotsSlot = bigint;

export type SpSessionMembershipProof = { session: number; trieNodes: Array<Bytes>; validatorCount: number };

export type SpConsensusBabeDigestsNextConfigDescriptor = {
  tag: 'V1';
  value: { c: [bigint, bigint]; allowedSlots: SpConsensusBabeAllowedSlots };
};

export type SpConsensusBabeAllowedSlots =
  | 'PrimarySlots'
  | 'PrimaryAndSecondaryPlainSlots'
  | 'PrimaryAndSecondaryVRFSlots';

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletTimestampCall =
  /**
   * See [`Pallet::set`].
   **/
  { name: 'Set'; params: { now: bigint } };

export type PalletTimestampCallLike =
  /**
   * See [`Pallet::set`].
   **/
  { name: 'Set'; params: { now: bigint } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletIndicesCall =
  /**
   * See [`Pallet::claim`].
   **/
  | { name: 'Claim'; params: { index: number } }
  /**
   * See [`Pallet::transfer`].
   **/
  | { name: 'Transfer'; params: { new: MultiAddress; index: number } }
  /**
   * See [`Pallet::free`].
   **/
  | { name: 'Free'; params: { index: number } }
  /**
   * See [`Pallet::force_transfer`].
   **/
  | { name: 'ForceTransfer'; params: { new: MultiAddress; index: number; freeze: boolean } }
  /**
   * See [`Pallet::freeze`].
   **/
  | { name: 'Freeze'; params: { index: number } };

export type PalletIndicesCallLike =
  /**
   * See [`Pallet::claim`].
   **/
  | { name: 'Claim'; params: { index: number } }
  /**
   * See [`Pallet::transfer`].
   **/
  | { name: 'Transfer'; params: { new: MultiAddressLike; index: number } }
  /**
   * See [`Pallet::free`].
   **/
  | { name: 'Free'; params: { index: number } }
  /**
   * See [`Pallet::force_transfer`].
   **/
  | { name: 'ForceTransfer'; params: { new: MultiAddressLike; index: number; freeze: boolean } }
  /**
   * See [`Pallet::freeze`].
   **/
  | { name: 'Freeze'; params: { index: number } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletBalancesCall =
  /**
   * See [`Pallet::transfer_allow_death`].
   **/
  | { name: 'TransferAllowDeath'; params: { dest: MultiAddress; value: bigint } }
  /**
   * See [`Pallet::set_balance_deprecated`].
   **/
  | { name: 'SetBalanceDeprecated'; params: { who: MultiAddress; newFree: bigint; oldReserved: bigint } }
  /**
   * See [`Pallet::force_transfer`].
   **/
  | { name: 'ForceTransfer'; params: { source: MultiAddress; dest: MultiAddress; value: bigint } }
  /**
   * See [`Pallet::transfer_keep_alive`].
   **/
  | { name: 'TransferKeepAlive'; params: { dest: MultiAddress; value: bigint } }
  /**
   * See [`Pallet::transfer_all`].
   **/
  | { name: 'TransferAll'; params: { dest: MultiAddress; keepAlive: boolean } }
  /**
   * See [`Pallet::force_unreserve`].
   **/
  | { name: 'ForceUnreserve'; params: { who: MultiAddress; amount: bigint } }
  /**
   * See [`Pallet::upgrade_accounts`].
   **/
  | { name: 'UpgradeAccounts'; params: { who: Array<AccountId32> } }
  /**
   * See [`Pallet::transfer`].
   **/
  | { name: 'Transfer'; params: { dest: MultiAddress; value: bigint } }
  /**
   * See [`Pallet::force_set_balance`].
   **/
  | { name: 'ForceSetBalance'; params: { who: MultiAddress; newFree: bigint } };

export type PalletBalancesCallLike =
  /**
   * See [`Pallet::transfer_allow_death`].
   **/
  | { name: 'TransferAllowDeath'; params: { dest: MultiAddressLike; value: bigint } }
  /**
   * See [`Pallet::set_balance_deprecated`].
   **/
  | { name: 'SetBalanceDeprecated'; params: { who: MultiAddressLike; newFree: bigint; oldReserved: bigint } }
  /**
   * See [`Pallet::force_transfer`].
   **/
  | { name: 'ForceTransfer'; params: { source: MultiAddressLike; dest: MultiAddressLike; value: bigint } }
  /**
   * See [`Pallet::transfer_keep_alive`].
   **/
  | { name: 'TransferKeepAlive'; params: { dest: MultiAddressLike; value: bigint } }
  /**
   * See [`Pallet::transfer_all`].
   **/
  | { name: 'TransferAll'; params: { dest: MultiAddressLike; keepAlive: boolean } }
  /**
   * See [`Pallet::force_unreserve`].
   **/
  | { name: 'ForceUnreserve'; params: { who: MultiAddressLike; amount: bigint } }
  /**
   * See [`Pallet::upgrade_accounts`].
   **/
  | { name: 'UpgradeAccounts'; params: { who: Array<AccountId32Like> } }
  /**
   * See [`Pallet::transfer`].
   **/
  | { name: 'Transfer'; params: { dest: MultiAddressLike; value: bigint } }
  /**
   * See [`Pallet::force_set_balance`].
   **/
  | { name: 'ForceSetBalance'; params: { who: MultiAddressLike; newFree: bigint } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletElectionProviderMultiPhaseCall =
  /**
   * See [`Pallet::submit_unsigned`].
   **/
  | {
      name: 'SubmitUnsigned';
      params: {
        rawSolution: PalletElectionProviderMultiPhaseRawSolution;
        witness: PalletElectionProviderMultiPhaseSolutionOrSnapshotSize;
      };
    }
  /**
   * See [`Pallet::set_minimum_untrusted_score`].
   **/
  | { name: 'SetMinimumUntrustedScore'; params: { maybeNextScore?: SpNposElectionsElectionScore | undefined } }
  /**
   * See [`Pallet::set_emergency_election_result`].
   **/
  | { name: 'SetEmergencyElectionResult'; params: { supports: Array<[AccountId32, SpNposElectionsSupport]> } }
  /**
   * See [`Pallet::submit`].
   **/
  | { name: 'Submit'; params: { rawSolution: PalletElectionProviderMultiPhaseRawSolution } }
  /**
   * See [`Pallet::governance_fallback`].
   **/
  | {
      name: 'GovernanceFallback';
      params: { maybeMaxVoters?: number | undefined; maybeMaxTargets?: number | undefined };
    };

export type PalletElectionProviderMultiPhaseCallLike =
  /**
   * See [`Pallet::submit_unsigned`].
   **/
  | {
      name: 'SubmitUnsigned';
      params: {
        rawSolution: PalletElectionProviderMultiPhaseRawSolution;
        witness: PalletElectionProviderMultiPhaseSolutionOrSnapshotSize;
      };
    }
  /**
   * See [`Pallet::set_minimum_untrusted_score`].
   **/
  | { name: 'SetMinimumUntrustedScore'; params: { maybeNextScore?: SpNposElectionsElectionScore | undefined } }
  /**
   * See [`Pallet::set_emergency_election_result`].
   **/
  | { name: 'SetEmergencyElectionResult'; params: { supports: Array<[AccountId32Like, SpNposElectionsSupport]> } }
  /**
   * See [`Pallet::submit`].
   **/
  | { name: 'Submit'; params: { rawSolution: PalletElectionProviderMultiPhaseRawSolution } }
  /**
   * See [`Pallet::governance_fallback`].
   **/
  | {
      name: 'GovernanceFallback';
      params: { maybeMaxVoters?: number | undefined; maybeMaxTargets?: number | undefined };
    };

export type PalletElectionProviderMultiPhaseRawSolution = {
  solution: KitchensinkRuntimeNposSolution16;
  score: SpNposElectionsElectionScore;
  round: number;
};

export type KitchensinkRuntimeNposSolution16 = {
  votes1: Array<[number, number]>;
  votes2: Array<[number, [number, PerU16], number]>;
  votes3: Array<[number, FixedArray<[number, PerU16], 2>, number]>;
  votes4: Array<[number, FixedArray<[number, PerU16], 3>, number]>;
  votes5: Array<[number, FixedArray<[number, PerU16], 4>, number]>;
  votes6: Array<[number, FixedArray<[number, PerU16], 5>, number]>;
  votes7: Array<[number, FixedArray<[number, PerU16], 6>, number]>;
  votes8: Array<[number, FixedArray<[number, PerU16], 7>, number]>;
  votes9: Array<[number, FixedArray<[number, PerU16], 8>, number]>;
  votes10: Array<[number, FixedArray<[number, PerU16], 9>, number]>;
  votes11: Array<[number, FixedArray<[number, PerU16], 10>, number]>;
  votes12: Array<[number, FixedArray<[number, PerU16], 11>, number]>;
  votes13: Array<[number, FixedArray<[number, PerU16], 12>, number]>;
  votes14: Array<[number, FixedArray<[number, PerU16], 13>, number]>;
  votes15: Array<[number, FixedArray<[number, PerU16], 14>, number]>;
  votes16: Array<[number, FixedArray<[number, PerU16], 15>, number]>;
};

export type PalletElectionProviderMultiPhaseSolutionOrSnapshotSize = { voters: number; targets: number };

export type SpNposElectionsSupport = { total: bigint; voters: Array<[AccountId32, bigint]> };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletStakingPalletCall =
  /**
   * See [`Pallet::bond`].
   **/
  | { name: 'Bond'; params: { value: bigint; payee: PalletStakingRewardDestination } }
  /**
   * See [`Pallet::bond_extra`].
   **/
  | { name: 'BondExtra'; params: { maxAdditional: bigint } }
  /**
   * See [`Pallet::unbond`].
   **/
  | { name: 'Unbond'; params: { value: bigint } }
  /**
   * See [`Pallet::withdraw_unbonded`].
   **/
  | { name: 'WithdrawUnbonded'; params: { numSlashingSpans: number } }
  /**
   * See [`Pallet::validate`].
   **/
  | { name: 'Validate'; params: { prefs: PalletStakingValidatorPrefs } }
  /**
   * See [`Pallet::nominate`].
   **/
  | { name: 'Nominate'; params: { targets: Array<MultiAddress> } }
  /**
   * See [`Pallet::chill`].
   **/
  | { name: 'Chill' }
  /**
   * See [`Pallet::set_payee`].
   **/
  | { name: 'SetPayee'; params: { payee: PalletStakingRewardDestination } }
  /**
   * See [`Pallet::set_controller`].
   **/
  | { name: 'SetController' }
  /**
   * See [`Pallet::set_validator_count`].
   **/
  | { name: 'SetValidatorCount'; params: { new: number } }
  /**
   * See [`Pallet::increase_validator_count`].
   **/
  | { name: 'IncreaseValidatorCount'; params: { additional: number } }
  /**
   * See [`Pallet::scale_validator_count`].
   **/
  | { name: 'ScaleValidatorCount'; params: { factor: Percent } }
  /**
   * See [`Pallet::force_no_eras`].
   **/
  | { name: 'ForceNoEras' }
  /**
   * See [`Pallet::force_new_era`].
   **/
  | { name: 'ForceNewEra' }
  /**
   * See [`Pallet::set_invulnerables`].
   **/
  | { name: 'SetInvulnerables'; params: { invulnerables: Array<AccountId32> } }
  /**
   * See [`Pallet::force_unstake`].
   **/
  | { name: 'ForceUnstake'; params: { stash: AccountId32; numSlashingSpans: number } }
  /**
   * See [`Pallet::force_new_era_always`].
   **/
  | { name: 'ForceNewEraAlways' }
  /**
   * See [`Pallet::cancel_deferred_slash`].
   **/
  | { name: 'CancelDeferredSlash'; params: { era: number; slashIndices: Array<number> } }
  /**
   * See [`Pallet::payout_stakers`].
   **/
  | { name: 'PayoutStakers'; params: { validatorStash: AccountId32; era: number } }
  /**
   * See [`Pallet::rebond`].
   **/
  | { name: 'Rebond'; params: { value: bigint } }
  /**
   * See [`Pallet::reap_stash`].
   **/
  | { name: 'ReapStash'; params: { stash: AccountId32; numSlashingSpans: number } }
  /**
   * See [`Pallet::kick`].
   **/
  | { name: 'Kick'; params: { who: Array<MultiAddress> } }
  /**
   * See [`Pallet::set_staking_configs`].
   **/
  | {
      name: 'SetStakingConfigs';
      params: {
        minNominatorBond: PalletStakingPalletConfigOp;
        minValidatorBond: PalletStakingPalletConfigOp;
        maxNominatorCount: PalletStakingPalletConfigOpU32;
        maxValidatorCount: PalletStakingPalletConfigOpU32;
        chillThreshold: PalletStakingPalletConfigOpPercent;
        minCommission: PalletStakingPalletConfigOpPerbill;
      };
    }
  /**
   * See [`Pallet::chill_other`].
   **/
  | { name: 'ChillOther'; params: { controller: AccountId32 } }
  /**
   * See [`Pallet::force_apply_min_commission`].
   **/
  | { name: 'ForceApplyMinCommission'; params: { validatorStash: AccountId32 } }
  /**
   * See [`Pallet::set_min_commission`].
   **/
  | { name: 'SetMinCommission'; params: { new: Perbill } };

export type PalletStakingPalletCallLike =
  /**
   * See [`Pallet::bond`].
   **/
  | { name: 'Bond'; params: { value: bigint; payee: PalletStakingRewardDestination } }
  /**
   * See [`Pallet::bond_extra`].
   **/
  | { name: 'BondExtra'; params: { maxAdditional: bigint } }
  /**
   * See [`Pallet::unbond`].
   **/
  | { name: 'Unbond'; params: { value: bigint } }
  /**
   * See [`Pallet::withdraw_unbonded`].
   **/
  | { name: 'WithdrawUnbonded'; params: { numSlashingSpans: number } }
  /**
   * See [`Pallet::validate`].
   **/
  | { name: 'Validate'; params: { prefs: PalletStakingValidatorPrefs } }
  /**
   * See [`Pallet::nominate`].
   **/
  | { name: 'Nominate'; params: { targets: Array<MultiAddressLike> } }
  /**
   * See [`Pallet::chill`].
   **/
  | { name: 'Chill' }
  /**
   * See [`Pallet::set_payee`].
   **/
  | { name: 'SetPayee'; params: { payee: PalletStakingRewardDestination } }
  /**
   * See [`Pallet::set_controller`].
   **/
  | { name: 'SetController' }
  /**
   * See [`Pallet::set_validator_count`].
   **/
  | { name: 'SetValidatorCount'; params: { new: number } }
  /**
   * See [`Pallet::increase_validator_count`].
   **/
  | { name: 'IncreaseValidatorCount'; params: { additional: number } }
  /**
   * See [`Pallet::scale_validator_count`].
   **/
  | { name: 'ScaleValidatorCount'; params: { factor: Percent } }
  /**
   * See [`Pallet::force_no_eras`].
   **/
  | { name: 'ForceNoEras' }
  /**
   * See [`Pallet::force_new_era`].
   **/
  | { name: 'ForceNewEra' }
  /**
   * See [`Pallet::set_invulnerables`].
   **/
  | { name: 'SetInvulnerables'; params: { invulnerables: Array<AccountId32Like> } }
  /**
   * See [`Pallet::force_unstake`].
   **/
  | { name: 'ForceUnstake'; params: { stash: AccountId32Like; numSlashingSpans: number } }
  /**
   * See [`Pallet::force_new_era_always`].
   **/
  | { name: 'ForceNewEraAlways' }
  /**
   * See [`Pallet::cancel_deferred_slash`].
   **/
  | { name: 'CancelDeferredSlash'; params: { era: number; slashIndices: Array<number> } }
  /**
   * See [`Pallet::payout_stakers`].
   **/
  | { name: 'PayoutStakers'; params: { validatorStash: AccountId32Like; era: number } }
  /**
   * See [`Pallet::rebond`].
   **/
  | { name: 'Rebond'; params: { value: bigint } }
  /**
   * See [`Pallet::reap_stash`].
   **/
  | { name: 'ReapStash'; params: { stash: AccountId32Like; numSlashingSpans: number } }
  /**
   * See [`Pallet::kick`].
   **/
  | { name: 'Kick'; params: { who: Array<MultiAddressLike> } }
  /**
   * See [`Pallet::set_staking_configs`].
   **/
  | {
      name: 'SetStakingConfigs';
      params: {
        minNominatorBond: PalletStakingPalletConfigOp;
        minValidatorBond: PalletStakingPalletConfigOp;
        maxNominatorCount: PalletStakingPalletConfigOpU32;
        maxValidatorCount: PalletStakingPalletConfigOpU32;
        chillThreshold: PalletStakingPalletConfigOpPercent;
        minCommission: PalletStakingPalletConfigOpPerbill;
      };
    }
  /**
   * See [`Pallet::chill_other`].
   **/
  | { name: 'ChillOther'; params: { controller: AccountId32Like } }
  /**
   * See [`Pallet::force_apply_min_commission`].
   **/
  | { name: 'ForceApplyMinCommission'; params: { validatorStash: AccountId32Like } }
  /**
   * See [`Pallet::set_min_commission`].
   **/
  | { name: 'SetMinCommission'; params: { new: Perbill } };

export type PalletStakingRewardDestination =
  | { tag: 'Staked' }
  | { tag: 'Stash' }
  | { tag: 'Controller' }
  | { tag: 'Account'; value: AccountId32 }
  | { tag: 'None' };

export type PalletStakingPalletConfigOp = { tag: 'Noop' } | { tag: 'Set'; value: bigint } | { tag: 'Remove' };

export type PalletStakingPalletConfigOpU32 = { tag: 'Noop' } | { tag: 'Set'; value: number } | { tag: 'Remove' };

export type PalletStakingPalletConfigOpPercent = { tag: 'Noop' } | { tag: 'Set'; value: Percent } | { tag: 'Remove' };

export type PalletStakingPalletConfigOpPerbill = { tag: 'Noop' } | { tag: 'Set'; value: Perbill } | { tag: 'Remove' };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletSessionCall =
  /**
   * See [`Pallet::set_keys`].
   **/
  | { name: 'SetKeys'; params: { keys: KitchensinkRuntimeSessionKeys; proof: Bytes } }
  /**
   * See [`Pallet::purge_keys`].
   **/
  | { name: 'PurgeKeys' };

export type PalletSessionCallLike =
  /**
   * See [`Pallet::set_keys`].
   **/
  | { name: 'SetKeys'; params: { keys: KitchensinkRuntimeSessionKeys; proof: BytesLike } }
  /**
   * See [`Pallet::purge_keys`].
   **/
  | { name: 'PurgeKeys' };

export type KitchensinkRuntimeSessionKeys = {
  grandpa: SpConsensusGrandpaAppPublic;
  babe: SpConsensusBabeAppPublic;
  imOnline: PalletImOnlineSr25519AppSr25519Public;
  authorityDiscovery: SpAuthorityDiscoveryAppPublic;
};

export type SpAuthorityDiscoveryAppPublic = SpCoreSr25519Public;

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletDemocracyCall =
  /**
   * See [`Pallet::propose`].
   **/
  | { name: 'Propose'; params: { proposal: FrameSupportPreimagesBounded; value: bigint } }
  /**
   * See [`Pallet::second`].
   **/
  | { name: 'Second'; params: { proposal: number } }
  /**
   * See [`Pallet::vote`].
   **/
  | { name: 'Vote'; params: { refIndex: number; vote: PalletDemocracyVoteAccountVote } }
  /**
   * See [`Pallet::emergency_cancel`].
   **/
  | { name: 'EmergencyCancel'; params: { refIndex: number } }
  /**
   * See [`Pallet::external_propose`].
   **/
  | { name: 'ExternalPropose'; params: { proposal: FrameSupportPreimagesBounded } }
  /**
   * See [`Pallet::external_propose_majority`].
   **/
  | { name: 'ExternalProposeMajority'; params: { proposal: FrameSupportPreimagesBounded } }
  /**
   * See [`Pallet::external_propose_default`].
   **/
  | { name: 'ExternalProposeDefault'; params: { proposal: FrameSupportPreimagesBounded } }
  /**
   * See [`Pallet::fast_track`].
   **/
  | { name: 'FastTrack'; params: { proposalHash: H256; votingPeriod: number; delay: number } }
  /**
   * See [`Pallet::veto_external`].
   **/
  | { name: 'VetoExternal'; params: { proposalHash: H256 } }
  /**
   * See [`Pallet::cancel_referendum`].
   **/
  | { name: 'CancelReferendum'; params: { refIndex: number } }
  /**
   * See [`Pallet::delegate`].
   **/
  | { name: 'Delegate'; params: { to: MultiAddress; conviction: PalletDemocracyConviction; balance: bigint } }
  /**
   * See [`Pallet::undelegate`].
   **/
  | { name: 'Undelegate' }
  /**
   * See [`Pallet::clear_public_proposals`].
   **/
  | { name: 'ClearPublicProposals' }
  /**
   * See [`Pallet::unlock`].
   **/
  | { name: 'Unlock'; params: { target: MultiAddress } }
  /**
   * See [`Pallet::remove_vote`].
   **/
  | { name: 'RemoveVote'; params: { index: number } }
  /**
   * See [`Pallet::remove_other_vote`].
   **/
  | { name: 'RemoveOtherVote'; params: { target: MultiAddress; index: number } }
  /**
   * See [`Pallet::blacklist`].
   **/
  | { name: 'Blacklist'; params: { proposalHash: H256; maybeRefIndex?: number | undefined } }
  /**
   * See [`Pallet::cancel_proposal`].
   **/
  | { name: 'CancelProposal'; params: { propIndex: number } }
  /**
   * See [`Pallet::set_metadata`].
   **/
  | { name: 'SetMetadata'; params: { owner: PalletDemocracyMetadataOwner; maybeHash?: H256 | undefined } };

export type PalletDemocracyCallLike =
  /**
   * See [`Pallet::propose`].
   **/
  | { name: 'Propose'; params: { proposal: FrameSupportPreimagesBounded; value: bigint } }
  /**
   * See [`Pallet::second`].
   **/
  | { name: 'Second'; params: { proposal: number } }
  /**
   * See [`Pallet::vote`].
   **/
  | { name: 'Vote'; params: { refIndex: number; vote: PalletDemocracyVoteAccountVote } }
  /**
   * See [`Pallet::emergency_cancel`].
   **/
  | { name: 'EmergencyCancel'; params: { refIndex: number } }
  /**
   * See [`Pallet::external_propose`].
   **/
  | { name: 'ExternalPropose'; params: { proposal: FrameSupportPreimagesBounded } }
  /**
   * See [`Pallet::external_propose_majority`].
   **/
  | { name: 'ExternalProposeMajority'; params: { proposal: FrameSupportPreimagesBounded } }
  /**
   * See [`Pallet::external_propose_default`].
   **/
  | { name: 'ExternalProposeDefault'; params: { proposal: FrameSupportPreimagesBounded } }
  /**
   * See [`Pallet::fast_track`].
   **/
  | { name: 'FastTrack'; params: { proposalHash: H256; votingPeriod: number; delay: number } }
  /**
   * See [`Pallet::veto_external`].
   **/
  | { name: 'VetoExternal'; params: { proposalHash: H256 } }
  /**
   * See [`Pallet::cancel_referendum`].
   **/
  | { name: 'CancelReferendum'; params: { refIndex: number } }
  /**
   * See [`Pallet::delegate`].
   **/
  | { name: 'Delegate'; params: { to: MultiAddressLike; conviction: PalletDemocracyConviction; balance: bigint } }
  /**
   * See [`Pallet::undelegate`].
   **/
  | { name: 'Undelegate' }
  /**
   * See [`Pallet::clear_public_proposals`].
   **/
  | { name: 'ClearPublicProposals' }
  /**
   * See [`Pallet::unlock`].
   **/
  | { name: 'Unlock'; params: { target: MultiAddressLike } }
  /**
   * See [`Pallet::remove_vote`].
   **/
  | { name: 'RemoveVote'; params: { index: number } }
  /**
   * See [`Pallet::remove_other_vote`].
   **/
  | { name: 'RemoveOtherVote'; params: { target: MultiAddressLike; index: number } }
  /**
   * See [`Pallet::blacklist`].
   **/
  | { name: 'Blacklist'; params: { proposalHash: H256; maybeRefIndex?: number | undefined } }
  /**
   * See [`Pallet::cancel_proposal`].
   **/
  | { name: 'CancelProposal'; params: { propIndex: number } }
  /**
   * See [`Pallet::set_metadata`].
   **/
  | { name: 'SetMetadata'; params: { owner: PalletDemocracyMetadataOwner; maybeHash?: H256 | undefined } };

export type PalletDemocracyConviction =
  | 'None'
  | 'Locked1x'
  | 'Locked2x'
  | 'Locked3x'
  | 'Locked4x'
  | 'Locked5x'
  | 'Locked6x';

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletCollectiveCall =
  /**
   * See [`Pallet::set_members`].
   **/
  | {
      name: 'SetMembers';
      params: { newMembers: Array<AccountId32>; prime?: AccountId32 | undefined; oldCount: number };
    }
  /**
   * See [`Pallet::execute`].
   **/
  | { name: 'Execute'; params: { proposal: KitchensinkRuntimeRuntimeCall; lengthBound: number } }
  /**
   * See [`Pallet::propose`].
   **/
  | { name: 'Propose'; params: { threshold: number; proposal: KitchensinkRuntimeRuntimeCall; lengthBound: number } }
  /**
   * See [`Pallet::vote`].
   **/
  | { name: 'Vote'; params: { proposal: H256; index: number; approve: boolean } }
  /**
   * See [`Pallet::disapprove_proposal`].
   **/
  | { name: 'DisapproveProposal'; params: { proposalHash: H256 } }
  /**
   * See [`Pallet::close`].
   **/
  | {
      name: 'Close';
      params: { proposalHash: H256; index: number; proposalWeightBound: SpWeightsWeightV2Weight; lengthBound: number };
    };

export type PalletCollectiveCallLike =
  /**
   * See [`Pallet::set_members`].
   **/
  | {
      name: 'SetMembers';
      params: { newMembers: Array<AccountId32Like>; prime?: AccountId32Like | undefined; oldCount: number };
    }
  /**
   * See [`Pallet::execute`].
   **/
  | { name: 'Execute'; params: { proposal: KitchensinkRuntimeRuntimeCallLike; lengthBound: number } }
  /**
   * See [`Pallet::propose`].
   **/
  | { name: 'Propose'; params: { threshold: number; proposal: KitchensinkRuntimeRuntimeCallLike; lengthBound: number } }
  /**
   * See [`Pallet::vote`].
   **/
  | { name: 'Vote'; params: { proposal: H256; index: number; approve: boolean } }
  /**
   * See [`Pallet::disapprove_proposal`].
   **/
  | { name: 'DisapproveProposal'; params: { proposalHash: H256 } }
  /**
   * See [`Pallet::close`].
   **/
  | {
      name: 'Close';
      params: { proposalHash: H256; index: number; proposalWeightBound: SpWeightsWeightV2Weight; lengthBound: number };
    };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletElectionsPhragmenCall =
  /**
   * See [`Pallet::vote`].
   **/
  | { name: 'Vote'; params: { votes: Array<AccountId32>; value: bigint } }
  /**
   * See [`Pallet::remove_voter`].
   **/
  | { name: 'RemoveVoter' }
  /**
   * See [`Pallet::submit_candidacy`].
   **/
  | { name: 'SubmitCandidacy'; params: { candidateCount: number } }
  /**
   * See [`Pallet::renounce_candidacy`].
   **/
  | { name: 'RenounceCandidacy'; params: { renouncing: PalletElectionsPhragmenRenouncing } }
  /**
   * See [`Pallet::remove_member`].
   **/
  | { name: 'RemoveMember'; params: { who: MultiAddress; slashBond: boolean; rerunElection: boolean } }
  /**
   * See [`Pallet::clean_defunct_voters`].
   **/
  | { name: 'CleanDefunctVoters'; params: { numVoters: number; numDefunct: number } };

export type PalletElectionsPhragmenCallLike =
  /**
   * See [`Pallet::vote`].
   **/
  | { name: 'Vote'; params: { votes: Array<AccountId32Like>; value: bigint } }
  /**
   * See [`Pallet::remove_voter`].
   **/
  | { name: 'RemoveVoter' }
  /**
   * See [`Pallet::submit_candidacy`].
   **/
  | { name: 'SubmitCandidacy'; params: { candidateCount: number } }
  /**
   * See [`Pallet::renounce_candidacy`].
   **/
  | { name: 'RenounceCandidacy'; params: { renouncing: PalletElectionsPhragmenRenouncing } }
  /**
   * See [`Pallet::remove_member`].
   **/
  | { name: 'RemoveMember'; params: { who: MultiAddressLike; slashBond: boolean; rerunElection: boolean } }
  /**
   * See [`Pallet::clean_defunct_voters`].
   **/
  | { name: 'CleanDefunctVoters'; params: { numVoters: number; numDefunct: number } };

export type PalletElectionsPhragmenRenouncing =
  | { tag: 'Member' }
  | { tag: 'RunnerUp' }
  | { tag: 'Candidate'; value: number };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletMembershipCall =
  /**
   * See [`Pallet::add_member`].
   **/
  | { name: 'AddMember'; params: { who: MultiAddress } }
  /**
   * See [`Pallet::remove_member`].
   **/
  | { name: 'RemoveMember'; params: { who: MultiAddress } }
  /**
   * See [`Pallet::swap_member`].
   **/
  | { name: 'SwapMember'; params: { remove: MultiAddress; add: MultiAddress } }
  /**
   * See [`Pallet::reset_members`].
   **/
  | { name: 'ResetMembers'; params: { members: Array<AccountId32> } }
  /**
   * See [`Pallet::change_key`].
   **/
  | { name: 'ChangeKey'; params: { new: MultiAddress } }
  /**
   * See [`Pallet::set_prime`].
   **/
  | { name: 'SetPrime'; params: { who: MultiAddress } }
  /**
   * See [`Pallet::clear_prime`].
   **/
  | { name: 'ClearPrime' };

export type PalletMembershipCallLike =
  /**
   * See [`Pallet::add_member`].
   **/
  | { name: 'AddMember'; params: { who: MultiAddressLike } }
  /**
   * See [`Pallet::remove_member`].
   **/
  | { name: 'RemoveMember'; params: { who: MultiAddressLike } }
  /**
   * See [`Pallet::swap_member`].
   **/
  | { name: 'SwapMember'; params: { remove: MultiAddressLike; add: MultiAddressLike } }
  /**
   * See [`Pallet::reset_members`].
   **/
  | { name: 'ResetMembers'; params: { members: Array<AccountId32Like> } }
  /**
   * See [`Pallet::change_key`].
   **/
  | { name: 'ChangeKey'; params: { new: MultiAddressLike } }
  /**
   * See [`Pallet::set_prime`].
   **/
  | { name: 'SetPrime'; params: { who: MultiAddressLike } }
  /**
   * See [`Pallet::clear_prime`].
   **/
  | { name: 'ClearPrime' };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletGrandpaCall =
  /**
   * See [`Pallet::report_equivocation`].
   **/
  | {
      name: 'ReportEquivocation';
      params: { equivocationProof: SpConsensusGrandpaEquivocationProof; keyOwnerProof: SpSessionMembershipProof };
    }
  /**
   * See [`Pallet::report_equivocation_unsigned`].
   **/
  | {
      name: 'ReportEquivocationUnsigned';
      params: { equivocationProof: SpConsensusGrandpaEquivocationProof; keyOwnerProof: SpSessionMembershipProof };
    }
  /**
   * See [`Pallet::note_stalled`].
   **/
  | { name: 'NoteStalled'; params: { delay: number; bestFinalizedBlockNumber: number } };

export type PalletGrandpaCallLike =
  /**
   * See [`Pallet::report_equivocation`].
   **/
  | {
      name: 'ReportEquivocation';
      params: { equivocationProof: SpConsensusGrandpaEquivocationProof; keyOwnerProof: SpSessionMembershipProof };
    }
  /**
   * See [`Pallet::report_equivocation_unsigned`].
   **/
  | {
      name: 'ReportEquivocationUnsigned';
      params: { equivocationProof: SpConsensusGrandpaEquivocationProof; keyOwnerProof: SpSessionMembershipProof };
    }
  /**
   * See [`Pallet::note_stalled`].
   **/
  | { name: 'NoteStalled'; params: { delay: number; bestFinalizedBlockNumber: number } };

export type SpConsensusGrandpaEquivocationProof = { setId: bigint; equivocation: SpConsensusGrandpaEquivocation };

export type SpConsensusGrandpaEquivocation =
  | { tag: 'Prevote'; value: FinalityGrandpaEquivocation }
  | { tag: 'Precommit'; value: FinalityGrandpaEquivocationPrecommit };

export type FinalityGrandpaEquivocation = {
  roundNumber: bigint;
  identity: SpConsensusGrandpaAppPublic;
  first: [FinalityGrandpaPrevote, SpConsensusGrandpaAppSignature];
  second: [FinalityGrandpaPrevote, SpConsensusGrandpaAppSignature];
};

export type FinalityGrandpaPrevote = { targetHash: H256; targetNumber: number };

export type SpConsensusGrandpaAppSignature = SpCoreEd25519Signature;

export type SpCoreEd25519Signature = FixedBytes<64>;

export type FinalityGrandpaEquivocationPrecommit = {
  roundNumber: bigint;
  identity: SpConsensusGrandpaAppPublic;
  first: [FinalityGrandpaPrecommit, SpConsensusGrandpaAppSignature];
  second: [FinalityGrandpaPrecommit, SpConsensusGrandpaAppSignature];
};

export type FinalityGrandpaPrecommit = { targetHash: H256; targetNumber: number };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletTreasuryCall =
  /**
   * See [`Pallet::propose_spend`].
   **/
  | { name: 'ProposeSpend'; params: { value: bigint; beneficiary: MultiAddress } }
  /**
   * See [`Pallet::reject_proposal`].
   **/
  | { name: 'RejectProposal'; params: { proposalId: number } }
  /**
   * See [`Pallet::approve_proposal`].
   **/
  | { name: 'ApproveProposal'; params: { proposalId: number } }
  /**
   * See [`Pallet::spend`].
   **/
  | { name: 'Spend'; params: { amount: bigint; beneficiary: MultiAddress } }
  /**
   * See [`Pallet::remove_approval`].
   **/
  | { name: 'RemoveApproval'; params: { proposalId: number } };

export type PalletTreasuryCallLike =
  /**
   * See [`Pallet::propose_spend`].
   **/
  | { name: 'ProposeSpend'; params: { value: bigint; beneficiary: MultiAddressLike } }
  /**
   * See [`Pallet::reject_proposal`].
   **/
  | { name: 'RejectProposal'; params: { proposalId: number } }
  /**
   * See [`Pallet::approve_proposal`].
   **/
  | { name: 'ApproveProposal'; params: { proposalId: number } }
  /**
   * See [`Pallet::spend`].
   **/
  | { name: 'Spend'; params: { amount: bigint; beneficiary: MultiAddressLike } }
  /**
   * See [`Pallet::remove_approval`].
   **/
  | { name: 'RemoveApproval'; params: { proposalId: number } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletAssetRateCall =
  /**
   * See [`Pallet::create`].
   **/
  | { name: 'Create'; params: { assetKind: number; rate: FixedU128 } }
  /**
   * See [`Pallet::update`].
   **/
  | { name: 'Update'; params: { assetKind: number; rate: FixedU128 } }
  /**
   * See [`Pallet::remove`].
   **/
  | { name: 'Remove'; params: { assetKind: number } };

export type PalletAssetRateCallLike =
  /**
   * See [`Pallet::create`].
   **/
  | { name: 'Create'; params: { assetKind: number; rate: FixedU128 } }
  /**
   * See [`Pallet::update`].
   **/
  | { name: 'Update'; params: { assetKind: number; rate: FixedU128 } }
  /**
   * See [`Pallet::remove`].
   **/
  | { name: 'Remove'; params: { assetKind: number } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletContractsCall =
  /**
   * See [`Pallet::call_old_weight`].
   **/
  | {
      name: 'CallOldWeight';
      params: {
        dest: MultiAddress;
        value: bigint;
        gasLimit: bigint;
        storageDepositLimit?: bigint | undefined;
        data: Bytes;
      };
    }
  /**
   * See [`Pallet::instantiate_with_code_old_weight`].
   **/
  | {
      name: 'InstantiateWithCodeOldWeight';
      params: {
        value: bigint;
        gasLimit: bigint;
        storageDepositLimit?: bigint | undefined;
        code: Bytes;
        data: Bytes;
        salt: Bytes;
      };
    }
  /**
   * See [`Pallet::instantiate_old_weight`].
   **/
  | {
      name: 'InstantiateOldWeight';
      params: {
        value: bigint;
        gasLimit: bigint;
        storageDepositLimit?: bigint | undefined;
        codeHash: H256;
        data: Bytes;
        salt: Bytes;
      };
    }
  /**
   * See [`Pallet::upload_code`].
   **/
  | {
      name: 'UploadCode';
      params: { code: Bytes; storageDepositLimit?: bigint | undefined; determinism: PalletContractsWasmDeterminism };
    }
  /**
   * See [`Pallet::remove_code`].
   **/
  | { name: 'RemoveCode'; params: { codeHash: H256 } }
  /**
   * See [`Pallet::set_code`].
   **/
  | { name: 'SetCode'; params: { dest: MultiAddress; codeHash: H256 } }
  /**
   * See [`Pallet::call`].
   **/
  | {
      name: 'Call';
      params: {
        dest: MultiAddress;
        value: bigint;
        gasLimit: SpWeightsWeightV2Weight;
        storageDepositLimit?: bigint | undefined;
        data: Bytes;
      };
    }
  /**
   * See [`Pallet::instantiate_with_code`].
   **/
  | {
      name: 'InstantiateWithCode';
      params: {
        value: bigint;
        gasLimit: SpWeightsWeightV2Weight;
        storageDepositLimit?: bigint | undefined;
        code: Bytes;
        data: Bytes;
        salt: Bytes;
      };
    }
  /**
   * See [`Pallet::instantiate`].
   **/
  | {
      name: 'Instantiate';
      params: {
        value: bigint;
        gasLimit: SpWeightsWeightV2Weight;
        storageDepositLimit?: bigint | undefined;
        codeHash: H256;
        data: Bytes;
        salt: Bytes;
      };
    }
  /**
   * See [`Pallet::migrate`].
   **/
  | { name: 'Migrate'; params: { weightLimit: SpWeightsWeightV2Weight } };

export type PalletContractsCallLike =
  /**
   * See [`Pallet::call_old_weight`].
   **/
  | {
      name: 'CallOldWeight';
      params: {
        dest: MultiAddressLike;
        value: bigint;
        gasLimit: bigint;
        storageDepositLimit?: bigint | undefined;
        data: BytesLike;
      };
    }
  /**
   * See [`Pallet::instantiate_with_code_old_weight`].
   **/
  | {
      name: 'InstantiateWithCodeOldWeight';
      params: {
        value: bigint;
        gasLimit: bigint;
        storageDepositLimit?: bigint | undefined;
        code: BytesLike;
        data: BytesLike;
        salt: BytesLike;
      };
    }
  /**
   * See [`Pallet::instantiate_old_weight`].
   **/
  | {
      name: 'InstantiateOldWeight';
      params: {
        value: bigint;
        gasLimit: bigint;
        storageDepositLimit?: bigint | undefined;
        codeHash: H256;
        data: BytesLike;
        salt: BytesLike;
      };
    }
  /**
   * See [`Pallet::upload_code`].
   **/
  | {
      name: 'UploadCode';
      params: {
        code: BytesLike;
        storageDepositLimit?: bigint | undefined;
        determinism: PalletContractsWasmDeterminism;
      };
    }
  /**
   * See [`Pallet::remove_code`].
   **/
  | { name: 'RemoveCode'; params: { codeHash: H256 } }
  /**
   * See [`Pallet::set_code`].
   **/
  | { name: 'SetCode'; params: { dest: MultiAddressLike; codeHash: H256 } }
  /**
   * See [`Pallet::call`].
   **/
  | {
      name: 'Call';
      params: {
        dest: MultiAddressLike;
        value: bigint;
        gasLimit: SpWeightsWeightV2Weight;
        storageDepositLimit?: bigint | undefined;
        data: BytesLike;
      };
    }
  /**
   * See [`Pallet::instantiate_with_code`].
   **/
  | {
      name: 'InstantiateWithCode';
      params: {
        value: bigint;
        gasLimit: SpWeightsWeightV2Weight;
        storageDepositLimit?: bigint | undefined;
        code: BytesLike;
        data: BytesLike;
        salt: BytesLike;
      };
    }
  /**
   * See [`Pallet::instantiate`].
   **/
  | {
      name: 'Instantiate';
      params: {
        value: bigint;
        gasLimit: SpWeightsWeightV2Weight;
        storageDepositLimit?: bigint | undefined;
        codeHash: H256;
        data: BytesLike;
        salt: BytesLike;
      };
    }
  /**
   * See [`Pallet::migrate`].
   **/
  | { name: 'Migrate'; params: { weightLimit: SpWeightsWeightV2Weight } };

export type PalletContractsWasmDeterminism = 'Enforced' | 'Relaxed';

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletSudoCall =
  /**
   * See [`Pallet::sudo`].
   **/
  | { name: 'Sudo'; params: { call: KitchensinkRuntimeRuntimeCall } }
  /**
   * See [`Pallet::sudo_unchecked_weight`].
   **/
  | { name: 'SudoUncheckedWeight'; params: { call: KitchensinkRuntimeRuntimeCall; weight: SpWeightsWeightV2Weight } }
  /**
   * See [`Pallet::set_key`].
   **/
  | { name: 'SetKey'; params: { new: MultiAddress } }
  /**
   * See [`Pallet::sudo_as`].
   **/
  | { name: 'SudoAs'; params: { who: MultiAddress; call: KitchensinkRuntimeRuntimeCall } };

export type PalletSudoCallLike =
  /**
   * See [`Pallet::sudo`].
   **/
  | { name: 'Sudo'; params: { call: KitchensinkRuntimeRuntimeCallLike } }
  /**
   * See [`Pallet::sudo_unchecked_weight`].
   **/
  | {
      name: 'SudoUncheckedWeight';
      params: { call: KitchensinkRuntimeRuntimeCallLike; weight: SpWeightsWeightV2Weight };
    }
  /**
   * See [`Pallet::set_key`].
   **/
  | { name: 'SetKey'; params: { new: MultiAddressLike } }
  /**
   * See [`Pallet::sudo_as`].
   **/
  | { name: 'SudoAs'; params: { who: MultiAddressLike; call: KitchensinkRuntimeRuntimeCallLike } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletImOnlineCall =
  /**
   * See [`Pallet::heartbeat`].
   **/
  {
    name: 'Heartbeat';
    params: { heartbeat: PalletImOnlineHeartbeat; signature: PalletImOnlineSr25519AppSr25519Signature };
  };

export type PalletImOnlineCallLike =
  /**
   * See [`Pallet::heartbeat`].
   **/
  {
    name: 'Heartbeat';
    params: { heartbeat: PalletImOnlineHeartbeat; signature: PalletImOnlineSr25519AppSr25519Signature };
  };

export type PalletImOnlineHeartbeat = {
  blockNumber: number;
  sessionIndex: number;
  authorityIndex: number;
  validatorsLen: number;
};

export type PalletImOnlineSr25519AppSr25519Signature = SpCoreSr25519Signature;

export type SpCoreSr25519Signature = FixedBytes<64>;

/**
 * Identity pallet declaration.
 **/
export type PalletIdentityCall =
  /**
   * See [`Pallet::add_registrar`].
   **/
  | { name: 'AddRegistrar'; params: { account: MultiAddress } }
  /**
   * See [`Pallet::set_identity`].
   **/
  | { name: 'SetIdentity'; params: { info: PalletIdentityIdentityInfo } }
  /**
   * See [`Pallet::set_subs`].
   **/
  | { name: 'SetSubs'; params: { subs: Array<[AccountId32, Data]> } }
  /**
   * See [`Pallet::clear_identity`].
   **/
  | { name: 'ClearIdentity' }
  /**
   * See [`Pallet::request_judgement`].
   **/
  | { name: 'RequestJudgement'; params: { regIndex: number; maxFee: bigint } }
  /**
   * See [`Pallet::cancel_request`].
   **/
  | { name: 'CancelRequest'; params: { regIndex: number } }
  /**
   * See [`Pallet::set_fee`].
   **/
  | { name: 'SetFee'; params: { index: number; fee: bigint } }
  /**
   * See [`Pallet::set_account_id`].
   **/
  | { name: 'SetAccountId'; params: { index: number; new: MultiAddress } }
  /**
   * See [`Pallet::set_fields`].
   **/
  | { name: 'SetFields'; params: { index: number; fields: PalletIdentityBitFlags } }
  /**
   * See [`Pallet::provide_judgement`].
   **/
  | {
      name: 'ProvideJudgement';
      params: { regIndex: number; target: MultiAddress; judgement: PalletIdentityJudgement; identity: H256 };
    }
  /**
   * See [`Pallet::kill_identity`].
   **/
  | { name: 'KillIdentity'; params: { target: MultiAddress } }
  /**
   * See [`Pallet::add_sub`].
   **/
  | { name: 'AddSub'; params: { sub: MultiAddress; data: Data } }
  /**
   * See [`Pallet::rename_sub`].
   **/
  | { name: 'RenameSub'; params: { sub: MultiAddress; data: Data } }
  /**
   * See [`Pallet::remove_sub`].
   **/
  | { name: 'RemoveSub'; params: { sub: MultiAddress } }
  /**
   * See [`Pallet::quit_sub`].
   **/
  | { name: 'QuitSub' };

export type PalletIdentityCallLike =
  /**
   * See [`Pallet::add_registrar`].
   **/
  | { name: 'AddRegistrar'; params: { account: MultiAddressLike } }
  /**
   * See [`Pallet::set_identity`].
   **/
  | { name: 'SetIdentity'; params: { info: PalletIdentityIdentityInfo } }
  /**
   * See [`Pallet::set_subs`].
   **/
  | { name: 'SetSubs'; params: { subs: Array<[AccountId32Like, Data]> } }
  /**
   * See [`Pallet::clear_identity`].
   **/
  | { name: 'ClearIdentity' }
  /**
   * See [`Pallet::request_judgement`].
   **/
  | { name: 'RequestJudgement'; params: { regIndex: number; maxFee: bigint } }
  /**
   * See [`Pallet::cancel_request`].
   **/
  | { name: 'CancelRequest'; params: { regIndex: number } }
  /**
   * See [`Pallet::set_fee`].
   **/
  | { name: 'SetFee'; params: { index: number; fee: bigint } }
  /**
   * See [`Pallet::set_account_id`].
   **/
  | { name: 'SetAccountId'; params: { index: number; new: MultiAddressLike } }
  /**
   * See [`Pallet::set_fields`].
   **/
  | { name: 'SetFields'; params: { index: number; fields: PalletIdentityBitFlags } }
  /**
   * See [`Pallet::provide_judgement`].
   **/
  | {
      name: 'ProvideJudgement';
      params: { regIndex: number; target: MultiAddressLike; judgement: PalletIdentityJudgement; identity: H256 };
    }
  /**
   * See [`Pallet::kill_identity`].
   **/
  | { name: 'KillIdentity'; params: { target: MultiAddressLike } }
  /**
   * See [`Pallet::add_sub`].
   **/
  | { name: 'AddSub'; params: { sub: MultiAddressLike; data: Data } }
  /**
   * See [`Pallet::rename_sub`].
   **/
  | { name: 'RenameSub'; params: { sub: MultiAddressLike; data: Data } }
  /**
   * See [`Pallet::remove_sub`].
   **/
  | { name: 'RemoveSub'; params: { sub: MultiAddressLike } }
  /**
   * See [`Pallet::quit_sub`].
   **/
  | { name: 'QuitSub' };

export type PalletIdentityIdentityInfo = {
  additional: Array<[Data, Data]>;
  display: Data;
  legal: Data;
  web: Data;
  riot: Data;
  email: Data;
  pgpFingerprint?: FixedBytes<20> | undefined;
  image: Data;
  twitter: Data;
};

export type PalletIdentityBitFlags = bigint;

export type PalletIdentityIdentityField =
  | 'Display'
  | 'Legal'
  | 'Web'
  | 'Riot'
  | 'Email'
  | 'PgpFingerprint'
  | 'Image'
  | 'Twitter';

export type PalletIdentityJudgement =
  | { tag: 'Unknown' }
  | { tag: 'FeePaid'; value: bigint }
  | { tag: 'Reasonable' }
  | { tag: 'KnownGood' }
  | { tag: 'OutOfDate' }
  | { tag: 'LowQuality' }
  | { tag: 'Erroneous' };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletSocietyCall =
  /**
   * See [`Pallet::bid`].
   **/
  | { name: 'Bid'; params: { value: bigint } }
  /**
   * See [`Pallet::unbid`].
   **/
  | { name: 'Unbid' }
  /**
   * See [`Pallet::vouch`].
   **/
  | { name: 'Vouch'; params: { who: MultiAddress; value: bigint; tip: bigint } }
  /**
   * See [`Pallet::unvouch`].
   **/
  | { name: 'Unvouch' }
  /**
   * See [`Pallet::vote`].
   **/
  | { name: 'Vote'; params: { candidate: MultiAddress; approve: boolean } }
  /**
   * See [`Pallet::defender_vote`].
   **/
  | { name: 'DefenderVote'; params: { approve: boolean } }
  /**
   * See [`Pallet::payout`].
   **/
  | { name: 'Payout' }
  /**
   * See [`Pallet::waive_repay`].
   **/
  | { name: 'WaiveRepay'; params: { amount: bigint } }
  /**
   * See [`Pallet::found_society`].
   **/
  | {
      name: 'FoundSociety';
      params: {
        founder: MultiAddress;
        maxMembers: number;
        maxIntake: number;
        maxStrikes: number;
        candidateDeposit: bigint;
        rules: Bytes;
      };
    }
  /**
   * See [`Pallet::dissolve`].
   **/
  | { name: 'Dissolve' }
  /**
   * See [`Pallet::judge_suspended_member`].
   **/
  | { name: 'JudgeSuspendedMember'; params: { who: MultiAddress; forgive: boolean } }
  /**
   * See [`Pallet::set_parameters`].
   **/
  | {
      name: 'SetParameters';
      params: { maxMembers: number; maxIntake: number; maxStrikes: number; candidateDeposit: bigint };
    }
  /**
   * See [`Pallet::punish_skeptic`].
   **/
  | { name: 'PunishSkeptic' }
  /**
   * See [`Pallet::claim_membership`].
   **/
  | { name: 'ClaimMembership' }
  /**
   * See [`Pallet::bestow_membership`].
   **/
  | { name: 'BestowMembership'; params: { candidate: AccountId32 } }
  /**
   * See [`Pallet::kick_candidate`].
   **/
  | { name: 'KickCandidate'; params: { candidate: AccountId32 } }
  /**
   * See [`Pallet::resign_candidacy`].
   **/
  | { name: 'ResignCandidacy' }
  /**
   * See [`Pallet::drop_candidate`].
   **/
  | { name: 'DropCandidate'; params: { candidate: AccountId32 } }
  /**
   * See [`Pallet::cleanup_candidacy`].
   **/
  | { name: 'CleanupCandidacy'; params: { candidate: AccountId32; max: number } }
  /**
   * See [`Pallet::cleanup_challenge`].
   **/
  | { name: 'CleanupChallenge'; params: { challengeRound: number; max: number } };

export type PalletSocietyCallLike =
  /**
   * See [`Pallet::bid`].
   **/
  | { name: 'Bid'; params: { value: bigint } }
  /**
   * See [`Pallet::unbid`].
   **/
  | { name: 'Unbid' }
  /**
   * See [`Pallet::vouch`].
   **/
  | { name: 'Vouch'; params: { who: MultiAddressLike; value: bigint; tip: bigint } }
  /**
   * See [`Pallet::unvouch`].
   **/
  | { name: 'Unvouch' }
  /**
   * See [`Pallet::vote`].
   **/
  | { name: 'Vote'; params: { candidate: MultiAddressLike; approve: boolean } }
  /**
   * See [`Pallet::defender_vote`].
   **/
  | { name: 'DefenderVote'; params: { approve: boolean } }
  /**
   * See [`Pallet::payout`].
   **/
  | { name: 'Payout' }
  /**
   * See [`Pallet::waive_repay`].
   **/
  | { name: 'WaiveRepay'; params: { amount: bigint } }
  /**
   * See [`Pallet::found_society`].
   **/
  | {
      name: 'FoundSociety';
      params: {
        founder: MultiAddressLike;
        maxMembers: number;
        maxIntake: number;
        maxStrikes: number;
        candidateDeposit: bigint;
        rules: BytesLike;
      };
    }
  /**
   * See [`Pallet::dissolve`].
   **/
  | { name: 'Dissolve' }
  /**
   * See [`Pallet::judge_suspended_member`].
   **/
  | { name: 'JudgeSuspendedMember'; params: { who: MultiAddressLike; forgive: boolean } }
  /**
   * See [`Pallet::set_parameters`].
   **/
  | {
      name: 'SetParameters';
      params: { maxMembers: number; maxIntake: number; maxStrikes: number; candidateDeposit: bigint };
    }
  /**
   * See [`Pallet::punish_skeptic`].
   **/
  | { name: 'PunishSkeptic' }
  /**
   * See [`Pallet::claim_membership`].
   **/
  | { name: 'ClaimMembership' }
  /**
   * See [`Pallet::bestow_membership`].
   **/
  | { name: 'BestowMembership'; params: { candidate: AccountId32Like } }
  /**
   * See [`Pallet::kick_candidate`].
   **/
  | { name: 'KickCandidate'; params: { candidate: AccountId32Like } }
  /**
   * See [`Pallet::resign_candidacy`].
   **/
  | { name: 'ResignCandidacy' }
  /**
   * See [`Pallet::drop_candidate`].
   **/
  | { name: 'DropCandidate'; params: { candidate: AccountId32Like } }
  /**
   * See [`Pallet::cleanup_candidacy`].
   **/
  | { name: 'CleanupCandidacy'; params: { candidate: AccountId32Like; max: number } }
  /**
   * See [`Pallet::cleanup_challenge`].
   **/
  | { name: 'CleanupChallenge'; params: { challengeRound: number; max: number } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletRecoveryCall =
  /**
   * See [`Pallet::as_recovered`].
   **/
  | { name: 'AsRecovered'; params: { account: MultiAddress; call: KitchensinkRuntimeRuntimeCall } }
  /**
   * See [`Pallet::set_recovered`].
   **/
  | { name: 'SetRecovered'; params: { lost: MultiAddress; rescuer: MultiAddress } }
  /**
   * See [`Pallet::create_recovery`].
   **/
  | { name: 'CreateRecovery'; params: { friends: Array<AccountId32>; threshold: number; delayPeriod: number } }
  /**
   * See [`Pallet::initiate_recovery`].
   **/
  | { name: 'InitiateRecovery'; params: { account: MultiAddress } }
  /**
   * See [`Pallet::vouch_recovery`].
   **/
  | { name: 'VouchRecovery'; params: { lost: MultiAddress; rescuer: MultiAddress } }
  /**
   * See [`Pallet::claim_recovery`].
   **/
  | { name: 'ClaimRecovery'; params: { account: MultiAddress } }
  /**
   * See [`Pallet::close_recovery`].
   **/
  | { name: 'CloseRecovery'; params: { rescuer: MultiAddress } }
  /**
   * See [`Pallet::remove_recovery`].
   **/
  | { name: 'RemoveRecovery' }
  /**
   * See [`Pallet::cancel_recovered`].
   **/
  | { name: 'CancelRecovered'; params: { account: MultiAddress } };

export type PalletRecoveryCallLike =
  /**
   * See [`Pallet::as_recovered`].
   **/
  | { name: 'AsRecovered'; params: { account: MultiAddressLike; call: KitchensinkRuntimeRuntimeCallLike } }
  /**
   * See [`Pallet::set_recovered`].
   **/
  | { name: 'SetRecovered'; params: { lost: MultiAddressLike; rescuer: MultiAddressLike } }
  /**
   * See [`Pallet::create_recovery`].
   **/
  | { name: 'CreateRecovery'; params: { friends: Array<AccountId32Like>; threshold: number; delayPeriod: number } }
  /**
   * See [`Pallet::initiate_recovery`].
   **/
  | { name: 'InitiateRecovery'; params: { account: MultiAddressLike } }
  /**
   * See [`Pallet::vouch_recovery`].
   **/
  | { name: 'VouchRecovery'; params: { lost: MultiAddressLike; rescuer: MultiAddressLike } }
  /**
   * See [`Pallet::claim_recovery`].
   **/
  | { name: 'ClaimRecovery'; params: { account: MultiAddressLike } }
  /**
   * See [`Pallet::close_recovery`].
   **/
  | { name: 'CloseRecovery'; params: { rescuer: MultiAddressLike } }
  /**
   * See [`Pallet::remove_recovery`].
   **/
  | { name: 'RemoveRecovery' }
  /**
   * See [`Pallet::cancel_recovered`].
   **/
  | { name: 'CancelRecovered'; params: { account: MultiAddressLike } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletVestingCall =
  /**
   * See [`Pallet::vest`].
   **/
  | { name: 'Vest' }
  /**
   * See [`Pallet::vest_other`].
   **/
  | { name: 'VestOther'; params: { target: MultiAddress } }
  /**
   * See [`Pallet::vested_transfer`].
   **/
  | { name: 'VestedTransfer'; params: { target: MultiAddress; schedule: PalletVestingVestingInfo } }
  /**
   * See [`Pallet::force_vested_transfer`].
   **/
  | {
      name: 'ForceVestedTransfer';
      params: { source: MultiAddress; target: MultiAddress; schedule: PalletVestingVestingInfo };
    }
  /**
   * See [`Pallet::merge_schedules`].
   **/
  | { name: 'MergeSchedules'; params: { schedule1Index: number; schedule2Index: number } };

export type PalletVestingCallLike =
  /**
   * See [`Pallet::vest`].
   **/
  | { name: 'Vest' }
  /**
   * See [`Pallet::vest_other`].
   **/
  | { name: 'VestOther'; params: { target: MultiAddressLike } }
  /**
   * See [`Pallet::vested_transfer`].
   **/
  | { name: 'VestedTransfer'; params: { target: MultiAddressLike; schedule: PalletVestingVestingInfo } }
  /**
   * See [`Pallet::force_vested_transfer`].
   **/
  | {
      name: 'ForceVestedTransfer';
      params: { source: MultiAddressLike; target: MultiAddressLike; schedule: PalletVestingVestingInfo };
    }
  /**
   * See [`Pallet::merge_schedules`].
   **/
  | { name: 'MergeSchedules'; params: { schedule1Index: number; schedule2Index: number } };

export type PalletVestingVestingInfo = { locked: bigint; perBlock: bigint; startingBlock: number };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletSchedulerCall =
  /**
   * See [`Pallet::schedule`].
   **/
  | {
      name: 'Schedule';
      params: {
        when: number;
        maybePeriodic?: [number, number] | undefined;
        priority: number;
        call: KitchensinkRuntimeRuntimeCall;
      };
    }
  /**
   * See [`Pallet::cancel`].
   **/
  | { name: 'Cancel'; params: { when: number; index: number } }
  /**
   * See [`Pallet::schedule_named`].
   **/
  | {
      name: 'ScheduleNamed';
      params: {
        id: FixedBytes<32>;
        when: number;
        maybePeriodic?: [number, number] | undefined;
        priority: number;
        call: KitchensinkRuntimeRuntimeCall;
      };
    }
  /**
   * See [`Pallet::cancel_named`].
   **/
  | { name: 'CancelNamed'; params: { id: FixedBytes<32> } }
  /**
   * See [`Pallet::schedule_after`].
   **/
  | {
      name: 'ScheduleAfter';
      params: {
        after: number;
        maybePeriodic?: [number, number] | undefined;
        priority: number;
        call: KitchensinkRuntimeRuntimeCall;
      };
    }
  /**
   * See [`Pallet::schedule_named_after`].
   **/
  | {
      name: 'ScheduleNamedAfter';
      params: {
        id: FixedBytes<32>;
        after: number;
        maybePeriodic?: [number, number] | undefined;
        priority: number;
        call: KitchensinkRuntimeRuntimeCall;
      };
    };

export type PalletSchedulerCallLike =
  /**
   * See [`Pallet::schedule`].
   **/
  | {
      name: 'Schedule';
      params: {
        when: number;
        maybePeriodic?: [number, number] | undefined;
        priority: number;
        call: KitchensinkRuntimeRuntimeCallLike;
      };
    }
  /**
   * See [`Pallet::cancel`].
   **/
  | { name: 'Cancel'; params: { when: number; index: number } }
  /**
   * See [`Pallet::schedule_named`].
   **/
  | {
      name: 'ScheduleNamed';
      params: {
        id: FixedBytes<32>;
        when: number;
        maybePeriodic?: [number, number] | undefined;
        priority: number;
        call: KitchensinkRuntimeRuntimeCallLike;
      };
    }
  /**
   * See [`Pallet::cancel_named`].
   **/
  | { name: 'CancelNamed'; params: { id: FixedBytes<32> } }
  /**
   * See [`Pallet::schedule_after`].
   **/
  | {
      name: 'ScheduleAfter';
      params: {
        after: number;
        maybePeriodic?: [number, number] | undefined;
        priority: number;
        call: KitchensinkRuntimeRuntimeCallLike;
      };
    }
  /**
   * See [`Pallet::schedule_named_after`].
   **/
  | {
      name: 'ScheduleNamedAfter';
      params: {
        id: FixedBytes<32>;
        after: number;
        maybePeriodic?: [number, number] | undefined;
        priority: number;
        call: KitchensinkRuntimeRuntimeCallLike;
      };
    };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletGluttonCall =
  /**
   * See [`Pallet::initialize_pallet`].
   **/
  | { name: 'InitializePallet'; params: { newCount: number; witnessCount?: number | undefined } }
  /**
   * See [`Pallet::set_compute`].
   **/
  | { name: 'SetCompute'; params: { compute: FixedU64 } }
  /**
   * See [`Pallet::set_storage`].
   **/
  | { name: 'SetStorage'; params: { storage: FixedU64 } };

export type PalletGluttonCallLike =
  /**
   * See [`Pallet::initialize_pallet`].
   **/
  | { name: 'InitializePallet'; params: { newCount: number; witnessCount?: number | undefined } }
  /**
   * See [`Pallet::set_compute`].
   **/
  | { name: 'SetCompute'; params: { compute: FixedU64 } }
  /**
   * See [`Pallet::set_storage`].
   **/
  | { name: 'SetStorage'; params: { storage: FixedU64 } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletPreimageCall =
  /**
   * See [`Pallet::note_preimage`].
   **/
  | { name: 'NotePreimage'; params: { bytes: Bytes } }
  /**
   * See [`Pallet::unnote_preimage`].
   **/
  | { name: 'UnnotePreimage'; params: { hash: H256 } }
  /**
   * See [`Pallet::request_preimage`].
   **/
  | { name: 'RequestPreimage'; params: { hash: H256 } }
  /**
   * See [`Pallet::unrequest_preimage`].
   **/
  | { name: 'UnrequestPreimage'; params: { hash: H256 } };

export type PalletPreimageCallLike =
  /**
   * See [`Pallet::note_preimage`].
   **/
  | { name: 'NotePreimage'; params: { bytes: BytesLike } }
  /**
   * See [`Pallet::unnote_preimage`].
   **/
  | { name: 'UnnotePreimage'; params: { hash: H256 } }
  /**
   * See [`Pallet::request_preimage`].
   **/
  | { name: 'RequestPreimage'; params: { hash: H256 } }
  /**
   * See [`Pallet::unrequest_preimage`].
   **/
  | { name: 'UnrequestPreimage'; params: { hash: H256 } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletProxyCall =
  /**
   * See [`Pallet::proxy`].
   **/
  | {
      name: 'Proxy';
      params: {
        real: MultiAddress;
        forceProxyType?: KitchensinkRuntimeProxyType | undefined;
        call: KitchensinkRuntimeRuntimeCall;
      };
    }
  /**
   * See [`Pallet::add_proxy`].
   **/
  | { name: 'AddProxy'; params: { delegate: MultiAddress; proxyType: KitchensinkRuntimeProxyType; delay: number } }
  /**
   * See [`Pallet::remove_proxy`].
   **/
  | { name: 'RemoveProxy'; params: { delegate: MultiAddress; proxyType: KitchensinkRuntimeProxyType; delay: number } }
  /**
   * See [`Pallet::remove_proxies`].
   **/
  | { name: 'RemoveProxies' }
  /**
   * See [`Pallet::create_pure`].
   **/
  | { name: 'CreatePure'; params: { proxyType: KitchensinkRuntimeProxyType; delay: number; index: number } }
  /**
   * See [`Pallet::kill_pure`].
   **/
  | {
      name: 'KillPure';
      params: {
        spawner: MultiAddress;
        proxyType: KitchensinkRuntimeProxyType;
        index: number;
        height: number;
        extIndex: number;
      };
    }
  /**
   * See [`Pallet::announce`].
   **/
  | { name: 'Announce'; params: { real: MultiAddress; callHash: H256 } }
  /**
   * See [`Pallet::remove_announcement`].
   **/
  | { name: 'RemoveAnnouncement'; params: { real: MultiAddress; callHash: H256 } }
  /**
   * See [`Pallet::reject_announcement`].
   **/
  | { name: 'RejectAnnouncement'; params: { delegate: MultiAddress; callHash: H256 } }
  /**
   * See [`Pallet::proxy_announced`].
   **/
  | {
      name: 'ProxyAnnounced';
      params: {
        delegate: MultiAddress;
        real: MultiAddress;
        forceProxyType?: KitchensinkRuntimeProxyType | undefined;
        call: KitchensinkRuntimeRuntimeCall;
      };
    };

export type PalletProxyCallLike =
  /**
   * See [`Pallet::proxy`].
   **/
  | {
      name: 'Proxy';
      params: {
        real: MultiAddressLike;
        forceProxyType?: KitchensinkRuntimeProxyType | undefined;
        call: KitchensinkRuntimeRuntimeCallLike;
      };
    }
  /**
   * See [`Pallet::add_proxy`].
   **/
  | { name: 'AddProxy'; params: { delegate: MultiAddressLike; proxyType: KitchensinkRuntimeProxyType; delay: number } }
  /**
   * See [`Pallet::remove_proxy`].
   **/
  | {
      name: 'RemoveProxy';
      params: { delegate: MultiAddressLike; proxyType: KitchensinkRuntimeProxyType; delay: number };
    }
  /**
   * See [`Pallet::remove_proxies`].
   **/
  | { name: 'RemoveProxies' }
  /**
   * See [`Pallet::create_pure`].
   **/
  | { name: 'CreatePure'; params: { proxyType: KitchensinkRuntimeProxyType; delay: number; index: number } }
  /**
   * See [`Pallet::kill_pure`].
   **/
  | {
      name: 'KillPure';
      params: {
        spawner: MultiAddressLike;
        proxyType: KitchensinkRuntimeProxyType;
        index: number;
        height: number;
        extIndex: number;
      };
    }
  /**
   * See [`Pallet::announce`].
   **/
  | { name: 'Announce'; params: { real: MultiAddressLike; callHash: H256 } }
  /**
   * See [`Pallet::remove_announcement`].
   **/
  | { name: 'RemoveAnnouncement'; params: { real: MultiAddressLike; callHash: H256 } }
  /**
   * See [`Pallet::reject_announcement`].
   **/
  | { name: 'RejectAnnouncement'; params: { delegate: MultiAddressLike; callHash: H256 } }
  /**
   * See [`Pallet::proxy_announced`].
   **/
  | {
      name: 'ProxyAnnounced';
      params: {
        delegate: MultiAddressLike;
        real: MultiAddressLike;
        forceProxyType?: KitchensinkRuntimeProxyType | undefined;
        call: KitchensinkRuntimeRuntimeCallLike;
      };
    };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletMultisigCall =
  /**
   * See [`Pallet::as_multi_threshold_1`].
   **/
  | { name: 'AsMultiThreshold1'; params: { otherSignatories: Array<AccountId32>; call: KitchensinkRuntimeRuntimeCall } }
  /**
   * See [`Pallet::as_multi`].
   **/
  | {
      name: 'AsMulti';
      params: {
        threshold: number;
        otherSignatories: Array<AccountId32>;
        maybeTimepoint?: PalletMultisigTimepoint | undefined;
        call: KitchensinkRuntimeRuntimeCall;
        maxWeight: SpWeightsWeightV2Weight;
      };
    }
  /**
   * See [`Pallet::approve_as_multi`].
   **/
  | {
      name: 'ApproveAsMulti';
      params: {
        threshold: number;
        otherSignatories: Array<AccountId32>;
        maybeTimepoint?: PalletMultisigTimepoint | undefined;
        callHash: FixedBytes<32>;
        maxWeight: SpWeightsWeightV2Weight;
      };
    }
  /**
   * See [`Pallet::cancel_as_multi`].
   **/
  | {
      name: 'CancelAsMulti';
      params: {
        threshold: number;
        otherSignatories: Array<AccountId32>;
        timepoint: PalletMultisigTimepoint;
        callHash: FixedBytes<32>;
      };
    };

export type PalletMultisigCallLike =
  /**
   * See [`Pallet::as_multi_threshold_1`].
   **/
  | {
      name: 'AsMultiThreshold1';
      params: { otherSignatories: Array<AccountId32Like>; call: KitchensinkRuntimeRuntimeCallLike };
    }
  /**
   * See [`Pallet::as_multi`].
   **/
  | {
      name: 'AsMulti';
      params: {
        threshold: number;
        otherSignatories: Array<AccountId32Like>;
        maybeTimepoint?: PalletMultisigTimepoint | undefined;
        call: KitchensinkRuntimeRuntimeCallLike;
        maxWeight: SpWeightsWeightV2Weight;
      };
    }
  /**
   * See [`Pallet::approve_as_multi`].
   **/
  | {
      name: 'ApproveAsMulti';
      params: {
        threshold: number;
        otherSignatories: Array<AccountId32Like>;
        maybeTimepoint?: PalletMultisigTimepoint | undefined;
        callHash: FixedBytes<32>;
        maxWeight: SpWeightsWeightV2Weight;
      };
    }
  /**
   * See [`Pallet::cancel_as_multi`].
   **/
  | {
      name: 'CancelAsMulti';
      params: {
        threshold: number;
        otherSignatories: Array<AccountId32Like>;
        timepoint: PalletMultisigTimepoint;
        callHash: FixedBytes<32>;
      };
    };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletBountiesCall =
  /**
   * See [`Pallet::propose_bounty`].
   **/
  | { name: 'ProposeBounty'; params: { value: bigint; description: Bytes } }
  /**
   * See [`Pallet::approve_bounty`].
   **/
  | { name: 'ApproveBounty'; params: { bountyId: number } }
  /**
   * See [`Pallet::propose_curator`].
   **/
  | { name: 'ProposeCurator'; params: { bountyId: number; curator: MultiAddress; fee: bigint } }
  /**
   * See [`Pallet::unassign_curator`].
   **/
  | { name: 'UnassignCurator'; params: { bountyId: number } }
  /**
   * See [`Pallet::accept_curator`].
   **/
  | { name: 'AcceptCurator'; params: { bountyId: number } }
  /**
   * See [`Pallet::award_bounty`].
   **/
  | { name: 'AwardBounty'; params: { bountyId: number; beneficiary: MultiAddress } }
  /**
   * See [`Pallet::claim_bounty`].
   **/
  | { name: 'ClaimBounty'; params: { bountyId: number } }
  /**
   * See [`Pallet::close_bounty`].
   **/
  | { name: 'CloseBounty'; params: { bountyId: number } }
  /**
   * See [`Pallet::extend_bounty_expiry`].
   **/
  | { name: 'ExtendBountyExpiry'; params: { bountyId: number; remark: Bytes } };

export type PalletBountiesCallLike =
  /**
   * See [`Pallet::propose_bounty`].
   **/
  | { name: 'ProposeBounty'; params: { value: bigint; description: BytesLike } }
  /**
   * See [`Pallet::approve_bounty`].
   **/
  | { name: 'ApproveBounty'; params: { bountyId: number } }
  /**
   * See [`Pallet::propose_curator`].
   **/
  | { name: 'ProposeCurator'; params: { bountyId: number; curator: MultiAddressLike; fee: bigint } }
  /**
   * See [`Pallet::unassign_curator`].
   **/
  | { name: 'UnassignCurator'; params: { bountyId: number } }
  /**
   * See [`Pallet::accept_curator`].
   **/
  | { name: 'AcceptCurator'; params: { bountyId: number } }
  /**
   * See [`Pallet::award_bounty`].
   **/
  | { name: 'AwardBounty'; params: { bountyId: number; beneficiary: MultiAddressLike } }
  /**
   * See [`Pallet::claim_bounty`].
   **/
  | { name: 'ClaimBounty'; params: { bountyId: number } }
  /**
   * See [`Pallet::close_bounty`].
   **/
  | { name: 'CloseBounty'; params: { bountyId: number } }
  /**
   * See [`Pallet::extend_bounty_expiry`].
   **/
  | { name: 'ExtendBountyExpiry'; params: { bountyId: number; remark: BytesLike } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletTipsCall =
  /**
   * See [`Pallet::report_awesome`].
   **/
  | { name: 'ReportAwesome'; params: { reason: Bytes; who: MultiAddress } }
  /**
   * See [`Pallet::retract_tip`].
   **/
  | { name: 'RetractTip'; params: { hash: H256 } }
  /**
   * See [`Pallet::tip_new`].
   **/
  | { name: 'TipNew'; params: { reason: Bytes; who: MultiAddress; tipValue: bigint } }
  /**
   * See [`Pallet::tip`].
   **/
  | { name: 'Tip'; params: { hash: H256; tipValue: bigint } }
  /**
   * See [`Pallet::close_tip`].
   **/
  | { name: 'CloseTip'; params: { hash: H256 } }
  /**
   * See [`Pallet::slash_tip`].
   **/
  | { name: 'SlashTip'; params: { hash: H256 } };

export type PalletTipsCallLike =
  /**
   * See [`Pallet::report_awesome`].
   **/
  | { name: 'ReportAwesome'; params: { reason: BytesLike; who: MultiAddressLike } }
  /**
   * See [`Pallet::retract_tip`].
   **/
  | { name: 'RetractTip'; params: { hash: H256 } }
  /**
   * See [`Pallet::tip_new`].
   **/
  | { name: 'TipNew'; params: { reason: BytesLike; who: MultiAddressLike; tipValue: bigint } }
  /**
   * See [`Pallet::tip`].
   **/
  | { name: 'Tip'; params: { hash: H256; tipValue: bigint } }
  /**
   * See [`Pallet::close_tip`].
   **/
  | { name: 'CloseTip'; params: { hash: H256 } }
  /**
   * See [`Pallet::slash_tip`].
   **/
  | { name: 'SlashTip'; params: { hash: H256 } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletAssetsCall =
  /**
   * See [`Pallet::create`].
   **/
  | { name: 'Create'; params: { id: number; admin: MultiAddress; minBalance: bigint } }
  /**
   * See [`Pallet::force_create`].
   **/
  | { name: 'ForceCreate'; params: { id: number; owner: MultiAddress; isSufficient: boolean; minBalance: bigint } }
  /**
   * See [`Pallet::start_destroy`].
   **/
  | { name: 'StartDestroy'; params: { id: number } }
  /**
   * See [`Pallet::destroy_accounts`].
   **/
  | { name: 'DestroyAccounts'; params: { id: number } }
  /**
   * See [`Pallet::destroy_approvals`].
   **/
  | { name: 'DestroyApprovals'; params: { id: number } }
  /**
   * See [`Pallet::finish_destroy`].
   **/
  | { name: 'FinishDestroy'; params: { id: number } }
  /**
   * See [`Pallet::mint`].
   **/
  | { name: 'Mint'; params: { id: number; beneficiary: MultiAddress; amount: bigint } }
  /**
   * See [`Pallet::burn`].
   **/
  | { name: 'Burn'; params: { id: number; who: MultiAddress; amount: bigint } }
  /**
   * See [`Pallet::transfer`].
   **/
  | { name: 'Transfer'; params: { id: number; target: MultiAddress; amount: bigint } }
  /**
   * See [`Pallet::transfer_keep_alive`].
   **/
  | { name: 'TransferKeepAlive'; params: { id: number; target: MultiAddress; amount: bigint } }
  /**
   * See [`Pallet::force_transfer`].
   **/
  | { name: 'ForceTransfer'; params: { id: number; source: MultiAddress; dest: MultiAddress; amount: bigint } }
  /**
   * See [`Pallet::freeze`].
   **/
  | { name: 'Freeze'; params: { id: number; who: MultiAddress } }
  /**
   * See [`Pallet::thaw`].
   **/
  | { name: 'Thaw'; params: { id: number; who: MultiAddress } }
  /**
   * See [`Pallet::freeze_asset`].
   **/
  | { name: 'FreezeAsset'; params: { id: number } }
  /**
   * See [`Pallet::thaw_asset`].
   **/
  | { name: 'ThawAsset'; params: { id: number } }
  /**
   * See [`Pallet::transfer_ownership`].
   **/
  | { name: 'TransferOwnership'; params: { id: number; owner: MultiAddress } }
  /**
   * See [`Pallet::set_team`].
   **/
  | { name: 'SetTeam'; params: { id: number; issuer: MultiAddress; admin: MultiAddress; freezer: MultiAddress } }
  /**
   * See [`Pallet::set_metadata`].
   **/
  | { name: 'SetMetadata'; params: { id: number; name: Bytes; symbol: Bytes; decimals: number } }
  /**
   * See [`Pallet::clear_metadata`].
   **/
  | { name: 'ClearMetadata'; params: { id: number } }
  /**
   * See [`Pallet::force_set_metadata`].
   **/
  | {
      name: 'ForceSetMetadata';
      params: { id: number; name: Bytes; symbol: Bytes; decimals: number; isFrozen: boolean };
    }
  /**
   * See [`Pallet::force_clear_metadata`].
   **/
  | { name: 'ForceClearMetadata'; params: { id: number } }
  /**
   * See [`Pallet::force_asset_status`].
   **/
  | {
      name: 'ForceAssetStatus';
      params: {
        id: number;
        owner: MultiAddress;
        issuer: MultiAddress;
        admin: MultiAddress;
        freezer: MultiAddress;
        minBalance: bigint;
        isSufficient: boolean;
        isFrozen: boolean;
      };
    }
  /**
   * See [`Pallet::approve_transfer`].
   **/
  | { name: 'ApproveTransfer'; params: { id: number; delegate: MultiAddress; amount: bigint } }
  /**
   * See [`Pallet::cancel_approval`].
   **/
  | { name: 'CancelApproval'; params: { id: number; delegate: MultiAddress } }
  /**
   * See [`Pallet::force_cancel_approval`].
   **/
  | { name: 'ForceCancelApproval'; params: { id: number; owner: MultiAddress; delegate: MultiAddress } }
  /**
   * See [`Pallet::transfer_approved`].
   **/
  | { name: 'TransferApproved'; params: { id: number; owner: MultiAddress; destination: MultiAddress; amount: bigint } }
  /**
   * See [`Pallet::touch`].
   **/
  | { name: 'Touch'; params: { id: number } }
  /**
   * See [`Pallet::refund`].
   **/
  | { name: 'Refund'; params: { id: number; allowBurn: boolean } }
  /**
   * See [`Pallet::set_min_balance`].
   **/
  | { name: 'SetMinBalance'; params: { id: number; minBalance: bigint } }
  /**
   * See [`Pallet::touch_other`].
   **/
  | { name: 'TouchOther'; params: { id: number; who: MultiAddress } }
  /**
   * See [`Pallet::refund_other`].
   **/
  | { name: 'RefundOther'; params: { id: number; who: MultiAddress } }
  /**
   * See [`Pallet::block`].
   **/
  | { name: 'Block'; params: { id: number; who: MultiAddress } };

export type PalletAssetsCallLike =
  /**
   * See [`Pallet::create`].
   **/
  | { name: 'Create'; params: { id: number; admin: MultiAddressLike; minBalance: bigint } }
  /**
   * See [`Pallet::force_create`].
   **/
  | { name: 'ForceCreate'; params: { id: number; owner: MultiAddressLike; isSufficient: boolean; minBalance: bigint } }
  /**
   * See [`Pallet::start_destroy`].
   **/
  | { name: 'StartDestroy'; params: { id: number } }
  /**
   * See [`Pallet::destroy_accounts`].
   **/
  | { name: 'DestroyAccounts'; params: { id: number } }
  /**
   * See [`Pallet::destroy_approvals`].
   **/
  | { name: 'DestroyApprovals'; params: { id: number } }
  /**
   * See [`Pallet::finish_destroy`].
   **/
  | { name: 'FinishDestroy'; params: { id: number } }
  /**
   * See [`Pallet::mint`].
   **/
  | { name: 'Mint'; params: { id: number; beneficiary: MultiAddressLike; amount: bigint } }
  /**
   * See [`Pallet::burn`].
   **/
  | { name: 'Burn'; params: { id: number; who: MultiAddressLike; amount: bigint } }
  /**
   * See [`Pallet::transfer`].
   **/
  | { name: 'Transfer'; params: { id: number; target: MultiAddressLike; amount: bigint } }
  /**
   * See [`Pallet::transfer_keep_alive`].
   **/
  | { name: 'TransferKeepAlive'; params: { id: number; target: MultiAddressLike; amount: bigint } }
  /**
   * See [`Pallet::force_transfer`].
   **/
  | { name: 'ForceTransfer'; params: { id: number; source: MultiAddressLike; dest: MultiAddressLike; amount: bigint } }
  /**
   * See [`Pallet::freeze`].
   **/
  | { name: 'Freeze'; params: { id: number; who: MultiAddressLike } }
  /**
   * See [`Pallet::thaw`].
   **/
  | { name: 'Thaw'; params: { id: number; who: MultiAddressLike } }
  /**
   * See [`Pallet::freeze_asset`].
   **/
  | { name: 'FreezeAsset'; params: { id: number } }
  /**
   * See [`Pallet::thaw_asset`].
   **/
  | { name: 'ThawAsset'; params: { id: number } }
  /**
   * See [`Pallet::transfer_ownership`].
   **/
  | { name: 'TransferOwnership'; params: { id: number; owner: MultiAddressLike } }
  /**
   * See [`Pallet::set_team`].
   **/
  | {
      name: 'SetTeam';
      params: { id: number; issuer: MultiAddressLike; admin: MultiAddressLike; freezer: MultiAddressLike };
    }
  /**
   * See [`Pallet::set_metadata`].
   **/
  | { name: 'SetMetadata'; params: { id: number; name: BytesLike; symbol: BytesLike; decimals: number } }
  /**
   * See [`Pallet::clear_metadata`].
   **/
  | { name: 'ClearMetadata'; params: { id: number } }
  /**
   * See [`Pallet::force_set_metadata`].
   **/
  | {
      name: 'ForceSetMetadata';
      params: { id: number; name: BytesLike; symbol: BytesLike; decimals: number; isFrozen: boolean };
    }
  /**
   * See [`Pallet::force_clear_metadata`].
   **/
  | { name: 'ForceClearMetadata'; params: { id: number } }
  /**
   * See [`Pallet::force_asset_status`].
   **/
  | {
      name: 'ForceAssetStatus';
      params: {
        id: number;
        owner: MultiAddressLike;
        issuer: MultiAddressLike;
        admin: MultiAddressLike;
        freezer: MultiAddressLike;
        minBalance: bigint;
        isSufficient: boolean;
        isFrozen: boolean;
      };
    }
  /**
   * See [`Pallet::approve_transfer`].
   **/
  | { name: 'ApproveTransfer'; params: { id: number; delegate: MultiAddressLike; amount: bigint } }
  /**
   * See [`Pallet::cancel_approval`].
   **/
  | { name: 'CancelApproval'; params: { id: number; delegate: MultiAddressLike } }
  /**
   * See [`Pallet::force_cancel_approval`].
   **/
  | { name: 'ForceCancelApproval'; params: { id: number; owner: MultiAddressLike; delegate: MultiAddressLike } }
  /**
   * See [`Pallet::transfer_approved`].
   **/
  | {
      name: 'TransferApproved';
      params: { id: number; owner: MultiAddressLike; destination: MultiAddressLike; amount: bigint };
    }
  /**
   * See [`Pallet::touch`].
   **/
  | { name: 'Touch'; params: { id: number } }
  /**
   * See [`Pallet::refund`].
   **/
  | { name: 'Refund'; params: { id: number; allowBurn: boolean } }
  /**
   * See [`Pallet::set_min_balance`].
   **/
  | { name: 'SetMinBalance'; params: { id: number; minBalance: bigint } }
  /**
   * See [`Pallet::touch_other`].
   **/
  | { name: 'TouchOther'; params: { id: number; who: MultiAddressLike } }
  /**
   * See [`Pallet::refund_other`].
   **/
  | { name: 'RefundOther'; params: { id: number; who: MultiAddressLike } }
  /**
   * See [`Pallet::block`].
   **/
  | { name: 'Block'; params: { id: number; who: MultiAddressLike } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletLotteryCall =
  /**
   * See [`Pallet::buy_ticket`].
   **/
  | { name: 'BuyTicket'; params: { call: KitchensinkRuntimeRuntimeCall } }
  /**
   * See [`Pallet::set_calls`].
   **/
  | { name: 'SetCalls'; params: { calls: Array<KitchensinkRuntimeRuntimeCall> } }
  /**
   * See [`Pallet::start_lottery`].
   **/
  | { name: 'StartLottery'; params: { price: bigint; length: number; delay: number; repeat: boolean } }
  /**
   * See [`Pallet::stop_repeat`].
   **/
  | { name: 'StopRepeat' };

export type PalletLotteryCallLike =
  /**
   * See [`Pallet::buy_ticket`].
   **/
  | { name: 'BuyTicket'; params: { call: KitchensinkRuntimeRuntimeCallLike } }
  /**
   * See [`Pallet::set_calls`].
   **/
  | { name: 'SetCalls'; params: { calls: Array<KitchensinkRuntimeRuntimeCallLike> } }
  /**
   * See [`Pallet::start_lottery`].
   **/
  | { name: 'StartLottery'; params: { price: bigint; length: number; delay: number; repeat: boolean } }
  /**
   * See [`Pallet::stop_repeat`].
   **/
  | { name: 'StopRepeat' };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletNisCall =
  /**
   * See [`Pallet::place_bid`].
   **/
  | { name: 'PlaceBid'; params: { amount: bigint; duration: number } }
  /**
   * See [`Pallet::retract_bid`].
   **/
  | { name: 'RetractBid'; params: { amount: bigint; duration: number } }
  /**
   * See [`Pallet::fund_deficit`].
   **/
  | { name: 'FundDeficit' }
  /**
   * See [`Pallet::thaw_private`].
   **/
  | { name: 'ThawPrivate'; params: { index: number; maybeProportion?: Perquintill | undefined } }
  /**
   * See [`Pallet::thaw_communal`].
   **/
  | { name: 'ThawCommunal'; params: { index: number } }
  /**
   * See [`Pallet::communify`].
   **/
  | { name: 'Communify'; params: { index: number } }
  /**
   * See [`Pallet::privatize`].
   **/
  | { name: 'Privatize'; params: { index: number } };

export type PalletNisCallLike =
  /**
   * See [`Pallet::place_bid`].
   **/
  | { name: 'PlaceBid'; params: { amount: bigint; duration: number } }
  /**
   * See [`Pallet::retract_bid`].
   **/
  | { name: 'RetractBid'; params: { amount: bigint; duration: number } }
  /**
   * See [`Pallet::fund_deficit`].
   **/
  | { name: 'FundDeficit' }
  /**
   * See [`Pallet::thaw_private`].
   **/
  | { name: 'ThawPrivate'; params: { index: number; maybeProportion?: Perquintill | undefined } }
  /**
   * See [`Pallet::thaw_communal`].
   **/
  | { name: 'ThawCommunal'; params: { index: number } }
  /**
   * See [`Pallet::communify`].
   **/
  | { name: 'Communify'; params: { index: number } }
  /**
   * See [`Pallet::privatize`].
   **/
  | { name: 'Privatize'; params: { index: number } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletUniquesCall =
  /**
   * See [`Pallet::create`].
   **/
  | { name: 'Create'; params: { collection: number; admin: MultiAddress } }
  /**
   * See [`Pallet::force_create`].
   **/
  | { name: 'ForceCreate'; params: { collection: number; owner: MultiAddress; freeHolding: boolean } }
  /**
   * See [`Pallet::destroy`].
   **/
  | { name: 'Destroy'; params: { collection: number; witness: PalletUniquesDestroyWitness } }
  /**
   * See [`Pallet::mint`].
   **/
  | { name: 'Mint'; params: { collection: number; item: number; owner: MultiAddress } }
  /**
   * See [`Pallet::burn`].
   **/
  | { name: 'Burn'; params: { collection: number; item: number; checkOwner?: MultiAddress | undefined } }
  /**
   * See [`Pallet::transfer`].
   **/
  | { name: 'Transfer'; params: { collection: number; item: number; dest: MultiAddress } }
  /**
   * See [`Pallet::redeposit`].
   **/
  | { name: 'Redeposit'; params: { collection: number; items: Array<number> } }
  /**
   * See [`Pallet::freeze`].
   **/
  | { name: 'Freeze'; params: { collection: number; item: number } }
  /**
   * See [`Pallet::thaw`].
   **/
  | { name: 'Thaw'; params: { collection: number; item: number } }
  /**
   * See [`Pallet::freeze_collection`].
   **/
  | { name: 'FreezeCollection'; params: { collection: number } }
  /**
   * See [`Pallet::thaw_collection`].
   **/
  | { name: 'ThawCollection'; params: { collection: number } }
  /**
   * See [`Pallet::transfer_ownership`].
   **/
  | { name: 'TransferOwnership'; params: { collection: number; owner: MultiAddress } }
  /**
   * See [`Pallet::set_team`].
   **/
  | {
      name: 'SetTeam';
      params: { collection: number; issuer: MultiAddress; admin: MultiAddress; freezer: MultiAddress };
    }
  /**
   * See [`Pallet::approve_transfer`].
   **/
  | { name: 'ApproveTransfer'; params: { collection: number; item: number; delegate: MultiAddress } }
  /**
   * See [`Pallet::cancel_approval`].
   **/
  | {
      name: 'CancelApproval';
      params: { collection: number; item: number; maybeCheckDelegate?: MultiAddress | undefined };
    }
  /**
   * See [`Pallet::force_item_status`].
   **/
  | {
      name: 'ForceItemStatus';
      params: {
        collection: number;
        owner: MultiAddress;
        issuer: MultiAddress;
        admin: MultiAddress;
        freezer: MultiAddress;
        freeHolding: boolean;
        isFrozen: boolean;
      };
    }
  /**
   * See [`Pallet::set_attribute`].
   **/
  | { name: 'SetAttribute'; params: { collection: number; maybeItem?: number | undefined; key: Bytes; value: Bytes } }
  /**
   * See [`Pallet::clear_attribute`].
   **/
  | { name: 'ClearAttribute'; params: { collection: number; maybeItem?: number | undefined; key: Bytes } }
  /**
   * See [`Pallet::set_metadata`].
   **/
  | { name: 'SetMetadata'; params: { collection: number; item: number; data: Bytes; isFrozen: boolean } }
  /**
   * See [`Pallet::clear_metadata`].
   **/
  | { name: 'ClearMetadata'; params: { collection: number; item: number } }
  /**
   * See [`Pallet::set_collection_metadata`].
   **/
  | { name: 'SetCollectionMetadata'; params: { collection: number; data: Bytes; isFrozen: boolean } }
  /**
   * See [`Pallet::clear_collection_metadata`].
   **/
  | { name: 'ClearCollectionMetadata'; params: { collection: number } }
  /**
   * See [`Pallet::set_accept_ownership`].
   **/
  | { name: 'SetAcceptOwnership'; params: { maybeCollection?: number | undefined } }
  /**
   * See [`Pallet::set_collection_max_supply`].
   **/
  | { name: 'SetCollectionMaxSupply'; params: { collection: number; maxSupply: number } }
  /**
   * See [`Pallet::set_price`].
   **/
  | {
      name: 'SetPrice';
      params: {
        collection: number;
        item: number;
        price?: bigint | undefined;
        whitelistedBuyer?: MultiAddress | undefined;
      };
    }
  /**
   * See [`Pallet::buy_item`].
   **/
  | { name: 'BuyItem'; params: { collection: number; item: number; bidPrice: bigint } };

export type PalletUniquesCallLike =
  /**
   * See [`Pallet::create`].
   **/
  | { name: 'Create'; params: { collection: number; admin: MultiAddressLike } }
  /**
   * See [`Pallet::force_create`].
   **/
  | { name: 'ForceCreate'; params: { collection: number; owner: MultiAddressLike; freeHolding: boolean } }
  /**
   * See [`Pallet::destroy`].
   **/
  | { name: 'Destroy'; params: { collection: number; witness: PalletUniquesDestroyWitness } }
  /**
   * See [`Pallet::mint`].
   **/
  | { name: 'Mint'; params: { collection: number; item: number; owner: MultiAddressLike } }
  /**
   * See [`Pallet::burn`].
   **/
  | { name: 'Burn'; params: { collection: number; item: number; checkOwner?: MultiAddressLike | undefined } }
  /**
   * See [`Pallet::transfer`].
   **/
  | { name: 'Transfer'; params: { collection: number; item: number; dest: MultiAddressLike } }
  /**
   * See [`Pallet::redeposit`].
   **/
  | { name: 'Redeposit'; params: { collection: number; items: Array<number> } }
  /**
   * See [`Pallet::freeze`].
   **/
  | { name: 'Freeze'; params: { collection: number; item: number } }
  /**
   * See [`Pallet::thaw`].
   **/
  | { name: 'Thaw'; params: { collection: number; item: number } }
  /**
   * See [`Pallet::freeze_collection`].
   **/
  | { name: 'FreezeCollection'; params: { collection: number } }
  /**
   * See [`Pallet::thaw_collection`].
   **/
  | { name: 'ThawCollection'; params: { collection: number } }
  /**
   * See [`Pallet::transfer_ownership`].
   **/
  | { name: 'TransferOwnership'; params: { collection: number; owner: MultiAddressLike } }
  /**
   * See [`Pallet::set_team`].
   **/
  | {
      name: 'SetTeam';
      params: { collection: number; issuer: MultiAddressLike; admin: MultiAddressLike; freezer: MultiAddressLike };
    }
  /**
   * See [`Pallet::approve_transfer`].
   **/
  | { name: 'ApproveTransfer'; params: { collection: number; item: number; delegate: MultiAddressLike } }
  /**
   * See [`Pallet::cancel_approval`].
   **/
  | {
      name: 'CancelApproval';
      params: { collection: number; item: number; maybeCheckDelegate?: MultiAddressLike | undefined };
    }
  /**
   * See [`Pallet::force_item_status`].
   **/
  | {
      name: 'ForceItemStatus';
      params: {
        collection: number;
        owner: MultiAddressLike;
        issuer: MultiAddressLike;
        admin: MultiAddressLike;
        freezer: MultiAddressLike;
        freeHolding: boolean;
        isFrozen: boolean;
      };
    }
  /**
   * See [`Pallet::set_attribute`].
   **/
  | {
      name: 'SetAttribute';
      params: { collection: number; maybeItem?: number | undefined; key: BytesLike; value: BytesLike };
    }
  /**
   * See [`Pallet::clear_attribute`].
   **/
  | { name: 'ClearAttribute'; params: { collection: number; maybeItem?: number | undefined; key: BytesLike } }
  /**
   * See [`Pallet::set_metadata`].
   **/
  | { name: 'SetMetadata'; params: { collection: number; item: number; data: BytesLike; isFrozen: boolean } }
  /**
   * See [`Pallet::clear_metadata`].
   **/
  | { name: 'ClearMetadata'; params: { collection: number; item: number } }
  /**
   * See [`Pallet::set_collection_metadata`].
   **/
  | { name: 'SetCollectionMetadata'; params: { collection: number; data: BytesLike; isFrozen: boolean } }
  /**
   * See [`Pallet::clear_collection_metadata`].
   **/
  | { name: 'ClearCollectionMetadata'; params: { collection: number } }
  /**
   * See [`Pallet::set_accept_ownership`].
   **/
  | { name: 'SetAcceptOwnership'; params: { maybeCollection?: number | undefined } }
  /**
   * See [`Pallet::set_collection_max_supply`].
   **/
  | { name: 'SetCollectionMaxSupply'; params: { collection: number; maxSupply: number } }
  /**
   * See [`Pallet::set_price`].
   **/
  | {
      name: 'SetPrice';
      params: {
        collection: number;
        item: number;
        price?: bigint | undefined;
        whitelistedBuyer?: MultiAddressLike | undefined;
      };
    }
  /**
   * See [`Pallet::buy_item`].
   **/
  | { name: 'BuyItem'; params: { collection: number; item: number; bidPrice: bigint } };

export type PalletUniquesDestroyWitness = { items: number; itemMetadatas: number; attributes: number };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletNftsCall =
  /**
   * See [`Pallet::create`].
   **/
  | { name: 'Create'; params: { admin: MultiAddress; config: PalletNftsCollectionConfig } }
  /**
   * See [`Pallet::force_create`].
   **/
  | { name: 'ForceCreate'; params: { owner: MultiAddress; config: PalletNftsCollectionConfig } }
  /**
   * See [`Pallet::destroy`].
   **/
  | { name: 'Destroy'; params: { collection: number; witness: PalletNftsDestroyWitness } }
  /**
   * See [`Pallet::mint`].
   **/
  | {
      name: 'Mint';
      params: {
        collection: number;
        item: number;
        mintTo: MultiAddress;
        witnessData?: PalletNftsMintWitness | undefined;
      };
    }
  /**
   * See [`Pallet::force_mint`].
   **/
  | {
      name: 'ForceMint';
      params: { collection: number; item: number; mintTo: MultiAddress; itemConfig: PalletNftsItemConfig };
    }
  /**
   * See [`Pallet::burn`].
   **/
  | { name: 'Burn'; params: { collection: number; item: number } }
  /**
   * See [`Pallet::transfer`].
   **/
  | { name: 'Transfer'; params: { collection: number; item: number; dest: MultiAddress } }
  /**
   * See [`Pallet::redeposit`].
   **/
  | { name: 'Redeposit'; params: { collection: number; items: Array<number> } }
  /**
   * See [`Pallet::lock_item_transfer`].
   **/
  | { name: 'LockItemTransfer'; params: { collection: number; item: number } }
  /**
   * See [`Pallet::unlock_item_transfer`].
   **/
  | { name: 'UnlockItemTransfer'; params: { collection: number; item: number } }
  /**
   * See [`Pallet::lock_collection`].
   **/
  | { name: 'LockCollection'; params: { collection: number; lockSettings: PalletNftsBitFlags } }
  /**
   * See [`Pallet::transfer_ownership`].
   **/
  | { name: 'TransferOwnership'; params: { collection: number; owner: MultiAddress } }
  /**
   * See [`Pallet::set_team`].
   **/
  | {
      name: 'SetTeam';
      params: {
        collection: number;
        issuer?: MultiAddress | undefined;
        admin?: MultiAddress | undefined;
        freezer?: MultiAddress | undefined;
      };
    }
  /**
   * See [`Pallet::force_collection_owner`].
   **/
  | { name: 'ForceCollectionOwner'; params: { collection: number; owner: MultiAddress } }
  /**
   * See [`Pallet::force_collection_config`].
   **/
  | { name: 'ForceCollectionConfig'; params: { collection: number; config: PalletNftsCollectionConfig } }
  /**
   * See [`Pallet::approve_transfer`].
   **/
  | {
      name: 'ApproveTransfer';
      params: { collection: number; item: number; delegate: MultiAddress; maybeDeadline?: number | undefined };
    }
  /**
   * See [`Pallet::cancel_approval`].
   **/
  | { name: 'CancelApproval'; params: { collection: number; item: number; delegate: MultiAddress } }
  /**
   * See [`Pallet::clear_all_transfer_approvals`].
   **/
  | { name: 'ClearAllTransferApprovals'; params: { collection: number; item: number } }
  /**
   * See [`Pallet::lock_item_properties`].
   **/
  | {
      name: 'LockItemProperties';
      params: { collection: number; item: number; lockMetadata: boolean; lockAttributes: boolean };
    }
  /**
   * See [`Pallet::set_attribute`].
   **/
  | {
      name: 'SetAttribute';
      params: {
        collection: number;
        maybeItem?: number | undefined;
        namespace: PalletNftsAttributeNamespace;
        key: Bytes;
        value: Bytes;
      };
    }
  /**
   * See [`Pallet::force_set_attribute`].
   **/
  | {
      name: 'ForceSetAttribute';
      params: {
        setAs?: AccountId32 | undefined;
        collection: number;
        maybeItem?: number | undefined;
        namespace: PalletNftsAttributeNamespace;
        key: Bytes;
        value: Bytes;
      };
    }
  /**
   * See [`Pallet::clear_attribute`].
   **/
  | {
      name: 'ClearAttribute';
      params: {
        collection: number;
        maybeItem?: number | undefined;
        namespace: PalletNftsAttributeNamespace;
        key: Bytes;
      };
    }
  /**
   * See [`Pallet::approve_item_attributes`].
   **/
  | { name: 'ApproveItemAttributes'; params: { collection: number; item: number; delegate: MultiAddress } }
  /**
   * See [`Pallet::cancel_item_attributes_approval`].
   **/
  | {
      name: 'CancelItemAttributesApproval';
      params: {
        collection: number;
        item: number;
        delegate: MultiAddress;
        witness: PalletNftsCancelAttributesApprovalWitness;
      };
    }
  /**
   * See [`Pallet::set_metadata`].
   **/
  | { name: 'SetMetadata'; params: { collection: number; item: number; data: Bytes } }
  /**
   * See [`Pallet::clear_metadata`].
   **/
  | { name: 'ClearMetadata'; params: { collection: number; item: number } }
  /**
   * See [`Pallet::set_collection_metadata`].
   **/
  | { name: 'SetCollectionMetadata'; params: { collection: number; data: Bytes } }
  /**
   * See [`Pallet::clear_collection_metadata`].
   **/
  | { name: 'ClearCollectionMetadata'; params: { collection: number } }
  /**
   * See [`Pallet::set_accept_ownership`].
   **/
  | { name: 'SetAcceptOwnership'; params: { maybeCollection?: number | undefined } }
  /**
   * See [`Pallet::set_collection_max_supply`].
   **/
  | { name: 'SetCollectionMaxSupply'; params: { collection: number; maxSupply: number } }
  /**
   * See [`Pallet::update_mint_settings`].
   **/
  | { name: 'UpdateMintSettings'; params: { collection: number; mintSettings: PalletNftsMintSettings } }
  /**
   * See [`Pallet::set_price`].
   **/
  | {
      name: 'SetPrice';
      params: {
        collection: number;
        item: number;
        price?: bigint | undefined;
        whitelistedBuyer?: MultiAddress | undefined;
      };
    }
  /**
   * See [`Pallet::buy_item`].
   **/
  | { name: 'BuyItem'; params: { collection: number; item: number; bidPrice: bigint } }
  /**
   * See [`Pallet::pay_tips`].
   **/
  | { name: 'PayTips'; params: { tips: Array<PalletNftsItemTip> } }
  /**
   * See [`Pallet::create_swap`].
   **/
  | {
      name: 'CreateSwap';
      params: {
        offeredCollection: number;
        offeredItem: number;
        desiredCollection: number;
        maybeDesiredItem?: number | undefined;
        maybePrice?: PalletNftsPriceWithDirection | undefined;
        duration: number;
      };
    }
  /**
   * See [`Pallet::cancel_swap`].
   **/
  | { name: 'CancelSwap'; params: { offeredCollection: number; offeredItem: number } }
  /**
   * See [`Pallet::claim_swap`].
   **/
  | {
      name: 'ClaimSwap';
      params: {
        sendCollection: number;
        sendItem: number;
        receiveCollection: number;
        receiveItem: number;
        witnessPrice?: PalletNftsPriceWithDirection | undefined;
      };
    }
  /**
   * See [`Pallet::mint_pre_signed`].
   **/
  | {
      name: 'MintPreSigned';
      params: { mintData: PalletNftsPreSignedMint; signature: SpRuntimeMultiSignature; signer: AccountId32 };
    }
  /**
   * See [`Pallet::set_attributes_pre_signed`].
   **/
  | {
      name: 'SetAttributesPreSigned';
      params: { data: PalletNftsPreSignedAttributes; signature: SpRuntimeMultiSignature; signer: AccountId32 };
    };

export type PalletNftsCallLike =
  /**
   * See [`Pallet::create`].
   **/
  | { name: 'Create'; params: { admin: MultiAddressLike; config: PalletNftsCollectionConfig } }
  /**
   * See [`Pallet::force_create`].
   **/
  | { name: 'ForceCreate'; params: { owner: MultiAddressLike; config: PalletNftsCollectionConfig } }
  /**
   * See [`Pallet::destroy`].
   **/
  | { name: 'Destroy'; params: { collection: number; witness: PalletNftsDestroyWitness } }
  /**
   * See [`Pallet::mint`].
   **/
  | {
      name: 'Mint';
      params: {
        collection: number;
        item: number;
        mintTo: MultiAddressLike;
        witnessData?: PalletNftsMintWitness | undefined;
      };
    }
  /**
   * See [`Pallet::force_mint`].
   **/
  | {
      name: 'ForceMint';
      params: { collection: number; item: number; mintTo: MultiAddressLike; itemConfig: PalletNftsItemConfig };
    }
  /**
   * See [`Pallet::burn`].
   **/
  | { name: 'Burn'; params: { collection: number; item: number } }
  /**
   * See [`Pallet::transfer`].
   **/
  | { name: 'Transfer'; params: { collection: number; item: number; dest: MultiAddressLike } }
  /**
   * See [`Pallet::redeposit`].
   **/
  | { name: 'Redeposit'; params: { collection: number; items: Array<number> } }
  /**
   * See [`Pallet::lock_item_transfer`].
   **/
  | { name: 'LockItemTransfer'; params: { collection: number; item: number } }
  /**
   * See [`Pallet::unlock_item_transfer`].
   **/
  | { name: 'UnlockItemTransfer'; params: { collection: number; item: number } }
  /**
   * See [`Pallet::lock_collection`].
   **/
  | { name: 'LockCollection'; params: { collection: number; lockSettings: PalletNftsBitFlags } }
  /**
   * See [`Pallet::transfer_ownership`].
   **/
  | { name: 'TransferOwnership'; params: { collection: number; owner: MultiAddressLike } }
  /**
   * See [`Pallet::set_team`].
   **/
  | {
      name: 'SetTeam';
      params: {
        collection: number;
        issuer?: MultiAddressLike | undefined;
        admin?: MultiAddressLike | undefined;
        freezer?: MultiAddressLike | undefined;
      };
    }
  /**
   * See [`Pallet::force_collection_owner`].
   **/
  | { name: 'ForceCollectionOwner'; params: { collection: number; owner: MultiAddressLike } }
  /**
   * See [`Pallet::force_collection_config`].
   **/
  | { name: 'ForceCollectionConfig'; params: { collection: number; config: PalletNftsCollectionConfig } }
  /**
   * See [`Pallet::approve_transfer`].
   **/
  | {
      name: 'ApproveTransfer';
      params: { collection: number; item: number; delegate: MultiAddressLike; maybeDeadline?: number | undefined };
    }
  /**
   * See [`Pallet::cancel_approval`].
   **/
  | { name: 'CancelApproval'; params: { collection: number; item: number; delegate: MultiAddressLike } }
  /**
   * See [`Pallet::clear_all_transfer_approvals`].
   **/
  | { name: 'ClearAllTransferApprovals'; params: { collection: number; item: number } }
  /**
   * See [`Pallet::lock_item_properties`].
   **/
  | {
      name: 'LockItemProperties';
      params: { collection: number; item: number; lockMetadata: boolean; lockAttributes: boolean };
    }
  /**
   * See [`Pallet::set_attribute`].
   **/
  | {
      name: 'SetAttribute';
      params: {
        collection: number;
        maybeItem?: number | undefined;
        namespace: PalletNftsAttributeNamespace;
        key: BytesLike;
        value: BytesLike;
      };
    }
  /**
   * See [`Pallet::force_set_attribute`].
   **/
  | {
      name: 'ForceSetAttribute';
      params: {
        setAs?: AccountId32Like | undefined;
        collection: number;
        maybeItem?: number | undefined;
        namespace: PalletNftsAttributeNamespace;
        key: BytesLike;
        value: BytesLike;
      };
    }
  /**
   * See [`Pallet::clear_attribute`].
   **/
  | {
      name: 'ClearAttribute';
      params: {
        collection: number;
        maybeItem?: number | undefined;
        namespace: PalletNftsAttributeNamespace;
        key: BytesLike;
      };
    }
  /**
   * See [`Pallet::approve_item_attributes`].
   **/
  | { name: 'ApproveItemAttributes'; params: { collection: number; item: number; delegate: MultiAddressLike } }
  /**
   * See [`Pallet::cancel_item_attributes_approval`].
   **/
  | {
      name: 'CancelItemAttributesApproval';
      params: {
        collection: number;
        item: number;
        delegate: MultiAddressLike;
        witness: PalletNftsCancelAttributesApprovalWitness;
      };
    }
  /**
   * See [`Pallet::set_metadata`].
   **/
  | { name: 'SetMetadata'; params: { collection: number; item: number; data: BytesLike } }
  /**
   * See [`Pallet::clear_metadata`].
   **/
  | { name: 'ClearMetadata'; params: { collection: number; item: number } }
  /**
   * See [`Pallet::set_collection_metadata`].
   **/
  | { name: 'SetCollectionMetadata'; params: { collection: number; data: BytesLike } }
  /**
   * See [`Pallet::clear_collection_metadata`].
   **/
  | { name: 'ClearCollectionMetadata'; params: { collection: number } }
  /**
   * See [`Pallet::set_accept_ownership`].
   **/
  | { name: 'SetAcceptOwnership'; params: { maybeCollection?: number | undefined } }
  /**
   * See [`Pallet::set_collection_max_supply`].
   **/
  | { name: 'SetCollectionMaxSupply'; params: { collection: number; maxSupply: number } }
  /**
   * See [`Pallet::update_mint_settings`].
   **/
  | { name: 'UpdateMintSettings'; params: { collection: number; mintSettings: PalletNftsMintSettings } }
  /**
   * See [`Pallet::set_price`].
   **/
  | {
      name: 'SetPrice';
      params: {
        collection: number;
        item: number;
        price?: bigint | undefined;
        whitelistedBuyer?: MultiAddressLike | undefined;
      };
    }
  /**
   * See [`Pallet::buy_item`].
   **/
  | { name: 'BuyItem'; params: { collection: number; item: number; bidPrice: bigint } }
  /**
   * See [`Pallet::pay_tips`].
   **/
  | { name: 'PayTips'; params: { tips: Array<PalletNftsItemTip> } }
  /**
   * See [`Pallet::create_swap`].
   **/
  | {
      name: 'CreateSwap';
      params: {
        offeredCollection: number;
        offeredItem: number;
        desiredCollection: number;
        maybeDesiredItem?: number | undefined;
        maybePrice?: PalletNftsPriceWithDirection | undefined;
        duration: number;
      };
    }
  /**
   * See [`Pallet::cancel_swap`].
   **/
  | { name: 'CancelSwap'; params: { offeredCollection: number; offeredItem: number } }
  /**
   * See [`Pallet::claim_swap`].
   **/
  | {
      name: 'ClaimSwap';
      params: {
        sendCollection: number;
        sendItem: number;
        receiveCollection: number;
        receiveItem: number;
        witnessPrice?: PalletNftsPriceWithDirection | undefined;
      };
    }
  /**
   * See [`Pallet::mint_pre_signed`].
   **/
  | {
      name: 'MintPreSigned';
      params: { mintData: PalletNftsPreSignedMint; signature: SpRuntimeMultiSignature; signer: AccountId32Like };
    }
  /**
   * See [`Pallet::set_attributes_pre_signed`].
   **/
  | {
      name: 'SetAttributesPreSigned';
      params: { data: PalletNftsPreSignedAttributes; signature: SpRuntimeMultiSignature; signer: AccountId32Like };
    };

export type PalletNftsCollectionConfig = {
  settings: PalletNftsBitFlags;
  maxSupply?: number | undefined;
  mintSettings: PalletNftsMintSettings;
};

export type PalletNftsBitFlags = bigint;

export type PalletNftsCollectionSetting =
  | 'TransferableItems'
  | 'UnlockedMetadata'
  | 'UnlockedAttributes'
  | 'UnlockedMaxSupply'
  | 'DepositRequired';

export type PalletNftsMintSettings = {
  mintType: PalletNftsMintType;
  price?: bigint | undefined;
  startBlock?: number | undefined;
  endBlock?: number | undefined;
  defaultItemSettings: PalletNftsBitFlagsItemSetting;
};

export type PalletNftsMintType = { tag: 'Issuer' } | { tag: 'Public' } | { tag: 'HolderOf'; value: number };

export type PalletNftsBitFlagsItemSetting = bigint;

export type PalletNftsItemSetting = 'Transferable' | 'UnlockedMetadata' | 'UnlockedAttributes';

export type PalletNftsDestroyWitness = { itemMetadatas: number; itemConfigs: number; attributes: number };

export type PalletNftsMintWitness = { ownedItem?: number | undefined; mintPrice?: bigint | undefined };

export type PalletNftsItemConfig = { settings: PalletNftsBitFlagsItemSetting };

export type PalletNftsCancelAttributesApprovalWitness = { accountAttributes: number };

export type PalletNftsItemTip = { collection: number; item: number; receiver: AccountId32; amount: bigint };

export type PalletNftsPreSignedMint = {
  collection: number;
  item: number;
  attributes: Array<[Bytes, Bytes]>;
  metadata: Bytes;
  onlyAccount?: AccountId32 | undefined;
  deadline: number;
  mintPrice?: bigint | undefined;
};

export type SpRuntimeMultiSignature =
  | { tag: 'Ed25519'; value: SpCoreEd25519Signature }
  | { tag: 'Sr25519'; value: SpCoreSr25519Signature }
  | { tag: 'Ecdsa'; value: SpCoreEcdsaSignature };

export type SpCoreEcdsaSignature = FixedBytes<65>;

export type PalletNftsPreSignedAttributes = {
  collection: number;
  item: number;
  attributes: Array<[Bytes, Bytes]>;
  namespace: PalletNftsAttributeNamespace;
  deadline: number;
};

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletNftFractionalizationCall =
  /**
   * See [`Pallet::fractionalize`].
   **/
  | {
      name: 'Fractionalize';
      params: { nftCollectionId: number; nftId: number; assetId: number; beneficiary: MultiAddress; fractions: bigint };
    }
  /**
   * See [`Pallet::unify`].
   **/
  | { name: 'Unify'; params: { nftCollectionId: number; nftId: number; assetId: number; beneficiary: MultiAddress } };

export type PalletNftFractionalizationCallLike =
  /**
   * See [`Pallet::fractionalize`].
   **/
  | {
      name: 'Fractionalize';
      params: {
        nftCollectionId: number;
        nftId: number;
        assetId: number;
        beneficiary: MultiAddressLike;
        fractions: bigint;
      };
    }
  /**
   * See [`Pallet::unify`].
   **/
  | {
      name: 'Unify';
      params: { nftCollectionId: number; nftId: number; assetId: number; beneficiary: MultiAddressLike };
    };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletSalaryCall =
  /**
   * See [`Pallet::init`].
   **/
  | { name: 'Init' }
  /**
   * See [`Pallet::bump`].
   **/
  | { name: 'Bump' }
  /**
   * See [`Pallet::induct`].
   **/
  | { name: 'Induct' }
  /**
   * See [`Pallet::register`].
   **/
  | { name: 'Register' }
  /**
   * See [`Pallet::payout`].
   **/
  | { name: 'Payout' }
  /**
   * See [`Pallet::payout_other`].
   **/
  | { name: 'PayoutOther'; params: { beneficiary: AccountId32 } }
  /**
   * See [`Pallet::check_payment`].
   **/
  | { name: 'CheckPayment' };

export type PalletSalaryCallLike =
  /**
   * See [`Pallet::init`].
   **/
  | { name: 'Init' }
  /**
   * See [`Pallet::bump`].
   **/
  | { name: 'Bump' }
  /**
   * See [`Pallet::induct`].
   **/
  | { name: 'Induct' }
  /**
   * See [`Pallet::register`].
   **/
  | { name: 'Register' }
  /**
   * See [`Pallet::payout`].
   **/
  | { name: 'Payout' }
  /**
   * See [`Pallet::payout_other`].
   **/
  | { name: 'PayoutOther'; params: { beneficiary: AccountId32Like } }
  /**
   * See [`Pallet::check_payment`].
   **/
  | { name: 'CheckPayment' };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletCoreFellowshipCall =
  /**
   * See [`Pallet::bump`].
   **/
  | { name: 'Bump'; params: { who: AccountId32 } }
  /**
   * See [`Pallet::set_params`].
   **/
  | { name: 'SetParams'; params: { params: PalletCoreFellowshipParamsType } }
  /**
   * See [`Pallet::set_active`].
   **/
  | { name: 'SetActive'; params: { isActive: boolean } }
  /**
   * See [`Pallet::approve`].
   **/
  | { name: 'Approve'; params: { who: AccountId32; atRank: number } }
  /**
   * See [`Pallet::induct`].
   **/
  | { name: 'Induct'; params: { who: AccountId32 } }
  /**
   * See [`Pallet::promote`].
   **/
  | { name: 'Promote'; params: { who: AccountId32; toRank: number } }
  /**
   * See [`Pallet::offboard`].
   **/
  | { name: 'Offboard'; params: { who: AccountId32 } }
  /**
   * See [`Pallet::submit_evidence`].
   **/
  | { name: 'SubmitEvidence'; params: { wish: PalletCoreFellowshipWish; evidence: Bytes } }
  /**
   * See [`Pallet::import`].
   **/
  | { name: 'Import' };

export type PalletCoreFellowshipCallLike =
  /**
   * See [`Pallet::bump`].
   **/
  | { name: 'Bump'; params: { who: AccountId32Like } }
  /**
   * See [`Pallet::set_params`].
   **/
  | { name: 'SetParams'; params: { params: PalletCoreFellowshipParamsType } }
  /**
   * See [`Pallet::set_active`].
   **/
  | { name: 'SetActive'; params: { isActive: boolean } }
  /**
   * See [`Pallet::approve`].
   **/
  | { name: 'Approve'; params: { who: AccountId32Like; atRank: number } }
  /**
   * See [`Pallet::induct`].
   **/
  | { name: 'Induct'; params: { who: AccountId32Like } }
  /**
   * See [`Pallet::promote`].
   **/
  | { name: 'Promote'; params: { who: AccountId32Like; toRank: number } }
  /**
   * See [`Pallet::offboard`].
   **/
  | { name: 'Offboard'; params: { who: AccountId32Like } }
  /**
   * See [`Pallet::submit_evidence`].
   **/
  | { name: 'SubmitEvidence'; params: { wish: PalletCoreFellowshipWish; evidence: BytesLike } }
  /**
   * See [`Pallet::import`].
   **/
  | { name: 'Import' };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletTransactionStorageCall =
  /**
   * See [`Pallet::store`].
   **/
  | { name: 'Store'; params: { data: Bytes } }
  /**
   * See [`Pallet::renew`].
   **/
  | { name: 'Renew'; params: { block: number; index: number } }
  /**
   * See [`Pallet::check_proof`].
   **/
  | { name: 'CheckProof'; params: { proof: SpTransactionStorageProofTransactionStorageProof } };

export type PalletTransactionStorageCallLike =
  /**
   * See [`Pallet::store`].
   **/
  | { name: 'Store'; params: { data: BytesLike } }
  /**
   * See [`Pallet::renew`].
   **/
  | { name: 'Renew'; params: { block: number; index: number } }
  /**
   * See [`Pallet::check_proof`].
   **/
  | { name: 'CheckProof'; params: { proof: SpTransactionStorageProofTransactionStorageProof } };

export type SpTransactionStorageProofTransactionStorageProof = { chunk: Bytes; proof: Array<Bytes> };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletBagsListCall =
  /**
   * See [`Pallet::rebag`].
   **/
  | { name: 'Rebag'; params: { dislocated: MultiAddress } }
  /**
   * See [`Pallet::put_in_front_of`].
   **/
  | { name: 'PutInFrontOf'; params: { lighter: MultiAddress } }
  /**
   * See [`Pallet::put_in_front_of_other`].
   **/
  | { name: 'PutInFrontOfOther'; params: { heavier: MultiAddress; lighter: MultiAddress } };

export type PalletBagsListCallLike =
  /**
   * See [`Pallet::rebag`].
   **/
  | { name: 'Rebag'; params: { dislocated: MultiAddressLike } }
  /**
   * See [`Pallet::put_in_front_of`].
   **/
  | { name: 'PutInFrontOf'; params: { lighter: MultiAddressLike } }
  /**
   * See [`Pallet::put_in_front_of_other`].
   **/
  | { name: 'PutInFrontOfOther'; params: { heavier: MultiAddressLike; lighter: MultiAddressLike } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletStateTrieMigrationCall =
  /**
   * See [`Pallet::control_auto_migration`].
   **/
  | { name: 'ControlAutoMigration'; params: { maybeConfig?: PalletStateTrieMigrationMigrationLimits | undefined } }
  /**
   * See [`Pallet::continue_migrate`].
   **/
  | {
      name: 'ContinueMigrate';
      params: {
        limits: PalletStateTrieMigrationMigrationLimits;
        realSizeUpper: number;
        witnessTask: PalletStateTrieMigrationMigrationTask;
      };
    }
  /**
   * See [`Pallet::migrate_custom_top`].
   **/
  | { name: 'MigrateCustomTop'; params: { keys: Array<Bytes>; witnessSize: number } }
  /**
   * See [`Pallet::migrate_custom_child`].
   **/
  | { name: 'MigrateCustomChild'; params: { root: Bytes; childKeys: Array<Bytes>; totalSize: number } }
  /**
   * See [`Pallet::set_signed_max_limits`].
   **/
  | { name: 'SetSignedMaxLimits'; params: { limits: PalletStateTrieMigrationMigrationLimits } }
  /**
   * See [`Pallet::force_set_progress`].
   **/
  | {
      name: 'ForceSetProgress';
      params: { progressTop: PalletStateTrieMigrationProgress; progressChild: PalletStateTrieMigrationProgress };
    };

export type PalletStateTrieMigrationCallLike =
  /**
   * See [`Pallet::control_auto_migration`].
   **/
  | { name: 'ControlAutoMigration'; params: { maybeConfig?: PalletStateTrieMigrationMigrationLimits | undefined } }
  /**
   * See [`Pallet::continue_migrate`].
   **/
  | {
      name: 'ContinueMigrate';
      params: {
        limits: PalletStateTrieMigrationMigrationLimits;
        realSizeUpper: number;
        witnessTask: PalletStateTrieMigrationMigrationTask;
      };
    }
  /**
   * See [`Pallet::migrate_custom_top`].
   **/
  | { name: 'MigrateCustomTop'; params: { keys: Array<BytesLike>; witnessSize: number } }
  /**
   * See [`Pallet::migrate_custom_child`].
   **/
  | { name: 'MigrateCustomChild'; params: { root: BytesLike; childKeys: Array<BytesLike>; totalSize: number } }
  /**
   * See [`Pallet::set_signed_max_limits`].
   **/
  | { name: 'SetSignedMaxLimits'; params: { limits: PalletStateTrieMigrationMigrationLimits } }
  /**
   * See [`Pallet::force_set_progress`].
   **/
  | {
      name: 'ForceSetProgress';
      params: { progressTop: PalletStateTrieMigrationProgress; progressChild: PalletStateTrieMigrationProgress };
    };

export type PalletStateTrieMigrationMigrationLimits = { size: number; item: number };

export type PalletStateTrieMigrationMigrationTask = {
  progressTop: PalletStateTrieMigrationProgress;
  progressChild: PalletStateTrieMigrationProgress;
  size: number;
  topItems: number;
  childItems: number;
};

export type PalletStateTrieMigrationProgress =
  | { tag: 'ToStart' }
  | { tag: 'LastKey'; value: Bytes }
  | { tag: 'Complete' };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletChildBountiesCall =
  /**
   * See [`Pallet::add_child_bounty`].
   **/
  | { name: 'AddChildBounty'; params: { parentBountyId: number; value: bigint; description: Bytes } }
  /**
   * See [`Pallet::propose_curator`].
   **/
  | {
      name: 'ProposeCurator';
      params: { parentBountyId: number; childBountyId: number; curator: MultiAddress; fee: bigint };
    }
  /**
   * See [`Pallet::accept_curator`].
   **/
  | { name: 'AcceptCurator'; params: { parentBountyId: number; childBountyId: number } }
  /**
   * See [`Pallet::unassign_curator`].
   **/
  | { name: 'UnassignCurator'; params: { parentBountyId: number; childBountyId: number } }
  /**
   * See [`Pallet::award_child_bounty`].
   **/
  | { name: 'AwardChildBounty'; params: { parentBountyId: number; childBountyId: number; beneficiary: MultiAddress } }
  /**
   * See [`Pallet::claim_child_bounty`].
   **/
  | { name: 'ClaimChildBounty'; params: { parentBountyId: number; childBountyId: number } }
  /**
   * See [`Pallet::close_child_bounty`].
   **/
  | { name: 'CloseChildBounty'; params: { parentBountyId: number; childBountyId: number } };

export type PalletChildBountiesCallLike =
  /**
   * See [`Pallet::add_child_bounty`].
   **/
  | { name: 'AddChildBounty'; params: { parentBountyId: number; value: bigint; description: BytesLike } }
  /**
   * See [`Pallet::propose_curator`].
   **/
  | {
      name: 'ProposeCurator';
      params: { parentBountyId: number; childBountyId: number; curator: MultiAddressLike; fee: bigint };
    }
  /**
   * See [`Pallet::accept_curator`].
   **/
  | { name: 'AcceptCurator'; params: { parentBountyId: number; childBountyId: number } }
  /**
   * See [`Pallet::unassign_curator`].
   **/
  | { name: 'UnassignCurator'; params: { parentBountyId: number; childBountyId: number } }
  /**
   * See [`Pallet::award_child_bounty`].
   **/
  | {
      name: 'AwardChildBounty';
      params: { parentBountyId: number; childBountyId: number; beneficiary: MultiAddressLike };
    }
  /**
   * See [`Pallet::claim_child_bounty`].
   **/
  | { name: 'ClaimChildBounty'; params: { parentBountyId: number; childBountyId: number } }
  /**
   * See [`Pallet::close_child_bounty`].
   **/
  | { name: 'CloseChildBounty'; params: { parentBountyId: number; childBountyId: number } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletReferendaCall =
  /**
   * See [`Pallet::submit`].
   **/
  | {
      name: 'Submit';
      params: {
        proposalOrigin: KitchensinkRuntimeOriginCaller;
        proposal: FrameSupportPreimagesBounded;
        enactmentMoment: FrameSupportScheduleDispatchTime;
      };
    }
  /**
   * See [`Pallet::place_decision_deposit`].
   **/
  | { name: 'PlaceDecisionDeposit'; params: { index: number } }
  /**
   * See [`Pallet::refund_decision_deposit`].
   **/
  | { name: 'RefundDecisionDeposit'; params: { index: number } }
  /**
   * See [`Pallet::cancel`].
   **/
  | { name: 'Cancel'; params: { index: number } }
  /**
   * See [`Pallet::kill`].
   **/
  | { name: 'Kill'; params: { index: number } }
  /**
   * See [`Pallet::nudge_referendum`].
   **/
  | { name: 'NudgeReferendum'; params: { index: number } }
  /**
   * See [`Pallet::one_fewer_deciding`].
   **/
  | { name: 'OneFewerDeciding'; params: { track: number } }
  /**
   * See [`Pallet::refund_submission_deposit`].
   **/
  | { name: 'RefundSubmissionDeposit'; params: { index: number } }
  /**
   * See [`Pallet::set_metadata`].
   **/
  | { name: 'SetMetadata'; params: { index: number; maybeHash?: H256 | undefined } };

export type PalletReferendaCallLike =
  /**
   * See [`Pallet::submit`].
   **/
  | {
      name: 'Submit';
      params: {
        proposalOrigin: KitchensinkRuntimeOriginCaller;
        proposal: FrameSupportPreimagesBounded;
        enactmentMoment: FrameSupportScheduleDispatchTime;
      };
    }
  /**
   * See [`Pallet::place_decision_deposit`].
   **/
  | { name: 'PlaceDecisionDeposit'; params: { index: number } }
  /**
   * See [`Pallet::refund_decision_deposit`].
   **/
  | { name: 'RefundDecisionDeposit'; params: { index: number } }
  /**
   * See [`Pallet::cancel`].
   **/
  | { name: 'Cancel'; params: { index: number } }
  /**
   * See [`Pallet::kill`].
   **/
  | { name: 'Kill'; params: { index: number } }
  /**
   * See [`Pallet::nudge_referendum`].
   **/
  | { name: 'NudgeReferendum'; params: { index: number } }
  /**
   * See [`Pallet::one_fewer_deciding`].
   **/
  | { name: 'OneFewerDeciding'; params: { track: number } }
  /**
   * See [`Pallet::refund_submission_deposit`].
   **/
  | { name: 'RefundSubmissionDeposit'; params: { index: number } }
  /**
   * See [`Pallet::set_metadata`].
   **/
  | { name: 'SetMetadata'; params: { index: number; maybeHash?: H256 | undefined } };

export type FrameSupportScheduleDispatchTime = { tag: 'At'; value: number } | { tag: 'After'; value: number };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletRemarkCall =
  /**
   * See [`Pallet::store`].
   **/
  { name: 'Store'; params: { remark: Bytes } };

export type PalletRemarkCallLike =
  /**
   * See [`Pallet::store`].
   **/
  { name: 'Store'; params: { remark: BytesLike } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletRootTestingCall =
  /**
   * See [`Pallet::fill_block`].
   **/
  { name: 'FillBlock'; params: { ratio: Perbill } };

export type PalletRootTestingCallLike =
  /**
   * See [`Pallet::fill_block`].
   **/
  { name: 'FillBlock'; params: { ratio: Perbill } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletConvictionVotingCall =
  /**
   * See [`Pallet::vote`].
   **/
  | { name: 'Vote'; params: { pollIndex: number; vote: PalletConvictionVotingVoteAccountVote } }
  /**
   * See [`Pallet::delegate`].
   **/
  | {
      name: 'Delegate';
      params: { class: number; to: MultiAddress; conviction: PalletConvictionVotingConviction; balance: bigint };
    }
  /**
   * See [`Pallet::undelegate`].
   **/
  | { name: 'Undelegate'; params: { class: number } }
  /**
   * See [`Pallet::unlock`].
   **/
  | { name: 'Unlock'; params: { class: number; target: MultiAddress } }
  /**
   * See [`Pallet::remove_vote`].
   **/
  | { name: 'RemoveVote'; params: { class?: number | undefined; index: number } }
  /**
   * See [`Pallet::remove_other_vote`].
   **/
  | { name: 'RemoveOtherVote'; params: { target: MultiAddress; class: number; index: number } };

export type PalletConvictionVotingCallLike =
  /**
   * See [`Pallet::vote`].
   **/
  | { name: 'Vote'; params: { pollIndex: number; vote: PalletConvictionVotingVoteAccountVote } }
  /**
   * See [`Pallet::delegate`].
   **/
  | {
      name: 'Delegate';
      params: { class: number; to: MultiAddressLike; conviction: PalletConvictionVotingConviction; balance: bigint };
    }
  /**
   * See [`Pallet::undelegate`].
   **/
  | { name: 'Undelegate'; params: { class: number } }
  /**
   * See [`Pallet::unlock`].
   **/
  | { name: 'Unlock'; params: { class: number; target: MultiAddressLike } }
  /**
   * See [`Pallet::remove_vote`].
   **/
  | { name: 'RemoveVote'; params: { class?: number | undefined; index: number } }
  /**
   * See [`Pallet::remove_other_vote`].
   **/
  | { name: 'RemoveOtherVote'; params: { target: MultiAddressLike; class: number; index: number } };

export type PalletConvictionVotingVoteAccountVote =
  | { tag: 'Standard'; value: { vote: PalletConvictionVotingVote; balance: bigint } }
  | { tag: 'Split'; value: { aye: bigint; nay: bigint } }
  | { tag: 'SplitAbstain'; value: { aye: bigint; nay: bigint; abstain: bigint } };

export type PalletConvictionVotingVote = number;

export type PalletConvictionVotingConviction =
  | 'None'
  | 'Locked1x'
  | 'Locked2x'
  | 'Locked3x'
  | 'Locked4x'
  | 'Locked5x'
  | 'Locked6x';

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletWhitelistCall =
  /**
   * See [`Pallet::whitelist_call`].
   **/
  | { name: 'WhitelistCall'; params: { callHash: H256 } }
  /**
   * See [`Pallet::remove_whitelisted_call`].
   **/
  | { name: 'RemoveWhitelistedCall'; params: { callHash: H256 } }
  /**
   * See [`Pallet::dispatch_whitelisted_call`].
   **/
  | {
      name: 'DispatchWhitelistedCall';
      params: { callHash: H256; callEncodedLen: number; callWeightWitness: SpWeightsWeightV2Weight };
    }
  /**
   * See [`Pallet::dispatch_whitelisted_call_with_preimage`].
   **/
  | { name: 'DispatchWhitelistedCallWithPreimage'; params: { call: KitchensinkRuntimeRuntimeCall } };

export type PalletWhitelistCallLike =
  /**
   * See [`Pallet::whitelist_call`].
   **/
  | { name: 'WhitelistCall'; params: { callHash: H256 } }
  /**
   * See [`Pallet::remove_whitelisted_call`].
   **/
  | { name: 'RemoveWhitelistedCall'; params: { callHash: H256 } }
  /**
   * See [`Pallet::dispatch_whitelisted_call`].
   **/
  | {
      name: 'DispatchWhitelistedCall';
      params: { callHash: H256; callEncodedLen: number; callWeightWitness: SpWeightsWeightV2Weight };
    }
  /**
   * See [`Pallet::dispatch_whitelisted_call_with_preimage`].
   **/
  | { name: 'DispatchWhitelistedCallWithPreimage'; params: { call: KitchensinkRuntimeRuntimeCallLike } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletAllianceCall =
  /**
   * See [`Pallet::propose`].
   **/
  | { name: 'Propose'; params: { threshold: number; proposal: KitchensinkRuntimeRuntimeCall; lengthBound: number } }
  /**
   * See [`Pallet::vote`].
   **/
  | { name: 'Vote'; params: { proposal: H256; index: number; approve: boolean } }
  /**
   * See [`Pallet::init_members`].
   **/
  | { name: 'InitMembers'; params: { fellows: Array<AccountId32>; allies: Array<AccountId32> } }
  /**
   * See [`Pallet::disband`].
   **/
  | { name: 'Disband'; params: { witness: PalletAllianceDisbandWitness } }
  /**
   * See [`Pallet::set_rule`].
   **/
  | { name: 'SetRule'; params: { rule: PalletAllianceCid } }
  /**
   * See [`Pallet::announce`].
   **/
  | { name: 'Announce'; params: { announcement: PalletAllianceCid } }
  /**
   * See [`Pallet::remove_announcement`].
   **/
  | { name: 'RemoveAnnouncement'; params: { announcement: PalletAllianceCid } }
  /**
   * See [`Pallet::join_alliance`].
   **/
  | { name: 'JoinAlliance' }
  /**
   * See [`Pallet::nominate_ally`].
   **/
  | { name: 'NominateAlly'; params: { who: MultiAddress } }
  /**
   * See [`Pallet::elevate_ally`].
   **/
  | { name: 'ElevateAlly'; params: { ally: MultiAddress } }
  /**
   * See [`Pallet::give_retirement_notice`].
   **/
  | { name: 'GiveRetirementNotice' }
  /**
   * See [`Pallet::retire`].
   **/
  | { name: 'Retire' }
  /**
   * See [`Pallet::kick_member`].
   **/
  | { name: 'KickMember'; params: { who: MultiAddress } }
  /**
   * See [`Pallet::add_unscrupulous_items`].
   **/
  | { name: 'AddUnscrupulousItems'; params: { items: Array<PalletAllianceUnscrupulousItem> } }
  /**
   * See [`Pallet::remove_unscrupulous_items`].
   **/
  | { name: 'RemoveUnscrupulousItems'; params: { items: Array<PalletAllianceUnscrupulousItem> } }
  /**
   * See [`Pallet::close`].
   **/
  | {
      name: 'Close';
      params: { proposalHash: H256; index: number; proposalWeightBound: SpWeightsWeightV2Weight; lengthBound: number };
    }
  /**
   * See [`Pallet::abdicate_fellow_status`].
   **/
  | { name: 'AbdicateFellowStatus' };

export type PalletAllianceCallLike =
  /**
   * See [`Pallet::propose`].
   **/
  | { name: 'Propose'; params: { threshold: number; proposal: KitchensinkRuntimeRuntimeCallLike; lengthBound: number } }
  /**
   * See [`Pallet::vote`].
   **/
  | { name: 'Vote'; params: { proposal: H256; index: number; approve: boolean } }
  /**
   * See [`Pallet::init_members`].
   **/
  | { name: 'InitMembers'; params: { fellows: Array<AccountId32Like>; allies: Array<AccountId32Like> } }
  /**
   * See [`Pallet::disband`].
   **/
  | { name: 'Disband'; params: { witness: PalletAllianceDisbandWitness } }
  /**
   * See [`Pallet::set_rule`].
   **/
  | { name: 'SetRule'; params: { rule: PalletAllianceCid } }
  /**
   * See [`Pallet::announce`].
   **/
  | { name: 'Announce'; params: { announcement: PalletAllianceCid } }
  /**
   * See [`Pallet::remove_announcement`].
   **/
  | { name: 'RemoveAnnouncement'; params: { announcement: PalletAllianceCid } }
  /**
   * See [`Pallet::join_alliance`].
   **/
  | { name: 'JoinAlliance' }
  /**
   * See [`Pallet::nominate_ally`].
   **/
  | { name: 'NominateAlly'; params: { who: MultiAddressLike } }
  /**
   * See [`Pallet::elevate_ally`].
   **/
  | { name: 'ElevateAlly'; params: { ally: MultiAddressLike } }
  /**
   * See [`Pallet::give_retirement_notice`].
   **/
  | { name: 'GiveRetirementNotice' }
  /**
   * See [`Pallet::retire`].
   **/
  | { name: 'Retire' }
  /**
   * See [`Pallet::kick_member`].
   **/
  | { name: 'KickMember'; params: { who: MultiAddressLike } }
  /**
   * See [`Pallet::add_unscrupulous_items`].
   **/
  | { name: 'AddUnscrupulousItems'; params: { items: Array<PalletAllianceUnscrupulousItem> } }
  /**
   * See [`Pallet::remove_unscrupulous_items`].
   **/
  | { name: 'RemoveUnscrupulousItems'; params: { items: Array<PalletAllianceUnscrupulousItem> } }
  /**
   * See [`Pallet::close`].
   **/
  | {
      name: 'Close';
      params: { proposalHash: H256; index: number; proposalWeightBound: SpWeightsWeightV2Weight; lengthBound: number };
    }
  /**
   * See [`Pallet::abdicate_fellow_status`].
   **/
  | { name: 'AbdicateFellowStatus' };

export type PalletAllianceDisbandWitness = { fellowMembers: number; allyMembers: number };

export type PalletAllianceCid = { version: PalletAllianceVersion; codec: bigint; hash: PalletAllianceMultihash };

export type PalletAllianceVersion = 'V0' | 'V1';

export type PalletAllianceMultihash = { code: bigint; digest: Bytes };

export type PalletAllianceUnscrupulousItem =
  | { tag: 'AccountId'; value: AccountId32 }
  | { tag: 'Website'; value: Bytes };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletNominationPoolsCall =
  /**
   * See [`Pallet::join`].
   **/
  | { name: 'Join'; params: { amount: bigint; poolId: number } }
  /**
   * See [`Pallet::bond_extra`].
   **/
  | { name: 'BondExtra'; params: { extra: PalletNominationPoolsBondExtra } }
  /**
   * See [`Pallet::claim_payout`].
   **/
  | { name: 'ClaimPayout' }
  /**
   * See [`Pallet::unbond`].
   **/
  | { name: 'Unbond'; params: { memberAccount: MultiAddress; unbondingPoints: bigint } }
  /**
   * See [`Pallet::pool_withdraw_unbonded`].
   **/
  | { name: 'PoolWithdrawUnbonded'; params: { poolId: number; numSlashingSpans: number } }
  /**
   * See [`Pallet::withdraw_unbonded`].
   **/
  | { name: 'WithdrawUnbonded'; params: { memberAccount: MultiAddress; numSlashingSpans: number } }
  /**
   * See [`Pallet::create`].
   **/
  | { name: 'Create'; params: { amount: bigint; root: MultiAddress; nominator: MultiAddress; bouncer: MultiAddress } }
  /**
   * See [`Pallet::create_with_pool_id`].
   **/
  | {
      name: 'CreateWithPoolId';
      params: { amount: bigint; root: MultiAddress; nominator: MultiAddress; bouncer: MultiAddress; poolId: number };
    }
  /**
   * See [`Pallet::nominate`].
   **/
  | { name: 'Nominate'; params: { poolId: number; validators: Array<AccountId32> } }
  /**
   * See [`Pallet::set_state`].
   **/
  | { name: 'SetState'; params: { poolId: number; state: PalletNominationPoolsPoolState } }
  /**
   * See [`Pallet::set_metadata`].
   **/
  | { name: 'SetMetadata'; params: { poolId: number; metadata: Bytes } }
  /**
   * See [`Pallet::set_configs`].
   **/
  | {
      name: 'SetConfigs';
      params: {
        minJoinBond: PalletNominationPoolsConfigOp;
        minCreateBond: PalletNominationPoolsConfigOp;
        maxPools: PalletNominationPoolsConfigOpU32;
        maxMembers: PalletNominationPoolsConfigOpU32;
        maxMembersPerPool: PalletNominationPoolsConfigOpU32;
        globalMaxCommission: PalletNominationPoolsConfigOpPerbill;
      };
    }
  /**
   * See [`Pallet::update_roles`].
   **/
  | {
      name: 'UpdateRoles';
      params: {
        poolId: number;
        newRoot: PalletNominationPoolsConfigOp004;
        newNominator: PalletNominationPoolsConfigOp004;
        newBouncer: PalletNominationPoolsConfigOp004;
      };
    }
  /**
   * See [`Pallet::chill`].
   **/
  | { name: 'Chill'; params: { poolId: number } }
  /**
   * See [`Pallet::bond_extra_other`].
   **/
  | { name: 'BondExtraOther'; params: { member: MultiAddress; extra: PalletNominationPoolsBondExtra } }
  /**
   * See [`Pallet::set_claim_permission`].
   **/
  | { name: 'SetClaimPermission'; params: { permission: PalletNominationPoolsClaimPermission } }
  /**
   * See [`Pallet::claim_payout_other`].
   **/
  | { name: 'ClaimPayoutOther'; params: { other: AccountId32 } }
  /**
   * See [`Pallet::set_commission`].
   **/
  | { name: 'SetCommission'; params: { poolId: number; newCommission?: [Perbill, AccountId32] | undefined } }
  /**
   * See [`Pallet::set_commission_max`].
   **/
  | { name: 'SetCommissionMax'; params: { poolId: number; maxCommission: Perbill } }
  /**
   * See [`Pallet::set_commission_change_rate`].
   **/
  | {
      name: 'SetCommissionChangeRate';
      params: { poolId: number; changeRate: PalletNominationPoolsCommissionChangeRate };
    }
  /**
   * See [`Pallet::claim_commission`].
   **/
  | { name: 'ClaimCommission'; params: { poolId: number } };

export type PalletNominationPoolsCallLike =
  /**
   * See [`Pallet::join`].
   **/
  | { name: 'Join'; params: { amount: bigint; poolId: number } }
  /**
   * See [`Pallet::bond_extra`].
   **/
  | { name: 'BondExtra'; params: { extra: PalletNominationPoolsBondExtra } }
  /**
   * See [`Pallet::claim_payout`].
   **/
  | { name: 'ClaimPayout' }
  /**
   * See [`Pallet::unbond`].
   **/
  | { name: 'Unbond'; params: { memberAccount: MultiAddressLike; unbondingPoints: bigint } }
  /**
   * See [`Pallet::pool_withdraw_unbonded`].
   **/
  | { name: 'PoolWithdrawUnbonded'; params: { poolId: number; numSlashingSpans: number } }
  /**
   * See [`Pallet::withdraw_unbonded`].
   **/
  | { name: 'WithdrawUnbonded'; params: { memberAccount: MultiAddressLike; numSlashingSpans: number } }
  /**
   * See [`Pallet::create`].
   **/
  | {
      name: 'Create';
      params: { amount: bigint; root: MultiAddressLike; nominator: MultiAddressLike; bouncer: MultiAddressLike };
    }
  /**
   * See [`Pallet::create_with_pool_id`].
   **/
  | {
      name: 'CreateWithPoolId';
      params: {
        amount: bigint;
        root: MultiAddressLike;
        nominator: MultiAddressLike;
        bouncer: MultiAddressLike;
        poolId: number;
      };
    }
  /**
   * See [`Pallet::nominate`].
   **/
  | { name: 'Nominate'; params: { poolId: number; validators: Array<AccountId32Like> } }
  /**
   * See [`Pallet::set_state`].
   **/
  | { name: 'SetState'; params: { poolId: number; state: PalletNominationPoolsPoolState } }
  /**
   * See [`Pallet::set_metadata`].
   **/
  | { name: 'SetMetadata'; params: { poolId: number; metadata: BytesLike } }
  /**
   * See [`Pallet::set_configs`].
   **/
  | {
      name: 'SetConfigs';
      params: {
        minJoinBond: PalletNominationPoolsConfigOp;
        minCreateBond: PalletNominationPoolsConfigOp;
        maxPools: PalletNominationPoolsConfigOpU32;
        maxMembers: PalletNominationPoolsConfigOpU32;
        maxMembersPerPool: PalletNominationPoolsConfigOpU32;
        globalMaxCommission: PalletNominationPoolsConfigOpPerbill;
      };
    }
  /**
   * See [`Pallet::update_roles`].
   **/
  | {
      name: 'UpdateRoles';
      params: {
        poolId: number;
        newRoot: PalletNominationPoolsConfigOp004;
        newNominator: PalletNominationPoolsConfigOp004;
        newBouncer: PalletNominationPoolsConfigOp004;
      };
    }
  /**
   * See [`Pallet::chill`].
   **/
  | { name: 'Chill'; params: { poolId: number } }
  /**
   * See [`Pallet::bond_extra_other`].
   **/
  | { name: 'BondExtraOther'; params: { member: MultiAddressLike; extra: PalletNominationPoolsBondExtra } }
  /**
   * See [`Pallet::set_claim_permission`].
   **/
  | { name: 'SetClaimPermission'; params: { permission: PalletNominationPoolsClaimPermission } }
  /**
   * See [`Pallet::claim_payout_other`].
   **/
  | { name: 'ClaimPayoutOther'; params: { other: AccountId32Like } }
  /**
   * See [`Pallet::set_commission`].
   **/
  | { name: 'SetCommission'; params: { poolId: number; newCommission?: [Perbill, AccountId32Like] | undefined } }
  /**
   * See [`Pallet::set_commission_max`].
   **/
  | { name: 'SetCommissionMax'; params: { poolId: number; maxCommission: Perbill } }
  /**
   * See [`Pallet::set_commission_change_rate`].
   **/
  | {
      name: 'SetCommissionChangeRate';
      params: { poolId: number; changeRate: PalletNominationPoolsCommissionChangeRate };
    }
  /**
   * See [`Pallet::claim_commission`].
   **/
  | { name: 'ClaimCommission'; params: { poolId: number } };

export type PalletNominationPoolsBondExtra = { tag: 'FreeBalance'; value: bigint } | { tag: 'Rewards' };

export type PalletNominationPoolsPoolState = 'Open' | 'Blocked' | 'Destroying';

export type PalletNominationPoolsConfigOp = { tag: 'Noop' } | { tag: 'Set'; value: bigint } | { tag: 'Remove' };

export type PalletNominationPoolsConfigOpU32 = { tag: 'Noop' } | { tag: 'Set'; value: number } | { tag: 'Remove' };

export type PalletNominationPoolsConfigOpPerbill = { tag: 'Noop' } | { tag: 'Set'; value: Perbill } | { tag: 'Remove' };

export type PalletNominationPoolsConfigOp004 = { tag: 'Noop' } | { tag: 'Set'; value: AccountId32 } | { tag: 'Remove' };

export type PalletNominationPoolsClaimPermission =
  | 'Permissioned'
  | 'PermissionlessCompound'
  | 'PermissionlessWithdraw'
  | 'PermissionlessAll';

export type PalletNominationPoolsCommissionChangeRate = { maxIncrease: Perbill; minDelay: number };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletRankedCollectiveCall =
  /**
   * See [`Pallet::add_member`].
   **/
  | { name: 'AddMember'; params: { who: MultiAddress } }
  /**
   * See [`Pallet::promote_member`].
   **/
  | { name: 'PromoteMember'; params: { who: MultiAddress } }
  /**
   * See [`Pallet::demote_member`].
   **/
  | { name: 'DemoteMember'; params: { who: MultiAddress } }
  /**
   * See [`Pallet::remove_member`].
   **/
  | { name: 'RemoveMember'; params: { who: MultiAddress; minRank: number } }
  /**
   * See [`Pallet::vote`].
   **/
  | { name: 'Vote'; params: { poll: number; aye: boolean } }
  /**
   * See [`Pallet::cleanup_poll`].
   **/
  | { name: 'CleanupPoll'; params: { pollIndex: number; max: number } };

export type PalletRankedCollectiveCallLike =
  /**
   * See [`Pallet::add_member`].
   **/
  | { name: 'AddMember'; params: { who: MultiAddressLike } }
  /**
   * See [`Pallet::promote_member`].
   **/
  | { name: 'PromoteMember'; params: { who: MultiAddressLike } }
  /**
   * See [`Pallet::demote_member`].
   **/
  | { name: 'DemoteMember'; params: { who: MultiAddressLike } }
  /**
   * See [`Pallet::remove_member`].
   **/
  | { name: 'RemoveMember'; params: { who: MultiAddressLike; minRank: number } }
  /**
   * See [`Pallet::vote`].
   **/
  | { name: 'Vote'; params: { poll: number; aye: boolean } }
  /**
   * See [`Pallet::cleanup_poll`].
   **/
  | { name: 'CleanupPoll'; params: { pollIndex: number; max: number } };

/**
 * Pallet's callable functions.
 **/
export type PalletAssetConversionCall =
  /**
   * See [`Pallet::create_pool`].
   **/
  | {
      name: 'CreatePool';
      params: { asset1: PalletAssetConversionNativeOrAssetId; asset2: PalletAssetConversionNativeOrAssetId };
    }
  /**
   * See [`Pallet::add_liquidity`].
   **/
  | {
      name: 'AddLiquidity';
      params: {
        asset1: PalletAssetConversionNativeOrAssetId;
        asset2: PalletAssetConversionNativeOrAssetId;
        amount1Desired: bigint;
        amount2Desired: bigint;
        amount1Min: bigint;
        amount2Min: bigint;
        mintTo: AccountId32;
      };
    }
  /**
   * See [`Pallet::remove_liquidity`].
   **/
  | {
      name: 'RemoveLiquidity';
      params: {
        asset1: PalletAssetConversionNativeOrAssetId;
        asset2: PalletAssetConversionNativeOrAssetId;
        lpTokenBurn: bigint;
        amount1MinReceive: bigint;
        amount2MinReceive: bigint;
        withdrawTo: AccountId32;
      };
    }
  /**
   * See [`Pallet::swap_exact_tokens_for_tokens`].
   **/
  | {
      name: 'SwapExactTokensForTokens';
      params: {
        path: Array<PalletAssetConversionNativeOrAssetId>;
        amountIn: bigint;
        amountOutMin: bigint;
        sendTo: AccountId32;
        keepAlive: boolean;
      };
    }
  /**
   * See [`Pallet::swap_tokens_for_exact_tokens`].
   **/
  | {
      name: 'SwapTokensForExactTokens';
      params: {
        path: Array<PalletAssetConversionNativeOrAssetId>;
        amountOut: bigint;
        amountInMax: bigint;
        sendTo: AccountId32;
        keepAlive: boolean;
      };
    };

export type PalletAssetConversionCallLike =
  /**
   * See [`Pallet::create_pool`].
   **/
  | {
      name: 'CreatePool';
      params: { asset1: PalletAssetConversionNativeOrAssetId; asset2: PalletAssetConversionNativeOrAssetId };
    }
  /**
   * See [`Pallet::add_liquidity`].
   **/
  | {
      name: 'AddLiquidity';
      params: {
        asset1: PalletAssetConversionNativeOrAssetId;
        asset2: PalletAssetConversionNativeOrAssetId;
        amount1Desired: bigint;
        amount2Desired: bigint;
        amount1Min: bigint;
        amount2Min: bigint;
        mintTo: AccountId32Like;
      };
    }
  /**
   * See [`Pallet::remove_liquidity`].
   **/
  | {
      name: 'RemoveLiquidity';
      params: {
        asset1: PalletAssetConversionNativeOrAssetId;
        asset2: PalletAssetConversionNativeOrAssetId;
        lpTokenBurn: bigint;
        amount1MinReceive: bigint;
        amount2MinReceive: bigint;
        withdrawTo: AccountId32Like;
      };
    }
  /**
   * See [`Pallet::swap_exact_tokens_for_tokens`].
   **/
  | {
      name: 'SwapExactTokensForTokens';
      params: {
        path: Array<PalletAssetConversionNativeOrAssetId>;
        amountIn: bigint;
        amountOutMin: bigint;
        sendTo: AccountId32Like;
        keepAlive: boolean;
      };
    }
  /**
   * See [`Pallet::swap_tokens_for_exact_tokens`].
   **/
  | {
      name: 'SwapTokensForExactTokens';
      params: {
        path: Array<PalletAssetConversionNativeOrAssetId>;
        amountOut: bigint;
        amountInMax: bigint;
        sendTo: AccountId32Like;
        keepAlive: boolean;
      };
    };

export type PalletAssetConversionNativeOrAssetId = { tag: 'Native' } | { tag: 'Asset'; value: number };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletFastUnstakeCall =
  /**
   * See [`Pallet::register_fast_unstake`].
   **/
  | { name: 'RegisterFastUnstake' }
  /**
   * See [`Pallet::deregister`].
   **/
  | { name: 'Deregister' }
  /**
   * See [`Pallet::control`].
   **/
  | { name: 'Control'; params: { erasToCheck: number } };

export type PalletFastUnstakeCallLike =
  /**
   * See [`Pallet::register_fast_unstake`].
   **/
  | { name: 'RegisterFastUnstake' }
  /**
   * See [`Pallet::deregister`].
   **/
  | { name: 'Deregister' }
  /**
   * See [`Pallet::control`].
   **/
  | { name: 'Control'; params: { erasToCheck: number } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletMessageQueueCall =
  /**
   * See [`Pallet::reap_page`].
   **/
  | { name: 'ReapPage'; params: { messageOrigin: number; pageIndex: number } }
  /**
   * See [`Pallet::execute_overweight`].
   **/
  | {
      name: 'ExecuteOverweight';
      params: { messageOrigin: number; page: number; index: number; weightLimit: SpWeightsWeightV2Weight };
    };

export type PalletMessageQueueCallLike =
  /**
   * See [`Pallet::reap_page`].
   **/
  | { name: 'ReapPage'; params: { messageOrigin: number; pageIndex: number } }
  /**
   * See [`Pallet::execute_overweight`].
   **/
  | {
      name: 'ExecuteOverweight';
      params: { messageOrigin: number; page: number; index: number; weightLimit: SpWeightsWeightV2Weight };
    };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type FrameBenchmarkingPalletPovCall =
  /**
   * See [`Pallet::emit_event`].
   **/
  | 'EmitEvent'
  /**
   * See [`Pallet::noop`].
   **/
  | 'Noop';

export type FrameBenchmarkingPalletPovCallLike =
  /**
   * See [`Pallet::emit_event`].
   **/
  | 'EmitEvent'
  /**
   * See [`Pallet::noop`].
   **/
  | 'Noop';

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletTxPauseCall =
  /**
   * See [`Pallet::pause`].
   **/
  | { name: 'Pause'; params: { fullName: [Bytes, Bytes] } }
  /**
   * See [`Pallet::unpause`].
   **/
  | { name: 'Unpause'; params: { ident: [Bytes, Bytes] } };

export type PalletTxPauseCallLike =
  /**
   * See [`Pallet::pause`].
   **/
  | { name: 'Pause'; params: { fullName: [BytesLike, BytesLike] } }
  /**
   * See [`Pallet::unpause`].
   **/
  | { name: 'Unpause'; params: { ident: [BytesLike, BytesLike] } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletSafeModeCall =
  /**
   * See [`Pallet::enter`].
   **/
  | { name: 'Enter' }
  /**
   * See [`Pallet::force_enter`].
   **/
  | { name: 'ForceEnter' }
  /**
   * See [`Pallet::extend`].
   **/
  | { name: 'Extend' }
  /**
   * See [`Pallet::force_extend`].
   **/
  | { name: 'ForceExtend' }
  /**
   * See [`Pallet::force_exit`].
   **/
  | { name: 'ForceExit' }
  /**
   * See [`Pallet::force_slash_deposit`].
   **/
  | { name: 'ForceSlashDeposit'; params: { account: AccountId32; block: number } }
  /**
   * See [`Pallet::release_deposit`].
   **/
  | { name: 'ReleaseDeposit'; params: { account: AccountId32; block: number } }
  /**
   * See [`Pallet::force_release_deposit`].
   **/
  | { name: 'ForceReleaseDeposit'; params: { account: AccountId32; block: number } };

export type PalletSafeModeCallLike =
  /**
   * See [`Pallet::enter`].
   **/
  | { name: 'Enter' }
  /**
   * See [`Pallet::force_enter`].
   **/
  | { name: 'ForceEnter' }
  /**
   * See [`Pallet::extend`].
   **/
  | { name: 'Extend' }
  /**
   * See [`Pallet::force_extend`].
   **/
  | { name: 'ForceExtend' }
  /**
   * See [`Pallet::force_exit`].
   **/
  | { name: 'ForceExit' }
  /**
   * See [`Pallet::force_slash_deposit`].
   **/
  | { name: 'ForceSlashDeposit'; params: { account: AccountId32Like; block: number } }
  /**
   * See [`Pallet::release_deposit`].
   **/
  | { name: 'ReleaseDeposit'; params: { account: AccountId32Like; block: number } }
  /**
   * See [`Pallet::force_release_deposit`].
   **/
  | { name: 'ForceReleaseDeposit'; params: { account: AccountId32Like; block: number } };

/**
 * Contains a variant per dispatchable extrinsic that this pallet has.
 **/
export type PalletBrokerCall =
  /**
   * See [`Pallet::configure`].
   **/
  | { name: 'Configure'; params: { config: PalletBrokerConfigRecord } }
  /**
   * See [`Pallet::reserve`].
   **/
  | { name: 'Reserve'; params: { workload: Array<PalletBrokerScheduleItem> } }
  /**
   * See [`Pallet::unreserve`].
   **/
  | { name: 'Unreserve'; params: { itemIndex: number } }
  /**
   * See [`Pallet::set_lease`].
   **/
  | { name: 'SetLease'; params: { task: number; until: number } }
  /**
   * See [`Pallet::start_sales`].
   **/
  | { name: 'StartSales'; params: { initialPrice: bigint; coreCount: number } }
  /**
   * See [`Pallet::purchase`].
   **/
  | { name: 'Purchase'; params: { priceLimit: bigint } }
  /**
   * See [`Pallet::renew`].
   **/
  | { name: 'Renew'; params: { core: number } }
  /**
   * See [`Pallet::transfer`].
   **/
  | { name: 'Transfer'; params: { regionId: PalletBrokerRegionId; newOwner: AccountId32 } }
  /**
   * See [`Pallet::partition`].
   **/
  | { name: 'Partition'; params: { regionId: PalletBrokerRegionId; pivot: number } }
  /**
   * See [`Pallet::interlace`].
   **/
  | { name: 'Interlace'; params: { regionId: PalletBrokerRegionId; pivot: PalletBrokerCoreMask } }
  /**
   * See [`Pallet::assign`].
   **/
  | { name: 'Assign'; params: { regionId: PalletBrokerRegionId; task: number; finality: PalletBrokerFinality } }
  /**
   * See [`Pallet::pool`].
   **/
  | { name: 'Pool'; params: { regionId: PalletBrokerRegionId; payee: AccountId32; finality: PalletBrokerFinality } }
  /**
   * See [`Pallet::claim_revenue`].
   **/
  | { name: 'ClaimRevenue'; params: { regionId: PalletBrokerRegionId; maxTimeslices: number } }
  /**
   * See [`Pallet::purchase_credit`].
   **/
  | { name: 'PurchaseCredit'; params: { amount: bigint; beneficiary: AccountId32 } }
  /**
   * See [`Pallet::drop_region`].
   **/
  | { name: 'DropRegion'; params: { regionId: PalletBrokerRegionId } }
  /**
   * See [`Pallet::drop_contribution`].
   **/
  | { name: 'DropContribution'; params: { regionId: PalletBrokerRegionId } }
  /**
   * See [`Pallet::drop_history`].
   **/
  | { name: 'DropHistory'; params: { when: number } }
  /**
   * See [`Pallet::drop_renewal`].
   **/
  | { name: 'DropRenewal'; params: { core: number; when: number } }
  /**
   * See [`Pallet::request_core_count`].
   **/
  | { name: 'RequestCoreCount'; params: { coreCount: number } };

export type PalletBrokerCallLike =
  /**
   * See [`Pallet::configure`].
   **/
  | { name: 'Configure'; params: { config: PalletBrokerConfigRecord } }
  /**
   * See [`Pallet::reserve`].
   **/
  | { name: 'Reserve'; params: { workload: Array<PalletBrokerScheduleItem> } }
  /**
   * See [`Pallet::unreserve`].
   **/
  | { name: 'Unreserve'; params: { itemIndex: number } }
  /**
   * See [`Pallet::set_lease`].
   **/
  | { name: 'SetLease'; params: { task: number; until: number } }
  /**
   * See [`Pallet::start_sales`].
   **/
  | { name: 'StartSales'; params: { initialPrice: bigint; coreCount: number } }
  /**
   * See [`Pallet::purchase`].
   **/
  | { name: 'Purchase'; params: { priceLimit: bigint } }
  /**
   * See [`Pallet::renew`].
   **/
  | { name: 'Renew'; params: { core: number } }
  /**
   * See [`Pallet::transfer`].
   **/
  | { name: 'Transfer'; params: { regionId: PalletBrokerRegionId; newOwner: AccountId32Like } }
  /**
   * See [`Pallet::partition`].
   **/
  | { name: 'Partition'; params: { regionId: PalletBrokerRegionId; pivot: number } }
  /**
   * See [`Pallet::interlace`].
   **/
  | { name: 'Interlace'; params: { regionId: PalletBrokerRegionId; pivot: PalletBrokerCoreMask } }
  /**
   * See [`Pallet::assign`].
   **/
  | { name: 'Assign'; params: { regionId: PalletBrokerRegionId; task: number; finality: PalletBrokerFinality } }
  /**
   * See [`Pallet::pool`].
   **/
  | { name: 'Pool'; params: { regionId: PalletBrokerRegionId; payee: AccountId32Like; finality: PalletBrokerFinality } }
  /**
   * See [`Pallet::claim_revenue`].
   **/
  | { name: 'ClaimRevenue'; params: { regionId: PalletBrokerRegionId; maxTimeslices: number } }
  /**
   * See [`Pallet::purchase_credit`].
   **/
  | { name: 'PurchaseCredit'; params: { amount: bigint; beneficiary: AccountId32Like } }
  /**
   * See [`Pallet::drop_region`].
   **/
  | { name: 'DropRegion'; params: { regionId: PalletBrokerRegionId } }
  /**
   * See [`Pallet::drop_contribution`].
   **/
  | { name: 'DropContribution'; params: { regionId: PalletBrokerRegionId } }
  /**
   * See [`Pallet::drop_history`].
   **/
  | { name: 'DropHistory'; params: { when: number } }
  /**
   * See [`Pallet::drop_renewal`].
   **/
  | { name: 'DropRenewal'; params: { core: number; when: number } }
  /**
   * See [`Pallet::request_core_count`].
   **/
  | { name: 'RequestCoreCount'; params: { coreCount: number } };

export type PalletBrokerConfigRecord = {
  advanceNotice: number;
  interludeLength: number;
  leadinLength: number;
  regionLength: number;
  idealBulkProportion: Perbill;
  limitCoresOffered?: number | undefined;
  renewalBump: Perbill;
  contributionTimeout: number;
};

export type PalletBrokerScheduleItem = {
  mask: PalletBrokerCoreMask;
  assignment: PalletBrokerCoretimeInterfaceCoreAssignment;
};

export type PalletBrokerCoreMask = FixedBytes<10>;

export type PalletBrokerCoretimeInterfaceCoreAssignment =
  | { tag: 'Idle' }
  | { tag: 'Pool' }
  | { tag: 'Task'; value: number };

export type PalletBrokerRegionId = { begin: number; core: number; mask: PalletBrokerCoreMask };

export type PalletBrokerFinality = 'Provisional' | 'Final';

export type PalletConvictionVotingTally = { ayes: bigint; nays: bigint; support: bigint };

/**
 * The `Event` enum of this pallet
 **/
export type PalletRemarkEvent =
  /**
   * Stored data off chain.
   **/
  { name: 'Stored'; data: { sender: AccountId32; contentHash: H256 } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletConvictionVotingEvent =
  /**
   * An account has delegated their vote to another account. \[who, target\]
   **/
  | { name: 'Delegated'; data: [AccountId32, AccountId32] }
  /**
   * An \[account\] has cancelled a previous delegation operation.
   **/
  | { name: 'Undelegated'; data: AccountId32 };

/**
 * The `Event` enum of this pallet
 **/
export type PalletWhitelistEvent =
  | { name: 'CallWhitelisted'; data: { callHash: H256 } }
  | { name: 'WhitelistedCallRemoved'; data: { callHash: H256 } }
  | {
      name: 'WhitelistedCallDispatched';
      data: {
        callHash: H256;
        result: Result<FrameSupportDispatchPostDispatchInfo, SpRuntimeDispatchErrorWithPostInfo>;
      };
    };

export type FrameSupportDispatchPostDispatchInfo = {
  actualWeight?: SpWeightsWeightV2Weight | undefined;
  paysFee: FrameSupportDispatchPays;
};

export type SpRuntimeDispatchErrorWithPostInfo = {
  postInfo: FrameSupportDispatchPostDispatchInfo;
  error: DispatchError;
};

/**
 * The `Event` enum of this pallet
 **/
export type PalletAllianceEvent =
  /**
   * A new rule has been set.
   **/
  | { name: 'NewRuleSet'; data: { rule: PalletAllianceCid } }
  /**
   * A new announcement has been proposed.
   **/
  | { name: 'Announced'; data: { announcement: PalletAllianceCid } }
  /**
   * An on-chain announcement has been removed.
   **/
  | { name: 'AnnouncementRemoved'; data: { announcement: PalletAllianceCid } }
  /**
   * Some accounts have been initialized as members (fellows/allies).
   **/
  | { name: 'MembersInitialized'; data: { fellows: Array<AccountId32>; allies: Array<AccountId32> } }
  /**
   * An account has been added as an Ally and reserved its deposit.
   **/
  | {
      name: 'NewAllyJoined';
      data: { ally: AccountId32; nominator?: AccountId32 | undefined; reserved?: bigint | undefined };
    }
  /**
   * An ally has been elevated to Fellow.
   **/
  | { name: 'AllyElevated'; data: { ally: AccountId32 } }
  /**
   * A member gave retirement notice and their retirement period started.
   **/
  | { name: 'MemberRetirementPeriodStarted'; data: { member: AccountId32 } }
  /**
   * A member has retired with its deposit unreserved.
   **/
  | { name: 'MemberRetired'; data: { member: AccountId32; unreserved?: bigint | undefined } }
  /**
   * A member has been kicked out with its deposit slashed.
   **/
  | { name: 'MemberKicked'; data: { member: AccountId32; slashed?: bigint | undefined } }
  /**
   * Accounts or websites have been added into the list of unscrupulous items.
   **/
  | { name: 'UnscrupulousItemAdded'; data: { items: Array<PalletAllianceUnscrupulousItem> } }
  /**
   * Accounts or websites have been removed from the list of unscrupulous items.
   **/
  | { name: 'UnscrupulousItemRemoved'; data: { items: Array<PalletAllianceUnscrupulousItem> } }
  /**
   * Alliance disbanded. Includes number deleted members and unreserved deposits.
   **/
  | { name: 'AllianceDisbanded'; data: { fellowMembers: number; allyMembers: number; unreserved: number } }
  /**
   * A Fellow abdicated their voting rights. They are now an Ally.
   **/
  | { name: 'FellowAbdicated'; data: { fellow: AccountId32 } };

/**
 * Events of this pallet.
 **/
export type PalletNominationPoolsEvent =
  /**
   * A pool has been created.
   **/
  | { name: 'Created'; data: { depositor: AccountId32; poolId: number } }
  /**
   * A member has became bonded in a pool.
   **/
  | { name: 'Bonded'; data: { member: AccountId32; poolId: number; bonded: bigint; joined: boolean } }
  /**
   * A payout has been made to a member.
   **/
  | { name: 'PaidOut'; data: { member: AccountId32; poolId: number; payout: bigint } }
  /**
   * A member has unbonded from their pool.
   *
   * - `balance` is the corresponding balance of the number of points that has been
   * requested to be unbonded (the argument of the `unbond` transaction) from the bonded
   * pool.
   * - `points` is the number of points that are issued as a result of `balance` being
   * dissolved into the corresponding unbonding pool.
   * - `era` is the era in which the balance will be unbonded.
   * In the absence of slashing, these values will match. In the presence of slashing, the
   * number of points that are issued in the unbonding pool will be less than the amount
   * requested to be unbonded.
   **/
  | { name: 'Unbonded'; data: { member: AccountId32; poolId: number; balance: bigint; points: bigint; era: number } }
  /**
   * A member has withdrawn from their pool.
   *
   * The given number of `points` have been dissolved in return of `balance`.
   *
   * Similar to `Unbonded` event, in the absence of slashing, the ratio of point to balance
   * will be 1.
   **/
  | { name: 'Withdrawn'; data: { member: AccountId32; poolId: number; balance: bigint; points: bigint } }
  /**
   * A pool has been destroyed.
   **/
  | { name: 'Destroyed'; data: { poolId: number } }
  /**
   * The state of a pool has changed
   **/
  | { name: 'StateChanged'; data: { poolId: number; newState: PalletNominationPoolsPoolState } }
  /**
   * A member has been removed from a pool.
   *
   * The removal can be voluntary (withdrawn all unbonded funds) or involuntary (kicked).
   **/
  | { name: 'MemberRemoved'; data: { poolId: number; member: AccountId32 } }
  /**
   * The roles of a pool have been updated to the given new roles. Note that the depositor
   * can never change.
   **/
  | {
      name: 'RolesUpdated';
      data: { root?: AccountId32 | undefined; bouncer?: AccountId32 | undefined; nominator?: AccountId32 | undefined };
    }
  /**
   * The active balance of pool `pool_id` has been slashed to `balance`.
   **/
  | { name: 'PoolSlashed'; data: { poolId: number; balance: bigint } }
  /**
   * The unbond pool at `era` of pool `pool_id` has been slashed to `balance`.
   **/
  | { name: 'UnbondingPoolSlashed'; data: { poolId: number; era: number; balance: bigint } }
  /**
   * A pool's commission setting has been changed.
   **/
  | { name: 'PoolCommissionUpdated'; data: { poolId: number; current?: [Perbill, AccountId32] | undefined } }
  /**
   * A pool's maximum commission setting has been changed.
   **/
  | { name: 'PoolMaxCommissionUpdated'; data: { poolId: number; maxCommission: Perbill } }
  /**
   * A pool's commission `change_rate` has been changed.
   **/
  | {
      name: 'PoolCommissionChangeRateUpdated';
      data: { poolId: number; changeRate: PalletNominationPoolsCommissionChangeRate };
    }
  /**
   * Pool commission has been claimed.
   **/
  | { name: 'PoolCommissionClaimed'; data: { poolId: number; commission: bigint } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletReferendaEvent002 =
  /**
   * A referendum has been submitted.
   **/
  | {
      name: 'Submitted';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The track (and by extension proposal dispatch origin) of this referendum.
         **/
        track: number;

        /**
         * The proposal for the referendum.
         **/
        proposal: FrameSupportPreimagesBounded;
      };
    }
  /**
   * The decision deposit has been placed.
   **/
  | {
      name: 'DecisionDepositPlaced';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The account who placed the deposit.
         **/
        who: AccountId32;

        /**
         * The amount placed by the account.
         **/
        amount: bigint;
      };
    }
  /**
   * The decision deposit has been refunded.
   **/
  | {
      name: 'DecisionDepositRefunded';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The account who placed the deposit.
         **/
        who: AccountId32;

        /**
         * The amount placed by the account.
         **/
        amount: bigint;
      };
    }
  /**
   * A deposit has been slashaed.
   **/
  | {
      name: 'DepositSlashed';
      data: {
        /**
         * The account who placed the deposit.
         **/
        who: AccountId32;

        /**
         * The amount placed by the account.
         **/
        amount: bigint;
      };
    }
  /**
   * A referendum has moved into the deciding phase.
   **/
  | {
      name: 'DecisionStarted';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The track (and by extension proposal dispatch origin) of this referendum.
         **/
        track: number;

        /**
         * The proposal for the referendum.
         **/
        proposal: FrameSupportPreimagesBounded;

        /**
         * The current tally of votes in this referendum.
         **/
        tally: PalletRankedCollectiveTally;
      };
    }
  | {
      name: 'ConfirmStarted';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;
      };
    }
  | {
      name: 'ConfirmAborted';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;
      };
    }
  /**
   * A referendum has ended its confirmation phase and is ready for approval.
   **/
  | {
      name: 'Confirmed';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The final tally of votes in this referendum.
         **/
        tally: PalletRankedCollectiveTally;
      };
    }
  /**
   * A referendum has been approved and its proposal has been scheduled.
   **/
  | {
      name: 'Approved';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;
      };
    }
  /**
   * A proposal has been rejected by referendum.
   **/
  | {
      name: 'Rejected';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The final tally of votes in this referendum.
         **/
        tally: PalletRankedCollectiveTally;
      };
    }
  /**
   * A referendum has been timed out without being decided.
   **/
  | {
      name: 'TimedOut';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The final tally of votes in this referendum.
         **/
        tally: PalletRankedCollectiveTally;
      };
    }
  /**
   * A referendum has been cancelled.
   **/
  | {
      name: 'Cancelled';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The final tally of votes in this referendum.
         **/
        tally: PalletRankedCollectiveTally;
      };
    }
  /**
   * A referendum has been killed.
   **/
  | {
      name: 'Killed';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The final tally of votes in this referendum.
         **/
        tally: PalletRankedCollectiveTally;
      };
    }
  /**
   * The submission deposit has been refunded.
   **/
  | {
      name: 'SubmissionDepositRefunded';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * The account who placed the deposit.
         **/
        who: AccountId32;

        /**
         * The amount placed by the account.
         **/
        amount: bigint;
      };
    }
  /**
   * Metadata for a referendum has been set.
   **/
  | {
      name: 'MetadataSet';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * Preimage hash.
         **/
        hash: H256;
      };
    }
  /**
   * Metadata for a referendum has been cleared.
   **/
  | {
      name: 'MetadataCleared';
      data: {
        /**
         * Index of the referendum.
         **/
        index: number;

        /**
         * Preimage hash.
         **/
        hash: H256;
      };
    };

export type PalletRankedCollectiveTally = { bareAyes: number; ayes: number; nays: number };

/**
 * The `Event` enum of this pallet
 **/
export type PalletRankedCollectiveEvent =
  /**
   * A member `who` has been added.
   **/
  | { name: 'MemberAdded'; data: { who: AccountId32 } }
  /**
   * The member `who`se rank has been changed to the given `rank`.
   **/
  | { name: 'RankChanged'; data: { who: AccountId32; rank: number } }
  /**
   * The member `who` of given `rank` has been removed from the collective.
   **/
  | { name: 'MemberRemoved'; data: { who: AccountId32; rank: number } }
  /**
   * The member `who` has voted for the `poll` with the given `vote` leading to an updated
   * `tally`.
   **/
  | {
      name: 'Voted';
      data: {
        who: AccountId32;
        poll: number;
        vote: PalletRankedCollectiveVoteRecord;
        tally: PalletRankedCollectiveTally;
      };
    };

export type PalletRankedCollectiveVoteRecord = { tag: 'Aye'; value: number } | { tag: 'Nay'; value: number };

/**
 * The `Event` enum of this pallet
 **/
export type PalletAssetConversionEvent =
  /**
   * A successful call of the `CretaPool` extrinsic will create this event.
   **/
  | {
      name: 'PoolCreated';
      data: {
        /**
         * The account that created the pool.
         **/
        creator: AccountId32;

        /**
         * The pool id associated with the pool. Note that the order of the assets may not be
         * the same as the order specified in the create pool extrinsic.
         **/
        poolId: [PalletAssetConversionNativeOrAssetId, PalletAssetConversionNativeOrAssetId];

        /**
         * The account ID of the pool.
         **/
        poolAccount: AccountId32;

        /**
         * The id of the liquidity tokens that will be minted when assets are added to this
         * pool.
         **/
        lpToken: number;
      };
    }
  /**
   * A successful call of the `AddLiquidity` extrinsic will create this event.
   **/
  | {
      name: 'LiquidityAdded';
      data: {
        /**
         * The account that the liquidity was taken from.
         **/
        who: AccountId32;

        /**
         * The account that the liquidity tokens were minted to.
         **/
        mintTo: AccountId32;

        /**
         * The pool id of the pool that the liquidity was added to.
         **/
        poolId: [PalletAssetConversionNativeOrAssetId, PalletAssetConversionNativeOrAssetId];

        /**
         * The amount of the first asset that was added to the pool.
         **/
        amount1Provided: bigint;

        /**
         * The amount of the second asset that was added to the pool.
         **/
        amount2Provided: bigint;

        /**
         * The id of the lp token that was minted.
         **/
        lpToken: number;

        /**
         * The amount of lp tokens that were minted of that id.
         **/
        lpTokenMinted: bigint;
      };
    }
  /**
   * A successful call of the `RemoveLiquidity` extrinsic will create this event.
   **/
  | {
      name: 'LiquidityRemoved';
      data: {
        /**
         * The account that the liquidity tokens were burned from.
         **/
        who: AccountId32;

        /**
         * The account that the assets were transferred to.
         **/
        withdrawTo: AccountId32;

        /**
         * The pool id that the liquidity was removed from.
         **/
        poolId: [PalletAssetConversionNativeOrAssetId, PalletAssetConversionNativeOrAssetId];

        /**
         * The amount of the first asset that was removed from the pool.
         **/
        amount1: bigint;

        /**
         * The amount of the second asset that was removed from the pool.
         **/
        amount2: bigint;

        /**
         * The id of the lp token that was burned.
         **/
        lpToken: number;

        /**
         * The amount of lp tokens that were burned of that id.
         **/
        lpTokenBurned: bigint;

        /**
         * Liquidity withdrawal fee (%).
         **/
        withdrawalFee: Permill;
      };
    }
  /**
   * Assets have been converted from one to another. Both `SwapExactTokenForToken`
   * and `SwapTokenForExactToken` will generate this event.
   **/
  | {
      name: 'SwapExecuted';
      data: {
        /**
         * Which account was the instigator of the swap.
         **/
        who: AccountId32;

        /**
         * The account that the assets were transferred to.
         **/
        sendTo: AccountId32;

        /**
         * The route of asset ids that the swap went through.
         * E.g. A -> Dot -> B
         **/
        path: Array<PalletAssetConversionNativeOrAssetId>;

        /**
         * The amount of the first asset that was swapped.
         **/
        amountIn: bigint;

        /**
         * The amount of the second asset that was received.
         **/
        amountOut: bigint;
      };
    }
  /**
   * An amount has been transferred from one account to another.
   **/
  | {
      name: 'Transfer';
      data: {
        /**
         * The account that the assets were transferred from.
         **/
        from: AccountId32;

        /**
         * The account that the assets were transferred to.
         **/
        to: AccountId32;

        /**
         * The asset that was transferred.
         **/
        asset: PalletAssetConversionNativeOrAssetId;

        /**
         * The amount of the asset that was transferred.
         **/
        amount: bigint;
      };
    };

/**
 * The `Event` enum of this pallet
 **/
export type PalletFastUnstakeEvent =
  /**
   * A staker was unstaked.
   **/
  | { name: 'Unstaked'; data: { stash: AccountId32; result: Result<[], DispatchError> } }
  /**
   * A staker was slashed for requesting fast-unstake whilst being exposed.
   **/
  | { name: 'Slashed'; data: { stash: AccountId32; amount: bigint } }
  /**
   * A batch was partially checked for the given eras, but the process did not finish.
   **/
  | { name: 'BatchChecked'; data: { eras: Array<number> } }
  /**
   * A batch of a given size was terminated.
   *
   * This is always follows by a number of `Unstaked` or `Slashed` events, marking the end
   * of the batch. A new batch will be created upon next block.
   **/
  | { name: 'BatchFinished'; data: { size: number } }
  /**
   * An internal error happened. Operations will be paused now.
   **/
  | { name: 'InternalError' };

/**
 * The `Event` enum of this pallet
 **/
export type PalletMessageQueueEvent =
  /**
   * Message discarded due to an error in the `MessageProcessor` (usually a format error).
   **/
  | {
      name: 'ProcessingFailed';
      data: { id: FixedBytes<32>; origin: number; error: FrameSupportMessagesProcessMessageError };
    }
  /**
   * Message is processed.
   **/
  | {
      name: 'Processed';
      data: { id: FixedBytes<32>; origin: number; weightUsed: SpWeightsWeightV2Weight; success: boolean };
    }
  /**
   * Message placed in overweight queue.
   **/
  | {
      name: 'OverweightEnqueued';
      data: { id: FixedBytes<32>; origin: number; pageIndex: number; messageIndex: number };
    }
  /**
   * This page was reaped.
   **/
  | { name: 'PageReaped'; data: { origin: number; index: number } };

export type FrameSupportMessagesProcessMessageError =
  | { tag: 'BadFormat' }
  | { tag: 'Corrupt' }
  | { tag: 'Unsupported' }
  | { tag: 'Overweight'; value: SpWeightsWeightV2Weight }
  | { tag: 'Yield' };

/**
 * The `Event` enum of this pallet
 **/
export type FrameBenchmarkingPalletPovEvent = 'TestEvent';

/**
 * The `Event` enum of this pallet
 **/
export type PalletTxPauseEvent =
  /**
   * This pallet, or a specific call is now paused.
   **/
  | { name: 'CallPaused'; data: { fullName: [Bytes, Bytes] } }
  /**
   * This pallet, or a specific call is now unpaused.
   **/
  | { name: 'CallUnpaused'; data: { fullName: [Bytes, Bytes] } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletSafeModeEvent =
  /**
   * The safe-mode was entered until inclusively this block.
   **/
  | { name: 'Entered'; data: { until: number } }
  /**
   * The safe-mode was extended until inclusively this block.
   **/
  | { name: 'Extended'; data: { until: number } }
  /**
   * Exited the safe-mode for a specific reason.
   **/
  | { name: 'Exited'; data: { reason: PalletSafeModeExitReason } }
  /**
   * An account reserved funds for either entering or extending the safe-mode.
   **/
  | { name: 'DepositPlaced'; data: { account: AccountId32; amount: bigint } }
  /**
   * An account had a reserve released that was reserved.
   **/
  | { name: 'DepositReleased'; data: { account: AccountId32; amount: bigint } }
  /**
   * An account had reserve slashed that was reserved.
   **/
  | { name: 'DepositSlashed'; data: { account: AccountId32; amount: bigint } }
  /**
   * Could not hold funds for entering or extending the safe-mode.
   *
   * This error comes from the underlying `Currency`.
   **/
  | { name: 'CannotDeposit' }
  /**
   * Could not release funds for entering or extending the safe-mode.
   *
   * This error comes from the underlying `Currency`.
   **/
  | { name: 'CannotRelease' };

export type PalletSafeModeExitReason = 'Timeout' | 'Force';

/**
 * The `Event` enum of this pallet
 **/
export type PalletStatementEvent =
  /**
   * A new statement is submitted
   **/
  { name: 'NewStatement'; data: { account: AccountId32; statement: SpStatementStoreStatement } };

export type SpStatementStoreStatement = {
  proof?: SpStatementStoreProof | undefined;
  decryptionKey?: FixedBytes<32> | undefined;
  channel?: FixedBytes<32> | undefined;
  priority?: number | undefined;
  numTopics: number;
  topics: FixedArray<FixedBytes<32>, 4>;
  data?: Bytes | undefined;
};

export type SpStatementStoreProof =
  | { tag: 'Sr25519'; value: { signature: FixedBytes<64>; signer: FixedBytes<32> } }
  | { tag: 'Ed25519'; value: { signature: FixedBytes<64>; signer: FixedBytes<32> } }
  | { tag: 'Secp256k1Ecdsa'; value: { signature: FixedBytes<65>; signer: FixedBytes<33> } }
  | { tag: 'OnChain'; value: { who: FixedBytes<32>; blockHash: FixedBytes<32>; eventIndex: bigint } };

/**
 * The `Event` enum of this pallet
 **/
export type PalletBrokerEvent =
  /**
   * A Region of Bulk Coretime has been purchased.
   **/
  | {
      name: 'Purchased';
      data: {
        /**
         * The identity of the purchaser.
         **/
        who: AccountId32;

        /**
         * The identity of the Region.
         **/
        regionId: PalletBrokerRegionId;

        /**
         * The price paid for this Region.
         **/
        price: bigint;

        /**
         * The duration of the Region.
         **/
        duration: number;
      };
    }
  /**
   * The workload of a core has become renewable.
   **/
  | {
      name: 'Renewable';
      data: {
        /**
         * The core whose workload can be renewed.
         **/
        core: number;

        /**
         * The price at which the workload can be renewed.
         **/
        price: bigint;

        /**
         * The time at which the workload would recommence of this renewal. The call to renew
         * cannot happen before the beginning of the interlude prior to the sale for regions
         * which begin at this time.
         **/
        begin: number;

        /**
         * The actual workload which can be renewed.
         **/
        workload: Array<PalletBrokerScheduleItem>;
      };
    }
  /**
   * A workload has been renewed.
   **/
  | {
      name: 'Renewed';
      data: {
        /**
         * The identity of the renewer.
         **/
        who: AccountId32;

        /**
         * The price paid for this renewal.
         **/
        price: bigint;

        /**
         * The index of the core on which the `workload` was previously scheduled.
         **/
        oldCore: number;

        /**
         * The index of the core on which the renewed `workload` has been scheduled.
         **/
        core: number;

        /**
         * The time at which the `workload` will begin on the `core`.
         **/
        begin: number;

        /**
         * The number of timeslices for which this `workload` is newly scheduled.
         **/
        duration: number;

        /**
         * The workload which was renewed.
         **/
        workload: Array<PalletBrokerScheduleItem>;
      };
    }
  /**
   * Ownership of a Region has been transferred.
   **/
  | {
      name: 'Transferred';
      data: {
        /**
         * The Region which has been transferred.
         **/
        regionId: PalletBrokerRegionId;

        /**
         * The duration of the Region.
         **/
        duration: number;

        /**
         * The old owner of the Region.
         **/
        oldOwner: AccountId32;

        /**
         * The new owner of the Region.
         **/
        owner: AccountId32;
      };
    }
  /**
   * A Region has been split into two non-overlapping Regions.
   **/
  | {
      name: 'Partitioned';
      data: {
        /**
         * The Region which was split.
         **/
        oldRegionId: PalletBrokerRegionId;

        /**
         * The new Regions into which it became.
         **/
        newRegionIds: [PalletBrokerRegionId, PalletBrokerRegionId];
      };
    }
  /**
   * A Region has been converted into two overlapping Regions each of lesser regularity.
   **/
  | {
      name: 'Interlaced';
      data: {
        /**
         * The Region which was interlaced.
         **/
        oldRegionId: PalletBrokerRegionId;

        /**
         * The new Regions into which it became.
         **/
        newRegionIds: [PalletBrokerRegionId, PalletBrokerRegionId];
      };
    }
  /**
   * A Region has been assigned to a particular task.
   **/
  | {
      name: 'Assigned';
      data: {
        /**
         * The Region which was assigned.
         **/
        regionId: PalletBrokerRegionId;

        /**
         * The duration of the assignment.
         **/
        duration: number;

        /**
         * The task to which the Region was assigned.
         **/
        task: number;
      };
    }
  /**
   * A Region has been added to the Instantaneous Coretime Pool.
   **/
  | {
      name: 'Pooled';
      data: {
        /**
         * The Region which was added to the Instantaneous Coretime Pool.
         **/
        regionId: PalletBrokerRegionId;

        /**
         * The duration of the Region.
         **/
        duration: number;
      };
    }
  /**
   * A new number of cores has been requested.
   **/
  | {
      name: 'CoreCountRequested';
      data: {
        /**
         * The number of cores requested.
         **/
        coreCount: number;
      };
    }
  /**
   * The number of cores available for scheduling has changed.
   **/
  | {
      name: 'CoreCountChanged';
      data: {
        /**
         * The new number of cores available for scheduling.
         **/
        coreCount: number;
      };
    }
  /**
   * There is a new reservation for a workload.
   **/
  | {
      name: 'ReservationMade';
      data: {
        /**
         * The index of the reservation.
         **/
        index: number;

        /**
         * The workload of the reservation.
         **/
        workload: Array<PalletBrokerScheduleItem>;
      };
    }
  /**
   * A reservation for a workload has been cancelled.
   **/
  | {
      name: 'ReservationCancelled';
      data: {
        /**
         * The index of the reservation which was cancelled.
         **/
        index: number;

        /**
         * The workload of the now cancelled reservation.
         **/
        workload: Array<PalletBrokerScheduleItem>;
      };
    }
  /**
   * A new sale has been initialized.
   **/
  | {
      name: 'SaleInitialized';
      data: {
        /**
         * The local block number at which the sale will/did start.
         **/
        saleStart: number;

        /**
         * The length in blocks of the Leadin Period (where the price is decreasing).
         **/
        leadinLength: number;

        /**
         * The price of Bulk Coretime at the beginning of the Leadin Period.
         **/
        startPrice: bigint;

        /**
         * The price of Bulk Coretime after the Leadin Period.
         **/
        regularPrice: bigint;

        /**
         * The first timeslice of the Regions which are being sold in this sale.
         **/
        regionBegin: number;

        /**
         * The timeslice on which the Regions which are being sold in the sale terminate.
         * (i.e. One after the last timeslice which the Regions control.)
         **/
        regionEnd: number;

        /**
         * The number of cores we want to sell, ideally. Selling this amount would result in
         * no change to the price for the next sale.
         **/
        idealCoresSold: number;

        /**
         * Number of cores which are/have been offered for sale.
         **/
        coresOffered: number;
      };
    }
  /**
   * A new lease has been created.
   **/
  | {
      name: 'Leased';
      data: {
        /**
         * The task to which a core will be assigned.
         **/
        task: number;

        /**
         * The timeslice contained in the sale period after which this lease will
         * self-terminate (and therefore the earliest timeslice at which the lease may no
         * longer apply).
         **/
        until: number;
      };
    }
  /**
   * A lease is about to end.
   **/
  | {
      name: 'LeaseEnding';
      data: {
        /**
         * The task to which a core was assigned.
         **/
        task: number;

        /**
         * The timeslice at which the task will no longer be scheduled.
         **/
        when: number;
      };
    }
  /**
   * The sale rotation has been started and a new sale is imminent.
   **/
  | {
      name: 'SalesStarted';
      data: {
        /**
         * The nominal price of an Region of Bulk Coretime.
         **/
        price: bigint;

        /**
         * The maximum number of cores which this pallet will attempt to assign.
         **/
        coreCount: number;
      };
    }
  /**
   * The act of claiming revenue has begun.
   **/
  | {
      name: 'RevenueClaimBegun';
      data: {
        /**
         * The region to be claimed for.
         **/
        region: PalletBrokerRegionId;

        /**
         * The maximum number of timeslices which should be searched for claimed.
         **/
        maxTimeslices: number;
      };
    }
  /**
   * A particular timeslice has a non-zero claim.
   **/
  | {
      name: 'RevenueClaimItem';
      data: {
        /**
         * The timeslice whose claim is being processed.
         **/
        when: number;

        /**
         * The amount which was claimed at this timeslice.
         **/
        amount: bigint;
      };
    }
  /**
   * A revenue claim has (possibly only in part) been paid.
   **/
  | {
      name: 'RevenueClaimPaid';
      data: {
        /**
         * The account to whom revenue has been paid.
         **/
        who: AccountId32;

        /**
         * The total amount of revenue claimed and paid.
         **/
        amount: bigint;

        /**
         * The next region which should be claimed for the continuation of this contribution.
         **/
        next?: PalletBrokerRegionId | undefined;
      };
    }
  /**
   * Some Instantaneous Coretime Pool credit has been purchased.
   **/
  | {
      name: 'CreditPurchased';
      data: {
        /**
         * The account which purchased the credit.
         **/
        who: AccountId32;

        /**
         * The Relay-chain account to which the credit will be made.
         **/
        beneficiary: AccountId32;

        /**
         * The amount of credit purchased.
         **/
        amount: bigint;
      };
    }
  /**
   * A Region has been dropped due to being out of date.
   **/
  | {
      name: 'RegionDropped';
      data: {
        /**
         * The Region which no longer exists.
         **/
        regionId: PalletBrokerRegionId;

        /**
         * The duration of the Region.
         **/
        duration: number;
      };
    }
  /**
   * Some historical Instantaneous Core Pool contribution record has been dropped.
   **/
  | {
      name: 'ContributionDropped';
      data: {
        /**
         * The Region whose contribution is no longer exists.
         **/
        regionId: PalletBrokerRegionId;
      };
    }
  /**
   * Some historical Instantaneous Core Pool payment record has been initialized.
   **/
  | {
      name: 'HistoryInitialized';
      data: {
        /**
         * The timeslice whose history has been initialized.
         **/
        when: number;

        /**
         * The amount of privately contributed Coretime to the Instantaneous Coretime Pool.
         **/
        privatePoolSize: number;

        /**
         * The amount of Coretime contributed to the Instantaneous Coretime Pool by the
         * Polkadot System.
         **/
        systemPoolSize: number;
      };
    }
  /**
   * Some historical Instantaneous Core Pool payment record has been dropped.
   **/
  | {
      name: 'HistoryDropped';
      data: {
        /**
         * The timeslice whose history is no longer available.
         **/
        when: number;

        /**
         * The amount of revenue the system has taken.
         **/
        revenue: bigint;
      };
    }
  /**
   * Some historical Instantaneous Core Pool payment record has been ignored because the
   * timeslice was already known. Governance may need to intervene.
   **/
  | {
      name: 'HistoryIgnored';
      data: {
        /**
         * The timeslice whose history is was ignored.
         **/
        when: number;

        /**
         * The amount of revenue which was ignored.
         **/
        revenue: bigint;
      };
    }
  /**
   * Some historical Instantaneous Core Pool Revenue is ready for payout claims.
   **/
  | {
      name: 'ClaimsReady';
      data: {
        /**
         * The timeslice whose history is available.
         **/
        when: number;

        /**
         * The amount of revenue the Polkadot System has already taken.
         **/
        systemPayout: bigint;

        /**
         * The total amount of revenue remaining to be claimed.
         **/
        privatePayout: bigint;
      };
    }
  /**
   * A Core has been assigned to one or more tasks and/or the Pool on the Relay-chain.
   **/
  | {
      name: 'CoreAssigned';
      data: {
        /**
         * The index of the Core which has been assigned.
         **/
        core: number;

        /**
         * The Relay-chain block at which this assignment should take effect.
         **/
        when: number;

        /**
         * The workload to be done on the Core.
         **/
        assignment: Array<[PalletBrokerCoretimeInterfaceCoreAssignment, number]>;
      };
    }
  /**
   * Some historical Instantaneous Core Pool payment record has been dropped.
   **/
  | {
      name: 'AllowedRenewalDropped';
      data: {
        /**
         * The timeslice whose renewal is no longer available.
         **/
        when: number;

        /**
         * The core whose workload is no longer available to be renewed for `when`.
         **/
        core: number;
      };
    };

export type FrameSystemLastRuntimeUpgradeInfo = { specVersion: number; specName: string };

export type FrameSystemLimitsBlockWeights = {
  baseBlock: SpWeightsWeightV2Weight;
  maxBlock: SpWeightsWeightV2Weight;
  perClass: FrameSupportDispatchPerDispatchClassWeightsPerClass;
};

export type FrameSupportDispatchPerDispatchClassWeightsPerClass = {
  normal: FrameSystemLimitsWeightsPerClass;
  operational: FrameSystemLimitsWeightsPerClass;
  mandatory: FrameSystemLimitsWeightsPerClass;
};

export type FrameSystemLimitsWeightsPerClass = {
  baseExtrinsic: SpWeightsWeightV2Weight;
  maxExtrinsic?: SpWeightsWeightV2Weight | undefined;
  maxTotal?: SpWeightsWeightV2Weight | undefined;
  reserved?: SpWeightsWeightV2Weight | undefined;
};

export type FrameSystemLimitsBlockLength = { max: FrameSupportDispatchPerDispatchClassU32 };

export type FrameSupportDispatchPerDispatchClassU32 = { normal: number; operational: number; mandatory: number };

export type SpWeightsRuntimeDbWeight = { read: bigint; write: bigint };

/**
 * Error for the System pallet
 **/
export type FrameSystemError =
  /**
   * The name of specification does not match between the current runtime
   * and the new runtime.
   **/
  | 'InvalidSpecName'
  /**
   * The specification version is not allowed to decrease between the current runtime
   * and the new runtime.
   **/
  | 'SpecVersionNeedsToIncrease'
  /**
   * Failed to extract the runtime version from the new runtime.
   *
   * Either calling `Core_version` or decoding `RuntimeVersion` failed.
   **/
  | 'FailedToExtractRuntimeVersion'
  /**
   * Suicide called when the account has non-default composite data.
   **/
  | 'NonDefaultComposite'
  /**
   * There is a non-zero reference count preventing the account from being purged.
   **/
  | 'NonZeroRefCount'
  /**
   * The origin filter prevent the call to be dispatched.
   **/
  | 'CallFiltered';

/**
 * The `Error` enum of this pallet.
 **/
export type PalletUtilityError =
  /**
   * Too many calls batched.
   **/
  'TooManyCalls';

export type SpConsensusBabeDigestsPreDigest =
  | { tag: 'Primary'; value: SpConsensusBabeDigestsPrimaryPreDigest }
  | { tag: 'SecondaryPlain'; value: SpConsensusBabeDigestsSecondaryPlainPreDigest }
  | { tag: 'SecondaryVRF'; value: SpConsensusBabeDigestsSecondaryVRFPreDigest };

export type SpConsensusBabeDigestsPrimaryPreDigest = {
  authorityIndex: number;
  slot: SpConsensusSlotsSlot;
  vrfSignature: SpCoreSr25519VrfVrfSignature;
};

export type SpCoreSr25519VrfVrfSignature = { output: FixedBytes<32>; proof: FixedBytes<64> };

export type SpConsensusBabeDigestsSecondaryPlainPreDigest = { authorityIndex: number; slot: SpConsensusSlotsSlot };

export type SpConsensusBabeDigestsSecondaryVRFPreDigest = {
  authorityIndex: number;
  slot: SpConsensusSlotsSlot;
  vrfSignature: SpCoreSr25519VrfVrfSignature;
};

export type SpConsensusBabeBabeEpochConfiguration = { c: [bigint, bigint]; allowedSlots: SpConsensusBabeAllowedSlots };

/**
 * The `Error` enum of this pallet.
 **/
export type PalletBabeError =
  /**
   * An equivocation proof provided as part of an equivocation report is invalid.
   **/
  | 'InvalidEquivocationProof'
  /**
   * A key ownership proof provided as part of an equivocation report is invalid.
   **/
  | 'InvalidKeyOwnershipProof'
  /**
   * A given equivocation report is valid but already previously reported.
   **/
  | 'DuplicateOffenceReport'
  /**
   * Submitted configuration is invalid.
   **/
  | 'InvalidConfiguration';

/**
 * The `Error` enum of this pallet.
 **/
export type PalletIndicesError =
  /**
   * The index was not already assigned.
   **/
  | 'NotAssigned'
  /**
   * The index is assigned to another account.
   **/
  | 'NotOwner'
  /**
   * The index was not available.
   **/
  | 'InUse'
  /**
   * The source and destination accounts are identical.
   **/
  | 'NotTransfer'
  /**
   * The index is permanent and may not be freed/changed.
   **/
  | 'Permanent';

export type PalletBalancesBalanceLock = { id: FixedBytes<8>; amount: bigint; reasons: PalletBalancesReasons };

export type PalletBalancesReasons = 'Fee' | 'Misc' | 'All';

export type PalletBalancesReserveData = { id: FixedBytes<8>; amount: bigint };

export type PalletBalancesIdAmount = { id: KitchensinkRuntimeRuntimeHoldReason; amount: bigint };

export type KitchensinkRuntimeRuntimeHoldReason =
  | { tag: 'Contracts'; value: PalletContractsHoldReason }
  | { tag: 'Nis'; value: PalletNisHoldReason }
  | { tag: 'NftFractionalization'; value: PalletNftFractionalizationHoldReason }
  | { tag: 'SafeMode'; value: PalletSafeModeHoldReason };

export type PalletContractsHoldReason = 'CodeUploadDepositReserve' | 'StorageDepositReserve';

export type PalletNisHoldReason = 'NftReceipt';

export type PalletNftFractionalizationHoldReason = 'Fractionalized';

export type PalletSafeModeHoldReason = 'EnterOrExtend';

export type PalletBalancesIdAmount002 = { id: []; amount: bigint };

/**
 * The `Error` enum of this pallet.
 **/
export type PalletBalancesError =
  /**
   * Vesting balance too high to send value.
   **/
  | 'VestingBalance'
  /**
   * Account liquidity restrictions prevent withdrawal.
   **/
  | 'LiquidityRestrictions'
  /**
   * Balance too low to send value.
   **/
  | 'InsufficientBalance'
  /**
   * Value too low to create account due to existential deposit.
   **/
  | 'ExistentialDeposit'
  /**
   * Transfer/payment would kill account.
   **/
  | 'Expendability'
  /**
   * A vesting schedule already exists for this account.
   **/
  | 'ExistingVestingSchedule'
  /**
   * Beneficiary account must pre-exist.
   **/
  | 'DeadAccount'
  /**
   * Number of named reserves exceed `MaxReserves`.
   **/
  | 'TooManyReserves'
  /**
   * Number of holds exceed `MaxHolds`.
   **/
  | 'TooManyHolds'
  /**
   * Number of freezes exceed `MaxFreezes`.
   **/
  | 'TooManyFreezes';

export type PalletTransactionPaymentReleases = 'V1Ancient' | 'V2';

export type PalletElectionProviderMultiPhaseReadySolution = {
  supports: Array<[AccountId32, SpNposElectionsSupport]>;
  score: SpNposElectionsElectionScore;
  compute: PalletElectionProviderMultiPhaseElectionCompute;
};

export type PalletElectionProviderMultiPhaseRoundSnapshot = {
  voters: Array<[AccountId32, bigint, Array<AccountId32>]>;
  targets: Array<AccountId32>;
};

export type PalletElectionProviderMultiPhaseSignedSignedSubmission = {
  who: AccountId32;
  deposit: bigint;
  rawSolution: PalletElectionProviderMultiPhaseRawSolution;
  callFee: bigint;
};

/**
 * Error of the pallet that can be returned in response to dispatches.
 **/
export type PalletElectionProviderMultiPhaseError =
  /**
   * Submission was too early.
   **/
  | 'PreDispatchEarlySubmission'
  /**
   * Wrong number of winners presented.
   **/
  | 'PreDispatchWrongWinnerCount'
  /**
   * Submission was too weak, score-wise.
   **/
  | 'PreDispatchWeakSubmission'
  /**
   * The queue was full, and the solution was not better than any of the existing ones.
   **/
  | 'SignedQueueFull'
  /**
   * The origin failed to pay the deposit.
   **/
  | 'SignedCannotPayDeposit'
  /**
   * Witness data to dispatchable is invalid.
   **/
  | 'SignedInvalidWitness'
  /**
   * The signed submission consumes too much weight
   **/
  | 'SignedTooMuchWeight'
  /**
   * OCW submitted solution for wrong round
   **/
  | 'OcwCallWrongEra'
  /**
   * Snapshot metadata should exist but didn't.
   **/
  | 'MissingSnapshotMetadata'
  /**
   * `Self::insert_submission` returned an invalid index.
   **/
  | 'InvalidSubmissionIndex'
  /**
   * The call is not allowed at this point.
   **/
  | 'CallNotAllowed'
  /**
   * The fallback failed
   **/
  | 'FallbackFailed'
  /**
   * Some bound not met
   **/
  | 'BoundNotMet'
  /**
   * Submitted solution has too many winners
   **/
  | 'TooManyWinners';

export type PalletStakingStakingLedger = {
  stash: AccountId32;
  total: bigint;
  active: bigint;
  unlocking: Array<PalletStakingUnlockChunk>;
  claimedRewards: Array<number>;
};

export type PalletStakingUnlockChunk = { value: bigint; era: number };

export type PalletStakingNominations = { targets: Array<AccountId32>; submittedIn: number; suppressed: boolean };

export type PalletStakingActiveEraInfo = { index: number; start?: bigint | undefined };

export type PalletStakingEraRewardPoints = { total: number; individual: Array<[AccountId32, number]> };

export type PalletStakingUnappliedSlash = {
  validator: AccountId32;
  own: bigint;
  others: Array<[AccountId32, bigint]>;
  reporters: Array<AccountId32>;
  payout: bigint;
};

export type PalletStakingSlashingSlashingSpans = {
  spanIndex: number;
  lastStart: number;
  lastNonzeroSlash: number;
  prior: Array<number>;
};

export type PalletStakingSlashingSpanRecord = { slashed: bigint; paidOut: bigint };

/**
 * The `Error` enum of this pallet.
 **/
export type PalletStakingPalletError =
  /**
   * Not a controller account.
   **/
  | 'NotController'
  /**
   * Not a stash account.
   **/
  | 'NotStash'
  /**
   * Stash is already bonded.
   **/
  | 'AlreadyBonded'
  /**
   * Controller is already paired.
   **/
  | 'AlreadyPaired'
  /**
   * Targets cannot be empty.
   **/
  | 'EmptyTargets'
  /**
   * Duplicate index.
   **/
  | 'DuplicateIndex'
  /**
   * Slash record index out of bounds.
   **/
  | 'InvalidSlashIndex'
  /**
   * Cannot have a validator or nominator role, with value less than the minimum defined by
   * governance (see `MinValidatorBond` and `MinNominatorBond`). If unbonding is the
   * intention, `chill` first to remove one's role as validator/nominator.
   **/
  | 'InsufficientBond'
  /**
   * Can not schedule more unlock chunks.
   **/
  | 'NoMoreChunks'
  /**
   * Can not rebond without unlocking chunks.
   **/
  | 'NoUnlockChunk'
  /**
   * Attempting to target a stash that still has funds.
   **/
  | 'FundedTarget'
  /**
   * Invalid era to reward.
   **/
  | 'InvalidEraToReward'
  /**
   * Invalid number of nominations.
   **/
  | 'InvalidNumberOfNominations'
  /**
   * Items are not sorted and unique.
   **/
  | 'NotSortedAndUnique'
  /**
   * Rewards for this era have already been claimed for this validator.
   **/
  | 'AlreadyClaimed'
  /**
   * Incorrect previous history depth input provided.
   **/
  | 'IncorrectHistoryDepth'
  /**
   * Incorrect number of slashing spans provided.
   **/
  | 'IncorrectSlashingSpans'
  /**
   * Internal state has become somehow corrupted and the operation cannot continue.
   **/
  | 'BadState'
  /**
   * Too many nomination targets supplied.
   **/
  | 'TooManyTargets'
  /**
   * A nomination target was supplied that was blocked or otherwise not a validator.
   **/
  | 'BadTarget'
  /**
   * The user has enough bond and thus cannot be chilled forcefully by an external person.
   **/
  | 'CannotChillOther'
  /**
   * There are too many nominators in the system. Governance needs to adjust the staking
   * settings to keep things safe for the runtime.
   **/
  | 'TooManyNominators'
  /**
   * There are too many validator candidates in the system. Governance needs to adjust the
   * staking settings to keep things safe for the runtime.
   **/
  | 'TooManyValidators'
  /**
   * Commission is too low. Must be at least `MinCommission`.
   **/
  | 'CommissionTooLow'
  /**
   * Some bound is not met.
   **/
  | 'BoundNotMet';

export type SpCoreCryptoKeyTypeId = FixedBytes<4>;

/**
 * Error for the session pallet.
 **/
export type PalletSessionError =
  /**
   * Invalid ownership proof.
   **/
  | 'InvalidProof'
  /**
   * No associated validator ID for account.
   **/
  | 'NoAssociatedValidatorId'
  /**
   * Registered duplicate key.
   **/
  | 'DuplicatedKey'
  /**
   * No keys are associated with this account.
   **/
  | 'NoKeys'
  /**
   * Key setting account is not live, so it's impossible to associate keys.
   **/
  | 'NoAccount';

export type PalletDemocracyReferendumInfo =
  | { tag: 'Ongoing'; value: PalletDemocracyReferendumStatus }
  | { tag: 'Finished'; value: { approved: boolean; end: number } };

export type PalletDemocracyReferendumStatus = {
  end: number;
  proposal: FrameSupportPreimagesBounded;
  threshold: PalletDemocracyVoteThreshold;
  delay: number;
  tally: PalletDemocracyTally;
};

export type PalletDemocracyTally = { ayes: bigint; nays: bigint; turnout: bigint };

export type PalletDemocracyVoteVoting =
  | {
      tag: 'Direct';
      value: {
        votes: Array<[number, PalletDemocracyVoteAccountVote]>;
        delegations: PalletDemocracyDelegations;
        prior: PalletDemocracyVotePriorLock;
      };
    }
  | {
      tag: 'Delegating';
      value: {
        balance: bigint;
        target: AccountId32;
        conviction: PalletDemocracyConviction;
        delegations: PalletDemocracyDelegations;
        prior: PalletDemocracyVotePriorLock;
      };
    };

export type PalletDemocracyDelegations = { votes: bigint; capital: bigint };

export type PalletDemocracyVotePriorLock = [number, bigint];

/**
 * The `Error` enum of this pallet.
 **/
export type PalletDemocracyError =
  /**
   * Value too low
   **/
  | 'ValueLow'
  /**
   * Proposal does not exist
   **/
  | 'ProposalMissing'
  /**
   * Cannot cancel the same proposal twice
   **/
  | 'AlreadyCanceled'
  /**
   * Proposal already made
   **/
  | 'DuplicateProposal'
  /**
   * Proposal still blacklisted
   **/
  | 'ProposalBlacklisted'
  /**
   * Next external proposal not simple majority
   **/
  | 'NotSimpleMajority'
  /**
   * Invalid hash
   **/
  | 'InvalidHash'
  /**
   * No external proposal
   **/
  | 'NoProposal'
  /**
   * Identity may not veto a proposal twice
   **/
  | 'AlreadyVetoed'
  /**
   * Vote given for invalid referendum
   **/
  | 'ReferendumInvalid'
  /**
   * No proposals waiting
   **/
  | 'NoneWaiting'
  /**
   * The given account did not vote on the referendum.
   **/
  | 'NotVoter'
  /**
   * The actor has no permission to conduct the action.
   **/
  | 'NoPermission'
  /**
   * The account is already delegating.
   **/
  | 'AlreadyDelegating'
  /**
   * Too high a balance was provided that the account cannot afford.
   **/
  | 'InsufficientFunds'
  /**
   * The account is not currently delegating.
   **/
  | 'NotDelegating'
  /**
   * The account currently has votes attached to it and the operation cannot succeed until
   * these are removed, either through `unvote` or `reap_vote`.
   **/
  | 'VotesExist'
  /**
   * The instant referendum origin is currently disallowed.
   **/
  | 'InstantNotAllowed'
  /**
   * Delegation to oneself makes no sense.
   **/
  | 'Nonsense'
  /**
   * Invalid upper bound.
   **/
  | 'WrongUpperBound'
  /**
   * Maximum number of votes reached.
   **/
  | 'MaxVotesReached'
  /**
   * Maximum number of items reached.
   **/
  | 'TooMany'
  /**
   * Voting period too low
   **/
  | 'VotingPeriodLow'
  /**
   * The preimage does not exist.
   **/
  | 'PreimageNotExist';

export type PalletCollectiveVotes = {
  index: number;
  threshold: number;
  ayes: Array<AccountId32>;
  nays: Array<AccountId32>;
  end: number;
};

/**
 * The `Error` enum of this pallet.
 **/
export type PalletCollectiveError =
  /**
   * Account is not a member
   **/
  | 'NotMember'
  /**
   * Duplicate proposals not allowed
   **/
  | 'DuplicateProposal'
  /**
   * Proposal must exist
   **/
  | 'ProposalMissing'
  /**
   * Mismatched index
   **/
  | 'WrongIndex'
  /**
   * Duplicate vote ignored
   **/
  | 'DuplicateVote'
  /**
   * Members are already initialized!
   **/
  | 'AlreadyInitialized'
  /**
   * The close call was made too early, before the end of the voting.
   **/
  | 'TooEarly'
  /**
   * There can only be a maximum of `MaxProposals` active proposals.
   **/
  | 'TooManyProposals'
  /**
   * The given weight bound for the proposal was too low.
   **/
  | 'WrongProposalWeight'
  /**
   * The given length bound for the proposal was too low.
   **/
  | 'WrongProposalLength'
  /**
   * Prime account is not a member
   **/
  | 'PrimeAccountNotMember';

export type PalletElectionsPhragmenSeatHolder = { who: AccountId32; stake: bigint; deposit: bigint };

export type PalletElectionsPhragmenVoter = { votes: Array<AccountId32>; stake: bigint; deposit: bigint };

/**
 * The `Error` enum of this pallet.
 **/
export type PalletElectionsPhragmenError =
  /**
   * Cannot vote when no candidates or members exist.
   **/
  | 'UnableToVote'
  /**
   * Must vote for at least one candidate.
   **/
  | 'NoVotes'
  /**
   * Cannot vote more than candidates.
   **/
  | 'TooManyVotes'
  /**
   * Cannot vote more than maximum allowed.
   **/
  | 'MaximumVotesExceeded'
  /**
   * Cannot vote with stake less than minimum balance.
   **/
  | 'LowBalance'
  /**
   * Voter can not pay voting bond.
   **/
  | 'UnableToPayBond'
  /**
   * Must be a voter.
   **/
  | 'MustBeVoter'
  /**
   * Duplicated candidate submission.
   **/
  | 'DuplicatedCandidate'
  /**
   * Too many candidates have been created.
   **/
  | 'TooManyCandidates'
  /**
   * Member cannot re-submit candidacy.
   **/
  | 'MemberSubmit'
  /**
   * Runner cannot re-submit candidacy.
   **/
  | 'RunnerUpSubmit'
  /**
   * Candidate does not have enough funds.
   **/
  | 'InsufficientCandidateFunds'
  /**
   * Not a member.
   **/
  | 'NotMember'
  /**
   * The provided count of number of candidates is incorrect.
   **/
  | 'InvalidWitnessData'
  /**
   * The provided count of number of votes is incorrect.
   **/
  | 'InvalidVoteCount'
  /**
   * The renouncing origin presented a wrong `Renouncing` parameter.
   **/
  | 'InvalidRenouncing'
  /**
   * Prediction regarding replacement after member removal is wrong.
   **/
  | 'InvalidReplacement';

/**
 * The `Error` enum of this pallet.
 **/
export type PalletMembershipError =
  /**
   * Already a member.
   **/
  | 'AlreadyMember'
  /**
   * Not a member.
   **/
  | 'NotMember'
  /**
   * Too many members.
   **/
  | 'TooManyMembers';

export type PalletGrandpaStoredState =
  | { tag: 'Live' }
  | { tag: 'PendingPause'; value: { scheduledAt: number; delay: number } }
  | { tag: 'Paused' }
  | { tag: 'PendingResume'; value: { scheduledAt: number; delay: number } };

export type PalletGrandpaStoredPendingChange = {
  scheduledAt: number;
  delay: number;
  nextAuthorities: Array<[SpConsensusGrandpaAppPublic, bigint]>;
  forced?: number | undefined;
};

/**
 * The `Error` enum of this pallet.
 **/
export type PalletGrandpaError =
  /**
   * Attempt to signal GRANDPA pause when the authority set isn't live
   * (either paused or already pending pause).
   **/
  | 'PauseFailed'
  /**
   * Attempt to signal GRANDPA resume when the authority set isn't paused
   * (either live or already pending resume).
   **/
  | 'ResumeFailed'
  /**
   * Attempt to signal GRANDPA change with one already pending.
   **/
  | 'ChangePending'
  /**
   * Cannot signal forced change so soon after last.
   **/
  | 'TooSoon'
  /**
   * A key ownership proof provided as part of an equivocation report is invalid.
   **/
  | 'InvalidKeyOwnershipProof'
  /**
   * An equivocation proof provided as part of an equivocation report is invalid.
   **/
  | 'InvalidEquivocationProof'
  /**
   * A given equivocation report is valid but already previously reported.
   **/
  | 'DuplicateOffenceReport';

export type PalletTreasuryProposal = { proposer: AccountId32; value: bigint; beneficiary: AccountId32; bond: bigint };

export type FrameSupportPalletId = FixedBytes<8>;

/**
 * Error for the treasury pallet.
 **/
export type PalletTreasuryError =
  /**
   * Proposer's balance is too low.
   **/
  | 'InsufficientProposersBalance'
  /**
   * No proposal or bounty at that index.
   **/
  | 'InvalidIndex'
  /**
   * Too many approvals in the queue.
   **/
  | 'TooManyApprovals'
  /**
   * The spend origin is valid but the amount it is allowed to spend is lower than the
   * amount to be spent.
   **/
  | 'InsufficientPermission'
  /**
   * Proposal has not been approved.
   **/
  | 'ProposalNotApproved';

/**
 * The `Error` enum of this pallet.
 **/
export type PalletAssetRateError =
  /**
   * The given asset ID is unknown.
   **/
  | 'UnknownAssetKind'
  /**
   * The given asset ID already has an assigned conversion rate and cannot be re-created.
   **/
  | 'AlreadyExists';

export type PalletContractsWasmCodeInfo = {
  owner: AccountId32;
  deposit: bigint;
  refcount: bigint;
  determinism: PalletContractsWasmDeterminism;
  codeLen: number;
};

export type PalletContractsStorageContractInfo = {
  trieId: Bytes;
  codeHash: H256;
  storageBytes: number;
  storageItems: number;
  storageByteDeposit: bigint;
  storageItemDeposit: bigint;
  storageBaseDeposit: bigint;
  delegateDependencies: Array<[H256, bigint]>;
};

export type PalletContractsStorageDeletionQueueManager = { insertCounter: number; deleteCounter: number };

export type PalletContractsSchedule = {
  limits: PalletContractsScheduleLimits;
  instructionWeights: PalletContractsScheduleInstructionWeights;
  hostFnWeights: PalletContractsScheduleHostFnWeights;
};

export type PalletContractsScheduleLimits = {
  eventTopics: number;
  globals: number;
  locals: number;
  parameters: number;
  memoryPages: number;
  tableSize: number;
  brTableSize: number;
  subjectLen: number;
  payloadLen: number;
  runtimeMemory: number;
};

export type PalletContractsScheduleInstructionWeights = { base: number };

export type PalletContractsScheduleHostFnWeights = {
  caller: SpWeightsWeightV2Weight;
  isContract: SpWeightsWeightV2Weight;
  codeHash: SpWeightsWeightV2Weight;
  ownCodeHash: SpWeightsWeightV2Weight;
  callerIsOrigin: SpWeightsWeightV2Weight;
  callerIsRoot: SpWeightsWeightV2Weight;
  address: SpWeightsWeightV2Weight;
  gasLeft: SpWeightsWeightV2Weight;
  balance: SpWeightsWeightV2Weight;
  valueTransferred: SpWeightsWeightV2Weight;
  minimumBalance: SpWeightsWeightV2Weight;
  blockNumber: SpWeightsWeightV2Weight;
  now: SpWeightsWeightV2Weight;
  weightToFee: SpWeightsWeightV2Weight;
  input: SpWeightsWeightV2Weight;
  inputPerByte: SpWeightsWeightV2Weight;
  rReturn: SpWeightsWeightV2Weight;
  returnPerByte: SpWeightsWeightV2Weight;
  terminate: SpWeightsWeightV2Weight;
  random: SpWeightsWeightV2Weight;
  depositEvent: SpWeightsWeightV2Weight;
  depositEventPerTopic: SpWeightsWeightV2Weight;
  depositEventPerByte: SpWeightsWeightV2Weight;
  debugMessage: SpWeightsWeightV2Weight;
  debugMessagePerByte: SpWeightsWeightV2Weight;
  setStorage: SpWeightsWeightV2Weight;
  setStoragePerNewByte: SpWeightsWeightV2Weight;
  setStoragePerOldByte: SpWeightsWeightV2Weight;
  setCodeHash: SpWeightsWeightV2Weight;
  clearStorage: SpWeightsWeightV2Weight;
  clearStoragePerByte: SpWeightsWeightV2Weight;
  containsStorage: SpWeightsWeightV2Weight;
  containsStoragePerByte: SpWeightsWeightV2Weight;
  getStorage: SpWeightsWeightV2Weight;
  getStoragePerByte: SpWeightsWeightV2Weight;
  takeStorage: SpWeightsWeightV2Weight;
  takeStoragePerByte: SpWeightsWeightV2Weight;
  transfer: SpWeightsWeightV2Weight;
  call: SpWeightsWeightV2Weight;
  delegateCall: SpWeightsWeightV2Weight;
  callTransferSurcharge: SpWeightsWeightV2Weight;
  callPerClonedByte: SpWeightsWeightV2Weight;
  instantiate: SpWeightsWeightV2Weight;
  instantiateTransferSurcharge: SpWeightsWeightV2Weight;
  instantiatePerInputByte: SpWeightsWeightV2Weight;
  instantiatePerSaltByte: SpWeightsWeightV2Weight;
  hashSha2256: SpWeightsWeightV2Weight;
  hashSha2256PerByte: SpWeightsWeightV2Weight;
  hashKeccak256: SpWeightsWeightV2Weight;
  hashKeccak256PerByte: SpWeightsWeightV2Weight;
  hashBlake2256: SpWeightsWeightV2Weight;
  hashBlake2256PerByte: SpWeightsWeightV2Weight;
  hashBlake2128: SpWeightsWeightV2Weight;
  hashBlake2128PerByte: SpWeightsWeightV2Weight;
  ecdsaRecover: SpWeightsWeightV2Weight;
  ecdsaToEthAddress: SpWeightsWeightV2Weight;
  sr25519Verify: SpWeightsWeightV2Weight;
  sr25519VerifyPerByte: SpWeightsWeightV2Weight;
  reentranceCount: SpWeightsWeightV2Weight;
  accountReentranceCount: SpWeightsWeightV2Weight;
  instantiationNonce: SpWeightsWeightV2Weight;
  addDelegateDependency: SpWeightsWeightV2Weight;
  removeDelegateDependency: SpWeightsWeightV2Weight;
};

export type PalletContractsEnvironment = {
  accountId: PalletContractsEnvironmentType;
  balance: PalletContractsEnvironmentTypeU128;
  hash: PalletContractsEnvironmentTypeH256;
  hasher: PalletContractsEnvironmentTypeBlakeTwo256;
  timestamp: PalletContractsEnvironmentTypeU64;
  blockNumber: PalletContractsEnvironmentTypeU32;
};

export type PalletContractsEnvironmentType = {};

export type PalletContractsEnvironmentTypeU128 = {};

export type PalletContractsEnvironmentTypeH256 = {};

export type PalletContractsEnvironmentTypeBlakeTwo256 = {};

export type SpRuntimeBlakeTwo256 = {};

export type PalletContractsEnvironmentTypeU64 = {};

export type PalletContractsEnvironmentTypeU32 = {};

/**
 * The `Error` enum of this pallet.
 **/
export type PalletContractsError =
  /**
   * Invalid schedule supplied, e.g. with zero weight of a basic operation.
   **/
  | 'InvalidSchedule'
  /**
   * Invalid combination of flags supplied to `seal_call` or `seal_delegate_call`.
   **/
  | 'InvalidCallFlags'
  /**
   * The executed contract exhausted its gas limit.
   **/
  | 'OutOfGas'
  /**
   * The output buffer supplied to a contract API call was too small.
   **/
  | 'OutputBufferTooSmall'
  /**
   * Performing the requested transfer failed. Probably because there isn't enough
   * free balance in the sender's account.
   **/
  | 'TransferFailed'
  /**
   * Performing a call was denied because the calling depth reached the limit
   * of what is specified in the schedule.
   **/
  | 'MaxCallDepthReached'
  /**
   * No contract was found at the specified address.
   **/
  | 'ContractNotFound'
  /**
   * The code supplied to `instantiate_with_code` exceeds the limit specified in the
   * current schedule.
   **/
  | 'CodeTooLarge'
  /**
   * No code could be found at the supplied code hash.
   **/
  | 'CodeNotFound'
  /**
   * No code info could be found at the supplied code hash.
   **/
  | 'CodeInfoNotFound'
  /**
   * A buffer outside of sandbox memory was passed to a contract API function.
   **/
  | 'OutOfBounds'
  /**
   * Input passed to a contract API function failed to decode as expected type.
   **/
  | 'DecodingFailed'
  /**
   * Contract trapped during execution.
   **/
  | 'ContractTrapped'
  /**
   * The size defined in `T::MaxValueSize` was exceeded.
   **/
  | 'ValueTooLarge'
  /**
   * Termination of a contract is not allowed while the contract is already
   * on the call stack. Can be triggered by `seal_terminate`.
   **/
  | 'TerminatedWhileReentrant'
  /**
   * `seal_call` forwarded this contracts input. It therefore is no longer available.
   **/
  | 'InputForwarded'
  /**
   * The subject passed to `seal_random` exceeds the limit.
   **/
  | 'RandomSubjectTooLong'
  /**
   * The amount of topics passed to `seal_deposit_events` exceeds the limit.
   **/
  | 'TooManyTopics'
  /**
   * The chain does not provide a chain extension. Calling the chain extension results
   * in this error. Note that this usually shouldn't happen as deploying such contracts
   * is rejected.
   **/
  | 'NoChainExtension'
  /**
   * A contract with the same AccountId already exists.
   **/
  | 'DuplicateContract'
  /**
   * A contract self destructed in its constructor.
   *
   * This can be triggered by a call to `seal_terminate`.
   **/
  | 'TerminatedInConstructor'
  /**
   * A call tried to invoke a contract that is flagged as non-reentrant.
   * The only other cause is that a call from a contract into the runtime tried to call back
   * into `pallet-contracts`. This would make the whole pallet reentrant with regard to
   * contract code execution which is not supported.
   **/
  | 'ReentranceDenied'
  /**
   * Origin doesn't have enough balance to pay the required storage deposits.
   **/
  | 'StorageDepositNotEnoughFunds'
  /**
   * More storage was created than allowed by the storage deposit limit.
   **/
  | 'StorageDepositLimitExhausted'
  /**
   * Code removal was denied because the code is still in use by at least one contract.
   **/
  | 'CodeInUse'
  /**
   * The contract ran to completion but decided to revert its storage changes.
   * Please note that this error is only returned from extrinsics. When called directly
   * or via RPC an `Ok` will be returned. In this case the caller needs to inspect the flags
   * to determine whether a reversion has taken place.
   **/
  | 'ContractReverted'
  /**
   * The contract's code was found to be invalid during validation.
   *
   * The most likely cause of this is that an API was used which is not supported by the
   * node. This happens if an older node is used with a new version of ink!. Try updating
   * your node to the newest available version.
   *
   * A more detailed error can be found on the node console if debug messages are enabled
   * by supplying `-lruntime::contracts=debug`.
   **/
  | 'CodeRejected'
  /**
   * An indetermistic code was used in a context where this is not permitted.
   **/
  | 'Indeterministic'
  /**
   * A pending migration needs to complete before the extrinsic can be called.
   **/
  | 'MigrationInProgress'
  /**
   * Migrate dispatch call was attempted but no migration was performed.
   **/
  | 'NoMigrationPerformed'
  /**
   * The contract has reached its maximum number of delegate dependencies.
   **/
  | 'MaxDelegateDependenciesReached'
  /**
   * The dependency was not found in the contract's delegate dependencies.
   **/
  | 'DelegateDependencyNotFound'
  /**
   * The contract already depends on the given delegate dependency.
   **/
  | 'DelegateDependencyAlreadyExists'
  /**
   * Can not add a delegate dependency to the code hash of the contract itself.
   **/
  | 'CannotAddSelfAsDelegateDependency';

/**
 * Error for the Sudo pallet
 **/
export type PalletSudoError =
  /**
   * Sender must be the Sudo account
   **/
  'RequireSudo';

/**
 * The `Error` enum of this pallet.
 **/
export type PalletImOnlineError =
  /**
   * Non existent public key.
   **/
  | 'InvalidKey'
  /**
   * Duplicated heartbeat.
   **/
  | 'DuplicatedHeartbeat';

export type SpStakingOffenceOffenceDetails = {
  offender: [AccountId32, PalletStakingExposure];
  reporters: Array<AccountId32>;
};

export type PalletIdentityRegistration = {
  judgements: Array<[number, PalletIdentityJudgement]>;
  deposit: bigint;
  info: PalletIdentityIdentityInfo;
};

export type PalletIdentityRegistrarInfo = { account: AccountId32; fee: bigint; fields: PalletIdentityBitFlags };

/**
 * The `Error` enum of this pallet.
 **/
export type PalletIdentityError =
  /**
   * Too many subs-accounts.
   **/
  | 'TooManySubAccounts'
  /**
   * Account isn't found.
   **/
  | 'NotFound'
  /**
   * Account isn't named.
   **/
  | 'NotNamed'
  /**
   * Empty index.
   **/
  | 'EmptyIndex'
  /**
   * Fee is changed.
   **/
  | 'FeeChanged'
  /**
   * No identity found.
   **/
  | 'NoIdentity'
  /**
   * Sticky judgement.
   **/
  | 'StickyJudgement'
  /**
   * Judgement given.
   **/
  | 'JudgementGiven'
  /**
   * Invalid judgement.
   **/
  | 'InvalidJudgement'
  /**
   * The index is invalid.
   **/
  | 'InvalidIndex'
  /**
   * The target is invalid.
   **/
  | 'InvalidTarget'
  /**
   * Too many additional fields.
   **/
  | 'TooManyFields'
  /**
   * Maximum amount of registrars reached. Cannot add any more.
   **/
  | 'TooManyRegistrars'
  /**
   * Account ID is already named.
   **/
  | 'AlreadyClaimed'
  /**
   * Sender is not a sub-account.
   **/
  | 'NotSub'
  /**
   * Sub-account isn't owned by sender.
   **/
  | 'NotOwned'
  /**
   * The provided judgement was for a different identity.
   **/
  | 'JudgementForDifferentIdentity'
  /**
   * Error that occurs when there is an issue paying for judgement.
   **/
  | 'JudgementPaymentFailed';

export type PalletSocietyMemberRecord = {
  rank: number;
  strikes: number;
  vouching?: PalletSocietyVouchingStatus | undefined;
  index: number;
};

export type PalletSocietyVouchingStatus = 'Vouching' | 'Banned';

export type PalletSocietyPayoutRecord = { paid: bigint; payouts: Array<[number, bigint]> };

export type PalletSocietyBid = { who: AccountId32; kind: PalletSocietyBidKind; value: bigint };

export type PalletSocietyBidKind = { tag: 'Deposit'; value: bigint } | { tag: 'Vouch'; value: [AccountId32, bigint] };

export type PalletSocietyCandidacy = {
  round: number;
  kind: PalletSocietyBidKind;
  bid: bigint;
  tally: PalletSocietyTally;
  skepticStruck: boolean;
};

export type PalletSocietyTally = { approvals: number; rejections: number };

export type PalletSocietyVote = { approve: boolean; weight: number };

export type PalletSocietyIntakeRecord = { who: AccountId32; bid: bigint; round: number };

/**
 * The `Error` enum of this pallet.
 **/
export type PalletSocietyError =
  /**
   * User is not a member.
   **/
  | 'NotMember'
  /**
   * User is already a member.
   **/
  | 'AlreadyMember'
  /**
   * User is suspended.
   **/
  | 'Suspended'
  /**
   * User is not suspended.
   **/
  | 'NotSuspended'
  /**
   * Nothing to payout.
   **/
  | 'NoPayout'
  /**
   * Society already founded.
   **/
  | 'AlreadyFounded'
  /**
   * Not enough in pot to accept candidate.
   **/
  | 'InsufficientPot'
  /**
   * Member is already vouching or banned from vouching again.
   **/
  | 'AlreadyVouching'
  /**
   * Member is not vouching.
   **/
  | 'NotVouchingOnBidder'
  /**
   * Cannot remove the head of the chain.
   **/
  | 'Head'
  /**
   * Cannot remove the founder.
   **/
  | 'Founder'
  /**
   * User has already made a bid.
   **/
  | 'AlreadyBid'
  /**
   * User is already a candidate.
   **/
  | 'AlreadyCandidate'
  /**
   * User is not a candidate.
   **/
  | 'NotCandidate'
  /**
   * Too many members in the society.
   **/
  | 'MaxMembers'
  /**
   * The caller is not the founder.
   **/
  | 'NotFounder'
  /**
   * The caller is not the head.
   **/
  | 'NotHead'
  /**
   * The membership cannot be claimed as the candidate was not clearly approved.
   **/
  | 'NotApproved'
  /**
   * The candidate cannot be kicked as the candidate was not clearly rejected.
   **/
  | 'NotRejected'
  /**
   * The candidacy cannot be dropped as the candidate was clearly approved.
   **/
  | 'Approved'
  /**
   * The candidacy cannot be bestowed as the candidate was clearly rejected.
   **/
  | 'Rejected'
  /**
   * The candidacy cannot be concluded as the voting is still in progress.
   **/
  | 'InProgress'
  /**
   * The candidacy cannot be pruned until a full additional intake period has passed.
   **/
  | 'TooEarly'
  /**
   * The skeptic already voted.
   **/
  | 'Voted'
  /**
   * The skeptic need not vote on candidates from expired rounds.
   **/
  | 'Expired'
  /**
   * User is not a bidder.
   **/
  | 'NotBidder'
  /**
   * There is no defender currently.
   **/
  | 'NoDefender'
  /**
   * Group doesn't exist.
   **/
  | 'NotGroup'
  /**
   * The member is already elevated to this rank.
   **/
  | 'AlreadyElevated'
  /**
   * The skeptic has already been punished for this offence.
   **/
  | 'AlreadyPunished'
  /**
   * Funds are insufficient to pay off society debts.
   **/
  | 'InsufficientFunds'
  /**
   * The candidate/defender has no stale votes to remove.
   **/
  | 'NoVotes';

export type PalletRecoveryRecoveryConfig = {
  delayPeriod: number;
  deposit: bigint;
  friends: Array<AccountId32>;
  threshold: number;
};

export type PalletRecoveryActiveRecovery = { created: number; deposit: bigint; friends: Array<AccountId32> };

/**
 * The `Error` enum of this pallet.
 **/
export type PalletRecoveryError =
  /**
   * User is not allowed to make a call on behalf of this account
   **/
  | 'NotAllowed'
  /**
   * Threshold must be greater than zero
   **/
  | 'ZeroThreshold'
  /**
   * Friends list must be greater than zero and threshold
   **/
  | 'NotEnoughFriends'
  /**
   * Friends list must be less than max friends
   **/
  | 'MaxFriends'
  /**
   * Friends list must be sorted and free of duplicates
   **/
  | 'NotSorted'
  /**
   * This account is not set up for recovery
   **/
  | 'NotRecoverable'
  /**
   * This account is already set up for recovery
   **/
  | 'AlreadyRecoverable'
  /**
   * A recovery process has already started for this account
   **/
  | 'AlreadyStarted'
  /**
   * A recovery process has not started for this rescuer
   **/
  | 'NotStarted'
  /**
   * This account is not a friend who can vouch
   **/
  | 'NotFriend'
  /**
   * The friend must wait until the delay period to vouch for this recovery
   **/
  | 'DelayPeriod'
  /**
   * This user has already vouched for this recovery
   **/
  | 'AlreadyVouched'
  /**
   * The threshold for recovering this account has not been met
   **/
  | 'Threshold'
  /**
   * There are still active recovery attempts that need to be closed
   **/
  | 'StillActive'
  /**
   * This account is already set up for recovery
   **/
  | 'AlreadyProxy'
  /**
   * Some internal state is broken.
   **/
  | 'BadState';

export type PalletVestingReleases = 'V0' | 'V1';

/**
 * Error for the vesting pallet.
 **/
export type PalletVestingError =
  /**
   * The account given is not vesting.
   **/
  | 'NotVesting'
  /**
   * The account already has `MaxVestingSchedules` count of schedules and thus
   * cannot add another one. Consider merging existing schedules in order to add another.
   **/
  | 'AtMaxVestingSchedules'
  /**
   * Amount being transferred is too low to create a vesting schedule.
   **/
  | 'AmountLow'
  /**
   * An index was out of bounds of the vesting schedules.
   **/
  | 'ScheduleIndexOutOfBounds'
  /**
   * Failed to create a new schedule because some parameter was invalid.
   **/
  | 'InvalidScheduleParams';

export type PalletSchedulerScheduled = {
  maybeId?: FixedBytes<32> | undefined;
  priority: number;
  call: FrameSupportPreimagesBounded;
  maybePeriodic?: [number, number] | undefined;
  origin: KitchensinkRuntimeOriginCaller;
};

/**
 * The `Error` enum of this pallet.
 **/
export type PalletSchedulerError =
  /**
   * Failed to schedule a call
   **/
  | 'FailedToSchedule'
  /**
   * Cannot find the scheduled call.
   **/
  | 'NotFound'
  /**
   * Given target block number is in the past.
   **/
  | 'TargetBlockNumberInPast'
  /**
   * Reschedule failed because it does not change scheduled time.
   **/
  | 'RescheduleNoChange'
  /**
   * Attempt to use a non-named function on a named task.
   **/
  | 'Named';

/**
 * The `Error` enum of this pallet.
 **/
export type PalletGluttonError =
  /**
   * The pallet was already initialized.
   *
   * Set `witness_count` to `Some` to bypass this error.
   **/
  | 'AlreadyInitialized'
  /**
   * The limit was over [`crate::RESOURCE_HARD_LIMIT`].
   **/
  | 'InsaneLimit';

export type PalletPreimageRequestStatus =
  | { tag: 'Unrequested'; value: { deposit: [AccountId32, bigint]; len: number } }
  | {
      tag: 'Requested';
      value: { deposit?: [AccountId32, bigint] | undefined; count: number; len?: number | undefined };
    };

/**
 * The `Error` enum of this pallet.
 **/
export type PalletPreimageError =
  /**
   * Preimage is too large to store on-chain.
   **/
  | 'TooBig'
  /**
   * Preimage has already been noted on-chain.
   **/
  | 'AlreadyNoted'
  /**
   * The user is not authorized to perform this action.
   **/
  | 'NotAuthorized'
  /**
   * The preimage cannot be removed since it has not yet been noted.
   **/
  | 'NotNoted'
  /**
   * A preimage may not be removed when there are outstanding requests.
   **/
  | 'Requested'
  /**
   * The preimage request cannot be removed since no outstanding requests exist.
   **/
  | 'NotRequested';

export type PalletProxyProxyDefinition = {
  delegate: AccountId32;
  proxyType: KitchensinkRuntimeProxyType;
  delay: number;
};

export type PalletProxyAnnouncement = { real: AccountId32; callHash: H256; height: number };

/**
 * The `Error` enum of this pallet.
 **/
export type PalletProxyError =
  /**
   * There are too many proxies registered or too many announcements pending.
   **/
  | 'TooMany'
  /**
   * Proxy registration not found.
   **/
  | 'NotFound'
  /**
   * Sender is not a proxy of the account to be proxied.
   **/
  | 'NotProxy'
  /**
   * A call which is incompatible with the proxy type's filter was attempted.
   **/
  | 'Unproxyable'
  /**
   * Account is already a proxy.
   **/
  | 'Duplicate'
  /**
   * Call may not be made by proxy because it may escalate its privileges.
   **/
  | 'NoPermission'
  /**
   * Announcement, if made at all, was made too recently.
   **/
  | 'Unannounced'
  /**
   * Cannot add self as proxy.
   **/
  | 'NoSelfProxy';

export type PalletMultisigMultisig = {
  when: PalletMultisigTimepoint;
  deposit: bigint;
  depositor: AccountId32;
  approvals: Array<AccountId32>;
};

/**
 * The `Error` enum of this pallet.
 **/
export type PalletMultisigError =
  /**
   * Threshold must be 2 or greater.
   **/
  | 'MinimumThreshold'
  /**
   * Call is already approved by this signatory.
   **/
  | 'AlreadyApproved'
  /**
   * Call doesn't need any (more) approvals.
   **/
  | 'NoApprovalsNeeded'
  /**
   * There are too few signatories in the list.
   **/
  | 'TooFewSignatories'
  /**
   * There are too many signatories in the list.
   **/
  | 'TooManySignatories'
  /**
   * The signatories were provided out of order; they should be ordered.
   **/
  | 'SignatoriesOutOfOrder'
  /**
   * The sender was contained in the other signatories; it shouldn't be.
   **/
  | 'SenderInSignatories'
  /**
   * Multisig operation not found when attempting to cancel.
   **/
  | 'NotFound'
  /**
   * Only the account that originally created the multisig is able to cancel it.
   **/
  | 'NotOwner'
  /**
   * No timepoint was given, yet the multisig operation is already underway.
   **/
  | 'NoTimepoint'
  /**
   * A different timepoint was given to the multisig operation that is underway.
   **/
  | 'WrongTimepoint'
  /**
   * A timepoint was given, yet no multisig operation is underway.
   **/
  | 'UnexpectedTimepoint'
  /**
   * The maximum weight information provided was too low.
   **/
  | 'MaxWeightTooLow'
  /**
   * The data to be stored is already stored.
   **/
  | 'AlreadyStored';

export type PalletBountiesBounty = {
  proposer: AccountId32;
  value: bigint;
  fee: bigint;
  curatorDeposit: bigint;
  bond: bigint;
  status: PalletBountiesBountyStatus;
};

export type PalletBountiesBountyStatus =
  | { tag: 'Proposed' }
  | { tag: 'Approved' }
  | { tag: 'Funded' }
  | { tag: 'CuratorProposed'; value: { curator: AccountId32 } }
  | { tag: 'Active'; value: { curator: AccountId32; updateDue: number } }
  | { tag: 'PendingPayout'; value: { curator: AccountId32; beneficiary: AccountId32; unlockAt: number } };

/**
 * The `Error` enum of this pallet.
 **/
export type PalletBountiesError =
  /**
   * Proposer's balance is too low.
   **/
  | 'InsufficientProposersBalance'
  /**
   * No proposal or bounty at that index.
   **/
  | 'InvalidIndex'
  /**
   * The reason given is just too big.
   **/
  | 'ReasonTooBig'
  /**
   * The bounty status is unexpected.
   **/
  | 'UnexpectedStatus'
  /**
   * Require bounty curator.
   **/
  | 'RequireCurator'
  /**
   * Invalid bounty value.
   **/
  | 'InvalidValue'
  /**
   * Invalid bounty fee.
   **/
  | 'InvalidFee'
  /**
   * A bounty payout is pending.
   * To cancel the bounty, you must unassign and slash the curator.
   **/
  | 'PendingPayout'
  /**
   * The bounties cannot be claimed/closed because it's still in the countdown period.
   **/
  | 'Premature'
  /**
   * The bounty cannot be closed because it has active child bounties.
   **/
  | 'HasActiveChildBounty'
  /**
   * Too many approvals are already queued.
   **/
  | 'TooManyQueued';

export type PalletTipsOpenTip = {
  reason: H256;
  who: AccountId32;
  finder: AccountId32;
  deposit: bigint;
  closes?: number | undefined;
  tips: Array<[AccountId32, bigint]>;
  findersFee: boolean;
};

/**
 * The `Error` enum of this pallet.
 **/
export type PalletTipsError =
  /**
   * The reason given is just too big.
   **/
  | 'ReasonTooBig'
  /**
   * The tip was already found/started.
   **/
  | 'AlreadyKnown'
  /**
   * The tip hash is unknown.
   **/
  | 'UnknownTip'
  /**
   * The account attempting to retract the tip is not the finder of the tip.
   **/
  | 'NotFinder'
  /**
   * The tip cannot be claimed/closed because there are not enough tippers yet.
   **/
  | 'StillOpen'
  /**
   * The tip cannot be claimed/closed because it's still in the countdown period.
   **/
  | 'Premature';

export type PalletAssetsAssetDetails = {
  owner: AccountId32;
  issuer: AccountId32;
  admin: AccountId32;
  freezer: AccountId32;
  supply: bigint;
  deposit: bigint;
  minBalance: bigint;
  isSufficient: boolean;
  accounts: number;
  sufficients: number;
  approvals: number;
  status: PalletAssetsAssetStatus;
};

export type PalletAssetsAssetStatus = 'Live' | 'Frozen' | 'Destroying';

export type PalletAssetsAssetAccount = {
  balance: bigint;
  status: PalletAssetsAccountStatus;
  reason: PalletAssetsExistenceReason;
  extra: [];
};

export type PalletAssetsAccountStatus = 'Liquid' | 'Frozen' | 'Blocked';

export type PalletAssetsExistenceReason =
  | { tag: 'Consumer' }
  | { tag: 'Sufficient' }
  | { tag: 'DepositHeld'; value: bigint }
  | { tag: 'DepositRefunded' }
  | { tag: 'DepositFrom'; value: [AccountId32, bigint] };

export type PalletAssetsApproval = { amount: bigint; deposit: bigint };

export type PalletAssetsAssetMetadata = {
  deposit: bigint;
  name: Bytes;
  symbol: Bytes;
  decimals: number;
  isFrozen: boolean;
};

/**
 * The `Error` enum of this pallet.
 **/
export type PalletAssetsError =
  /**
   * Account balance must be greater than or equal to the transfer amount.
   **/
  | 'BalanceLow'
  /**
   * The account to alter does not exist.
   **/
  | 'NoAccount'
  /**
   * The signing account has no permission to do the operation.
   **/
  | 'NoPermission'
  /**
   * The given asset ID is unknown.
   **/
  | 'Unknown'
  /**
   * The origin account is frozen.
   **/
  | 'Frozen'
  /**
   * The asset ID is already taken.
   **/
  | 'InUse'
  /**
   * Invalid witness data given.
   **/
  | 'BadWitness'
  /**
   * Minimum balance should be non-zero.
   **/
  | 'MinBalanceZero'
  /**
   * Unable to increment the consumer reference counters on the account. Either no provider
   * reference exists to allow a non-zero balance of a non-self-sufficient asset, or one
   * fewer then the maximum number of consumers has been reached.
   **/
  | 'UnavailableConsumer'
  /**
   * Invalid metadata given.
   **/
  | 'BadMetadata'
  /**
   * No approval exists that would allow the transfer.
   **/
  | 'Unapproved'
  /**
   * The source account would not survive the transfer and it needs to stay alive.
   **/
  | 'WouldDie'
  /**
   * The asset-account already exists.
   **/
  | 'AlreadyExists'
  /**
   * The asset-account doesn't have an associated deposit.
   **/
  | 'NoDeposit'
  /**
   * The operation would result in funds being burned.
   **/
  | 'WouldBurn'
  /**
   * The asset is a live asset and is actively being used. Usually emit for operations such
   * as `start_destroy` which require the asset to be in a destroying state.
   **/
  | 'LiveAsset'
  /**
   * The asset is not live, and likely being destroyed.
   **/
  | 'AssetNotLive'
  /**
   * The asset status is not the expected status.
   **/
  | 'IncorrectStatus'
  /**
   * The asset should be frozen before the given operation.
   **/
  | 'NotFrozen'
  /**
   * Callback action resulted in error
   **/
  | 'CallbackFailed';

export type PalletLotteryLotteryConfig = {
  price: bigint;
  start: number;
  length: number;
  delay: number;
  repeat: boolean;
};

/**
 * The `Error` enum of this pallet.
 **/
export type PalletLotteryError =
  /**
   * A lottery has not been configured.
   **/
  | 'NotConfigured'
  /**
   * A lottery is already in progress.
   **/
  | 'InProgress'
  /**
   * A lottery has already ended.
   **/
  | 'AlreadyEnded'
  /**
   * The call is not valid for an open lottery.
   **/
  | 'InvalidCall'
  /**
   * You are already participating in the lottery with this call.
   **/
  | 'AlreadyParticipating'
  /**
   * Too many calls for a single lottery.
   **/
  | 'TooManyCalls'
  /**
   * Failed to encode calls
   **/
  | 'EncodingFailed';

export type PalletNisBid = { amount: bigint; who: AccountId32 };

export type PalletNisSummaryRecord = {
  proportionOwed: Perquintill;
  index: number;
  thawed: Perquintill;
  lastPeriod: number;
  receiptsOnHold: bigint;
};

export type PalletNisReceiptRecord = {
  proportion: Perquintill;
  owner?: [AccountId32, bigint] | undefined;
  expiry: number;
};

/**
 * The `Error` enum of this pallet.
 **/
export type PalletNisError =
  /**
   * The duration of the bid is less than one.
   **/
  | 'DurationTooSmall'
  /**
   * The duration is the bid is greater than the number of queues.
   **/
  | 'DurationTooBig'
  /**
   * The amount of the bid is less than the minimum allowed.
   **/
  | 'AmountTooSmall'
  /**
   * The queue for the bid's duration is full and the amount bid is too low to get in
   * through replacing an existing bid.
   **/
  | 'BidTooLow'
  /**
   * Receipt index is unknown.
   **/
  | 'UnknownReceipt'
  /**
   * Not the owner of the receipt.
   **/
  | 'NotOwner'
  /**
   * Bond not yet at expiry date.
   **/
  | 'NotExpired'
  /**
   * The given bid for retraction is not found.
   **/
  | 'UnknownBid'
  /**
   * The portion supplied is beyond the value of the receipt.
   **/
  | 'PortionTooBig'
  /**
   * Not enough funds are held to pay out.
   **/
  | 'Unfunded'
  /**
   * There are enough funds for what is required.
   **/
  | 'AlreadyFunded'
  /**
   * The thaw throttle has been reached for this period.
   **/
  | 'Throttled'
  /**
   * The operation would result in a receipt worth an insignficant value.
   **/
  | 'MakesDust'
  /**
   * The receipt is already communal.
   **/
  | 'AlreadyCommunal'
  /**
   * The receipt is already private.
   **/
  | 'AlreadyPrivate';

export type PalletUniquesCollectionDetails = {
  owner: AccountId32;
  issuer: AccountId32;
  admin: AccountId32;
  freezer: AccountId32;
  totalDeposit: bigint;
  freeHolding: boolean;
  items: number;
  itemMetadatas: number;
  attributes: number;
  isFrozen: boolean;
};

export type PalletUniquesItemDetails = {
  owner: AccountId32;
  approved?: AccountId32 | undefined;
  isFrozen: boolean;
  deposit: bigint;
};

export type PalletUniquesCollectionMetadata = { deposit: bigint; data: Bytes; isFrozen: boolean };

export type PalletUniquesItemMetadata = { deposit: bigint; data: Bytes; isFrozen: boolean };

/**
 * The `Error` enum of this pallet.
 **/
export type PalletUniquesError =
  /**
   * The signing account has no permission to do the operation.
   **/
  | 'NoPermission'
  /**
   * The given item ID is unknown.
   **/
  | 'UnknownCollection'
  /**
   * The item ID has already been used for an item.
   **/
  | 'AlreadyExists'
  /**
   * The owner turned out to be different to what was expected.
   **/
  | 'WrongOwner'
  /**
   * Invalid witness data given.
   **/
  | 'BadWitness'
  /**
   * The item ID is already taken.
   **/
  | 'InUse'
  /**
   * The item or collection is frozen.
   **/
  | 'Frozen'
  /**
   * The delegate turned out to be different to what was expected.
   **/
  | 'WrongDelegate'
  /**
   * There is no delegate approved.
   **/
  | 'NoDelegate'
  /**
   * No approval exists that would allow the transfer.
   **/
  | 'Unapproved'
  /**
   * The named owner has not signed ownership of the collection is acceptable.
   **/
  | 'Unaccepted'
  /**
   * The item is locked.
   **/
  | 'Locked'
  /**
   * All items have been minted.
   **/
  | 'MaxSupplyReached'
  /**
   * The max supply has already been set.
   **/
  | 'MaxSupplyAlreadySet'
  /**
   * The provided max supply is less to the amount of items a collection already has.
   **/
  | 'MaxSupplyTooSmall'
  /**
   * The given item ID is unknown.
   **/
  | 'UnknownItem'
  /**
   * Item is not for sale.
   **/
  | 'NotForSale'
  /**
   * The provided bid is too low.
   **/
  | 'BidTooLow';

export type PalletNftsCollectionDetails = {
  owner: AccountId32;
  ownerDeposit: bigint;
  items: number;
  itemMetadatas: number;
  itemConfigs: number;
  attributes: number;
};

export type PalletNftsBitFlagsCollectionRole = number;

export type PalletNftsCollectionRole = 'Issuer' | 'Freezer' | 'Admin';

export type PalletNftsItemDetails = {
  owner: AccountId32;
  approvals: Array<[AccountId32, number | undefined]>;
  deposit: PalletNftsItemDeposit;
};

export type PalletNftsItemDeposit = { account: AccountId32; amount: bigint };

export type PalletNftsCollectionMetadata = { deposit: bigint; data: Bytes };

export type PalletNftsItemMetadata = { deposit: PalletNftsItemMetadataDeposit; data: Bytes };

export type PalletNftsItemMetadataDeposit = { account?: AccountId32 | undefined; amount: bigint };

export type PalletNftsAttributeDeposit = { account?: AccountId32 | undefined; amount: bigint };

export type PalletNftsPendingSwap = {
  desiredCollection: number;
  desiredItem?: number | undefined;
  price?: PalletNftsPriceWithDirection | undefined;
  deadline: number;
};

export type PalletNftsBitFlagsPalletFeature = bigint;

export type PalletNftsPalletFeature = 'Trading' | 'Attributes' | 'Approvals' | 'Swaps';

/**
 * The `Error` enum of this pallet.
 **/
export type PalletNftsError =
  /**
   * The signing account has no permission to do the operation.
   **/
  | 'NoPermission'
  /**
   * The given item ID is unknown.
   **/
  | 'UnknownCollection'
  /**
   * The item ID has already been used for an item.
   **/
  | 'AlreadyExists'
  /**
   * The approval had a deadline that expired, so the approval isn't valid anymore.
   **/
  | 'ApprovalExpired'
  /**
   * The owner turned out to be different to what was expected.
   **/
  | 'WrongOwner'
  /**
   * The witness data given does not match the current state of the chain.
   **/
  | 'BadWitness'
  /**
   * Collection ID is already taken.
   **/
  | 'CollectionIdInUse'
  /**
   * Items within that collection are non-transferable.
   **/
  | 'ItemsNonTransferable'
  /**
   * The provided account is not a delegate.
   **/
  | 'NotDelegate'
  /**
   * The delegate turned out to be different to what was expected.
   **/
  | 'WrongDelegate'
  /**
   * No approval exists that would allow the transfer.
   **/
  | 'Unapproved'
  /**
   * The named owner has not signed ownership acceptance of the collection.
   **/
  | 'Unaccepted'
  /**
   * The item is locked (non-transferable).
   **/
  | 'ItemLocked'
  /**
   * Item's attributes are locked.
   **/
  | 'LockedItemAttributes'
  /**
   * Collection's attributes are locked.
   **/
  | 'LockedCollectionAttributes'
  /**
   * Item's metadata is locked.
   **/
  | 'LockedItemMetadata'
  /**
   * Collection's metadata is locked.
   **/
  | 'LockedCollectionMetadata'
  /**
   * All items have been minted.
   **/
  | 'MaxSupplyReached'
  /**
   * The max supply is locked and can't be changed.
   **/
  | 'MaxSupplyLocked'
  /**
   * The provided max supply is less than the number of items a collection already has.
   **/
  | 'MaxSupplyTooSmall'
  /**
   * The given item ID is unknown.
   **/
  | 'UnknownItem'
  /**
   * Swap doesn't exist.
   **/
  | 'UnknownSwap'
  /**
   * The given item has no metadata set.
   **/
  | 'MetadataNotFound'
  /**
   * The provided attribute can't be found.
   **/
  | 'AttributeNotFound'
  /**
   * Item is not for sale.
   **/
  | 'NotForSale'
  /**
   * The provided bid is too low.
   **/
  | 'BidTooLow'
  /**
   * The item has reached its approval limit.
   **/
  | 'ReachedApprovalLimit'
  /**
   * The deadline has already expired.
   **/
  | 'DeadlineExpired'
  /**
   * The duration provided should be less than or equal to `MaxDeadlineDuration`.
   **/
  | 'WrongDuration'
  /**
   * The method is disabled by system settings.
   **/
  | 'MethodDisabled'
  /**
   * The provided setting can't be set.
   **/
  | 'WrongSetting'
  /**
   * Item's config already exists and should be equal to the provided one.
   **/
  | 'InconsistentItemConfig'
  /**
   * Config for a collection or an item can't be found.
   **/
  | 'NoConfig'
  /**
   * Some roles were not cleared.
   **/
  | 'RolesNotCleared'
  /**
   * Mint has not started yet.
   **/
  | 'MintNotStarted'
  /**
   * Mint has already ended.
   **/
  | 'MintEnded'
  /**
   * The provided Item was already used for claiming.
   **/
  | 'AlreadyClaimed'
  /**
   * The provided data is incorrect.
   **/
  | 'IncorrectData'
  /**
   * The extrinsic was sent by the wrong origin.
   **/
  | 'WrongOrigin'
  /**
   * The provided signature is incorrect.
   **/
  | 'WrongSignature'
  /**
   * The provided metadata might be too long.
   **/
  | 'IncorrectMetadata'
  /**
   * Can't set more attributes per one call.
   **/
  | 'MaxAttributesLimitReached'
  /**
   * The provided namespace isn't supported in this call.
   **/
  | 'WrongNamespace'
  /**
   * Can't delete non-empty collections.
   **/
  | 'CollectionNotEmpty'
  /**
   * The witness data should be provided.
   **/
  | 'WitnessRequired';

export type PalletNftFractionalizationDetails = {
  asset: number;
  fractions: bigint;
  deposit: bigint;
  assetCreator: AccountId32;
};

/**
 * The `Error` enum of this pallet.
 **/
export type PalletNftFractionalizationError =
  /**
   * Asset ID does not correspond to locked NFT.
   **/
  | 'IncorrectAssetId'
  /**
   * The signing account has no permission to do the operation.
   **/
  | 'NoPermission'
  /**
   * NFT doesn't exist.
   **/
  | 'NftNotFound'
  /**
   * NFT has not yet been fractionalised.
   **/
  | 'NftNotFractionalized';

export type PalletSalaryStatusType = {
  cycleIndex: number;
  cycleStart: number;
  budget: bigint;
  totalRegistrations: bigint;
  totalUnregisteredPaid: bigint;
};

export type PalletSalaryClaimantStatus = { lastActive: number; status: PalletSalaryClaimState };

export type PalletSalaryClaimState =
  | { tag: 'Nothing' }
  | { tag: 'Registered'; value: bigint }
  | { tag: 'Attempted'; value: { registered?: bigint | undefined; id: []; amount: bigint } };

/**
 * The `Error` enum of this pallet.
 **/
export type PalletSalaryError =
  /**
   * The salary system has already been started.
   **/
  | 'AlreadyStarted'
  /**
   * The account is not a ranked member.
   **/
  | 'NotMember'
  /**
   * The account is already inducted.
   **/
  | 'AlreadyInducted'
  | 'NotInducted'
  /**
   * The member does not have a current valid claim.
   **/
  | 'NoClaim'
  /**
   * The member's claim is zero.
   **/
  | 'ClaimZero'
  /**
   * Current cycle's registration period is over.
   **/
  | 'TooLate'
  /**
   * Current cycle's payment period is not yet begun.
   **/
  | 'TooEarly'
  /**
   * Cycle is not yet over.
   **/
  | 'NotYet'
  /**
   * The payout cycles have not yet started.
   **/
  | 'NotStarted'
  /**
   * There is no budget left for the payout.
   **/
  | 'Bankrupt'
  /**
   * There was some issue with the mechanism of payment.
   **/
  | 'PayError'
  /**
   * The payment has neither failed nor succeeded yet.
   **/
  | 'Inconclusive'
  /**
   * The cycle is after that in which the payment was made.
   **/
  | 'NotCurrent';

export type PalletCoreFellowshipMemberStatus = { isActive: boolean; lastPromotion: number; lastProof: number };

/**
 * The `Error` enum of this pallet.
 **/
export type PalletCoreFellowshipError =
  /**
   * Member's rank is too low.
   **/
  | 'Unranked'
  /**
   * Member's rank is not zero.
   **/
  | 'Ranked'
  /**
   * Member's rank is not as expected - generally means that the rank provided to the call
   * does not agree with the state of the system.
   **/
  | 'UnexpectedRank'
  /**
   * The given rank is invalid - this generally means it's not between 1 and `RANK_COUNT`.
   **/
  | 'InvalidRank'
  /**
   * The origin does not have enough permission to do this operation.
   **/
  | 'NoPermission'
  /**
   * No work needs to be done at present for this member.
   **/
  | 'NothingDoing'
  /**
   * The candidate has already been inducted. This should never happen since it would
   * require a candidate (rank 0) to already be tracked in the pallet.
   **/
  | 'AlreadyInducted'
  /**
   * The candidate has not been inducted, so cannot be offboarded from this pallet.
   **/
  | 'NotTracked'
  /**
   * Operation cannot be done yet since not enough time has passed.
   **/
  | 'TooSoon';

export type PalletTransactionStorageTransactionInfo = {
  chunkRoot: H256;
  contentHash: H256;
  size: number;
  blockChunks: number;
};

/**
 * The `Error` enum of this pallet.
 **/
export type PalletTransactionStorageError =
  /**
   * Insufficient account balance.
   **/
  | 'InsufficientFunds'
  /**
   * Invalid configuration.
   **/
  | 'NotConfigured'
  /**
   * Renewed extrinsic is not found.
   **/
  | 'RenewedNotFound'
  /**
   * Attempting to store empty transaction
   **/
  | 'EmptyTransaction'
  /**
   * Proof was not expected in this block.
   **/
  | 'UnexpectedProof'
  /**
   * Proof failed verification.
   **/
  | 'InvalidProof'
  /**
   * Missing storage proof.
   **/
  | 'MissingProof'
  /**
   * Unable to verify proof becasue state data is missing.
   **/
  | 'MissingStateData'
  /**
   * Double proof check in the block.
   **/
  | 'DoubleCheck'
  /**
   * Storage proof was not checked in the block.
   **/
  | 'ProofNotChecked'
  /**
   * Transaction is too large.
   **/
  | 'TransactionTooLarge'
  /**
   * Too many transactions in the block.
   **/
  | 'TooManyTransactions'
  /**
   * Attempted to call `store` outside of block execution.
   **/
  | 'BadContext';

export type PalletBagsListListNode = {
  id: AccountId32;
  prev?: AccountId32 | undefined;
  next?: AccountId32 | undefined;
  bagUpper: bigint;
  score: bigint;
};

export type PalletBagsListListBag = { head?: AccountId32 | undefined; tail?: AccountId32 | undefined };

/**
 * The `Error` enum of this pallet.
 **/
export type PalletBagsListError =
  /**
   * A error in the list interface implementation.
   **/
  { tag: 'List'; value: PalletBagsListListListError };

export type PalletBagsListListListError = 'Duplicate' | 'NotHeavier' | 'NotInSameBag' | 'NodeNotFound';

export type PalletChildBountiesChildBounty = {
  parentBounty: number;
  value: bigint;
  fee: bigint;
  curatorDeposit: bigint;
  status: PalletChildBountiesChildBountyStatus;
};

export type PalletChildBountiesChildBountyStatus =
  | { tag: 'Added' }
  | { tag: 'CuratorProposed'; value: { curator: AccountId32 } }
  | { tag: 'Active'; value: { curator: AccountId32 } }
  | { tag: 'PendingPayout'; value: { curator: AccountId32; beneficiary: AccountId32; unlockAt: number } };

/**
 * The `Error` enum of this pallet.
 **/
export type PalletChildBountiesError =
  /**
   * The parent bounty is not in active state.
   **/
  | 'ParentBountyNotActive'
  /**
   * The bounty balance is not enough to add new child-bounty.
   **/
  | 'InsufficientBountyBalance'
  /**
   * Number of child bounties exceeds limit `MaxActiveChildBountyCount`.
   **/
  | 'TooManyChildBounties';

export type PalletReferendaReferendumInfo =
  | { tag: 'Ongoing'; value: PalletReferendaReferendumStatus }
  | { tag: 'Approved'; value: [number, PalletReferendaDeposit | undefined, PalletReferendaDeposit | undefined] }
  | { tag: 'Rejected'; value: [number, PalletReferendaDeposit | undefined, PalletReferendaDeposit | undefined] }
  | { tag: 'Cancelled'; value: [number, PalletReferendaDeposit | undefined, PalletReferendaDeposit | undefined] }
  | { tag: 'TimedOut'; value: [number, PalletReferendaDeposit | undefined, PalletReferendaDeposit | undefined] }
  | { tag: 'Killed'; value: number };

export type PalletReferendaReferendumStatus = {
  track: number;
  origin: KitchensinkRuntimeOriginCaller;
  proposal: FrameSupportPreimagesBounded;
  enactment: FrameSupportScheduleDispatchTime;
  submitted: number;
  submissionDeposit: PalletReferendaDeposit;
  decisionDeposit?: PalletReferendaDeposit | undefined;
  deciding?: PalletReferendaDecidingStatus | undefined;
  tally: PalletConvictionVotingTally;
  inQueue: boolean;
  alarm?: [number, [number, number]] | undefined;
};

export type PalletReferendaDeposit = { who: AccountId32; amount: bigint };

export type PalletReferendaDecidingStatus = { since: number; confirming?: number | undefined };

export type PalletReferendaTrackInfo = {
  name: string;
  maxDeciding: number;
  decisionDeposit: bigint;
  preparePeriod: number;
  decisionPeriod: number;
  confirmPeriod: number;
  minEnactmentPeriod: number;
  minApproval: PalletReferendaCurve;
  minSupport: PalletReferendaCurve;
};

export type PalletReferendaCurve =
  | { tag: 'LinearDecreasing'; value: { length: Perbill; floor: Perbill; ceil: Perbill } }
  | { tag: 'SteppedDecreasing'; value: { begin: Perbill; end: Perbill; step: Perbill; period: Perbill } }
  | { tag: 'Reciprocal'; value: { factor: FixedI64; xOffset: FixedI64; yOffset: FixedI64 } };

/**
 * The `Error` enum of this pallet.
 **/
export type PalletReferendaError =
  /**
   * Referendum is not ongoing.
   **/
  | 'NotOngoing'
  /**
   * Referendum's decision deposit is already paid.
   **/
  | 'HasDeposit'
  /**
   * The track identifier given was invalid.
   **/
  | 'BadTrack'
  /**
   * There are already a full complement of referenda in progress for this track.
   **/
  | 'Full'
  /**
   * The queue of the track is empty.
   **/
  | 'QueueEmpty'
  /**
   * The referendum index provided is invalid in this context.
   **/
  | 'BadReferendum'
  /**
   * There was nothing to do in the advancement.
   **/
  | 'NothingToDo'
  /**
   * No track exists for the proposal origin.
   **/
  | 'NoTrack'
  /**
   * Any deposit cannot be refunded until after the decision is over.
   **/
  | 'Unfinished'
  /**
   * The deposit refunder is not the depositor.
   **/
  | 'NoPermission'
  /**
   * The deposit cannot be refunded since none was made.
   **/
  | 'NoDeposit'
  /**
   * The referendum status is invalid for this operation.
   **/
  | 'BadStatus'
  /**
   * The preimage does not exist.
   **/
  | 'PreimageNotExist';

/**
 * The `Error` enum of this pallet.
 **/
export type PalletRemarkError =
  /**
   * Attempting to store empty data.
   **/
  | 'Empty'
  /**
   * Attempted to call `store` outside of block execution.
   **/
  | 'BadContext';

export type PalletConvictionVotingVoteVoting =
  | { tag: 'Casting'; value: PalletConvictionVotingVoteCasting }
  | { tag: 'Delegating'; value: PalletConvictionVotingVoteDelegating };

export type PalletConvictionVotingVoteCasting = {
  votes: Array<[number, PalletConvictionVotingVoteAccountVote]>;
  delegations: PalletConvictionVotingDelegations;
  prior: PalletConvictionVotingVotePriorLock;
};

export type PalletConvictionVotingDelegations = { votes: bigint; capital: bigint };

export type PalletConvictionVotingVotePriorLock = [number, bigint];

export type PalletConvictionVotingVoteDelegating = {
  balance: bigint;
  target: AccountId32;
  conviction: PalletConvictionVotingConviction;
  delegations: PalletConvictionVotingDelegations;
  prior: PalletConvictionVotingVotePriorLock;
};

/**
 * The `Error` enum of this pallet.
 **/
export type PalletConvictionVotingError =
  /**
   * Poll is not ongoing.
   **/
  | 'NotOngoing'
  /**
   * The given account did not vote on the poll.
   **/
  | 'NotVoter'
  /**
   * The actor has no permission to conduct the action.
   **/
  | 'NoPermission'
  /**
   * The actor has no permission to conduct the action right now but will do in the future.
   **/
  | 'NoPermissionYet'
  /**
   * The account is already delegating.
   **/
  | 'AlreadyDelegating'
  /**
   * The account currently has votes attached to it and the operation cannot succeed until
   * these are removed, either through `unvote` or `reap_vote`.
   **/
  | 'AlreadyVoting'
  /**
   * Too high a balance was provided that the account cannot afford.
   **/
  | 'InsufficientFunds'
  /**
   * The account is not currently delegating.
   **/
  | 'NotDelegating'
  /**
   * Delegation to oneself makes no sense.
   **/
  | 'Nonsense'
  /**
   * Maximum number of votes reached.
   **/
  | 'MaxVotesReached'
  /**
   * The class must be supplied since it is not easily determinable from the state.
   **/
  | 'ClassNeeded'
  /**
   * The class ID supplied is invalid.
   **/
  | 'BadClass';

/**
 * The `Error` enum of this pallet.
 **/
export type PalletWhitelistError =
  /**
   * The preimage of the call hash could not be loaded.
   **/
  | 'UnavailablePreImage'
  /**
   * The call could not be decoded.
   **/
  | 'UndecodableCall'
  /**
   * The weight of the decoded call was higher than the witness.
   **/
  | 'InvalidCallWeightWitness'
  /**
   * The call was not whitelisted.
   **/
  | 'CallIsNotWhitelisted'
  /**
   * The call was already whitelisted; No-Op.
   **/
  | 'CallAlreadyWhitelisted';

export type PalletAllianceMemberRole = 'Fellow' | 'Ally' | 'Retiring';

/**
 * The `Error` enum of this pallet.
 **/
export type PalletAllianceError =
  /**
   * The Alliance has not been initialized yet, therefore accounts cannot join it.
   **/
  | 'AllianceNotYetInitialized'
  /**
   * The Alliance has been initialized, therefore cannot be initialized again.
   **/
  | 'AllianceAlreadyInitialized'
  /**
   * Account is already a member.
   **/
  | 'AlreadyMember'
  /**
   * Account is not a member.
   **/
  | 'NotMember'
  /**
   * Account is not an ally.
   **/
  | 'NotAlly'
  /**
   * Account does not have voting rights.
   **/
  | 'NoVotingRights'
  /**
   * Account is already an elevated (fellow) member.
   **/
  | 'AlreadyElevated'
  /**
   * Item is already listed as unscrupulous.
   **/
  | 'AlreadyUnscrupulous'
  /**
   * Account has been deemed unscrupulous by the Alliance and is not welcome to join or be
   * nominated.
   **/
  | 'AccountNonGrata'
  /**
   * Item has not been deemed unscrupulous.
   **/
  | 'NotListedAsUnscrupulous'
  /**
   * The number of unscrupulous items exceeds `MaxUnscrupulousItems`.
   **/
  | 'TooManyUnscrupulousItems'
  /**
   * Length of website URL exceeds `MaxWebsiteUrlLength`.
   **/
  | 'TooLongWebsiteUrl'
  /**
   * Balance is insufficient for the required deposit.
   **/
  | 'InsufficientFunds'
  /**
   * The account's identity does not have display field and website field.
   **/
  | 'WithoutIdentityDisplayAndWebsite'
  /**
   * The account's identity has no good judgement.
   **/
  | 'WithoutGoodIdentityJudgement'
  /**
   * The proposal hash is not found.
   **/
  | 'MissingProposalHash'
  /**
   * The announcement is not found.
   **/
  | 'MissingAnnouncement'
  /**
   * Number of members exceeds `MaxMembersCount`.
   **/
  | 'TooManyMembers'
  /**
   * Number of announcements exceeds `MaxAnnouncementsCount`.
   **/
  | 'TooManyAnnouncements'
  /**
   * Invalid witness data given.
   **/
  | 'BadWitness'
  /**
   * Account already gave retirement notice
   **/
  | 'AlreadyRetiring'
  /**
   * Account did not give a retirement notice required to retire.
   **/
  | 'RetirementNoticeNotGiven'
  /**
   * Retirement period has not passed.
   **/
  | 'RetirementPeriodNotPassed'
  /**
   * Fellows must be provided to initialize the Alliance.
   **/
  | 'FellowsMissing';

export type PalletNominationPoolsPoolMember = {
  poolId: number;
  points: bigint;
  lastRecordedRewardCounter: FixedU128;
  unbondingEras: Array<[number, bigint]>;
};

export type PalletNominationPoolsBondedPoolInner = {
  commission: PalletNominationPoolsCommission;
  memberCounter: number;
  points: bigint;
  roles: PalletNominationPoolsPoolRoles;
  state: PalletNominationPoolsPoolState;
};

export type PalletNominationPoolsCommission = {
  current?: [Perbill, AccountId32] | undefined;
  max?: Perbill | undefined;
  changeRate?: PalletNominationPoolsCommissionChangeRate | undefined;
  throttleFrom?: number | undefined;
};

export type PalletNominationPoolsPoolRoles = {
  depositor: AccountId32;
  root?: AccountId32 | undefined;
  nominator?: AccountId32 | undefined;
  bouncer?: AccountId32 | undefined;
};

export type PalletNominationPoolsRewardPool = {
  lastRecordedRewardCounter: FixedU128;
  lastRecordedTotalPayouts: bigint;
  totalRewardsClaimed: bigint;
  totalCommissionPending: bigint;
  totalCommissionClaimed: bigint;
};

export type PalletNominationPoolsSubPools = {
  noEra: PalletNominationPoolsUnbondPool;
  withEra: Array<[number, PalletNominationPoolsUnbondPool]>;
};

export type PalletNominationPoolsUnbondPool = { points: bigint; balance: bigint };

/**
 * The `Error` enum of this pallet.
 **/
export type PalletNominationPoolsError =
  /**
   * A (bonded) pool id does not exist.
   **/
  | { tag: 'PoolNotFound' }
  /**
   * An account is not a member.
   **/
  | { tag: 'PoolMemberNotFound' }
  /**
   * A reward pool does not exist. In all cases this is a system logic error.
   **/
  | { tag: 'RewardPoolNotFound' }
  /**
   * A sub pool does not exist.
   **/
  | { tag: 'SubPoolsNotFound' }
  /**
   * An account is already delegating in another pool. An account may only belong to one
   * pool at a time.
   **/
  | { tag: 'AccountBelongsToOtherPool' }
  /**
   * The member is fully unbonded (and thus cannot access the bonded and reward pool
   * anymore to, for example, collect rewards).
   **/
  | { tag: 'FullyUnbonding' }
  /**
   * The member cannot unbond further chunks due to reaching the limit.
   **/
  | { tag: 'MaxUnbondingLimit' }
  /**
   * None of the funds can be withdrawn yet because the bonding duration has not passed.
   **/
  | { tag: 'CannotWithdrawAny' }
  /**
   * The amount does not meet the minimum bond to either join or create a pool.
   *
   * The depositor can never unbond to a value less than
   * `Pallet::depositor_min_bond`. The caller does not have nominating
   * permissions for the pool. Members can never unbond to a value below `MinJoinBond`.
   **/
  | { tag: 'MinimumBondNotMet' }
  /**
   * The transaction could not be executed due to overflow risk for the pool.
   **/
  | { tag: 'OverflowRisk' }
  /**
   * A pool must be in [`PoolState::Destroying`] in order for the depositor to unbond or for
   * other members to be permissionlessly unbonded.
   **/
  | { tag: 'NotDestroying' }
  /**
   * The caller does not have nominating permissions for the pool.
   **/
  | { tag: 'NotNominator' }
  /**
   * Either a) the caller cannot make a valid kick or b) the pool is not destroying.
   **/
  | { tag: 'NotKickerOrDestroying' }
  /**
   * The pool is not open to join
   **/
  | { tag: 'NotOpen' }
  /**
   * The system is maxed out on pools.
   **/
  | { tag: 'MaxPools' }
  /**
   * Too many members in the pool or system.
   **/
  | { tag: 'MaxPoolMembers' }
  /**
   * The pools state cannot be changed.
   **/
  | { tag: 'CanNotChangeState' }
  /**
   * The caller does not have adequate permissions.
   **/
  | { tag: 'DoesNotHavePermission' }
  /**
   * Metadata exceeds [`Config::MaxMetadataLen`]
   **/
  | { tag: 'MetadataExceedsMaxLen' }
  /**
   * Some error occurred that should never happen. This should be reported to the
   * maintainers.
   **/
  | { tag: 'Defensive'; value: PalletNominationPoolsDefensiveError }
  /**
   * Partial unbonding now allowed permissionlessly.
   **/
  | { tag: 'PartialUnbondNotAllowedPermissionlessly' }
  /**
   * The pool's max commission cannot be set higher than the existing value.
   **/
  | { tag: 'MaxCommissionRestricted' }
  /**
   * The supplied commission exceeds the max allowed commission.
   **/
  | { tag: 'CommissionExceedsMaximum' }
  /**
   * The supplied commission exceeds global maximum commission.
   **/
  | { tag: 'CommissionExceedsGlobalMaximum' }
  /**
   * Not enough blocks have surpassed since the last commission update.
   **/
  | { tag: 'CommissionChangeThrottled' }
  /**
   * The submitted changes to commission change rate are not allowed.
   **/
  | { tag: 'CommissionChangeRateNotAllowed' }
  /**
   * There is no pending commission to claim.
   **/
  | { tag: 'NoPendingCommission' }
  /**
   * No commission current has been set.
   **/
  | { tag: 'NoCommissionCurrentSet' }
  /**
   * Pool id currently in use.
   **/
  | { tag: 'PoolIdInUse' }
  /**
   * Pool id provided is not correct/usable.
   **/
  | { tag: 'InvalidPoolId' }
  /**
   * Bonding extra is restricted to the exact pending reward amount.
   **/
  | { tag: 'BondExtraRestricted' };

export type PalletNominationPoolsDefensiveError =
  | 'NotEnoughSpaceInUnbondPool'
  | 'PoolNotFound'
  | 'RewardPoolNotFound'
  | 'SubPoolsNotFound'
  | 'BondedStashKilledPrematurely';

export type PalletReferendaReferendumInfoTally =
  | { tag: 'Ongoing'; value: PalletReferendaReferendumStatusTally }
  | { tag: 'Approved'; value: [number, PalletReferendaDeposit | undefined, PalletReferendaDeposit | undefined] }
  | { tag: 'Rejected'; value: [number, PalletReferendaDeposit | undefined, PalletReferendaDeposit | undefined] }
  | { tag: 'Cancelled'; value: [number, PalletReferendaDeposit | undefined, PalletReferendaDeposit | undefined] }
  | { tag: 'TimedOut'; value: [number, PalletReferendaDeposit | undefined, PalletReferendaDeposit | undefined] }
  | { tag: 'Killed'; value: number };

export type PalletReferendaReferendumStatusTally = {
  track: number;
  origin: KitchensinkRuntimeOriginCaller;
  proposal: FrameSupportPreimagesBounded;
  enactment: FrameSupportScheduleDispatchTime;
  submitted: number;
  submissionDeposit: PalletReferendaDeposit;
  decisionDeposit?: PalletReferendaDeposit | undefined;
  deciding?: PalletReferendaDecidingStatus | undefined;
  tally: PalletRankedCollectiveTally;
  inQueue: boolean;
  alarm?: [number, [number, number]] | undefined;
};

export type PalletRankedCollectiveMemberRecord = { rank: number };

/**
 * The `Error` enum of this pallet.
 **/
export type PalletRankedCollectiveError =
  /**
   * Account is already a member.
   **/
  | 'AlreadyMember'
  /**
   * Account is not a member.
   **/
  | 'NotMember'
  /**
   * The given poll index is unknown or has closed.
   **/
  | 'NotPolling'
  /**
   * The given poll is still ongoing.
   **/
  | 'Ongoing'
  /**
   * There are no further records to be removed.
   **/
  | 'NoneRemaining'
  /**
   * Unexpected error in state.
   **/
  | 'Corruption'
  /**
   * The member's rank is too low to vote.
   **/
  | 'RankTooLow'
  /**
   * The information provided is incorrect.
   **/
  | 'InvalidWitness'
  /**
   * The origin is not sufficiently privileged to do the operation.
   **/
  | 'NoPermission';

export type PalletAssetConversionPoolInfo = { lpToken: number };

/**
 * The `Error` enum of this pallet.
 **/
export type PalletAssetConversionError =
  /**
   * Provided assets are equal.
   **/
  | 'EqualAssets'
  /**
   * Provided asset is not supported for pool.
   **/
  | 'UnsupportedAsset'
  /**
   * Pool already exists.
   **/
  | 'PoolExists'
  /**
   * Desired amount can't be zero.
   **/
  | 'WrongDesiredAmount'
  /**
   * Provided amount should be greater than or equal to the existential deposit/asset's
   * minimal amount.
   **/
  | 'AmountOneLessThanMinimal'
  /**
   * Provided amount should be greater than or equal to the existential deposit/asset's
   * minimal amount.
   **/
  | 'AmountTwoLessThanMinimal'
  /**
   * Reserve needs to always be greater than or equal to the existential deposit/asset's
   * minimal amount.
   **/
  | 'ReserveLeftLessThanMinimal'
  /**
   * Desired amount can't be equal to the pool reserve.
   **/
  | 'AmountOutTooHigh'
  /**
   * The pool doesn't exist.
   **/
  | 'PoolNotFound'
  /**
   * An overflow happened.
   **/
  | 'Overflow'
  /**
   * The minimal amount requirement for the first token in the pair wasn't met.
   **/
  | 'AssetOneDepositDidNotMeetMinimum'
  /**
   * The minimal amount requirement for the second token in the pair wasn't met.
   **/
  | 'AssetTwoDepositDidNotMeetMinimum'
  /**
   * The minimal amount requirement for the first token in the pair wasn't met.
   **/
  | 'AssetOneWithdrawalDidNotMeetMinimum'
  /**
   * The minimal amount requirement for the second token in the pair wasn't met.
   **/
  | 'AssetTwoWithdrawalDidNotMeetMinimum'
  /**
   * Optimal calculated amount is less than desired.
   **/
  | 'OptimalAmountLessThanDesired'
  /**
   * Insufficient liquidity minted.
   **/
  | 'InsufficientLiquidityMinted'
  /**
   * Requested liquidity can't be zero.
   **/
  | 'ZeroLiquidity'
  /**
   * Amount can't be zero.
   **/
  | 'ZeroAmount'
  /**
   * Insufficient liquidity in the pool.
   **/
  | 'InsufficientLiquidity'
  /**
   * Calculated amount out is less than provided minimum amount.
   **/
  | 'ProvidedMinimumNotSufficientForSwap'
  /**
   * Provided maximum amount is not sufficient for swap.
   **/
  | 'ProvidedMaximumNotSufficientForSwap'
  /**
   * Only pools with native on one side are valid.
   **/
  | 'PoolMustContainNativeCurrency'
  /**
   * The provided path must consists of 2 assets at least.
   **/
  | 'InvalidPath'
  /**
   * It was not possible to calculate path data.
   **/
  | 'PathError'
  /**
   * The provided path must consists of unique assets.
   **/
  | 'NonUniquePath'
  /**
   * It was not possible to get or increment the Id of the pool.
   **/
  | 'IncorrectPoolAssetId'
  /**
   * Unable to find an element in an array/vec that should have one-to-one correspondence
   * with another. For example, an array of assets constituting a `path` should have a
   * corresponding array of `amounts` along the path.
   **/
  | 'CorrespondenceError';

export type PalletFastUnstakeUnstakeRequest = { stashes: Array<[AccountId32, bigint]>; checked: Array<number> };

/**
 * The `Error` enum of this pallet.
 **/
export type PalletFastUnstakeError =
  /**
   * The provided Controller account was not found.
   *
   * This means that the given account is not bonded.
   **/
  | 'NotController'
  /**
   * The bonded account has already been queued.
   **/
  | 'AlreadyQueued'
  /**
   * The bonded account has active unlocking chunks.
   **/
  | 'NotFullyBonded'
  /**
   * The provided un-staker is not in the `Queue`.
   **/
  | 'NotQueued'
  /**
   * The provided un-staker is already in Head, and cannot deregister.
   **/
  | 'AlreadyHead'
  /**
   * The call is not allowed at this point because the pallet is not active.
   **/
  | 'CallNotAllowed';

export type PalletMessageQueueBookState = {
  begin: number;
  end: number;
  count: number;
  readyNeighbours?: PalletMessageQueueNeighbours | undefined;
  messageCount: bigint;
  size: bigint;
};

export type PalletMessageQueueNeighbours = { prev: number; next: number };

export type PalletMessageQueuePage = {
  remaining: number;
  remainingSize: number;
  firstIndex: number;
  first: number;
  last: number;
  heap: Bytes;
};

/**
 * The `Error` enum of this pallet.
 **/
export type PalletMessageQueueError =
  /**
   * Page is not reapable because it has items remaining to be processed and is not old
   * enough.
   **/
  | 'NotReapable'
  /**
   * Page to be reaped does not exist.
   **/
  | 'NoPage'
  /**
   * The referenced message could not be found.
   **/
  | 'NoMessage'
  /**
   * The message was already processed and cannot be processed again.
   **/
  | 'AlreadyProcessed'
  /**
   * The message is queued for future execution.
   **/
  | 'Queued'
  /**
   * There is temporarily not enough weight to continue servicing messages.
   **/
  | 'InsufficientWeight'
  /**
   * This message is temporarily unprocessable.
   *
   * Such errors are expected, but not guaranteed, to resolve themselves eventually through
   * retrying.
   **/
  | 'TemporarilyUnprocessable'
  /**
   * The queue is paused and no message can be executed from it.
   *
   * This can change at any time and may resolve in the future by re-trying.
   **/
  | 'QueuePaused';

/**
 * The `Error` enum of this pallet.
 **/
export type PalletTxPauseError =
  /**
   * The call is paused.
   **/
  | 'IsPaused'
  /**
   * The call is unpaused.
   **/
  | 'IsUnpaused'
  /**
   * The call is whitelisted and cannot be paused.
   **/
  | 'Unpausable'
  | 'NotFound';

/**
 * The `Error` enum of this pallet.
 **/
export type PalletSafeModeError =
  /**
   * The safe-mode is (already or still) entered.
   **/
  | 'Entered'
  /**
   * The safe-mode is (already or still) exited.
   **/
  | 'Exited'
  /**
   * This functionality of the pallet is disabled by the configuration.
   **/
  | 'NotConfigured'
  /**
   * There is no balance reserved.
   **/
  | 'NoDeposit'
  /**
   * The account already has a deposit reserved and can therefore not enter or extend again.
   **/
  | 'AlreadyDeposited'
  /**
   * This deposit cannot be released yet.
   **/
  | 'CannotReleaseYet'
  /**
   * An error from the underlying `Currency`.
   **/
  | 'CurrencyError';

export type PalletBrokerLeaseRecordItem = { until: number; task: number };

export type PalletBrokerStatusRecord = {
  coreCount: number;
  privatePoolSize: number;
  systemPoolSize: number;
  lastCommittedTimeslice: number;
  lastTimeslice: number;
};

export type PalletBrokerSaleInfoRecord = {
  saleStart: number;
  leadinLength: number;
  price: bigint;
  regionBegin: number;
  regionEnd: number;
  idealCoresSold: number;
  coresOffered: number;
  firstCore: number;
  selloutPrice?: bigint | undefined;
  coresSold: number;
};

export type PalletBrokerAllowedRenewalId = { core: number; when: number };

export type PalletBrokerAllowedRenewalRecord = { price: bigint; completion: PalletBrokerCompletionStatus };

export type PalletBrokerCompletionStatus =
  | { tag: 'Partial'; value: PalletBrokerCoreMask }
  | { tag: 'Complete'; value: Array<PalletBrokerScheduleItem> };

export type PalletBrokerRegionRecord = { end: number; owner: AccountId32; paid?: bigint | undefined };

export type PalletBrokerContributionRecord = { length: number; payee: AccountId32 };

export type PalletBrokerPoolIoRecord = { private: number; system: number };

export type PalletBrokerInstaPoolHistoryRecord = {
  privateContributions: number;
  systemContributions: number;
  maybePayout?: bigint | undefined;
};

/**
 * The `Error` enum of this pallet.
 **/
export type PalletBrokerError =
  /**
   * The given region identity is not known.
   **/
  | 'UnknownRegion'
  /**
   * The owner of the region is not the origin.
   **/
  | 'NotOwner'
  /**
   * The pivot point of the partition at or after the end of the region.
   **/
  | 'PivotTooLate'
  /**
   * The pivot point of the partition at the beginning of the region.
   **/
  | 'PivotTooEarly'
  /**
   * The pivot mask for the interlacing is not contained within the region's interlace mask.
   **/
  | 'ExteriorPivot'
  /**
   * The pivot mask for the interlacing is void (and therefore unschedulable).
   **/
  | 'VoidPivot'
  /**
   * The pivot mask for the interlacing is complete (and therefore not a strict subset).
   **/
  | 'CompletePivot'
  /**
   * The workplan of the pallet's state is invalid. This indicates a state corruption.
   **/
  | 'CorruptWorkplan'
  /**
   * There is no sale happening currently.
   **/
  | 'NoSales'
  /**
   * The price limit is exceeded.
   **/
  | 'Overpriced'
  /**
   * There are no cores available.
   **/
  | 'Unavailable'
  /**
   * The sale limit has been reached.
   **/
  | 'SoldOut'
  /**
   * The renewal operation is not valid at the current time (it may become valid in the next
   * sale).
   **/
  | 'WrongTime'
  /**
   * Invalid attempt to renew.
   **/
  | 'NotAllowed'
  /**
   * This pallet has not yet been initialized.
   **/
  | 'Uninitialized'
  /**
   * The purchase cannot happen yet as the sale period is yet to begin.
   **/
  | 'TooEarly'
  /**
   * There is no work to be done.
   **/
  | 'NothingToDo'
  /**
   * The maximum amount of reservations has already been reached.
   **/
  | 'TooManyReservations'
  /**
   * The maximum amount of leases has already been reached.
   **/
  | 'TooManyLeases'
  /**
   * The revenue for the Instantaneous Core Sales of this period is not (yet) known and thus
   * this operation cannot proceed.
   **/
  | 'UnknownRevenue'
  /**
   * The identified contribution to the Instantaneous Core Pool is unknown.
   **/
  | 'UnknownContribution'
  /**
   * The workload assigned for renewal is incomplete. This is unexpected and indicates a
   * logic error.
   **/
  | 'IncompleteAssignment'
  /**
   * An item cannot be dropped because it is still valid.
   **/
  | 'StillValid'
  /**
   * The history item does not exist.
   **/
  | 'NoHistory'
  /**
   * No reservation of the given index exists.
   **/
  | 'UnknownReservation'
  /**
   * The renewal record cannot be found.
   **/
  | 'UnknownRenewal'
  /**
   * The lease expiry time has already passed.
   **/
  | 'AlreadyExpired'
  /**
   * The configuration could not be applied because it is invalid.
   **/
  | 'InvalidConfig';

export type FrameSystemExtensionsCheckNonZeroSender = {};

export type FrameSystemExtensionsCheckSpecVersion = {};

export type FrameSystemExtensionsCheckTxVersion = {};

export type FrameSystemExtensionsCheckGenesis = {};

export type FrameSystemExtensionsCheckMortality = Era;

export type FrameSystemExtensionsCheckNonce = number;

export type FrameSystemExtensionsCheckWeight = {};

export type PalletAssetConversionTxPaymentChargeAssetTxPayment = { tip: bigint; assetId?: number | undefined };

export type SpRuntimeBlock = { header: Header; extrinsics: Array<SpRuntimeUncheckedExtrinsic> };

export type SpRuntimeUncheckedExtrinsic = Bytes;

export type SpCoreOpaqueMetadata = Bytes;

export type SpRuntimeTransactionValidityTransactionValidityError =
  | { tag: 'Invalid'; value: SpRuntimeTransactionValidityInvalidTransaction }
  | { tag: 'Unknown'; value: SpRuntimeTransactionValidityUnknownTransaction };

export type SpRuntimeTransactionValidityInvalidTransaction =
  | { tag: 'Call' }
  | { tag: 'Payment' }
  | { tag: 'Future' }
  | { tag: 'Stale' }
  | { tag: 'BadProof' }
  | { tag: 'AncientBirthBlock' }
  | { tag: 'ExhaustsResources' }
  | { tag: 'Custom'; value: number }
  | { tag: 'BadMandatory' }
  | { tag: 'MandatoryValidation' }
  | { tag: 'BadSigner' };

export type SpRuntimeTransactionValidityUnknownTransaction =
  | { tag: 'CannotLookup' }
  | { tag: 'NoUnsignedValidator' }
  | { tag: 'Custom'; value: number };

export type SpInherentsInherentData = { data: Array<[FixedBytes<8>, Bytes]> };

export type SpInherentsCheckInherentsResult = { okay: boolean; fatalError: boolean; errors: SpInherentsInherentData };

export type SpRuntimeTransactionValidityTransactionSource = 'InBlock' | 'Local' | 'External';

export type SpRuntimeTransactionValidityValidTransaction = {
  priority: bigint;
  requires: Array<Bytes>;
  provides: Array<Bytes>;
  longevity: bigint;
  propagate: boolean;
};

export type SpStatementStoreRuntimeApiStatementSource = 'Chain' | 'Network' | 'Local';

export type SpStatementStoreRuntimeApiValidStatement = { maxCount: number; maxSize: number };

export type SpStatementStoreRuntimeApiInvalidStatement = 'BadProof' | 'NoProof' | 'InternalError';

export type SpConsensusGrandpaOpaqueKeyOwnershipProof = Bytes;

export type SpConsensusBabeBabeConfiguration = {
  slotDuration: bigint;
  epochLength: bigint;
  c: [bigint, bigint];
  authorities: Array<[SpConsensusBabeAppPublic, bigint]>;
  randomness: FixedBytes<32>;
  allowedSlots: SpConsensusBabeAllowedSlots;
};

export type SpConsensusBabeEpoch = {
  epochIndex: bigint;
  startSlot: SpConsensusSlotsSlot;
  duration: bigint;
  authorities: Array<[SpConsensusBabeAppPublic, bigint]>;
  randomness: FixedBytes<32>;
  config: SpConsensusBabeBabeEpochConfiguration;
};

export type SpConsensusBabeOpaqueKeyOwnershipProof = Bytes;

export type PalletContractsPrimitivesContractResult = {
  gasConsumed: SpWeightsWeightV2Weight;
  gasRequired: SpWeightsWeightV2Weight;
  storageDeposit: PalletContractsPrimitivesStorageDeposit;
  debugMessage: Bytes;
  result: Result<PalletContractsPrimitivesExecReturnValue, DispatchError>;
  events?: Array<FrameSystemEventRecord> | undefined;
};

export type PalletContractsPrimitivesExecReturnValue = { flags: PalletContractsPrimitivesReturnFlags; data: Bytes };

export type PalletContractsPrimitivesReturnFlags = { bits: number };

export type PalletContractsPrimitivesStorageDeposit =
  | { tag: 'Refund'; value: bigint }
  | { tag: 'Charge'; value: bigint };

export type PalletContractsPrimitivesCode = { tag: 'Upload'; value: Bytes } | { tag: 'Existing'; value: H256 };

export type PalletContractsPrimitivesContractResultResult = {
  gasConsumed: SpWeightsWeightV2Weight;
  gasRequired: SpWeightsWeightV2Weight;
  storageDeposit: PalletContractsPrimitivesStorageDeposit;
  debugMessage: Bytes;
  result: Result<PalletContractsPrimitivesInstantiateReturnValue, DispatchError>;
  events?: Array<FrameSystemEventRecord> | undefined;
};

export type PalletContractsPrimitivesInstantiateReturnValue = {
  result: PalletContractsPrimitivesExecReturnValue;
  accountId: AccountId32;
};

export type PalletContractsPrimitivesCodeUploadReturnValue = { codeHash: H256; deposit: bigint };

export type PalletContractsPrimitivesContractAccessError = 'DoesntExist' | 'KeyDecodingFailed' | 'MigrationInProgress';

export type PalletTransactionPaymentRuntimeDispatchInfo = {
  weight: SpWeightsWeightV2Weight;
  class: FrameSupportDispatchDispatchClass;
  partialFee: bigint;
};

export type PalletTransactionPaymentFeeDetails = {
  inclusionFee?: PalletTransactionPaymentInclusionFee | undefined;
  tip: bigint;
};

export type PalletTransactionPaymentInclusionFee = { baseFee: bigint; lenFee: bigint; adjustedWeightFee: bigint };

export type SpMmrPrimitivesError =
  | 'InvalidNumericOp'
  | 'Push'
  | 'GetRoot'
  | 'Commit'
  | 'GenerateProof'
  | 'Verify'
  | 'LeafNotFound'
  | 'PalletNotIncluded'
  | 'InvalidLeafIndex'
  | 'InvalidBestKnownBlock';

export type SpMmrPrimitivesEncodableOpaqueLeaf = Bytes;

export type SpMmrPrimitivesProof = { leafIndices: Array<bigint>; leafCount: bigint; items: Array<H256> };

export type KitchensinkRuntimeRuntimeError =
  | { tag: 'System'; value: FrameSystemError }
  | { tag: 'Utility'; value: PalletUtilityError }
  | { tag: 'Babe'; value: PalletBabeError }
  | { tag: 'Indices'; value: PalletIndicesError }
  | { tag: 'Balances'; value: PalletBalancesError }
  | { tag: 'ElectionProviderMultiPhase'; value: PalletElectionProviderMultiPhaseError }
  | { tag: 'Staking'; value: PalletStakingPalletError }
  | { tag: 'Session'; value: PalletSessionError }
  | { tag: 'Democracy'; value: PalletDemocracyError }
  | { tag: 'Council'; value: PalletCollectiveError }
  | { tag: 'TechnicalCommittee'; value: PalletCollectiveError }
  | { tag: 'Elections'; value: PalletElectionsPhragmenError }
  | { tag: 'TechnicalMembership'; value: PalletMembershipError }
  | { tag: 'Grandpa'; value: PalletGrandpaError }
  | { tag: 'Treasury'; value: PalletTreasuryError }
  | { tag: 'AssetRate'; value: PalletAssetRateError }
  | { tag: 'Contracts'; value: PalletContractsError }
  | { tag: 'Sudo'; value: PalletSudoError }
  | { tag: 'ImOnline'; value: PalletImOnlineError }
  | { tag: 'Identity'; value: PalletIdentityError }
  | { tag: 'Society'; value: PalletSocietyError }
  | { tag: 'Recovery'; value: PalletRecoveryError }
  | { tag: 'Vesting'; value: PalletVestingError }
  | { tag: 'Scheduler'; value: PalletSchedulerError }
  | { tag: 'Glutton'; value: PalletGluttonError }
  | { tag: 'Preimage'; value: PalletPreimageError }
  | { tag: 'Proxy'; value: PalletProxyError }
  | { tag: 'Multisig'; value: PalletMultisigError }
  | { tag: 'Bounties'; value: PalletBountiesError }
  | { tag: 'Tips'; value: PalletTipsError }
  | { tag: 'Assets'; value: PalletAssetsError }
  | { tag: 'PoolAssets'; value: PalletAssetsError }
  | { tag: 'Lottery'; value: PalletLotteryError }
  | { tag: 'Nis'; value: PalletNisError }
  | { tag: 'Uniques'; value: PalletUniquesError }
  | { tag: 'Nfts'; value: PalletNftsError }
  | { tag: 'NftFractionalization'; value: PalletNftFractionalizationError }
  | { tag: 'Salary'; value: PalletSalaryError }
  | { tag: 'CoreFellowship'; value: PalletCoreFellowshipError }
  | { tag: 'TransactionStorage'; value: PalletTransactionStorageError }
  | { tag: 'VoterList'; value: PalletBagsListError }
  | { tag: 'StateTrieMigration'; value: PalletStateTrieMigrationError }
  | { tag: 'ChildBounties'; value: PalletChildBountiesError }
  | { tag: 'Referenda'; value: PalletReferendaError }
  | { tag: 'Remark'; value: PalletRemarkError }
  | { tag: 'ConvictionVoting'; value: PalletConvictionVotingError }
  | { tag: 'Whitelist'; value: PalletWhitelistError }
  | { tag: 'AllianceMotion'; value: PalletCollectiveError }
  | { tag: 'Alliance'; value: PalletAllianceError }
  | { tag: 'NominationPools'; value: PalletNominationPoolsError }
  | { tag: 'RankedPolls'; value: PalletReferendaError }
  | { tag: 'RankedCollective'; value: PalletRankedCollectiveError }
  | { tag: 'AssetConversion'; value: PalletAssetConversionError }
  | { tag: 'FastUnstake'; value: PalletFastUnstakeError }
  | { tag: 'MessageQueue'; value: PalletMessageQueueError }
  | { tag: 'TxPause'; value: PalletTxPauseError }
  | { tag: 'SafeMode'; value: PalletSafeModeError }
  | { tag: 'Broker'; value: PalletBrokerError };
