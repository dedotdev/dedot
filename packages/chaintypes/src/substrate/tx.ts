// Generated by @delightfuldot/codegen

import type { GenericChainTx, ISubmittableExtrinsic } from '@delightfuldot/types';
import type {
  Bytes,
  MultiAddressLike,
  AccountId32Like,
  Percent,
  Perbill,
  H256,
  FixedU128,
  Data,
  FixedBytes,
  FixedU64,
  Perquintill,
} from '@delightfuldot/codecs';
import type {
  KitchensinkRuntimeRuntimeTask,
  KitchensinkRuntimeRuntimeCall,
  KitchensinkRuntimeOriginCaller,
  SpWeightsWeightV2Weight,
  SpConsensusSlotsEquivocationProof,
  SpSessionMembershipProof,
  SpConsensusBabeDigestsNextConfigDescriptor,
  PalletElectionProviderMultiPhaseRawSolution,
  PalletElectionProviderMultiPhaseSolutionOrSnapshotSize,
  SpNposElectionsElectionScore,
  SpNposElectionsSupport,
  PalletStakingRewardDestination,
  PalletStakingValidatorPrefs,
  PalletStakingPalletConfigOp,
  PalletStakingPalletConfigOpU32,
  PalletStakingPalletConfigOpPercent,
  PalletStakingPalletConfigOpPerbill,
  KitchensinkRuntimeSessionKeys,
  FrameSupportPreimagesBounded,
  PalletDemocracyVoteAccountVote,
  PalletDemocracyConviction,
  PalletDemocracyMetadataOwner,
  PalletElectionsPhragmenRenouncing,
  SpConsensusGrandpaEquivocationProof,
  PalletContractsWasmDeterminism,
  PalletImOnlineHeartbeat,
  PalletImOnlineSr25519AppSr25519Signature,
  PalletIdentityLegacyIdentityInfo,
  PalletIdentityJudgement,
  PalletVestingVestingInfo,
  KitchensinkRuntimeProxyType,
  PalletMultisigTimepoint,
  PalletUniquesDestroyWitness,
  PalletNftsCollectionConfig,
  PalletNftsDestroyWitness,
  PalletNftsMintWitness,
  PalletNftsItemConfig,
  PalletNftsBitFlags,
  PalletNftsAttributeNamespace,
  PalletNftsCancelAttributesApprovalWitness,
  PalletNftsMintSettings,
  PalletNftsItemTip,
  PalletNftsPriceWithDirection,
  PalletNftsPreSignedMint,
  SpRuntimeMultiSignature,
  PalletNftsPreSignedAttributes,
  PalletCoreFellowshipParamsType,
  PalletCoreFellowshipWish,
  SpTransactionStorageProofTransactionStorageProof,
  PalletStateTrieMigrationMigrationLimits,
  PalletStateTrieMigrationMigrationTask,
  PalletStateTrieMigrationProgress,
  FrameSupportScheduleDispatchTime,
  PalletConvictionVotingVoteAccountVote,
  PalletConvictionVotingConviction,
  PalletAllianceDisbandWitness,
  PalletAllianceCid,
  PalletAllianceUnscrupulousItem,
  PalletNominationPoolsBondExtra,
  PalletNominationPoolsPoolState,
  PalletNominationPoolsConfigOp,
  PalletNominationPoolsConfigOpU32,
  PalletNominationPoolsConfigOpPerbill,
  PalletNominationPoolsConfigOp004,
  PalletNominationPoolsClaimPermission,
  PalletNominationPoolsCommissionChangeRate,
  PalletNominationPoolsCommissionClaimPermission,
  PalletAssetConversionNativeOrAssetId,
  PalletBrokerConfigRecord,
  PalletBrokerScheduleItem,
  PalletBrokerRegionId,
  PalletBrokerCoreMask,
  PalletBrokerFinality,
  PalletMixnetRegistration,
  SpMixnetAppSignature,
} from './types';

export interface ChainTx extends GenericChainTx {
  system: {
    /**
     * See [`Pallet::remark`].
     *
     * @param remark
     **/
    remark(remark: Bytes): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_heap_pages`].
     *
     * @param pages
     **/
    setHeapPages(pages: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_code`].
     *
     * @param code
     **/
    setCode(code: Bytes): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_code_without_checks`].
     *
     * @param code
     **/
    setCodeWithoutChecks(code: Bytes): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_storage`].
     *
     * @param items
     **/
    setStorage(items: Array<[Bytes, Bytes]>): ISubmittableExtrinsic;

    /**
     * See [`Pallet::kill_storage`].
     *
     * @param keys
     **/
    killStorage(keys: Array<Bytes>): ISubmittableExtrinsic;

    /**
     * See [`Pallet::kill_prefix`].
     *
     * @param prefix
     * @param subkeys
     **/
    killPrefix(prefix: Bytes, subkeys: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::remark_with_event`].
     *
     * @param remark
     **/
    remarkWithEvent(remark: Bytes): ISubmittableExtrinsic;

    /**
     * See [`Pallet::do_task`].
     *
     * @param task
     **/
    doTask(task: KitchensinkRuntimeRuntimeTask): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  utility: {
    /**
     * See [`Pallet::batch`].
     *
     * @param calls
     **/
    batch(calls: Array<KitchensinkRuntimeRuntimeCall>): ISubmittableExtrinsic;

    /**
     * See [`Pallet::as_derivative`].
     *
     * @param index
     * @param call
     **/
    asDerivative(index: number, call: KitchensinkRuntimeRuntimeCall): ISubmittableExtrinsic;

    /**
     * See [`Pallet::batch_all`].
     *
     * @param calls
     **/
    batchAll(calls: Array<KitchensinkRuntimeRuntimeCall>): ISubmittableExtrinsic;

    /**
     * See [`Pallet::dispatch_as`].
     *
     * @param asOrigin
     * @param call
     **/
    dispatchAs(asOrigin: KitchensinkRuntimeOriginCaller, call: KitchensinkRuntimeRuntimeCall): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_batch`].
     *
     * @param calls
     **/
    forceBatch(calls: Array<KitchensinkRuntimeRuntimeCall>): ISubmittableExtrinsic;

    /**
     * See [`Pallet::with_weight`].
     *
     * @param call
     * @param weight
     **/
    withWeight(call: KitchensinkRuntimeRuntimeCall, weight: SpWeightsWeightV2Weight): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  babe: {
    /**
     * See [`Pallet::report_equivocation`].
     *
     * @param equivocationProof
     * @param keyOwnerProof
     **/
    reportEquivocation(
      equivocationProof: SpConsensusSlotsEquivocationProof,
      keyOwnerProof: SpSessionMembershipProof,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::report_equivocation_unsigned`].
     *
     * @param equivocationProof
     * @param keyOwnerProof
     **/
    reportEquivocationUnsigned(
      equivocationProof: SpConsensusSlotsEquivocationProof,
      keyOwnerProof: SpSessionMembershipProof,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::plan_config_change`].
     *
     * @param config
     **/
    planConfigChange(config: SpConsensusBabeDigestsNextConfigDescriptor): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  timestamp: {
    /**
     * See [`Pallet::set`].
     *
     * @param now
     **/
    set(now: bigint): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  indices: {
    /**
     * See [`Pallet::claim`].
     *
     * @param index
     **/
    claim(index: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::transfer`].
     *
     * @param new_
     * @param index
     **/
    transfer(new_: MultiAddressLike, index: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::free`].
     *
     * @param index
     **/
    free(index: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_transfer`].
     *
     * @param new_
     * @param index
     * @param freeze
     **/
    forceTransfer(new_: MultiAddressLike, index: number, freeze: boolean): ISubmittableExtrinsic;

    /**
     * See [`Pallet::freeze`].
     *
     * @param index
     **/
    freeze(index: number): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  balances: {
    /**
     * See [`Pallet::transfer_allow_death`].
     *
     * @param dest
     * @param value
     **/
    transferAllowDeath(dest: MultiAddressLike, value: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_transfer`].
     *
     * @param source
     * @param dest
     * @param value
     **/
    forceTransfer(source: MultiAddressLike, dest: MultiAddressLike, value: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::transfer_keep_alive`].
     *
     * @param dest
     * @param value
     **/
    transferKeepAlive(dest: MultiAddressLike, value: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::transfer_all`].
     *
     * @param dest
     * @param keepAlive
     **/
    transferAll(dest: MultiAddressLike, keepAlive: boolean): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_unreserve`].
     *
     * @param who
     * @param amount
     **/
    forceUnreserve(who: MultiAddressLike, amount: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::upgrade_accounts`].
     *
     * @param who
     **/
    upgradeAccounts(who: Array<AccountId32Like>): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_set_balance`].
     *
     * @param who
     * @param newFree
     **/
    forceSetBalance(who: MultiAddressLike, newFree: bigint): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  electionProviderMultiPhase: {
    /**
     * See [`Pallet::submit_unsigned`].
     *
     * @param rawSolution
     * @param witness
     **/
    submitUnsigned(
      rawSolution: PalletElectionProviderMultiPhaseRawSolution,
      witness: PalletElectionProviderMultiPhaseSolutionOrSnapshotSize,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_minimum_untrusted_score`].
     *
     * @param maybeNextScore
     **/
    setMinimumUntrustedScore(maybeNextScore: SpNposElectionsElectionScore | undefined): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_emergency_election_result`].
     *
     * @param supports
     **/
    setEmergencyElectionResult(supports: Array<[AccountId32Like, SpNposElectionsSupport]>): ISubmittableExtrinsic;

    /**
     * See [`Pallet::submit`].
     *
     * @param rawSolution
     **/
    submit(rawSolution: PalletElectionProviderMultiPhaseRawSolution): ISubmittableExtrinsic;

    /**
     * See [`Pallet::governance_fallback`].
     *
     * @param maybeMaxVoters
     * @param maybeMaxTargets
     **/
    governanceFallback(maybeMaxVoters: number | undefined, maybeMaxTargets: number | undefined): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  staking: {
    /**
     * See [`Pallet::bond`].
     *
     * @param value
     * @param payee
     **/
    bond(value: bigint, payee: PalletStakingRewardDestination): ISubmittableExtrinsic;

    /**
     * See [`Pallet::bond_extra`].
     *
     * @param maxAdditional
     **/
    bondExtra(maxAdditional: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::unbond`].
     *
     * @param value
     **/
    unbond(value: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::withdraw_unbonded`].
     *
     * @param numSlashingSpans
     **/
    withdrawUnbonded(numSlashingSpans: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::validate`].
     *
     * @param prefs
     **/
    validate(prefs: PalletStakingValidatorPrefs): ISubmittableExtrinsic;

    /**
     * See [`Pallet::nominate`].
     *
     * @param targets
     **/
    nominate(targets: Array<MultiAddressLike>): ISubmittableExtrinsic;

    /**
     * See [`Pallet::chill`].
     *
     **/
    chill(): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_payee`].
     *
     * @param payee
     **/
    setPayee(payee: PalletStakingRewardDestination): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_controller`].
     *
     **/
    setController(): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_validator_count`].
     *
     * @param new_
     **/
    setValidatorCount(new_: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::increase_validator_count`].
     *
     * @param additional
     **/
    increaseValidatorCount(additional: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::scale_validator_count`].
     *
     * @param factor
     **/
    scaleValidatorCount(factor: Percent): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_no_eras`].
     *
     **/
    forceNoEras(): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_new_era`].
     *
     **/
    forceNewEra(): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_invulnerables`].
     *
     * @param invulnerables
     **/
    setInvulnerables(invulnerables: Array<AccountId32Like>): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_unstake`].
     *
     * @param stash
     * @param numSlashingSpans
     **/
    forceUnstake(stash: AccountId32Like, numSlashingSpans: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_new_era_always`].
     *
     **/
    forceNewEraAlways(): ISubmittableExtrinsic;

    /**
     * See [`Pallet::cancel_deferred_slash`].
     *
     * @param era
     * @param slashIndices
     **/
    cancelDeferredSlash(era: number, slashIndices: Array<number>): ISubmittableExtrinsic;

    /**
     * See [`Pallet::payout_stakers`].
     *
     * @param validatorStash
     * @param era
     **/
    payoutStakers(validatorStash: AccountId32Like, era: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::rebond`].
     *
     * @param value
     **/
    rebond(value: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::reap_stash`].
     *
     * @param stash
     * @param numSlashingSpans
     **/
    reapStash(stash: AccountId32Like, numSlashingSpans: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::kick`].
     *
     * @param who
     **/
    kick(who: Array<MultiAddressLike>): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_staking_configs`].
     *
     * @param minNominatorBond
     * @param minValidatorBond
     * @param maxNominatorCount
     * @param maxValidatorCount
     * @param chillThreshold
     * @param minCommission
     **/
    setStakingConfigs(
      minNominatorBond: PalletStakingPalletConfigOp,
      minValidatorBond: PalletStakingPalletConfigOp,
      maxNominatorCount: PalletStakingPalletConfigOpU32,
      maxValidatorCount: PalletStakingPalletConfigOpU32,
      chillThreshold: PalletStakingPalletConfigOpPercent,
      minCommission: PalletStakingPalletConfigOpPerbill,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::chill_other`].
     *
     * @param stash
     **/
    chillOther(stash: AccountId32Like): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_apply_min_commission`].
     *
     * @param validatorStash
     **/
    forceApplyMinCommission(validatorStash: AccountId32Like): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_min_commission`].
     *
     * @param new_
     **/
    setMinCommission(new_: Perbill): ISubmittableExtrinsic;

    /**
     * See [`Pallet::payout_stakers_by_page`].
     *
     * @param validatorStash
     * @param era
     * @param page
     **/
    payoutStakersByPage(validatorStash: AccountId32Like, era: number, page: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::update_payee`].
     *
     * @param controller
     **/
    updatePayee(controller: AccountId32Like): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  session: {
    /**
     * See [`Pallet::set_keys`].
     *
     * @param keys
     * @param proof
     **/
    setKeys(keys: KitchensinkRuntimeSessionKeys, proof: Bytes): ISubmittableExtrinsic;

    /**
     * See [`Pallet::purge_keys`].
     *
     **/
    purgeKeys(): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  democracy: {
    /**
     * See [`Pallet::propose`].
     *
     * @param proposal
     * @param value
     **/
    propose(proposal: FrameSupportPreimagesBounded, value: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::second`].
     *
     * @param proposal
     **/
    second(proposal: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::vote`].
     *
     * @param refIndex
     * @param vote
     **/
    vote(refIndex: number, vote: PalletDemocracyVoteAccountVote): ISubmittableExtrinsic;

    /**
     * See [`Pallet::emergency_cancel`].
     *
     * @param refIndex
     **/
    emergencyCancel(refIndex: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::external_propose`].
     *
     * @param proposal
     **/
    externalPropose(proposal: FrameSupportPreimagesBounded): ISubmittableExtrinsic;

    /**
     * See [`Pallet::external_propose_majority`].
     *
     * @param proposal
     **/
    externalProposeMajority(proposal: FrameSupportPreimagesBounded): ISubmittableExtrinsic;

    /**
     * See [`Pallet::external_propose_default`].
     *
     * @param proposal
     **/
    externalProposeDefault(proposal: FrameSupportPreimagesBounded): ISubmittableExtrinsic;

    /**
     * See [`Pallet::fast_track`].
     *
     * @param proposalHash
     * @param votingPeriod
     * @param delay
     **/
    fastTrack(proposalHash: H256, votingPeriod: number, delay: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::veto_external`].
     *
     * @param proposalHash
     **/
    vetoExternal(proposalHash: H256): ISubmittableExtrinsic;

    /**
     * See [`Pallet::cancel_referendum`].
     *
     * @param refIndex
     **/
    cancelReferendum(refIndex: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::delegate`].
     *
     * @param to
     * @param conviction
     * @param balance
     **/
    delegate(to: MultiAddressLike, conviction: PalletDemocracyConviction, balance: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::undelegate`].
     *
     **/
    undelegate(): ISubmittableExtrinsic;

    /**
     * See [`Pallet::clear_public_proposals`].
     *
     **/
    clearPublicProposals(): ISubmittableExtrinsic;

    /**
     * See [`Pallet::unlock`].
     *
     * @param target
     **/
    unlock(target: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * See [`Pallet::remove_vote`].
     *
     * @param index
     **/
    removeVote(index: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::remove_other_vote`].
     *
     * @param target
     * @param index
     **/
    removeOtherVote(target: MultiAddressLike, index: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::blacklist`].
     *
     * @param proposalHash
     * @param maybeRefIndex
     **/
    blacklist(proposalHash: H256, maybeRefIndex: number | undefined): ISubmittableExtrinsic;

    /**
     * See [`Pallet::cancel_proposal`].
     *
     * @param propIndex
     **/
    cancelProposal(propIndex: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_metadata`].
     *
     * @param owner
     * @param maybeHash
     **/
    setMetadata(owner: PalletDemocracyMetadataOwner, maybeHash: H256 | undefined): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  council: {
    /**
     * See [`Pallet::set_members`].
     *
     * @param newMembers
     * @param prime
     * @param oldCount
     **/
    setMembers(
      newMembers: Array<AccountId32Like>,
      prime: AccountId32Like | undefined,
      oldCount: number,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::execute`].
     *
     * @param proposal
     * @param lengthBound
     **/
    execute(proposal: KitchensinkRuntimeRuntimeCall, lengthBound: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::propose`].
     *
     * @param threshold
     * @param proposal
     * @param lengthBound
     **/
    propose(threshold: number, proposal: KitchensinkRuntimeRuntimeCall, lengthBound: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::vote`].
     *
     * @param proposal
     * @param index
     * @param approve
     **/
    vote(proposal: H256, index: number, approve: boolean): ISubmittableExtrinsic;

    /**
     * See [`Pallet::disapprove_proposal`].
     *
     * @param proposalHash
     **/
    disapproveProposal(proposalHash: H256): ISubmittableExtrinsic;

    /**
     * See [`Pallet::close`].
     *
     * @param proposalHash
     * @param index
     * @param proposalWeightBound
     * @param lengthBound
     **/
    close(
      proposalHash: H256,
      index: number,
      proposalWeightBound: SpWeightsWeightV2Weight,
      lengthBound: number,
    ): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  technicalCommittee: {
    /**
     * See [`Pallet::set_members`].
     *
     * @param newMembers
     * @param prime
     * @param oldCount
     **/
    setMembers(
      newMembers: Array<AccountId32Like>,
      prime: AccountId32Like | undefined,
      oldCount: number,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::execute`].
     *
     * @param proposal
     * @param lengthBound
     **/
    execute(proposal: KitchensinkRuntimeRuntimeCall, lengthBound: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::propose`].
     *
     * @param threshold
     * @param proposal
     * @param lengthBound
     **/
    propose(threshold: number, proposal: KitchensinkRuntimeRuntimeCall, lengthBound: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::vote`].
     *
     * @param proposal
     * @param index
     * @param approve
     **/
    vote(proposal: H256, index: number, approve: boolean): ISubmittableExtrinsic;

    /**
     * See [`Pallet::disapprove_proposal`].
     *
     * @param proposalHash
     **/
    disapproveProposal(proposalHash: H256): ISubmittableExtrinsic;

    /**
     * See [`Pallet::close`].
     *
     * @param proposalHash
     * @param index
     * @param proposalWeightBound
     * @param lengthBound
     **/
    close(
      proposalHash: H256,
      index: number,
      proposalWeightBound: SpWeightsWeightV2Weight,
      lengthBound: number,
    ): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  elections: {
    /**
     * See [`Pallet::vote`].
     *
     * @param votes
     * @param value
     **/
    vote(votes: Array<AccountId32Like>, value: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::remove_voter`].
     *
     **/
    removeVoter(): ISubmittableExtrinsic;

    /**
     * See [`Pallet::submit_candidacy`].
     *
     * @param candidateCount
     **/
    submitCandidacy(candidateCount: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::renounce_candidacy`].
     *
     * @param renouncing
     **/
    renounceCandidacy(renouncing: PalletElectionsPhragmenRenouncing): ISubmittableExtrinsic;

    /**
     * See [`Pallet::remove_member`].
     *
     * @param who
     * @param slashBond
     * @param rerunElection
     **/
    removeMember(who: MultiAddressLike, slashBond: boolean, rerunElection: boolean): ISubmittableExtrinsic;

    /**
     * See [`Pallet::clean_defunct_voters`].
     *
     * @param numVoters
     * @param numDefunct
     **/
    cleanDefunctVoters(numVoters: number, numDefunct: number): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  technicalMembership: {
    /**
     * See [`Pallet::add_member`].
     *
     * @param who
     **/
    addMember(who: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * See [`Pallet::remove_member`].
     *
     * @param who
     **/
    removeMember(who: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * See [`Pallet::swap_member`].
     *
     * @param remove
     * @param add
     **/
    swapMember(remove: MultiAddressLike, add: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * See [`Pallet::reset_members`].
     *
     * @param members
     **/
    resetMembers(members: Array<AccountId32Like>): ISubmittableExtrinsic;

    /**
     * See [`Pallet::change_key`].
     *
     * @param new_
     **/
    changeKey(new_: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_prime`].
     *
     * @param who
     **/
    setPrime(who: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * See [`Pallet::clear_prime`].
     *
     **/
    clearPrime(): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  grandpa: {
    /**
     * See [`Pallet::report_equivocation`].
     *
     * @param equivocationProof
     * @param keyOwnerProof
     **/
    reportEquivocation(
      equivocationProof: SpConsensusGrandpaEquivocationProof,
      keyOwnerProof: SpSessionMembershipProof,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::report_equivocation_unsigned`].
     *
     * @param equivocationProof
     * @param keyOwnerProof
     **/
    reportEquivocationUnsigned(
      equivocationProof: SpConsensusGrandpaEquivocationProof,
      keyOwnerProof: SpSessionMembershipProof,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::note_stalled`].
     *
     * @param delay
     * @param bestFinalizedBlockNumber
     **/
    noteStalled(delay: number, bestFinalizedBlockNumber: number): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  treasury: {
    /**
     * See [`Pallet::propose_spend`].
     *
     * @param value
     * @param beneficiary
     **/
    proposeSpend(value: bigint, beneficiary: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * See [`Pallet::reject_proposal`].
     *
     * @param proposalId
     **/
    rejectProposal(proposalId: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::approve_proposal`].
     *
     * @param proposalId
     **/
    approveProposal(proposalId: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::spend_local`].
     *
     * @param amount
     * @param beneficiary
     **/
    spendLocal(amount: bigint, beneficiary: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * See [`Pallet::remove_approval`].
     *
     * @param proposalId
     **/
    removeApproval(proposalId: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::spend`].
     *
     * @param assetKind
     * @param amount
     * @param beneficiary
     * @param validFrom
     **/
    spend(
      assetKind: number,
      amount: bigint,
      beneficiary: MultiAddressLike,
      validFrom: number | undefined,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::payout`].
     *
     * @param index
     **/
    payout(index: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::check_status`].
     *
     * @param index
     **/
    checkStatus(index: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::void_spend`].
     *
     * @param index
     **/
    voidSpend(index: number): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  assetRate: {
    /**
     * See [`Pallet::create`].
     *
     * @param assetKind
     * @param rate
     **/
    create(assetKind: number, rate: FixedU128): ISubmittableExtrinsic;

    /**
     * See [`Pallet::update`].
     *
     * @param assetKind
     * @param rate
     **/
    update(assetKind: number, rate: FixedU128): ISubmittableExtrinsic;

    /**
     * See [`Pallet::remove`].
     *
     * @param assetKind
     **/
    remove(assetKind: number): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  contracts: {
    /**
     * See [`Pallet::call_old_weight`].
     *
     * @param dest
     * @param value
     * @param gasLimit
     * @param storageDepositLimit
     * @param data
     **/
    callOldWeight(
      dest: MultiAddressLike,
      value: bigint,
      gasLimit: bigint,
      storageDepositLimit: bigint | undefined,
      data: Bytes,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::instantiate_with_code_old_weight`].
     *
     * @param value
     * @param gasLimit
     * @param storageDepositLimit
     * @param code
     * @param data
     * @param salt
     **/
    instantiateWithCodeOldWeight(
      value: bigint,
      gasLimit: bigint,
      storageDepositLimit: bigint | undefined,
      code: Bytes,
      data: Bytes,
      salt: Bytes,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::instantiate_old_weight`].
     *
     * @param value
     * @param gasLimit
     * @param storageDepositLimit
     * @param codeHash
     * @param data
     * @param salt
     **/
    instantiateOldWeight(
      value: bigint,
      gasLimit: bigint,
      storageDepositLimit: bigint | undefined,
      codeHash: H256,
      data: Bytes,
      salt: Bytes,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::upload_code`].
     *
     * @param code
     * @param storageDepositLimit
     * @param determinism
     **/
    uploadCode(
      code: Bytes,
      storageDepositLimit: bigint | undefined,
      determinism: PalletContractsWasmDeterminism,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::remove_code`].
     *
     * @param codeHash
     **/
    removeCode(codeHash: H256): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_code`].
     *
     * @param dest
     * @param codeHash
     **/
    setCode(dest: MultiAddressLike, codeHash: H256): ISubmittableExtrinsic;

    /**
     * See [`Pallet::call`].
     *
     * @param dest
     * @param value
     * @param gasLimit
     * @param storageDepositLimit
     * @param data
     **/
    call(
      dest: MultiAddressLike,
      value: bigint,
      gasLimit: SpWeightsWeightV2Weight,
      storageDepositLimit: bigint | undefined,
      data: Bytes,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::instantiate_with_code`].
     *
     * @param value
     * @param gasLimit
     * @param storageDepositLimit
     * @param code
     * @param data
     * @param salt
     **/
    instantiateWithCode(
      value: bigint,
      gasLimit: SpWeightsWeightV2Weight,
      storageDepositLimit: bigint | undefined,
      code: Bytes,
      data: Bytes,
      salt: Bytes,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::instantiate`].
     *
     * @param value
     * @param gasLimit
     * @param storageDepositLimit
     * @param codeHash
     * @param data
     * @param salt
     **/
    instantiate(
      value: bigint,
      gasLimit: SpWeightsWeightV2Weight,
      storageDepositLimit: bigint | undefined,
      codeHash: H256,
      data: Bytes,
      salt: Bytes,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::migrate`].
     *
     * @param weightLimit
     **/
    migrate(weightLimit: SpWeightsWeightV2Weight): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  sudo: {
    /**
     * See [`Pallet::sudo`].
     *
     * @param call
     **/
    sudo(call: KitchensinkRuntimeRuntimeCall): ISubmittableExtrinsic;

    /**
     * See [`Pallet::sudo_unchecked_weight`].
     *
     * @param call
     * @param weight
     **/
    sudoUncheckedWeight(call: KitchensinkRuntimeRuntimeCall, weight: SpWeightsWeightV2Weight): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_key`].
     *
     * @param new_
     **/
    setKey(new_: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * See [`Pallet::sudo_as`].
     *
     * @param who
     * @param call
     **/
    sudoAs(who: MultiAddressLike, call: KitchensinkRuntimeRuntimeCall): ISubmittableExtrinsic;

    /**
     * See [`Pallet::remove_key`].
     *
     **/
    removeKey(): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  imOnline: {
    /**
     * See [`Pallet::heartbeat`].
     *
     * @param heartbeat
     * @param signature
     **/
    heartbeat(
      heartbeat: PalletImOnlineHeartbeat,
      signature: PalletImOnlineSr25519AppSr25519Signature,
    ): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  identity: {
    /**
     * See [`Pallet::add_registrar`].
     *
     * @param account
     **/
    addRegistrar(account: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_identity`].
     *
     * @param info
     **/
    setIdentity(info: PalletIdentityLegacyIdentityInfo): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_subs`].
     *
     * @param subs
     **/
    setSubs(subs: Array<[AccountId32Like, Data]>): ISubmittableExtrinsic;

    /**
     * See [`Pallet::clear_identity`].
     *
     **/
    clearIdentity(): ISubmittableExtrinsic;

    /**
     * See [`Pallet::request_judgement`].
     *
     * @param regIndex
     * @param maxFee
     **/
    requestJudgement(regIndex: number, maxFee: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::cancel_request`].
     *
     * @param regIndex
     **/
    cancelRequest(regIndex: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_fee`].
     *
     * @param index
     * @param fee
     **/
    setFee(index: number, fee: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_account_id`].
     *
     * @param index
     * @param new_
     **/
    setAccountId(index: number, new_: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_fields`].
     *
     * @param index
     * @param fields
     **/
    setFields(index: number, fields: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::provide_judgement`].
     *
     * @param regIndex
     * @param target
     * @param judgement
     * @param identity
     **/
    provideJudgement(
      regIndex: number,
      target: MultiAddressLike,
      judgement: PalletIdentityJudgement,
      identity: H256,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::kill_identity`].
     *
     * @param target
     **/
    killIdentity(target: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * See [`Pallet::add_sub`].
     *
     * @param sub
     * @param data
     **/
    addSub(sub: MultiAddressLike, data: Data): ISubmittableExtrinsic;

    /**
     * See [`Pallet::rename_sub`].
     *
     * @param sub
     * @param data
     **/
    renameSub(sub: MultiAddressLike, data: Data): ISubmittableExtrinsic;

    /**
     * See [`Pallet::remove_sub`].
     *
     * @param sub
     **/
    removeSub(sub: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * See [`Pallet::quit_sub`].
     *
     **/
    quitSub(): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  society: {
    /**
     * See [`Pallet::bid`].
     *
     * @param value
     **/
    bid(value: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::unbid`].
     *
     **/
    unbid(): ISubmittableExtrinsic;

    /**
     * See [`Pallet::vouch`].
     *
     * @param who
     * @param value
     * @param tip
     **/
    vouch(who: MultiAddressLike, value: bigint, tip: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::unvouch`].
     *
     **/
    unvouch(): ISubmittableExtrinsic;

    /**
     * See [`Pallet::vote`].
     *
     * @param candidate
     * @param approve
     **/
    vote(candidate: MultiAddressLike, approve: boolean): ISubmittableExtrinsic;

    /**
     * See [`Pallet::defender_vote`].
     *
     * @param approve
     **/
    defenderVote(approve: boolean): ISubmittableExtrinsic;

    /**
     * See [`Pallet::payout`].
     *
     **/
    payout(): ISubmittableExtrinsic;

    /**
     * See [`Pallet::waive_repay`].
     *
     * @param amount
     **/
    waiveRepay(amount: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::found_society`].
     *
     * @param founder
     * @param maxMembers
     * @param maxIntake
     * @param maxStrikes
     * @param candidateDeposit
     * @param rules
     **/
    foundSociety(
      founder: MultiAddressLike,
      maxMembers: number,
      maxIntake: number,
      maxStrikes: number,
      candidateDeposit: bigint,
      rules: Bytes,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::dissolve`].
     *
     **/
    dissolve(): ISubmittableExtrinsic;

    /**
     * See [`Pallet::judge_suspended_member`].
     *
     * @param who
     * @param forgive
     **/
    judgeSuspendedMember(who: MultiAddressLike, forgive: boolean): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_parameters`].
     *
     * @param maxMembers
     * @param maxIntake
     * @param maxStrikes
     * @param candidateDeposit
     **/
    setParameters(
      maxMembers: number,
      maxIntake: number,
      maxStrikes: number,
      candidateDeposit: bigint,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::punish_skeptic`].
     *
     **/
    punishSkeptic(): ISubmittableExtrinsic;

    /**
     * See [`Pallet::claim_membership`].
     *
     **/
    claimMembership(): ISubmittableExtrinsic;

    /**
     * See [`Pallet::bestow_membership`].
     *
     * @param candidate
     **/
    bestowMembership(candidate: AccountId32Like): ISubmittableExtrinsic;

    /**
     * See [`Pallet::kick_candidate`].
     *
     * @param candidate
     **/
    kickCandidate(candidate: AccountId32Like): ISubmittableExtrinsic;

    /**
     * See [`Pallet::resign_candidacy`].
     *
     **/
    resignCandidacy(): ISubmittableExtrinsic;

    /**
     * See [`Pallet::drop_candidate`].
     *
     * @param candidate
     **/
    dropCandidate(candidate: AccountId32Like): ISubmittableExtrinsic;

    /**
     * See [`Pallet::cleanup_candidacy`].
     *
     * @param candidate
     * @param max
     **/
    cleanupCandidacy(candidate: AccountId32Like, max: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::cleanup_challenge`].
     *
     * @param challengeRound
     * @param max
     **/
    cleanupChallenge(challengeRound: number, max: number): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  recovery: {
    /**
     * See [`Pallet::as_recovered`].
     *
     * @param account
     * @param call
     **/
    asRecovered(account: MultiAddressLike, call: KitchensinkRuntimeRuntimeCall): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_recovered`].
     *
     * @param lost
     * @param rescuer
     **/
    setRecovered(lost: MultiAddressLike, rescuer: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * See [`Pallet::create_recovery`].
     *
     * @param friends
     * @param threshold
     * @param delayPeriod
     **/
    createRecovery(friends: Array<AccountId32Like>, threshold: number, delayPeriod: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::initiate_recovery`].
     *
     * @param account
     **/
    initiateRecovery(account: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * See [`Pallet::vouch_recovery`].
     *
     * @param lost
     * @param rescuer
     **/
    vouchRecovery(lost: MultiAddressLike, rescuer: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * See [`Pallet::claim_recovery`].
     *
     * @param account
     **/
    claimRecovery(account: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * See [`Pallet::close_recovery`].
     *
     * @param rescuer
     **/
    closeRecovery(rescuer: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * See [`Pallet::remove_recovery`].
     *
     **/
    removeRecovery(): ISubmittableExtrinsic;

    /**
     * See [`Pallet::cancel_recovered`].
     *
     * @param account
     **/
    cancelRecovered(account: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  vesting: {
    /**
     * See [`Pallet::vest`].
     *
     **/
    vest(): ISubmittableExtrinsic;

    /**
     * See [`Pallet::vest_other`].
     *
     * @param target
     **/
    vestOther(target: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * See [`Pallet::vested_transfer`].
     *
     * @param target
     * @param schedule
     **/
    vestedTransfer(target: MultiAddressLike, schedule: PalletVestingVestingInfo): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_vested_transfer`].
     *
     * @param source
     * @param target
     * @param schedule
     **/
    forceVestedTransfer(
      source: MultiAddressLike,
      target: MultiAddressLike,
      schedule: PalletVestingVestingInfo,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::merge_schedules`].
     *
     * @param schedule1Index
     * @param schedule2Index
     **/
    mergeSchedules(schedule1Index: number, schedule2Index: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_remove_vesting_schedule`].
     *
     * @param target
     * @param scheduleIndex
     **/
    forceRemoveVestingSchedule(target: MultiAddressLike, scheduleIndex: number): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  scheduler: {
    /**
     * See [`Pallet::schedule`].
     *
     * @param when
     * @param maybePeriodic
     * @param priority
     * @param call
     **/
    schedule(
      when: number,
      maybePeriodic: [number, number] | undefined,
      priority: number,
      call: KitchensinkRuntimeRuntimeCall,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::cancel`].
     *
     * @param when
     * @param index
     **/
    cancel(when: number, index: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::schedule_named`].
     *
     * @param id
     * @param when
     * @param maybePeriodic
     * @param priority
     * @param call
     **/
    scheduleNamed(
      id: FixedBytes<32>,
      when: number,
      maybePeriodic: [number, number] | undefined,
      priority: number,
      call: KitchensinkRuntimeRuntimeCall,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::cancel_named`].
     *
     * @param id
     **/
    cancelNamed(id: FixedBytes<32>): ISubmittableExtrinsic;

    /**
     * See [`Pallet::schedule_after`].
     *
     * @param after
     * @param maybePeriodic
     * @param priority
     * @param call
     **/
    scheduleAfter(
      after: number,
      maybePeriodic: [number, number] | undefined,
      priority: number,
      call: KitchensinkRuntimeRuntimeCall,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::schedule_named_after`].
     *
     * @param id
     * @param after
     * @param maybePeriodic
     * @param priority
     * @param call
     **/
    scheduleNamedAfter(
      id: FixedBytes<32>,
      after: number,
      maybePeriodic: [number, number] | undefined,
      priority: number,
      call: KitchensinkRuntimeRuntimeCall,
    ): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  glutton: {
    /**
     * See [`Pallet::initialize_pallet`].
     *
     * @param newCount
     * @param witnessCount
     **/
    initializePallet(newCount: number, witnessCount: number | undefined): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_compute`].
     *
     * @param compute
     **/
    setCompute(compute: FixedU64): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_storage`].
     *
     * @param storage
     **/
    setStorage(storage: FixedU64): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  preimage: {
    /**
     * See [`Pallet::note_preimage`].
     *
     * @param bytes
     **/
    notePreimage(bytes: Bytes): ISubmittableExtrinsic;

    /**
     * See [`Pallet::unnote_preimage`].
     *
     * @param hash
     **/
    unnotePreimage(hash: H256): ISubmittableExtrinsic;

    /**
     * See [`Pallet::request_preimage`].
     *
     * @param hash
     **/
    requestPreimage(hash: H256): ISubmittableExtrinsic;

    /**
     * See [`Pallet::unrequest_preimage`].
     *
     * @param hash
     **/
    unrequestPreimage(hash: H256): ISubmittableExtrinsic;

    /**
     * See [`Pallet::ensure_updated`].
     *
     * @param hashes
     **/
    ensureUpdated(hashes: Array<H256>): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  proxy: {
    /**
     * See [`Pallet::proxy`].
     *
     * @param real
     * @param forceProxyType
     * @param call
     **/
    proxy(
      real: MultiAddressLike,
      forceProxyType: KitchensinkRuntimeProxyType | undefined,
      call: KitchensinkRuntimeRuntimeCall,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::add_proxy`].
     *
     * @param delegate
     * @param proxyType
     * @param delay
     **/
    addProxy(delegate: MultiAddressLike, proxyType: KitchensinkRuntimeProxyType, delay: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::remove_proxy`].
     *
     * @param delegate
     * @param proxyType
     * @param delay
     **/
    removeProxy(
      delegate: MultiAddressLike,
      proxyType: KitchensinkRuntimeProxyType,
      delay: number,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::remove_proxies`].
     *
     **/
    removeProxies(): ISubmittableExtrinsic;

    /**
     * See [`Pallet::create_pure`].
     *
     * @param proxyType
     * @param delay
     * @param index
     **/
    createPure(proxyType: KitchensinkRuntimeProxyType, delay: number, index: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::kill_pure`].
     *
     * @param spawner
     * @param proxyType
     * @param index
     * @param height
     * @param extIndex
     **/
    killPure(
      spawner: MultiAddressLike,
      proxyType: KitchensinkRuntimeProxyType,
      index: number,
      height: number,
      extIndex: number,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::announce`].
     *
     * @param real
     * @param callHash
     **/
    announce(real: MultiAddressLike, callHash: H256): ISubmittableExtrinsic;

    /**
     * See [`Pallet::remove_announcement`].
     *
     * @param real
     * @param callHash
     **/
    removeAnnouncement(real: MultiAddressLike, callHash: H256): ISubmittableExtrinsic;

    /**
     * See [`Pallet::reject_announcement`].
     *
     * @param delegate
     * @param callHash
     **/
    rejectAnnouncement(delegate: MultiAddressLike, callHash: H256): ISubmittableExtrinsic;

    /**
     * See [`Pallet::proxy_announced`].
     *
     * @param delegate
     * @param real
     * @param forceProxyType
     * @param call
     **/
    proxyAnnounced(
      delegate: MultiAddressLike,
      real: MultiAddressLike,
      forceProxyType: KitchensinkRuntimeProxyType | undefined,
      call: KitchensinkRuntimeRuntimeCall,
    ): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  multisig: {
    /**
     * See [`Pallet::as_multi_threshold_1`].
     *
     * @param otherSignatories
     * @param call
     **/
    asMultiThreshold1(
      otherSignatories: Array<AccountId32Like>,
      call: KitchensinkRuntimeRuntimeCall,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::as_multi`].
     *
     * @param threshold
     * @param otherSignatories
     * @param maybeTimepoint
     * @param call
     * @param maxWeight
     **/
    asMulti(
      threshold: number,
      otherSignatories: Array<AccountId32Like>,
      maybeTimepoint: PalletMultisigTimepoint | undefined,
      call: KitchensinkRuntimeRuntimeCall,
      maxWeight: SpWeightsWeightV2Weight,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::approve_as_multi`].
     *
     * @param threshold
     * @param otherSignatories
     * @param maybeTimepoint
     * @param callHash
     * @param maxWeight
     **/
    approveAsMulti(
      threshold: number,
      otherSignatories: Array<AccountId32Like>,
      maybeTimepoint: PalletMultisigTimepoint | undefined,
      callHash: FixedBytes<32>,
      maxWeight: SpWeightsWeightV2Weight,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::cancel_as_multi`].
     *
     * @param threshold
     * @param otherSignatories
     * @param timepoint
     * @param callHash
     **/
    cancelAsMulti(
      threshold: number,
      otherSignatories: Array<AccountId32Like>,
      timepoint: PalletMultisigTimepoint,
      callHash: FixedBytes<32>,
    ): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  bounties: {
    /**
     * See [`Pallet::propose_bounty`].
     *
     * @param value
     * @param description
     **/
    proposeBounty(value: bigint, description: Bytes): ISubmittableExtrinsic;

    /**
     * See [`Pallet::approve_bounty`].
     *
     * @param bountyId
     **/
    approveBounty(bountyId: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::propose_curator`].
     *
     * @param bountyId
     * @param curator
     * @param fee
     **/
    proposeCurator(bountyId: number, curator: MultiAddressLike, fee: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::unassign_curator`].
     *
     * @param bountyId
     **/
    unassignCurator(bountyId: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::accept_curator`].
     *
     * @param bountyId
     **/
    acceptCurator(bountyId: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::award_bounty`].
     *
     * @param bountyId
     * @param beneficiary
     **/
    awardBounty(bountyId: number, beneficiary: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * See [`Pallet::claim_bounty`].
     *
     * @param bountyId
     **/
    claimBounty(bountyId: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::close_bounty`].
     *
     * @param bountyId
     **/
    closeBounty(bountyId: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::extend_bounty_expiry`].
     *
     * @param bountyId
     * @param remark
     **/
    extendBountyExpiry(bountyId: number, remark: Bytes): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  tips: {
    /**
     * See [`Pallet::report_awesome`].
     *
     * @param reason
     * @param who
     **/
    reportAwesome(reason: Bytes, who: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * See [`Pallet::retract_tip`].
     *
     * @param hash
     **/
    retractTip(hash: H256): ISubmittableExtrinsic;

    /**
     * See [`Pallet::tip_new`].
     *
     * @param reason
     * @param who
     * @param tipValue
     **/
    tipNew(reason: Bytes, who: MultiAddressLike, tipValue: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::tip`].
     *
     * @param hash
     * @param tipValue
     **/
    tip(hash: H256, tipValue: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::close_tip`].
     *
     * @param hash
     **/
    closeTip(hash: H256): ISubmittableExtrinsic;

    /**
     * See [`Pallet::slash_tip`].
     *
     * @param hash
     **/
    slashTip(hash: H256): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  assets: {
    /**
     * See [`Pallet::create`].
     *
     * @param id
     * @param admin
     * @param minBalance
     **/
    create(id: number, admin: MultiAddressLike, minBalance: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_create`].
     *
     * @param id
     * @param owner
     * @param isSufficient
     * @param minBalance
     **/
    forceCreate(id: number, owner: MultiAddressLike, isSufficient: boolean, minBalance: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::start_destroy`].
     *
     * @param id
     **/
    startDestroy(id: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::destroy_accounts`].
     *
     * @param id
     **/
    destroyAccounts(id: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::destroy_approvals`].
     *
     * @param id
     **/
    destroyApprovals(id: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::finish_destroy`].
     *
     * @param id
     **/
    finishDestroy(id: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::mint`].
     *
     * @param id
     * @param beneficiary
     * @param amount
     **/
    mint(id: number, beneficiary: MultiAddressLike, amount: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::burn`].
     *
     * @param id
     * @param who
     * @param amount
     **/
    burn(id: number, who: MultiAddressLike, amount: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::transfer`].
     *
     * @param id
     * @param target
     * @param amount
     **/
    transfer(id: number, target: MultiAddressLike, amount: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::transfer_keep_alive`].
     *
     * @param id
     * @param target
     * @param amount
     **/
    transferKeepAlive(id: number, target: MultiAddressLike, amount: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_transfer`].
     *
     * @param id
     * @param source
     * @param dest
     * @param amount
     **/
    forceTransfer(id: number, source: MultiAddressLike, dest: MultiAddressLike, amount: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::freeze`].
     *
     * @param id
     * @param who
     **/
    freeze(id: number, who: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * See [`Pallet::thaw`].
     *
     * @param id
     * @param who
     **/
    thaw(id: number, who: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * See [`Pallet::freeze_asset`].
     *
     * @param id
     **/
    freezeAsset(id: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::thaw_asset`].
     *
     * @param id
     **/
    thawAsset(id: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::transfer_ownership`].
     *
     * @param id
     * @param owner
     **/
    transferOwnership(id: number, owner: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_team`].
     *
     * @param id
     * @param issuer
     * @param admin
     * @param freezer
     **/
    setTeam(
      id: number,
      issuer: MultiAddressLike,
      admin: MultiAddressLike,
      freezer: MultiAddressLike,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_metadata`].
     *
     * @param id
     * @param name
     * @param symbol
     * @param decimals
     **/
    setMetadata(id: number, name: Bytes, symbol: Bytes, decimals: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::clear_metadata`].
     *
     * @param id
     **/
    clearMetadata(id: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_set_metadata`].
     *
     * @param id
     * @param name
     * @param symbol
     * @param decimals
     * @param isFrozen
     **/
    forceSetMetadata(
      id: number,
      name: Bytes,
      symbol: Bytes,
      decimals: number,
      isFrozen: boolean,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_clear_metadata`].
     *
     * @param id
     **/
    forceClearMetadata(id: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_asset_status`].
     *
     * @param id
     * @param owner
     * @param issuer
     * @param admin
     * @param freezer
     * @param minBalance
     * @param isSufficient
     * @param isFrozen
     **/
    forceAssetStatus(
      id: number,
      owner: MultiAddressLike,
      issuer: MultiAddressLike,
      admin: MultiAddressLike,
      freezer: MultiAddressLike,
      minBalance: bigint,
      isSufficient: boolean,
      isFrozen: boolean,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::approve_transfer`].
     *
     * @param id
     * @param delegate
     * @param amount
     **/
    approveTransfer(id: number, delegate: MultiAddressLike, amount: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::cancel_approval`].
     *
     * @param id
     * @param delegate
     **/
    cancelApproval(id: number, delegate: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_cancel_approval`].
     *
     * @param id
     * @param owner
     * @param delegate
     **/
    forceCancelApproval(id: number, owner: MultiAddressLike, delegate: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * See [`Pallet::transfer_approved`].
     *
     * @param id
     * @param owner
     * @param destination
     * @param amount
     **/
    transferApproved(
      id: number,
      owner: MultiAddressLike,
      destination: MultiAddressLike,
      amount: bigint,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::touch`].
     *
     * @param id
     **/
    touch(id: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::refund`].
     *
     * @param id
     * @param allowBurn
     **/
    refund(id: number, allowBurn: boolean): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_min_balance`].
     *
     * @param id
     * @param minBalance
     **/
    setMinBalance(id: number, minBalance: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::touch_other`].
     *
     * @param id
     * @param who
     **/
    touchOther(id: number, who: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * See [`Pallet::refund_other`].
     *
     * @param id
     * @param who
     **/
    refundOther(id: number, who: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * See [`Pallet::block`].
     *
     * @param id
     * @param who
     **/
    block(id: number, who: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  poolAssets: {
    /**
     * See [`Pallet::create`].
     *
     * @param id
     * @param admin
     * @param minBalance
     **/
    create(id: number, admin: MultiAddressLike, minBalance: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_create`].
     *
     * @param id
     * @param owner
     * @param isSufficient
     * @param minBalance
     **/
    forceCreate(id: number, owner: MultiAddressLike, isSufficient: boolean, minBalance: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::start_destroy`].
     *
     * @param id
     **/
    startDestroy(id: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::destroy_accounts`].
     *
     * @param id
     **/
    destroyAccounts(id: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::destroy_approvals`].
     *
     * @param id
     **/
    destroyApprovals(id: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::finish_destroy`].
     *
     * @param id
     **/
    finishDestroy(id: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::mint`].
     *
     * @param id
     * @param beneficiary
     * @param amount
     **/
    mint(id: number, beneficiary: MultiAddressLike, amount: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::burn`].
     *
     * @param id
     * @param who
     * @param amount
     **/
    burn(id: number, who: MultiAddressLike, amount: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::transfer`].
     *
     * @param id
     * @param target
     * @param amount
     **/
    transfer(id: number, target: MultiAddressLike, amount: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::transfer_keep_alive`].
     *
     * @param id
     * @param target
     * @param amount
     **/
    transferKeepAlive(id: number, target: MultiAddressLike, amount: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_transfer`].
     *
     * @param id
     * @param source
     * @param dest
     * @param amount
     **/
    forceTransfer(id: number, source: MultiAddressLike, dest: MultiAddressLike, amount: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::freeze`].
     *
     * @param id
     * @param who
     **/
    freeze(id: number, who: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * See [`Pallet::thaw`].
     *
     * @param id
     * @param who
     **/
    thaw(id: number, who: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * See [`Pallet::freeze_asset`].
     *
     * @param id
     **/
    freezeAsset(id: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::thaw_asset`].
     *
     * @param id
     **/
    thawAsset(id: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::transfer_ownership`].
     *
     * @param id
     * @param owner
     **/
    transferOwnership(id: number, owner: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_team`].
     *
     * @param id
     * @param issuer
     * @param admin
     * @param freezer
     **/
    setTeam(
      id: number,
      issuer: MultiAddressLike,
      admin: MultiAddressLike,
      freezer: MultiAddressLike,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_metadata`].
     *
     * @param id
     * @param name
     * @param symbol
     * @param decimals
     **/
    setMetadata(id: number, name: Bytes, symbol: Bytes, decimals: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::clear_metadata`].
     *
     * @param id
     **/
    clearMetadata(id: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_set_metadata`].
     *
     * @param id
     * @param name
     * @param symbol
     * @param decimals
     * @param isFrozen
     **/
    forceSetMetadata(
      id: number,
      name: Bytes,
      symbol: Bytes,
      decimals: number,
      isFrozen: boolean,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_clear_metadata`].
     *
     * @param id
     **/
    forceClearMetadata(id: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_asset_status`].
     *
     * @param id
     * @param owner
     * @param issuer
     * @param admin
     * @param freezer
     * @param minBalance
     * @param isSufficient
     * @param isFrozen
     **/
    forceAssetStatus(
      id: number,
      owner: MultiAddressLike,
      issuer: MultiAddressLike,
      admin: MultiAddressLike,
      freezer: MultiAddressLike,
      minBalance: bigint,
      isSufficient: boolean,
      isFrozen: boolean,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::approve_transfer`].
     *
     * @param id
     * @param delegate
     * @param amount
     **/
    approveTransfer(id: number, delegate: MultiAddressLike, amount: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::cancel_approval`].
     *
     * @param id
     * @param delegate
     **/
    cancelApproval(id: number, delegate: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_cancel_approval`].
     *
     * @param id
     * @param owner
     * @param delegate
     **/
    forceCancelApproval(id: number, owner: MultiAddressLike, delegate: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * See [`Pallet::transfer_approved`].
     *
     * @param id
     * @param owner
     * @param destination
     * @param amount
     **/
    transferApproved(
      id: number,
      owner: MultiAddressLike,
      destination: MultiAddressLike,
      amount: bigint,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::touch`].
     *
     * @param id
     **/
    touch(id: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::refund`].
     *
     * @param id
     * @param allowBurn
     **/
    refund(id: number, allowBurn: boolean): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_min_balance`].
     *
     * @param id
     * @param minBalance
     **/
    setMinBalance(id: number, minBalance: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::touch_other`].
     *
     * @param id
     * @param who
     **/
    touchOther(id: number, who: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * See [`Pallet::refund_other`].
     *
     * @param id
     * @param who
     **/
    refundOther(id: number, who: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * See [`Pallet::block`].
     *
     * @param id
     * @param who
     **/
    block(id: number, who: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  lottery: {
    /**
     * See [`Pallet::buy_ticket`].
     *
     * @param call
     **/
    buyTicket(call: KitchensinkRuntimeRuntimeCall): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_calls`].
     *
     * @param calls
     **/
    setCalls(calls: Array<KitchensinkRuntimeRuntimeCall>): ISubmittableExtrinsic;

    /**
     * See [`Pallet::start_lottery`].
     *
     * @param price
     * @param length
     * @param delay
     * @param repeat
     **/
    startLottery(price: bigint, length: number, delay: number, repeat: boolean): ISubmittableExtrinsic;

    /**
     * See [`Pallet::stop_repeat`].
     *
     **/
    stopRepeat(): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  nis: {
    /**
     * See [`Pallet::place_bid`].
     *
     * @param amount
     * @param duration
     **/
    placeBid(amount: bigint, duration: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::retract_bid`].
     *
     * @param amount
     * @param duration
     **/
    retractBid(amount: bigint, duration: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::fund_deficit`].
     *
     **/
    fundDeficit(): ISubmittableExtrinsic;

    /**
     * See [`Pallet::thaw_private`].
     *
     * @param index
     * @param maybeProportion
     **/
    thawPrivate(index: number, maybeProportion: Perquintill | undefined): ISubmittableExtrinsic;

    /**
     * See [`Pallet::thaw_communal`].
     *
     * @param index
     **/
    thawCommunal(index: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::communify`].
     *
     * @param index
     **/
    communify(index: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::privatize`].
     *
     * @param index
     **/
    privatize(index: number): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  uniques: {
    /**
     * See [`Pallet::create`].
     *
     * @param collection
     * @param admin
     **/
    create(collection: number, admin: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_create`].
     *
     * @param collection
     * @param owner
     * @param freeHolding
     **/
    forceCreate(collection: number, owner: MultiAddressLike, freeHolding: boolean): ISubmittableExtrinsic;

    /**
     * See [`Pallet::destroy`].
     *
     * @param collection
     * @param witness
     **/
    destroy(collection: number, witness: PalletUniquesDestroyWitness): ISubmittableExtrinsic;

    /**
     * See [`Pallet::mint`].
     *
     * @param collection
     * @param item
     * @param owner
     **/
    mint(collection: number, item: number, owner: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * See [`Pallet::burn`].
     *
     * @param collection
     * @param item
     * @param checkOwner
     **/
    burn(collection: number, item: number, checkOwner: MultiAddressLike | undefined): ISubmittableExtrinsic;

    /**
     * See [`Pallet::transfer`].
     *
     * @param collection
     * @param item
     * @param dest
     **/
    transfer(collection: number, item: number, dest: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * See [`Pallet::redeposit`].
     *
     * @param collection
     * @param items
     **/
    redeposit(collection: number, items: Array<number>): ISubmittableExtrinsic;

    /**
     * See [`Pallet::freeze`].
     *
     * @param collection
     * @param item
     **/
    freeze(collection: number, item: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::thaw`].
     *
     * @param collection
     * @param item
     **/
    thaw(collection: number, item: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::freeze_collection`].
     *
     * @param collection
     **/
    freezeCollection(collection: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::thaw_collection`].
     *
     * @param collection
     **/
    thawCollection(collection: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::transfer_ownership`].
     *
     * @param collection
     * @param owner
     **/
    transferOwnership(collection: number, owner: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_team`].
     *
     * @param collection
     * @param issuer
     * @param admin
     * @param freezer
     **/
    setTeam(
      collection: number,
      issuer: MultiAddressLike,
      admin: MultiAddressLike,
      freezer: MultiAddressLike,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::approve_transfer`].
     *
     * @param collection
     * @param item
     * @param delegate
     **/
    approveTransfer(collection: number, item: number, delegate: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * See [`Pallet::cancel_approval`].
     *
     * @param collection
     * @param item
     * @param maybeCheckDelegate
     **/
    cancelApproval(
      collection: number,
      item: number,
      maybeCheckDelegate: MultiAddressLike | undefined,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_item_status`].
     *
     * @param collection
     * @param owner
     * @param issuer
     * @param admin
     * @param freezer
     * @param freeHolding
     * @param isFrozen
     **/
    forceItemStatus(
      collection: number,
      owner: MultiAddressLike,
      issuer: MultiAddressLike,
      admin: MultiAddressLike,
      freezer: MultiAddressLike,
      freeHolding: boolean,
      isFrozen: boolean,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_attribute`].
     *
     * @param collection
     * @param maybeItem
     * @param key
     * @param value
     **/
    setAttribute(collection: number, maybeItem: number | undefined, key: Bytes, value: Bytes): ISubmittableExtrinsic;

    /**
     * See [`Pallet::clear_attribute`].
     *
     * @param collection
     * @param maybeItem
     * @param key
     **/
    clearAttribute(collection: number, maybeItem: number | undefined, key: Bytes): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_metadata`].
     *
     * @param collection
     * @param item
     * @param data
     * @param isFrozen
     **/
    setMetadata(collection: number, item: number, data: Bytes, isFrozen: boolean): ISubmittableExtrinsic;

    /**
     * See [`Pallet::clear_metadata`].
     *
     * @param collection
     * @param item
     **/
    clearMetadata(collection: number, item: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_collection_metadata`].
     *
     * @param collection
     * @param data
     * @param isFrozen
     **/
    setCollectionMetadata(collection: number, data: Bytes, isFrozen: boolean): ISubmittableExtrinsic;

    /**
     * See [`Pallet::clear_collection_metadata`].
     *
     * @param collection
     **/
    clearCollectionMetadata(collection: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_accept_ownership`].
     *
     * @param maybeCollection
     **/
    setAcceptOwnership(maybeCollection: number | undefined): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_collection_max_supply`].
     *
     * @param collection
     * @param maxSupply
     **/
    setCollectionMaxSupply(collection: number, maxSupply: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_price`].
     *
     * @param collection
     * @param item
     * @param price
     * @param whitelistedBuyer
     **/
    setPrice(
      collection: number,
      item: number,
      price: bigint | undefined,
      whitelistedBuyer: MultiAddressLike | undefined,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::buy_item`].
     *
     * @param collection
     * @param item
     * @param bidPrice
     **/
    buyItem(collection: number, item: number, bidPrice: bigint): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  nfts: {
    /**
     * See [`Pallet::create`].
     *
     * @param admin
     * @param config
     **/
    create(admin: MultiAddressLike, config: PalletNftsCollectionConfig): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_create`].
     *
     * @param owner
     * @param config
     **/
    forceCreate(owner: MultiAddressLike, config: PalletNftsCollectionConfig): ISubmittableExtrinsic;

    /**
     * See [`Pallet::destroy`].
     *
     * @param collection
     * @param witness
     **/
    destroy(collection: number, witness: PalletNftsDestroyWitness): ISubmittableExtrinsic;

    /**
     * See [`Pallet::mint`].
     *
     * @param collection
     * @param item
     * @param mintTo
     * @param witnessData
     **/
    mint(
      collection: number,
      item: number,
      mintTo: MultiAddressLike,
      witnessData: PalletNftsMintWitness | undefined,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_mint`].
     *
     * @param collection
     * @param item
     * @param mintTo
     * @param itemConfig
     **/
    forceMint(
      collection: number,
      item: number,
      mintTo: MultiAddressLike,
      itemConfig: PalletNftsItemConfig,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::burn`].
     *
     * @param collection
     * @param item
     **/
    burn(collection: number, item: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::transfer`].
     *
     * @param collection
     * @param item
     * @param dest
     **/
    transfer(collection: number, item: number, dest: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * See [`Pallet::redeposit`].
     *
     * @param collection
     * @param items
     **/
    redeposit(collection: number, items: Array<number>): ISubmittableExtrinsic;

    /**
     * See [`Pallet::lock_item_transfer`].
     *
     * @param collection
     * @param item
     **/
    lockItemTransfer(collection: number, item: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::unlock_item_transfer`].
     *
     * @param collection
     * @param item
     **/
    unlockItemTransfer(collection: number, item: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::lock_collection`].
     *
     * @param collection
     * @param lockSettings
     **/
    lockCollection(collection: number, lockSettings: PalletNftsBitFlags): ISubmittableExtrinsic;

    /**
     * See [`Pallet::transfer_ownership`].
     *
     * @param collection
     * @param owner
     **/
    transferOwnership(collection: number, owner: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_team`].
     *
     * @param collection
     * @param issuer
     * @param admin
     * @param freezer
     **/
    setTeam(
      collection: number,
      issuer: MultiAddressLike | undefined,
      admin: MultiAddressLike | undefined,
      freezer: MultiAddressLike | undefined,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_collection_owner`].
     *
     * @param collection
     * @param owner
     **/
    forceCollectionOwner(collection: number, owner: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_collection_config`].
     *
     * @param collection
     * @param config
     **/
    forceCollectionConfig(collection: number, config: PalletNftsCollectionConfig): ISubmittableExtrinsic;

    /**
     * See [`Pallet::approve_transfer`].
     *
     * @param collection
     * @param item
     * @param delegate
     * @param maybeDeadline
     **/
    approveTransfer(
      collection: number,
      item: number,
      delegate: MultiAddressLike,
      maybeDeadline: number | undefined,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::cancel_approval`].
     *
     * @param collection
     * @param item
     * @param delegate
     **/
    cancelApproval(collection: number, item: number, delegate: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * See [`Pallet::clear_all_transfer_approvals`].
     *
     * @param collection
     * @param item
     **/
    clearAllTransferApprovals(collection: number, item: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::lock_item_properties`].
     *
     * @param collection
     * @param item
     * @param lockMetadata
     * @param lockAttributes
     **/
    lockItemProperties(
      collection: number,
      item: number,
      lockMetadata: boolean,
      lockAttributes: boolean,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_attribute`].
     *
     * @param collection
     * @param maybeItem
     * @param namespace
     * @param key
     * @param value
     **/
    setAttribute(
      collection: number,
      maybeItem: number | undefined,
      namespace: PalletNftsAttributeNamespace,
      key: Bytes,
      value: Bytes,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_set_attribute`].
     *
     * @param setAs
     * @param collection
     * @param maybeItem
     * @param namespace
     * @param key
     * @param value
     **/
    forceSetAttribute(
      setAs: AccountId32Like | undefined,
      collection: number,
      maybeItem: number | undefined,
      namespace: PalletNftsAttributeNamespace,
      key: Bytes,
      value: Bytes,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::clear_attribute`].
     *
     * @param collection
     * @param maybeItem
     * @param namespace
     * @param key
     **/
    clearAttribute(
      collection: number,
      maybeItem: number | undefined,
      namespace: PalletNftsAttributeNamespace,
      key: Bytes,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::approve_item_attributes`].
     *
     * @param collection
     * @param item
     * @param delegate
     **/
    approveItemAttributes(collection: number, item: number, delegate: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * See [`Pallet::cancel_item_attributes_approval`].
     *
     * @param collection
     * @param item
     * @param delegate
     * @param witness
     **/
    cancelItemAttributesApproval(
      collection: number,
      item: number,
      delegate: MultiAddressLike,
      witness: PalletNftsCancelAttributesApprovalWitness,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_metadata`].
     *
     * @param collection
     * @param item
     * @param data
     **/
    setMetadata(collection: number, item: number, data: Bytes): ISubmittableExtrinsic;

    /**
     * See [`Pallet::clear_metadata`].
     *
     * @param collection
     * @param item
     **/
    clearMetadata(collection: number, item: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_collection_metadata`].
     *
     * @param collection
     * @param data
     **/
    setCollectionMetadata(collection: number, data: Bytes): ISubmittableExtrinsic;

    /**
     * See [`Pallet::clear_collection_metadata`].
     *
     * @param collection
     **/
    clearCollectionMetadata(collection: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_accept_ownership`].
     *
     * @param maybeCollection
     **/
    setAcceptOwnership(maybeCollection: number | undefined): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_collection_max_supply`].
     *
     * @param collection
     * @param maxSupply
     **/
    setCollectionMaxSupply(collection: number, maxSupply: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::update_mint_settings`].
     *
     * @param collection
     * @param mintSettings
     **/
    updateMintSettings(collection: number, mintSettings: PalletNftsMintSettings): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_price`].
     *
     * @param collection
     * @param item
     * @param price
     * @param whitelistedBuyer
     **/
    setPrice(
      collection: number,
      item: number,
      price: bigint | undefined,
      whitelistedBuyer: MultiAddressLike | undefined,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::buy_item`].
     *
     * @param collection
     * @param item
     * @param bidPrice
     **/
    buyItem(collection: number, item: number, bidPrice: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::pay_tips`].
     *
     * @param tips
     **/
    payTips(tips: Array<PalletNftsItemTip>): ISubmittableExtrinsic;

    /**
     * See [`Pallet::create_swap`].
     *
     * @param offeredCollection
     * @param offeredItem
     * @param desiredCollection
     * @param maybeDesiredItem
     * @param maybePrice
     * @param duration
     **/
    createSwap(
      offeredCollection: number,
      offeredItem: number,
      desiredCollection: number,
      maybeDesiredItem: number | undefined,
      maybePrice: PalletNftsPriceWithDirection | undefined,
      duration: number,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::cancel_swap`].
     *
     * @param offeredCollection
     * @param offeredItem
     **/
    cancelSwap(offeredCollection: number, offeredItem: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::claim_swap`].
     *
     * @param sendCollection
     * @param sendItem
     * @param receiveCollection
     * @param receiveItem
     * @param witnessPrice
     **/
    claimSwap(
      sendCollection: number,
      sendItem: number,
      receiveCollection: number,
      receiveItem: number,
      witnessPrice: PalletNftsPriceWithDirection | undefined,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::mint_pre_signed`].
     *
     * @param mintData
     * @param signature
     * @param signer
     **/
    mintPreSigned(
      mintData: PalletNftsPreSignedMint,
      signature: SpRuntimeMultiSignature,
      signer: AccountId32Like,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_attributes_pre_signed`].
     *
     * @param data
     * @param signature
     * @param signer
     **/
    setAttributesPreSigned(
      data: PalletNftsPreSignedAttributes,
      signature: SpRuntimeMultiSignature,
      signer: AccountId32Like,
    ): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  nftFractionalization: {
    /**
     * See [`Pallet::fractionalize`].
     *
     * @param nftCollectionId
     * @param nftId
     * @param assetId
     * @param beneficiary
     * @param fractions
     **/
    fractionalize(
      nftCollectionId: number,
      nftId: number,
      assetId: number,
      beneficiary: MultiAddressLike,
      fractions: bigint,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::unify`].
     *
     * @param nftCollectionId
     * @param nftId
     * @param assetId
     * @param beneficiary
     **/
    unify(
      nftCollectionId: number,
      nftId: number,
      assetId: number,
      beneficiary: MultiAddressLike,
    ): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  salary: {
    /**
     * See [`Pallet::init`].
     *
     **/
    init(): ISubmittableExtrinsic;

    /**
     * See [`Pallet::bump`].
     *
     **/
    bump(): ISubmittableExtrinsic;

    /**
     * See [`Pallet::induct`].
     *
     **/
    induct(): ISubmittableExtrinsic;

    /**
     * See [`Pallet::register`].
     *
     **/
    register(): ISubmittableExtrinsic;

    /**
     * See [`Pallet::payout`].
     *
     **/
    payout(): ISubmittableExtrinsic;

    /**
     * See [`Pallet::payout_other`].
     *
     * @param beneficiary
     **/
    payoutOther(beneficiary: AccountId32Like): ISubmittableExtrinsic;

    /**
     * See [`Pallet::check_payment`].
     *
     **/
    checkPayment(): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  coreFellowship: {
    /**
     * See [`Pallet::bump`].
     *
     * @param who
     **/
    bump(who: AccountId32Like): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_params`].
     *
     * @param params
     **/
    setParams(params: PalletCoreFellowshipParamsType): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_active`].
     *
     * @param isActive
     **/
    setActive(isActive: boolean): ISubmittableExtrinsic;

    /**
     * See [`Pallet::approve`].
     *
     * @param who
     * @param atRank
     **/
    approve(who: AccountId32Like, atRank: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::induct`].
     *
     * @param who
     **/
    induct(who: AccountId32Like): ISubmittableExtrinsic;

    /**
     * See [`Pallet::promote`].
     *
     * @param who
     * @param toRank
     **/
    promote(who: AccountId32Like, toRank: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::offboard`].
     *
     * @param who
     **/
    offboard(who: AccountId32Like): ISubmittableExtrinsic;

    /**
     * See [`Pallet::submit_evidence`].
     *
     * @param wish
     * @param evidence
     **/
    submitEvidence(wish: PalletCoreFellowshipWish, evidence: Bytes): ISubmittableExtrinsic;

    /**
     * See [`Pallet::import`].
     *
     **/
    import(): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  transactionStorage: {
    /**
     * See [`Pallet::store`].
     *
     * @param data
     **/
    store(data: Bytes): ISubmittableExtrinsic;

    /**
     * See [`Pallet::renew`].
     *
     * @param block
     * @param index
     **/
    renew(block: number, index: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::check_proof`].
     *
     * @param proof
     **/
    checkProof(proof: SpTransactionStorageProofTransactionStorageProof): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  voterList: {
    /**
     * See [`Pallet::rebag`].
     *
     * @param dislocated
     **/
    rebag(dislocated: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * See [`Pallet::put_in_front_of`].
     *
     * @param lighter
     **/
    putInFrontOf(lighter: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * See [`Pallet::put_in_front_of_other`].
     *
     * @param heavier
     * @param lighter
     **/
    putInFrontOfOther(heavier: MultiAddressLike, lighter: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  stateTrieMigration: {
    /**
     * See [`Pallet::control_auto_migration`].
     *
     * @param maybeConfig
     **/
    controlAutoMigration(maybeConfig: PalletStateTrieMigrationMigrationLimits | undefined): ISubmittableExtrinsic;

    /**
     * See [`Pallet::continue_migrate`].
     *
     * @param limits
     * @param realSizeUpper
     * @param witnessTask
     **/
    continueMigrate(
      limits: PalletStateTrieMigrationMigrationLimits,
      realSizeUpper: number,
      witnessTask: PalletStateTrieMigrationMigrationTask,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::migrate_custom_top`].
     *
     * @param keys
     * @param witnessSize
     **/
    migrateCustomTop(keys: Array<Bytes>, witnessSize: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::migrate_custom_child`].
     *
     * @param root
     * @param childKeys
     * @param totalSize
     **/
    migrateCustomChild(root: Bytes, childKeys: Array<Bytes>, totalSize: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_signed_max_limits`].
     *
     * @param limits
     **/
    setSignedMaxLimits(limits: PalletStateTrieMigrationMigrationLimits): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_set_progress`].
     *
     * @param progressTop
     * @param progressChild
     **/
    forceSetProgress(
      progressTop: PalletStateTrieMigrationProgress,
      progressChild: PalletStateTrieMigrationProgress,
    ): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  childBounties: {
    /**
     * See [`Pallet::add_child_bounty`].
     *
     * @param parentBountyId
     * @param value
     * @param description
     **/
    addChildBounty(parentBountyId: number, value: bigint, description: Bytes): ISubmittableExtrinsic;

    /**
     * See [`Pallet::propose_curator`].
     *
     * @param parentBountyId
     * @param childBountyId
     * @param curator
     * @param fee
     **/
    proposeCurator(
      parentBountyId: number,
      childBountyId: number,
      curator: MultiAddressLike,
      fee: bigint,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::accept_curator`].
     *
     * @param parentBountyId
     * @param childBountyId
     **/
    acceptCurator(parentBountyId: number, childBountyId: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::unassign_curator`].
     *
     * @param parentBountyId
     * @param childBountyId
     **/
    unassignCurator(parentBountyId: number, childBountyId: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::award_child_bounty`].
     *
     * @param parentBountyId
     * @param childBountyId
     * @param beneficiary
     **/
    awardChildBounty(
      parentBountyId: number,
      childBountyId: number,
      beneficiary: MultiAddressLike,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::claim_child_bounty`].
     *
     * @param parentBountyId
     * @param childBountyId
     **/
    claimChildBounty(parentBountyId: number, childBountyId: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::close_child_bounty`].
     *
     * @param parentBountyId
     * @param childBountyId
     **/
    closeChildBounty(parentBountyId: number, childBountyId: number): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  referenda: {
    /**
     * See [`Pallet::submit`].
     *
     * @param proposalOrigin
     * @param proposal
     * @param enactmentMoment
     **/
    submit(
      proposalOrigin: KitchensinkRuntimeOriginCaller,
      proposal: FrameSupportPreimagesBounded,
      enactmentMoment: FrameSupportScheduleDispatchTime,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::place_decision_deposit`].
     *
     * @param index
     **/
    placeDecisionDeposit(index: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::refund_decision_deposit`].
     *
     * @param index
     **/
    refundDecisionDeposit(index: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::cancel`].
     *
     * @param index
     **/
    cancel(index: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::kill`].
     *
     * @param index
     **/
    kill(index: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::nudge_referendum`].
     *
     * @param index
     **/
    nudgeReferendum(index: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::one_fewer_deciding`].
     *
     * @param track
     **/
    oneFewerDeciding(track: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::refund_submission_deposit`].
     *
     * @param index
     **/
    refundSubmissionDeposit(index: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_metadata`].
     *
     * @param index
     * @param maybeHash
     **/
    setMetadata(index: number, maybeHash: H256 | undefined): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  remark: {
    /**
     * See [`Pallet::store`].
     *
     * @param remark
     **/
    store(remark: Bytes): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  rootTesting: {
    /**
     * See `Pallet::fill_block`.
     *
     * @param ratio
     **/
    fillBlock(ratio: Perbill): ISubmittableExtrinsic;

    /**
     * See `Pallet::trigger_defensive`.
     *
     **/
    triggerDefensive(): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  convictionVoting: {
    /**
     * See [`Pallet::vote`].
     *
     * @param pollIndex
     * @param vote
     **/
    vote(pollIndex: number, vote: PalletConvictionVotingVoteAccountVote): ISubmittableExtrinsic;

    /**
     * See [`Pallet::delegate`].
     *
     * @param class_
     * @param to
     * @param conviction
     * @param balance
     **/
    delegate(
      class_: number,
      to: MultiAddressLike,
      conviction: PalletConvictionVotingConviction,
      balance: bigint,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::undelegate`].
     *
     * @param class_
     **/
    undelegate(class_: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::unlock`].
     *
     * @param class_
     * @param target
     **/
    unlock(class_: number, target: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * See [`Pallet::remove_vote`].
     *
     * @param class_
     * @param index
     **/
    removeVote(class_: number | undefined, index: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::remove_other_vote`].
     *
     * @param target
     * @param class_
     * @param index
     **/
    removeOtherVote(target: MultiAddressLike, class_: number, index: number): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  whitelist: {
    /**
     * See [`Pallet::whitelist_call`].
     *
     * @param callHash
     **/
    whitelistCall(callHash: H256): ISubmittableExtrinsic;

    /**
     * See [`Pallet::remove_whitelisted_call`].
     *
     * @param callHash
     **/
    removeWhitelistedCall(callHash: H256): ISubmittableExtrinsic;

    /**
     * See [`Pallet::dispatch_whitelisted_call`].
     *
     * @param callHash
     * @param callEncodedLen
     * @param callWeightWitness
     **/
    dispatchWhitelistedCall(
      callHash: H256,
      callEncodedLen: number,
      callWeightWitness: SpWeightsWeightV2Weight,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::dispatch_whitelisted_call_with_preimage`].
     *
     * @param call
     **/
    dispatchWhitelistedCallWithPreimage(call: KitchensinkRuntimeRuntimeCall): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  allianceMotion: {
    /**
     * See [`Pallet::set_members`].
     *
     * @param newMembers
     * @param prime
     * @param oldCount
     **/
    setMembers(
      newMembers: Array<AccountId32Like>,
      prime: AccountId32Like | undefined,
      oldCount: number,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::execute`].
     *
     * @param proposal
     * @param lengthBound
     **/
    execute(proposal: KitchensinkRuntimeRuntimeCall, lengthBound: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::propose`].
     *
     * @param threshold
     * @param proposal
     * @param lengthBound
     **/
    propose(threshold: number, proposal: KitchensinkRuntimeRuntimeCall, lengthBound: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::vote`].
     *
     * @param proposal
     * @param index
     * @param approve
     **/
    vote(proposal: H256, index: number, approve: boolean): ISubmittableExtrinsic;

    /**
     * See [`Pallet::disapprove_proposal`].
     *
     * @param proposalHash
     **/
    disapproveProposal(proposalHash: H256): ISubmittableExtrinsic;

    /**
     * See [`Pallet::close`].
     *
     * @param proposalHash
     * @param index
     * @param proposalWeightBound
     * @param lengthBound
     **/
    close(
      proposalHash: H256,
      index: number,
      proposalWeightBound: SpWeightsWeightV2Weight,
      lengthBound: number,
    ): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  alliance: {
    /**
     * See [`Pallet::propose`].
     *
     * @param threshold
     * @param proposal
     * @param lengthBound
     **/
    propose(threshold: number, proposal: KitchensinkRuntimeRuntimeCall, lengthBound: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::vote`].
     *
     * @param proposal
     * @param index
     * @param approve
     **/
    vote(proposal: H256, index: number, approve: boolean): ISubmittableExtrinsic;

    /**
     * See [`Pallet::init_members`].
     *
     * @param fellows
     * @param allies
     **/
    initMembers(fellows: Array<AccountId32Like>, allies: Array<AccountId32Like>): ISubmittableExtrinsic;

    /**
     * See [`Pallet::disband`].
     *
     * @param witness
     **/
    disband(witness: PalletAllianceDisbandWitness): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_rule`].
     *
     * @param rule
     **/
    setRule(rule: PalletAllianceCid): ISubmittableExtrinsic;

    /**
     * See [`Pallet::announce`].
     *
     * @param announcement
     **/
    announce(announcement: PalletAllianceCid): ISubmittableExtrinsic;

    /**
     * See [`Pallet::remove_announcement`].
     *
     * @param announcement
     **/
    removeAnnouncement(announcement: PalletAllianceCid): ISubmittableExtrinsic;

    /**
     * See [`Pallet::join_alliance`].
     *
     **/
    joinAlliance(): ISubmittableExtrinsic;

    /**
     * See [`Pallet::nominate_ally`].
     *
     * @param who
     **/
    nominateAlly(who: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * See [`Pallet::elevate_ally`].
     *
     * @param ally
     **/
    elevateAlly(ally: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * See [`Pallet::give_retirement_notice`].
     *
     **/
    giveRetirementNotice(): ISubmittableExtrinsic;

    /**
     * See [`Pallet::retire`].
     *
     **/
    retire(): ISubmittableExtrinsic;

    /**
     * See [`Pallet::kick_member`].
     *
     * @param who
     **/
    kickMember(who: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * See [`Pallet::add_unscrupulous_items`].
     *
     * @param items
     **/
    addUnscrupulousItems(items: Array<PalletAllianceUnscrupulousItem>): ISubmittableExtrinsic;

    /**
     * See [`Pallet::remove_unscrupulous_items`].
     *
     * @param items
     **/
    removeUnscrupulousItems(items: Array<PalletAllianceUnscrupulousItem>): ISubmittableExtrinsic;

    /**
     * See [`Pallet::close`].
     *
     * @param proposalHash
     * @param index
     * @param proposalWeightBound
     * @param lengthBound
     **/
    close(
      proposalHash: H256,
      index: number,
      proposalWeightBound: SpWeightsWeightV2Weight,
      lengthBound: number,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::abdicate_fellow_status`].
     *
     **/
    abdicateFellowStatus(): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  nominationPools: {
    /**
     * See [`Pallet::join`].
     *
     * @param amount
     * @param poolId
     **/
    join(amount: bigint, poolId: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::bond_extra`].
     *
     * @param extra
     **/
    bondExtra(extra: PalletNominationPoolsBondExtra): ISubmittableExtrinsic;

    /**
     * See [`Pallet::claim_payout`].
     *
     **/
    claimPayout(): ISubmittableExtrinsic;

    /**
     * See [`Pallet::unbond`].
     *
     * @param memberAccount
     * @param unbondingPoints
     **/
    unbond(memberAccount: MultiAddressLike, unbondingPoints: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::pool_withdraw_unbonded`].
     *
     * @param poolId
     * @param numSlashingSpans
     **/
    poolWithdrawUnbonded(poolId: number, numSlashingSpans: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::withdraw_unbonded`].
     *
     * @param memberAccount
     * @param numSlashingSpans
     **/
    withdrawUnbonded(memberAccount: MultiAddressLike, numSlashingSpans: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::create`].
     *
     * @param amount
     * @param root
     * @param nominator
     * @param bouncer
     **/
    create(
      amount: bigint,
      root: MultiAddressLike,
      nominator: MultiAddressLike,
      bouncer: MultiAddressLike,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::create_with_pool_id`].
     *
     * @param amount
     * @param root
     * @param nominator
     * @param bouncer
     * @param poolId
     **/
    createWithPoolId(
      amount: bigint,
      root: MultiAddressLike,
      nominator: MultiAddressLike,
      bouncer: MultiAddressLike,
      poolId: number,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::nominate`].
     *
     * @param poolId
     * @param validators
     **/
    nominate(poolId: number, validators: Array<AccountId32Like>): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_state`].
     *
     * @param poolId
     * @param state
     **/
    setState(poolId: number, state: PalletNominationPoolsPoolState): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_metadata`].
     *
     * @param poolId
     * @param metadata
     **/
    setMetadata(poolId: number, metadata: Bytes): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_configs`].
     *
     * @param minJoinBond
     * @param minCreateBond
     * @param maxPools
     * @param maxMembers
     * @param maxMembersPerPool
     * @param globalMaxCommission
     **/
    setConfigs(
      minJoinBond: PalletNominationPoolsConfigOp,
      minCreateBond: PalletNominationPoolsConfigOp,
      maxPools: PalletNominationPoolsConfigOpU32,
      maxMembers: PalletNominationPoolsConfigOpU32,
      maxMembersPerPool: PalletNominationPoolsConfigOpU32,
      globalMaxCommission: PalletNominationPoolsConfigOpPerbill,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::update_roles`].
     *
     * @param poolId
     * @param newRoot
     * @param newNominator
     * @param newBouncer
     **/
    updateRoles(
      poolId: number,
      newRoot: PalletNominationPoolsConfigOp004,
      newNominator: PalletNominationPoolsConfigOp004,
      newBouncer: PalletNominationPoolsConfigOp004,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::chill`].
     *
     * @param poolId
     **/
    chill(poolId: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::bond_extra_other`].
     *
     * @param member
     * @param extra
     **/
    bondExtraOther(member: MultiAddressLike, extra: PalletNominationPoolsBondExtra): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_claim_permission`].
     *
     * @param permission
     **/
    setClaimPermission(permission: PalletNominationPoolsClaimPermission): ISubmittableExtrinsic;

    /**
     * See [`Pallet::claim_payout_other`].
     *
     * @param other
     **/
    claimPayoutOther(other: AccountId32Like): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_commission`].
     *
     * @param poolId
     * @param newCommission
     **/
    setCommission(poolId: number, newCommission: [Perbill, AccountId32Like] | undefined): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_commission_max`].
     *
     * @param poolId
     * @param maxCommission
     **/
    setCommissionMax(poolId: number, maxCommission: Perbill): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_commission_change_rate`].
     *
     * @param poolId
     * @param changeRate
     **/
    setCommissionChangeRate(
      poolId: number,
      changeRate: PalletNominationPoolsCommissionChangeRate,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::claim_commission`].
     *
     * @param poolId
     **/
    claimCommission(poolId: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::adjust_pool_deposit`].
     *
     * @param poolId
     **/
    adjustPoolDeposit(poolId: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_commission_claim_permission`].
     *
     * @param poolId
     * @param permission
     **/
    setCommissionClaimPermission(
      poolId: number,
      permission: PalletNominationPoolsCommissionClaimPermission | undefined,
    ): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  rankedPolls: {
    /**
     * See [`Pallet::submit`].
     *
     * @param proposalOrigin
     * @param proposal
     * @param enactmentMoment
     **/
    submit(
      proposalOrigin: KitchensinkRuntimeOriginCaller,
      proposal: FrameSupportPreimagesBounded,
      enactmentMoment: FrameSupportScheduleDispatchTime,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::place_decision_deposit`].
     *
     * @param index
     **/
    placeDecisionDeposit(index: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::refund_decision_deposit`].
     *
     * @param index
     **/
    refundDecisionDeposit(index: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::cancel`].
     *
     * @param index
     **/
    cancel(index: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::kill`].
     *
     * @param index
     **/
    kill(index: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::nudge_referendum`].
     *
     * @param index
     **/
    nudgeReferendum(index: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::one_fewer_deciding`].
     *
     * @param track
     **/
    oneFewerDeciding(track: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::refund_submission_deposit`].
     *
     * @param index
     **/
    refundSubmissionDeposit(index: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_metadata`].
     *
     * @param index
     * @param maybeHash
     **/
    setMetadata(index: number, maybeHash: H256 | undefined): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  rankedCollective: {
    /**
     * See [`Pallet::add_member`].
     *
     * @param who
     **/
    addMember(who: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * See [`Pallet::promote_member`].
     *
     * @param who
     **/
    promoteMember(who: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * See [`Pallet::demote_member`].
     *
     * @param who
     **/
    demoteMember(who: MultiAddressLike): ISubmittableExtrinsic;

    /**
     * See [`Pallet::remove_member`].
     *
     * @param who
     * @param minRank
     **/
    removeMember(who: MultiAddressLike, minRank: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::vote`].
     *
     * @param poll
     * @param aye
     **/
    vote(poll: number, aye: boolean): ISubmittableExtrinsic;

    /**
     * See [`Pallet::cleanup_poll`].
     *
     * @param pollIndex
     * @param max
     **/
    cleanupPoll(pollIndex: number, max: number): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  assetConversion: {
    /**
     * See [`Pallet::create_pool`].
     *
     * @param asset1
     * @param asset2
     **/
    createPool(
      asset1: PalletAssetConversionNativeOrAssetId,
      asset2: PalletAssetConversionNativeOrAssetId,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::add_liquidity`].
     *
     * @param asset1
     * @param asset2
     * @param amount1Desired
     * @param amount2Desired
     * @param amount1Min
     * @param amount2Min
     * @param mintTo
     **/
    addLiquidity(
      asset1: PalletAssetConversionNativeOrAssetId,
      asset2: PalletAssetConversionNativeOrAssetId,
      amount1Desired: bigint,
      amount2Desired: bigint,
      amount1Min: bigint,
      amount2Min: bigint,
      mintTo: AccountId32Like,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::remove_liquidity`].
     *
     * @param asset1
     * @param asset2
     * @param lpTokenBurn
     * @param amount1MinReceive
     * @param amount2MinReceive
     * @param withdrawTo
     **/
    removeLiquidity(
      asset1: PalletAssetConversionNativeOrAssetId,
      asset2: PalletAssetConversionNativeOrAssetId,
      lpTokenBurn: bigint,
      amount1MinReceive: bigint,
      amount2MinReceive: bigint,
      withdrawTo: AccountId32Like,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::swap_exact_tokens_for_tokens`].
     *
     * @param path
     * @param amountIn
     * @param amountOutMin
     * @param sendTo
     * @param keepAlive
     **/
    swapExactTokensForTokens(
      path: Array<PalletAssetConversionNativeOrAssetId>,
      amountIn: bigint,
      amountOutMin: bigint,
      sendTo: AccountId32Like,
      keepAlive: boolean,
    ): ISubmittableExtrinsic;

    /**
     * See [`Pallet::swap_tokens_for_exact_tokens`].
     *
     * @param path
     * @param amountOut
     * @param amountInMax
     * @param sendTo
     * @param keepAlive
     **/
    swapTokensForExactTokens(
      path: Array<PalletAssetConversionNativeOrAssetId>,
      amountOut: bigint,
      amountInMax: bigint,
      sendTo: AccountId32Like,
      keepAlive: boolean,
    ): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  fastUnstake: {
    /**
     * See [`Pallet::register_fast_unstake`].
     *
     **/
    registerFastUnstake(): ISubmittableExtrinsic;

    /**
     * See [`Pallet::deregister`].
     *
     **/
    deregister(): ISubmittableExtrinsic;

    /**
     * See [`Pallet::control`].
     *
     * @param erasToCheck
     **/
    control(erasToCheck: number): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  messageQueue: {
    /**
     * See [`Pallet::reap_page`].
     *
     * @param messageOrigin
     * @param pageIndex
     **/
    reapPage(messageOrigin: number, pageIndex: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::execute_overweight`].
     *
     * @param messageOrigin
     * @param page
     * @param index
     * @param weightLimit
     **/
    executeOverweight(
      messageOrigin: number,
      page: number,
      index: number,
      weightLimit: SpWeightsWeightV2Weight,
    ): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  pov: {
    /**
     * See [`Pallet::emit_event`].
     *
     **/
    emitEvent(): ISubmittableExtrinsic;

    /**
     * See [`Pallet::noop`].
     *
     **/
    noop(): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  txPause: {
    /**
     * See [`Pallet::pause`].
     *
     * @param fullName
     **/
    pause(fullName: [Bytes, Bytes]): ISubmittableExtrinsic;

    /**
     * See [`Pallet::unpause`].
     *
     * @param ident
     **/
    unpause(ident: [Bytes, Bytes]): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  safeMode: {
    /**
     * See [`Pallet::enter`].
     *
     **/
    enter(): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_enter`].
     *
     **/
    forceEnter(): ISubmittableExtrinsic;

    /**
     * See [`Pallet::extend`].
     *
     **/
    extend(): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_extend`].
     *
     **/
    forceExtend(): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_exit`].
     *
     **/
    forceExit(): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_slash_deposit`].
     *
     * @param account
     * @param block
     **/
    forceSlashDeposit(account: AccountId32Like, block: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::release_deposit`].
     *
     * @param account
     * @param block
     **/
    releaseDeposit(account: AccountId32Like, block: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::force_release_deposit`].
     *
     * @param account
     * @param block
     **/
    forceReleaseDeposit(account: AccountId32Like, block: number): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  broker: {
    /**
     * See [`Pallet::configure`].
     *
     * @param config
     **/
    configure(config: PalletBrokerConfigRecord): ISubmittableExtrinsic;

    /**
     * See [`Pallet::reserve`].
     *
     * @param workload
     **/
    reserve(workload: Array<PalletBrokerScheduleItem>): ISubmittableExtrinsic;

    /**
     * See [`Pallet::unreserve`].
     *
     * @param itemIndex
     **/
    unreserve(itemIndex: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::set_lease`].
     *
     * @param task
     * @param until
     **/
    setLease(task: number, until: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::start_sales`].
     *
     * @param initialPrice
     * @param coreCount
     **/
    startSales(initialPrice: bigint, coreCount: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::purchase`].
     *
     * @param priceLimit
     **/
    purchase(priceLimit: bigint): ISubmittableExtrinsic;

    /**
     * See [`Pallet::renew`].
     *
     * @param core
     **/
    renew(core: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::transfer`].
     *
     * @param regionId
     * @param newOwner
     **/
    transfer(regionId: PalletBrokerRegionId, newOwner: AccountId32Like): ISubmittableExtrinsic;

    /**
     * See [`Pallet::partition`].
     *
     * @param regionId
     * @param pivot
     **/
    partition(regionId: PalletBrokerRegionId, pivot: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::interlace`].
     *
     * @param regionId
     * @param pivot
     **/
    interlace(regionId: PalletBrokerRegionId, pivot: PalletBrokerCoreMask): ISubmittableExtrinsic;

    /**
     * See [`Pallet::assign`].
     *
     * @param regionId
     * @param task
     * @param finality
     **/
    assign(regionId: PalletBrokerRegionId, task: number, finality: PalletBrokerFinality): ISubmittableExtrinsic;

    /**
     * See [`Pallet::pool`].
     *
     * @param regionId
     * @param payee
     * @param finality
     **/
    pool(regionId: PalletBrokerRegionId, payee: AccountId32Like, finality: PalletBrokerFinality): ISubmittableExtrinsic;

    /**
     * See [`Pallet::claim_revenue`].
     *
     * @param regionId
     * @param maxTimeslices
     **/
    claimRevenue(regionId: PalletBrokerRegionId, maxTimeslices: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::purchase_credit`].
     *
     * @param amount
     * @param beneficiary
     **/
    purchaseCredit(amount: bigint, beneficiary: AccountId32Like): ISubmittableExtrinsic;

    /**
     * See [`Pallet::drop_region`].
     *
     * @param regionId
     **/
    dropRegion(regionId: PalletBrokerRegionId): ISubmittableExtrinsic;

    /**
     * See [`Pallet::drop_contribution`].
     *
     * @param regionId
     **/
    dropContribution(regionId: PalletBrokerRegionId): ISubmittableExtrinsic;

    /**
     * See [`Pallet::drop_history`].
     *
     * @param when
     **/
    dropHistory(when: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::drop_renewal`].
     *
     * @param core
     * @param when
     **/
    dropRenewal(core: number, when: number): ISubmittableExtrinsic;

    /**
     * See [`Pallet::request_core_count`].
     *
     * @param coreCount
     **/
    requestCoreCount(coreCount: number): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
  mixnet: {
    /**
     * See `Pallet::register`.
     *
     * @param registration
     * @param signature
     **/
    register(registration: PalletMixnetRegistration, signature: SpMixnetAppSignature): ISubmittableExtrinsic;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: (...args: any[]) => ISubmittableExtrinsic;
  };
}
