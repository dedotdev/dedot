// Generated by @delightfuldot/codegen

import type { GenericRuntimeCalls, GenericRuntimeCall } from '@delightfuldot/types';
import type {
  RuntimeVersion,
  Block,
  Header,
  Option,
  OpaqueMetadata,
  BabeConfiguration,
  Epoch,
  Slot,
  OpaqueKeyOwnershipProof,
  AccountId32Like,
  Null,
  AccountId32,
  Nonce,
  RuntimeDispatchInfo,
  Bytes,
  FeeDetails,
  Balance,
  Weight,
  Location,
} from '@delightfuldot/codecs';

export interface RuntimeCalls extends GenericRuntimeCalls {
  /**
   * @runtimeapi: Core - 0xdf6acb689907609b
   * @version: 4
   **/
  core: {
    /**
     * Returns the version of the runtime.
     *
     * @callname: Core_version
     **/
    version: GenericRuntimeCall<() => Promise<RuntimeVersion>>;

    /**
     * Execute the given block.
     *
     * @callname: Core_execute_block
     **/
    executeBlock: GenericRuntimeCall<(block: Block) => Promise<null>>;

    /**
     * Initialize a block with the given header.
     *
     * @callname: Core_initialize_block
     **/
    initializeBlock: GenericRuntimeCall<(header: Header) => Promise<null>>;

    /**
     * Generic runtime call
     **/
    [method: string]: GenericRuntimeCall;
  };
  /**
   * @runtimeapi: Metadata - 0x37e397fc7c91f5e4
   * @version: 2
   **/
  metadata: {
    /**
     * Returns the metadata at a given version.
     *
     * @callname: Metadata_metadata_at_version
     **/
    metadataAtVersion: GenericRuntimeCall<(version: number) => Promise<Option<OpaqueMetadata>>>;

    /**
     * Returns the supported metadata versions.
     *
     * @callname: Metadata_metadata_versions
     **/
    metadataVersions: GenericRuntimeCall<() => Promise<Array<number>>>;

    /**
     * Returns the metadata of a runtime.
     *
     * @callname: Metadata_metadata
     **/
    metadata: GenericRuntimeCall<() => Promise<OpaqueMetadata>>;

    /**
     * Generic runtime call
     **/
    [method: string]: GenericRuntimeCall;
  };
  /**
   * @runtimeapi: BabeApi - 0xcbca25e39f142387
   * @version: 2
   **/
  babeApi: {
    /**
     * Return the configuration for BABE.
     *
     * @callname: BabeApi_configuration
     **/
    configuration: GenericRuntimeCall<() => Promise<BabeConfiguration>>;

    /**
     * Returns information regarding the current epoch.
     *
     * @callname: BabeApi_current_epoch
     **/
    currentEpoch: GenericRuntimeCall<() => Promise<Epoch>>;

    /**
     * Returns the slot that started the current epoch.
     *
     * @callname: BabeApi_current_epoch_start
     **/
    currentEpochStart: GenericRuntimeCall<() => Promise<Slot>>;

    /**
     * Returns information regarding the next epoch (which was already previously announced).
     *
     * @callname: BabeApi_next_epoch
     **/
    nextEpoch: GenericRuntimeCall<() => Promise<Epoch>>;

    /**
     * Generates a proof of key ownership for the given authority in the
     * current epoch. An example usage of this module is coupled with the
     * session historical module to prove that a given authority key is
     * tied to a given staking identity during a specific session. Proofs
     * of key ownership are necessary for submitting equivocation reports.
     * NOTE: even though the API takes a `slot` as parameter the current
     * implementations ignores this parameter and instead relies on this
     * method being called at the correct block height, i.e. any point at
     * which the epoch for the given slot is live on-chain. Future
     * implementations will instead use indexed data through an offchain
     * worker, not requiring older states to be available.
     *
     * @callname: BabeApi_generate_key_ownership_proof
     **/
    generateKeyOwnershipProof: GenericRuntimeCall<
      (slot: Slot, authorityId: AccountId32Like) => Promise<Option<OpaqueKeyOwnershipProof>>
    >;

    /**
     * Submits an unsigned extrinsic to report an equivocation. The caller
     * must provide the equivocation proof and a key ownership proof
     * (should be obtained using `generate_key_ownership_proof`). The
     * extrinsic will be unsigned and should only be accepted for local
     * authorship (not to be broadcast to the network). This method returns
     * `None` when creation of the extrinsic fails, e.g. if equivocation
     * reporting is disabled for the given runtime (i.e. this method is
     * hardcoded to return `None`). Only useful in an offchain context.
     *
     * @callname: BabeApi_submit_report_equivocation_unsigned_extrinsic
     **/
    submitReportEquivocationUnsignedExtrinsic: GenericRuntimeCall<
      (equivocationProof: BabeConfiguration, keyOwnerProof: OpaqueKeyOwnershipProof) => Promise<Option<Null>>
    >;

    /**
     * Generic runtime call
     **/
    [method: string]: GenericRuntimeCall;
  };
  /**
   * @runtimeapi: AuthorityDiscoveryApi - 0x687ad44ad37f03c2
   * @version: 1
   **/
  authorityDiscoveryApi: {
    /**
     * Retrieve authority identifiers of the current and next authority set.
     *
     * @callname: AuthorityDiscoveryApi_authorities
     **/
    authorities: GenericRuntimeCall<() => Promise<Array<AccountId32>>>;

    /**
     * Generic runtime call
     **/
    [method: string]: GenericRuntimeCall;
  };
  /**
   * @runtimeapi: AccountNonceApi - 0xbc9d89904f5b923f
   * @version: 1
   **/
  accountNonceApi: {
    /**
     * The API to query account nonce (aka transaction index)
     *
     * @callname: AccountNonceApi_account_nonce
     **/
    accountNonce: GenericRuntimeCall<(accountId: AccountId32Like) => Promise<Nonce>>;

    /**
     * Generic runtime call
     **/
    [method: string]: GenericRuntimeCall;
  };
  /**
   * @runtimeapi: AssetsApi - 0x8453b50b22293977
   * @version: 1
   **/
  assetsApi: {
    /**
     * Returns the list of `AssetId`s and corresponding balance that an `AccountId` has.
     *
     * @callname: AssetsApi_account_balances
     **/
    accountBalances: GenericRuntimeCall<(account: AccountId32Like) => Promise<Array<[number, Balance]>>>;

    /**
     * Generic runtime call
     **/
    [method: string]: GenericRuntimeCall;
  };
  /**
   * @runtimeapi: TransactionPaymentApi - 0x37c8bb1350a9a2a8
   * @version: 4
   **/
  transactionPaymentApi: {
    /**
     * The transaction info
     *
     * @callname: TransactionPaymentApi_query_info
     **/
    queryInfo: GenericRuntimeCall<(uxt: Bytes, len: number) => Promise<RuntimeDispatchInfo>>;

    /**
     * The transaction fee details
     *
     * @callname: TransactionPaymentApi_query_fee_details
     **/
    queryFeeDetails: GenericRuntimeCall<(uxt: Bytes, len: number) => Promise<FeeDetails>>;

    /**
     * Query the output of the current LengthToFee given some input
     *
     * @callname: TransactionPaymentApi_query_length_to_fee
     **/
    queryLengthToFee: GenericRuntimeCall<(length: number) => Promise<Balance>>;

    /**
     * Query the output of the current WeightToFee given some input
     *
     * @callname: TransactionPaymentApi_query_weight_to_fee
     **/
    queryWeightToFee: GenericRuntimeCall<(weight: Weight) => Promise<Balance>>;

    /**
     * Generic runtime call
     **/
    [method: string]: GenericRuntimeCall;
  };
  /**
   * @runtimeapi: AssetConversionApi - 0x8a8047a53a8277ec
   * @version: 1
   **/
  assetConversionApi: {
    /**
     * Get pool reserves
     *
     * @callname: AssetConversionApi_get_reserves
     **/
    getReserves: GenericRuntimeCall<(asset1: Location, asset2: Location) => Promise<Option<[Balance, Balance]>>>;

    /**
     * Quote price: exact tokens for tokens
     *
     * @callname: AssetConversionApi_quote_price_exact_tokens_for_tokens
     **/
    quotePriceExactTokensForTokens: GenericRuntimeCall<
      (asset1: Location, asset2: Location, amount: bigint, includeFee: boolean) => Promise<Option<Balance>>
    >;

    /**
     *
     * @callname: AssetConversionApi_quote_price_tokens_for_exact_tokens
     **/
    quotePriceTokensForExactTokens: GenericRuntimeCall<
      (asset1: Location, asset2: Location, amount: bigint, includeFee: boolean) => Promise<Option<Balance>>
    >;

    /**
     * Generic runtime call
     **/
    [method: string]: GenericRuntimeCall;
  };
}
