// Generated by @delightfuldot/codegen

import type {
  GenericChainTx,
  GenericTxCall,
  ISubmittableExtrinsic,
  ISubmittableResult,
  IRuntimeTxCall,
} from '@delightfuldot/types';
import type { MultiAddressLike, Extrinsic, BytesLike, H256, AccountId32Like, FixedBytes } from '@delightfuldot/codecs';
import type {
  AssetHubPolkadotRuntimeRuntimeCallLike,
  SpRuntimeMultiSignature,
  FrameSystemEventRecord,
  CumulusPrimitivesParachainInherentParachainInherentData,
  AssetHubPolkadotRuntimeSessionKeys,
  SpWeightsWeightV2Weight,
  XcmVersionedMultiLocation,
  XcmVersionedXcm,
  XcmVersionedMultiAssets,
  StagingXcmV3MultilocationMultiLocation,
  XcmV3WeightLimit,
  AssetHubPolkadotRuntimeOriginCaller,
  PalletMultisigTimepoint,
  AssetHubPolkadotRuntimeProxyType,
  PalletUniquesDestroyWitness,
  PalletNftsCollectionConfig,
  PalletNftsDestroyWitness,
  PalletNftsMintWitness,
  PalletNftsItemConfig,
  PalletNftsBitFlags,
  PalletNftsAttributeNamespace,
  PalletNftsCancelAttributesApprovalWitness,
  PalletNftsMintSettings,
  PalletNftsItemTip,
  PalletNftsPriceWithDirection,
  PalletNftsPreSignedMint,
  PalletNftsPreSignedAttributes,
} from './types';

type ChainSubmittableExtrinsic<T extends IRuntimeTxCall = AssetHubPolkadotRuntimeRuntimeCallLike> = Extrinsic<
  MultiAddressLike,
  T,
  SpRuntimeMultiSignature,
  any[]
> &
  ISubmittableExtrinsic<ISubmittableResult<FrameSystemEventRecord>>;

export interface ChainTx extends GenericChainTx {
  system: {
    /**
     * See [`Pallet::remark`].
     *
     * @param remark
     **/
    remark: GenericTxCall<
      (remark: BytesLike) => ChainSubmittableExtrinsic<{
        pallet: 'System';
        palletCall: {
          name: 'Remark';
          params: { remark: BytesLike };
        };
      }>
    >;

    /**
     * See [`Pallet::set_heap_pages`].
     *
     * @param pages
     **/
    setHeapPages: GenericTxCall<
      (pages: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'System';
        palletCall: {
          name: 'SetHeapPages';
          params: { pages: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::set_code`].
     *
     * @param code
     **/
    setCode: GenericTxCall<
      (code: BytesLike) => ChainSubmittableExtrinsic<{
        pallet: 'System';
        palletCall: {
          name: 'SetCode';
          params: { code: BytesLike };
        };
      }>
    >;

    /**
     * See [`Pallet::set_code_without_checks`].
     *
     * @param code
     **/
    setCodeWithoutChecks: GenericTxCall<
      (code: BytesLike) => ChainSubmittableExtrinsic<{
        pallet: 'System';
        palletCall: {
          name: 'SetCodeWithoutChecks';
          params: { code: BytesLike };
        };
      }>
    >;

    /**
     * See [`Pallet::set_storage`].
     *
     * @param items
     **/
    setStorage: GenericTxCall<
      (items: Array<[BytesLike, BytesLike]>) => ChainSubmittableExtrinsic<{
        pallet: 'System';
        palletCall: {
          name: 'SetStorage';
          params: { items: Array<[BytesLike, BytesLike]> };
        };
      }>
    >;

    /**
     * See [`Pallet::kill_storage`].
     *
     * @param keys
     **/
    killStorage: GenericTxCall<
      (keys: Array<BytesLike>) => ChainSubmittableExtrinsic<{
        pallet: 'System';
        palletCall: {
          name: 'KillStorage';
          params: { keys: Array<BytesLike> };
        };
      }>
    >;

    /**
     * See [`Pallet::kill_prefix`].
     *
     * @param prefix
     * @param subkeys
     **/
    killPrefix: GenericTxCall<
      (
        prefix: BytesLike,
        subkeys: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'System';
        palletCall: {
          name: 'KillPrefix';
          params: { prefix: BytesLike; subkeys: number };
        };
      }>
    >;

    /**
     * See [`Pallet::remark_with_event`].
     *
     * @param remark
     **/
    remarkWithEvent: GenericTxCall<
      (remark: BytesLike) => ChainSubmittableExtrinsic<{
        pallet: 'System';
        palletCall: {
          name: 'RemarkWithEvent';
          params: { remark: BytesLike };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  parachainSystem: {
    /**
     * See [`Pallet::set_validation_data`].
     *
     * @param data
     **/
    setValidationData: GenericTxCall<
      (data: CumulusPrimitivesParachainInherentParachainInherentData) => ChainSubmittableExtrinsic<{
        pallet: 'ParachainSystem';
        palletCall: {
          name: 'SetValidationData';
          params: { data: CumulusPrimitivesParachainInherentParachainInherentData };
        };
      }>
    >;

    /**
     * See [`Pallet::sudo_send_upward_message`].
     *
     * @param message
     **/
    sudoSendUpwardMessage: GenericTxCall<
      (message: BytesLike) => ChainSubmittableExtrinsic<{
        pallet: 'ParachainSystem';
        palletCall: {
          name: 'SudoSendUpwardMessage';
          params: { message: BytesLike };
        };
      }>
    >;

    /**
     * See [`Pallet::authorize_upgrade`].
     *
     * @param codeHash
     * @param checkVersion
     **/
    authorizeUpgrade: GenericTxCall<
      (
        codeHash: H256,
        checkVersion: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ParachainSystem';
        palletCall: {
          name: 'AuthorizeUpgrade';
          params: { codeHash: H256; checkVersion: boolean };
        };
      }>
    >;

    /**
     * See [`Pallet::enact_authorized_upgrade`].
     *
     * @param code
     **/
    enactAuthorizedUpgrade: GenericTxCall<
      (code: BytesLike) => ChainSubmittableExtrinsic<{
        pallet: 'ParachainSystem';
        palletCall: {
          name: 'EnactAuthorizedUpgrade';
          params: { code: BytesLike };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  timestamp: {
    /**
     * See [`Pallet::set`].
     *
     * @param now
     **/
    set: GenericTxCall<
      (now: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'Timestamp';
        palletCall: {
          name: 'Set';
          params: { now: bigint };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  balances: {
    /**
     * See [`Pallet::transfer_allow_death`].
     *
     * @param dest
     * @param value
     **/
    transferAllowDeath: GenericTxCall<
      (
        dest: MultiAddressLike,
        value: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Balances';
        palletCall: {
          name: 'TransferAllowDeath';
          params: { dest: MultiAddressLike; value: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::force_transfer`].
     *
     * @param source
     * @param dest
     * @param value
     **/
    forceTransfer: GenericTxCall<
      (
        source: MultiAddressLike,
        dest: MultiAddressLike,
        value: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Balances';
        palletCall: {
          name: 'ForceTransfer';
          params: { source: MultiAddressLike; dest: MultiAddressLike; value: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer_keep_alive`].
     *
     * @param dest
     * @param value
     **/
    transferKeepAlive: GenericTxCall<
      (
        dest: MultiAddressLike,
        value: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Balances';
        palletCall: {
          name: 'TransferKeepAlive';
          params: { dest: MultiAddressLike; value: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer_all`].
     *
     * @param dest
     * @param keepAlive
     **/
    transferAll: GenericTxCall<
      (
        dest: MultiAddressLike,
        keepAlive: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Balances';
        palletCall: {
          name: 'TransferAll';
          params: { dest: MultiAddressLike; keepAlive: boolean };
        };
      }>
    >;

    /**
     * See [`Pallet::force_unreserve`].
     *
     * @param who
     * @param amount
     **/
    forceUnreserve: GenericTxCall<
      (
        who: MultiAddressLike,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Balances';
        palletCall: {
          name: 'ForceUnreserve';
          params: { who: MultiAddressLike; amount: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::upgrade_accounts`].
     *
     * @param who
     **/
    upgradeAccounts: GenericTxCall<
      (who: Array<AccountId32Like>) => ChainSubmittableExtrinsic<{
        pallet: 'Balances';
        palletCall: {
          name: 'UpgradeAccounts';
          params: { who: Array<AccountId32Like> };
        };
      }>
    >;

    /**
     * See [`Pallet::force_set_balance`].
     *
     * @param who
     * @param newFree
     **/
    forceSetBalance: GenericTxCall<
      (
        who: MultiAddressLike,
        newFree: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Balances';
        palletCall: {
          name: 'ForceSetBalance';
          params: { who: MultiAddressLike; newFree: bigint };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  collatorSelection: {
    /**
     * See [`Pallet::set_invulnerables`].
     *
     * @param new_
     **/
    setInvulnerables: GenericTxCall<
      (new_: Array<AccountId32Like>) => ChainSubmittableExtrinsic<{
        pallet: 'CollatorSelection';
        palletCall: {
          name: 'SetInvulnerables';
          params: { new: Array<AccountId32Like> };
        };
      }>
    >;

    /**
     * See [`Pallet::set_desired_candidates`].
     *
     * @param max
     **/
    setDesiredCandidates: GenericTxCall<
      (max: number) => ChainSubmittableExtrinsic<{
        pallet: 'CollatorSelection';
        palletCall: {
          name: 'SetDesiredCandidates';
          params: { max: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_candidacy_bond`].
     *
     * @param bond
     **/
    setCandidacyBond: GenericTxCall<
      (bond: bigint) => ChainSubmittableExtrinsic<{
        pallet: 'CollatorSelection';
        palletCall: {
          name: 'SetCandidacyBond';
          params: { bond: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::register_as_candidate`].
     *
     **/
    registerAsCandidate: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'CollatorSelection';
        palletCall: {
          name: 'RegisterAsCandidate';
        };
      }>
    >;

    /**
     * See [`Pallet::leave_intent`].
     *
     **/
    leaveIntent: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'CollatorSelection';
        palletCall: {
          name: 'LeaveIntent';
        };
      }>
    >;

    /**
     * See [`Pallet::add_invulnerable`].
     *
     * @param who
     **/
    addInvulnerable: GenericTxCall<
      (who: AccountId32Like) => ChainSubmittableExtrinsic<{
        pallet: 'CollatorSelection';
        palletCall: {
          name: 'AddInvulnerable';
          params: { who: AccountId32Like };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_invulnerable`].
     *
     * @param who
     **/
    removeInvulnerable: GenericTxCall<
      (who: AccountId32Like) => ChainSubmittableExtrinsic<{
        pallet: 'CollatorSelection';
        palletCall: {
          name: 'RemoveInvulnerable';
          params: { who: AccountId32Like };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  session: {
    /**
     * See [`Pallet::set_keys`].
     *
     * @param keys
     * @param proof
     **/
    setKeys: GenericTxCall<
      (
        keys: AssetHubPolkadotRuntimeSessionKeys,
        proof: BytesLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Session';
        palletCall: {
          name: 'SetKeys';
          params: { keys: AssetHubPolkadotRuntimeSessionKeys; proof: BytesLike };
        };
      }>
    >;

    /**
     * See [`Pallet::purge_keys`].
     *
     **/
    purgeKeys: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'Session';
        palletCall: {
          name: 'PurgeKeys';
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  xcmpQueue: {
    /**
     * See [`Pallet::service_overweight`].
     *
     * @param index
     * @param weightLimit
     **/
    serviceOverweight: GenericTxCall<
      (
        index: bigint,
        weightLimit: SpWeightsWeightV2Weight,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'XcmpQueue';
        palletCall: {
          name: 'ServiceOverweight';
          params: { index: bigint; weightLimit: SpWeightsWeightV2Weight };
        };
      }>
    >;

    /**
     * See [`Pallet::suspend_xcm_execution`].
     *
     **/
    suspendXcmExecution: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'XcmpQueue';
        palletCall: {
          name: 'SuspendXcmExecution';
        };
      }>
    >;

    /**
     * See [`Pallet::resume_xcm_execution`].
     *
     **/
    resumeXcmExecution: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'XcmpQueue';
        palletCall: {
          name: 'ResumeXcmExecution';
        };
      }>
    >;

    /**
     * See [`Pallet::update_suspend_threshold`].
     *
     * @param new_
     **/
    updateSuspendThreshold: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'XcmpQueue';
        palletCall: {
          name: 'UpdateSuspendThreshold';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::update_drop_threshold`].
     *
     * @param new_
     **/
    updateDropThreshold: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'XcmpQueue';
        palletCall: {
          name: 'UpdateDropThreshold';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::update_resume_threshold`].
     *
     * @param new_
     **/
    updateResumeThreshold: GenericTxCall<
      (new_: number) => ChainSubmittableExtrinsic<{
        pallet: 'XcmpQueue';
        palletCall: {
          name: 'UpdateResumeThreshold';
          params: { new: number };
        };
      }>
    >;

    /**
     * See [`Pallet::update_threshold_weight`].
     *
     * @param new_
     **/
    updateThresholdWeight: GenericTxCall<
      (new_: SpWeightsWeightV2Weight) => ChainSubmittableExtrinsic<{
        pallet: 'XcmpQueue';
        palletCall: {
          name: 'UpdateThresholdWeight';
          params: { new: SpWeightsWeightV2Weight };
        };
      }>
    >;

    /**
     * See [`Pallet::update_weight_restrict_decay`].
     *
     * @param new_
     **/
    updateWeightRestrictDecay: GenericTxCall<
      (new_: SpWeightsWeightV2Weight) => ChainSubmittableExtrinsic<{
        pallet: 'XcmpQueue';
        palletCall: {
          name: 'UpdateWeightRestrictDecay';
          params: { new: SpWeightsWeightV2Weight };
        };
      }>
    >;

    /**
     * See [`Pallet::update_xcmp_max_individual_weight`].
     *
     * @param new_
     **/
    updateXcmpMaxIndividualWeight: GenericTxCall<
      (new_: SpWeightsWeightV2Weight) => ChainSubmittableExtrinsic<{
        pallet: 'XcmpQueue';
        palletCall: {
          name: 'UpdateXcmpMaxIndividualWeight';
          params: { new: SpWeightsWeightV2Weight };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  polkadotXcm: {
    /**
     * See [`Pallet::send`].
     *
     * @param dest
     * @param message
     **/
    send: GenericTxCall<
      (
        dest: XcmVersionedMultiLocation,
        message: XcmVersionedXcm,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'PolkadotXcm';
        palletCall: {
          name: 'Send';
          params: { dest: XcmVersionedMultiLocation; message: XcmVersionedXcm };
        };
      }>
    >;

    /**
     * See [`Pallet::teleport_assets`].
     *
     * @param dest
     * @param beneficiary
     * @param assets
     * @param feeAssetItem
     **/
    teleportAssets: GenericTxCall<
      (
        dest: XcmVersionedMultiLocation,
        beneficiary: XcmVersionedMultiLocation,
        assets: XcmVersionedMultiAssets,
        feeAssetItem: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'PolkadotXcm';
        palletCall: {
          name: 'TeleportAssets';
          params: {
            dest: XcmVersionedMultiLocation;
            beneficiary: XcmVersionedMultiLocation;
            assets: XcmVersionedMultiAssets;
            feeAssetItem: number;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::reserve_transfer_assets`].
     *
     * @param dest
     * @param beneficiary
     * @param assets
     * @param feeAssetItem
     **/
    reserveTransferAssets: GenericTxCall<
      (
        dest: XcmVersionedMultiLocation,
        beneficiary: XcmVersionedMultiLocation,
        assets: XcmVersionedMultiAssets,
        feeAssetItem: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'PolkadotXcm';
        palletCall: {
          name: 'ReserveTransferAssets';
          params: {
            dest: XcmVersionedMultiLocation;
            beneficiary: XcmVersionedMultiLocation;
            assets: XcmVersionedMultiAssets;
            feeAssetItem: number;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::execute`].
     *
     * @param message
     * @param maxWeight
     **/
    execute: GenericTxCall<
      (
        message: XcmVersionedXcm,
        maxWeight: SpWeightsWeightV2Weight,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'PolkadotXcm';
        palletCall: {
          name: 'Execute';
          params: { message: XcmVersionedXcm; maxWeight: SpWeightsWeightV2Weight };
        };
      }>
    >;

    /**
     * See [`Pallet::force_xcm_version`].
     *
     * @param location
     * @param version
     **/
    forceXcmVersion: GenericTxCall<
      (
        location: StagingXcmV3MultilocationMultiLocation,
        version: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'PolkadotXcm';
        palletCall: {
          name: 'ForceXcmVersion';
          params: { location: StagingXcmV3MultilocationMultiLocation; version: number };
        };
      }>
    >;

    /**
     * See [`Pallet::force_default_xcm_version`].
     *
     * @param maybeXcmVersion
     **/
    forceDefaultXcmVersion: GenericTxCall<
      (maybeXcmVersion: number | undefined) => ChainSubmittableExtrinsic<{
        pallet: 'PolkadotXcm';
        palletCall: {
          name: 'ForceDefaultXcmVersion';
          params: { maybeXcmVersion: number | undefined };
        };
      }>
    >;

    /**
     * See [`Pallet::force_subscribe_version_notify`].
     *
     * @param location
     **/
    forceSubscribeVersionNotify: GenericTxCall<
      (location: XcmVersionedMultiLocation) => ChainSubmittableExtrinsic<{
        pallet: 'PolkadotXcm';
        palletCall: {
          name: 'ForceSubscribeVersionNotify';
          params: { location: XcmVersionedMultiLocation };
        };
      }>
    >;

    /**
     * See [`Pallet::force_unsubscribe_version_notify`].
     *
     * @param location
     **/
    forceUnsubscribeVersionNotify: GenericTxCall<
      (location: XcmVersionedMultiLocation) => ChainSubmittableExtrinsic<{
        pallet: 'PolkadotXcm';
        palletCall: {
          name: 'ForceUnsubscribeVersionNotify';
          params: { location: XcmVersionedMultiLocation };
        };
      }>
    >;

    /**
     * See [`Pallet::limited_reserve_transfer_assets`].
     *
     * @param dest
     * @param beneficiary
     * @param assets
     * @param feeAssetItem
     * @param weightLimit
     **/
    limitedReserveTransferAssets: GenericTxCall<
      (
        dest: XcmVersionedMultiLocation,
        beneficiary: XcmVersionedMultiLocation,
        assets: XcmVersionedMultiAssets,
        feeAssetItem: number,
        weightLimit: XcmV3WeightLimit,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'PolkadotXcm';
        palletCall: {
          name: 'LimitedReserveTransferAssets';
          params: {
            dest: XcmVersionedMultiLocation;
            beneficiary: XcmVersionedMultiLocation;
            assets: XcmVersionedMultiAssets;
            feeAssetItem: number;
            weightLimit: XcmV3WeightLimit;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::limited_teleport_assets`].
     *
     * @param dest
     * @param beneficiary
     * @param assets
     * @param feeAssetItem
     * @param weightLimit
     **/
    limitedTeleportAssets: GenericTxCall<
      (
        dest: XcmVersionedMultiLocation,
        beneficiary: XcmVersionedMultiLocation,
        assets: XcmVersionedMultiAssets,
        feeAssetItem: number,
        weightLimit: XcmV3WeightLimit,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'PolkadotXcm';
        palletCall: {
          name: 'LimitedTeleportAssets';
          params: {
            dest: XcmVersionedMultiLocation;
            beneficiary: XcmVersionedMultiLocation;
            assets: XcmVersionedMultiAssets;
            feeAssetItem: number;
            weightLimit: XcmV3WeightLimit;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::force_suspension`].
     *
     * @param suspended
     **/
    forceSuspension: GenericTxCall<
      (suspended: boolean) => ChainSubmittableExtrinsic<{
        pallet: 'PolkadotXcm';
        palletCall: {
          name: 'ForceSuspension';
          params: { suspended: boolean };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  dmpQueue: {
    /**
     * See [`Pallet::service_overweight`].
     *
     * @param index
     * @param weightLimit
     **/
    serviceOverweight: GenericTxCall<
      (
        index: bigint,
        weightLimit: SpWeightsWeightV2Weight,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'DmpQueue';
        palletCall: {
          name: 'ServiceOverweight';
          params: { index: bigint; weightLimit: SpWeightsWeightV2Weight };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  toKusamaXcmRouter: {
    /**
     * See [`Pallet::report_bridge_status`].
     *
     * @param bridgeId
     * @param isCongested
     **/
    reportBridgeStatus: GenericTxCall<
      (
        bridgeId: H256,
        isCongested: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ToKusamaXcmRouter';
        palletCall: {
          name: 'ReportBridgeStatus';
          params: { bridgeId: H256; isCongested: boolean };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  utility: {
    /**
     * See [`Pallet::batch`].
     *
     * @param calls
     **/
    batch: GenericTxCall<
      (calls: Array<AssetHubPolkadotRuntimeRuntimeCallLike>) => ChainSubmittableExtrinsic<{
        pallet: 'Utility';
        palletCall: {
          name: 'Batch';
          params: { calls: Array<AssetHubPolkadotRuntimeRuntimeCallLike> };
        };
      }>
    >;

    /**
     * See [`Pallet::as_derivative`].
     *
     * @param index
     * @param call
     **/
    asDerivative: GenericTxCall<
      (
        index: number,
        call: AssetHubPolkadotRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Utility';
        palletCall: {
          name: 'AsDerivative';
          params: { index: number; call: AssetHubPolkadotRuntimeRuntimeCallLike };
        };
      }>
    >;

    /**
     * See [`Pallet::batch_all`].
     *
     * @param calls
     **/
    batchAll: GenericTxCall<
      (calls: Array<AssetHubPolkadotRuntimeRuntimeCallLike>) => ChainSubmittableExtrinsic<{
        pallet: 'Utility';
        palletCall: {
          name: 'BatchAll';
          params: { calls: Array<AssetHubPolkadotRuntimeRuntimeCallLike> };
        };
      }>
    >;

    /**
     * See [`Pallet::dispatch_as`].
     *
     * @param asOrigin
     * @param call
     **/
    dispatchAs: GenericTxCall<
      (
        asOrigin: AssetHubPolkadotRuntimeOriginCaller,
        call: AssetHubPolkadotRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Utility';
        palletCall: {
          name: 'DispatchAs';
          params: { asOrigin: AssetHubPolkadotRuntimeOriginCaller; call: AssetHubPolkadotRuntimeRuntimeCallLike };
        };
      }>
    >;

    /**
     * See [`Pallet::force_batch`].
     *
     * @param calls
     **/
    forceBatch: GenericTxCall<
      (calls: Array<AssetHubPolkadotRuntimeRuntimeCallLike>) => ChainSubmittableExtrinsic<{
        pallet: 'Utility';
        palletCall: {
          name: 'ForceBatch';
          params: { calls: Array<AssetHubPolkadotRuntimeRuntimeCallLike> };
        };
      }>
    >;

    /**
     * See [`Pallet::with_weight`].
     *
     * @param call
     * @param weight
     **/
    withWeight: GenericTxCall<
      (
        call: AssetHubPolkadotRuntimeRuntimeCallLike,
        weight: SpWeightsWeightV2Weight,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Utility';
        palletCall: {
          name: 'WithWeight';
          params: { call: AssetHubPolkadotRuntimeRuntimeCallLike; weight: SpWeightsWeightV2Weight };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  multisig: {
    /**
     * See [`Pallet::as_multi_threshold_1`].
     *
     * @param otherSignatories
     * @param call
     **/
    asMultiThreshold1: GenericTxCall<
      (
        otherSignatories: Array<AccountId32Like>,
        call: AssetHubPolkadotRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Multisig';
        palletCall: {
          name: 'AsMultiThreshold1';
          params: { otherSignatories: Array<AccountId32Like>; call: AssetHubPolkadotRuntimeRuntimeCallLike };
        };
      }>
    >;

    /**
     * See [`Pallet::as_multi`].
     *
     * @param threshold
     * @param otherSignatories
     * @param maybeTimepoint
     * @param call
     * @param maxWeight
     **/
    asMulti: GenericTxCall<
      (
        threshold: number,
        otherSignatories: Array<AccountId32Like>,
        maybeTimepoint: PalletMultisigTimepoint | undefined,
        call: AssetHubPolkadotRuntimeRuntimeCallLike,
        maxWeight: SpWeightsWeightV2Weight,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Multisig';
        palletCall: {
          name: 'AsMulti';
          params: {
            threshold: number;
            otherSignatories: Array<AccountId32Like>;
            maybeTimepoint: PalletMultisigTimepoint | undefined;
            call: AssetHubPolkadotRuntimeRuntimeCallLike;
            maxWeight: SpWeightsWeightV2Weight;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::approve_as_multi`].
     *
     * @param threshold
     * @param otherSignatories
     * @param maybeTimepoint
     * @param callHash
     * @param maxWeight
     **/
    approveAsMulti: GenericTxCall<
      (
        threshold: number,
        otherSignatories: Array<AccountId32Like>,
        maybeTimepoint: PalletMultisigTimepoint | undefined,
        callHash: FixedBytes<32>,
        maxWeight: SpWeightsWeightV2Weight,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Multisig';
        palletCall: {
          name: 'ApproveAsMulti';
          params: {
            threshold: number;
            otherSignatories: Array<AccountId32Like>;
            maybeTimepoint: PalletMultisigTimepoint | undefined;
            callHash: FixedBytes<32>;
            maxWeight: SpWeightsWeightV2Weight;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::cancel_as_multi`].
     *
     * @param threshold
     * @param otherSignatories
     * @param timepoint
     * @param callHash
     **/
    cancelAsMulti: GenericTxCall<
      (
        threshold: number,
        otherSignatories: Array<AccountId32Like>,
        timepoint: PalletMultisigTimepoint,
        callHash: FixedBytes<32>,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Multisig';
        palletCall: {
          name: 'CancelAsMulti';
          params: {
            threshold: number;
            otherSignatories: Array<AccountId32Like>;
            timepoint: PalletMultisigTimepoint;
            callHash: FixedBytes<32>;
          };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  proxy: {
    /**
     * See [`Pallet::proxy`].
     *
     * @param real
     * @param forceProxyType
     * @param call
     **/
    proxy: GenericTxCall<
      (
        real: MultiAddressLike,
        forceProxyType: AssetHubPolkadotRuntimeProxyType | undefined,
        call: AssetHubPolkadotRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Proxy';
        palletCall: {
          name: 'Proxy';
          params: {
            real: MultiAddressLike;
            forceProxyType: AssetHubPolkadotRuntimeProxyType | undefined;
            call: AssetHubPolkadotRuntimeRuntimeCallLike;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::add_proxy`].
     *
     * @param delegate
     * @param proxyType
     * @param delay
     **/
    addProxy: GenericTxCall<
      (
        delegate: MultiAddressLike,
        proxyType: AssetHubPolkadotRuntimeProxyType,
        delay: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Proxy';
        palletCall: {
          name: 'AddProxy';
          params: { delegate: MultiAddressLike; proxyType: AssetHubPolkadotRuntimeProxyType; delay: number };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_proxy`].
     *
     * @param delegate
     * @param proxyType
     * @param delay
     **/
    removeProxy: GenericTxCall<
      (
        delegate: MultiAddressLike,
        proxyType: AssetHubPolkadotRuntimeProxyType,
        delay: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Proxy';
        palletCall: {
          name: 'RemoveProxy';
          params: { delegate: MultiAddressLike; proxyType: AssetHubPolkadotRuntimeProxyType; delay: number };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_proxies`].
     *
     **/
    removeProxies: GenericTxCall<
      () => ChainSubmittableExtrinsic<{
        pallet: 'Proxy';
        palletCall: {
          name: 'RemoveProxies';
        };
      }>
    >;

    /**
     * See [`Pallet::create_pure`].
     *
     * @param proxyType
     * @param delay
     * @param index
     **/
    createPure: GenericTxCall<
      (
        proxyType: AssetHubPolkadotRuntimeProxyType,
        delay: number,
        index: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Proxy';
        palletCall: {
          name: 'CreatePure';
          params: { proxyType: AssetHubPolkadotRuntimeProxyType; delay: number; index: number };
        };
      }>
    >;

    /**
     * See [`Pallet::kill_pure`].
     *
     * @param spawner
     * @param proxyType
     * @param index
     * @param height
     * @param extIndex
     **/
    killPure: GenericTxCall<
      (
        spawner: MultiAddressLike,
        proxyType: AssetHubPolkadotRuntimeProxyType,
        index: number,
        height: number,
        extIndex: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Proxy';
        palletCall: {
          name: 'KillPure';
          params: {
            spawner: MultiAddressLike;
            proxyType: AssetHubPolkadotRuntimeProxyType;
            index: number;
            height: number;
            extIndex: number;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::announce`].
     *
     * @param real
     * @param callHash
     **/
    announce: GenericTxCall<
      (
        real: MultiAddressLike,
        callHash: H256,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Proxy';
        palletCall: {
          name: 'Announce';
          params: { real: MultiAddressLike; callHash: H256 };
        };
      }>
    >;

    /**
     * See [`Pallet::remove_announcement`].
     *
     * @param real
     * @param callHash
     **/
    removeAnnouncement: GenericTxCall<
      (
        real: MultiAddressLike,
        callHash: H256,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Proxy';
        palletCall: {
          name: 'RemoveAnnouncement';
          params: { real: MultiAddressLike; callHash: H256 };
        };
      }>
    >;

    /**
     * See [`Pallet::reject_announcement`].
     *
     * @param delegate
     * @param callHash
     **/
    rejectAnnouncement: GenericTxCall<
      (
        delegate: MultiAddressLike,
        callHash: H256,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Proxy';
        palletCall: {
          name: 'RejectAnnouncement';
          params: { delegate: MultiAddressLike; callHash: H256 };
        };
      }>
    >;

    /**
     * See [`Pallet::proxy_announced`].
     *
     * @param delegate
     * @param real
     * @param forceProxyType
     * @param call
     **/
    proxyAnnounced: GenericTxCall<
      (
        delegate: MultiAddressLike,
        real: MultiAddressLike,
        forceProxyType: AssetHubPolkadotRuntimeProxyType | undefined,
        call: AssetHubPolkadotRuntimeRuntimeCallLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Proxy';
        palletCall: {
          name: 'ProxyAnnounced';
          params: {
            delegate: MultiAddressLike;
            real: MultiAddressLike;
            forceProxyType: AssetHubPolkadotRuntimeProxyType | undefined;
            call: AssetHubPolkadotRuntimeRuntimeCallLike;
          };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  assets: {
    /**
     * See [`Pallet::create`].
     *
     * @param id
     * @param admin
     * @param minBalance
     **/
    create: GenericTxCall<
      (
        id: number,
        admin: MultiAddressLike,
        minBalance: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'Create';
          params: { id: number; admin: MultiAddressLike; minBalance: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::force_create`].
     *
     * @param id
     * @param owner
     * @param isSufficient
     * @param minBalance
     **/
    forceCreate: GenericTxCall<
      (
        id: number,
        owner: MultiAddressLike,
        isSufficient: boolean,
        minBalance: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'ForceCreate';
          params: { id: number; owner: MultiAddressLike; isSufficient: boolean; minBalance: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::start_destroy`].
     *
     * @param id
     **/
    startDestroy: GenericTxCall<
      (id: number) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'StartDestroy';
          params: { id: number };
        };
      }>
    >;

    /**
     * See [`Pallet::destroy_accounts`].
     *
     * @param id
     **/
    destroyAccounts: GenericTxCall<
      (id: number) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'DestroyAccounts';
          params: { id: number };
        };
      }>
    >;

    /**
     * See [`Pallet::destroy_approvals`].
     *
     * @param id
     **/
    destroyApprovals: GenericTxCall<
      (id: number) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'DestroyApprovals';
          params: { id: number };
        };
      }>
    >;

    /**
     * See [`Pallet::finish_destroy`].
     *
     * @param id
     **/
    finishDestroy: GenericTxCall<
      (id: number) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'FinishDestroy';
          params: { id: number };
        };
      }>
    >;

    /**
     * See [`Pallet::mint`].
     *
     * @param id
     * @param beneficiary
     * @param amount
     **/
    mint: GenericTxCall<
      (
        id: number,
        beneficiary: MultiAddressLike,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'Mint';
          params: { id: number; beneficiary: MultiAddressLike; amount: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::burn`].
     *
     * @param id
     * @param who
     * @param amount
     **/
    burn: GenericTxCall<
      (
        id: number,
        who: MultiAddressLike,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'Burn';
          params: { id: number; who: MultiAddressLike; amount: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer`].
     *
     * @param id
     * @param target
     * @param amount
     **/
    transfer: GenericTxCall<
      (
        id: number,
        target: MultiAddressLike,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'Transfer';
          params: { id: number; target: MultiAddressLike; amount: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer_keep_alive`].
     *
     * @param id
     * @param target
     * @param amount
     **/
    transferKeepAlive: GenericTxCall<
      (
        id: number,
        target: MultiAddressLike,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'TransferKeepAlive';
          params: { id: number; target: MultiAddressLike; amount: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::force_transfer`].
     *
     * @param id
     * @param source
     * @param dest
     * @param amount
     **/
    forceTransfer: GenericTxCall<
      (
        id: number,
        source: MultiAddressLike,
        dest: MultiAddressLike,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'ForceTransfer';
          params: { id: number; source: MultiAddressLike; dest: MultiAddressLike; amount: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::freeze`].
     *
     * @param id
     * @param who
     **/
    freeze: GenericTxCall<
      (
        id: number,
        who: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'Freeze';
          params: { id: number; who: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::thaw`].
     *
     * @param id
     * @param who
     **/
    thaw: GenericTxCall<
      (
        id: number,
        who: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'Thaw';
          params: { id: number; who: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::freeze_asset`].
     *
     * @param id
     **/
    freezeAsset: GenericTxCall<
      (id: number) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'FreezeAsset';
          params: { id: number };
        };
      }>
    >;

    /**
     * See [`Pallet::thaw_asset`].
     *
     * @param id
     **/
    thawAsset: GenericTxCall<
      (id: number) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'ThawAsset';
          params: { id: number };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer_ownership`].
     *
     * @param id
     * @param owner
     **/
    transferOwnership: GenericTxCall<
      (
        id: number,
        owner: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'TransferOwnership';
          params: { id: number; owner: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::set_team`].
     *
     * @param id
     * @param issuer
     * @param admin
     * @param freezer
     **/
    setTeam: GenericTxCall<
      (
        id: number,
        issuer: MultiAddressLike,
        admin: MultiAddressLike,
        freezer: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'SetTeam';
          params: { id: number; issuer: MultiAddressLike; admin: MultiAddressLike; freezer: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::set_metadata`].
     *
     * @param id
     * @param name
     * @param symbol
     * @param decimals
     **/
    setMetadata: GenericTxCall<
      (
        id: number,
        name: BytesLike,
        symbol: BytesLike,
        decimals: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'SetMetadata';
          params: { id: number; name: BytesLike; symbol: BytesLike; decimals: number };
        };
      }>
    >;

    /**
     * See [`Pallet::clear_metadata`].
     *
     * @param id
     **/
    clearMetadata: GenericTxCall<
      (id: number) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'ClearMetadata';
          params: { id: number };
        };
      }>
    >;

    /**
     * See [`Pallet::force_set_metadata`].
     *
     * @param id
     * @param name
     * @param symbol
     * @param decimals
     * @param isFrozen
     **/
    forceSetMetadata: GenericTxCall<
      (
        id: number,
        name: BytesLike,
        symbol: BytesLike,
        decimals: number,
        isFrozen: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'ForceSetMetadata';
          params: { id: number; name: BytesLike; symbol: BytesLike; decimals: number; isFrozen: boolean };
        };
      }>
    >;

    /**
     * See [`Pallet::force_clear_metadata`].
     *
     * @param id
     **/
    forceClearMetadata: GenericTxCall<
      (id: number) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'ForceClearMetadata';
          params: { id: number };
        };
      }>
    >;

    /**
     * See [`Pallet::force_asset_status`].
     *
     * @param id
     * @param owner
     * @param issuer
     * @param admin
     * @param freezer
     * @param minBalance
     * @param isSufficient
     * @param isFrozen
     **/
    forceAssetStatus: GenericTxCall<
      (
        id: number,
        owner: MultiAddressLike,
        issuer: MultiAddressLike,
        admin: MultiAddressLike,
        freezer: MultiAddressLike,
        minBalance: bigint,
        isSufficient: boolean,
        isFrozen: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'ForceAssetStatus';
          params: {
            id: number;
            owner: MultiAddressLike;
            issuer: MultiAddressLike;
            admin: MultiAddressLike;
            freezer: MultiAddressLike;
            minBalance: bigint;
            isSufficient: boolean;
            isFrozen: boolean;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::approve_transfer`].
     *
     * @param id
     * @param delegate
     * @param amount
     **/
    approveTransfer: GenericTxCall<
      (
        id: number,
        delegate: MultiAddressLike,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'ApproveTransfer';
          params: { id: number; delegate: MultiAddressLike; amount: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::cancel_approval`].
     *
     * @param id
     * @param delegate
     **/
    cancelApproval: GenericTxCall<
      (
        id: number,
        delegate: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'CancelApproval';
          params: { id: number; delegate: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::force_cancel_approval`].
     *
     * @param id
     * @param owner
     * @param delegate
     **/
    forceCancelApproval: GenericTxCall<
      (
        id: number,
        owner: MultiAddressLike,
        delegate: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'ForceCancelApproval';
          params: { id: number; owner: MultiAddressLike; delegate: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer_approved`].
     *
     * @param id
     * @param owner
     * @param destination
     * @param amount
     **/
    transferApproved: GenericTxCall<
      (
        id: number,
        owner: MultiAddressLike,
        destination: MultiAddressLike,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'TransferApproved';
          params: { id: number; owner: MultiAddressLike; destination: MultiAddressLike; amount: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::touch`].
     *
     * @param id
     **/
    touch: GenericTxCall<
      (id: number) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'Touch';
          params: { id: number };
        };
      }>
    >;

    /**
     * See [`Pallet::refund`].
     *
     * @param id
     * @param allowBurn
     **/
    refund: GenericTxCall<
      (
        id: number,
        allowBurn: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'Refund';
          params: { id: number; allowBurn: boolean };
        };
      }>
    >;

    /**
     * See [`Pallet::set_min_balance`].
     *
     * @param id
     * @param minBalance
     **/
    setMinBalance: GenericTxCall<
      (
        id: number,
        minBalance: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'SetMinBalance';
          params: { id: number; minBalance: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::touch_other`].
     *
     * @param id
     * @param who
     **/
    touchOther: GenericTxCall<
      (
        id: number,
        who: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'TouchOther';
          params: { id: number; who: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::refund_other`].
     *
     * @param id
     * @param who
     **/
    refundOther: GenericTxCall<
      (
        id: number,
        who: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'RefundOther';
          params: { id: number; who: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::block`].
     *
     * @param id
     * @param who
     **/
    block: GenericTxCall<
      (
        id: number,
        who: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Assets';
        palletCall: {
          name: 'Block';
          params: { id: number; who: MultiAddressLike };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  uniques: {
    /**
     * See [`Pallet::create`].
     *
     * @param collection
     * @param admin
     **/
    create: GenericTxCall<
      (
        collection: number,
        admin: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Uniques';
        palletCall: {
          name: 'Create';
          params: { collection: number; admin: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::force_create`].
     *
     * @param collection
     * @param owner
     * @param freeHolding
     **/
    forceCreate: GenericTxCall<
      (
        collection: number,
        owner: MultiAddressLike,
        freeHolding: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Uniques';
        palletCall: {
          name: 'ForceCreate';
          params: { collection: number; owner: MultiAddressLike; freeHolding: boolean };
        };
      }>
    >;

    /**
     * See [`Pallet::destroy`].
     *
     * @param collection
     * @param witness
     **/
    destroy: GenericTxCall<
      (
        collection: number,
        witness: PalletUniquesDestroyWitness,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Uniques';
        palletCall: {
          name: 'Destroy';
          params: { collection: number; witness: PalletUniquesDestroyWitness };
        };
      }>
    >;

    /**
     * See [`Pallet::mint`].
     *
     * @param collection
     * @param item
     * @param owner
     **/
    mint: GenericTxCall<
      (
        collection: number,
        item: number,
        owner: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Uniques';
        palletCall: {
          name: 'Mint';
          params: { collection: number; item: number; owner: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::burn`].
     *
     * @param collection
     * @param item
     * @param checkOwner
     **/
    burn: GenericTxCall<
      (
        collection: number,
        item: number,
        checkOwner: MultiAddressLike | undefined,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Uniques';
        palletCall: {
          name: 'Burn';
          params: { collection: number; item: number; checkOwner: MultiAddressLike | undefined };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer`].
     *
     * @param collection
     * @param item
     * @param dest
     **/
    transfer: GenericTxCall<
      (
        collection: number,
        item: number,
        dest: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Uniques';
        palletCall: {
          name: 'Transfer';
          params: { collection: number; item: number; dest: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::redeposit`].
     *
     * @param collection
     * @param items
     **/
    redeposit: GenericTxCall<
      (
        collection: number,
        items: Array<number>,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Uniques';
        palletCall: {
          name: 'Redeposit';
          params: { collection: number; items: Array<number> };
        };
      }>
    >;

    /**
     * See [`Pallet::freeze`].
     *
     * @param collection
     * @param item
     **/
    freeze: GenericTxCall<
      (
        collection: number,
        item: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Uniques';
        palletCall: {
          name: 'Freeze';
          params: { collection: number; item: number };
        };
      }>
    >;

    /**
     * See [`Pallet::thaw`].
     *
     * @param collection
     * @param item
     **/
    thaw: GenericTxCall<
      (
        collection: number,
        item: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Uniques';
        palletCall: {
          name: 'Thaw';
          params: { collection: number; item: number };
        };
      }>
    >;

    /**
     * See [`Pallet::freeze_collection`].
     *
     * @param collection
     **/
    freezeCollection: GenericTxCall<
      (collection: number) => ChainSubmittableExtrinsic<{
        pallet: 'Uniques';
        palletCall: {
          name: 'FreezeCollection';
          params: { collection: number };
        };
      }>
    >;

    /**
     * See [`Pallet::thaw_collection`].
     *
     * @param collection
     **/
    thawCollection: GenericTxCall<
      (collection: number) => ChainSubmittableExtrinsic<{
        pallet: 'Uniques';
        palletCall: {
          name: 'ThawCollection';
          params: { collection: number };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer_ownership`].
     *
     * @param collection
     * @param owner
     **/
    transferOwnership: GenericTxCall<
      (
        collection: number,
        owner: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Uniques';
        palletCall: {
          name: 'TransferOwnership';
          params: { collection: number; owner: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::set_team`].
     *
     * @param collection
     * @param issuer
     * @param admin
     * @param freezer
     **/
    setTeam: GenericTxCall<
      (
        collection: number,
        issuer: MultiAddressLike,
        admin: MultiAddressLike,
        freezer: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Uniques';
        palletCall: {
          name: 'SetTeam';
          params: { collection: number; issuer: MultiAddressLike; admin: MultiAddressLike; freezer: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::approve_transfer`].
     *
     * @param collection
     * @param item
     * @param delegate
     **/
    approveTransfer: GenericTxCall<
      (
        collection: number,
        item: number,
        delegate: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Uniques';
        palletCall: {
          name: 'ApproveTransfer';
          params: { collection: number; item: number; delegate: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::cancel_approval`].
     *
     * @param collection
     * @param item
     * @param maybeCheckDelegate
     **/
    cancelApproval: GenericTxCall<
      (
        collection: number,
        item: number,
        maybeCheckDelegate: MultiAddressLike | undefined,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Uniques';
        palletCall: {
          name: 'CancelApproval';
          params: { collection: number; item: number; maybeCheckDelegate: MultiAddressLike | undefined };
        };
      }>
    >;

    /**
     * See [`Pallet::force_item_status`].
     *
     * @param collection
     * @param owner
     * @param issuer
     * @param admin
     * @param freezer
     * @param freeHolding
     * @param isFrozen
     **/
    forceItemStatus: GenericTxCall<
      (
        collection: number,
        owner: MultiAddressLike,
        issuer: MultiAddressLike,
        admin: MultiAddressLike,
        freezer: MultiAddressLike,
        freeHolding: boolean,
        isFrozen: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Uniques';
        palletCall: {
          name: 'ForceItemStatus';
          params: {
            collection: number;
            owner: MultiAddressLike;
            issuer: MultiAddressLike;
            admin: MultiAddressLike;
            freezer: MultiAddressLike;
            freeHolding: boolean;
            isFrozen: boolean;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::set_attribute`].
     *
     * @param collection
     * @param maybeItem
     * @param key
     * @param value
     **/
    setAttribute: GenericTxCall<
      (
        collection: number,
        maybeItem: number | undefined,
        key: BytesLike,
        value: BytesLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Uniques';
        palletCall: {
          name: 'SetAttribute';
          params: { collection: number; maybeItem: number | undefined; key: BytesLike; value: BytesLike };
        };
      }>
    >;

    /**
     * See [`Pallet::clear_attribute`].
     *
     * @param collection
     * @param maybeItem
     * @param key
     **/
    clearAttribute: GenericTxCall<
      (
        collection: number,
        maybeItem: number | undefined,
        key: BytesLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Uniques';
        palletCall: {
          name: 'ClearAttribute';
          params: { collection: number; maybeItem: number | undefined; key: BytesLike };
        };
      }>
    >;

    /**
     * See [`Pallet::set_metadata`].
     *
     * @param collection
     * @param item
     * @param data
     * @param isFrozen
     **/
    setMetadata: GenericTxCall<
      (
        collection: number,
        item: number,
        data: BytesLike,
        isFrozen: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Uniques';
        palletCall: {
          name: 'SetMetadata';
          params: { collection: number; item: number; data: BytesLike; isFrozen: boolean };
        };
      }>
    >;

    /**
     * See [`Pallet::clear_metadata`].
     *
     * @param collection
     * @param item
     **/
    clearMetadata: GenericTxCall<
      (
        collection: number,
        item: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Uniques';
        palletCall: {
          name: 'ClearMetadata';
          params: { collection: number; item: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_collection_metadata`].
     *
     * @param collection
     * @param data
     * @param isFrozen
     **/
    setCollectionMetadata: GenericTxCall<
      (
        collection: number,
        data: BytesLike,
        isFrozen: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Uniques';
        palletCall: {
          name: 'SetCollectionMetadata';
          params: { collection: number; data: BytesLike; isFrozen: boolean };
        };
      }>
    >;

    /**
     * See [`Pallet::clear_collection_metadata`].
     *
     * @param collection
     **/
    clearCollectionMetadata: GenericTxCall<
      (collection: number) => ChainSubmittableExtrinsic<{
        pallet: 'Uniques';
        palletCall: {
          name: 'ClearCollectionMetadata';
          params: { collection: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_accept_ownership`].
     *
     * @param maybeCollection
     **/
    setAcceptOwnership: GenericTxCall<
      (maybeCollection: number | undefined) => ChainSubmittableExtrinsic<{
        pallet: 'Uniques';
        palletCall: {
          name: 'SetAcceptOwnership';
          params: { maybeCollection: number | undefined };
        };
      }>
    >;

    /**
     * See [`Pallet::set_collection_max_supply`].
     *
     * @param collection
     * @param maxSupply
     **/
    setCollectionMaxSupply: GenericTxCall<
      (
        collection: number,
        maxSupply: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Uniques';
        palletCall: {
          name: 'SetCollectionMaxSupply';
          params: { collection: number; maxSupply: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_price`].
     *
     * @param collection
     * @param item
     * @param price
     * @param whitelistedBuyer
     **/
    setPrice: GenericTxCall<
      (
        collection: number,
        item: number,
        price: bigint | undefined,
        whitelistedBuyer: MultiAddressLike | undefined,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Uniques';
        palletCall: {
          name: 'SetPrice';
          params: {
            collection: number;
            item: number;
            price: bigint | undefined;
            whitelistedBuyer: MultiAddressLike | undefined;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::buy_item`].
     *
     * @param collection
     * @param item
     * @param bidPrice
     **/
    buyItem: GenericTxCall<
      (
        collection: number,
        item: number,
        bidPrice: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Uniques';
        palletCall: {
          name: 'BuyItem';
          params: { collection: number; item: number; bidPrice: bigint };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  nfts: {
    /**
     * See [`Pallet::create`].
     *
     * @param admin
     * @param config
     **/
    create: GenericTxCall<
      (
        admin: MultiAddressLike,
        config: PalletNftsCollectionConfig,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'Create';
          params: { admin: MultiAddressLike; config: PalletNftsCollectionConfig };
        };
      }>
    >;

    /**
     * See [`Pallet::force_create`].
     *
     * @param owner
     * @param config
     **/
    forceCreate: GenericTxCall<
      (
        owner: MultiAddressLike,
        config: PalletNftsCollectionConfig,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'ForceCreate';
          params: { owner: MultiAddressLike; config: PalletNftsCollectionConfig };
        };
      }>
    >;

    /**
     * See [`Pallet::destroy`].
     *
     * @param collection
     * @param witness
     **/
    destroy: GenericTxCall<
      (
        collection: number,
        witness: PalletNftsDestroyWitness,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'Destroy';
          params: { collection: number; witness: PalletNftsDestroyWitness };
        };
      }>
    >;

    /**
     * See [`Pallet::mint`].
     *
     * @param collection
     * @param item
     * @param mintTo
     * @param witnessData
     **/
    mint: GenericTxCall<
      (
        collection: number,
        item: number,
        mintTo: MultiAddressLike,
        witnessData: PalletNftsMintWitness | undefined,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'Mint';
          params: {
            collection: number;
            item: number;
            mintTo: MultiAddressLike;
            witnessData: PalletNftsMintWitness | undefined;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::force_mint`].
     *
     * @param collection
     * @param item
     * @param mintTo
     * @param itemConfig
     **/
    forceMint: GenericTxCall<
      (
        collection: number,
        item: number,
        mintTo: MultiAddressLike,
        itemConfig: PalletNftsItemConfig,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'ForceMint';
          params: { collection: number; item: number; mintTo: MultiAddressLike; itemConfig: PalletNftsItemConfig };
        };
      }>
    >;

    /**
     * See [`Pallet::burn`].
     *
     * @param collection
     * @param item
     **/
    burn: GenericTxCall<
      (
        collection: number,
        item: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'Burn';
          params: { collection: number; item: number };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer`].
     *
     * @param collection
     * @param item
     * @param dest
     **/
    transfer: GenericTxCall<
      (
        collection: number,
        item: number,
        dest: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'Transfer';
          params: { collection: number; item: number; dest: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::redeposit`].
     *
     * @param collection
     * @param items
     **/
    redeposit: GenericTxCall<
      (
        collection: number,
        items: Array<number>,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'Redeposit';
          params: { collection: number; items: Array<number> };
        };
      }>
    >;

    /**
     * See [`Pallet::lock_item_transfer`].
     *
     * @param collection
     * @param item
     **/
    lockItemTransfer: GenericTxCall<
      (
        collection: number,
        item: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'LockItemTransfer';
          params: { collection: number; item: number };
        };
      }>
    >;

    /**
     * See [`Pallet::unlock_item_transfer`].
     *
     * @param collection
     * @param item
     **/
    unlockItemTransfer: GenericTxCall<
      (
        collection: number,
        item: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'UnlockItemTransfer';
          params: { collection: number; item: number };
        };
      }>
    >;

    /**
     * See [`Pallet::lock_collection`].
     *
     * @param collection
     * @param lockSettings
     **/
    lockCollection: GenericTxCall<
      (
        collection: number,
        lockSettings: PalletNftsBitFlags,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'LockCollection';
          params: { collection: number; lockSettings: PalletNftsBitFlags };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer_ownership`].
     *
     * @param collection
     * @param owner
     **/
    transferOwnership: GenericTxCall<
      (
        collection: number,
        owner: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'TransferOwnership';
          params: { collection: number; owner: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::set_team`].
     *
     * @param collection
     * @param issuer
     * @param admin
     * @param freezer
     **/
    setTeam: GenericTxCall<
      (
        collection: number,
        issuer: MultiAddressLike | undefined,
        admin: MultiAddressLike | undefined,
        freezer: MultiAddressLike | undefined,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'SetTeam';
          params: {
            collection: number;
            issuer: MultiAddressLike | undefined;
            admin: MultiAddressLike | undefined;
            freezer: MultiAddressLike | undefined;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::force_collection_owner`].
     *
     * @param collection
     * @param owner
     **/
    forceCollectionOwner: GenericTxCall<
      (
        collection: number,
        owner: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'ForceCollectionOwner';
          params: { collection: number; owner: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::force_collection_config`].
     *
     * @param collection
     * @param config
     **/
    forceCollectionConfig: GenericTxCall<
      (
        collection: number,
        config: PalletNftsCollectionConfig,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'ForceCollectionConfig';
          params: { collection: number; config: PalletNftsCollectionConfig };
        };
      }>
    >;

    /**
     * See [`Pallet::approve_transfer`].
     *
     * @param collection
     * @param item
     * @param delegate
     * @param maybeDeadline
     **/
    approveTransfer: GenericTxCall<
      (
        collection: number,
        item: number,
        delegate: MultiAddressLike,
        maybeDeadline: number | undefined,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'ApproveTransfer';
          params: { collection: number; item: number; delegate: MultiAddressLike; maybeDeadline: number | undefined };
        };
      }>
    >;

    /**
     * See [`Pallet::cancel_approval`].
     *
     * @param collection
     * @param item
     * @param delegate
     **/
    cancelApproval: GenericTxCall<
      (
        collection: number,
        item: number,
        delegate: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'CancelApproval';
          params: { collection: number; item: number; delegate: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::clear_all_transfer_approvals`].
     *
     * @param collection
     * @param item
     **/
    clearAllTransferApprovals: GenericTxCall<
      (
        collection: number,
        item: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'ClearAllTransferApprovals';
          params: { collection: number; item: number };
        };
      }>
    >;

    /**
     * See [`Pallet::lock_item_properties`].
     *
     * @param collection
     * @param item
     * @param lockMetadata
     * @param lockAttributes
     **/
    lockItemProperties: GenericTxCall<
      (
        collection: number,
        item: number,
        lockMetadata: boolean,
        lockAttributes: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'LockItemProperties';
          params: { collection: number; item: number; lockMetadata: boolean; lockAttributes: boolean };
        };
      }>
    >;

    /**
     * See [`Pallet::set_attribute`].
     *
     * @param collection
     * @param maybeItem
     * @param namespace
     * @param key
     * @param value
     **/
    setAttribute: GenericTxCall<
      (
        collection: number,
        maybeItem: number | undefined,
        namespace: PalletNftsAttributeNamespace,
        key: BytesLike,
        value: BytesLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'SetAttribute';
          params: {
            collection: number;
            maybeItem: number | undefined;
            namespace: PalletNftsAttributeNamespace;
            key: BytesLike;
            value: BytesLike;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::force_set_attribute`].
     *
     * @param setAs
     * @param collection
     * @param maybeItem
     * @param namespace
     * @param key
     * @param value
     **/
    forceSetAttribute: GenericTxCall<
      (
        setAs: AccountId32Like | undefined,
        collection: number,
        maybeItem: number | undefined,
        namespace: PalletNftsAttributeNamespace,
        key: BytesLike,
        value: BytesLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'ForceSetAttribute';
          params: {
            setAs: AccountId32Like | undefined;
            collection: number;
            maybeItem: number | undefined;
            namespace: PalletNftsAttributeNamespace;
            key: BytesLike;
            value: BytesLike;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::clear_attribute`].
     *
     * @param collection
     * @param maybeItem
     * @param namespace
     * @param key
     **/
    clearAttribute: GenericTxCall<
      (
        collection: number,
        maybeItem: number | undefined,
        namespace: PalletNftsAttributeNamespace,
        key: BytesLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'ClearAttribute';
          params: {
            collection: number;
            maybeItem: number | undefined;
            namespace: PalletNftsAttributeNamespace;
            key: BytesLike;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::approve_item_attributes`].
     *
     * @param collection
     * @param item
     * @param delegate
     **/
    approveItemAttributes: GenericTxCall<
      (
        collection: number,
        item: number,
        delegate: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'ApproveItemAttributes';
          params: { collection: number; item: number; delegate: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::cancel_item_attributes_approval`].
     *
     * @param collection
     * @param item
     * @param delegate
     * @param witness
     **/
    cancelItemAttributesApproval: GenericTxCall<
      (
        collection: number,
        item: number,
        delegate: MultiAddressLike,
        witness: PalletNftsCancelAttributesApprovalWitness,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'CancelItemAttributesApproval';
          params: {
            collection: number;
            item: number;
            delegate: MultiAddressLike;
            witness: PalletNftsCancelAttributesApprovalWitness;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::set_metadata`].
     *
     * @param collection
     * @param item
     * @param data
     **/
    setMetadata: GenericTxCall<
      (
        collection: number,
        item: number,
        data: BytesLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'SetMetadata';
          params: { collection: number; item: number; data: BytesLike };
        };
      }>
    >;

    /**
     * See [`Pallet::clear_metadata`].
     *
     * @param collection
     * @param item
     **/
    clearMetadata: GenericTxCall<
      (
        collection: number,
        item: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'ClearMetadata';
          params: { collection: number; item: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_collection_metadata`].
     *
     * @param collection
     * @param data
     **/
    setCollectionMetadata: GenericTxCall<
      (
        collection: number,
        data: BytesLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'SetCollectionMetadata';
          params: { collection: number; data: BytesLike };
        };
      }>
    >;

    /**
     * See [`Pallet::clear_collection_metadata`].
     *
     * @param collection
     **/
    clearCollectionMetadata: GenericTxCall<
      (collection: number) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'ClearCollectionMetadata';
          params: { collection: number };
        };
      }>
    >;

    /**
     * See [`Pallet::set_accept_ownership`].
     *
     * @param maybeCollection
     **/
    setAcceptOwnership: GenericTxCall<
      (maybeCollection: number | undefined) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'SetAcceptOwnership';
          params: { maybeCollection: number | undefined };
        };
      }>
    >;

    /**
     * See [`Pallet::set_collection_max_supply`].
     *
     * @param collection
     * @param maxSupply
     **/
    setCollectionMaxSupply: GenericTxCall<
      (
        collection: number,
        maxSupply: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'SetCollectionMaxSupply';
          params: { collection: number; maxSupply: number };
        };
      }>
    >;

    /**
     * See [`Pallet::update_mint_settings`].
     *
     * @param collection
     * @param mintSettings
     **/
    updateMintSettings: GenericTxCall<
      (
        collection: number,
        mintSettings: PalletNftsMintSettings,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'UpdateMintSettings';
          params: { collection: number; mintSettings: PalletNftsMintSettings };
        };
      }>
    >;

    /**
     * See [`Pallet::set_price`].
     *
     * @param collection
     * @param item
     * @param price
     * @param whitelistedBuyer
     **/
    setPrice: GenericTxCall<
      (
        collection: number,
        item: number,
        price: bigint | undefined,
        whitelistedBuyer: MultiAddressLike | undefined,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'SetPrice';
          params: {
            collection: number;
            item: number;
            price: bigint | undefined;
            whitelistedBuyer: MultiAddressLike | undefined;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::buy_item`].
     *
     * @param collection
     * @param item
     * @param bidPrice
     **/
    buyItem: GenericTxCall<
      (
        collection: number,
        item: number,
        bidPrice: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'BuyItem';
          params: { collection: number; item: number; bidPrice: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::pay_tips`].
     *
     * @param tips
     **/
    payTips: GenericTxCall<
      (tips: Array<PalletNftsItemTip>) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'PayTips';
          params: { tips: Array<PalletNftsItemTip> };
        };
      }>
    >;

    /**
     * See [`Pallet::create_swap`].
     *
     * @param offeredCollection
     * @param offeredItem
     * @param desiredCollection
     * @param maybeDesiredItem
     * @param maybePrice
     * @param duration
     **/
    createSwap: GenericTxCall<
      (
        offeredCollection: number,
        offeredItem: number,
        desiredCollection: number,
        maybeDesiredItem: number | undefined,
        maybePrice: PalletNftsPriceWithDirection | undefined,
        duration: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'CreateSwap';
          params: {
            offeredCollection: number;
            offeredItem: number;
            desiredCollection: number;
            maybeDesiredItem: number | undefined;
            maybePrice: PalletNftsPriceWithDirection | undefined;
            duration: number;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::cancel_swap`].
     *
     * @param offeredCollection
     * @param offeredItem
     **/
    cancelSwap: GenericTxCall<
      (
        offeredCollection: number,
        offeredItem: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'CancelSwap';
          params: { offeredCollection: number; offeredItem: number };
        };
      }>
    >;

    /**
     * See [`Pallet::claim_swap`].
     *
     * @param sendCollection
     * @param sendItem
     * @param receiveCollection
     * @param receiveItem
     * @param witnessPrice
     **/
    claimSwap: GenericTxCall<
      (
        sendCollection: number,
        sendItem: number,
        receiveCollection: number,
        receiveItem: number,
        witnessPrice: PalletNftsPriceWithDirection | undefined,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'ClaimSwap';
          params: {
            sendCollection: number;
            sendItem: number;
            receiveCollection: number;
            receiveItem: number;
            witnessPrice: PalletNftsPriceWithDirection | undefined;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::mint_pre_signed`].
     *
     * @param mintData
     * @param signature
     * @param signer
     **/
    mintPreSigned: GenericTxCall<
      (
        mintData: PalletNftsPreSignedMint,
        signature: SpRuntimeMultiSignature,
        signer: AccountId32Like,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'MintPreSigned';
          params: { mintData: PalletNftsPreSignedMint; signature: SpRuntimeMultiSignature; signer: AccountId32Like };
        };
      }>
    >;

    /**
     * See [`Pallet::set_attributes_pre_signed`].
     *
     * @param data
     * @param signature
     * @param signer
     **/
    setAttributesPreSigned: GenericTxCall<
      (
        data: PalletNftsPreSignedAttributes,
        signature: SpRuntimeMultiSignature,
        signer: AccountId32Like,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'Nfts';
        palletCall: {
          name: 'SetAttributesPreSigned';
          params: { data: PalletNftsPreSignedAttributes; signature: SpRuntimeMultiSignature; signer: AccountId32Like };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
  foreignAssets: {
    /**
     * See [`Pallet::create`].
     *
     * @param id
     * @param admin
     * @param minBalance
     **/
    create: GenericTxCall<
      (
        id: StagingXcmV3MultilocationMultiLocation,
        admin: MultiAddressLike,
        minBalance: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ForeignAssets';
        palletCall: {
          name: 'Create';
          params: { id: StagingXcmV3MultilocationMultiLocation; admin: MultiAddressLike; minBalance: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::force_create`].
     *
     * @param id
     * @param owner
     * @param isSufficient
     * @param minBalance
     **/
    forceCreate: GenericTxCall<
      (
        id: StagingXcmV3MultilocationMultiLocation,
        owner: MultiAddressLike,
        isSufficient: boolean,
        minBalance: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ForeignAssets';
        palletCall: {
          name: 'ForceCreate';
          params: {
            id: StagingXcmV3MultilocationMultiLocation;
            owner: MultiAddressLike;
            isSufficient: boolean;
            minBalance: bigint;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::start_destroy`].
     *
     * @param id
     **/
    startDestroy: GenericTxCall<
      (id: StagingXcmV3MultilocationMultiLocation) => ChainSubmittableExtrinsic<{
        pallet: 'ForeignAssets';
        palletCall: {
          name: 'StartDestroy';
          params: { id: StagingXcmV3MultilocationMultiLocation };
        };
      }>
    >;

    /**
     * See [`Pallet::destroy_accounts`].
     *
     * @param id
     **/
    destroyAccounts: GenericTxCall<
      (id: StagingXcmV3MultilocationMultiLocation) => ChainSubmittableExtrinsic<{
        pallet: 'ForeignAssets';
        palletCall: {
          name: 'DestroyAccounts';
          params: { id: StagingXcmV3MultilocationMultiLocation };
        };
      }>
    >;

    /**
     * See [`Pallet::destroy_approvals`].
     *
     * @param id
     **/
    destroyApprovals: GenericTxCall<
      (id: StagingXcmV3MultilocationMultiLocation) => ChainSubmittableExtrinsic<{
        pallet: 'ForeignAssets';
        palletCall: {
          name: 'DestroyApprovals';
          params: { id: StagingXcmV3MultilocationMultiLocation };
        };
      }>
    >;

    /**
     * See [`Pallet::finish_destroy`].
     *
     * @param id
     **/
    finishDestroy: GenericTxCall<
      (id: StagingXcmV3MultilocationMultiLocation) => ChainSubmittableExtrinsic<{
        pallet: 'ForeignAssets';
        palletCall: {
          name: 'FinishDestroy';
          params: { id: StagingXcmV3MultilocationMultiLocation };
        };
      }>
    >;

    /**
     * See [`Pallet::mint`].
     *
     * @param id
     * @param beneficiary
     * @param amount
     **/
    mint: GenericTxCall<
      (
        id: StagingXcmV3MultilocationMultiLocation,
        beneficiary: MultiAddressLike,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ForeignAssets';
        palletCall: {
          name: 'Mint';
          params: { id: StagingXcmV3MultilocationMultiLocation; beneficiary: MultiAddressLike; amount: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::burn`].
     *
     * @param id
     * @param who
     * @param amount
     **/
    burn: GenericTxCall<
      (
        id: StagingXcmV3MultilocationMultiLocation,
        who: MultiAddressLike,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ForeignAssets';
        palletCall: {
          name: 'Burn';
          params: { id: StagingXcmV3MultilocationMultiLocation; who: MultiAddressLike; amount: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer`].
     *
     * @param id
     * @param target
     * @param amount
     **/
    transfer: GenericTxCall<
      (
        id: StagingXcmV3MultilocationMultiLocation,
        target: MultiAddressLike,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ForeignAssets';
        palletCall: {
          name: 'Transfer';
          params: { id: StagingXcmV3MultilocationMultiLocation; target: MultiAddressLike; amount: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer_keep_alive`].
     *
     * @param id
     * @param target
     * @param amount
     **/
    transferKeepAlive: GenericTxCall<
      (
        id: StagingXcmV3MultilocationMultiLocation,
        target: MultiAddressLike,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ForeignAssets';
        palletCall: {
          name: 'TransferKeepAlive';
          params: { id: StagingXcmV3MultilocationMultiLocation; target: MultiAddressLike; amount: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::force_transfer`].
     *
     * @param id
     * @param source
     * @param dest
     * @param amount
     **/
    forceTransfer: GenericTxCall<
      (
        id: StagingXcmV3MultilocationMultiLocation,
        source: MultiAddressLike,
        dest: MultiAddressLike,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ForeignAssets';
        palletCall: {
          name: 'ForceTransfer';
          params: {
            id: StagingXcmV3MultilocationMultiLocation;
            source: MultiAddressLike;
            dest: MultiAddressLike;
            amount: bigint;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::freeze`].
     *
     * @param id
     * @param who
     **/
    freeze: GenericTxCall<
      (
        id: StagingXcmV3MultilocationMultiLocation,
        who: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ForeignAssets';
        palletCall: {
          name: 'Freeze';
          params: { id: StagingXcmV3MultilocationMultiLocation; who: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::thaw`].
     *
     * @param id
     * @param who
     **/
    thaw: GenericTxCall<
      (
        id: StagingXcmV3MultilocationMultiLocation,
        who: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ForeignAssets';
        palletCall: {
          name: 'Thaw';
          params: { id: StagingXcmV3MultilocationMultiLocation; who: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::freeze_asset`].
     *
     * @param id
     **/
    freezeAsset: GenericTxCall<
      (id: StagingXcmV3MultilocationMultiLocation) => ChainSubmittableExtrinsic<{
        pallet: 'ForeignAssets';
        palletCall: {
          name: 'FreezeAsset';
          params: { id: StagingXcmV3MultilocationMultiLocation };
        };
      }>
    >;

    /**
     * See [`Pallet::thaw_asset`].
     *
     * @param id
     **/
    thawAsset: GenericTxCall<
      (id: StagingXcmV3MultilocationMultiLocation) => ChainSubmittableExtrinsic<{
        pallet: 'ForeignAssets';
        palletCall: {
          name: 'ThawAsset';
          params: { id: StagingXcmV3MultilocationMultiLocation };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer_ownership`].
     *
     * @param id
     * @param owner
     **/
    transferOwnership: GenericTxCall<
      (
        id: StagingXcmV3MultilocationMultiLocation,
        owner: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ForeignAssets';
        palletCall: {
          name: 'TransferOwnership';
          params: { id: StagingXcmV3MultilocationMultiLocation; owner: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::set_team`].
     *
     * @param id
     * @param issuer
     * @param admin
     * @param freezer
     **/
    setTeam: GenericTxCall<
      (
        id: StagingXcmV3MultilocationMultiLocation,
        issuer: MultiAddressLike,
        admin: MultiAddressLike,
        freezer: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ForeignAssets';
        palletCall: {
          name: 'SetTeam';
          params: {
            id: StagingXcmV3MultilocationMultiLocation;
            issuer: MultiAddressLike;
            admin: MultiAddressLike;
            freezer: MultiAddressLike;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::set_metadata`].
     *
     * @param id
     * @param name
     * @param symbol
     * @param decimals
     **/
    setMetadata: GenericTxCall<
      (
        id: StagingXcmV3MultilocationMultiLocation,
        name: BytesLike,
        symbol: BytesLike,
        decimals: number,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ForeignAssets';
        palletCall: {
          name: 'SetMetadata';
          params: { id: StagingXcmV3MultilocationMultiLocation; name: BytesLike; symbol: BytesLike; decimals: number };
        };
      }>
    >;

    /**
     * See [`Pallet::clear_metadata`].
     *
     * @param id
     **/
    clearMetadata: GenericTxCall<
      (id: StagingXcmV3MultilocationMultiLocation) => ChainSubmittableExtrinsic<{
        pallet: 'ForeignAssets';
        palletCall: {
          name: 'ClearMetadata';
          params: { id: StagingXcmV3MultilocationMultiLocation };
        };
      }>
    >;

    /**
     * See [`Pallet::force_set_metadata`].
     *
     * @param id
     * @param name
     * @param symbol
     * @param decimals
     * @param isFrozen
     **/
    forceSetMetadata: GenericTxCall<
      (
        id: StagingXcmV3MultilocationMultiLocation,
        name: BytesLike,
        symbol: BytesLike,
        decimals: number,
        isFrozen: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ForeignAssets';
        palletCall: {
          name: 'ForceSetMetadata';
          params: {
            id: StagingXcmV3MultilocationMultiLocation;
            name: BytesLike;
            symbol: BytesLike;
            decimals: number;
            isFrozen: boolean;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::force_clear_metadata`].
     *
     * @param id
     **/
    forceClearMetadata: GenericTxCall<
      (id: StagingXcmV3MultilocationMultiLocation) => ChainSubmittableExtrinsic<{
        pallet: 'ForeignAssets';
        palletCall: {
          name: 'ForceClearMetadata';
          params: { id: StagingXcmV3MultilocationMultiLocation };
        };
      }>
    >;

    /**
     * See [`Pallet::force_asset_status`].
     *
     * @param id
     * @param owner
     * @param issuer
     * @param admin
     * @param freezer
     * @param minBalance
     * @param isSufficient
     * @param isFrozen
     **/
    forceAssetStatus: GenericTxCall<
      (
        id: StagingXcmV3MultilocationMultiLocation,
        owner: MultiAddressLike,
        issuer: MultiAddressLike,
        admin: MultiAddressLike,
        freezer: MultiAddressLike,
        minBalance: bigint,
        isSufficient: boolean,
        isFrozen: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ForeignAssets';
        palletCall: {
          name: 'ForceAssetStatus';
          params: {
            id: StagingXcmV3MultilocationMultiLocation;
            owner: MultiAddressLike;
            issuer: MultiAddressLike;
            admin: MultiAddressLike;
            freezer: MultiAddressLike;
            minBalance: bigint;
            isSufficient: boolean;
            isFrozen: boolean;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::approve_transfer`].
     *
     * @param id
     * @param delegate
     * @param amount
     **/
    approveTransfer: GenericTxCall<
      (
        id: StagingXcmV3MultilocationMultiLocation,
        delegate: MultiAddressLike,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ForeignAssets';
        palletCall: {
          name: 'ApproveTransfer';
          params: { id: StagingXcmV3MultilocationMultiLocation; delegate: MultiAddressLike; amount: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::cancel_approval`].
     *
     * @param id
     * @param delegate
     **/
    cancelApproval: GenericTxCall<
      (
        id: StagingXcmV3MultilocationMultiLocation,
        delegate: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ForeignAssets';
        palletCall: {
          name: 'CancelApproval';
          params: { id: StagingXcmV3MultilocationMultiLocation; delegate: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::force_cancel_approval`].
     *
     * @param id
     * @param owner
     * @param delegate
     **/
    forceCancelApproval: GenericTxCall<
      (
        id: StagingXcmV3MultilocationMultiLocation,
        owner: MultiAddressLike,
        delegate: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ForeignAssets';
        palletCall: {
          name: 'ForceCancelApproval';
          params: { id: StagingXcmV3MultilocationMultiLocation; owner: MultiAddressLike; delegate: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::transfer_approved`].
     *
     * @param id
     * @param owner
     * @param destination
     * @param amount
     **/
    transferApproved: GenericTxCall<
      (
        id: StagingXcmV3MultilocationMultiLocation,
        owner: MultiAddressLike,
        destination: MultiAddressLike,
        amount: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ForeignAssets';
        palletCall: {
          name: 'TransferApproved';
          params: {
            id: StagingXcmV3MultilocationMultiLocation;
            owner: MultiAddressLike;
            destination: MultiAddressLike;
            amount: bigint;
          };
        };
      }>
    >;

    /**
     * See [`Pallet::touch`].
     *
     * @param id
     **/
    touch: GenericTxCall<
      (id: StagingXcmV3MultilocationMultiLocation) => ChainSubmittableExtrinsic<{
        pallet: 'ForeignAssets';
        palletCall: {
          name: 'Touch';
          params: { id: StagingXcmV3MultilocationMultiLocation };
        };
      }>
    >;

    /**
     * See [`Pallet::refund`].
     *
     * @param id
     * @param allowBurn
     **/
    refund: GenericTxCall<
      (
        id: StagingXcmV3MultilocationMultiLocation,
        allowBurn: boolean,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ForeignAssets';
        palletCall: {
          name: 'Refund';
          params: { id: StagingXcmV3MultilocationMultiLocation; allowBurn: boolean };
        };
      }>
    >;

    /**
     * See [`Pallet::set_min_balance`].
     *
     * @param id
     * @param minBalance
     **/
    setMinBalance: GenericTxCall<
      (
        id: StagingXcmV3MultilocationMultiLocation,
        minBalance: bigint,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ForeignAssets';
        palletCall: {
          name: 'SetMinBalance';
          params: { id: StagingXcmV3MultilocationMultiLocation; minBalance: bigint };
        };
      }>
    >;

    /**
     * See [`Pallet::touch_other`].
     *
     * @param id
     * @param who
     **/
    touchOther: GenericTxCall<
      (
        id: StagingXcmV3MultilocationMultiLocation,
        who: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ForeignAssets';
        palletCall: {
          name: 'TouchOther';
          params: { id: StagingXcmV3MultilocationMultiLocation; who: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::refund_other`].
     *
     * @param id
     * @param who
     **/
    refundOther: GenericTxCall<
      (
        id: StagingXcmV3MultilocationMultiLocation,
        who: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ForeignAssets';
        palletCall: {
          name: 'RefundOther';
          params: { id: StagingXcmV3MultilocationMultiLocation; who: MultiAddressLike };
        };
      }>
    >;

    /**
     * See [`Pallet::block`].
     *
     * @param id
     * @param who
     **/
    block: GenericTxCall<
      (
        id: StagingXcmV3MultilocationMultiLocation,
        who: MultiAddressLike,
      ) => ChainSubmittableExtrinsic<{
        pallet: 'ForeignAssets';
        palletCall: {
          name: 'Block';
          params: { id: StagingXcmV3MultilocationMultiLocation; who: MultiAddressLike };
        };
      }>
    >;

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<(...args: any[]) => ChainSubmittableExtrinsic>;
  };
}
